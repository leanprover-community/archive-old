[
    {
        "content": "<p>Is there a way to unroll the <code>nat.mk</code> operation in a proof?  I have this tactic state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">nm</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n<span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span>\n<span class=\"n\">a0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.denom</span>\n<span class=\"n\">b0</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.denom</span>\n<span class=\"n\">a01</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">a.denom</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">b01</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">b.denom</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">a.num</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">b.num</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"n\">b.num</span><span class=\"o\">)</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a.num</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">b.num</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a.num</span> <span class=\"bp\">*</span> <span class=\"n\">b.num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">denom</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>The <code>h3</code> is almost in the form of the goal.  However,  the <code>mk</code> does tricky stuff to get to the final result for <code>.denom</code>.  If I ask Lean to <code>unfold mk at h3,</code>, it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mk</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">equational</span> <span class=\"n\">lemmas</span> <span class=\"n\">nor</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">projection</span>\n</code></pre></div>\n<p>The definition of <code>mk</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Form the quotient `n / d` where `n d : ℤ`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk_nat</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">mk_pnat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">d.succ_pnat</span>\n</code></pre></div>\n<p>The thing I am trying to prove is (I am stuck at the <code>sorry</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">rat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonzero_nat_to_int</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"n\">a</span><span class=\"o\">):</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int.coe_nat_ne_zero.mpr</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">combine_powers</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">):</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ring.pow_add_rev</span> <span class=\"mi\">2</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_injective</span>\n        <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n        <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b.denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">):</span>\n        <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">a0</span> <span class=\"o\">:=</span> <span class=\"n\">a.pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b0</span> <span class=\"o\">:=</span> <span class=\"n\">b.pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a01</span> <span class=\"o\">:=</span> <span class=\"n\">nonzero_nat_to_int</span> <span class=\"n\">a0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b01</span> <span class=\"o\">:=</span> <span class=\"n\">nonzero_nat_to_int</span> <span class=\"n\">b0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">rat.mul_def</span> <span class=\"n\">a.num</span> <span class=\"n\">a.denom</span> <span class=\"n\">b.num</span> <span class=\"n\">b.denom</span> <span class=\"n\">a01</span> <span class=\"n\">b01</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ha</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hb</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">combine_powers</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">c.denom</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">mk</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"c1\">-- ERROR</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222259355,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610339278
    }
]