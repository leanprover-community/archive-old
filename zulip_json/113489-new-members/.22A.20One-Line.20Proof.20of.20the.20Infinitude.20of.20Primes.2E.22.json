[
    {
        "content": "<p>I happened to see a tweet showing this proof and decided to formalize it. In Lean it's a considerably more than \"One-Line\" :) <a href=\"https://gist.github.com/jorendorff/e50832fc9d58722015c7a488cd62c860\">https://gist.github.com/jorendorff/e50832fc9d58722015c7a488cd62c860</a></p>",
        "id": 203888259,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594760759
    },
    {
        "content": "<p>rofl, there is surely no one-line proof of the infinitude of primes which starts with the line <code>notation `π` := real.pi</code> :-)</p>",
        "id": 203888398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594760827
    },
    {
        "content": "<p>i'm very new to Lean and mathlib, but advice and comments are welcome. In particular I'm sure there's a ton of unnecessary duffing in the middle part</p>",
        "id": 203888442,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594760854
    },
    {
        "content": "<p>It looks great. I need to finish preparing my talk for tomorrow though :-/</p>",
        "id": 203888550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594760895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306644\">@Jason Orendorff</span> Nice work! And if we put all the preliminaries in the library, then this is certainly a very slick 5-line proof!</p>",
        "id": 203915165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594786401
    },
    {
        "content": "<p>You can trim a couple lines from <code>prime_pos</code> with the proof <code>by exact_mod_cast hp.pos</code></p>",
        "id": 203967281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1594825613
    },
    {
        "content": "<p>Thanks, that's great.</p>",
        "id": 203967604,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594825775
    },
    {
        "content": "<p>Also discovered just now that almost every place I use <code>apply some_theorem.mp</code> or <code>.mpr</code> I can instead use <code>rw</code></p>",
        "id": 203975049,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594828813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/.22A.20One-Line.20Proof.20of.20the.20Infinitude.20of.20Primes.2E.22/near/203915165\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306644\">Jason Orendorff</span> Nice work! And if we put all the preliminaries in the library, then this is certainly a very slick 5-line proof!</p>\n</blockquote>\n<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> yep!</p>\n<p>of course most of these are way too specific to the proof. But maybe <code>dvd_product_of_mem</code> is a plausible addition, if it's not already there somewhere</p>",
        "id": 203977078,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594829703
    },
    {
        "content": "<p>Hmm. There's one place in <code>product_sin_pi_mul_eq_zero</code> where <code>exact_mod_cast</code> has trouble. The goal contains <code>p'.cast</code> rather than <code>↑p'</code> and I guess the tactic doesn't recognize <code>nat.cast</code> as a cast.</p>",
        "id": 203978140,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594830190
    },
    {
        "content": "<p>I wonder if that could be fixed in the library by marking an additional lemma as <code>@[norm_cast]</code></p>",
        "id": 203978725,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594830402
    },
    {
        "content": "<p>I guess not: <code>norm_cast: badly shaped lemma, lhs must contain at least one coe</code></p>",
        "id": 203979082,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1594830571
    }
]