[
    {
        "content": "<p>Would you punch me into my face for writing a spaghetti proof like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.map_append</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.join_append</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.join_append</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list.append_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_take</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_take</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.append_right_inj</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">list.append_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_drop</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_drop</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.append_left_inj</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_singleton</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_singleton</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.join_singleton</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.append_left_inj</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.nth_le_nth</span> <span class=\"n\">mltx</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congr_arg</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">wrap_str_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_append_append</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_take</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.nth_le_map</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mltx</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_drop</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_append_append</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list.map_singleton</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">list.append_assoc</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 310591416,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668684856
    },
    {
        "content": "<p>No need for violence of course, but this looks like a great place to use <code>simp</code>. Like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map_append</span><span class=\"o\">,</span> <span class=\"n\">list.join_append</span><span class=\"o\">,</span> <span class=\"n\">list.append_assoc</span><span class=\"o\">,</span> <span class=\"n\">list.map_take</span><span class=\"o\">,</span> <span class=\"n\">list.append_right_inj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">list.append_assoc</span><span class=\"o\">,</span> <span class=\"n\">list.map_drop</span><span class=\"o\">,</span> <span class=\"n\">list.append_left_inj</span><span class=\"o\">,</span> <span class=\"n\">list.map_singleton</span><span class=\"o\">,</span> <span class=\"n\">list.join_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyppp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc...</span>\n</code></pre></div>\n<p>I'd also wonder whether there are some sub-lemmas that might be useful.</p>\n<p>Floris also suggests <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">tactic#simp_rw</a></p>",
        "id": 310592596,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668685357
    },
    {
        "content": "<p>I am yet to refactor it a little bit, but that's not my point. As for sub-lemmas, I usually do a several levels of decomposition, but then I typically beat \"leaf lemmas\" in such an awkward way.</p>",
        "id": 310594653,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668686230
    },
    {
        "content": "<p>As for <code>simp_rw</code> I only learnt it existed a few days ago, but I already made use of it!</p>",
        "id": 310594726,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668686266
    }
]