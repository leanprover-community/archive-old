[
    {
        "content": "<p>I've extracted out an expression from a goal I have that I believe should simplify, but does not. What's  the right way to discharge this goal? I can't figure out the right way to generalize the statement over <code>bit0</code> or <code>bit1</code>. And, of course, this is just an instance of a larger pattern, so <code>dec_trivial</code> isn't useful for the general case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">equiv.swap</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">equiv.swap_apply_of_ne_of_ne</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin.succ_ne_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221617957,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609829745
    },
    {
        "content": "<p>Do you just want to solve this goal or are you asking about something more general?</p>",
        "id": 221618056,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609829864
    },
    {
        "content": "<p>You can do <code>rintro ⟨⟩</code> for this sorry.</p>",
        "id": 221618108,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609829910
    },
    {
        "content": "<p>I'm asking about how to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">\\</span><span class=\"n\">ne</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>where the <code>1</code>s are appropriate <code>fin _</code>. Or the same statement for any numeral. In the general case, so that I can pass that to a simp set, instead of proving this very particular instantiation as a side goal.</p>",
        "id": 221618201,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609830032
    },
    {
        "content": "<p>Would the following simp rules help?<br>\n<code>swap (bit0 x) (bit0 y) (bit1 z) = bit1 z</code><br>\n<code>swap (bit1 x) (bit1 y) (bit0 z) = bit0 z</code><br>\n<code>swap (f x) (f y) (f z) = f (swap x y z)</code></p>",
        "id": 221620566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609833264
    }
]