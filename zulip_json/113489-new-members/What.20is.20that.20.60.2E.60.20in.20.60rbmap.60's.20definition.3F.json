[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am wondering what <code>Prop . rbtree.default_lt</code> is supposed to be. The <code>.</code> operator here does not seem to be a function so it is probably some kind of built in, but I am not sure what it does.</p>\n<p>It is too bad that <code>β</code> here is not dependent on <code>α</code>. I have a use case where that would be useful and am going to try to redesign the <code>rbmap</code>. It is good there is not much there.</p>",
        "id": 178534982,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571472138
    },
    {
        "content": "<p>it's <code>\\a \\to \\a \\to Prop</code> defaulting to <code>rbtree.default_lt</code></p>",
        "id": 178535184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571472506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<p>I see. Does it get printed like <code>lt : auto_param (α → α → Prop) (name.mk_string \"default_lt\" (name.mk_string \"rbtree\" name.anonymous))</code> for you? </p>\n<p>Also...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">auto_param</span><span class=\"bp\">.</span><span class=\"n\">check_exists</span> <span class=\"n\">false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  lt (a.fst)\nterm\n  a.fst\nhas type\n  Type u : Type (u+1)\nbut is expected to have type\n  α : Type u\n</pre></div>\n\n\n<p>I am getting some type errors in both functions when trying to make a dependent map that I am not sure how to deal with. What is wrong here?</p>",
        "id": 178535481,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571473168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">auto_param</span><span class=\"bp\">.</span><span class=\"n\">check_exists</span> <span class=\"n\">false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  rbmap_lt lt\nterm\n  lt\nhas type\n  auto_param (α → α → Prop) (name.mk_string &quot;default_lt&quot; (name.mk_string &quot;rbtree&quot; name.anonymous)) : Type u\nbut is expected to have type\n  ?m_1 → ?m_1 → Prop : Type\n</pre></div>\n\n\n<p>I've managed to figure out the first part. Now what is this?</p>",
        "id": 178535651,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571473461
    },
    {
        "content": "<p>Notice that the type is <code>Type</code> instead of <code>Type u</code></p>",
        "id": 178535728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571473614
    },
    {
        "content": "<p>the auto_param thing is not the problem</p>",
        "id": 178535737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571473641
    },
    {
        "content": "<p>When you defined <code>rbmap_lt</code>, you used <code>Type</code> for the type of alpha and beta (i.e. non universe polymorphic), but then you apply it in <code>rbmap</code> where alpha and beta now live in arbitrary universes</p>",
        "id": 178535780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571473715
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">auto_param</span><span class=\"bp\">.</span><span class=\"n\">check_exists</span> <span class=\"n\">false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>So like this then. If I omit the universe levels in the type will it get inferred like so or will it be non-universe polymorphic? I can't check this easily because <code>#check</code> seems to fail with an error when I pass it this function.</p>",
        "id": 178535933,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571474035
    },
    {
        "content": "<p>The error is <code>invalid auto_param, unknown tactic 'rbtree.default_lt'</code>.</p>",
        "id": 178535976,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571474078
    },
    {
        "content": "<p>Yeah, I was running into the same problem: <code>rbtree.default_lt</code> doesn't seem to actually exist...</p>",
        "id": 178536028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571474169
    },
    {
        "content": "<p>it's in <code>init.data.rbtree.default</code></p>",
        "id": 178536038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474210
    },
    {
        "content": "<p>this checks for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">auto_param</span><span class=\"bp\">.</span><span class=\"n\">check_exists</span> <span class=\"n\">false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 178536050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474245
    },
    {
        "content": "<p>If I don't use <code>prelude</code> then I get a duplicate definition error because this is all defined in <code>init</code></p>",
        "id": 178536105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474309
    },
    {
        "content": "<blockquote>\n<p>So like this then. If I omit the universe levels in the type will it get inferred like so or will it be non-universe polymorphic?</p>\n</blockquote>\n<p>If you want to omit the universe level but keep it polymorphic, use <code>Type*</code> (or <code>Type _</code> which is equivalent). The core library deliberately uses universe variables everywhere, but in mathlib the preference is for <code>Type*</code> unless universe inference fails</p>",
        "id": 178536183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474502
    },
    {
        "content": "<blockquote>\n<p>If I don't use prelude then I get a duplicate definition error because this is all defined in init</p>\n</blockquote>\n<p>Actually, I am using that as well as I just copy pasted the <code>rbmap.basic</code> into my own project. But even if I insert that <code>#check rbmap</code> in the original file, I get the same error.</p>",
        "id": 178536227,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571474540
    },
    {
        "content": "<p>right, <code>#check rbmap</code> fails if you put it right after my code snippet</p>",
        "id": 178536244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474608
    },
    {
        "content": "<p>If you <code>import init.data.rbtree</code> instead, then it calls the tactic (which fails)</p>",
        "id": 178536291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474651
    },
    {
        "content": "<p>This is only a problem if you use the auto_param feature: that is, you leave implicit the <code>lt</code> argument</p>",
        "id": 178536309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474711
    },
    {
        "content": "<p><code>#check @rbmap</code> works fine</p>",
        "id": 178536312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474722
    },
    {
        "content": "<p>obviously it can't call the tactic if it doesn't exist. Normally it errors when the auto_param is defined, but as you can see from the code snippet this check was explicitly disabled</p>",
        "id": 178536361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474770
    },
    {
        "content": "<p>I'm not exactly sure why the definition was delayed, but I would guess it's because of bootstrapping the tactic framework</p>",
        "id": 178536381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571474833
    },
    {
        "content": "<p>Ok, I see. Just a bit more...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">drbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>I am a bit confused here. Why is this type definition right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">drbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>Shouldn't I have written it like this?</p>",
        "id": 178536546,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571475100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>drbmap :\n  Π (α : Type u_1),\n    (α → Type u_2) →\n    auto_param (α → α → Prop) (name.mk_string &quot;default_lt&quot; (name.mk_string &quot;rbtree&quot; name.anonymous)) →\n    Type (max u_1 u_2)\n</pre></div>\n\n\n<p>Also were you saying that the printing of the <code>auto_param</code> is not an error?</p>",
        "id": 178536608,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571475187
    },
    {
        "content": "<p>The only difference between your two definitions is the name of the bound variable</p>",
        "id": 178536791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571475495
    },
    {
        "content": "<p>the first one is confusing because the bound variable <code>α</code> shadows the <code>α</code> earlier in the definition</p>",
        "id": 178536798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571475527
    },
    {
        "content": "<p>The auto_param thing is supposed to be there. A <code>(x : foo . tac)</code> binder is elaborated to <code>(x : auto_param foo `tac)</code>. If you look at the definition, you will see that <code>auto_param α tac := α</code>, so this doesn't affect type correctness of anything. It just acts as a marker for the elaborator so it can remember what tactic you wanted to call in case the value is not provided</p>",
        "id": 178536874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571475647
    },
    {
        "content": "<p>A similar thing happens with <code>opt_param</code>, if you write <code>(x : foo := val)</code></p>",
        "id": 178536904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571475719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">rbnode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">leaf</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">red_node</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">black_node</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>Would it be worth it to change the above implementation of <code>mem</code> to the following one?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">rbnode</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">leaf</span>               <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">red_node</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">black_node</span> <span class=\"n\">l</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">r</span>\n</pre></div>\n\n\n<p>I am surprised it has not been done like this originally. Rather than traversing the left side of the tree first, it would be better to check immediately whether the element is a match and shortcut the search if it is.</p>",
        "id": 178537288,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571476322
    },
    {
        "content": "<p><code>or</code> does not short circuit in Lean</p>",
        "id": 178552539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571501634
    },
    {
        "content": "<p>The implementation of rbmaps in core is... not good. You should probably not literally reuse it, but adapt it to your purposes if you like. There is an <code>ordmap</code> branch on mathlib with a faster implementation, but it's not completely proven correct yet</p>",
        "id": 178552674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571501864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , <code>or</code> does short circuit because of the decidable instance</p>",
        "id": 178552716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571501890
    },
    {
        "content": "<p>here is an example that shows <code>or</code> does short circuit:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_bool</span> <span class=\"n\">false</span> <span class=\"err\">$</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 178555560,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1571506613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rbtree</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drbmap_lt</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">auto_param</span><span class=\"bp\">.</span><span class=\"n\">check_exists</span> <span class=\"n\">false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">drbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mk_drbmap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rbtree</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">drbmap_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">drbmap</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_list</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">to_list</span>\n\n<span class=\"n\">def</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">min</span>\n\n<span class=\"n\">def</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">max</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rev_fold</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">rev_fold</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">mem&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">rbnode</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">leaf</span>           <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">red_node</span> <span class=\"n\">l</span> <span class=\"bp\">⟨</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"bp\">⟩</span>  <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">mem&#39;</span> <span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"n\">mem&#39;</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">black_node</span> <span class=\"n\">l</span> <span class=\"bp\">⟨</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"bp\">⟩</span>  <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">lt</span> <span class=\"n\">v</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">mem&#39;</span> <span class=\"n\">l</span> <span class=\"bp\">∨</span> <span class=\"n\">mem&#39;</span> <span class=\"n\">r</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mem&#39;</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mem</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"o\">(</span><span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"s2\">&quot;drbmap_of &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">repr</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drbmap_lt_dec</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">drbmap_lt</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">drbmap_lt_dec</span> <span class=\"n\">m</span> <span class=\"bp\">⟨</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Here is what I did so far. However the <code>find</code> function is giving me some trouble.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rbnode</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">leaf</span>             <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">red_node</span> <span class=\"n\">a</span> <span class=\"n\">k&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h_lt</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"n\">k</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h_gt</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">b</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">in</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_eq</span> <span class=\"o\">:</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h_eq</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">black_node</span> <span class=\"n\">a</span> <span class=\"n\">k&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h_lt</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"n\">k</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">h_gt</span> <span class=\"o\">:</span> <span class=\"n\">lt</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">b</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">in</span>\n        <span class=\"k\">have</span> <span class=\"n\">h_eq</span> <span class=\"o\">:</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h_eq</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I have that <code>~ k &lt; k'.1 /\\ ~ k'.1 &lt; k</code>, so I should be able to prove that <code>k = k'.1</code>, but I am not sure how to do that. Any idea of how I should approach this?</p>",
        "id": 178594535,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571579821
    },
    {
        "content": "<hr>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_value</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>The last issue that I have before I am done with generalizing the <code>rbmap</code> is to figure out what to do with <code>to_value</code>. Here is how it was originally. If the tuple is replaced by a sigma type then the definition should be something like the following...</p>\n<p><code>def to_value : option (Σ α, β α) → option _</code></p>\n<p>What should that wildcard be here? Is it even possible to do anything here? I think there probably isn't as the type of the value depends on the key now, but I am not completely sure so I'll ask here.</p>",
        "id": 178595417,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571581621
    },
    {
        "content": "<p>With regard to my <code>find</code> questions, after some thinking I've come to the conclusion that there is no way that both sides of <code>lt</code> being false would mean that propositional equality must be true. <code>lt</code> can be anything and can for example compare only part of a key. So with that in mind, the right implementation would be...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rbnode</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">leaf</span>             <span class=\"o\">:=</span> <span class=\"n\">none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">red_node</span> <span class=\"n\">a</span> <span class=\"n\">k&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"n\">k</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">b</span>\n    <span class=\"k\">else</span> <span class=\"n\">k&#39;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rbnode</span><span class=\"bp\">.</span><span class=\"n\">black_node</span> <span class=\"n\">a</span> <span class=\"n\">k&#39;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"n\">k</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"n\">k&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">find</span> <span class=\"n\">b</span>\n    <span class=\"k\">else</span> <span class=\"n\">k&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">find_entry</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">find</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">lt</span> <span class=\"bp\">_</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</pre></div>\n\n\n<p>With this finishing the rest of the module is easy.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">contains</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">find_entry</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n\n<span class=\"n\">def</span> <span class=\"n\">from_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span>\n<span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">insert</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">mk_drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">drbmap</span>\n\n<span class=\"n\">def</span> <span class=\"n\">drbmap_of</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">.</span> <span class=\"n\">rbtree</span><span class=\"bp\">.</span><span class=\"n\">default_lt</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">drbmap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span>\n<span class=\"n\">drbmap</span><span class=\"bp\">.</span><span class=\"n\">from_list</span> <span class=\"n\">l</span> <span class=\"n\">lt</span>\n</pre></div>",
        "id": 178636345,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1571647575
    },
    {
        "content": "<p>As it turns out,  these red black trees not being able to understand that the key being put in is the same as the one being taken out when doing indexing into them is a lot bigger problem than I thought at first. With dependent types, that means that it can no longer reduce based on the key and it is causing me all sorts of issues downstream.</p>\n<p>These trees are useless as they are now. I'd recommend avoiding them in favor of something that uses direct equality.</p>",
        "id": 179116754,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572080055
    },
    {
        "content": "<p>Alternatively, it might be worth rewriting the above to use some kind of decidable trichotomy.</p>",
        "id": 179118367,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572083117
    }
]