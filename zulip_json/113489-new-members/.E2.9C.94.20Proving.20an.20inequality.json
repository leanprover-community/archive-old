[
    {
        "content": "<p>I'm not sure why <code> rw div_lt_div_left </code> does not work here?</p>",
        "id": 247135472,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627233384
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.pi</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"n\">dihedral_group</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`|`</span> <span class=\"n\">x</span> <span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">π</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real.pi</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">π</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">θ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"bp\">↑</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247135482,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627233408
    },
    {
        "content": "<p>you're such a tease :-) What's the error?</p>",
        "id": 247135615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627233653
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_lt_div_left\">docs#div_lt_div_left</a></p>",
        "id": 247135631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627233681
    },
    {
        "content": "<p>this function expects a linear_ordered_field. I strongly doubt that the default 2 in Lean is a member of a linear_ordered_field -- it will surely be the natural number 2.</p>",
        "id": 247135694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627233731
    },
    {
        "content": "<p><code>div_lt_div_left</code> is not true for the naturals, e.g. <code>2&lt;3</code> is true but <code>1/3&lt;1/2</code> is not.</p>",
        "id": 247135796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627233873
    },
    {
        "content": "<p>Oh okay, is there a similar lemma for real numbers/integers?</p>",
        "id": 247135818,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1627233939
    },
    {
        "content": "<p>real numbers: yes sure, the real numbers are a linear_ordered_field. Integers no, because it's not true for the integers: the same counterexample works.</p>",
        "id": 247135864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627233981
    },
    {
        "content": "<p>You should find the statement which is true and which you want, formalise it in a stand-alone lemma, and then try and prove it using <code>library_search</code>. This is a good way to find lemmas like this.</p>",
        "id": 247135901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627234066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"418334\">Shadman Sakib</span> has marked this topic as resolved.</p>",
        "id": 247136429,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627234923
    }
]