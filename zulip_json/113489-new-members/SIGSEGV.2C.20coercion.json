[
    {
        "content": "<p>the <code>ext</code> thing does clears a few things, I was wondering how it did <code>ext</code> to things that didn't look obviously equal</p>\n<p>that's a neat trick I like it makes it more like python :),</p>",
        "id": 202674667,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688371
    },
    {
        "content": "<p>I did want to ask, when I run your code Mario, I get errors with <code>  rw [mul_div_cancel' _ a.nz],</code> as it can't finish the proof. Is that issue also on your system? I just want to make sure my simp is the same as yours</p>",
        "id": 202674798,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688456
    },
    {
        "content": "<p>what error</p>",
        "id": 202674824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688477
    },
    {
        "content": "<p>\"rewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  a.val * (?m_1 / a.val)\"</p>\n<p>the line is red for me on vscode</p>",
        "id": 202674848,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688494
    },
    {
        "content": "<p>and you copied the entire rest of the file?</p>",
        "id": 202675006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688601
    },
    {
        "content": "<p>what is the state at the error</p>",
        "id": 202675015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688611
    },
    {
        "content": "<p>the lemma <code>G1_inv_val</code> should have fired from the <code>simp</code> on the first line resulting in the goal <code>⊢ a.val * (4 / a.val) = 4</code></p>",
        "id": 202675054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688659
    },
    {
        "content": "<p>yeah, that whole thing you sent over</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">ℚ</span>\n</code></pre></div>",
        "id": 202675055,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688662
    },
    {
        "content": "<p>yeah I'm not sure why mine is using arrows</p>",
        "id": 202675113,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688699
    },
    {
        "content": "<p>aha, have we changed the simp normal form for subtype.val recently? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 202675119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688701
    },
    {
        "content": "<p>I'm not using a particularly up to date mathlib, it could be my fault</p>",
        "id": 202675138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688730
    },
    {
        "content": "<p>ok, I get the same error as you after updating</p>",
        "id": 202675249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688815
    },
    {
        "content": "<p>I'm on lean 3.16.5</p>",
        "id": 202675254,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688823
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3204\">#3204</a></p>",
        "id": 202675269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688839
    },
    {
        "content": "<p>oh nice, ok it clears a few things</p>",
        "id": 202675273,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593688845
    },
    {
        "content": "<p><code>subtype</code> now uses <code>coe</code> everywhere as SNF</p>",
        "id": 202675289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593688867
    },
    {
        "content": "<p>apparently this changed a few days ago</p>",
        "id": 202675294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593688870
    },
    {
        "content": "<p>Yup, thanks to Floris. Finally readable subtypes <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 202675314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593688897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"c1\">-- One way to define a subtype (G1) out of a type (ℚ)</span>\n<span class=\"n\">def</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"c1\">-- This instead is a &quot;set&quot;</span>\n<span class=\"n\">def</span> <span class=\"n\">G2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">G1</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1</span><span class=\"bp\">.</span><span class=\"n\">nz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">G1mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">mul_pos</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1mul</span> <span class=\"bp\">⟩</span> <span class=\"c1\">-- now we have *</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">G1_mul_val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def of One --/</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">G1one</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">two_pos</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1one</span> <span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">G1_one_val</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- clearly follow other axioms since from field</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Def and Lemmas for Inverse --/</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1_val_pos</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">G1_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">four_pos</span> <span class=\"o\">(</span><span class=\"n\">G1_val_pos</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">G1_inv</span> <span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">G1_inv_val</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"c1\">-- what does extensionality mean in this context?</span>\n<span class=\"c\">/-</span><span class=\"cm\">- ##Extensionality and Simplification Lemmas  --/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hVal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">G1_val_mul_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">nz</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Group Axioms --/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_one</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- example (a : ℚ) : 1 / 2 * a = a := by norm_num</span>\n\n<span class=\"c1\">-- DK : Below was &#39;G1mul_left_inv&#39; which I thought was a typo given the goal</span>\n<span class=\"c1\">-- DK : so I changed it to right, also further amending the Poof.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">G1mul_left_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">nz</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- ##Poof G1 is a group  --/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- mul</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_assoc</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- one</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">G1one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- one_mul</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">G1one_mul</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_one</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- inv</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">G1_inv</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- mul_left_inv</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">G1mul_left_inv</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202675594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593689153
    },
    {
        "content": "<p>Okay so now we add the has_coe thing and any <code>a.val</code> to just the normal <code>a</code>...So sort of just 'factorised' out the .val from coercion</p>",
        "id": 202676021,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593689507
    },
    {
        "content": "<p>the function is still there, you will see an up arrow when lean prints it back to you</p>",
        "id": 202676083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593689538
    },
    {
        "content": "<p>but lean knows to insert the function automatically now</p>",
        "id": 202676096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593689556
    },
    {
        "content": "<p>but you do need more type ascriptions to make it happen in the right places</p>",
        "id": 202676107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593689572
    },
    {
        "content": "<p>ok, I guess that's good</p>",
        "id": 202676231,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593689693
    },
    {
        "content": "<p>thanks again</p>",
        "id": 202676264,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1593689713
    },
    {
        "content": "<p>(wrong thread)</p>",
        "id": 202689811,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593697454
    }
]