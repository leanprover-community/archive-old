[
    {
        "content": "<p>I have set of type Expr. Members of this set can belong to one of three categories alpha,beta or literal(I have a function which can take Expr and tell it's category). I need to find any element with category alpha. <br>\nI wanted to know how to iterate through sets to get the required result.</p>",
        "id": 271747414,
        "sender_full_name": "Prince Varshney",
        "timestamp": 1644760686
    },
    {
        "content": "<p>Can you post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? (Read the link to see what I'm asking)</p>",
        "id": 271772196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644795402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">var</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>   <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">err</span>  <span class=\"o\">:</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">prefix</span> <span class=\"bp\">`</span><span class=\"n\">atom</span><span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.atom</span>\n<span class=\"kd\">prefix</span> <span class=\"bp\">`-`</span>    <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.not</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`Λ`</span>     <span class=\"o\">:</span> <span class=\"mi\">51</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.and</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span><span class=\"n\">V</span><span class=\"bp\">`</span>     <span class=\"o\">:</span> <span class=\"mi\">52</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.or</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`⇒`</span>     <span class=\"o\">:</span> <span class=\"mi\">53</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.impl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">var.mk</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">var.mk</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">p1</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">p2</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">e3</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">V</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">e4</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"bp\">Λ</span>  <span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">e5</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">e1</span> <span class=\"bp\">⇒</span> <span class=\"n\">e2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">alpha</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">beta</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">literal</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">err</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">formula</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getFormulaType</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.literal</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">atom</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.literal</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.alpha</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"bp\">Λ</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.alpha</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">V</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.alpha</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"bp\">⇒</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.alpha</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"n\">V</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.beta</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"bp\">Λ</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.beta</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"bp\">⇒</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.beta</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.err</span> <span class=\"o\">:=</span> <span class=\"n\">formula.err</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">Expr.err</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">formula.err</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pickAlpha</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.err</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">getFormulaType</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n                <span class=\"bp\">|</span> <span class=\"n\">alpha</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n                <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pickAlpha</span> <span class=\"n\">xs</span>\n               <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">formulas</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">e1</span><span class=\"o\">,</span><span class=\"n\">e2</span><span class=\"o\">,</span><span class=\"n\">e3</span><span class=\"o\">,</span><span class=\"n\">e4</span><span class=\"o\">,</span><span class=\"n\">e5</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">pickAlpha</span> <span class=\"n\">formulas</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">pickAlphaType</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>I wanted to write pickAlpha function with sets instead of list</p>",
        "id": 271784781,
        "sender_full_name": "Prince Varshney",
        "timestamp": 1644814544
    },
    {
        "content": "<p>i.e pick any alpha formula given a set of Expr</p>",
        "id": 271784855,
        "sender_full_name": "Prince Varshney",
        "timestamp": 1644814641
    },
    {
        "content": "<p><code>set α</code> is just <code>α → Prop</code>, so you have no way to iterate over all elements. If you want to deal with finite test, then have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a>.</p>",
        "id": 271789567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644821282
    },
    {
        "content": "<p>If you are just looking example of an alpha in your set, don't care which one and are willing to use classical logic you could write such a function.  Using excluded middle you can consider the case where your set doesn't have alphas (return err) and when it does use choice to pick out a alpha.</p>",
        "id": 271812599,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1644837275
    },
    {
        "content": "<p>But this function won't be computable</p>",
        "id": 271831400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644848130
    }
]