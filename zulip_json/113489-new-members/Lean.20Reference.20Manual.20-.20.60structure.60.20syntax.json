[
    {
        "content": "<p>I am trying to get a better intuition for <code>structure</code> syntax in Lean.</p>\n<p>In Lean Reference Manual, Section 4.9,  <a href=\"https://leanprover.github.io/reference/declarations.html#structures-and-records\">https://leanprover.github.io/reference/declarations.html#structures-and-records</a> following is mentioned.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">constructor</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₁</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">fieldₙ</span> <span class=\"o\">:</span> <span class=\"n\">βₙ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Along with scheme for a single single constructor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo.constructor</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_to_foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_to_bar</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">field₁</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span><span class=\"o\">)</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">fieldₙ</span> <span class=\"o\">:</span> <span class=\"n\">βₙ</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I was wondering if <code>_to_foo : foo</code> should be <code>_to_baz : baz</code> or is there some reason why the constructor is taking in a term of <code>foo</code>?</p>",
        "id": 219466566,
        "sender_full_name": "Rajiv",
        "timestamp": 1607604300
    },
    {
        "content": "<p>Yeah that looks like a typo, checking the followiing in lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">constructora</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">constructors</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"kd\">extends</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">baz</span> <span class=\"n\">α</span>  <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">:=</span>\n<span class=\"n\">constructor</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₁l</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fieldₙ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>we see that <code>foo.constructor</code> takes a bar and a baz.</p>",
        "id": 219470717,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607606709
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">constructora</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">constructors</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"kd\">extends</span> <span class=\"n\">bar</span> <span class=\"o\">,</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span>\n<span class=\"n\">constructor</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">field₁l</span> <span class=\"o\">:</span> <span class=\"n\">field₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fieldₙ</span> <span class=\"o\">:</span> <span class=\"n\">field₁</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>makes it look more like the constructor there</p>",
        "id": 219471069,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607606940
    },
    {
        "content": "<p>Thanks Alex.</p>",
        "id": 219471479,
        "sender_full_name": "Rajiv",
        "timestamp": 1607607166
    }
]