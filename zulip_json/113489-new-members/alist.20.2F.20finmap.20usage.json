[
    {
        "content": "<p>In some proof I'm currently using a list of pairs as a map. (<code>list (string × ttype)</code>)<br>\nHowever, I need uniqueness of keys, which isn't guaranteed by this approach. As such, I found alist and finmap.<br>\nMy first question is: what is the difference between them?<br>\nMy second question is, how do you instantiate the type? I expected the type to take two types (key, value), but it instead takes a function (?).<br>\nMy third question is how you check if a specific key-value pair is in the map. In other words, how would you implement (<code>def in_ctx (val: string × ttype) (ctx:list (string × ttype)) := val ∈ ctx</code>)? I know there is a lookup operation, but I don't know how to handle the optional values.</p>\n<p>Thanks</p>",
        "id": 229627180,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615368640
    },
    {
        "content": "<p>The function you want to pass is something like <code>\\lam _ : key_type, value_type</code></p>",
        "id": 229627683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615368862
    },
    {
        "content": "<p>It's so you can have entries whose type depends on their key</p>",
        "id": 229627735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615368896
    },
    {
        "content": "<p>I implemented <code>def in_ctx (key: string) (val: ttype) (ctx:ctxtype) := ctx.lookup key = (option.some val)</code>, does it look correct?</p>",
        "id": 229630036,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615370018
    }
]