[
    {
        "content": "<p>Hi, I want some feedback on a proof on the GCD of the Fibonacci numbers. Part of the problem is that I don't really know what kind of feedback I'm supposed to be looking for, so please say whatever comes to mind. I think my tactic writing could be cleaner, and proofs could be shorter. Also, how can I clean up the <code>calc</code> proof for <code>gcd_fib_add_self'</code>? Below should be a MWE.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_add_self</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gcd_rec</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">gcd_rec</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- https://proofwiki.org/wiki/Consecutive_Fibonacci_Numbers_are_Coprime -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_succ_coprime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">ih</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">gcd_rec</span><span class=\"o\">,</span> <span class=\"n\">add_mod_right</span><span class=\"o\">,</span> <span class=\"n\">gcd_comm</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"n\">gcd_rec</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- https://proofwiki.org/wiki/Fibonacci_Number_in_terms_of_Smaller_Fibonacci_Numbers -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_add_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_right_comm</span> <span class=\"n\">m</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fib_succ_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fib_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">hm'</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">m'</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">use</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">hm2</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hm'</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fib_add_succ</span> <span class=\"n\">m'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_fib_add_self'</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq_zero_or_pos</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"k\">calc</span> <span class=\"n\">m.fib.gcd</span> <span class=\"n\">n.fib</span>\n        <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">hcop</span> <span class=\"o\">:=</span> <span class=\"n\">coprime.symm</span> <span class=\"o\">(</span><span class=\"n\">fib_succ_coprime</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gcd_comm</span><span class=\"o\">,</span> <span class=\"n\">gcd_comm</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">coprime.gcd_mul_left_cancel</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hcop</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">gcd_add_self</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m.fib.gcd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"o\">:</span>\n    <span class=\"kd\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">fib_add</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"kd\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m.fib.gcd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_fib_add_self</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">gcd_fib_add_self'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_fib_fib'</span> <span class=\"o\">(</span><span class=\"n\">m'</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"n\">m'</span> <span class=\"bp\">≤</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"n\">m'</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">gcd.induction</span> <span class=\"n\">m'</span> <span class=\"n\">n'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">mpos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">gcd_rec</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">mod_add_div</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">gcd_fib_add_self</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">gcd_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- `fib n` is a strong divisibility sequence</span>\n<span class=\"sd\">  https://proofwiki.org/wiki/GCD_of_Fibonacci_Numbers -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_fib_fib</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m_le_n</span> <span class=\"n\">n_le_m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">gcd_fib_fib'</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">m_le_n</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gcd_comm</span><span class=\"o\">,</span> <span class=\"n\">gcd_comm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gcd_fib_fib'</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">n_le_m</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 221261078,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609377528
    },
    {
        "content": "<p>You shouldn't need to redefine <code>fib</code> if you've imported <code>nat.fib</code>  there is already a definition of fib there (its a little different in definition but the functions are equal) so you should be able to use the existing one and its api.</p>",
        "id": 221261353,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609377867
    },
    {
        "content": "<p><code>  rw gcd_rec m (n + m), simp, rw gcd_rec m n,</code> contains what we call a \"nonterminal simp\", that is some use of simp that doesn't close the goal, these can sometimes make code hard to maintain (if simp gets smarter/better in future your proof might break). In this case you can replace the whole proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gcd_rec</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">gcd_rec</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>so the simp call is the only thing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221261431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609377975
    },
    {
        "content": "<p>Fixed. I just deleted the top headers.</p>",
        "id": 221261452,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609378008
    },
    {
        "content": "<p><code>rw [...]</code> followed by <code>assumption</code> or <code>exact h</code> where <code>h</code> is the name of a hypothesis in the context can usually be replaced by <code>rwa [...]</code>.</p>",
        "id": 221261548,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609378180
    },
    {
        "content": "<p>The buisness with <code>  obtain ⟨m', hm'⟩ : (∃ m', m' + 1 = m) := begin use m - 1, exact nat.sub_add_cancel hm2 end,</code> looks more complicated than it needs to be, there is a lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_pred_eq_of_pos\">docs#nat.succ_pred_eq_of_pos</a> which you should be able to use with hm2 to simplify the proof.</p>",
        "id": 221261557,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609378185
    },
    {
        "content": "<p>Personally I would try and see if everything can be done only with <code>fib_add_succ</code> rather than <code>fib_add</code>, subtracting nats is always annoying and if all the lemmas can be stated without it it might be possible to avoid it.</p>",
        "id": 221261875,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609378551
    },
    {
        "content": "<p>We tend to always put spaces after functions, like <code>fib (m + 1)</code> instead of <code>fib(m + 1)</code> even though it isn't needed when there are brackets</p>",
        "id": 221262008,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609378703
    },
    {
        "content": "<p>But yeah this mostly looks pretty good to me <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 221262101,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609378816
    },
    {
        "content": "<p>also spaces after <code>&lt;-</code> in <code>rw</code></p>",
        "id": 221262135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609378869
    },
    {
        "content": "<p>we really need a formatter, but given the state of lean parsing that's certainly not going to happen</p>",
        "id": 221262147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609378904
    },
    {
        "content": "<p>Ok, I'll put in the details.</p>",
        "id": 221265218,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609383468
    },
    {
        "content": "<p>I'll try to see if using <code>fib_add_succ</code> makes things shorter. Can I get push access for mathlib? Err, I'm not too familiar with git, but my user is 'acxxa'.</p>",
        "id": 221265716,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609384284
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/invitations\">Invite sent!</a></p>",
        "id": 221265795,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609384407
    },
    {
        "content": "<p>I would flip gcd_add_self to have the simpler expression on the RHS</p>",
        "id": 221269993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609390955
    },
    {
        "content": "<p>I'm in the process of making a PR to mathlib, but it seems I don't have access to push, even though I should. Maybe I need another invite? Here's the error message.</p>\n<div class=\"codehilite\" data-code-language=\"remote\"><pre><span></span><code>remote: error: You're not authorized to push to this branch. Visit https://docs.github.com/articles/about-protected-branches/ for more information.\nTo https://github.com/leanprover-community/mathlib\n ! [remote rejected]     master -&gt; master (protected branch hook declined)\nerror: failed to push some refs to 'https://github.com/leanprover-community/mathlib'```\n</code></pre></div>",
        "id": 221319632,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609451959
    },
    {
        "content": "<p>You cannot push to the master branch. You should create a new branch and push to that.</p>",
        "id": 221319728,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609452029
    },
    {
        "content": "<p><code>git checkout -b gcd-fib</code></p>",
        "id": 221319767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609452077
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5549\">#5549</a> ? I suspect that I must be doing something wrong. Sorry in advance for any git mistakes.</p>",
        "id": 221320628,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609452707
    },
    {
        "content": "<p>I don't see any git issues there. Congrats on opening your first PR!</p>",
        "id": 221320737,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609452802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> congrats on your first PR</p>",
        "id": 221337910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609481259
    },
    {
        "content": "<p>Thanks! That was simultaneously easier and harder than I expected it to be.</p>",
        "id": 221338835,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609483183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> In what sense? If there are any painpoints that we can make easier, we'd be happy to hear about them</p>",
        "id": 221339574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609484730
    },
    {
        "content": "<p>The opposite, actually. The PR itself felt smooth. It was working with Git that tripped me, and I had to get a friend to step me through everything. But that's more of a \"just keeping doing it and you'll figure it out\" thing.</p>",
        "id": 221339846,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609485209
    },
    {
        "content": "<p>Yeah, git can take some time to get used to. But there are good tutorials out there.</p>",
        "id": 221340008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609485489
    },
    {
        "content": "<p>Did you make use of our video tutorial on how to make a PR?</p>",
        "id": 221340009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609485501
    },
    {
        "content": "<p>Huh, I've just been diving in and picking things up when I need them. I guess I definitely should look through the community resources now, though... maybe even actually read Theorem Proving in Lean. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 221340344,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609486109
    },
    {
        "content": "<p>I use the same learning strategy (-;</p>",
        "id": 221340425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609486227
    }
]