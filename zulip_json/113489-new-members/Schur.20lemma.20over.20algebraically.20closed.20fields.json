[
    {
        "content": "<p>Hi! <br>\nI would like to try starting to contribute to mathlib and I thought about doing a bit of representation theory. I saw that we have Schur's lemma proved in the generality of preadditive categories with kernels but not yet the corollary for algebraically closed fields that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>dim</mtext><mo stretchy=\"false\">(</mo><mtext>Hom</mtext><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\text{dim}(\\text{Hom}(X,Y))\\le 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">dim</span></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">Hom</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. I thought that might be a good place to start but, in order to do it in the same level of generality than the Schur's lemma we have, I would need enriched categories over vectors spaces, which don't seem to be in mathlib. <br>\nI am therefore unsure where to start. Should I prove Schur's lemma only for representations of groups/algebras or should I try defining enriched categories? Also does my plan sounds reasonable for a first contribution?</p>",
        "id": 218312633,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606754959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> Welcome!<br>\n<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Has been working on getting enriched cats in mathlib. I'm afraid that it's quite tricky, and not really suited for a first project.<br>\nSo it might be better to just prove it in the non-categorical fashion first.</p>",
        "id": 218316438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606756527
    },
    {
        "content": "<p>Or choose a different topic (-; There's lots of low-hanging fruit out there.</p>",
        "id": 218316496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606756561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks for your answer. Do you think it would still be useful to do it in the non-categorical fashion or is it a loss of time given it will be done in greater generality later? Also I would be happy to have some suggestions of other easier projects that would be suited for a beginner.</p>",
        "id": 218321537,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606758955
    },
    {
        "content": "<p>My instinct is that if one wants e.g. representation theory of finite or compact groups there is plenty to do. Orthonormality of characters for a finite group would be a great thing to aim for.</p>",
        "id": 218322868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606759569
    },
    {
        "content": "<p>Thanks, for now I think I might try to aim at the density theorem, does that seems doable?</p>",
        "id": 218371016,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606786542
    },
    {
        "content": "<p>What is the density theorem?</p>",
        "id": 218371111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606786627
    },
    {
        "content": "<p>Surjectivity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>E</mi><mi>n</mi><msub><mi>d</mi><mi>k</mi></msub><mo stretchy=\"false\">(</mo><mi>V</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\rho : A \\to End_k(V)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mclose\">)</span></span></span></span> for an irreducible representation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> of a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span></p>",
        "id": 218371319,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606786852
    },
    {
        "content": "<p>Also, I saw that there is a categorical definition a simple object but I found no specific definition of a simple module. Thus I suppose I have to use the categorical definition but I am unsure how to do that. Is there somewhere a definition of the category of modules over a ring?</p>",
        "id": 218372524,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606788176
    },
    {
        "content": "<p>We have the category of modules over a ring. See the directory <code>src/algebra/category/</code> for \"basic\" categories in algebra.</p>",
        "id": 218380568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606798104
    },
    {
        "content": "<p>But the first thing you might want to do is prove that a rep is a \"categorically simple object\" iff \"statement in terms of subrepresentations\"</p>",
        "id": 218380596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606798179
    },
    {
        "content": "<p>There's also the whole business of viewing a rep as a map from <code>G</code> to <code>GL(V)</code>, or as a module over <code>k[G]</code>. And we haven't really fleshed out this dictionary yet. In maths its a 1-liner. But for formalisation I'm afraid we'll want some explicit trivialities to make life easier.</p>",
        "id": 218380658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606798245
    },
    {
        "content": "<p>This is also \"very low hanging fruit\". The problem with formalisation is: if you try to take shortcuts, and ignore the \"very low hanging fruit\", then suddenly the \"low hanging fruit\" will start to feel hard and out of reach.</p>",
        "id": 218380676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606798303
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">module_to_map_to_endomophism_algebra</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n                  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">smul_add</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n                  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">smul_comm</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">add_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_to_endomorphism_algebra_to_module</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">))</span>  <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">ρ.to_fun</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n   <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ρ.map_one'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n   <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ρ.map_mul'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n   <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n   <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n   <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ρ.map_add'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">},</span>\n   <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ρ.map_zero'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I began to work a bit on this and got a question. I want to define the <code>A</code>-module  structure on <code>V</code> given a map <code>(ρ : A →ₐ[R] (V →ₗ[R] V))</code>. For this I need to output instances of both <code>semimodule A V</code> and <code>is_scalar_tower R A V </code>, but if I try to do it like this <code>is_scalar_tower</code> give me an error \"failed to synthesize type class instance\", I guess because <code>is_scalar_tower</code> does not \"know\" yet that we have an instance of <code>semimodule A V</code>. Is there a simple way to get around this problem?</p>",
        "id": 218466203,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606849238
    },
    {
        "content": "<p>You could use a sigma type instead of the product type</p>",
        "id": 218475121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606853725
    },
    {
        "content": "<p>Something like <code>\\sigma [semimodule A V], is_scalar_tower ...</code></p>",
        "id": 218475401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606853855
    },
    {
        "content": "<p>Probably needs a <code>by exactI</code> as well</p>",
        "id": 218476336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606854271
    },
    {
        "content": "<p>Would this sigma type trick actually be useful when using it afterwards? I was going to suggest splitting it into two: first define the <code>semimodule A V</code>, and then have a definition of <code>is_scalar_tower R A V</code> assuming <code>[semimodule A V]</code> together with a proof that the smul is the one you want.</p>",
        "id": 218476761,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1606854473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> I think it would make more sense to keep it in a single definition, since it will be simpler then to prove that the two functions I defined are inverses of each other.</p>",
        "id": 218500234,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606868022
    },
    {
        "content": "<p>I tried <code>Σ [semimodule A V], (is_scalar_tower R A V)</code> but I get the following error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_scalar</span> <span class=\"n\">A</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>Why doesn't lean use the <code>semimodule A V</code>instance? Is it why I need <code>exactI</code>? What would be the syntax with <code>exactI</code>?</p>",
        "id": 218505976,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606873205
    },
    {
        "content": "<p><code>Σ [semimodule A V], by exactI (is_scalar_tower R A V)</code> maybe?</p>",
        "id": 218506393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606873620
    },
    {
        "content": "<p>Lean's type class inference system (the system whose job it is to supply the <code>[]</code> inputs) doesn't look in the local context, it only looks at stuff which happens before the colon. <code>by exactI</code> means \"throw everything in the local context at this point into the type class inference system\".</p>",
        "id": 218506496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606873692
    },
    {
        "content": "<p>I think the <code>[]</code>s in <code>Σ [semimodule A V], ...</code> are unlikely to do anything helpful</p>",
        "id": 218507005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606874276
    },
    {
        "content": "<p>Hum with <code>Σ [semimodule A V], by exactI (is_scalar_tower R A V)</code> I get this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">V</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Also I think that the brackets are indeed important because I get another error if I remove them.</p>",
        "id": 218507746,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606875023
    },
    {
        "content": "<p>oh, you'll need a variable name like <code>Σ (I : semimodule A V), by exactI (is_scalar_tower R A V)</code> then, I suppose</p>",
        "id": 218507771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606875072
    },
    {
        "content": "<p>Ah, <code>is_scalar_tower</code> is a Prop so you'll need <code>Σ'</code> or a <code>subtype</code></p>",
        "id": 218507796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606875109
    },
    {
        "content": "<p><code>Σ'</code> works, thanks!</p>",
        "id": 218508212,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606875645
    }
]