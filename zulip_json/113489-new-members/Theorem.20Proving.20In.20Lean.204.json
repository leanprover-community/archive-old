[
    {
        "content": "<p>Hello :) </p>\n<p>I'm working my way through the Theorem Proving in Lean 4 guide. I am working in a bit of a vacuum as no one in my department (UC, New Zealand) is particularly interested in LEAN. So I was hoping to get some thoughts on my code and answers to a few questions I have. </p>\n<p>First, how do I embed code examples nicely as in comments above?</p>",
        "id": 307652263,
        "sender_full_name": "Robert Culling",
        "timestamp": 1667446811
    },
    {
        "content": "<p>Welcome! Check out this link: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 307652285,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1667446842
    },
    {
        "content": "<p>Thank you Bryan :)</p>\n<p>As part of the exercises I wrote the following example. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">EXPAND_and_over_or</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">wp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">And.left</span> <span class=\"n\">w</span>\n  <span class=\"k\">have</span> <span class=\"n\">wqOr</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">And.right</span> <span class=\"n\">w</span>\n  <span class=\"n\">Or.elim</span> <span class=\"n\">wqOr</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">wq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">wpAq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">wp</span> <span class=\"n\">wq</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">Or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">wpAq</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">wr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">wpAr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">And.intro</span> <span class=\"n\">wp</span> <span class=\"n\">wr</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">Or.intro_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">wpAr</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">EXPAND_and_over_or</span>\n</code></pre></div>\n<p>The <code>#check</code> returns the following unexpected output</p>\n<p><code> EXPAND_and_over_or : ?m.478 ∧ (?m.479 ∨ ?m.480) → ?m.478 ∧ ?m.479 ∨ ?m.478 ∧ ?m.480 </code></p>\n<p>Can someone explain what the ?m.478 etc. are? Why aren't the types p,q,r in there?</p>",
        "id": 307652613,
        "sender_full_name": "Robert Culling",
        "timestamp": 1667447183
    },
    {
        "content": "<p>I believe the <code>?m</code> are there because you used curly braces for <code>p</code>, <code>q</code>, <code>r</code>, so they're treated as implicit variables and Lean gives them temporary names. (I haven't read TPiL4 yet but assuming it's like the Lean 3 version they should be covered in there fairly early on...).</p>\n<p>If you write <code>#check @EXPAND_and_over_or</code>, you should see p, q, and r (<code>@</code> turns all implicit variables into explicit ones and should also be covered in TPiL4).</p>",
        "id": 307652883,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1667447458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> thank you :) Removing the explicit typing of p q r fixed that issue.</p>",
        "id": 307656236,
        "sender_full_name": "Robert Culling",
        "timestamp": 1667450033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"525668\">@Robert Culling</span> I also learnt lean in a vacuum and let me assure you that a combination of solving problems by writing code and asking questions here when you're not sure can work fine as a pathway to learning lean</p>",
        "id": 307667252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667459125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thanks for your message :) I'm enjoying the process. I wrote my thesis on the algebraic geometry of semirings, so I am aiming to learn what is required to formalize the statements and proofs of those theorems.</p>",
        "id": 307841039,
        "sender_full_name": "Robert Culling",
        "timestamp": 1667510252
    }
]