[
    {
        "content": "<p>There is a <code>vector</code> namespace in <code>lean/library/data/vector.lean</code> which I've been trying to open with no success:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">vector</span> <span class=\"c1\">--&gt; invalid namespace name &#39;vector&#39;</span>\n</code></pre></div>\n\n\n<p>Anyone can point me to what I could be doing wrong here?</p>",
        "id": 198002679,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589840489
    },
    {
        "content": "<p>I've not looked at the file but are you sure the namespace exists? That's different to the <code>vector</code> type existing</p>",
        "id": 198002976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589840672
    },
    {
        "content": "<p>I'm looking at the namespace, line 16 in the file.</p>",
        "id": 198003035,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589840722
    },
    {
        "content": "<p>I just can't seem to be able to use <code>vector</code> in any way.</p>",
        "id": 198003053,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589840743
    },
    {
        "content": "<p>Just making sure, did you <code>import data.vector</code>?</p>",
        "id": 198003067,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589840759
    },
    {
        "content": "<p>This may be it. I only tried <code>import vector</code>.<br>\nYes, that is it! <br>\nThanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 198003132,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1589840786
    },
    {
        "content": "<p>Aah -- so this file is in core but not imported automatically!</p>",
        "id": 198005317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589842334
    },
    {
        "content": "<p>I think everything in <code>lean/library/init</code> is imported when you start Lean up, but perhaps other things are not.</p>",
        "id": 198005374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589842381
    },
    {
        "content": "<p>yes... and as a result the mathlib version has the awkward name <code>data.vector2</code></p>",
        "id": 198005390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589842396
    },
    {
        "content": "<p>I only learnt about this phenomenon recently.</p>",
        "id": 198005392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589842399
    },
    {
        "content": "<p>More precisely, any file not starting with <code>prelude</code> has an implicit <code>import init</code> at the start, which does the same thing as actually typing <code>import init</code> in your file. That is, it looks for <code>init.lean</code> or <code>init/default.lean</code> in the search path</p>",
        "id": 198005485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589842468
    },
    {
        "content": "<p>but lean core has laid claim to that file already so mathlib can't supply it, unfortunately</p>",
        "id": 198005504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589842492
    },
    {
        "content": "<p>Guess why I dumped all the algebra stuff in a folder called <code>init_</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 198021964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589863574
    },
    {
        "content": "<p>I've been wondering what a good alternative here would be for finding multiple <code>init</code>s</p>",
        "id": 198022001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863661
    },
    {
        "content": "<p>for example, we could change import semantics such that if there are multiple matches for a given name, lean imports all of them instead of just a random one. Then mathlib could also have an <code>init</code> file, and both would get imported on an empty input</p>",
        "id": 198022066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863723
    },
    {
        "content": "<p>How hard do we need that feature?</p>",
        "id": 198022067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589863724
    },
    {
        "content": "<p>It would be convenient for mathlib extensions to the tactic language, for example</p>",
        "id": 198022078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863746
    },
    {
        "content": "<p>So if we have <code>mathlib/src/init/core.lean</code>, then it would also affect core?  I feel like this would cause a lot of recompilation, and I wouldn't even know where to put the oleans for the mathlib-modified core.</p>",
        "id": 198029205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589872702
    },
    {
        "content": "<p>wouldn't VSCode complain about duplicated imports?</p>",
        "id": 198029269,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589872748
    },
    {
        "content": "<p>This is a response to Mario's proposal.  Even with Mario's proposal you should probably add a <code>prelude</code> statement to <code>mathlib/src/init/core.lean</code> to prevent cyclic imports.</p>",
        "id": 198029792,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589873139
    },
    {
        "content": "<p>The intention was that at least files in <code>mathlib/src/init</code> will have <code>prelude</code> in them (and will have precise imports within <code>init</code> of both core and mathlib)</p>",
        "id": 198030345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589873539
    },
    {
        "content": "<p>but it is a good point that this will also affect non-<code>prelude</code> files in core unless there is some further ordering of imported libraries</p>",
        "id": 198030389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589873586
    },
    {
        "content": "<p>A simple way to dodge that problem is to remove all non-<code>prelude</code> files from core, though. I don't think there is anything in there currently that isn't a better fit for mathlib anyway</p>",
        "id": 198030588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589873760
    }
]