[
    {
        "content": "<p>I am using lean 4, and I am not sure how to fix this type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nth</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tup</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">::</span> <span class=\"n\">αs</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">nthAux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tupRest</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"o\">(</span><span class=\"n\">αs</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nthAux</span> <span class=\"n\">xs</span> <span class=\"n\">n</span>\n  <span class=\"n\">nthAux</span> <span class=\"n\">tup</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Here is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p><a href=\"https://github.com/crabbo-rave/lean4-Tuple\">Full Source</a></p>",
        "id": 271659508,
        "sender_full_name": "Joseph O",
        "timestamp": 1644628117
    },
    {
        "content": "<p>What should be the return type of your definition?</p>",
        "id": 271660297,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644628924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/type.20mismatches/near/271660297\">said</a>:</p>\n<blockquote>\n<p>What should be the return type of your definition?</p>\n</blockquote>\n<p>that is what I can't really figure out</p>",
        "id": 271660837,
        "sender_full_name": "Joseph O",
        "timestamp": 1644629465
    },
    {
        "content": "<p>WHat are you trying to do, in words?</p>",
        "id": 271661045,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644629741
    },
    {
        "content": "<p>get the nth term of a tuple (a custom datatype i made)</p>",
        "id": 271662097,
        "sender_full_name": "Joseph O",
        "timestamp": 1644630950
    },
    {
        "content": "<p>Please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 271662544,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644631366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/type.20mismatches/near/271662544\">said</a>:</p>\n<blockquote>\n<p>Please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"2\"</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo.nth</span> <span class=\"mi\">1</span> <span class=\"c1\">-- \"2\"</span>\n</code></pre></div>",
        "id": 271662820,
        "sender_full_name": "Joseph O",
        "timestamp": 1644631692
    },
    {
        "content": "<p>That's not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . You can click that link that will take you to a webpage which will explain what is meant by this.</p>",
        "id": 271664613,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644634224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Tuple</span>\n<span class=\"kn\">open</span> <span class=\"n\">Tuple</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"2\"</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo.nth</span> <span class=\"mi\">1</span> <span class=\"c1\">-- \"2\"</span>\n</code></pre></div>\n<p>thats it</p>",
        "id": 271665109,
        "sender_full_name": "Joseph O",
        "timestamp": 1644634895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span> Adam is asking for a more precise piece of code of yours. You posted a link to your repo, but this link is better: <a href=\"https://github.com/crabbo-rave/lean4-Tuple/blob/master/Tuple.lean\">https://github.com/crabbo-rave/lean4-Tuple/blob/master/Tuple.lean</a></p>",
        "id": 271665280,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1644635081
    },
    {
        "content": "<p>Thanks</p>",
        "id": 271665377,
        "sender_full_name": "Joseph O",
        "timestamp": 1644635201
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">{</span><span class=\"n\">αs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">tup</span><span class=\"o\">:</span> <span class=\"n\">Tuple</span> <span class=\"n\">αs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">αs.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">αs.get</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">αs</span><span class=\"o\">,</span> <span class=\"n\">tup</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">Tuple.unit</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">),</span> <span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">as</span><span class=\"o\">),</span> <span class=\"n\">Tuple.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">get</span> <span class=\"n\">xs</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">get</span> <span class=\"bp\">⟪</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"s2\">\"foobar\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">⟫</span> <span class=\"mi\">1</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>This is not ideal, because Lean has a hard time figuring out what the type should be (e.g. try <code>#eval (get ⟪2,\"foobar\",3⟫ 1 sorry)</code>). I don't know off the top of my head how to work around that.</p>",
        "id": 271666572,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644636889
    },
    {
        "content": "<p>Note also that your <code>Tuple.length</code> is just the length of the list of types.</p>",
        "id": 271666753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644637121
    },
    {
        "content": "<p>You can probably emulate std::variant from C++, something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">variant</span> <span class=\"o\">(</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">tuple_of_types</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">ts.get</span> <span class=\"n\">tag</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then discriminate on <code>tag</code> down the line. The std::any version on the other hand,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">any</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is probably useless though si (IIUC) equality between types is something you don't want to do ...</p>",
        "id": 271679043,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1644656756
    },
    {
        "content": "<p>And something like the visitor pattern, <code>visitor (ts : tuple_of_types) (out : Type)</code> would be a tuple of the form <code>(ts.get 0 -&gt; out, ts.get 1 -&gt; out, ...)</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">visit</span> <span class=\"o\">{</span><span class=\"n\">ts</span> <span class=\"o\">:</span> <span class=\"n\">tuple_of_types</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">visitor</span> <span class=\"n\">ts</span> <span class=\"n\">out</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">variant</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.get</span> <span class=\"n\">v.tag</span><span class=\"o\">)</span> <span class=\"n\">v.val</span>\n</code></pre></div>\n<p>but I'm not sure this typechecks, or is useful if it does</p>",
        "id": 271679303,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1644657169
    },
    {
        "content": "<p>Or, maybe something closer to your Tuple implementation like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">value_type</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"bp\">⊕</span> <span class=\"n\">value_type</span> <span class=\"n\">ts</span>\n</code></pre></div>",
        "id": 271679837,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1644658050
    },
    {
        "content": "<p>Would a type class work?</p>",
        "id": 271690103,
        "sender_full_name": "Joseph O",
        "timestamp": 1644674224
    }
]