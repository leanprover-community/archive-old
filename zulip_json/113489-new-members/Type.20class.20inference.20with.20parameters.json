[
    {
        "content": "<p>Lean doesn't seem to be able to infer types when parameters are involved, so while trying to implement my own version of the integers mod n, I'm having to specify all type classes explicitly. Is there a fix/workaround?<br>\nHere's a (ridiculous) example of the kind of stuff that causes problems:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">parameter</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inv_wrt_n</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">instance</span><span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">inv_wrt_n</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">n</span><span class=\"bp\">⁻¹</span> <span class=\"c1\">-- Fails</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</pre></div>",
        "id": 193734864,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586733596
    },
    {
        "content": "<p>Sorry, I don't have much experience with parameters (mostly because I decided long ago I didn't like them, hiding too much, and prefer to use variables).  So my suggestion would be to learn to love <code>variables</code> instead!</p>",
        "id": 193738641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586740870
    },
    {
        "content": "<p>I think you'll encounter other serious problems with this approach anyways, unless you only planned to ever use this instance within the scope of the parameter.</p>",
        "id": 193739585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586742796
    },
    {
        "content": "<p>Okay I'll go back to variables, thanks for the advice</p>",
        "id": 193740144,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586743726
    },
    {
        "content": "<p><code>variables</code> will make the problems clearer. How do you expect to ever specify <code>n</code>?</p>",
        "id": 193740204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586743860
    },
    {
        "content": "<p>But I want to create a quotient that depends on a value n - the integers mod n</p>",
        "id": 193761878,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586775772
    },
    {
        "content": "<p>But type class resolution won't work with variables either because the instance depends on n</p>",
        "id": 193761906,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586775808
    },
    {
        "content": "<p>Is there a way to feed lean my specific setoid?</p>",
        "id": 193761922,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586775837
    },
    {
        "content": "<p>You can put the <code>n</code> in the type</p>",
        "id": 193761968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586775846
    },
    {
        "content": "<p>If you have an instance <code>instance (n : nat) : setoid (mytype n)</code> there are no problems</p>",
        "id": 193762008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586775891
    },
    {
        "content": "<p>(also, setoids often don't need to be instances)</p>",
        "id": 193762018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586775909
    },
    {
        "content": "<p>Or you can not use type class resolution. Mathlib has a whole collection of primed quotient stuff where the equivalence relation is found via unification.</p>",
        "id": 193762020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586775912
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq</span>\n<span class=\"c1\">-- quotient.eq : ∀ {α : Sort u_1} [r : setoid α] {x y : α}, ⟦x⟧ = ⟦y⟧ ↔ x ≈ y</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq&#39;</span>\n<span class=\"c1\">-- quotient.eq&#39; : ∀ {α : Sort u_1} {s₁ : setoid α} {a b : α}, quotient.mk&#39; a = quotient.mk&#39; b ↔ setoid.r a b</span>\n</pre></div>",
        "id": 193762104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586775971
    },
    {
        "content": "<p>Note <code>[setoid]</code> v <code>{setoid}</code></p>",
        "id": 193762118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586775985
    },
    {
        "content": "<p>You lose notation this way though, as you can see from the example.</p>",
        "id": 193762670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586776537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> but if I'm trying to get type class resolution for <code>setoid int</code> (although I'm actually using <code>setoid myint</code>, as I'm using my own implementation of integers) I can't put n in the type</p>",
        "id": 193763495,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586777325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that, or explicitly stating everything might be the only way</p>",
        "id": 193763526,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586777368
    },
    {
        "content": "<p>But it's not ideal</p>",
        "id": 193763538,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586777386
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span> <span class=\"n\">quotient</span>\n\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on₂&#39;</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193763548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586777400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274262\">@Alastair Horn</span> You can, you can define <code>foo n := int</code> and then put the typeclass on <code>foo n</code></p>",
        "id": 193763667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777521
    },
    {
        "content": "<p>Okay that seems to get rid of the errors somehow <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>. I'll see how far I get with that and fall back on Kevin's method otherwise. Thanks</p>",
        "id": 193764173,
        "sender_full_name": "Alastair Horn",
        "timestamp": 1586778019
    }
]