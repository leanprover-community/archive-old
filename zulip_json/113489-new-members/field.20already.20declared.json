[
    {
        "content": "<p>I am trying to define a small algebraic hierarchy from scratch following the way it's done in mathlib and I get this error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">--invalid 'structure' header, field 'to_monoid' from 'hidden.comm_monoid' has already been declared</span>\n</code></pre></div>\n<p>I assume it's because both <code>group</code> and <code>comm_monoid</code> have <code>to_monoid</code> fields, but how do I fix it?</p>",
        "id": 226626345,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613550344
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>before your code</p>",
        "id": 226626449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613550405
    },
    {
        "content": "<p>This will merge the fields that both parents have in common</p>",
        "id": 226626452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613550421
    },
    {
        "content": "<p>But the structures that you extend should also be \"old\" structures. So you have to set the option all the way at the top</p>",
        "id": 226626487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613550446
    },
    {
        "content": "<p>Oh, I see, I missed that from the mathlib source files. Thanks!</p>",
        "id": 226626635,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613550536
    }
]