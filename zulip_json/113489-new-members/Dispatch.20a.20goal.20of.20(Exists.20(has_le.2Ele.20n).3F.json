[
    {
        "content": "<p>I think this is a newbie question so I hope this is the appropriate place for the question.  If not, please let me know.  In any case, I need to dispatch a goal of <code>Exists (has_le.le n)</code>, for <code>n</code> a natural number.  Here is my proof state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">has_le.le</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>For the <code>nat</code>, le is defined (I am pretty sure) in <code>data.nat.basic</code> and have imported that file. </p>\n<p>I can post a longer minimal example if it would be helpful.  I appreciate any help.</p>",
        "id": 296327256,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661953315
    },
    {
        "content": "<p>Do you know what that goal means? <code>exact ⟨n, le_rfl⟩</code> should do.</p>",
        "id": 296327654,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661953424
    },
    {
        "content": "<p>No, I don't.   I take it that it  just means that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n\\le n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>?</p>",
        "id": 296328049,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661953546
    },
    {
        "content": "<p>Or there exists an m that is le than n?</p>",
        "id": 296328158,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661953578
    },
    {
        "content": "<p>No,  <code>has_le.le a b</code> means <code>a ≤ b</code>, so your goal means \"There's a natural greater than <code>n</code>\".</p>",
        "id": 296328246,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661953619
    },
    {
        "content": "<p>You can do <code>change ∃ m, n ≤ m</code> to check that this is indeed what your goal is.</p>",
        "id": 296328355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661953663
    },
    {
        "content": "<p>Ok, I guess I couldn't parse what it was saying.   Thank you for your help.  Is this the appropriate forum for this type of question?   (Believe it or not, <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I did spend a fair amount of time trying to figure this out.)  Thanks again.</p>",
        "id": 296328948,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661953849
    },
    {
        "content": "<p>Yes absolutely! It's called <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> for a reason <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 296329147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661953910
    },
    {
        "content": "<p>One way you could have figured this out yourself would have been to feed in a witness to the <code>Exists</code> (as in <code>refine ⟨0, _⟩</code> or <code>use 0</code>) and see what it asks your to prove.</p>",
        "id": 296329421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661953994
    },
    {
        "content": "<p>Ok, thanks again.</p>",
        "id": 296329803,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661954142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519925\">@Kent Van Vels</span> I think a more interesting question is \"how the heck did you manage to get such a twisted goal?\". In Lean there are several kinds of equality. One of them is definitional equality. Two objects X and Y are definitionally equal if, when you unravel the definitions and notation involved in X and Y, they turn out to be the same. For example if <code>n</code> is a natural then<code>n + 0</code> is by definition equal to <code>n</code>. Yael's observation that <code>change ∃ m, n ≤ m</code> works says \"your goal is definitionally equal to <code>∃ m, n ≤ m</code>\". My question is how to manage to get a goal in such a non-canonical state! Usually if your goal is <code>∃ m, n ≤ m</code> then that's what it will say, not the monstrosity you managed to construct.</p>",
        "id": 296382688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661962445
    },
    {
        "content": "<p>It was the result of a <code>simp</code> lification of a different goal.  I have a home-grown construction of the real number (pretty much following your tutorial on quotients) and I needed to prove that <code>zero_ne_one</code>.   And this, after simplifying, turned into the following goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">Exists</span> <span class=\"o\">(</span><span class=\"n\">has_le.le</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>I can attempt to prepare a MWE if you are interested.</p>\n<p>By the way, the tutorial on quotients has been working perfectly.   Thanks!</p>",
        "id": 296413357,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661966808
    },
    {
        "content": "<p>I wonder what the simplifier used to make the goal so funny. You could replace the <code>simp</code> with <code>squeeze_simp</code> and then see which lemma is causing the problem.</p>",
        "id": 296455102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661982357
    },
    {
        "content": "<p>I guess <code>simp</code> is just performing eta-reduction, which breaks the syntax of the binary operator <code>≤</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- Exists (has_le.le n)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296519933,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1662010807
    },
    {
        "content": "<p>I guess the other issue is that it sounds like Kent is committing the sin of using <code>simp</code> in a non-terminal manner.</p>",
        "id": 296533046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662018395
    },
    {
        "content": "<p>I just looked at the code (which I confess is absolutely riddled with <code>simp</code>s <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ) and  <code>squeeze-simp</code> resulted in the same goal but with a suggestion to use <code>simp only </code> and then a bunch of commands.  I can see why using <code>simp</code> I can see why <code>simp</code> is best used as a \"finishing move\".</p>",
        "id": 296584059,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1662038272
    }
]