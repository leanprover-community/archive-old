[
    {
        "content": "<p>Suppose I have a linear map <code>eval : \\alpha \\to\\_l[R] \\beta</code> and let <code>a : \\alpha</code>. Is there a way to use the dot notation for its evaluation (as in <code>a.eval</code>) but with lean still recognizing it as a linear function and hence finding the correct simp lemmas about linear functions when using <code>simp</code>? Reducible definition seems not to work...</p>",
        "id": 240073314,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621872834
    },
    {
        "content": "<p>Doesn't <code>eval a</code> just do what you want?</p>",
        "id": 240073490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621872913
    },
    {
        "content": "<p>The way dot notation works is that <code>a.eval</code> means <code>alpha.eval</code> if <code>a : alpha</code>. For example if <code>n</code> is a natural then <code>n.succ</code> means <code>nat.succ n</code>.</p>",
        "id": 240073639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621872969
    },
    {
        "content": "<p>Sorry <code>eval</code> was meant to be <code>alpha.eval</code></p>",
        "id": 240073799,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873053
    },
    {
        "content": "<p>Why do you want to use dot notation when <code>eval a</code> just works?</p>",
        "id": 240073930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621873102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Dot.20notation.20and.20coercions/near/240073930\">said</a>:</p>\n<blockquote>\n<p>Why do you want to use dot notation when <code>eval a</code> just works?</p>\n</blockquote>\n<p>Because in my case <code>alpha</code> is a type with a super long name and since <code>eval</code> is a function that it is used multiple time in algebraic expressions everything becomes unreadable</p>",
        "id": 240074044,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873164
    },
    {
        "content": "<p>What should be one line becomes 5 lines</p>",
        "id": 240074096,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873188
    },
    {
        "content": "<p>I don't really understand. How will dot notation change the length of anything when <code>eval a</code> is the same length as <code>a.eval</code>?</p>",
        "id": 240074194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621873219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Dot.20notation.20and.20coercions/near/240074194\">said</a>:</p>\n<blockquote>\n<p>I don't really understand. How will dot notation change the length of anything when <code>eval a</code> is the same length as <code>a.eval</code>?</p>\n</blockquote>\n<p>Well because <code>eval</code> is <code>super_long_name.eval</code> and I cant avoid protecting it because there exist multiple versions of <code>eval</code> for different types</p>",
        "id": 240074325,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873280
    },
    {
        "content": "<p>If the issue is that you're writing <code>alpha.eval a</code> then just <code>open alpha</code></p>",
        "id": 240074339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621873285
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 240074358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621873299
    },
    {
        "content": "<p>Maybe you should just use a local abbreviation?</p>",
        "id": 240074453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621873333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Dot.20notation.20and.20coercions/near/240074339\">said</a>:</p>\n<blockquote>\n<p>If the issue is that you're writing <code>alpha.eval a</code> then just <code>open alpha</code></p>\n</blockquote>\n<p>Yes I can't do that because there is acutally <code>super_long_name_1.eval</code> and <code>super_long_name_2.eval</code></p>",
        "id": 240074454,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Dot.20notation.20and.20coercions/near/240074453\">said</a>:</p>\n<blockquote>\n<p>Maybe you should just use a local abbreviation?</p>\n</blockquote>\n<p>And change e.g. <code>super_long_name_1.eval</code> to <code>eval1</code> and <code>eval2</code>?</p>",
        "id": 240074563,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873383
    },
    {
        "content": "<p>I'm not sure I would protect these things, if their input terms have got different types then can't Lean figure out which one you're talking about?</p>",
        "id": 240074607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621873403
    },
    {
        "content": "<p>Well because one type extends the other and it is the same thing on the two types and thus it should have the same name</p>",
        "id": 240074713,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873448
    },
    {
        "content": "<p>You will see in a PR before this evening I guess haha</p>",
        "id": 240074743,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873463
    },
    {
        "content": "<p>For the moment I will leave the super long protected names</p>",
        "id": 240074757,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1621873475
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 240077414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621874650
    },
    {
        "content": "<p>Dot notation _does_ work with simple coercions</p>",
        "id": 240077652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621874768
    }
]