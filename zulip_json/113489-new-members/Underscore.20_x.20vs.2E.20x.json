[
    {
        "content": "<p>I never called anything <code>_x</code> so what is the meaning of the underscore in this error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"n\">x.length</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"n\">_x.length</span>\n</code></pre></div>",
        "id": 290285993,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658345152
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I would guess _x is something generated by a match and you also happen to have a variable called x or something, but it's hard to say with an example</p>",
        "id": 290287077,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1658345581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Underscore.20_x.20vs.2E.20x/near/290287077\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I would guess _x is something generated by a match and you also happen to have a variable called x or something, but it's hard to say with an example</p>\n</blockquote>\n<p>OK thanks, you're right <code>_x</code> is not generated by adding <code>_</code> to <code>x</code>, as demonstrated by renaming <code>x</code> to <code>xx</code>.<br>\nHere is a MWE, it doesn't try to do anything interesting but why does it give an error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">xx.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">):</span>\n  <span class=\"k\">let</span> <span class=\"n\">σ</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">qx</span> <span class=\"o\">:</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xx.length</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n  <span class=\"n\">xx</span> <span class=\"bp\">=</span> <span class=\"n\">xx</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290289279,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658346580
    },
    {
        "content": "<p>Works fine for me (once I add a declaration of <code>\\a</code>)</p>",
        "id": 290289504,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658346681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Underscore.20_x.20vs.2E.20x/near/290289504\">said</a>:</p>\n<blockquote>\n<p>Works fine for me (once I add a declaration of <code>\\a</code>)</p>\n</blockquote>\n<p>Oops, I actually meant:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">xx.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">):</span>\n  <span class=\"k\">let</span> <span class=\"n\">σ</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">qx</span> <span class=\"o\">:</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xx.length</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n  <span class=\"n\">xx</span> <span class=\"bp\">=</span> <span class=\"n\">xx</span>\n  <span class=\"o\">:=</span>\n<span class=\"n\">list.rec_on</span> <span class=\"n\">xx</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290289700,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658346775
    },
    {
        "content": "<p>Well that's bizarre</p>",
        "id": 290289970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658346930
    },
    {
        "content": "<p>Actually it's just the location of the reported error that's wrong I think</p>",
        "id": 290290380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658347130
    },
    {
        "content": "<p>You can't apply <code>list.rec_on</code> without first reverting <code>g</code></p>",
        "id": 290290429,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658347159
    },
    {
        "content": "<p>(because <code>g</code> appears in the conclusion, and the type of <code>g</code> depends on <code>xx</code>)</p>",
        "id": 290290619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658347246
    },
    {
        "content": "<p>What's meant by \"reverting\"?</p>",
        "id": 290291858,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658347817
    },
    {
        "content": "<p>Move <code>g</code> after the colon, or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xx</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">xx.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">):</span>\n  <span class=\"k\">let</span> <span class=\"n\">σ</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k.succ</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">qx</span> <span class=\"o\">:</span><span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">xx.length</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">⟩</span> <span class=\"k\">in</span>\n  <span class=\"n\">xx</span> <span class=\"bp\">=</span> <span class=\"n\">xx</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  α : Type,</span>\n<span class=\"cm\">  k : ℕ,</span>\n<span class=\"cm\">  xx : list.{0} α</span>\n<span class=\"cm\">  ⊢ ∀ (g : xx.length &lt; k.succ), let σ : Type := {l // l &lt; k.succ}, qx : σ := ⟨xx.length, g⟩ in xx = xx</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290292356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658348104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I guess more broadly the problem is: can we not refer to an object in a theorem statement, if the type of that object relies on hypotheses of that theorem? OK so this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">really_mwe</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">):</span>\n<span class=\"o\">(⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩:</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">//</span><span class=\"n\">m</span><span class=\"bp\">&lt;</span><span class=\"n\">k</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩:</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"bp\">//</span><span class=\"n\">m</span><span class=\"bp\">&lt;</span><span class=\"n\">k</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 290293647,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658348733
    },
    {
        "content": "<p>This cannot be the correct error</p>",
        "id": 290293793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658348797
    },
    {
        "content": "<p>Anyways, there was no problem with the theorem statement itself. The start of the proof was wrong</p>",
        "id": 290293847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658348825
    },
    {
        "content": "<p>Right, sorry...</p>",
        "id": 290294109,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658348977
    },
    {
        "content": "<p>Well, I guess a solution is to rewrite the whole thing so that instead of referring to <code>qx</code> one has an existential statement: <code>∃ q, q.1 = xx.length ∧ ...</code></p>",
        "id": 290295740,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1658349749
    }
]