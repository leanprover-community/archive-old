[
    {
        "content": "<p>hi! i'm trying to make sure that my logic with lean is correct.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.geom_sum</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">geom_sum_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">geom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_geom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">int.gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"n\">geom_sum_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">geom_sum_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>my goal right now is i want to show (a^m - 1) / (a^gcd(m, n) - 1) and (a^n - 1) / (a^gcd(m, n) - 1) has a gcd of 1.<br>\nhow do i write a new statement inside of my example?</p>",
        "id": 315903919,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671047732
    },
    {
        "content": "<p>nevermind. i realized my proof was circular. sorry</p>",
        "id": 315904227,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671047827
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">gcd</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>is the answer to your question</p>",
        "id": 315904288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671047848
    },
    {
        "content": "<p>thanks! how do i define a new variable in lean btw?</p>",
        "id": 315904629,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671047984
    },
    {
        "content": "<p>like, i want to say:<br>\nlet k = a^gcd(m, n)</p>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>isn't working</p>",
        "id": 315904734,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048008
    },
    {
        "content": "<p>You can do <code>set k := a ^ m.gcd n with hk</code> (or <code>let k := a ^ m.gcd n</code>, which will probably be less practical).</p>",
        "id": 315904993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671048097
    },
    {
        "content": "<p>thanks<br>\nlet me keep trying</p>",
        "id": 315905269,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048181
    },
    {
        "content": "<p>Is this definitely true e.g. when a=0?</p>",
        "id": 315905939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671048415
    },
    {
        "content": "<p>oh..</p>",
        "id": 315906198,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048500
    },
    {
        "content": "<p>i'm sorry, it should be naturals a, m, n</p>",
        "id": 315906234,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">geom_sum_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">geom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_geom_sum</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"n\">geom_sum_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_left</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">geom_sum_dvd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd_dvd_right</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n\n  <span class=\"n\">set</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_geom_sum</span> <span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> ignore this -/</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>looks like this broke now. aw..</p>",
        "id": 315906819,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048767
    },
    {
        "content": "<p>specifically \"mul_geom_sum\" doesn't work</p>",
        "id": 315906877,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048791
    },
    {
        "content": "<p>Note that zero is a natural in mathlib</p>",
        "id": 315906907,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671048800
    },
    {
        "content": "<p>ou.</p>",
        "id": 315906949,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048818
    },
    {
        "content": "<p>how can we write \"the positive integers\" then?</p>",
        "id": 315906991,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671048835
    },
    {
        "content": "<p>We have the type <code>ℕ+</code> of positive integers, but the API is less developed. You can just use <code>(n : ℕ) (hpos : 0 &lt; n)</code></p>",
        "id": 315908551,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671049460
    },
    {
        "content": "<p>lemme see</p>",
        "id": 315908588,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671049474
    },
    {
        "content": "<p>I mean, the two approaches are completely equivalent, but the second will save you to go through some coercion (meaning having to tell Lean that a positive natural is also a natural).</p>",
        "id": 315908736,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671049557
    },
    {
        "content": "<p>Are you sure that's true? Now you have natural subtraction.</p>",
        "id": 315908874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671049613
    },
    {
        "content": "<p>i think i'll keep a as an integer for now</p>",
        "id": 315908887,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671049618
    },
    {
        "content": "<p>a as an integer, such that 0 &lt; a</p>",
        "id": 315908912,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671049630
    },
    {
        "content": "<p>so basically \"nonnegative integers\" instead of \"nonnegative naturals\"... if that makes a difference in lean</p>",
        "id": 315908941,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671049647
    },
    {
        "content": "<p>i believe i read something about natural subtraction defaulting</p>",
        "id": 315908949,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671049653
    },
    {
        "content": "<p>If you want to use integers than you have to write <code>(n : ℤ )</code>.</p>",
        "id": 315909967,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671050074
    },
    {
        "content": "<p>yep! did that.</p>",
        "id": 315910094,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671050136
    },
    {
        "content": "<p>Note that <code>(n : ℤ) (hn : 0 &lt; n)</code>, <code>(n : ℕ) (hn : 0 &lt; n)</code> and <code>(n : ℕ+)</code> are not the same thing in Lean, even if mathematically there is (essentially) no difference.</p>",
        "id": 315910117,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671050150
    },
    {
        "content": "<p>yea! <br>\nit's because of naturals subtraction, right?</p>",
        "id": 315910343,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671050228
    },
    {
        "content": "<p>oh wait.. i thnk i know how to prove this now. let's use the euclidean algorithm! i heard that was built into lean already<br>\ndo you know how i can find the doucmentation for that?</p>",
        "id": 315910435,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671050268
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a> and <a href=\"https://leanprover-community.github.io/undergrad.html\">https://leanprover-community.github.io/undergrad.html</a> are good pages to find things that are named in mathematics</p>",
        "id": 315912709,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671051244
    },
    {
        "content": "<p>many times you want a simple lemma that does not have a name in mathematics, e.g. <code>gcd n 0 = n</code>. In that case I recommend searching in on <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> for e.g. <code>gcd_zero</code></p>",
        "id": 315912875,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671051333
    },
    {
        "content": "<p>thanks</p>",
        "id": 315912922,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671051357
    },
    {
        "content": "<p>and slowly you'll get a sense of the naming scheme used in mathlib, which is very important to locate results you want to use.</p>",
        "id": 315913006,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671051376
    },
    {
        "content": "<p>looks like i'll have to make the euclidean algorithm myself. hmmm</p>",
        "id": 315913150,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671051442
    },
    {
        "content": "<p>nope, search for <code>Euclid's algorithm</code> on one of the two pages I linked</p>",
        "id": 315913205,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671051463
    },
    {
        "content": "<p>they're not there. let me look again!</p>",
        "id": 315913300,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671051487
    },
    {
        "content": "<p>ohhh, it's euclid's' algorithm with 2 apostrophes. got it</p>",
        "id": 315913366,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671051513
    },
    {
        "content": "<p>I guess that is a bit tricky. I myself just searched for <code>Euclid</code> and found them that way :-)</p>",
        "id": 315913460,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1671051541
    },
    {
        "content": "<p>i see c: i saw things that were unrelated so i skimmed too fast, haha</p>",
        "id": 315913501,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1671051563
    }
]