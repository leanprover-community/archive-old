[
    {
        "content": "<p>I've spent a few hours today trying to knock a metric spaces tutorial into shape because <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> , <span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span>  and <span class=\"user-mention\" data-user-id=\"252241\">@Kevin Doran</span> were all independently formalising stuff like this. But I ran into trouble when I got to open sets because to manipulate open sets you need to be able to manipulate sets. So I think we need to roll back a bit and do a basic tutorial about working with sets. Here's how far I got with metric spaces (but as I say we need another tutorial first I think).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--import data.set</span>\n<span class=\"c1\">--import data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">--import data.finset</span>\n<span class=\"c1\">--import order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span> <span class=\"c1\">-- remove when finished checking types of things.</span>\n<span class=\"c1\">-- note: we don&#39;t import topology.metric_space.basic, which is</span>\n<span class=\"c1\">-- mathlib&#39;s version of metric spaces</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! -/</span>\n<span class=\"c1\">--open_locale classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- A metric space is a set/type X equipped with a real-valued distance function</span>\n<span class=\"cm\">    satisfying the usual axioms -/</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dist_self</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dist_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Exercise: compare with the definition in all the maths books.</span>\n<span class=\"c1\">-- Did we leave something out?</span>\n\n<span class=\"c1\">-- theorems that we are about to prove about metric spaces go in the metric space namespace</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">metric_space</span>\n\n<span class=\"c1\">-- let X be a metric space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! # Learning to use `linarith`</span>\n\n<span class=\"cm\">We left out the axiom that ∀ x y : X, dist x y ≥ 0 in our metric space,</span>\n<span class=\"cm\">because it can be deduced from the triangle inequality and symmetry!</span>\n<span class=\"cm\">Let&#39;s prove it now, using `linarith`. The `linarith` tactic proves</span>\n<span class=\"cm\">many &quot;obvious&quot; results involving inequalities as long as the expressions</span>\n<span class=\"cm\">involved have degree 1. It looks at the hypotheses and tries to prove</span>\n<span class=\"cm\">the goal. For example if `h : 0 ≤ a + a` is a hypothesis, and the goal</span>\n<span class=\"cm\">is `⊢ 0 ≤ a`, then `linarith` will close the goal.</span>\n\n<span class=\"cm\">Other useful tactics :</span>\n\n<span class=\"cm\">`have h := dist_triangle x y x` will create a new hypothesis `h`.</span>\n\n<span class=\"cm\">`push_neg` will move `¬` as far to the right as it can, and possibly</span>\n<span class=\"cm\">remove it. For example if `h : ¬ (a ≤ b)` then `push_neg at h` will change `h` to `b &lt; a`.</span>\n\n<span class=\"cm\">`by_contra h` will create a hypothesis `h` saying that the goal is false, and</span>\n<span class=\"cm\">will replace the goal with `false`. Note that `linarith` can even prove a goal `false` if</span>\n<span class=\"cm\">the hypotheses are contradictory.</span>\n\n<span class=\"cm\">Let&#39;s prove some basic things about distances using `linarith`.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dist_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--replace with sorry in tutorial</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">dist_triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dist_self</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dist_comm</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dist_le_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--replace with sorry in tutorial</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">dist_nonneg</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_dist_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dist_self</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">dist_pos</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--replace with sorry in tutorial</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">dist_le_zero</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dist_le_zero</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! ### Open balls</span>\n\n<span class=\"cm\">We define `ball x ε` to be the open ball centre `x` and radius `ε`. Note that we do not</span>\n<span class=\"cm\">require `ε &gt; 0`! That hypothesis shows up later in the theorems, not in the definition.</span>\n\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"n\">ε₁</span> <span class=\"n\">ε₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `ball x ε` is the set of all points `y` with `dist y x &lt; ε` -/</span>\n<span class=\"n\">def</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- Let&#39;s tag this lemma with the `simp` tag, so the `simp` tactic will use it.</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mem_ball</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">↔</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span> <span class=\"c1\">-- true by definition</span>\n\n<span class=\"c1\">-- Now we get this proof for free:</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mem_ball_comm</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist_comm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- Let&#39;s tag `dist_self` with the `simp` tag too:</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">dist_self</span>\n\n<span class=\"c1\">-- Can you find a proof of this? And then can you find a one-line proof using `simp`?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">mem_ball_self</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--replace with sorry</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_ball</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dist_self</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Top tip: `rw mem_ball at hy ⊢` will rewrite `mem_ball` at both the hypothesis `hy` and the goal.</span>\n<span class=\"cm\">  Get `⊢` in VS Code with `\\|-`</span>\n\n<span class=\"cm\">-/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">ball_mono</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε₁</span> <span class=\"bp\">≤</span> <span class=\"n\">ε₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε₁</span> <span class=\"err\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- delete me</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_ball</span> <span class=\"n\">at</span> <span class=\"n\">hy</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">! # Open sets.</span>\n\n<span class=\"cm\">A subset of a metric space is open if for every element `s` in the subset, there&#39;s some open</span>\n<span class=\"cm\">ball `ball s ε`, with ε &gt; 0, entirely contained with `S`.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A subset U of a metric space is open if every s ∈ U there&#39;s an open ball centre s within U -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hε</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">ball</span> <span class=\"n\">s</span> <span class=\"n\">ε</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span>\n\n<span class=\"c1\">-- Note that `is_open` is a Proposition. Things like `is_open_Union` below are proofs.</span>\n\n<span class=\"c1\">-- Let&#39;s start with two easy facts about open sets -- the empty set and the whole space is open.</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">is_open_empty</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"c1\">-- too hard for a beginner. Need to get a contradiction from `h : x ∈ ∅`</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- need subset_univ</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- An arbitrary union of open sets is open. The union is indexed over an auxiliary type ι</span>\n\n<span class=\"c1\">-- TODO: I don&#39;t think this is any good, people need to know about set.subset.trans,</span>\n<span class=\"c1\">-- set.subset.Union etc. Should do something on sets first?</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_open_Union</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">hxU</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"n\">hxε</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hxε</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_Union</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_open_inter</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> A subset S of a metric space is closed if its complement is open -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">metric_space</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">exit</span>\n\n<span class=\"c1\">-- the lemmas from 274 to 300:</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">closed_ball_subset_closed_ball</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ε₁</span> <span class=\"n\">ε₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε₁</span> <span class=\"bp\">≤</span> <span class=\"n\">ε₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">closed_ball</span> <span class=\"n\">x</span> <span class=\"n\">ε₁</span> <span class=\"err\">⊆</span> <span class=\"n\">closed_ball</span> <span class=\"n\">x</span> <span class=\"n\">ε₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">yx</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">ε₁</span><span class=\"o\">),</span> <span class=\"n\">le_trans</span> <span class=\"n\">yx</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ball_disjoint</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε₁</span> <span class=\"bp\">+</span> <span class=\"n\">ε₂</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε₁</span> <span class=\"err\">∩</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"n\">ε₂</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_empty_iff_forall_not_mem</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">not_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">dist_triangle_left</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">add_lt_add</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ball_disjoint_same</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"err\">∩</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">ball_disjoint</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">le_div_iff&#39;</span> <span class=\"n\">two_pos</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ball_subset</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε₂</span> <span class=\"bp\">-</span> <span class=\"n\">ε₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε₁</span> <span class=\"err\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"n\">ε₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">zx</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_sub_cancel&#39;_right</span> <span class=\"n\">ε₁</span> <span class=\"n\">ε₂</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">dist_triangle</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_lt_add_of_lt_of_le</span> <span class=\"n\">zx</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ball_half_subset</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"n\">ball_subset</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_self_div_two</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">exists_ball_subset_ball</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">ε&#39;</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">y</span> <span class=\"n\">ε&#39;</span> <span class=\"err\">⊆</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">sub_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ball_subset</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_sub_self</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ball_eq_empty_iff_nonpos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"n\">ε</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eq_empty_iff_forall_not_mem</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">mem_ball_self</span> <span class=\"n\">ε0</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">ε0</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">ε0</span> <span class=\"err\">$</span> <span class=\"n\">pos_of_mem_ball</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ball_zero</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">ball_eq_empty_iff_nonpos</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--</span>\n\n<span class=\"c1\">-- Do we want this?</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_of_forall_dist_le</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">eq_of_le_of_forall_le_of_dense</span> <span class=\"n\">dist_nonneg</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The triangle (polygon) inequality for sequences of points; `finset.range` version. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">dist_le_range_sum_dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">Ico</span><span class=\"bp\">.</span><span class=\"n\">zero_bot</span> <span class=\"n\">n</span> <span class=\"bp\">▸</span> <span class=\"n\">dist_le_Ico_sum_dist</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- From mathlib</span>\n<span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">blob</span><span class=\"bp\">/</span><span class=\"mi\">17632202</span><span class=\"n\">cdf9682cea972e86437d32ac20c91b06</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"bp\">#</span><span class=\"n\">L262</span><span class=\"bp\">-</span><span class=\"n\">L319</span>\n\n<span class=\"n\">def</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"err\">⋂₀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">is_closed</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 193080308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196818
    },
    {
        "content": "<p>My plan was to prove that closure was a Galois insertion. This comes out quite nicely.</p>",
        "id": 193080526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Wow! Didn't know about the  ⊢ trick!</p>\n<p>But definitely, a set tutorial would be awesome, I do some stuff which might not be considered optimal by Lean seniors :)</p>",
        "id": 193080643,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586196973
    },
    {
        "content": "<p>But others might want to try other things. Perhaps one should do a series of three things: first a basic thing on sets, and then something on open and closed sets including def of metric space, and then a third one on basic stuff with limits of sequences perhaps, or stick to the real numbers or whatever.</p>",
        "id": 193080708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586197010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193080708\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193080708\">said</a>:</p>\n<blockquote>\n<p>But others might want to try other things. Perhaps one should do a series of three things: first a basic thing on sets, and then something on open and closed sets including def of metric space, and then a third one on basic stuff with limits of sequences perhaps, or stick to the real numbers or whatever.</p>\n</blockquote>\n<p>Proving Bolzano-Weierstrass as a final result would quite awesome I think, it's one of the most powerful &amp; non-trivial theorems you first learn as an undergraduate in real analysis (in France, at least AFAIK).<br>\n(well, there is also Heine theorem on uniform continuity over closed bounded intervals, i.e. compacts)</p>",
        "id": 193080890,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586197086
    },
    {
        "content": "<p>But that would require sticking to real numbers, and this is still possible to revisit the result in a 4th section if even necessary</p>",
        "id": 193081030,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586197173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Could we help you to write the tutorial?</p>",
        "id": 193081240,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586197255
    },
    {
        "content": "<p>Sure, that's why I posted here.</p>",
        "id": 193082776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586197945
    },
    {
        "content": "<p>Ideally we would push them all to the tutorial project. Building up to something like BW would be very cool and of course it's possible to do in Lean, but a beginner wouldn't be able to do it without some help.</p>",
        "id": 193082890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586198001
    },
    {
        "content": "<p>You can push to branch in the tutorial repository (if you don't have enough access we can investigate).</p>",
        "id": 193083121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586198109
    },
    {
        "content": "<p>oh so it's like mathlib for someone like me?</p>",
        "id": 193083194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586198156
    },
    {
        "content": "<p>As I wrote yesterday, I plan do to the same thing with my first year course, which focuses entirely on real numbers. So I think you should keep it at metric space level, with special emphasis on:</p>\n<ul>\n<li>using structures and classes</li>\n<li>setting up a theory, including simp lemmas</li>\n</ul>\n<p>neither of those points are covered in my first year stuff.</p>",
        "id": 193083328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586198213
    },
    {
        "content": "<p>OK. What about handling sets in general, e.g. subset_union or whatever?</p>",
        "id": 193083382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586198252
    },
    {
        "content": "<p>I don't have any of that.</p>",
        "id": 193083432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586198281
    },
    {
        "content": "<p>OK so for now I'll think about basic stuff with subsets, and then general metric spaces.</p>",
        "id": 193083503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586198302
    },
    {
        "content": "<p>My part will be about handling logical connective and various kinds of reasonning</p>",
        "id": 193083509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586198306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193083503\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193083503\">said</a>:</p>\n<blockquote>\n<p>OK so for now I'll think about basic stuff with subsets, and then general metric spaces.</p>\n</blockquote>\n<p>It might be hard to do, but a classical final boss of set theory is Cantor-Bernstein-Schröder, it requires some help though for a beginner</p>",
        "id": 193083827,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198493
    },
    {
        "content": "<p>(but it'd need to introduce injective, surjective, bijective stuff… Unsure if it is wise.)</p>",
        "id": 193083857,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586198516
    },
    {
        "content": "<p>I'm not sure that would teach much Lean at that point.</p>",
        "id": 193085176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586199142
    },
    {
        "content": "<p>Well, there is also mathlib API to learn too</p>",
        "id": 193085411,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586199255
    },
    {
        "content": "<p>Documentation is pretty great (there are few pain points) so I'm not sure if that's necessary at all</p>",
        "id": 193085519,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586199296
    },
    {
        "content": "<p>If we're doing open sets then we need to show the users how to prove the axioms for a topology, and these proofs seem to rely on a basic understanding of how to manipulate sets</p>",
        "id": 193086457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586199666
    },
    {
        "content": "<p>Yes, sure. I was specifically referring to Cantor-Bernstein.</p>",
        "id": 193086967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586199931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193086967\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193086967\">said</a>:</p>\n<blockquote>\n<p>Yes, sure. I was specifically referring to Cantor-Bernstein.</p>\n</blockquote>\n<p>BTW, is Cantor Bernstein in mathlib?</p>",
        "id": 193087510,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586200205
    },
    {
        "content": "<p>(docs would benefit if we could search by alternative names of big theorems or look for a theorem and get its generalization, I should open an issue)</p>",
        "id": 193087617,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586200252
    },
    {
        "content": "<p>Did you really search?</p>",
        "id": 193087853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586200382
    },
    {
        "content": "<p>There is a file name giving you a hint...</p>",
        "id": 193087869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586200394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> PRs that add alternative names to docstrings are very welcome! (And they will usually get merged before you can reload your page <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 193087909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586200423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193087853\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193087853\">said</a>:</p>\n<blockquote>\n<p>Did you really search?</p>\n</blockquote>\n<p>I definitely searched for \"Cantor\" and \"Cantor-Bernstein\", but I should have searched for something else, I suppose, in <code>set_theory</code> and <code>cardinals</code> (?)</p>",
        "id": 193088033,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586200491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193087909\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193087909\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> PRs that add alternative names to docstrings are very welcome! (And they will usually get merged before you can reload your page <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>\n</blockquote>\n<p>Sounds something I can do :)</p>",
        "id": 193088069,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586200510
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/schroeder_bernstein.html\" title=\"https://leanprover-community.github.io/mathlib_docs/set_theory/schroeder_bernstein.html\">https://leanprover-community.github.io/mathlib_docs/set_theory/schroeder_bernstein.html</a></p>",
        "id": 193088140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586200560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193088033\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193088033\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193087853\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193087853\">said</a>:</p>\n<blockquote>\n<p>Did you really search?</p>\n</blockquote>\n<p>I definitely searched for \"Cantor\" and \"Cantor-Bernstein\", but I should have searched for something else, I suppose, in <code>set_theory</code> and <code>cardinals</code> (?)</p>\n</blockquote>\n<p>→ schroeder_bernstein :D — I should have searched for bernstein I guess ; in France, we call it Cantor-Bernstein</p>",
        "id": 193088182,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586200565
    },
    {
        "content": "<p>If I wanted to see where is Banach-Tarski-Hausdorff paradox, where would I expect to find it?</p>",
        "id": 193088370,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586200690
    },
    {
        "content": "<p>I don't think it's there yet. But I guess it would be somewhere in <code>measure_theory/</code></p>",
        "id": 193089567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586201372
    },
    {
        "content": "<p>That could be a fun project for you.</p>",
        "id": 193089773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586201462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193089773\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193089773\">said</a>:</p>\n<blockquote>\n<p>That could be a fun project for you.</p>\n</blockquote>\n<p>Definitely :-)</p>",
        "id": 193090710,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586201937
    },
    {
        "content": "<p>Is there something like the Vitali set to show that not every set of reals is measurable?</p>",
        "id": 193092690,
        "sender_full_name": "David Wärn",
        "timestamp": 1586202921
    },
    {
        "content": "<p>Highly unlikely</p>",
        "id": 193094772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586203901
    },
    {
        "content": "<p>They're not into examples in mathlib</p>",
        "id": 193094804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586203919
    },
    {
        "content": "<p><code>git grep -i Vitali</code></p>",
        "id": 193095295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586204142
    },
    {
        "content": "<p>It is in <code>measure_theory/lebesgue_measure</code> but it is in a comment, so possibly it doesn't work with current <code>mathlib</code>.</p>",
        "id": 193095499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586204215
    },
    {
        "content": "<p>You can move it to <code>examples</code> and PR</p>",
        "id": 193095516,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586204225
    },
    {
        "content": "<p>Then move it back if you'll need it for some proof.</p>",
        "id": 193095565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586204242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193089567\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193089567\">said</a>:</p>\n<blockquote>\n<p>I don't think it's there yet. But I guess it would be somewhere in <code>measure_theory/</code></p>\n</blockquote>\n<p>I will need some <code>isometry</code> stuff, I see <code>metric_space/isometry</code>, but, is there any notion of orientation (direct/indirect) isometries?<br>\nI tried to grep for direct in the file but no result.</p>",
        "id": 193097518,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586205071
    },
    {
        "content": "<p>I don't know anything about this kind of maths</p>",
        "id": 193098536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586205579
    },
    {
        "content": "<p>What is a direct/indirect isometry?</p>",
        "id": 193098626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586205606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193098626\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193098626\">said</a>:</p>\n<blockquote>\n<p>What is a direct/indirect isometry?</p>\n</blockquote>\n<p>Oh, sorry, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is an isometry between euclidean affine spaces, we say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is direct when the linear part of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is of determinant 1, IIRC.</p>\n<p>Basically, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> preserves the orientation of the space.</p>",
        "id": 193099310,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586205927
    },
    {
        "content": "<p>Aah, ok. In that case I knew the concept <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 193099367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586205959
    },
    {
        "content": "<p>Probably you'll need to define <code>SO(n)</code></p>",
        "id": 193099579,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586206066
    },
    {
        "content": "<p>We have <code>SL(n)</code> in <code>linear_algebra/special_linear_group</code></p>",
        "id": 193099656,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586206099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193099367\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193099367\">said</a>:</p>\n<blockquote>\n<p>Aah, ok. In that case I knew the concept <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>\n</blockquote>\n<p>I attempted the dangerous game of direct (without pun) translation from French to English :D</p>",
        "id": 193100283,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586206418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193099579\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193099579\">said</a>:</p>\n<blockquote>\n<p>Probably you'll need to define <code>SO(n)</code></p>\n</blockquote>\n<p>Yes, I'll definitely need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">O</mi></mrow><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{SO}_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">O</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 193100328,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586206438
    },
    {
        "content": "<p>Then you'll deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>O</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">SO_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, not <code>isometry</code>.</p>",
        "id": 193101546,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586207017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193101546\" title=\"#narrow/stream/113489-new-members/topic/WIP.3A.20metric.20spaces.20tutorial/near/193101546\">said</a>:</p>\n<blockquote>\n<p>Then you'll deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>O</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">SO_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, not <code>isometry</code>.</p>\n</blockquote>\n<p>Definitely, but I need to glue <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>O</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">SO_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and isometry, right? At least, I just need to know that an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>O</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">O_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is an isometry.</p>",
        "id": 193102200,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586207342
    },
    {
        "content": "<p>Yes, but you don't have to define \"orientation preserving\" for isometries.</p>",
        "id": 193102279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586207393
    },
    {
        "content": "<p>Agreed</p>",
        "id": 193102459,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586207468
    },
    {
        "content": "<p>BTW, you'll need to redefine <code>euclidean_space</code>. Right now it is define somewhere in <code>geometry/</code> to help defining manifolds, and it has <code>sup</code>-norm instead of an <code>inner_product_space</code> structure.</p>",
        "id": 193102462,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586207470
    },
    {
        "content": "<p>Something like <code>instance [fintype n] : has_inner (n → real) := ⟨λ a b, finset.univ.sum (λ i, a i * b i)⟩</code>.</p>",
        "id": 193102891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586207703
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 193103154,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586207865
    },
    {
        "content": "<p>As a token learner, I just thought I'd mention that a set tutorial would be much appreciated; I quickly ran into trouble trying to use sets of sets and I didn't find it obvious how to work with them by looking at mathlib etc.</p>",
        "id": 193111287,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1586212529
    },
    {
        "content": "<p>I pushed some stuff onto a branch of the tutorial project. I need to do other things tomorrow/Wed but hopefully I'll get back to it Thurs. Feel free to help out with some examples or exercises. I thought it was worth figuring out exactly which tactics are needed to prove the set stuff, because the moment we're into metric spaces we're using <code>linarith</code> etc.</p>",
        "id": 193113962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586214388
    }
]