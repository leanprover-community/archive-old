[
    {
        "content": "<p>I read somewhere that mathlib has been moving from type classes to bundled structures. I don't understand what this mean, can someone explain this to me and make me an explicit example?</p>",
        "id": 247134391,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627232021
    },
    {
        "content": "<p>we use <code>monoid_hom</code> not <code>is_monoid_hom</code>, and have been doing so for some time.</p>",
        "id": 247134434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232048
    },
    {
        "content": "<p>Ok I believe I joined the community after this change had already happened... before there was a class <code>is_monoid_hom</code>? Why would you ever do that? I mean what was the advantage of that?</p>",
        "id": 247134528,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627232237
    },
    {
        "content": "<p>there <em>is</em> a class <code>is_monoid_hom</code>! In the <code>undeprecate</code> branch I'm changing it to a structure. You seem to be speaking as if it is well-known how to do monoid homomorphisms in Lean's type theory. This was not always the case.</p>",
        "id": 247134595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232321
    },
    {
        "content": "<p>We tried <code>is_monoid_hom</code> first, and then <code>monoid_hom</code>, and the latter worked better so that's the one we've been using.</p>",
        "id": 247134660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232407
    },
    {
        "content": "<p>Oh I see I guess I just have the perspective from the future but I would see things differently if I were not used to bundled morphisms</p>",
        "id": 247134748,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627232499
    },
    {
        "content": "<p>Right. When we were building the algebra hierarchy I was asking questions like \"so how do we do group homomorphisms\", expecting the answer to be well-known, and it turned out that the answer was that one has to experiment to find out. I was very surprised! As a mathematician I just expected everything to be very well-understood, but this was not the case at all.</p>",
        "id": 247134806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232568
    },
    {
        "content": "<p>Even if you look at how they're done in Coq, this doesn't tell you how to do them in Lean, because they emphasize canonical structures and we emphasize type class inference etc.</p>",
        "id": 247134823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232607
    },
    {
        "content": "<p>I still don't see why would you make <code>is_monoid_hom</code> a class instead of a structure <code> : Prop</code> in case you want it to be a proposition instead of bundling it</p>",
        "id": 247134863,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1627232630
    },
    {
        "content": "<p>Because you want the composite of two monoid homomorphisms to automatically be a monoid homomorphism.</p>",
        "id": 247134917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232654
    },
    {
        "content": "<p>However it turned out that type class inference would often not fire, and then it turned out that dot notation was super-powerful, and so the bundled version won.</p>",
        "id": 247134964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232702
    },
    {
        "content": "<p>There are still many <code>is_monoid_hom</code>s in mathlib, although there are far fewer in the <code>undeprecate</code> branch.</p>",
        "id": 247134988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232727
    },
    {
        "content": "<p>There are also many <code>is_ring_hom</code>, <code>is_submonoid</code>, <code>is_subgroup</code>, <code>is_subring</code> and <code>is_subfield</code>s.</p>",
        "id": 247135064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232767
    },
    {
        "content": "<p>I'll push the many hours of work I've done on this branch today so you can see an update :-)</p>",
        "id": 247135074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232796
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/undeprecate\">https://github.com/leanprover-community/mathlib/compare/undeprecate</a></p>",
        "id": 247135102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627232851
    },
    {
        "content": "<p>Consider something like polynomial.coeff p n. The way that coeff is defined is separate from the proofs that it's a hom. So one might use is_ring_hom to prove some lemmas, let's say about sums. Sometimes the definition of the function (the data) can come much earlier than the proofs that it's a hom.</p>",
        "id": 247135339,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627233162
    },
    {
        "content": "<p>Another example is matrix.adjugate. Proving that it's a monoid_hom is more complex than just defining the adjugate.</p>",
        "id": 247135357,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627233236
    }
]