[
    {
        "content": "<p>Hi, I'm trying to do the homework problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">q</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">\\</span><span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">\\</span><span class=\"n\">and</span> <span class=\"n\">q</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>from the Theorem Proving in Lean book.  I can do this using tactics, but I'm trying to use native lean syntax.<br>\nI can prove one direction (I think):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hpaq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpqr</span> <span class=\"n\">hpaq.left</span> <span class=\"n\">hpaq.right</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I can't seem to figure out how to do the other direction.  FWIW I used the \"apply\" tactic in my solution to the version from Kevin's course, but I can't seem to translate that into lean. </p>\n<p>I also can't figure out why my first block of code doesn't get translated into proper unicode symbols but my second one does.....</p>",
        "id": 264339822,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1639072520
    },
    {
        "content": "<p>Regarding unicode translation, sometimes the plugin doesn't turn on in new files until you switch to another file and back</p>",
        "id": 264340501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639072781
    },
    {
        "content": "<p><del>The definition you need in the other direction is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and.elim\">docs#and.elim</a></del></p>",
        "id": 264340639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639072814
    },
    {
        "content": "<p><del>But maybe that's cheating; in which case, you need to use <code>and.rec</code> (which has no documentation as its native)</del></p>",
        "id": 264340779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639072854
    },
    {
        "content": "<p>I think the book uses <code>and.left</code> and <code>and.right</code></p>",
        "id": 264340830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639072876
    },
    {
        "content": "<p>except, I guess that's the direction that was done already. For the other direction you need <code>and.intro</code></p>",
        "id": 264340996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639072936
    },
    {
        "content": "<p>In this case you can translate your tactic proof into a proof term.  A natural tactic proof you might arrive at by \"following your nose\" is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(where the last line is suggested by <code>library_search</code>).</p>\n<p>Then you can combine the last two lines, since the final line is just providing the argument for the <code>h</code> on the penultimate line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now, since <code>apply</code> finishes the job, we could replace it with <code>exact</code>.</p>\n<p>Finally, since all we're doing now is taking some inputs and returning an expression built out of those inputs, we can rewrite this as a lambda expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 264341686,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639073200
    },
    {
        "content": "<p>Thanks a lot, I recast your solution into the assume/show format I was following and came up with this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span>  <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpqr</span> <span class=\"o\">⟨</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 264343658,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1639073881
    }
]