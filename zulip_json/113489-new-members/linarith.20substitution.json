[
    {
        "content": "<p>Why doesn't <code>linarith</code> work at the bottom?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">parity</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Lemmas from that file were hidden in my course, or restating things which</span>\n<span class=\"cm\">were proved without name in previous files.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extraction</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">φ</span> <span class=\"n\">m</span>\n\n\n\n<span class=\"n\">def</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">cluster_point</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">φ</span><span class=\"o\">,</span> <span class=\"n\">extraction</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span> <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">near_cluster</span> <span class=\"o\">:</span>\n  <span class=\"n\">cluster_point</span> <span class=\"n\">u</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The above exercice can be done in five lines.</span>\n<span class=\"cm\">Hint: you can use the anonymous constructor syntax when proving</span>\n<span class=\"cm\">existential statements.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- If `u` tends to `l` then its subsequences tend to `l`. -/</span>\n<span class=\"c1\">-- 0041</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">subseq_tendsto_of_tendsto&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">extraction</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unique_limit</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"n\">l&#39;</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- If `u` tends to `l` all its cluster points are equal to `l`. -/</span>\n<span class=\"c1\">-- 0042</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">cluster_limit</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">cluster_point</span> <span class=\"n\">u</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\">- Cauchy_sequence sequence -/</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy_sequence</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">q</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">In the next exercise, you can reuse</span>\n<span class=\"cm\"> near_cluster : cluster_point u a → ∀ ε &gt; 0, ∀ N, ∃ n ≥ N, |u n - a| ≤ ε</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- 0044</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">cauchy_sequence</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">cluster_point</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n<span class=\"n\">cases</span> <span class=\"n\">hu</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">exists_N&#39;</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">near_cluster</span> <span class=\"n\">hl</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n<span class=\"n\">cases</span> <span class=\"n\">exists_N&#39;</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;</span> <span class=\"n\">hN&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hN&#39;</span> <span class=\"k\">with</span> <span class=\"n\">N&#39;_ge_N</span> <span class=\"n\">N&#39;_close</span><span class=\"o\">,</span>\n<span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">N&#39;</span> <span class=\"n\">n</span> <span class=\"n\">N&#39;_ge_N</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">N&#39;</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_add</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- XXX Doesn&#39;t work</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204595927,
        "sender_full_name": "Iocta",
        "timestamp": 1595361576
    },
    {
        "content": "<p>what is the error, including the proof state?</p>",
        "id": 204596070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595361632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">linarith</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">contradiction</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">cluster_point</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">N&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">N&#39;_ge_N</span> <span class=\"o\">:</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">N&#39;_close</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">N&#39;</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&gt;</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">cluster_point</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">N&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">N&#39;_ge_N</span> <span class=\"o\">:</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">N&#39;_close</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">N&#39;</span> <span class=\"bp\">-</span> <span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">|</span><span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"n\">ε</span>\n</code></pre></div>",
        "id": 204596194,
        "sender_full_name": "Iocta",
        "timestamp": 1595361682
    },
    {
        "content": "<p>You have a hypothesis about <code>|u N' - u n|</code> not <code>|u n - u N'|</code> and linarith doesn't know they're equal?</p>",
        "id": 204596345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595361751
    },
    {
        "content": "<p>What Reid said, you can do by <code>by rw abs_sub; linarith</code> instead</p>",
        "id": 204596393,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595361783
    },
    {
        "content": "<p>Thanks</p>",
        "id": 204596609,
        "sender_full_name": "Iocta",
        "timestamp": 1595361879
    },
    {
        "content": "<p>When I was using linarith to solve goals like this, I would incredulously ask the designer why linarith didn't just apply things like <code>abs_sub</code> automatically, given that it's clearly a linear inequality kind of thing. The answer is that tactics are there to do one job and to do it well, and job of linarith is to deal with goals and hypotheses of the form x&lt;=y and x=y and x&lt;y. The moment you start asking it to do more, eg hypotheses of the form <code>a&lt;b \\and c&lt;d</code> you are facing the possibility of chaos as it starts unfolding everything in case it turns out to be an inequality. It's the user's job to reduce everything to plain a&lt;=b statements because that's where the tactic starts it's work -- that's it's specification. Once all this sunk in I began to be able to use <code>linarith</code> much more effectively.</p>",
        "id": 204600357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595364015
    },
    {
        "content": "<p>When working with absolute values you need to know stuff like abs_le and le_abs etc and apply them yourself to break everything into bare inequalities, so it's worth knowing the basic interface for abs with these kinds of question</p>",
        "id": 204600569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595364138
    }
]