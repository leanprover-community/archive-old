[
    {
        "content": "<p>this is probably separate from the egregiousness issue so I'm creating a new thread. why are their definitions... the same?</p>",
        "id": 240923093,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622544108
    },
    {
        "content": "<p>Note that <code>multiplicative X</code>, <code>additive X</code>, and <code>order_dual X</code> are also \"the same\".</p>",
        "id": 240923284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622544225
    },
    {
        "content": "<p>However, just because things are the same after you unfold them doesn't mean they're not worth having. What's relevant here is that typeclass search does not unfold them, so <code>with_top</code> and <code>with_bot</code> have different typeclass instances associated with them than <code>option</code> does.</p>",
        "id": 240923415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622544310
    },
    {
        "content": "<p>so they are like... newtypes?</p>",
        "id": 240923735,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622544482
    },
    {
        "content": "<p>or am i missing something</p>",
        "id": 240923775,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622544509
    },
    {
        "content": "<p>For me, the example below cleared some of the doubts that I had.</p>\n<p>If you want to describe the reals to which you add (+infinity), you can do it in two stages.</p>\n<ol>\n<li>Add a new element to the reals;</li>\n<li>declare the new element to be <em>bigger</em> than anything else.</li>\n</ol>\n<p>Similarly, if you want to describe the reals to which you add (-infinity), you can do it in two stages.</p>\n<ol>\n<li>Add a new element to the reals;</li>\n<li>declare the new element to be <em>smaller</em> than anything else.</li>\n</ol>\n<p>The two constructions begin with the same first step.  However, if you know where you are headed, it makes sense to call the first new element (+infinity) and the second one (-infinity).  You let Lean know about this by giving <em>different</em> names to the <em>same</em> thing.</p>",
        "id": 240923874,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622544596
    },
    {
        "content": "<p>hmm okay so this sounds like newtype to me</p>\n<p>how does the alias command work then? can an alias have different typeclass instances than the original type?</p>",
        "id": 240924415,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1622544932
    },
    {
        "content": "<p>I have only seen <code>alias</code> used for assigning a different name to an existing lemma.  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.alias.alias_attr\">docs#tactic.alias.alias_attr</a></p>",
        "id": 240925610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622545681
    },
    {
        "content": "<p>If you <code>def X := nat</code> then <code>X</code> doesn't have any of the typeclass instances of <code>nat</code> and you can add new instances to <code>X</code> which will not be picked up by <code>nat</code>. Conversely there's some <code>@[derive]</code> trickery which you can use to pull instances over from <code>nat</code> to <code>X</code> if you want them there.</p>",
        "id": 240927363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622546822
    }
]