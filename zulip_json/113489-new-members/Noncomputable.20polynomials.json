[
    {
        "content": "<p>I am trying to define polynomial runtime of Turing machines and I encountered the following error<br>\n<code>definition 'p' is noncomputable, it depends on 'polynomial.semiring'</code>.<br>\nA minimal working example is<br>\n<code>def p : polynomial â„• := 1</code>.<br>\nHow do I avoid this error without making computability theory non-computable?</p>",
        "id": 208489782,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1598800930
    },
    {
        "content": "<p>what's wrong with making computability theory non-computable?</p>",
        "id": 208490020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598801318
    },
    {
        "content": "<p>I don't know what the boon of computability is in lean, but I figured it would be better. Either way, it seems a bit silly that polynomial evaluation is non-computable.</p>",
        "id": 208490119,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1598801498
    },
    {
        "content": "<p>The thing that is computable is the TM, not the bound</p>",
        "id": 208507359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598826656
    },
    {
        "content": "<p>Polynomials used to be computable, but for multivariate polynomials specifically, you need decidable equality on the type to be able to tell monomials apart, and these assumptions caused problems for regular proofs. If you want a special computable type for univariate polynomials on nat, define it yourself and prove equivalence to the usual one</p>",
        "id": 208507418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598826799
    },
    {
        "content": "<p>I've been looking at this a bit, and I'm having a hard time finding out the underlying reason why polynomial/basic.lean starts with noncomputable theory. Apparently add_monoid_algebra's are noncomputable, because add_comm_monoid's are noncomputable, but then I can't find why those are noncomputable.</p>",
        "id": 208745260,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598992826
    },
    {
        "content": "<p>I'm asking, because I don't think it's a good idea to just copy the files I need, replace R by nat everywhere, and remove the <code>noncomputable theory</code>.</p>",
        "id": 208745282,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598992840
    },
    {
        "content": "<p>Because we tried computable polynomials and it was HELL.</p>",
        "id": 208745303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598992855
    },
    {
        "content": "<p>I was wondering (but I don't know how this would work) if it's possible to only make the theory noncomputable if the semiring is noncomputable?</p>",
        "id": 208745312,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598992861
    },
    {
        "content": "<p>This is exactly how you get into trouble. Because then the definition of operations (like addition or whatever) depends on <em>how</em> you compute things (mainly equality to zero) in the semiring.</p>",
        "id": 208745493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598992947
    },
    {
        "content": "<p>And then someone who says \"I don't care about this computability stuff, just use <code>classical</code> to decide everything\" gets a different notion of addition.</p>",
        "id": 208745561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598993002
    },
    {
        "content": "<p>It's also possible to evaluate some operations (like the ring operations, and evaluation) without needing any decidable equality, but it requires a different representation than the one mathlib currently uses</p>",
        "id": 208745680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598993061
    },
    {
        "content": "<p>Also, even back in the days of computable polynomials, the actual computation method is pretty terrible</p>",
        "id": 208745742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598993106
    },
    {
        "content": "<p>For univariate polynomials over nat you can do a lot better with the obvious algorithm</p>",
        "id": 208745804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598993140
    },
    {
        "content": "<p>Actually we might even have the correct constructive definition (the free R-algebra on the set of variables as generators) somewhere in mathlib.</p>",
        "id": 208746064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598993269
    },
    {
        "content": "<p>I would actually suggest the <code>list_blank</code> representation (which is already being used for TMs) instead of finitely supported functions</p>",
        "id": 208746233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598993349
    },
    {
        "content": "<p>The free R-algebra has the problem that things never get reduced</p>",
        "id": 208746256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598993369
    },
    {
        "content": "<p>it's good for constructive math but not computation</p>",
        "id": 208746319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598993402
    },
    {
        "content": "<p>right, that one also works I think for single variable polynomials--I'm pretty sure using a quotient somewhere is essential</p>",
        "id": 208746417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598993438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Noncomputable.20polynomials/near/208745493\">said</a>:</p>\n<blockquote>\n<p>This is exactly how you get into trouble. Because then the definition of operations (like addition or whatever) depends on <em>how</em> you compute things (mainly equality to zero) in the semiring.</p>\n</blockquote>\n<p>Not sure I understand it. Any two terms of <code>decidable x=0</code> are equal right? Whether you get them through choice or through decidable_eq on the semiring. So how does the definition of operations depend on how you compute these kinds of terms?</p>",
        "id": 208746476,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1598993471
    },
    {
        "content": "<p>They're equal but not definitionally equal</p>",
        "id": 208746758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598993612
    },
    {
        "content": "<p>So the effect is that <code>rfl</code> stops working for no apparent reason.</p>",
        "id": 208747149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598993779
    },
    {
        "content": "<p>IIRC the main problem was not lack of defeq but rather really slow typeclass inference for everything depending on polynomials</p>",
        "id": 208747150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598993779
    },
    {
        "content": "<p>On the other hand, the tweaks we made to typeclass inference that halved the compilation time of mathlib were made <em>after</em> we made polynomials classical. Who knows if those problems would have gone away?</p>",
        "id": 208754549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598997716
    }
]