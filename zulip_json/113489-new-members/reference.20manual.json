[
    {
        "content": "<p>what is the repository of the reference manual source files? I found some typos in the <a href=\"https://leanprover.github.io/reference/tactics.html#basic-tactics\" target=\"_blank\" title=\"https://leanprover.github.io/reference/tactics.html#basic-tactics\">https://leanprover.github.io/reference/tactics.html#basic-tactics</a> and I would like to make some suggestions.</p>",
        "id": 176947940,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569860294
    },
    {
        "content": "<p>Here, possibly: <a href=\"https://github.com/avigad/reference\" target=\"_blank\" title=\"https://github.com/avigad/reference\">https://github.com/avigad/reference</a></p>",
        "id": 176948229,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1569860522
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , I made a PR but this is actually a fork from another repo. Let us see which one is the 'official'.</p>",
        "id": 176954403,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1569864932
    },
    {
        "content": "<p>Where can I find a complete version of the reference manual? Thanks.</p>",
        "id": 279124819,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650057460
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/\">https://leanprover.github.io/reference/</a></p>",
        "id": 279126299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650058517
    },
    {
        "content": "<p>So, there aren't units 7 and 8 yet, then? At least this version doesn't have anything for units 7 and 8. What is the way to systematically learn Lean as a programming language? Tactics is only a surface layer. I can watch a few videos for sure, but that isn't the same as doing it abc from the beginning up.</p>",
        "id": 279171912,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650120852
    },
    {
        "content": "<p>I've done quite a bit of tactics mode already, enough to get things done with them.</p>",
        "id": 279171929,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650120909
    },
    {
        "content": "<p>If you want to learn Lean as a programming language instead of as a you'll most likely want to take a look at Lean 4 instead of 3 since 4 is actually designed to be one unlike 3.</p>\n<p>Unfortunately we don't really have extensive resources for teaching Lean as a programming language as of now. Basically everyone who knows Lean 4 learned it by reading Lean 4 source code that already exists. Most prominently compiler code and mathlib4 code. + Of course the theorem proving in Lean 4 port here <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a> and the lean 4 manual here <a href=\"https://leanprover.github.io/lean4/doc/whatIsLean.html\">https://leanprover.github.io/lean4/doc/whatIsLean.html</a> (which is even further away from completion than this reference manual)</p>\n<p>If/Once you hit a road block because of some functional programming concepts like Functors, Monads etc. you can almost always just search for a Haskell resource about it since these abstractions are mathematical ones and hence translate easily across programming languages. If you have any questions the Lean 4 stream will be happy to help as well^^</p>",
        "id": 279172240,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650121271
    },
    {
        "content": "<p>A reference manual isn't really teaching materials, it's documentation. Having spent a good deal of time on tactics and proofs, I would be able to work through documentation, but I would not be able to work through source code.</p>",
        "id": 279173629,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650123630
    },
    {
        "content": "<p>Do you have a computer science or math background? I can imagine its pretty hard to pull off with a math background but having a computer science one I can tell you, I used to think this way as well but the thing that was mostly stopping me was just thinking I wouldn tunderstand it, if you put in the time and especially patience it's very doable.</p>",
        "id": 279173782,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650123935
    },
    {
        "content": "<p>Especially since proving is just a subset of regular programming in Lean you actually already know a lot of things we do when we write regular programs in Lean 4, it's mostly just more syntax or concepts you can learn from Haskell docs and apply rather easily to Lean</p>",
        "id": 279173836,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650124011
    },
    {
        "content": "<p>It's the syntax and language specification (a full list of everything that the core language can do) that, without a reference manual, are opaque.</p>",
        "id": 279173921,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650124154
    },
    {
        "content": "<p>They are opaque iff you are not willing to learn from source code yes</p>",
        "id": 279173985,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650124225
    },
    {
        "content": "<p>Let me rephrase the question then: are there any resources for guiding newbies through the source code so that they can get a solid grounding in the core language, syntax and so on?</p>",
        "id": 279174269,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650124631
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/title_page.html\">https://leanprover.github.io/theorem_proving_in_lean4/title_page.html</a> does teach most of the basic mechanisms we use, the majority of other things is (lots of) syntactic sugar on top</p>",
        "id": 279174331,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650124720
    },
    {
        "content": "<p>If you start doing real programming with stuff like input output you also most likely want to read a Monad tutorial out of which there are an insane amount out there for Haskell trying to explain the concept in various ways...its a thing lots of new purely functional programmers get stuck on for a while in the beginning but once you understand it everything related to it feels rather easy, getting to that point can take a while though.</p>",
        "id": 279174553,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650124927
    },
    {
        "content": "<p>Yeah, I can understand that! Not the issue I have though - am looking for a reference manual that sadly doesn't exist yet!! Thanks anyway...amazing super-on-the-ball community that's for sure. I might try to go through the source code as you have stated is necessary for my purposes. Have a good holiday weekend.</p>",
        "id": 279175733,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650126781
    },
    {
        "content": "<p>I am building an interpreter for a language that I am creating in Lean 4. It's obviously simpler than Lean so it might serve as a smaller codebase to start off from:<br>\n<a href=\"https://github.com/arthurpaulino/FxyLang\">https://github.com/arthurpaulino/FxyLang</a></p>",
        "id": 279179273,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650132078
    },
    {
        "content": "<p>Eventually I will get it documented to serve as some sort of tutorial. But for now it's just code</p>",
        "id": 279179361,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650132222
    },
    {
        "content": "<p>I will just point out that the difference in mental overhead between reading source code, especially in a language you don't understand, and reading actual plain-english documentation, is <em>tremendous</em><br>\nin much the same way that, I don't know, reading an unannotated proof is much harder than reading a textbook, or even a paper<br>\n'learn from the source code' isn't really a reasonable expectation, imo</p>",
        "id": 279200672,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650167618
    },
    {
        "content": "<p>The lack of documentation at this point isn't a matter of policy, but just a lack of time while the implementation is finished</p>",
        "id": 279203228,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650171986
    },
    {
        "content": "<p>Lean is a project, not a finished product. People are writing what they can.</p>",
        "id": 279208948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650181754
    },
    {
        "content": "<p>Right now the lean3 reference manual is in <code>leanprover</code> not <code>leanprover-community</code>, so presumably in this case we can't actually write any more of it?</p>",
        "id": 279209655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650182837
    },
    {
        "content": "<p>In the following video <a href=\"https://www.youtube.com/watch?v=-RQQxFVZnn4&amp;t=0s\">https://www.youtube.com/watch?v=-RQQxFVZnn4&amp;t=0s</a> \"the documentation\" is mentioned at 19.40ish. He even talks about what is in the documentation and it doesn't match anything in Theorem Proving in Lean as far as I can tell, whilst Programming in Lean seems to be mainly stubs, and you wouldn't refer someone to a series of stubs. So, I'm nodding along to him thinking \"sure, sure, all I have to do is look up all the other related tactics in the documentation\".  Which sounds great! But I am confused as to what he is referring to.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"-RQQxFVZnn4\" href=\"https://www.youtube.com/watch?v=-RQQxFVZnn4&amp;t=0s\"><img src=\"https://uploads.zulipusercontent.net/bd0cf2c97580f0ba298f730cb4186d8620b3a5d3/68747470733a2f2f692e7974696d672e636f6d2f76692f2d5251517846565a6e6e342f64656661756c742e6a7067\"></a></div>",
        "id": 279939423,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650738818
    },
    {
        "content": "<p>Most likely this <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> respectively this <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a> for Lean 4. But you at least have to know a certain location to look at already</p>",
        "id": 279940499,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650740448
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> is here so he probably knows best himself :P</p>",
        "id": 279940522,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650740486
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a>.</p>",
        "id": 279940629,
        "sender_full_name": "Chris B",
        "timestamp": 1650740634
    },
    {
        "content": "<p>Ch 7 of the hitchhikers guide is also in the description, so he might have meant that.</p>",
        "id": 279940749,
        "sender_full_name": "Chris B",
        "timestamp": 1650740765
    },
    {
        "content": "<p>That last one is certainly useful given the topic. In any case it gives some essential reference material I was looking for. Can I just clarify something that might seem dumb: where did the people who wrote the hitchhikers guide chapter 7 get their syntax information from without a reference manual?...my understanding is that they got their knowledge of the syntax straight from the source code (maybe because they contributed to writing it or some such)? Is that right?</p>",
        "id": 279941140,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650741433
    },
    {
        "content": "<p>It's very difficult to say, documentation has changed over time and a lot of information probably travels between users informally. My guess is that the early adopters looked at the original research paper outlining the tactic system quite a bit since it's fairly in-depth and has been around since 2017: <a href=\"https://leanprover.github.io/papers/tactic.pdf\">https://leanprover.github.io/papers/tactic.pdf</a></p>",
        "id": 279941615,
        "sender_full_name": "Chris B",
        "timestamp": 1650742158
    },
    {
        "content": "<p>OK. Interesting. I just found that paper myself referenced in one of the tactics_writing links above. I've also noticed that Programming in Lean chapter 8 (even this chapter is incomplete unfortunately) is mentioned in Hitchhikers chapter 7, and there is a paper mentioned there too...which is the same as this one I think. Looks like we've drilled down as far as this rabbit hole goes. Presumably there actually is enough here to dive into some of the source code as well, at least those parts written in Lean itself. Changing documentation which is never completed makes me feel a bit queasy though, but that just goes back to Kevin Buzzard's point about work-in-progress! Still, thanks for the help everyone.</p>",
        "id": 279942358,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650743278
    },
    {
        "content": "<p>Of course it's not ideal, but in my experience it's always been worth the effort to dig Lean source code to understand how something works (I am talking about Lean 4 here). I often find new and better ways to do things</p>",
        "id": 279945424,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650747637
    },
    {
        "content": "<p>It also depends on your learning style. I am a slow paced and long term learner</p>",
        "id": 279945500,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650747740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  advised looking at the mathlib documentation. Both Lean3 and Lean4 have some auto-generated documentation for both core (eg. Init, Std, Lean and such) as well as mathlib. OK I get that. I'm going to try to dig into that but my thoughts are that what is needed here is a reference manual for that core language, that is, once you have a handle on the core then the mathlib auto-generated documentation would make a whole deal more sense, or at least you could work through it slowly. You wouldn't necessarily need a full reference manual for mathlib at all at first.  For example, the first thing I encounter when I look at core.lean is a command called 'prelude', it's also in some of the Init files. This is present in Lean3 and Lean4, so it must be pretty important. I really don't want to skip over that (don't answer here, I'll make a separate thread). Maybe I'm off the mark here, but that's where I feel I want to start, at least after all the great taster videos and newbie exercises: right at the beginning, from the ground up, in the core of the language!</p>",
        "id": 279990278,
        "sender_full_name": "Robert Watson",
        "timestamp": 1650820733
    },
    {
        "content": "<p>(Actually the prelude command is almost completely irrelevant and you can ignore it, it merely means \"dont import Init\" wich is something the majority of lean users will never wanna do)</p>",
        "id": 279990480,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1650821093
    }
]