[
    {
        "content": "<p>If I have <code>x ∈ z</code> as a hypothesis, and my goal is <code>y ∈ z</code>, is there an easy way to change the goal to <code>x = y</code>?</p>",
        "id": 205384400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596042229
    },
    {
        "content": "<p>Preferably without having to actually spell out what <code>x</code>, <code>y</code>, and <code>z</code> are in my proof</p>",
        "id": 205384520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596042261
    },
    {
        "content": "<p><code>convert hxz using 1</code></p>",
        "id": 205385167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596042597
    },
    {
        "content": "<p>What is <code>1</code> there?</p>",
        "id": 205385270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596042641
    },
    {
        "content": "<p>Where hxz is the proof that x is in z</p>",
        "id": 205385275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596042642
    },
    {
        "content": "<p>You didn't say what x and y were, but if they are complex structures which are similar then convert might try to be too clever</p>",
        "id": 205385325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596042677
    },
    {
        "content": "<p>1 says only to do 1 level of matching, so if x and y have other similarities it won't go too far</p>",
        "id": 205385339,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596042684
    },
    {
        "content": "<p>Looks like lean can't explain the syntax to me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"err\">←</span> <span class=\"n\">expr</span> <span class=\"bp\">&lt;</span><span class=\"n\">error</span> <span class=\"n\">while</span> <span class=\"n\">executing</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">param_desc</span><span class=\"o\">:</span> <span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">pretty</span> <span class=\"kn\">print</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">small_nat</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 205385437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596042727
    },
    {
        "content": "<p>Anyway, thanks for the speedy reply <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, that's exactly what I needed :)</p>",
        "id": 205385479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596042754
    },
    {
        "content": "<p>How is this bug still not fixed?</p>",
        "id": 205385486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596042761
    },
    {
        "content": "<p>Is there an open issue for it?</p>",
        "id": 205385571,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596042819
    },
    {
        "content": "<p>I thought there was a <code>small_nat'</code> parser in mathlib, but now I can't find it</p>",
        "id": 205385665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596042858
    },
    {
        "content": "<p>and of the search results it looks like more than half of <code>small_nat</code> uses are not guarded by <code>with_desc</code></p>",
        "id": 205385706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596042891
    },
    {
        "content": "<p>although the actual description varies, it can be <code>n</code> or <code>i</code> or <code>j</code></p>",
        "id": 205385777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596042936
    },
    {
        "content": "<p>I think we should just make <code>small_nat</code> in core have description <code>n</code></p>",
        "id": 205385870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596042973
    },
    {
        "content": "<p>oh weird, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interactive.param_desc/src\">src#interactive.param_desc</a> is defined by recursion on expr instead of using typeclasses</p>",
        "id": 205386233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596043183
    },
    {
        "content": "<p>I guess we just need another case in <code>parser_desc_aux</code></p>",
        "id": 205386320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596043217
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/424\">lean#424</a></p>",
        "id": 205386835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596043488
    }
]