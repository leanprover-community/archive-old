[
    {
        "content": "<p>I am currently trying to define the inner and outer automorphism groups of a given group <code>G</code> and have run into some issues.  I have included the relevant code below (in a dropdown for length reasons):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Code for Inner and Outer Automorphisms</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>import data.equiv.mul_add_aut<br>\nimport group_theory.subgroup<br>\nimport group_theory.quotient_group</p>\n<p>/-<br>\nThe definition of the inner and outer automorphism groups of a group G<br>\n-/</p>\n<p>universe u</p>\n<p>namespace inner_aut</p>\n<p>/-- The inner automorphism group of a group G -/<br>\ndef inner_aut {G : Type u} [group G] : subgroup (mul_aut G) :=<br>\n  {<br>\n    carrier := {φ | ∃ (c : G), ∀ (g : G), φ g = c * g * c⁻¹},<br>\n    one_mem' := sorry,<br>\n    mul_mem' := sorry,<br>\n    inv_mem' := sorry,<br>\n  }</p>\n<p>/-- A proof that the inner automorphism group is normal in Aut(G) -/<br>\nlemma inner_normal {G : Type u} [group G] : (inner_aut G).normal :=<br>\n  begin<br>\n    sorry,<br>\n  end,</p>\n<p>/-- The outer automorphism group of a group G -/<br>\ndef outer_aut {G : Type u} [group G] : quotient (inner_aut G) :=<br>\n  begin<br>\n    sorry,<br>\n  end,</p>\n<p>end inner_aut</p>\n</div></div>\n<p>The first, more immediate issue is that, even filling in the gaps with <code>sorry</code> I still get errors related to some of the definitions, specifically related to the statement that <code>inner_aut G</code> is normal in <code>mul_aut G</code> and the definition of <code>outer_aut</code> as a quotient. For the inner automorphism group, the Infoview claims that Lean expects a function, which baffles me. The specific error it gives is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">inner_aut</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">mul_aut</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I assume that, if this error is fixed, then at least some of what else is giving errors will go away, but I wouldn't be surprised if, in fact, there are still issues with what I have.</p>\n<p>The second issue is that, even with these errors fixed, I am not quite sure how to proceed with providing the necessary proofs for the definition of the inner automorphism group. Perhaps someone would be willing to provide some pointers on how to proceed? This would be much appreciated.</p>",
        "id": 233109992,
        "sender_full_name": "Alex Griffin",
        "timestamp": 1617569185
    },
    {
        "content": "<p>Your <code>inner_aut</code> doesn't take any explicit argument.</p>",
        "id": 233110550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617569903
    },
    {
        "content": "<p>This is clearly not what you want.</p>",
        "id": 233110557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617569923
    },
    {
        "content": "<p>So switch to <code>def inner_aut (G : Type u) [group G] :</code></p>",
        "id": 233110565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617569945
    },
    {
        "content": "<p>Note also there is no reason to handle universe variables by hand here. You should use <code>(G : Type*)</code></p>",
        "id": 233110582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617569973
    },
    {
        "content": "<p>You also have trailing commas after <code>end</code> which will confuse Lean. And <code>quotient</code> is not what you think until you open the <code>quotient_group</code> namespace (or use the full name <code>quotient_group.quotient</code>.</p>",
        "id": 233111035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617570109
    },
    {
        "content": "<p>And the last declaration is declaring you will define <code>outer_aut</code> as an element of the quotient of the automorphism group of an implicitly specified <code>G</code> by its inner automorphism group. This is not what you want.</p>",
        "id": 233111535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617570232
    },
    {
        "content": "<p>Also, defining the inner automorphisms like this will give you a lot of extra work compared to defining it as the image of the group morphism sending an element to the corresponding automorphism. In particular you'll need to prove it is a subgroup instead of getting it for free.</p>",
        "id": 233112337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617570553
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inner_aut</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">mul_aut</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup.map</span> <span class=\"n\">mul_aut.conj</span> <span class=\"bp\">⊤</span>\n</code></pre></div>",
        "id": 233112588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617570657
    },
    {
        "content": "<p>Note I haven't checked if this definition is already in mathlib.</p>",
        "id": 233112659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617570692
    },
    {
        "content": "<p>I think that's just <code>mul_aut.conj.range</code></p>",
        "id": 233116439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617574365
    }
]