[
    {
        "content": "<p>i have this theorem so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.qify</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sum'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trinum</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.even_mul_self_pred</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.div_eq_iff_eq_mul_left</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sum'</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_sub_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.succ_mul</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_iff_two_dvd.mp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and in my paper proof and lean proof, I'm not sure how to proceed to work with the <code>sum' (succ n)</code> in the goal for the block with <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">nat.succ</span>\n<span class=\"n\">n_n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">n_ih</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n_n.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n_n.succ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">n_n.succ.even_mul_self_pred</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n_n</span> <span class=\"bp\">*</span> <span class=\"n\">n_n</span> <span class=\"bp\">+</span> <span class=\"n\">n_n</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n_n.succ</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>NOTE: i don't want the full solution to the proof, just whatever answers the question. or, if my proof is completely bogus and stupid, you can let me know if i have to restart (and maybe with a hint as to what to do)</p>",
        "id": 308204073,
        "sender_full_name": "Joseph O",
        "timestamp": 1667697864
    },
    {
        "content": "<ul>\n<li>Use <code>have h</code> instead of <code>let h</code> and move it after induction</li>\n<li>Use <code>induction n with n ih</code> to make variable names nicer</li>\n<li>At the <code>sorry</code>, use <code>dunfold sum'</code> and then <code>rw [add_mul, ←ih]</code></li>\n</ul>",
        "id": 308211350,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667705636
    },
    {
        "content": "<p>Note also that your statement is incorrect. It should be <code>n * (n + 1) / 2</code>.</p>",
        "id": 308211523,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667705842
    },
    {
        "content": "<p>Your statement is also morally incorrect in that it uses pathological functions like natural subtraction and division. Your <code>sum'</code> type should be taking values in rationals if you want to faithfully represent the mathematics.</p>",
        "id": 308233924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667728723
    },
    {
        "content": "<p>Yeah sorry for the trouble, i just realized that<br>\n<span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/trinum.20proof.20with.20induction.20help/near/308211350\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Use <code>have h</code> instead of <code>let h</code> and move it after induction</li>\n<li>Use <code>induction n with n ih</code> to make variable names nicer</li>\n<li>At the <code>sorry</code>, use <code>dunfold sum'</code> and then <code>rw [add_mul, ←ih]</code></li>\n</ul>\n</blockquote>",
        "id": 308250243,
        "sender_full_name": "Joseph O",
        "timestamp": 1667738647
    },
    {
        "content": "<p>also what does <code>dunfold</code>do?</p>",
        "id": 308250291,
        "sender_full_name": "Joseph O",
        "timestamp": 1667738675
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dunfold\">tactic#dunfold</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a> are for unfolding definitions. The difference is that <code>dunfold</code> will only unfold definitions that can be definitionally unfolded (it will only work whenever <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a> would work)</p>",
        "id": 308251379,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667739343
    },
    {
        "content": "<p>It's like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dsimp\">tactic#dsimp</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a>.</p>",
        "id": 308251454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667739383
    },
    {
        "content": "<p>I think you can just use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a> and pretend <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dunfold\">tactic#dunfold</a> doesn't exist (at least until you deal with more complicated dependent types where occasionally unfold doesn't work but dunfold does)</p>",
        "id": 308251532,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667739447
    },
    {
        "content": "<p>I see. Thank you, I was looking for this</p>",
        "id": 308252572,
        "sender_full_name": "Joseph O",
        "timestamp": 1667740010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> i am unsure how to work with this goal </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ih</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum'</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 308254396,
        "sender_full_name": "Joseph O",
        "timestamp": 1667741107
    },
    {
        "content": "<p>how can i turn <code>(n+1).succ</code> into <code>n+2</code>?</p>",
        "id": 308254622,
        "sender_full_name": "Joseph O",
        "timestamp": 1667741221
    }
]