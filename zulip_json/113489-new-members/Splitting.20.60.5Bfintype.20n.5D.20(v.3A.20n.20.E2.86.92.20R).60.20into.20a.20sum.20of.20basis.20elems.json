[
    {
        "content": "<p>I'm trying to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_sym_to_matrix</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_sym</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">B.to_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">B.to_matrix.transpose</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">is_sym</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">bilin_form.to_matrix_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">bilin_form.to_matrix</span> <span class=\"n\">bilin_form.to_matrixₗ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">matrix.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I'm aware that I may have unfolded too much here - but it looks like I should be able to proceed by expressing <code>x</code> and <code>y</code> as a sum of scaled basis elements, applying linearity of B in both arguments, and then applying <code>h</code> to each of my n^2 terms&gt;</p>\n<p>What I don't know how to do is the re-expressing of <code>x</code> and <code>y</code></p>",
        "id": 217382192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605867134
    },
    {
        "content": "<p>Something like <code>rw ← is_basis.total_repr</code> IIRC?</p>",
        "id": 217382344,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605867237
    },
    {
        "content": "<p>That looks like the lemma, and I guess now I need to find the lemma saying that <code>is_basis R $ λ (i n_1 : n), ite (n_1 = i) (1 : R) 0</code>- since surely that exists</p>",
        "id": 217382874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605867529
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 217405306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605881523
    },
    {
        "content": "<p>(missing imports)</p>",
        "id": 217405337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605881530
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">bilin_form</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">flip</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bilin</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">bilin_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">add_right</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">bilin_smul_left</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">smul_right</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">bilin_add_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">add_left</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">bilin_smul_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">smul_left</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_matrix_flip</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">b.flip.to_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">b.to_matrix.transpose</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">bilin_form</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">bilin_form</span> <span class=\"n\">sym_bilin_form</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_sym_to_matrix</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">is_sym</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">B.to_matrix</span> <span class=\"bp\">=</span> <span class=\"n\">B.to_matrix.transpose</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">is_sym</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">bilin_form.to_matrix_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">matrix.to_bilin_form</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">to_matrix_flip</span><span class=\"o\">,</span> <span class=\"n\">to_matrix_to_bilin_form</span><span class=\"o\">,</span> <span class=\"n\">to_matrix_to_bilin_form</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">flip_bilin</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217489614,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605943625
    },
    {
        "content": "<p>I think we should also have <code>def matrix.is_sym</code></p>",
        "id": 217490182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605944951
    },
    {
        "content": "<p>And don't we already have a <code>linear_map.flip</code>?</p>",
        "id": 217490183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605944965
    },
    {
        "content": "<p><code>bilin_form</code> isn't defined to be a <code>linear_map</code></p>",
        "id": 217491259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605947052
    },
    {
        "content": "<p>Ooh, me needs to learn what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form\">docs#bilin_form</a> is</p>",
        "id": 217491700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605947980
    },
    {
        "content": "<p>The <code>rfl</code> in <code>to_matrix_flip</code> surprises me slightly, as rfls often do. Thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>!</p>",
        "id": 217493551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605951201
    }
]