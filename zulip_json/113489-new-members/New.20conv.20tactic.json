[
    {
        "content": "<p>So, is there anything special to making a tactic that works in <code>conv</code>? Do I just put it in the <code>converter.interactive</code> namespace?</p>",
        "id": 278970672,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945350
    },
    {
        "content": "<p>Specifically, I'm trying to write a tactic that takes a big chain of <code>+</code>s, turns it into a <code>multiset.sum</code>, and then collects like terms</p>",
        "id": 278970809,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945416
    },
    {
        "content": "<p>and since I haven't done much tactic writing before I thought it'd be easiest to use it in a context where I can just hand my tactic the expression without having to \"find\" it first</p>",
        "id": 278970888,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945465
    },
    {
        "content": "<p>(my specific use case is gathering scalar multiples of module elements, so the easiest way to find like terms is to just match against <code>k • r</code>, I think...?)</p>",
        "id": 278970995,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945519
    },
    {
        "content": "<p>(If there's a better way to do this or an existing tactic I'm very open to that but this is what I came up with on my own)</p>",
        "id": 278971062,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649945538
    },
    {
        "content": "<p>I think strictly it's type should be <code>conv unit</code> rather than <code>tactic unit</code>, but they're the same type anyway</p>",
        "id": 278984538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649951930
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/conv\">docs#conv</a></p>",
        "id": 278984546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649951938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/278970809\">said</a>:</p>\n<blockquote>\n<p>Specifically, I'm trying to write a tactic that takes a big chain of <code>+</code>s, turns it into a <code>multiset.sum</code>, and then collects like terms</p>\n</blockquote>\n<p>Is the goal \"collect like terms\", or do you specifically want it written as a <code>multiset.sum</code> in the end?</p>",
        "id": 278988245,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649953609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/278988245\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/278970809\">said</a>:</p>\n<blockquote>\n<p>Specifically, I'm trying to write a tactic that takes a big chain of <code>+</code>s, turns it into a <code>multiset.sum</code>, and then collects like terms</p>\n</blockquote>\n<p>Is the goal \"collect like terms\", or do you specifically want it written as a <code>multiset.sum</code> in the end?</p>\n</blockquote>\n<p>goal is to collect like terms</p>",
        "id": 279043264,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649989161
    },
    {
        "content": "<p>multiset.sum has the advantage of being already \"orderless\" -- I don't have to worry about associative rewrites</p>",
        "id": 279043276,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649989181
    },
    {
        "content": "<p>The advantage of <code>list.sum</code> is you'll only need<code>add_monoid</code> not <code>add_comm_monoid</code>.</p>",
        "id": 279058706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650009787
    },
    {
        "content": "<p>Well, whether that's an advantage or not is kind of contextual, no? For the use case that made me decide to try making this, the problem was that I was really frustrated with having to throw around somewhat-unreliable <code>assoc_rw</code>and <code>add_comm</code> just to factor large expressions, so building in the assumption that you can reorder terms in your sum is a plus in that case</p>",
        "id": 279059217,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650010334
    },
    {
        "content": "<p>My thinking was that it would be easier to start with the list tactic, then to build the multiset tactic on top of it</p>",
        "id": 279061129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650012153
    },
    {
        "content": "<p>I think something like this works as a poor-man's list tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"n\">change</span> <span class=\"n\">list.sum</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"c1\">-- need the right number of _</span>\n</code></pre></div>",
        "id": 279061284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650012296
    },
    {
        "content": "<p>sorry, what's the intent of that tactic?</p>",
        "id": 279097642,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650040752
    },
    {
        "content": "<p>looks like it tries to cancel terms?</p>",
        "id": 279097671,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650040775
    },
    {
        "content": "<p>It changes <code>a + b + c + d</code> into <code>[a, b, c, d].sum</code></p>",
        "id": 279098218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650041071
    },
    {
        "content": "<p>Isn't that what you were asking for?</p>",
        "id": 279098260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650041103
    },
    {
        "content": "<p>(I didn't actually test it)</p>",
        "id": 279098292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650041131
    },
    {
        "content": "<p>Ah, right. Well, it's the first half of it anyway; the bit I want the <code>conv</code> for is actually stepping through the list looking for matching terms<br>\nI have a hacked together way to do <code>multiset.sum</code> but it's not particularly robust so I might swap it out for your <code>list.sum</code> anyway</p>",
        "id": 279104241,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650044623
    },
    {
        "content": "<p>but mostly I'm trying to figure out how Lean's tactic API works ^.^;</p>",
        "id": 279104267,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650044641
    },
    {
        "content": "<p>i actually just wonder whether something like <code>noncomm_ring</code> can do what you want immediately. (Given your other questions here I'm implicitly assuming that is your context.)</p>",
        "id": 279104488,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650044775
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.noncomm_ring/src\">src#tactic.interactive.noncomm_ring</a> is actually pretty unintelligent</p>",
        "id": 279106884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650046082
    },
    {
        "content": "<p>well, for starters, what I want is more like <code>noncomm_algebra</code> anyway...</p>",
        "id": 279132522,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650063875
    },
    {
        "content": "<p>admittedly there's a certain formal similarity there but</p>",
        "id": 279132537,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650063897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279058706\">said</a>:</p>\n<blockquote>\n<p>The advantage of <code>list.sum</code> is you'll only need<code>add_monoid</code> not <code>add_comm_monoid</code>.</p>\n</blockquote>\n<p>My first thought about <code>multset.sum</code> was \"What does that really give you? You still need to apply commutativity lemmas yourself if you want to change the order, so if you reassociate everything to be in <code>a + (b + (c + ...))</code> form it doesn't seem to buy you anything.\" But, I think it does end up buying you something: it's like you're tagging a node in the expression with the fact that this particular additive monoid is commutative, so you don't need to look it up with typeclass search.</p>\n<p>All <code>list.sum</code> records is that there's an addition with <code>0</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"359992\">@Robert Maxton</span> I'm curious, are you a Mathematica user? It's a long shot, but the fact you said \"orderless\" might be a tell.</p>",
        "id": 279133749,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650065078
    },
    {
        "content": "<p>oh yes, I am much more familiar with Mathematica</p>",
        "id": 279133868,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065173
    },
    {
        "content": "<p>in fact I am doing this largely <em>because</em> Mathematica completely lacks any ability to meaningfully simplify similar products natively</p>",
        "id": 279133889,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065203
    },
    {
        "content": "<p>it technically has \"NonCommutativeMultiply\", but it has no real definitions attached -- not even distributivity -- and unlike Lean, there's no good way to <em>teach</em> Simplify/FullSimplify anything new in a way that it'll actually use</p>",
        "id": 279133924,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065242
    },
    {
        "content": "<p>as a result, Mathematica basically has no good way to handle symbolic operator algebras &gt;.&gt;</p>",
        "id": 279133943,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279133749\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279058706\">said</a>:</p>\n<blockquote>\n<p>The advantage of <code>list.sum</code> is you'll only need<code>add_monoid</code> not <code>add_comm_monoid</code>.</p>\n</blockquote>\n<p>My first thought about <code>multset.sum</code> was \"What does that really give you? You still need to apply commutativity lemmas yourself if you want to change the order, so if you reassociate everything to be in <code>a + (b + (c + ...))</code> form it doesn't seem to buy you anything.\" But, I think it does end up buying you something: it's like you're tagging a node in the expression with the fact that this particular additive monoid is commutative, so you don't need to look it up with typeclass search.</p>\n<p>All <code>list.sum</code> records is that there's an addition with <code>0</code>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> I'm curious, are you a Mathematica user? It's a long shot, but the fact you said \"orderless\" might be a tell.</p>\n</blockquote>\n<p>That, and also that all the lemmas about <code>multiset.sum</code> already typecheck for \"pulling something out of the multiset without paying attention to which entry it was\"</p>",
        "id": 279134011,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065325
    },
    {
        "content": "<p>my idea here is basically to use \"dangerous\" meta-def expression-based pattern-matching to do the factoring/gathering</p>",
        "id": 279134034,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065356
    },
    {
        "content": "<p>and then prove equality after the fact using <code>multiset.sum</code> lemmas</p>",
        "id": 279134038,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065366
    },
    {
        "content": "<p>I've used <code>NonCommutativeMultiply</code> for some category-theoretic manipulations. The next best thing is defining your own rewrite rules that do simplifications and wrapping those as functions (making use of the <code>Flat</code> attribute for the rules)</p>",
        "id": 279134040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650065370
    },
    {
        "content": "<p>and so keep the assurance that it's provably true</p>",
        "id": 279134045,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065375
    },
    {
        "content": "<p>It's very easy to get these things wrong in Mathematica, though... It's very happy to keep going in the face of total nonsense.</p>",
        "id": 279134104,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650065418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279134040\">said</a>:</p>\n<blockquote>\n<p>I've used <code>NonCommutativeMultiply</code> for some category-theoretic manipulations. The next best thing is defining your own rewrite rules that do simplifications and wrapping those as functions (making use of the <code>Flat</code> attribute)</p>\n</blockquote>\n<p>yeaaaah, I'm going to be honest, I tried that and I just bounced, I did not see a good way of systematically canonicalizing something without basically rewriting Simplify myself</p>",
        "id": 279134128,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065451
    },
    {
        "content": "<p>complete with probably-a-graph-search-algorithm</p>",
        "id": 279134131,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065459
    },
    {
        "content": "<p>I guess if I just wrote a few rewrite rules and said \"keep applying these until they stop changing the result\", the way Lean ultimately does</p>",
        "id": 279134154,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065489
    },
    {
        "content": "<p>but I'm a little spoiled by Mathematica's ability to make use of two-way relations in an intelligent way, at least for its <em>built-in</em> relations, I guess</p>",
        "id": 279134216,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650065529
    },
    {
        "content": "<p>I remember looking at <a href=\"https://github.com/NCAlgebra/NC\">https://github.com/NCAlgebra/NC</a> at some point, but I've never really used it.</p>",
        "id": 279134231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650065559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279134216\">said</a>:</p>\n<blockquote>\n<p>but I'm a little spoiled by Mathematica's ability to make use of two-way relations in an intelligent way, at least for its <em>built-in</em> relations, I guess</p>\n</blockquote>\n<p>What are you referring to here? Its pattern language, or something else?</p>",
        "id": 279134286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650065634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279134286\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/New.20conv.20tactic/near/279134216\">said</a>:</p>\n<blockquote>\n<p>but I'm a little spoiled by Mathematica's ability to make use of two-way relations in an intelligent way, at least for its <em>built-in</em> relations, I guess</p>\n</blockquote>\n<p>What are you referring to here? Its pattern language, or something else?</p>\n</blockquote>\n<p>Hmm.... okay, upon reflection actually I don't have any good examples</p>",
        "id": 279135114,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650066432
    },
    {
        "content": "<p>in fact I can very easily think of instances where <code>FullSimplify</code> has insisted on barking up the wrong tree as far as reducing an expression goes<br>\nso nvm lol</p>",
        "id": 279135128,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1650066455
    }
]