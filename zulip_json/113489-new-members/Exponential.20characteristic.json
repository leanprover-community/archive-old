[
    {
        "content": "<p>Following <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> 's suggestion (<a href=\"#narrow/stream/113489-new-members/topic/Unwinding.20definitions.20involving.20if.20else/near/228138682\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Unwinding.20definitions.20involving.20if.20else/near/228138682</a>) , and as part of a project attempting to write some basics about separable extensions etc., I have written a small file containing the basic definition of the exponential characteristic. Since I am fairly sure this is still premature from the point of view of the pro's around, I would like to collect some advice / suggestions for improvement before I might eventually suggest this to become a part of mathlib. Thanks! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The exponential characteristic of an integral domain. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">exp_char</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">exp_char_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exp_char_one_of_char_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">exp_char</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hq.exp_char_def</span> <span class=\"k\">with</span> <span class=\"n\">q_one</span> <span class=\"n\">q_pos</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">q_one.1</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">char_p.eq</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">q_pos.2</span><span class=\"o\">,},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">q_pos.1</span> <span class=\"o\">},</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char_zero_of_exp_char_one</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">exp_char</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hq.exp_char_def</span> <span class=\"k\">with</span> <span class=\"n\">q_one</span> <span class=\"n\">q_pos</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- q = 1</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">q_one.2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">char0'</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">char_p.eq</span> <span class=\"n\">α</span> <span class=\"n\">hp</span> <span class=\"n\">char0'</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">q1</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- q &gt; 0</span>\n    <span class=\"n\">intro</span> <span class=\"n\">q1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">q_pos.2</span> <span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"n\">q1</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">char_p.eq</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hq</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">char_p.char_is_prime_or_zero</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">pprime</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.prime.one_lt</span> <span class=\"n\">pprime</span> <span class=\"o\">},</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">p0</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exp_char_one_iff_char_zero</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">exp_char</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">char_zero_of_exp_char_one</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">exp_char_one_of_char_zero</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- The characteristic of a domain equals the exponential characteristic iff the former is positive. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">char_eq_exp_char_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">exp_char</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hq.exp_char_def</span> <span class=\"k\">with</span> <span class=\"n\">q_one</span> <span class=\"n\">q_pos</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- q = 1</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">q_one.1</span> <span class=\"n\">at</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- 0 &lt; p → p = q</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">q_one.2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">char0'</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">apply</span> <span class=\"n\">char_p.eq</span> <span class=\"n\">α</span> <span class=\"n\">hp</span> <span class=\"n\">char0'</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">ppos</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"c1\">-- q &gt; 0</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- p = q → 0 &lt; p</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">linarith</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- 0 &lt; p → p = q</span>\n      <span class=\"n\">intro</span> <span class=\"n\">ppos</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">char_p.eq</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">q_pos.2</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exp_char_is_prime_or_one</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">exp_char</span> <span class=\"n\">α</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.prime</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">char_p.exists</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_ne_zero</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">p_zero</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">by_contra</span><span class=\"o\">,</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">q_one</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">exp_char_one_of_char_zero</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n      <span class=\"n\">finish</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">p_eq_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">char_eq_exp_char_iff</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pos_iff_ne_zero.mpr</span> <span class=\"n\">p_ne_zero</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">char_p.char_is_prime_or_zero</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">pprime</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">p_eq_q</span> <span class=\"n\">at</span> <span class=\"n\">pprime</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">pprime</span> <span class=\"o\">},</span>\n      <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">this</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228806988,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614876241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> I'll take a longer look asap, but feel free to call integral domains <code>R</code> or <code>A</code>. The old mathlib style to call every type <code>\\alpha</code> has been abandoned in favour of more meaningful variable names</p>",
        "id": 228808079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614876592
    },
    {
        "content": "<p>Yes, thanks. I realize that I should change some of the statements to make it more useful. I will ping you once I have a version that deserves your attention!</p>",
        "id": 228985006,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614962810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> : I have made a few edits (pasted right in the first post above), including your requested notational change, but also a few other changes so that it becomes more usable for this ongoing project about separable extensions. If you have time to review it, I would be happy to get some feedback - thanks!</p>",
        "id": 229732937,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1615406527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> This is certainly starting to look like the start of a useful API around <code>exp_char</code></p>",
        "id": 229736276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615407611
    },
    {
        "content": "<p>Yes, I have very little insight about what should be contained in such an API. Also, I have little insight as to how to write down these (easy) proofs efficiently, and possibly in a way that is useful for other contexts. So, please mercilessly point out all shortcomings!</p>",
        "id": 229822021,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1615456289
    }
]