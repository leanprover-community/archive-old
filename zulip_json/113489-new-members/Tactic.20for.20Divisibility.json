[
    {
        "content": "<p>I was wondering if there is a tactic that takes care of simple modular conditions. For example, a tactic that would solve the following, which is trivial on paper:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">abar</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">div</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">∣</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abar_is</span><span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">∣</span> <span class=\"n\">abar</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">abar</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">div</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">abar_is</span> <span class=\"k\">with</span> <span class=\"n\">zz</span> <span class=\"n\">hzz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">abar</span><span class=\"o\">)</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span> <span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">abar</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">zz</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span><span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">q</span> <span class=\"n\">zz</span><span class=\"o\">,</span><span class=\"bp\">←</span> <span class=\"n\">hzz</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">abar</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">hz</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 308036857,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1667591047
    },
    {
        "content": "<p>How about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">abar</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abar_is</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">abar</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">abar</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">div.linear_comb</span> <span class=\"n\">abar_is</span> <span class=\"n\">abar</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 308038206,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1667591625
    },
    {
        "content": "<p>Yes, that works! Very creative. I didn't even know convert could work with divides statements.</p>",
        "id": 308041091,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1667592778
    },
    {
        "content": "<p><code>convert</code> works with anything! <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#convert\">tactic#convert</a> let's see if there's a useful description in the docs. Edit: there is!</p>",
        "id": 308042718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667593410
    }
]