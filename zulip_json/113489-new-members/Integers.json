[
    {
        "content": "<p>I am trying to prove that val(1)+val(1) = 0 implies val(1) = 0, where val(1) is an integer. I tried to use </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_self_eq_zero</span>\n</code></pre></div>\n\n\n<p>I get the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">val</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>Technically, val(1) is in with_top \\Z . Is that what is causing the error?<br>\nAny help is appreciated. Thank you!</p>",
        "id": 201538849,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592753069
    },
    {
        "content": "<p>If you hover over <code>add_self_eq_zero</code> , or write <code>#check @add_self_eq_zero</code>, you see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">add_self_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 201538987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592753288
    },
    {
        "content": "<p>So <code>add_self_eq_zero</code> will only work for domains (this is Lean's word for an integral domain without the commutativity condition) of characteristic zero, and <code>with_top \\Z</code> is probably not even a ring.</p>",
        "id": 201539038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592753370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integers/near/201539038\">said</a>:</p>\n<blockquote>\n<p>So <code>add_self_eq_zero</code> will only work for domains (this is Lean's word for an integral domain without the commutativity condition) of characteristic zero, and <code>with_top \\Z</code> is probably not even a ring.</p>\n</blockquote>\n<p>Ah alright. Thank you!</p>",
        "id": 201539151,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592753475
    },
    {
        "content": "<p>Hang on, I'll knock you up a proof. If you're going to be working with <code>with_top</code> you're going to have to learn how to use it.</p>",
        "id": 201539154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592753487
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">val_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n<span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">two_nsmul</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is where I was. But that goes back to the same thing.</p>",
        "id": 201539208,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592753550
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- the next 10 lines should be in mathlib.</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_add</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_coe</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_zero&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_zero&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_zero&#39;</span><span class=\"o\">,</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_coe</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- An element of ℤ ∪ {⊤} is either ⊤ or in ℤ -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a = ⊤ case</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ℤ case</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- the hard way</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- h is a proof of a+a=0</span>\n    <span class=\"c1\">-- split into cases</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">htop</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- a = ⊤</span>\n      <span class=\"n\">rw</span> <span class=\"n\">htop</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- h is false</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- no cases!</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- a = n</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- now h says n+n=0 and our goal is n=0</span>\n      <span class=\"c1\">-- but these are equalities in `with_top ℤ</span>\n      <span class=\"c1\">-- so we need to get them into ℤ</span>\n      <span class=\"c1\">-- A tactic called `norm_cast` does this</span>\n     <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- we finally have a hypothesis n + n = 0</span>\n      <span class=\"c1\">-- and a goal n = 0</span>\n      <span class=\"c1\">-- and everything is an integer</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_self_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- the easy way</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201539584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592754213
    },
    {
        "content": "<p>If you add two more simp lemmas you can get it down to:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c1\">-- the next *11* lines should be in mathlib.</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_add</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_coe</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">none_eq_top</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">some_eq_coe</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_zero&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_zero&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_zero&#39;</span><span class=\"o\">,</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_coe</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_self_eq_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201564297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592794604
    },
    {
        "content": "<p>(Of course, there's a non-terminal simp in my example, but it's only an example. :-)</p>",
        "id": 201564300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592794616
    },
    {
        "content": "<p>Perhaps those two simp lemmas break mathlib elsewhere, I didn't try. <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span>, would you be interested in trying to PR the extra norm_cast lemmas Kevin proposes?</p>",
        "id": 201564350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592794719
    },
    {
        "content": "<p>Can you golf that last line to ?</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"c1\">-- { simp, norm_cast, simp [add_self_eq_zero], },</span>\n <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">[</span><span class=\"n\">add_self_eq_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 201568375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592802288
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3132\">#3132</a></p>",
        "id": 201574275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592810594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Integers/near/201564350\">said</a>:</p>\n<blockquote>\n<p>Perhaps those two simp lemmas break mathlib elsewhere, I didn't try. <span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span>, would you be interested in trying to PR the extra norm_cast lemmas Kevin proposes?</p>\n</blockquote>\n<p>Sure! I don't know if I know how to, but I would like to learn.</p>",
        "id": 201601614,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592830618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integers/near/201574275\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3132\">#3132</a></p>\n</blockquote>\n<p>As far as I understand, this is about adding the attribute, right?</p>",
        "id": 201601768,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592830690
    },
    {
        "content": "<p>Right. So  after that PR is accepted <code>norm_cast</code> should behave the way we want it to, and actually coe_zero will work for any type with a 0, as will coe_eq_zero: the lemmas are PR'ed too. But the example is not.</p>",
        "id": 201602750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592831222
    },
    {
        "content": "<p>So I need to convert the example into a lemma?</p>",
        "id": 201602962,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592831348
    },
    {
        "content": "<p>I did a little experiment making those two lemmas <code>simp</code> lemmas, and unfortunately quite a lot breaks.</p>",
        "id": 201673756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592868782
    },
    {
        "content": "<p>I think it would nevertheless be a good change at some point --- to insist that <code>simp</code> normal form for expressions involving <code>with_top</code> uses <code>\\top</code> instead of <code>none</code>, and uses the coercion rather than <code>some</code>. But achieving this will require rewiring some proofs in mathlib.</p>",
        "id": 201673879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592868891
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3135#discussion_r443758403\">https://github.com/leanprover-community/mathlib/pull/3135#discussion_r443758403</a></p>",
        "id": 201719552,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592916117
    }
]