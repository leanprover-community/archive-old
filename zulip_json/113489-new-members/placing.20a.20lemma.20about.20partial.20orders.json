[
    {
        "content": "<p>Where in mathlib would this go, if anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ne_iff_lt_iff_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h.mp</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">not_lt_of_ge</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222673111,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610590329
    },
    {
        "content": "<p>And why is <code>not_lt_of_ge</code> true for <code>partial_order</code> but <code>le_of_not_gt</code> needs <code>linear_order</code>?</p>",
        "id": 222673155,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610590379
    },
    {
        "content": "<p>(1) Somewhere in <code>algebra.order</code>; (2) because <code>le_of_not_gt</code> has the form <code>not A -&gt; B</code>, which is a disjunction <code>A \\/ B</code>, and disjunctions like this usually only hold in the total order case</p>",
        "id": 222674942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610592832
    },
    {
        "content": "<p>The other direction <code>A -&gt; not B</code> is closer to asymmetry, which has the form <code>A -&gt; B -&gt; false</code> and is true in any preorder</p>",
        "id": 222675020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610592912
    },
    {
        "content": "<p>Gotcha. Issue was that <code>\\not k &lt; k</code> was not simplifying for a <code>partial_order</code> in a lemma that I have.</p>",
        "id": 222675096,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610592982
    },
    {
        "content": "<p>that's <code>lt_irrefl</code></p>",
        "id": 222675316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610593241
    },
    {
        "content": "<p>Hmm why did I think that required <code>linear_order</code>? Must've gotten some wires crossed.</p>",
        "id": 222675427,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610593354
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5731\">#5731</a></p>",
        "id": 222676077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610594257
    }
]