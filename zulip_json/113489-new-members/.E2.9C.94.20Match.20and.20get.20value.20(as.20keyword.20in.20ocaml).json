[
    {
        "content": "<p>Is there something like the ocaml as keyword in lean?<br>\nFor instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- better version</span>\n<span class=\"kd\">def</span> <span class=\"n\">compute</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">({</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"o\">::</span><span class=\"n\">rst</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">})</span> <span class=\"n\">as</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">compute</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">rst</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">val</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">({</span><span class=\"n\">thd</span> <span class=\"o\">:=</span> <span class=\"n\">thd</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">thd</span>\n\n<span class=\"c1\">-- sad version</span>\n<span class=\"kd\">def</span> <span class=\"n\">compute₂</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">({</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"o\">::</span><span class=\"n\">rst</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"o\">,</span> <span class=\"n\">thd</span> <span class=\"o\">:=</span> <span class=\"n\">thd</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">compute₂</span> <span class=\"o\">{</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">rst</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"o\">,</span> <span class=\"n\">thd</span> <span class=\"o\">:=</span> <span class=\"n\">thd</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">({</span><span class=\"n\">thd</span> <span class=\"o\">:=</span> <span class=\"n\">thd</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">thd</span>\n</code></pre></div>",
        "id": 266225768,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1640659630
    },
    {
        "content": "<p>Works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"n\">thd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compute</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(⟨[],</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"bp\">@</span><span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">compute</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266226240,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640660294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457807\">Ryan Greenblatt</span> has marked this topic as resolved.</p>",
        "id": 266226403,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640660438
    }
]