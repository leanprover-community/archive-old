[
    {
        "content": "<p>Is there anywhere in Mathlib the fact that continuous real functions over a topological space make up a vector space? I would not really know how to find out if something like this existed</p>",
        "id": 202877228,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593874601
    },
    {
        "content": "<p>It should be in <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/continuous_functions.html\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/continuous_functions.html</a></p>",
        "id": 202877317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593874747
    },
    {
        "content": "<p>but it doesn't seem to be, so the next place to look at is the analysis folder</p>",
        "id": 202877325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593874767
    },
    {
        "content": "<p>You can also use library_search of course</p>",
        "id": 202877381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593874805
    },
    {
        "content": "<p>This would need bundled ctu functions, right?</p>",
        "id": 202877402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593874846
    },
    {
        "content": "<p>I thought we didn't have those yet.</p>",
        "id": 202877405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593874854
    },
    {
        "content": "<p>No, look at the link I posted</p>",
        "id": 202877412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593874862
    },
    {
        "content": "<p>There is <code>topology/bounded_continuous_function</code>, but it has the extra assumption of boundedness.</p>",
        "id": 202878216,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593876196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/202878216\">said</a>:</p>\n<blockquote>\n<p>There is <code>topology/bounded_continuous_function</code>, but it has the extra assumption of boundedness.</p>\n</blockquote>\n<p>Thanks actually this is great already for my purpose</p>",
        "id": 202879247,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593877599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/202877381\">said</a>:</p>\n<blockquote>\n<p>You can also use library_search of course</p>\n</blockquote>\n<p>Yeah I could not easily think of a way to use library_search for something of this kind!</p>",
        "id": 202879270,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593877644
    },
    {
        "content": "<p>You can try to have variable including a bunch a type classes and type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 202882510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593882174
    },
    {
        "content": "<p>It will tell you whether mathlib knows about a R-submodule of the module of functions from alpha to M</p>",
        "id": 202882525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593882199
    },
    {
        "content": "<p>I think it would be good to set up bundled continuous functions, with plenty of additional structure (at least as a subalgebra). Variants like continuous functions vanishing at infinity as well?</p>",
        "id": 202903838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593921590
    },
    {
        "content": "<p>We have bundled continuous functions in <code>topology/compact_open</code>.</p>",
        "id": 202904741,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593923459
    },
    {
        "content": "<p>Probably they should be redefined using <code>structure</code>.</p>",
        "id": 202904745,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593923480
    },
    {
        "content": "<p>It should be easy to define algebraic operations on these functions using <code>continuous.mul</code> etc.</p>",
        "id": 202904789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593923578
    },
    {
        "content": "<p>I am trying to define the vector space structure on continuous functions but it does not find the commutative group instance even if I also defined that... Can someone help me to understand what is going on? Maybe something having to do with coercions?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">continuous_functions</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">comm_group</span><span class=\"o\">,</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">continuous_add_comm_group</span><span class=\"o\">]</span>\n<span class=\"kn\">instance</span> <span class=\"n\">continuous_comm_group</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">comm_group</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">continuous_group</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">continuous_module</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 203534889,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594401878
    },
    {
        "content": "<p>You're missing a hypothesis on <code>M</code></p>",
        "id": 203535680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594402290
    },
    {
        "content": "<p>it needs to be a <code>topological_module</code> or whatever</p>",
        "id": 203535791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594402345
    },
    {
        "content": "<p>at the very least a <code>topological_add_group</code></p>",
        "id": 203535840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594402373
    },
    {
        "content": "<p>Right I forgot</p>",
        "id": 203592021,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594465901
    },
    {
        "content": "<p>In any case I guess I cannot imitate the rest of the continuous_functions file as there is not a <code>is_submodule</code>structure so I guess I will have to go proving things as for continuous_bounded_functions?</p>",
        "id": 203592094,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594466023
    },
    {
        "content": "<p>I don't really understand the algebra section of the library: I do not understand why for some structures there is both <code>subobject</code> and <code>is_subobject</code> and for other structures there is only one of them</p>",
        "id": 203592143,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594466099
    },
    {
        "content": "<p>Like for group there is both, for ring there is only <code>is_subring</code> and for module there is only <code>submodule</code></p>",
        "id": 203592175,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594466162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203535791\">said</a>:</p>\n<blockquote>\n<p>it needs to be a <code>topological_module</code> or whatever</p>\n</blockquote>\n<p>I cannot really manage to make it find the instance even by adding the hypothesis <code>topological_module</code> by the way</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">topological_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">topological_add_group</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">continuous_module</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">continuous_add_comm_group</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203593476,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594468510
    },
    {
        "content": "<p>This <code>has_coe</code> business is wishful thinking</p>",
        "id": 203593525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594468571
    },
    {
        "content": "<p>It's also not true</p>",
        "id": 203593545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594468639
    },
    {
        "content": "<p>You need both hypotheses.</p>",
        "id": 203593548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594468663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593545\">said</a>:</p>\n<blockquote>\n<p>It's also not true</p>\n</blockquote>\n<p>If I forget about multiplication with a scalar I do not get a topological commutative group?</p>",
        "id": 203593763,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594468972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593548\">said</a>:</p>\n<blockquote>\n<p>You need both hypotheses.</p>\n</blockquote>\n<p>I did try with both hypotheses but then it does not find an instance of <code>distrib_mul_action R ↥{f : α → M | continuous f}</code>. Should I define it manually or am I forgetting something else?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">continuous_module</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">continuous_add_comm_group</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203593851,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594469083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593763\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593545\">said</a>:</p>\n<blockquote>\n<p>It's also not true</p>\n</blockquote>\n<p>If I forget about multiplication with a scalar I do not get a topological commutative group?</p>\n</blockquote>\n<p>Look at the definitions--unless I am missing something the answer is no</p>",
        "id": 203593862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594469107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593851\">said</a>:</p>\n<blockquote>\n<p>it does not find an instance of <code>distrib_mul_action R ↥{f : α → M | continuous f}</code></p>\n</blockquote>\n<p>This is part of what you need to define a <code>module</code> structure, right? (Not a rhetorical question.)</p>",
        "id": 203593948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594469215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593948\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203593851\">said</a>:</p>\n<blockquote>\n<p>it does not find an instance of <code>distrib_mul_action R ↥{f : α → M | continuous f}</code></p>\n</blockquote>\n<p>This is part of what you need to define a <code>module</code> structure, right? (Not a rhetorical question.)</p>\n</blockquote>\n<p>It is but I could not find such instance for continuous bounded function, so since everything compiles there I was thinking Lean was able to deduce it from the fact that it is valid for <code> α → M</code>... I am very confused about why things that work for continuous bounded functions do not work here</p>",
        "id": 203595866,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594472630
    },
    {
        "content": "<p>In any case why does there not exist <code>is_submodule</code>?</p>",
        "id": 203595911,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594472690
    },
    {
        "content": "<p>Are we talking about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"err\">$</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 203596089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596089\">said</a>:</p>\n<blockquote>\n<p>Are we talking about</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ᵇ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">of_core</span> <span class=\"err\">$</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 203596091,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594473040
    },
    {
        "content": "<p>Well, look at the types and the definitions involved.</p>",
        "id": 203596101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473096
    },
    {
        "content": "<p>If you have <code>class B extends A</code> then you can write an instance for <code>B</code> and supply the fields for <code>A</code> at the same time.</p>",
        "id": 203596143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473135
    },
    {
        "content": "<p>If you don't then I guess it looks for an instance of <code>A</code> (I don't really know).</p>",
        "id": 203596163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203592175\">said</a>:</p>\n<blockquote>\n<p>Like for group there is both, for ring there is only <code>is_subring</code> and for module there is only <code>submodule</code></p>\n</blockquote>\n<p>The <code>is_</code> classes are deprecated.</p>",
        "id": 203596212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594473264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596163\">said</a>:</p>\n<blockquote>\n<p>If you don't then I guess it looks for an instance of <code>A</code> (I don't really know).</p>\n</blockquote>\n<p>Oh ok thanks that actually solves my confusion I was convinced that it was required as a separate instance: I did not notice module was extending that class, as usually it asks me for missing fields not missing instances</p>",
        "id": 203596265,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594473388
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596265\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596163\">said</a>:</p>\n<blockquote>\n<p>If you don't then I guess it looks for an instance of <code>A</code> (I don't really know).</p>\n</blockquote>\n<p>Oh ok thanks that actually solves my confusion I was convinced that it was required as a separate instance: I did not notice module was extending that class, as usually it asks me for missing fields not missing instances</p>\n</blockquote>\n<p>I mean I thought that class was included as a hypothesis as otherwise it would have asked me for missing fields but it's not how these errors work apparently</p>",
        "id": 203596284,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594473455
    },
    {
        "content": "<p>actually I don't know either and can't reproduce this</p>",
        "id": 203596289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473467
    },
    {
        "content": "<p>it might depend on old versus new structure cmd too, possibly</p>",
        "id": 203596331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473486
    },
    {
        "content": "<p>You know about jump to definition, right?</p>",
        "id": 203596345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473530
    },
    {
        "content": "<p>You can unconvince yourself of such things by looking at the definitions <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 203596349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473547
    },
    {
        "content": "<p>I'm confused by your error, but then again I haven't seen your source.</p>",
        "id": 203596397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594473604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596345\">said</a>:</p>\n<blockquote>\n<p>You know about jump to definition, right?</p>\n</blockquote>\n<p>Yeah sure but it did not come to my mind to check because it never occurred to me such error for missing fields, only when an instance required in the hypotheses was missing so I gave it for granted without checking!</p>",
        "id": 203596404,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594473610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596397\">said</a>:</p>\n<blockquote>\n<p>I'm confused by your error, but then again I haven't seen your source.</p>\n</blockquote>\n<p>I can try to reproduce it if you want but adding the fields you suggested solved my problem so I am not sure you want to lose more time behind this haha</p>",
        "id": 203596442,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594473670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203596212\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Vector.20space.20over.20continuous.20real.20functions/near/203592175\">said</a>:</p>\n<blockquote>\n<p>Like for group there is both, for ring there is only <code>is_subring</code> and for module there is only <code>submodule</code></p>\n</blockquote>\n<p>The <code>is_</code> classes are deprecated.</p>\n</blockquote>\n<p>It means <code>is_subgroup</code> will be removed or did just people stop using it at some point and it the structures that have it will keep having it?</p>",
        "id": 203596569,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594473857
    },
    {
        "content": "<p>It is a gigantic job to remove it, but we hope to remove it someday.</p>",
        "id": 203597190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594474998
    },
    {
        "content": "<p>Is it possible to give a brief reason why it was deprecated? I'm curious</p>",
        "id": 203597247,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594475102
    },
    {
        "content": "<p>We've moved over to bundled <code>subgroup</code>s instead; rather than having a group <code>G</code> and a set <code>H</code> with the predicate <code>is_subgroup H</code> saying that <code>H</code> is in fact a subgroup, we have a type <code>subgroup G</code> which whose terms are a carrier set <code>H</code> and the proofs that <code>H</code> is closed under addition etc. So its a different repackaging of the same information. We don't really want both concepts around so we're partway through changing everything to refer to the bundled version.</p>",
        "id": 203597444,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594475485
    },
    {
        "content": "<p>Why is this better then <code>is_subgroup</code>?</p>",
        "id": 203598308,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594476898
    },
    {
        "content": "<p>We tried both, we had to choose one, we chose <code>subgroup</code>. The main reason is that dot notation works well for it.</p>",
        "id": 203598320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594476923
    },
    {
        "content": "<p>For example, if <code>H : subgroup G</code> then <code>H.mul_mem</code> is the theorem that if a, b \\in H then so is ab. With <code>is_subgroup</code> you have to do <code>is_subgroup.mul_mem H</code> and you also have to hope that type class inference works.</p>",
        "id": 203598371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594476974
    },
    {
        "content": "<p>Unfortunately these infrastructure changes take time, and enthusiasm, to get done. Kevin and I have been working on removing some more uses of <code>is_subgroup</code> at <a href=\"https://github.com/leanprover-community/mathlib/issues/3321\">#3321</a> --- anyone who wants to jump in and deal with some errors on that branch would be very welcome!</p>",
        "id": 203623006,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594519270
    },
    {
        "content": "<p>A PR creating <code>subring</code>, following the model of the recent PR which created <code>subgroup</code>, would also be a fantastic contribution.</p>",
        "id": 203623009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594519294
    },
    {
        "content": "<p>Note that we already have <code>subsemiring</code>. This can be used as an example of mixing <code>*</code> and <code>+</code>.</p>",
        "id": 203624402,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594522225
    }
]