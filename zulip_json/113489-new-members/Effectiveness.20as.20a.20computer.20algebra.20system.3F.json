[
    {
        "content": "<p>If i have two algebraic expressions, how complicated do they have to be such that simp, ring, cc, etc.. can't tell they are equal? And since we can add proofs that simp can use to simplify things, can we in theory make a simplifier on algebraic expressions as good as something like wolfram alpha (or simplify or fullsimplify on mathematica); if not where's the line where lean would start having technical roadblocks? Thank you</p>",
        "id": 197825643,
        "sender_full_name": "Jake",
        "timestamp": 1589681744
    },
    {
        "content": "<p>The intuition for this is something I'm still developing. I was confused for a while why <code>simp</code> wasn't able to do some obvious things, like flip an inequality around, or feed A into A implies B to prove B. My understanding is that hopefully new, more comprehensive tactics will get written as mathlib gets built out, so that everything outside of the scope of your current proof can be automated. If you're interested in writing tactics, I recently started trying to figure out how to do it. Here's a brief guide. <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 197826473,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589683204
    },
    {
        "content": "<p>awesome ill check that out</p>",
        "id": 197826740,
        "sender_full_name": "Jake",
        "timestamp": 1589683702
    },
    {
        "content": "<p>It's important to remember that tactics aren't magic. :-) Usually each of them is try to do one specific thing well.</p>",
        "id": 197828484,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687077
    },
    {
        "content": "<p>That said, if you can clearly specify what you think a new tactic should do, the sky is the limit writing new tactics.</p>",
        "id": 197828491,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687119
    },
    {
        "content": "<p>There's no particular reason why <code>simp</code> couldn't become as powerful as Mathematica's <code>Simplify</code>.</p>",
        "id": 197828513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687142
    },
    {
        "content": "<p><code>FullSimplify</code> in Mathematica is doing something more complicated (and not at all publicly specified), that involves backtracking, which <code>simp</code> doesn't do.</p>",
        "id": 197828556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687176
    },
    {
        "content": "<p>Except maybe for human*hours.</p>",
        "id": 197828558,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589687188
    },
    {
        "content": "<p>Yes --- the bottleneck for new awesome tactics is definitely availability of humans who know how to write them, not ideas for them, or their viability in the current meta-programming setup.</p>",
        "id": 197828569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687242
    },
    {
        "content": "<p>I think it would actually be a fun project to compare the effectiveness of <code>simp</code> and Mathematica's <code>Simplify</code>.</p>",
        "id": 197828575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687270
    },
    {
        "content": "<p>Analysing examples of things that <code>Simplify</code> can do that <code>simp</code> can't could be very helpful.</p>",
        "id": 197828617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589687311
    },
    {
        "content": "<p>Actually I think there is also a bottleneck on precise specifications of tactics</p>",
        "id": 197828807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589687676
    },
    {
        "content": "<p>I can't think of many examples of precisely specified tactics that don't exist yet except for <code>groebner</code></p>",
        "id": 197828817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589687729
    },
    {
        "content": "<p>We really should keep a list of tactic requests. I guess just the issues page.</p>",
        "id": 197829107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589688290
    },
    {
        "content": "<p>Good idea. I just opened <a href=\"https://github.com/leanprover-community/mathlib/issues/2706\">#2706</a>.</p>",
        "id": 197829293,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589688702
    },
    {
        "content": "<p>A tactic that we still don't have is <code>group</code>, which removes any instances of <code>1</code>, <code>g * g⁻¹</code> or <code>g⁻¹ * g</code> in a group product, even in the presence of parentheses.</p>",
        "id": 197829295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589688711
    },
    {
        "content": "<p>I think it's called <code>simp</code></p>",
        "id": 197829336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589688766
    },
    {
        "content": "<p>We should still have <code>group := `[simp only [...]]` </code> for whatever the collection of lemmas that achieves this is.</p>",
        "id": 197829383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589688846
    },
    {
        "content": "<blockquote>\n<p>I can't think of many examples of precisely specified tactics</p>\n</blockquote>\n<p>E.g., CAS-style operations on expressions:</p>\n<ul>\n<li><code>expand</code> (=<code>simp only [mul_add, add_mul, mul_sub, sub_mul, smul_*]</code>?),</li>\n<li><code>factorize</code>;</li>\n<li>group by powers of <code>x</code>;</li>\n<li><code>cancel</code> a fraction;</li>\n<li><code>together</code> (probably <code>field_simp</code> does this job);</li>\n<li>a version of <code>field_simp</code> that adds goals <code>a ≠ 0</code> instead of failing to apply a lemma.</li>\n</ul>",
        "id": 197829384,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589688856
    },
    {
        "content": "<p>More generally, we should have <code>word_problem</code>, that tries to discharge a goal of the form <code>g1 * g2 * g3 = g4 * g5</code> by looking in the hypotheses for other relations in the group, and then dispatching to an appropriately registered solution to the word problem in the relevant group.</p>",
        "id": 197829403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589688949
    },
    {
        "content": "<p>e.g. implementing all the mathematics in <a href=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\">https://www3.nd.edu/~andyp/notes/OneRelator.pdf</a>, and then being able to answer any such question where there is a single hypothesis giving a relation.</p>",
        "id": 197829463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589688986
    },
    {
        "content": "<p>We should have the multiplicative version of <code>abel</code>, which I think is not a special case of <code>simp</code>.</p>",
        "id": 197829469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589689062
    },
    {
        "content": "<p>We should have tactics <code>push_hom</code> and <code>pull_hom</code>, which use lemmas like <code>ring_hom.map_mul</code> to either move algebraic homomorphisms inwards or outwards.</p>",
        "id": 197829535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589689182
    },
    {
        "content": "<p>Another fun project that would require doing some maths first would be to implement the Schreier-Sims algorithm, and then have a tactic that can write a permutation as a product of permutations from a given set (if possible).</p>",
        "id": 197829695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589689467
    },
    {
        "content": "<p>A basic <code>group</code>tactic got written in another thread, didn't it? The other thread probably mentions the same pdf</p>",
        "id": 197837871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589704588
    }
]