[
    {
        "content": "<p>Another category theoretic question: I am trying to construct a (non-full) subcategory whose morphisms have the lifting property with respect to some other subcategory (see around here <a href=\"https://ncatlab.org/nlab/show/lift\">https://ncatlab.org/nlab/show/lift</a>). What is a convenient syntax to phrase such things? A not-quite-minimal example is posted below, but the question makes sense for any property of morphisms in a category that is stable under composition and holds for the identity morphisms.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.arrow</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The left lifting property of a morphism i vs. a morphism p. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">llp</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">sq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">arrow.lift_struct</span> <span class=\"n\">sq</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The subcategory of C consisting of those morphisms having the right lifting property with respect to any</span>\n<span class=\"cm\">morphism in the range of a functor. -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Any identity has the right lifting property with respect to any map. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">id_has_rlp</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">llp</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rlp_of_range</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">llp</span> <span class=\"o\">((</span><span class=\"n\">functor.map_arrow</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">p</span><span class=\"o\">)},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- want to use id_has_rlp here</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- will use a similar stability of the lifting</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n<span class=\"o\">}</span>\n <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 231546871,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616534951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> you might be interested in <a href=\"https://github.com/rwbarton/lean-homotopy-theory\">https://github.com/rwbarton/lean-homotopy-theory</a> where <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> develops a whole lot of homotopy theory. However that repo is quite old, and not compatible with current mathlib.</p>",
        "id": 231547369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616535159
    },
    {
        "content": "<p>Note that because <code>C</code> already has a category structure in your code, you would want to introduce an alias for <code>C</code>.</p>",
        "id": 231547791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616535344
    },
    {
        "content": "<p>To answer question, I would break <code>rlp_of_range</code> into pieces. So</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">rlp_of_range</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hom</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">rlp_of_range</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rlp_of_range</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">rlp_of_range.hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rlp_of_range.id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">rlp_of_range.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 231547847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616535363
    },
    {
        "content": "<p>At first, this seems very tedious. But in practice it is a lot faster to work this way, because you can take more advantage of the previous steps</p>",
        "id": 231547901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616535403
    },
    {
        "content": "<p>OK, good - is there some example somewhere in mathlib that has applied this skeleton in this way?</p>",
        "id": 231548458,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616535706
    },
    {
        "content": "<p>It always takes me lots of time to hunt down the syntax to the place where it is actually defined.</p>",
        "id": 231548544,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616535738
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.isomorphism</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftable.X</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">liftable</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">liftable</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X.X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y.X</span> <span class=\"bp\">//</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">b</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">Y.X</span><span class=\"o\">},</span>\n    <span class=\"bp\">‚àÉ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">a</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X.X</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">i.hom</span><span class=\"o\">},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 231548832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616535887
    },
    {
        "content": "<p>I haven't thought about whether the definition is actually correct, but it typechecks</p>",
        "id": 231548857,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616535899
    },
    {
        "content": "<p>Note that one should not talk about equality of objects in the category, hence the isomorphism <code>i</code> in the condition</p>",
        "id": 231548931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616535929
    },
    {
        "content": "<p>And I agree with Johan's comments that it's probably better to split off the hom, id, comp, etc.</p>",
        "id": 231548975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616535955
    },
    {
        "content": "<p>A follow up question:  given the definition of the hom-sets, identity and composition as below, how do I unwind the definition of the composition that I just made in order to show <code>id_comp'</code> (near the end of the post)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.arrow</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> The left lifting property of a morphism i vs. a morphism p. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">sq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">arrow.lift_struct</span> <span class=\"n\">sq</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">liftable.X</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">liftable</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_lifting_property_id'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_lifting_property_comp'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span>  <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Given a functor F : D ‚•§ arrow C, we construct the (non-full) subcategory of C</span>\n<span class=\"cm\">spanned by those morphisms that have the right lifting property relative to all maps</span>\n<span class=\"cm\">of the form F(i), where i is any object in D. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">liftable</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X.X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y.X</span> <span class=\"bp\">//</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">},</span>\n    <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">p</span><span class=\"o\">)},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property_id'</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü©,</span> <span class=\"c1\">--Œª X, llp_to_id' X,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.val</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.val</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property_comp'</span> <span class=\"n\">f.property</span> <span class=\"n\">g.property</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- how do I unwind the definition of comp with f.val ‚â´ g.val that I previously made?</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 231630346,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616591436
    },
    {
        "content": "<p>I guess I would start with <code>intros, ext, dsimp</code></p>",
        "id": 231630489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616591506
    },
    {
        "content": "<p>Thanks! -- Can I get a copy of your lean brain, please?! :)</p>",
        "id": 231631014,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616591699
    },
    {
        "content": "<p>Tidy should be able to handle that goal, I hope?!</p>",
        "id": 231633658,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616592722
    },
    {
        "content": "<p>Here's tidy doing all the work :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.arrow</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"> The left lifting property of a morphism i vs. a morphism p. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">sq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">arrow.lift_struct</span> <span class=\"n\">sq</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">liftable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">-- :-)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_lifting_property_id'</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_lifting_property_comp'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">‚àÄ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span>  <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Given a functor F : D ‚•§ arrow C, we construct the (non-full) subcategory of C</span>\n<span class=\"cm\">spanned by those morphisms that have the right lifting property relative to all maps</span>\n<span class=\"cm\">of the form F(i), where i is any object in D. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">liftable</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X.X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y.X</span> <span class=\"bp\">//</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">),</span>\n    <span class=\"n\">has_lifting_property</span> <span class=\"o\">((</span><span class=\"n\">F.obj</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arrow.mk</span> <span class=\"n\">p</span><span class=\"o\">)},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property_id'</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.1</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.1</span><span class=\"o\">,</span> <span class=\"n\">has_lifting_property_comp'</span> <span class=\"n\">f.2</span> <span class=\"n\">g.2</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 231637034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616594060
    },
    {
        "content": "<p>When you omit the fields like I did in this code, lean uses what's called the <code>auto_param</code> which is essentially a tactic that it tries in order to close the goal automatically. In this case, it applies <code>tidy</code>, which is able to close the three omitted goals all by itself.</p>",
        "id": 231637392,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616594178
    },
    {
        "content": "<p>The key trick was to replace the definition of liftable with a structure, so that tidy is able to use <code>cases X</code></p>",
        "id": 231638003,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1616594402
    },
    {
        "content": "<p>Thanks again <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> . I somehow did not see this last message and used a slightly more verbose way (but also including<code>tidy</code>). I will integrate your simplification there soon. If you are interested, have a look here <a href=\"https://github.com/leanprover-community/mathlib/issues/6852\">#6852</a>. I'm sure there will again be many stylistic shortcomings...<br>\nMy mid-term goal is to define the notion of a model category.</p>",
        "id": 231705633,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1616618812
    }
]