[
    {
        "content": "<p>I have this structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">is_matching</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">w'</span><span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">⦄,</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w'</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">w'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">verts_eq_support</span> <span class=\"o\">:</span> <span class=\"n\">M.verts</span> <span class=\"bp\">=</span> <span class=\"n\">M.support</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">M.is_matching</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">M.support</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">M.support</span><span class=\"o\">),</span> <span class=\"n\">M.adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How do I unfold <code>M.is_matching</code> intro what I have in my structure?</p>",
        "id": 261162689,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636651796
    },
    {
        "content": "<p>Arthur its  easier to help if you can make a MWE, so including the imports and variables. I just had to spend a couple minutes typing out my own example to check my suggestion worked, and I still don't know if it will work flawlessly in your situation as I don't know what M is.</p>",
        "id": 261165766,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636653360
    },
    {
        "content": "<p>That said, try using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mk_iff_attr\">docs#mk_iff_attr</a> a la</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n\n\n<span class=\"kd\">@[mk_iff]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">nat.is_a</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">nat.is_a_iff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ok</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nat.is_a</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/\\</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.is_a_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261165823,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636653378
    },
    {
        "content": "<p>That was exactly it, thanks!<br>\nWill try to use MWEs from now on</p>",
        "id": 261166490,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636653744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 261166506,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636653748
    }
]