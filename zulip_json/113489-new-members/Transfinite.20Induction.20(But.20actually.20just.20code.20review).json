[
    {
        "content": "<p>So, having read a neat blog post on precisely when induction is valid, the proofs looked both simple enough and also interesting enough that I had the impulse to try translating it into Lean, just for fun</p>",
        "id": 277490335,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648855593
    },
    {
        "content": "<p>and, this time, that actually worked! lol. I'm a little proud of that since it's the first time I've managed to write up something nontrivial and not all that artificial (not a Lean specific homework problem) in Lean</p>",
        "id": 277490351,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648855631
    },
    {
        "content": "<p>That said, I rather feel my code, ah, could use a bit of work; I don't necessarily require them to be like mathlib's (in fact to some extent I'd rather them not, mathlib is almost unreadably dense to me), but they're still less than elegant</p>",
        "id": 277490377,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648855675
    },
    {
        "content": "<p>anyone willing to take a look at it, teach me good practice and help me clean it up?</p>",
        "id": 277490428,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648855702
    },
    {
        "content": "<p>Show us :D<br>\nI'm not a mathematician but I'd like to see it regardless</p>",
        "id": 277490784,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648856096
    },
    {
        "content": "<p>the blog post in question is at <a href=\"https://math.blogoverflow.com/2015/03/10/when-can-we-do-induction/\">https://math.blogoverflow.com/2015/03/10/when-can-we-do-induction/</a><br>\nand I've put my implementation at  <a href=\"https://gist.github.com/robertmaxton42/e3afda89616126e13ae05326d4b85b75\">https://gist.github.com/robertmaxton42/e3afda89616126e13ae05326d4b85b75</a></p>",
        "id": 277491018,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648856308
    },
    {
        "content": "<p>I see Mario in the comments section! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 277491272,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648856541
    },
    {
        "content": "<p>I've only implemented the first two proofs from that blog so far<br>\nI'm going to go on to do partial orders in a bit</p>",
        "id": 277491452,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648856758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Transfinite.20Induction.20.28But.20actually.20just.20code.20review.29/near/277491272\">said</a>:</p>\n<blockquote>\n<p>I see Mario in the comments section! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n</blockquote>\n<p>heh, small world :p</p>",
        "id": 277491503,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648856782
    },
    {
        "content": "<p>actually I may not bother, looks like the reasoning is all identical for posets</p>",
        "id": 277492039,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648857305
    },
    {
        "content": "<p>Someone else might be able to help you better with this, but there aren't relevant occurrences of <code>noncomputable theorem</code> or <code>noncomputable lemma</code> in mathlib. I <em>suspect</em> you had to do this because you defined <code>wellorder</code> as a class</p>",
        "id": 277492639,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648857830
    },
    {
        "content": "<p>I mean, I know for a fact that well-ordering the reals requires the axiom of choice, so like, I wasn't exactly <em>surprised</em> when it showed up</p>",
        "id": 277492821,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648857967
    },
    {
        "content": "<p>it's possible I missed a trick, but</p>",
        "id": 277492829,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648857974
    },
    {
        "content": "<p>Your class doesn't need <code>noncomputable</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">wellorder</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">well_all_sub_have_min</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">has_min</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And stating <code>ind_imp_well</code> with <code>def</code> didn't require <code>noncomputable</code> either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ind_imp_well</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">--[nonempty α]</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">wellorder</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277494113,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648859411
    },
    {
        "content": "<p>I'm not sure what's happening, but again, someone else might be able to help you better with this. My guess is that, by requiring a term of type <code>wellorder α</code>, you force yourself to compute data</p>",
        "id": 277494152,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648859494
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.recursion\">docs#well_founded.recursion</a> and its sibling <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded.induction\">docs#well_founded.induction</a> in case you weren't aware of them. They're related, albeit not exactly what you are doing.</p>",
        "id": 277494859,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648860347
    },
    {
        "content": "<p>well, the definition may or may not require <code>noncomputable</code> but any proof that would let me demonstrate the reals are well-ordered should require it<br>\nand I think this counts, since you can accept induction as an axiom without implying the axiom of choice right away?</p>",
        "id": 277495035,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648860595
    },
    {
        "content": "<p>The real reason I need <code>noncomputable</code> is that I need a way to get arbitrary values out of my <code>nonempty</code> sets, it gets introduced by <code>set.nonempty.some</code></p>",
        "id": 277495090,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648860650
    },
    {
        "content": "<p>If it's possible to remove <code>noncomputable</code> it'll be by avoiding that constraint, but I'm not terrifically hopeful lol</p>",
        "id": 277495096,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648860669
    },
    {
        "content": "<p>Do notice that I also removed <code>[nonempty α]</code>. This code typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ind_imp_well</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">--[nonempty α]</span>\n  <span class=\"o\">(</span><span class=\"n\">ind</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">wellorder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">no_min</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.not_nonempty_iff_eq_empty</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">},</span>\n    <span class=\"n\">apply_assumption</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">no_min2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">has_min</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">has_min</span> <span class=\"n\">at</span> <span class=\"n\">no_min</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">no_min</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">indh</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">A</span> <span class=\"k\">with</span> <span class=\"n\">B</span><span class=\"bp\">ᶜ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.not_mem_compl_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">has_min</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set.not_mem_compl_iff</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">B</span><span class=\"bp\">ᶜ</span> <span class=\"k\">with</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set.not_not_mem</span><span class=\"o\">,</span>\n      <span class=\"n\">revert</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">indh</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span> <span class=\"n\">contradiction</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277495644,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648861264
    },
    {
        "content": "<p>I mean, I'm not entirely clear on the distinction/requirement myself</p>",
        "id": 277495894,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861586
    },
    {
        "content": "<p>but I think it boils down to the use of \\forall? The elimination rule for forall lets you introduce its arbitrary variable without invoking choice</p>",
        "id": 277495901,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861593
    },
    {
        "content": "<p>for, uh, reasons lol</p>",
        "id": 277495934,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861636
    },
    {
        "content": "<p>but well-ordered-ness says \"forall <em>subsets</em> there <em>exists</em> a minimum element\", and while you can use it to pull an arbitrary subset you can't use it to pull the arbitrary <em>elements</em> you need to finish the proof going the other way</p>",
        "id": 277496001,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861683
    },
    {
        "content": "<p>I think is the logic?</p>",
        "id": 277496009,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861691
    },
    {
        "content": "<p>but again, I'm not entirely clear</p>",
        "id": 277496015,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861696
    },
    {
        "content": "<p>though that said, I <em>am</em> surprised that it seems to show up when <em>using</em> well-ordered-ness, but not when <em>proving</em> it</p>",
        "id": 277496139,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861838
    },
    {
        "content": "<p>that does in fact confuse me lol</p>",
        "id": 277496140,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648861842
    },
    {
        "content": "<p>There are several occurrences of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.arbitrary\">docs#classical.arbitrary</a> in proofs of theorems that don't require <code>noncomputable</code>. It <em>does</em> require <code>nonempty ⋯</code> though</p>",
        "id": 277496259,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648862017
    },
    {
        "content": "<p>.... that's weird. I would've thought <code>classical.arbitrary</code> was like, the standard Thing That Is Noncomputable</p>",
        "id": 277496303,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1648862044
    },
    {
        "content": "<p>The definition of <code>classical.arbitrary</code> is indeed marked with <code>noncomputable</code></p>",
        "id": 277496321,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648862091
    },
    {
        "content": "<p>But if you're not asking me for <strong>an</strong> element of an empty set, but, instead, ask me to prove something about it, then I'm fine</p>",
        "id": 277496392,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648862168
    },
    {
        "content": "<p>A way to think about how the noncomputability checker works is that it recursively deletes everything that's a <code>Prop</code> or a <code>Sort*</code> then sees if there's anything still hanging around that's marked <code>noncomputable</code>. It's also able to delete certain arguments to certain functions/constructors that it knows aren't computationally relevant. (This isn't actually what it does, but I believe it's mostly equivalent.)</p>\n<p>The <code>well_all_sub_have_min</code> axiom is a <code>Prop</code>, so it gets deleted.</p>\n<p>By the way, I don't think <code>noncomputable class</code> does anything, only <code>private</code> and <code>meta</code> seem to be modifiers with any effect, and it's arguably a Lean bug that it doesn't throw an error if you try to do <code>noncomputable class</code>.</p>",
        "id": 277497049,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648862988
    }
]