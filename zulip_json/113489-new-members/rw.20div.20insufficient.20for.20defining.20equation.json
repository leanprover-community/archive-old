[
    {
        "content": "<p>Hi!</p>\n<p>I'm working my way through theorem proving in Lean and have hit a bit of a snag.</p>\n<p>In section 8.4 we define div via well-founded recursion (I have called it div'). Then we are told that we can prove the defining equation of div as follows</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">div&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">div&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">div&#39;</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>but when I attempt this, I get an unsolved goal. Specifically,</p>\n<div class=\"codehilite\"><pre><span></span>well_founded.fix lt_wf div&#39;.F x y = ite (0 &lt; y ∧ y ≤ x) (1 + well_founded.fix lt_wf div&#39;.F (x - y) y) 0\n</pre></div>\n\n\n<p>Is this because my version of div' lacks something div has? Something has changed in Lean since that was written? I've done something wrong?</p>\n<p>Thanks for any guidance</p>\n<p>(By the way, #eval doesn't work in the super fast way described in the book for me. #eval fib 100 doesn't work, never mind #eval fib 10000. Seems unlikely they're related, but thought it worth mentioning!)</p>",
        "id": 159916352,
        "sender_full_name": "Plam",
        "timestamp": 1551708763
    },
    {
        "content": "<p>Could you post a complete example? If I simply type in a Lean file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">sub_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">div</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>then everything works as advertised</p>",
        "id": 159916913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551709233
    },
    {
        "content": "<p>That's good to know! Trying it out with my definition using the equation compiler like that works, but it doesn't work using well_founded.fix directly.</p>\n<p>Here's the example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div_rec_lemma&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">sub_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div&#39;</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">x₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_rec_lemma&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">zero</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">lt_wf</span> <span class=\"n\">div&#39;</span><span class=\"bp\">.</span><span class=\"n\">F</span>\n\n<span class=\"n\">def</span> <span class=\"n\">div&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">sub_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">div&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- Fails!:</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">div&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">div&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div&#39;</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Works!:</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">div&#39;&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">div&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div&#39;&#39;</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 159917218,
        "sender_full_name": "Plam",
        "timestamp": 1551709485
    },
    {
        "content": "<p>I'm not an expert at well founded recursion, but I think you could try reading <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a></p>",
        "id": 159918358,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551710346
    },
    {
        "content": "<p>regarding fib 100 being slow: the docs are outdated. automatic memoization was disabled awhile back</p>",
        "id": 159923606,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551714252
    },
    {
        "content": "<p>That was a useful read, but I appear not to have internalised it yet! I introduced a hypothesis the well foundedness checker seems to want, and I fail to make progress:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">psum</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psum</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span><span class=\"o\">)))))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"err\">&#39;</span><span class=\"n\">using_well_founded&#39;</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kn\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kn\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs</span><span class=\"bp\">.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"err\">&#39;</span><span class=\"n\">assumption&#39;</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"n\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"kn\">using</span> <span class=\"err\">&#39;</span><span class=\"k\">have</span><span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"n\">expressions</span><span class=\"bp\">.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span>\n<span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 159933047,
        "sender_full_name": "Plam",
        "timestamp": 1551721174
    },
    {
        "content": "<p>Does this help: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a> ?</p>",
        "id": 159933138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551721235
    },
    {
        "content": "<p>Note that h\\1 is not what you want to prove; the issue is that it tried to solve the goal using an assumption but h\\1 is not quite the right assumption.</p>",
        "id": 159933196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551721296
    },
    {
        "content": "<p>Oh sorry, I see Patrick already posted that.</p>",
        "id": 159933296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551721351
    },
    {
        "content": "<p>sometime adding <code>dec_tac := tactic.assumption</code> to the <code>using_well_founded</code> helps.</p>",
        "id": 159933304,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551721368
    },
    {
        "content": "<p>Maybe you should post some code rather than just the error</p>",
        "id": 159933313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551721374
    },
    {
        "content": "<p>Although this definition should be well founded according to the default well founded relation, which is the lexicographic ordering.</p>",
        "id": 159933477,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551721473
    },
    {
        "content": "<p>Depending on the other cases.</p>",
        "id": 159933502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551721493
    },
    {
        "content": "<p>Thanks for the hints. Having corrected my h\\1, I still end up with the error. Here's the code prompting the error (still broken in several places)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">theorem</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span>\n<span class=\"k\">with</span> <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">succ_add_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">succ_add_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">add_comm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Note that add has been defined (and infixed as +) locally</p>",
        "id": 159933885,
        "sender_full_name": "Plam",
        "timestamp": 1551721763
    },
    {
        "content": "<p>Plam, you should post a minimal working example, i.e. with everything need for someone to run it locally.</p>",
        "id": 159951392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551734108
    },
    {
        "content": "<p>Gotcha! Sorry for being slow on the uptake on that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">+</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pattern</span><span class=\"o\">]</span> <span class=\"n\">add</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_zero</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">succ_add_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">succ_add_succ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"n\">mutual</span> <span class=\"kn\">theorem</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span>\n<span class=\"k\">with</span> <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">succ_add_succ</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">]}</span>\n<span class=\"k\">with</span> <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_add</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">]</span>\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</pre></div>",
        "id": 159953649,
        "sender_full_name": "Plam",
        "timestamp": 1551735788
    },
    {
        "content": "<p>You can easily prove add_assoc by itself without intertwining it with add_comm. add_assoc doesn't need any commutativity hypotheses.</p>",
        "id": 159954570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551736499
    },
    {
        "content": "<p>What is your actual question? Proving associativity by induction on p and then proving commutativity afterwards is the standard way of doing it. Are you specifically trying to do it in a complicated way and then trying to get the equation compiler to sort it all out, or are you just wanting to prove it?</p>",
        "id": 159954882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551736751
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/\">https://xenaproject.wordpress.com/2017/10/31/building-the-non-negative-integers-from-scratch/</a> is a (more tactic-oriented) approach</p>",
        "id": 159954997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551736814
    },
    {
        "content": "<p>Thanks for the link. I don't mind not intertwining, but I do want to get practice with the equation compiler for proofs (as that is an explicit goal of the exercise)</p>",
        "id": 159961210,
        "sender_full_name": "Plam",
        "timestamp": 1551741863
    },
    {
        "content": "<p>Also I guess I'm explicitly interested in what is going wrong with the well-foundedness checker</p>",
        "id": 159961860,
        "sender_full_name": "Plam",
        "timestamp": 1551742444
    },
    {
        "content": "<p>(I got the assoc and comm proofs sorted based on what you said -- thanks!)</p>",
        "id": 159961943,
        "sender_full_name": "Plam",
        "timestamp": 1551742539
    }
]