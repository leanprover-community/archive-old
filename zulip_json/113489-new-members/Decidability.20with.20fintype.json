[
    {
        "content": "<p>Hi, I currently have a hypothesis </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G.connected_component_mk</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>I would like to break the exists to get said a. Cases gives me error \"induction tactic failed, recursor 'Exists.dcases_on' can only eliminate into Prop\".  I know I can use choose or classical.some, but for interest of understanding how this works, I'd like to not use anything like that. Let me note that V is fintype, so it appears to me that this should be easy to do (algorithmically, one might just go through every a:V and find one). How would one code this, if possible? Thanks for your help.</p>",
        "id": 305273668,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666320770
    },
    {
        "content": "<p><code>have ⟨a,h2⟩ := h1</code> destructures an existential proposition</p>",
        "id": 305274260,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666321312
    },
    {
        "content": "<p>I get \"invalid 'begin-end' expression, ',' expected\" when I do this (I have indeed written , at the end of the line). And when I click inside the &lt;&gt; I get \"unknown identifier 'a'\",  \"unknown identifier 'h2'\" as errors</p>",
        "id": 305274740,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666321708
    },
    {
        "content": "<p>Is this Lean 3?</p>",
        "id": 305274797,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666321802
    },
    {
        "content": "<p>I am going to guess it probably is, stop offering Lean 4 advice, and go to bed. :)</p>",
        "id": 305275072,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1666322105
    },
    {
        "content": "<p>are you in term mode or tactic mode?</p>",
        "id": 305275080,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666322120
    },
    {
        "content": "<p>if you're in tactic mode it might explain why that destructuring syntax didn't work... but that's besides the point</p>",
        "id": 305275152,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666322205
    },
    {
        "content": "<p>Yeah Lean 3</p>",
        "id": 305275163,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666322221
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> exists, but it requires proof of uniqueness</p>",
        "id": 305275243,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666322299
    },
    {
        "content": "<p>Tactic mode, inside a begin...end block</p>",
        "id": 305275245,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666322305
    },
    {
        "content": "<p>Interesting, but sadly it is not unique</p>",
        "id": 305275276,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666322368
    },
    {
        "content": "<p>my instinct tells me that Lean probably won't allow you to computably choose a \"random\" element that satisfies some predicate</p>",
        "id": 305275692,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666322811
    },
    {
        "content": "<p>for example, you might try to take the finset of elements in the fintype and convert it to a list, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.to_list\">docs#finset.to_list</a> is noncomputable</p>",
        "id": 305275727,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666322868
    },
    {
        "content": "<p>the reason the uniqueness proof is needed with <code>fintype.choose</code> is because it removes the element of randomness and narrows down the search to a single mathematically defined object</p>",
        "id": 305275806,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666322962
    },
    {
        "content": "<p>I'm far from a Lean expert, so it's possible that there's a method that I'm unaware of... perhaps someone else will weigh in</p>",
        "id": 305275918,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666323085
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> only requires an existence proof, but (I think) that's because you have an order and you're specifically requesting the \"least\" one, so it's not random</p>",
        "id": 305276085,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666323245
    },
    {
        "content": "<p>if your fintype has a well founded order on it, you might be able to find what you need using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_well_founded.fix\">docs#is_well_founded.fix</a></p>",
        "id": 305276240,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666323468
    },
    {
        "content": "<p>Ok yeah I see what you mean. In my head something being finite (having cardinality n) means there is an bijection between that and {1,...n}, but that may not be true in this type theory stuff (I'm still pretty new) and so we can't computably choose one such bijection (im looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.trunc_fin_bijection\">docs#fintype.trunc_fin_bijection</a> for instance but there is some weird trunc thing going on to maintain computability). I was mostly trying to use this for some decidability properties that are required for when adding stuff in the graph theory part of mathlib. I liked the idea of it being the most elementary possible, but I'm really close to just doing everything classically. Not sure how people working on mathlib feel about that?</p>",
        "id": 305276504,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666323800
    },
    {
        "content": "<blockquote>\n<p>I liked the idea of it being the most elementary possible, but I'm really close to just doing everything classically. Not sure how people working on mathlib feel about that?</p>\n</blockquote>\n<p>Like are they okay with using the axiom of choice all over the place?</p>",
        "id": 305276607,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1666323945
    },
    {
        "content": "<blockquote>\n<p>In my head something being finite (having cardinality n) means there is an bijection between that and {1,...n}, but that may not be true in this type theory stuff (I'm still pretty new) and so we can't computably choose one such bijection </p>\n</blockquote>\n<p>You can choose the first element of a list using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.find\">docs#list.find</a>, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset\">docs#multiset</a> is a quotient of <code>list</code> where the order is forgotten, so there is no longer a well-defined first element, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a> (which underlies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype\">docs#fintype</a>) consists of multisets without duplicate elements. So you can't pick an element if it's it not unique, without using some extra structure (like a linear order to narrow down to a unique element) or choice. If you are in a proof and not constructing data, <code>obtain ⟨a,h2⟩ := h1</code> should work though, because any two proofs of the same Prop are same to Lean, no matter what <code>a</code> you use in the proof.</p>",
        "id": 305278631,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666326242
    },
    {
        "content": "<p>Jérémie, are you trying to prove something using such an <code>a : V</code>, or construct data? Seems like the latter, since you are trying to eliminate into something that isn't Prop. How would your constructed data vary if you somehow chose a different <code>a' : V</code>?</p>",
        "id": 305278680,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666326259
    },
    {
        "content": "<p>Yeah, if <code>cases</code> doesn't work it sounds like you're abusing tactic mode ie your goal is not a true-false statement. Just use <code>exists.some</code>in this case.</p>",
        "id": 305284935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666332016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507101\">Jérémie Turcotte</span> <a href=\"#narrow/stream/113489-new-members/topic/Decidability.20with.20fintype/near/305276504\">said</a>:</p>\n<blockquote>\n<p>In my head something being finite (having cardinality n) means there is a bijection between that and {1,...n}, but that may not be true in this type theory stuff (I'm still pretty new) and so we can't computably choose one such bijection</p>\n</blockquote>\n<p>If <em>something</em> is finite, there indeed exists a bijection between it and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo fence=\"true\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\left\\{1,\\dots,n\\right\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose delimcenter\" style=\"top:0em;\">}</span></span></span></span></span>. It has nothing to do with computability.</p>",
        "id": 305362313,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1666360923
    },
    {
        "content": "<p>Yeah that's actually the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite\">docs#finite</a>. However since it's a Prop you can't get back the bijection computably: no matter what bijection you use to prove finiteness, the resulting proofs are all equal; this is called proof irrelevance in type theory. The idea is that you can't get back lost/forgotten information computably. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.trunc_fin_bijection\">docs#fintype.trunc_fin_bijection</a> uses a quotient (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/trunc\">docs#trunc</a>) to collapse all bijections to a single element; it is computable because a term in the <code>trunc</code> type carries no more information than the mere existence of a bijection. This \"truncated\" bijection can then be used to define other data that does not depend on the choice of the bijection.</p>",
        "id": 305374761,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666364391
    }
]