[
    {
        "content": "<p>I have the following code and error I cant understand:<br>\nCode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_prod_of_binary_prod</span> <span class=\"o\">[</span><span class=\"n\">has_binary_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"n\">J</span> <span class=\"n\">fin</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">J</span> <span class=\"k\">then</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">J&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">card_lt</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_subtype_lt</span> <span class=\"n\">J</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">J&#39;_lims</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J&#39;</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">finite_prod_of_binary_prod</span> <span class=\"n\">J&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"bp\">‚ü®_‚ü©</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">F&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">discrete</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">J</span><span class=\"o\">))</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">J&#39;_lims</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">F&#39;_has_lim</span> <span class=\"o\">:</span> <span class=\"n\">has_limit</span> <span class=\"n\">F&#39;</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">J&#39;_lims</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span> <span class=\"n\">F&#39;</span><span class=\"o\">),</span>\n\n<span class=\"kn\">end</span>\n<span class=\"k\">else</span> <span class=\"bp\">_</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span><span class=\"o\">]}</span>\n</pre></div>\n\n\n<p>Error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">function</span> <span class=\"err\">&#39;</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span><span class=\"bp\">.</span><span class=\"n\">has_limit&#39;</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">explicit</span> <span class=\"n\">argument</span> <span class=\"k\">with</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_binary_products</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">finite_prod_of_binary_prod</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">],</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">J&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">card_lt</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J&#39;</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">J&#39;_lims</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">J&#39;</span><span class=\"o\">)</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">F&#39;</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">discrete</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">J&#39;</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limit</span> <span class=\"n\">F&#39;</span>\n</pre></div>\n\n\n<p>I created the test hypothesis to show what the type of J'_lims.has_limit. It seems to me that I should just be able to supply F' (which is a functor from discrete J' -&gt; C). What am I missing?</p>\n<p>If it helps this is the definition of has_limits_of_shape:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_limits_of_shape</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">has_limit</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">has_limit</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 179560892,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572546131
    },
    {
        "content": "<p>Alternative quesiton: How do I make lean expand the ... in the error?</p>",
        "id": 179560987,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572546161
    },
    {
        "content": "<p>First remark <span class=\"user-mention\" data-user-id=\"132603\">@Calle S√∂nne</span>: that should be a <code>def</code>, not a <code>lemma</code>. This might miraculously solve some problem, but probably not.</p>",
        "id": 179562401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572546884
    },
    {
        "content": "<p>I don‚Äôt think you need to expand the <code>...</code>. The problem is that you‚Äôre trying to access a field of a class as if it were a structure.</p>",
        "id": 179562470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572546920
    },
    {
        "content": "<p>(Back later.)</p>",
        "id": 179562483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572546926
    },
    {
        "content": "<p><code>let test := J'_lims.has_limit</code> should be the culprit, for the reason described above</p>",
        "id": 179565228,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572548566
    },
    {
        "content": "<p>Thank you, I have always treated classes and structures the same but I found the solution now.</p>",
        "id": 179565698,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572548840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle S√∂nne</span> do you know about the dot notation? When I learnt about this properly things started making a whole lot more sense to me.</p>",
        "id": 179610716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572600374
    },
    {
        "content": "<p>I dont think so</p>",
        "id": 179611115,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572600721
    },
    {
        "content": "<p>I'm sure other people will think about things differently, but for me one big difference between classes and structures is that the dot notation works differently.</p>",
        "id": 179611179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572600767
    },
    {
        "content": "<p>yeah yesterday I found out that with structures you have to refer to the structure itself to use dot notation, instead of a term of that structure.</p>",
        "id": 179611263,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572600850
    },
    {
        "content": "<p>no wait other way around</p>",
        "id": 179611278,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1572600874
    },
    {
        "content": "<p>This was why I mentioned it -- it was one of the times when I had some \"aha\" moment and things got clearer.</p>",
        "id": 179611287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572600886
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">myclass</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">mystructure</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">myclass</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"c1\">-- X explicit</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">mystructure</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"c1\">-- Y implicit</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">mystructure</span> <span class=\"bp\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ü®</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"bp\">‚ü©</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">myclass</span> <span class=\"bp\">‚Ñ§</span> <span class=\"o\">:=</span> <span class=\"bp\">‚ü®</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"bp\">‚ü©</span> <span class=\"c1\">-- no name by default</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">mystructure</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">myclass</span> <span class=\"n\">Q</span><span class=\"o\">]</span>\n<span class=\"c1\">-- don&#39;t have a name for the class analogue of s!</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"c1\">-- works fine</span>\n<span class=\"c1\">-- A has type `mystructure [something]` so `A.c *means* mystructure.c A`</span>\n<span class=\"c1\">-- this is the powerful dot notation. It&#39;s why `h.symm` works if `h : a = b`!</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mystructure</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"n\">A</span> <span class=\"c1\">-- even prettyprinter changes it to `A.c`</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"c1\">-- works fine</span>\n<span class=\"c1\">-- but what are the analogues for classes?</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">myclass</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"n\">Q</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">myclass</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"bp\">‚Ñ§</span>\n<span class=\"c1\">-- have to do it this way because no names, but X explicit in myclass.c so it&#39;s OK</span>\n</pre></div>\n\n\n<p>I know this is all trivial but I remember being very stuck on all this once.</p>",
        "id": 179611847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572601590
    },
    {
        "content": "<p>We used <code>h.symm</code> for <code>h : A = B</code> on Thursday and I remember almost mentioning all this to you then.</p>",
        "id": 179611995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572601787
    },
    {
        "content": "<p>It works because <code>h</code> has type <code>eq &lt;something&gt;</code></p>",
        "id": 179612045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572601805
    },
    {
        "content": "<p>but without the variable names, when you're dealing with classes, you can't use this so they had to give you another way.</p>",
        "id": 179612061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572601826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">myclass</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"c1\">-- if you haven&#39;t got instances turned off in VS Code you can see it</span>\n  <span class=\"c1\">-- you&#39;re not supposed to think about the names but the names are there</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179612189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572601988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I guess it's worth it to dump those examples in <code>dot_notation.md</code> in a docs folder. I've never really struggled with these, for some reason <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> But looking at you examples, I can understand how this can lead to confusion.</p>",
        "id": 179614024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572603778
    },
    {
        "content": "<p>Johan I think you had much more of a programming background when you came to this (like Patrick). I think there are lots of languages which use this dot notation, I just didn't know it at all, and the fact that it worked slightly differently for classes than structures just added to the confusion.</p>",
        "id": 179614159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572603857
    },
    {
        "content": "<p>Maybe... I've played with other programming languages before, but so had you. I'm quite a cargo cult programmer actually. (That's also how I've learned Lean <span aria-label=\"hushed\" class=\"emoji emoji-1f62f\" role=\"img\" title=\"hushed\">:hushed:</span>)</p>",
        "id": 179614277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572603965
    },
    {
        "content": "<p>I think that you were just better at them ;-)</p>",
        "id": 179614300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572603997
    }
]