[
    {
        "content": "<p>I'm trying to state that the second derivative is symmetric (or a special case of this, by mathlib standards). </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I'm getting an error saying that my <code>(v, w)</code> should have type <code>Π (i : fin 2), (λ (i : fin 2), ℝ × ℝ) i</code>. What is this type, and how do I construct a term of that type?</p>",
        "id": 202493250,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1593550391
    },
    {
        "content": "<p>With the caveat that I have never used these libraries, I might suggest</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 202496284,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593551885
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> .</p>",
        "id": 202505200,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1593557680
    },
    {
        "content": "<p>Just to make sure things are clear: Heather gave you a more general statement than what you wanted, since <code>E</code> could have any dimension (even infinite). What you tried to state is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n\n<span class=\"n\">def</span> <span class=\"n\">swap</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">swap</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202505959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593558239
    },
    {
        "content": "<p>I also used <code>swap</code> instead of a general permutation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> as Heather did, but this is of course a trivial change, contrary to going from dimension 2 to arbitrary dimension.</p>",
        "id": 202506080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593558332
    },
    {
        "content": "<p>I used a general permutation to conceal the fact that I did not know how write down <code>swap</code>!</p>",
        "id": 202506521,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593558719
    },
    {
        "content": "<p>There is swap as a perm also in <code>data.equiv.basic</code>, which might have some useful lemmas proved about it. <br>\n So you can do </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">partial_symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">iterated_fderiv</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∘</span> <span class=\"n\">swap</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 202509945,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593561791
    },
    {
        "content": "<p>Not sure I understand the arguments in <code>iterated_fderiv</code> and there aren't many comments in mathlib. Please help me clarify: in <code>iterated_fderiv ℝ 2 f p v</code> the point where the derivative is evaluated is <code>p</code> ?  If that is true, why not rather use  permutations on <code>finset.range n</code> to indicate what derivative is taken.  To make a connection between the present choice and usual notation, what is <code>v</code> going to be for  example if one needs <code>d^2/dx^2</code> versus <code>d^2/dxdy</code>?  Sorry if I miss something obvious here.</p>",
        "id": 202554263,
        "sender_full_name": "Victor Tsynkov",
        "timestamp": 1593600290
    },
    {
        "content": "<p>The derivative in mathlib is the general notion of Fréchet derivative, i.e., a linear map approximating the original map around a point. So, we are not talking of derivatives in a specific directions, but rather in all directions simultaneously. The derivative in direction <code>a</code> is <code>fderiv k f p a</code>. In the same way, the iterated derivative is a multilinear map, taking all directions into account at the same time. So, if you want to compute the second derivative in directions <code>a</code> and <code>b</code>, you write <code>iterated_fderiv k 2 f p v</code>, where <code>v = (a, b)</code> (except that it is seen as a function from <code>fin 2</code> to your space <code>E</code>, instead of an element of <code>E x E</code>, as this is the point of view that generalizes well to higher derivatives).</p>",
        "id": 202554780,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593600666
    },
    {
        "content": "<p>There is a discussion of the meanings of the arguments in the header comment of <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/times_cont_diff.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/times_cont_diff.html</a></p>",
        "id": 202554920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593600791
    },
    {
        "content": "<p>So the answer to the question is that <code>v</code> should be <code>(0 -&gt; (1, 0), 1 -&gt; (1, 0))</code> for <code>d^2/dx^2</code> and <code>(0 -&gt; (1, 0), 1 -&gt; (0, 1))</code> for <code>d^2/dxdy</code>, where <code>(0 -&gt; a, 1 -&gt; b)</code> is the function on <code>fin 2</code> taking 0 to a and 1 to b</p>",
        "id": 202555107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593600944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20iterated_fderiv/near/202555107\">said</a>:</p>\n<blockquote>\n<p>So the answer to the question is that <code>v</code> should be <code>(0 -&gt; (1, 0), 1 -&gt; (1, 0))</code> for <code>d^2/dx^2</code> and <code>(0 -&gt; (1, 0), 1 -&gt; (0, 1))</code> for <code>d^2/dxdy</code>, where <code>(0 -&gt; a, 1 -&gt; b)</code> is the function on <code>fin 2</code> taking 0 to a and 1 to b</p>\n</blockquote>\n<p>This is the part I was missing. Thank you!</p>",
        "id": 202555329,
        "sender_full_name": "Victor Tsynkov",
        "timestamp": 1593601085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20iterated_fderiv/near/202554920\">said</a>:</p>\n<blockquote>\n<p>There is a discussion of the meanings of the arguments in the header comment of <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/times_cont_diff.html\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/times_cont_diff.html</a></p>\n</blockquote>\n<p>Maybe it's because I'm not a mathematician, but it seems to me that exactly the part that is more difficult to understand, about what the map <code>v</code> is, is missing from those explanations.</p>",
        "id": 202786494,
        "sender_full_name": "Victor Tsynkov",
        "timestamp": 1593770182
    },
    {
        "content": "<p>reading mathlib is not supposed to be an efficient way to learn multivariable calculus</p>",
        "id": 202806618,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593784912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20iterated_fderiv/near/202806618\">said</a>:</p>\n<blockquote>\n<p>reading mathlib is not supposed to be an efficient way to learn multivariable calculus</p>\n</blockquote>\n<p>I don't read it this way. Instead, I see that we are missing a whole API around partial derivatives, and we will definitely need to add it some day, because this is the way many people approach and use calculus.</p>",
        "id": 202815555,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593790437
    }
]