[
    {
        "content": "<p>I have a boolean valued function <code>f</code>, and I want to prove goal <code>f x</code>  during tactics mode, how do I evaluate <code>f</code> fully to its boolean value? Note that <code>f</code> might be complicated, so it would be good if it evaluates fast.</p>",
        "id": 219919449,
        "sender_full_name": "Rui Liu",
        "timestamp": 1607989923
    },
    {
        "content": "<p>One possibility is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"c1\">--show contradiction here,</span>\n  <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>if I understood correctly</p>",
        "id": 219920077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607990342
    },
    {
        "content": "<p>It depends a bit on what you mean. Is <code>x</code> a term without variables? And your goal is <code>⊢ ↥(f x)</code>? Then <code>exact rfl</code> should be able to compute <code>f x</code> down to either <code>tt</code> or <code>ff</code> and close the goal if it's <code>tt</code>.</p>",
        "id": 220037655,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608064143
    },
    {
        "content": "<p>If <code>x</code> contains variables (or is a variable) <code>dsimp [f]</code> might help.</p>",
        "id": 220037732,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608064188
    },
    {
        "content": "<p>Can I ask what do you mean by <code>variable</code>? Do you mean something defined by <code>let</code> or <code>have</code>? <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 220060682,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608076312
    },
    {
        "content": "<p>I mean a local constant, which is a term in your context. So the <code>x</code> and <code>y</code> in the following goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 220064692,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608079368
    },
    {
        "content": "<p>We can be more helpful if you post a small example of what you want. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 220064723,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608079395
    },
    {
        "content": "<p>Yes <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I understand that would be helpful, however I already got some code saved up, so it's a bit hard to distill the essential part of my question.</p>\n<p>But if you don't mind downloading my code and play with it, I have attached it. I was trying to prove godel's incompleteness theorem (might be a bit too challenging for a lean beginner....). As part of the proof, I have defined functions to check proof for a formula, see <code>q_proof_for</code>. This function reduces to a boolean. However, I can't get it to reduce to a boolean in tactic mode, which is where I got stuck in the first <code>sorry</code>.</p>\n<p>I have tried <code>trivial</code>, <code>refl</code>, and a bunch of <code>simp/dsimp</code> and I couldn't get it to work even when I know that I just need to trivially evaluate it to the boolean result....which is quite frustrating. Also note that this function might be complicated, so maybe better using <code>#eval</code> rather than <code>#reduce</code> to evaluate it?</p>\n<p><a href=\"/user_uploads/3121/sMt9PfF7svEiiz4TA5429QnS/main.lean\">main.lean</a></p>",
        "id": 220067245,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608081654
    },
    {
        "content": "<p>Well, you cannot <em>just</em> evaluate it, since there is an unknown expression <code>w'</code>, that depends on some variables</p>",
        "id": 220069857,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608084703
    },
    {
        "content": "<p>(in the place of the first <code>sorry</code>)</p>",
        "id": 220069902,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608084724
    },
    {
        "content": "<p>However, you can make progress by doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">proof_for</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">list.reverse_cons</span><span class=\"o\">,</span> <span class=\"n\">proof_check</span><span class=\"o\">],</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>The first line unfolds the mentioned definitions/let-expressions. The second line simplifies further, reducing some <code>if ... then ... else ...</code> expressions.</p>",
        "id": 220069926,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608084776
    },
    {
        "content": "<p>However, I recommend that you write some equation lemmas for your definition. For example, I believe that <code>proof axm (prf ++ [tl])</code> is equal to some other expression involving <code>proof axm prf</code>, which you can proof (it's not true by definition, since <code>(prf ++ [tl]).reverse = tl :: prf.reverse</code> is not true by definition, but it's close. Furthermore, after doing the above reductions, you need to prove simple lemmas like <code>form_eql e e</code> for all <code>e</code>.</p>",
        "id": 220070121,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608085051
    },
    {
        "content": "<p>Oh wait, I see now that all your variables are specified...</p>",
        "id": 220070171,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608085088
    },
    {
        "content": "<p>In this case you can do <code>subst h, exact rfl</code>. <code>subst h</code> eliminates the (only meaningful) variable <code>y</code>, and then <code>exact rfl</code> can evaluate the goal to <code>tt</code>.</p>",
        "id": 220070196,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608085143
    },
    {
        "content": "<p>By the way, did you see <a href=\"https://github.com/flypitch/flypitch\">Flypitch</a>? In that project <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> and I formalize the independence of the continuum hypothesis. We also do quite some first-order logic. It might not be directly related to your project (we don't give a decision procedure for proof checking), but it might give some ideas.</p>",
        "id": 220070427,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608085469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  I have just tried replacing the first <code>sorry</code> with <code>subst h, exact refl,</code>. However, it doesn't seem to work and it's complaining at <code>refl</code> with some error message I don't understand.</p>",
        "id": 220173768,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608153177
    },
    {
        "content": "<p>Thanks for linking the project! That definitely looks interesting, as I've always wanted to understand how forcing works (metamathematics feels like magic to me :)  I got to know lean partly because every time I read about some interesting mathematics, I always feel \"I kind of understand\". But if I formalize it, then there's no way for me to not understand it. Computer will check the proof for me. It's useful for self study :)</p>",
        "id": 220174770,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608153727
    },
    {
        "content": "<p>Just couldn't get it reduce to boolean!!!</p>",
        "id": 220178489,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608155722
    },
    {
        "content": "<blockquote>\n<p>it's complaining at refl with some error message I don't understand.</p>\n</blockquote>\n<p>Two suggestions: (1) read the message, all of it, carefully (2) post exact error messages here</p>",
        "id": 220178642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608155812
    },
    {
        "content": "<p>The error message says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">proof_for</span> <span class=\"n\">q_axm</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">form</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">w'</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">prf</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subst_fn</span> <span class=\"n\">w</span> <span class=\"mi\">0</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 220180077,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608156508
    },
    {
        "content": "<p>Note that there's a difference between <code>exact refl</code> and <code>exact rfl</code>. The argument to the latter is implicit.</p>",
        "id": 220181866,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608157364
    },
    {
        "content": "<p>The tactic <code>refl</code> is approximately <code>exact rfl</code>.</p>",
        "id": 220181889,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608157382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> OMG you just saved me!</p>",
        "id": 220182693,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608157868
    },
    {
        "content": "<p>Ok I see now, there's a <code>refl</code> that's a tactic name, somehow it doesn't work. However, <code>refl</code> is different from <code>exact refl/rfl</code>, in which <code>refl/rfl</code> is just normal objects, and we're using <code>exact</code> tactic. And it happens that <code>rfl</code> doesn't need you to specify argument. Now I understand why when I do <code>exact refl</code> it complains the type mismatch to me!</p>\n<p>I was confused between <code>refl</code> and <code>exact refl</code>!</p>",
        "id": 220183820,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608158483
    },
    {
        "content": "<p>Thank you so much! I may take days for me to figure this out on my own!</p>",
        "id": 220183932,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608158527
    },
    {
        "content": "<p>Note: <code>exact refl _</code> should also work, and is basically the same as <code>exact rfl</code>.</p>",
        "id": 220185258,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608159268
    },
    {
        "content": "<p>In this case the tactic <code>refl</code> doesn't work, since that expect the goal to be of the form <code>t = s</code> (or using a relation other than <code>=</code>). Your goal is of the form <code>↥u</code>, which is defined as <code>t = bool.tt</code>, but <code>refl</code> doesn't unfold that definition, so doesn't see that we're talking about an equality here.</p>",
        "id": 220185386,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608159352
    },
    {
        "content": "<p>Do you know why when I replace the <code>subst h</code> to <code>rw h</code>, it again fails to work?</p>",
        "id": 220189188,
        "sender_full_name": "Rui Liu",
        "timestamp": 1608161973
    },
    {
        "content": "<p>those two are not interchangeable</p>",
        "id": 220189286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608162039
    },
    {
        "content": "<p><code>rw h</code> tries to close the goal with <code>refl</code>, and <code>subst h</code> can replace some things that <code>rw h</code> can't (it gives a \"motive is not type correct\" error in these cases)</p>",
        "id": 220189334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608162085
    }
]