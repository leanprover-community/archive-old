[
    {
        "content": "<p>Here is another diamond I discovered today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.ordered</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">[</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hN</span> <span class=\"o\">:</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_partial_order.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.ordered_cancel_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_ordered_cancel_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_ordered_cancel_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_lt.lt.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">prod.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.has_lt.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_partial_order.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_lt.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">N</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_partial_order.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod.mk.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251320028,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630374192
    },
    {
        "content": "<p>That was in this context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prod.lt_ext_iff'</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prod.lt_ext_iff</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.fst</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.fst</span> <span class=\"bp\">∨</span> <span class=\"n\">a.fst</span> <span class=\"bp\">=</span> <span class=\"n\">b.fst</span> <span class=\"bp\">∧</span> <span class=\"n\">a.snd</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.snd</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ordered_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">prod.ordered_module'</span> <span class=\"o\">:</span> <span class=\"n\">ordered_module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">kpos</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">prod.lt_ext_iff</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- here</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251320040,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630374214
    },
    {
        "content": "<p>Aha, the <code>le</code> and <code>lt</code> instances we have aren't compatible currently.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod.preorder_current</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hce</span><span class=\"o\">,</span> <span class=\"n\">hdf</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"n\">hac</span> <span class=\"n\">hce</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">hbd</span> <span class=\"n\">hdf</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod.has_le</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod.preorder_clash</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hce</span><span class=\"o\">,</span> <span class=\"n\">hdf</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"n\">hac</span> <span class=\"n\">hce</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">hbd</span> <span class=\"n\">hdf</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod.has_lt</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod.has_le</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">exact tactic failed, type mismatch, given expression has type</span>\n<span class=\"cm\">  ?m_1 ↔ ?m_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  a &lt; b ↔ a ≤ b ∧ ¬b ≤ a</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">M : Type v,</span>\n<span class=\"cm\">N : Type w,</span>\n<span class=\"cm\">_inst_1 : preorder M,</span>\n<span class=\"cm\">_inst_2 : preorder N,</span>\n<span class=\"cm\">a b : M × N</span>\n<span class=\"cm\">⊢ a &lt; b ↔ a ≤ b ∧ ¬b ≤ a</span>\n\n<span class=\"cm\">M : Type v,</span>\n<span class=\"cm\">N : Type w,</span>\n<span class=\"cm\">_inst_1 : preorder M,</span>\n<span class=\"cm\">_inst_2 : preorder N,</span>\n<span class=\"cm\">a b : M × N</span>\n<span class=\"cm\">⊢ Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 251320606,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630374758
    },
    {
        "content": "<p>I don't think this is provably true...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">prod.preorder'</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_refl</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hce</span><span class=\"o\">,</span> <span class=\"n\">hdf</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">le_trans</span> <span class=\"n\">hac</span> <span class=\"n\">hce</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">hbd</span> <span class=\"n\">hdf</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">h.le</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h.not_le</span> <span class=\"n\">H.left</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">h.left.le</span><span class=\"o\">,</span> <span class=\"n\">h.right.le</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h.right.not_le</span> <span class=\"n\">H.right</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod.has_lt</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod.has_le</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 251321031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630375208
    },
    {
        "content": "<p>Makes an appearance in <a href=\"https://github.com/leanprover-community/mathlib/issues/8930\">#8930</a></p>",
        "id": 251333945,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630387664
    }
]