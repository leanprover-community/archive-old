[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">θ</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">-- Throw the following error:</span>\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   has_le.le a</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   a</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   0 &lt; θ : Prop</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ?m_1 : Type ?</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172013398,
        "sender_full_name": "Joe",
        "timestamp": 1564472545
    },
    {
        "content": "<p>Change <code>a</code> to <code>b</code> will fix it.</p>",
        "id": 172013418,
        "sender_full_name": "Joe",
        "timestamp": 1564472572
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">θ</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">θ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172013437,
        "sender_full_name": "Joe",
        "timestamp": 1564472586
    },
    {
        "content": "<p>That's the letter <code>a</code> bug. Something to do with the <code>have</code> being parsed as <code>∀θ:ℕ, ∀ a : 0 &lt; θ, a ≤ a</code></p>",
        "id": 172014069,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564473146
    },
    {
        "content": "<p>Oh, good to know it's already known!</p>",
        "id": 172014935,
        "sender_full_name": "Joe",
        "timestamp": 1564473892
    },
    {
        "content": "<p>Is this <code>a</code> bug? Yes.</p>",
        "id": 172019616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564478113
    },
    {
        "content": "<p>I suggest a change to the style manual to never use <code>a</code> as a variable: <a href=\"https://github.com/leanprover-community/mathlib/issues/1285\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1285\">#1285</a></p>\n<p>Note to self: it would probably be doable to write a tactic that checks whether you have used the variable name <code>a</code> in declarations, to help a user spot this.</p>",
        "id": 172041118,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564495933
    },
    {
        "content": "<p>I think this is a bit strong. I rarely use <code>have</code> with implies. The letter <code>a</code> is used everywhere.</p>",
        "id": 172041337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564496053
    },
    {
        "content": "<p>The workaround style is to use <code>forall _:A, B</code> instead of <code>A -&gt; B</code> in tactics</p>",
        "id": 172084327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564527996
    },
    {
        "content": "<p>Ok, maybe banning the letter <code>a</code> everywhere is a bit of an overreaction (I was already doing it myself though, for this exact reason).</p>",
        "id": 172175800,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564615775
    },
    {
        "content": "<p>I went through a \"no a\" phase after being bitten by this early on, but it wore off...</p>",
        "id": 172196316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564642251
    }
]