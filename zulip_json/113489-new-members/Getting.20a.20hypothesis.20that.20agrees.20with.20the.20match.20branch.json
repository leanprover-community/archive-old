[
    {
        "content": "<p>I'm stuck o n the first sorry here - my goal is exactly the description of the match branch I'm in, but I don't appear to have a proof to hand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.subgroup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inv_sum_congr</span> <span class=\"o\">{</span><span class=\"n\">ιa</span> <span class=\"n\">ιb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm.sum_congr_subgroup</span> <span class=\"n\">ιa</span> <span class=\"n\">ιb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">ιa</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">il</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">il</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">ir</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span><span class=\"o\">,</span> <span class=\"n\">sl</span><span class=\"o\">,</span> <span class=\"n\">sr</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">ir</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"c1\">--`⊢ ⇑σ (sum.inl i) = sum.inr ir` ir is exactly our match condition!</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"kd\">end</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219760278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607863786
    },
    {
        "content": "<p>I can get there with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">with_proof</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and thenusing <code>match with_proof (σ (sum.inl i)) with ...</code>. Does <code>with_proof</code> exist as a syntax feature already?</p>",
        "id": 219760634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607864438
    },
    {
        "content": "<p>Every once in a while something like this gets asked and Mario usually pops up with some solution that uses <code>match _, rfl : \\forall</code>, e.g. <a href=\"#narrow/stream/113488-general/topic/match.20hypothesis/near/133919298\">1</a> <a href=\"#narrow/stream/113489-new-members/topic/Equation.20for.20match-case/near/147353504\">2</a> <a href=\"#narrow/stream/113489-new-members/topic/Getting.20equation.20from.20match/near/188421210\">3</a></p>",
        "id": 219761205,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607865475
    },
    {
        "content": "<p>Thanks, that solves my need for <code>with_proof</code>, but I still get stuck trying to unfold the matches</p>",
        "id": 219761704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607866345
    },
    {
        "content": "<p>I get stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inv_sum_congr</span> <span class=\"o\">{</span><span class=\"n\">ιa</span> <span class=\"n\">ιb</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm.sum_congr_subgroup</span> <span class=\"n\">ιa</span> <span class=\"n\">ιb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">ιa</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">σ.1</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">il</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">il</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">ir</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">sl</span><span class=\"o\">,</span> <span class=\"n\">sr</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">σ.2</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span><span class=\"bp\">⁻¹.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">il</span><span class=\"o\">),</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">il</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">ir</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">sl</span><span class=\"o\">,</span> <span class=\"n\">sr</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span><span class=\"bp\">⁻¹.</span><span class=\"mi\">2</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">σ.1</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">il</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"kd\">end</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">ir</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"bp\">$</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">sl</span><span class=\"o\">,</span> <span class=\"n\">sr</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">σ.2</span> <span class=\"k\">in</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219761863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607866617
    },
    {
        "content": "<p>I think the better solution is just to go to tactic mode and use <code>cases e : x</code> which handles this</p>",
        "id": 219763372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869032
    },
    {
        "content": "<p>I haven't needed to write <code>match x, rfl : ...</code> since that was added</p>",
        "id": 219763379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869050
    },
    {
        "content": "<p>Oh true, tactic mode would be fine in the two proof fields</p>",
        "id": 219763460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607869184
    },
    {
        "content": "<p>Would tactic mode be a bad idea for the data fields?</p>",
        "id": 219763517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607869244
    },
    {
        "content": "<p>It's fine as long as you are aware what all the tactics you use desugar to</p>",
        "id": 219763536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869269
    },
    {
        "content": "<p>This kind of construction is difficult to work with regardless of how you write it</p>",
        "id": 219763544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869312
    },
    {
        "content": "<p>because you have to induct over the x and rfl simultaneously in order to unfold the match, and this involves some messy dependent inductive hypothesis</p>",
        "id": 219763606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869355
    },
    {
        "content": "<p>I think those matches should actually be a function on their own, like <code>sum.resolve_left : \\all x: A + B, (\\ex y, x = sum.inl y) -&gt; A</code></p>",
        "id": 219763790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869612
    },
    {
        "content": "<p>I was thinking about that too</p>",
        "id": 219763806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607869631
    },
    {
        "content": "<p>Is there a more generic version of that to non-classically unpack an exists of an inductive type?</p>",
        "id": 219763825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607869680
    },
    {
        "content": "<p>it would be even better if such functions were generated automatically because they work for all inductive types</p>",
        "id": 219763875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869704
    },
    {
        "content": "<p>Or is a type like <code>sum.elim (fun _, true) (fun _, false)</code> a better thing to use as an argument than <code>exists</code>?</p>",
        "id": 219763885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607869724
    },
    {
        "content": "<p>I have considered the following scheme: <code>T.discr : T -&gt; nat</code> returns the discriminant, i.e. 0 for the first case, 1 for the second, etc, and <code>T.extract_c : \\all x : T, x.discr = n -&gt; A x B</code> gets case <code>| c : A -&gt; B -&gt; T</code> with discriminant <code>n</code></p>",
        "id": 219763974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869847
    },
    {
        "content": "<p>Alternatively, <code>extract_c</code> can return <code>option (A x B)</code> and there are theorems about what its <code>is_some</code> looks like so you can use <code>option.get</code></p>",
        "id": 219763997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869903
    },
    {
        "content": "<p>The cool thing is that this represents the primitive operations of the VM, so they have efficient implementations even better than match</p>",
        "id": 219764042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607869951
    },
    {
        "content": "<p>extract_c could go with <code>-&gt; \\sigma a b, x = c a b</code> right?</p>",
        "id": 219764121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607870055
    },
    {
        "content": "<p>Also, for very large inductive types, this scheme is asymptotically better than the standard O(n^2) decidable_eq implementation</p>",
        "id": 219764123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607870068
    },
    {
        "content": "<p>It could also be broken into a bunch of functions instead of a pair- or sigma- returning function</p>",
        "id": 219764141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607870120
    },
    {
        "content": "<p>the equality would be a theorem, there's no need to pack it in the return value</p>",
        "id": 219764173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607870162
    },
    {
        "content": "<p>I've been having similar issues with casing on inductive types. What would be the main expected challenge in generating such functions for all inductive types?</p>",
        "id": 219768308,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607876684
    },
    {
        "content": "<p>Packing it in the return value seems like an easy way to generalize over arbitrary telescopes</p>",
        "id": 219769466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607878390
    },
    {
        "content": "<p>Rather that having a special case for the last argument which doesn't get a binder</p>",
        "id": 219769472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607878410
    }
]