[
    {
        "content": "<p>Please forgive me for describing problem in C++ way. I have the following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">affine_plane_point</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and now I try to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">affine_plane_point</span> <span class=\"n\">K</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">P.x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">P.y</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>but have no ideas. <code>simp</code> <code>refl</code> <code>library_search</code> and <code>hint</code> are all failed. Do I need to define the operator == for <code>affine_plane_point</code> exilicitly ?</p>",
        "id": 220883332,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608833076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366779\">@Jz Pan</span> <code>cases P</code></p>",
        "id": 220883430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608833179
    },
    {
        "content": "<p>and then <code>dsimp</code></p>",
        "id": 220883435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608833188
    },
    {
        "content": "<p>What you want is an \"ext lemma\"</p>",
        "id": 220883442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608833200
    },
    {
        "content": "<p>Would tagging the structure as <code>[ext]</code> work?</p>",
        "id": 220883455,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608833214
    },
    {
        "content": "<p>You can search mathlib for <code>[ext]</code> to get examples.</p>",
        "id": 220883460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608833222
    },
    {
        "content": "<p>Aside: note that mathlib has quite a bit on euclidean/affine geometry. What are your plans with <code>affine_plane_point</code>?</p>",
        "id": 220883491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608833261
    },
    {
        "content": "<p>My plan is also define projective plane and embed affine plane point into it.</p>",
        "id": 220883561,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608833315
    },
    {
        "content": "<p>An ad-hoc work for Weierstrass equations.</p>",
        "id": 220883585,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608833349
    },
    {
        "content": "<p>Thanks. The problem solved with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">affine_plane_point</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the <code>P = {x := P.x, y := P.y}</code> can be proved by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"n\">affine_plane_point.ext_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 220883944,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608833783
    },
    {
        "content": "<p>now that you tagged it with <code>@[ext]</code> you can also use the <code>ext</code> tactic (instead of that <code>rw</code>)</p>",
        "id": 220884043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608833945
    },
    {
        "content": "<p><code>ext</code> stands for \"extensionality\", and it means something like \"if all the components of two things are equal, then the two things are equal\"</p>",
        "id": 220884060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608834001
    },
    {
        "content": "<p>I tried <code>ext</code> but it splits the goal into two subgoals. So currently I still prefer <code>rw</code></p>",
        "id": 220884158,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608834143
    },
    {
        "content": "<p>does <code>ext; refl</code> work?</p>",
        "id": 220884657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608834840
    },
    {
        "content": "<p>Yes. It works.</p>",
        "id": 220884820,
        "sender_full_name": "Jz Pan",
        "timestamp": 1608835070
    }
]