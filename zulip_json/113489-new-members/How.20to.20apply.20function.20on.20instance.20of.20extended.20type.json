[
    {
        "content": "<p>The last line doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">intpt</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pos_point</span> <span class=\"kd\">extends</span> <span class=\"n\">intpt</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pt</span><span class=\"o\">:</span> <span class=\"n\">intpt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pt.x</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">pos_point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">pos_point</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">f</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">pos_point</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">intpt</span>\n</code></pre></div>\n<p>but <code>p</code> is an instance of an extension of <code>pos_point</code>.  What's the right way to apply <code>f</code> inside of <code>g</code>?</p>",
        "id": 223410985,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611165807
    },
    {
        "content": "<p>Lean doesn't automatically cast things to super-structures for you -- you need to do <code>f p.to_intpt</code>.  The <code>extends</code> keyword's function is to define these \"projection functions\" and make it so you can use the super-structure's fields in the sub-structure.</p>",
        "id": 223411582,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611166044
    },
    {
        "content": "<p>(and <code>p.to_intpt</code> is syntactic sugar for <code>pos_point.to_intpt p</code>)</p>",
        "id": 223411768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611166120
    },
    {
        "content": "<p>Also possible to provide a <code>has_coe</code> instance.</p>",
        "id": 223411810,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611166135
    },
    {
        "content": "<p>Thanks, I forgot that <code>extends</code> auto-generates the casts.</p>",
        "id": 223412089,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611166273
    }
]