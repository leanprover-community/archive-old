[
    {
        "content": "<p>How do I ignore one of the possible cases when the goal of a proof is a disjunction?<br>\nE.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Let's say I know that I can prove the left case, and want to use tactics like <code>existsi</code> on it.<br>\nI can't do this currently because the <code>∨ (q 0)</code> is blocking it. How can I get rid of the <code>∨ (q 0)</code>?</p>\n<p>Note: I would like to avoid <code>suffices h : (∃ n, p n), from or.inl h</code>, since my actual <code>(∃ n, p n)</code> is pretty long.</p>",
        "id": 245596508,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1625993156
    },
    {
        "content": "<p><code>left</code> or <code>apply or.inl</code></p>",
        "id": 245596629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625993329
    }
]