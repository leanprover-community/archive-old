[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.direct_sum_module</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.simple</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.abelian</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">direct_sum</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">finI</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">simple</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i'</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Does someone see why <code>[mono f]</code> yields an error?</p>",
        "id": 218753906,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1607029309
    },
    {
        "content": "<p><code>f</code> would need to use the \"long arrow\" <code>\\hom</code>, but then I don't know what the right way to write the direct sums is.</p>",
        "id": 218756054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607030399
    },
    {
        "content": "<p>Hum, is there a way to convert modules as types with instance of [module A M] to modules as elements of the category of modules?</p>",
        "id": 218790084,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1607052113
    },
    {
        "content": "<p>If so I could just apply it to the direct sum</p>",
        "id": 218790130,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1607052133
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Module.of\">docs#Module.of</a></p>",
        "id": 218791686,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607054027
    },
    {
        "content": "<p>So <code>def V' := Module.of A (⨁ i, (⨁ i': fin (m i), V i))</code> give the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">Module</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">simple</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>However if I do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">V'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⨁</span> <span class=\"n\">i'</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>everything is fine. What is the problem here?</p>",
        "id": 218849210,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1607096588
    },
    {
        "content": "<p><code>#check [add_comm_group V']</code> is showing you information about a term of type <code>list Type</code></p>",
        "id": 218850115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607096953
    },
    {
        "content": "<p>You want <code>#check (infer_instance : add_comm_group V')</code></p>",
        "id": 218850171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607096973
    },
    {
        "content": "<p>Ie \"show me a thing that is a term of type <code>add_comm_group V'</code>\" instead of just \"show me the type <code>add_comm_group V'</code>\"</p>",
        "id": 218850235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607097003
    },
    {
        "content": "<p>(and <code>[]</code> in that context creates a list)</p>",
        "id": 218850287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607097014
    },
    {
        "content": "<p><code>#check (infer_instance : add_comm_group V')</code> doesn't yield errors but this doesn't solve my problem for converting to <code>Module A</code></p>",
        "id": 218850720,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1607097219
    }
]