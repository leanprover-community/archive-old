[
    {
        "content": "<p>Hello, I was trying to formalise my solution to this question in lean, but I'm getting an error saying the my result contains meta variables.</p>\n<p><a href=\"/user_uploads/3121/NpKPUg0_Ezuhw9BAE65pN-xW/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NpKPUg0_Ezuhw9BAE65pN-xW/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/NpKPUg0_Ezuhw9BAE65pN-xW/image.png\"></a></div><p>So far I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span>\n<span class=\"kn\">variables</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span>\n<span class=\"kn\">variable</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">axiom</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kn\">axiom</span> <span class=\"err\">Δ</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span>\n<span class=\"kn\">axiom</span> <span class=\"err\">Δ</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span>\n<span class=\"kn\">axiom</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"n\">Xcubed</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">h11</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h11</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span> <span class=\"c1\">-- Error Here</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I've highlighted where the error is occuring, the error message is</p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, result contains meta-variables\nstate:\nno goals\nstate:\n6 goals\nΔ : polynomial ℝ → polynomial ℝ\n⊢ Δ (X ^ 3) = 3 * X ^ 2\n\nΔ : polynomial ℝ → polynomial ℝ\n⊢ Type ?\n\nΔ : polynomial ℝ → polynomial ℝ\n⊢ comm_semiring ?m_1\n\nΔ : polynomial ℝ → polynomial ℝ\n⊢ has_pow (polynomial ?m_1) ℕ\n\nΔ : polynomial ℝ → polynomial ℝ\n⊢ has_mul (polynomial ?m_1)\n\nΔ : polynomial ℝ → polynomial ℝ\n⊢ has_pow (polynomial ?m_1) ℕ\n</pre></div>\n\n\n<p>I think I know why the error is occurring, as I didn't specify the type of X, so lean doesn't know that it has <code>pow</code> <code>mul</code>, etc. But I'm not sure how or where I could add the type annotations?</p>\n<p>Also, when I use the axioms, <code>rw \\Delta4</code> doesn't work, I need to specify <code>rw \\Delta4 \\Delta</code>. Making <code>\\Delta</code> a <code>constant</code> fixes this, but then it still doesn't fix the error message above. In this case, should <code>\\Delta</code> be <code>variable</code> or <code>constant</code>? Since I don't care what <code>Delta</code> is, as long as it satisfies those axioms.</p>",
        "id": 191428689,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584932039
    },
    {
        "content": "<p>those <code>axiom</code>s should be <code>variable</code>s. If you make them <code>axiom</code>s then they will implicitly quantify over all Delta, meaning that you are adding an axiom to lean that says that all functions are derivations. Since this is false, the axiom will make lean inconsistent</p>",
        "id": 191428856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584932343
    },
    {
        "content": "<p>And you probably want to <code>include</code> all these variables so that they will be available in tactic proofs.</p>",
        "id": 191428924,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584932477
    },
    {
        "content": "<p>Alright thank you, I've edited it with your suggestions. However, I still have an issue with the <code>results contains meta-variables</code>.</p>",
        "id": 191429984,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584934230
    },
    {
        "content": "<p>Can't help without looking at your code...</p>",
        "id": 191430060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584934413
    },
    {
        "content": "<p>Apologies. The error message is basically the same after changing the <code>axioms</code> to <code>variables</code>. I've also changed <code>f</code> <code>g</code> and <code>k</code> to be in <code>forall</code>s instead of <code>variables</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">include</span> <span class=\"err\">Δ</span>\n\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span>\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span>\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span>\n<span class=\"n\">include</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span> <span class=\"err\">Δ</span><span class=\"mi\">2</span> <span class=\"err\">Δ</span><span class=\"mi\">3</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span>\n\n<span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"n\">Xcubed</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">h11</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h11</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span> <span class=\"c1\">-- ERROR HERE</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191430169,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584934579
    },
    {
        "content": "<p>Nevermind, I've figured it out. I needed to add the type annotation in the inner <code>have</code> statement, as the <code>X</code> in the inner statement is different to the one in the theorem statement.</p>",
        "id": 191430235,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584934698
    },
    {
        "content": "<p>you can prove <code>h1</code> <code>by ring</code></p>",
        "id": 191430314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584934902
    },
    {
        "content": "<p>Alright, Thanks!</p>",
        "id": 191430567,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584935344
    },
    {
        "content": "<p>Did you try <code>recover</code>?</p>\n<p>This is a great question for Lean!</p>",
        "id": 191437728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584947230
    },
    {
        "content": "<p>I think you might be better off proving <code>lemma Δ_one : Δ 1 = 0</code> first, and then <code>lemma ΔX_pow_succ (n : ℕ) : Δ (X ^ (n + 1)) = (n + 1) * X ^ n</code></p>",
        "id": 191439857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584949500
    },
    {
        "content": "<p>I'm sorry, but I'm not sure what you mean by using <code>recover</code>.</p>",
        "id": 191440006,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949641
    },
    {
        "content": "<p>I've already proved that <code>\\Delta c = 0</code> for all <code>c</code>.</p>",
        "id": 191440011,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949645
    },
    {
        "content": "<p>I've already proved that <code>\\Delta c = 0</code> for all <code>c</code>.</p>",
        "id": 191440016,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949651
    },
    {
        "content": "<p>I'm sorry, but I'm not sure what you mean by using <code>recover</code>.</p>",
        "id": 191440017,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949651
    },
    {
        "content": "<p>And I did prove the general case of <code>X^n</code>, although I used <code>X^n</code> and not <code>X^(n+1)</code>, which had an interesting base case</p>",
        "id": 191440105,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949704
    },
    {
        "content": "<p>Oh, <code>recover</code> was when your goal contained metavariables.</p>",
        "id": 191440120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584949708
    },
    {
        "content": "<p>Ah. I see</p>",
        "id": 191440127,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949717
    },
    {
        "content": "<p>The problem with <code>X^n</code> directly is that when n=1 the inductive hypothesis involves 0 - 1 so has to be dealt with as a special case.</p>",
        "id": 191440158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584949747
    },
    {
        "content": "<p>Yeah, when I was doing this question for STEP prep I thought it would be interesting to do in lean, as the steps revolved around these 4 rules. Now that no one even knows what's gonna happen with A Levels/STEP I had a bit of free time so I thought I'd give it a shot in Lean.</p>",
        "id": 191440281,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949840
    },
    {
        "content": "<p>My son is in the same position -- sitting on a Cambridge offer with no idea what's going to happen next.</p>",
        "id": 191440307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584949872
    },
    {
        "content": "<p>That makes sense, I did it on paper first and tried a direct translation. In retrospect <code>X^(n+1)</code> makes more sense. I'm gonna refactor it.</p>",
        "id": 191440312,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949876
    },
    {
        "content": "<p>Yeah, Cambridge sent out an email like hours before the Government announcement, which wasn't that helpful.</p>\n<p>(Not that any of my other Universities seem to know what is happening, do you know anything about Imperial?)</p>",
        "id": 191440393,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584949939
    },
    {
        "content": "<p>No decisions have been made yet.</p>",
        "id": 191440417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584949972
    },
    {
        "content": "<p>Alright. Just that they haven't said anything since January, which was slightly worrying.</p>",
        "id": 191440466,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584950016
    },
    {
        "content": "<p>Thank you very much for all of your help</p>",
        "id": 191440477,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584950026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"bp\">_</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- the standard trick</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">Δ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"err\">Δ</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">add_left_eq_self</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"k\">begin</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"n\">X_pow_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191442595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584951455
    },
    {
        "content": "<p>It helps a lot knowing what <code>ring</code> can and cannot do.</p>",
        "id": 191442980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584951758
    },
    {
        "content": "<p>Again, thank you very much.</p>\n<p>This (once again) reminds me I should probably read TPIL. <code>show</code> is nicer than what I've been doing, which is <code>have</code> then <code>rw</code>, which clutters up my local context a lot, and I end up with a lot of local hypotheses which are only used once.</p>\n<p>For the final part of the question, the proof that <code>\\Delta f = df/dx</code> for all polynomial <code>f</code>, I did it (on paper) by arguing that it's true for a polynomial of degree 1 (and 0), and then using induction, assuming that it is true for a polynomial of degree <code>n</code> then showing that it's true for a polynomial of degree <code>n+1</code>, therefore it is true for all polynomials. I've tried looking in <code>data.polynomial</code>, but I don't think I've seen this functionality in there. So I might have to do it another way.</p>\n<p>I'm gonna look <code>ring</code> (and probably what a ring is first).</p>",
        "id": 191443660,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584952260
    },
    {
        "content": "<p>This is just induction on natural numbers</p>",
        "id": 191445632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584953688
    },
    {
        "content": "<p>I'm pretty sure there is a <code>degree</code> function on polynomials</p>",
        "id": 191445654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584953701
    },
    {
        "content": "<p>The question I have about this problem is, do we have the definition of the derivative of a polynomial yet? Do we know it is a polynomial? I'm not sure how you intend to write the theorem statement</p>",
        "id": 191445784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584953778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20failed.2C.20result.20contains.20meta-variables/near/191445654\" title=\"#narrow/stream/113489-new-members/topic/tactic.20failed.2C.20result.20contains.20meta-variables/near/191445654\">said</a>:</p>\n<blockquote>\n<p>I'm pretty sure there is a <code>degree</code> function on polynomials</p>\n</blockquote>\n<p>Yes, and there is also <code>nat_degree</code> which is a natural number. (<code>degree 0</code> is not natural)</p>",
        "id": 191446014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584953935
    },
    {
        "content": "<p>So induction on <code>degree p</code> where <code>p</code> is the polynomial? The <code>degree</code> function returns an <code>option nat</code> though, so I'll have to look at that further.</p>\n<p>I haven't written it yet, but there is a <code>polynomial.derivative</code> function, so I think it'll just be <code>forall (p : polynomial R), derivative p = \\Delta p</code>.</p>",
        "id": 191446029,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584953943
    },
    {
        "content": "<p>We have the formal derivative of a polynomial, and also a proof that as a function it coincides with the analytical derivative (if you work over a normed field or something)</p>",
        "id": 191446077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584953974
    },
    {
        "content": "<p>nice</p>",
        "id": 191446104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584953993
    },
    {
        "content": "<p>There is a function <code>polynomial.induction_on</code> that is designed precisely for this kind of induction. You can for instance have a look at <code>analysis/calculus/deriv</code>, line 1116.</p>",
        "id": 191448394,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1584955587
    },
    {
        "content": "<p>Ok. Thank you all very much. I'll give that a shot when I have some more time to look at this.</p>",
        "id": 191449291,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584956212
    },
    {
        "content": "<p>I've had some free time just then and I tried Kevin's solution from above. However when i pasted it into lean I got a <code>(deterministic) timeout</code>. Seems like the <code>ring</code>s are taking too long. I doubt my laptop is too slow, but that is a possibility.</p>\n<p>Any suggestions to how I can fix this?</p>",
        "id": 191461493,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584963806
    },
    {
        "content": "<p><code>ring</code> performs very fast on almost all not-contrived examples, so that's not likely to be the problem</p>",
        "id": 191461621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584963874
    },
    {
        "content": "<p>it could be typeclass inference or something else</p>",
        "id": 191461651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584963892
    },
    {
        "content": "<p>code plz</p>",
        "id": 191461659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584963898
    },
    {
        "content": "<p>Minimum Working Example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n       <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">include</span> <span class=\"err\">Δ</span>\n\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span>\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span>\n<span class=\"kn\">variable</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"err\">Δ</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span>\n<span class=\"n\">include</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span> <span class=\"err\">Δ</span><span class=\"mi\">2</span> <span class=\"err\">Δ</span><span class=\"mi\">3</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span>\n\n<span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"n\">Xn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The lemma is just the one Kevin posted above, so it probably worked on his machine.</p>",
        "id": 191461833,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584964031
    },
    {
        "content": "<p>It might be of use: <code>#eval lean.version</code> is <code>(3, (6, 1))</code>, <code>mathlib</code> is <code>mathlib = {git = \"https://github.com/leanprover-community/mathlib\", rev = \"093ac77ac9d27ce83ebf4e76ca5bd9b3eaebedaa\"}</code></p>",
        "id": 191461960,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584964123
    },
    {
        "content": "<p>The lemma checks almost immediately if I comment out the <code>ring</code> in the inductive case (the one at the end of the lemma)</p>",
        "id": 191462036,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584964193
    },
    {
        "content": "<p>The goal you gave to <code>ring</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>which is not an equality that is valid from the axioms of rings alone (because of the <code>C 1</code>)</p>",
        "id": 191462672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584964620
    },
    {
        "content": "<p>I think <code>ring</code> is probably taking forever because it does some processing to see if different looking expressions are defeq, and it is unfolding <code>C 1</code></p>",
        "id": 191462932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584964799
    },
    {
        "content": "<p>IIRC there is an option to disable that, but then it will just fail in this case</p>",
        "id": 191463010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584964823
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"n\">Xn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">C_1</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191463078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584964887
    },
    {
        "content": "<p>Huh... Alright. (I didn't write this). </p>\n<p>Adding <code>rw (show C (1:ℝ) = 1, by simp),</code> before <code>ring</code> fixed this.</p>\n<p>Thank you very much.</p>",
        "id": 191463083,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584964895
    },
    {
        "content": "<p>Alternatively you can probably use <code>simp</code> instead of <code>rw</code> since half of those equations are simp lemmas</p>",
        "id": 191463158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584964927
    },
    {
        "content": "<p>I see. I thought I saw somewhere that it's best to only use <code>simp</code> as the last tactic in a proof. That's why I didn't use it there.</p>",
        "id": 191463247,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584965012
    },
    {
        "content": "<p>That's right</p>",
        "id": 191463276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584965040
    },
    {
        "content": "<p>But <code>simp only</code> is fine</p>",
        "id": 191463319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584965047
    },
    {
        "content": "<p>Write <code>squeeze_simp</code> to get some help</p>",
        "id": 191463331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584965061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"err\">Δ</span><span class=\"n\">Xn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- base case</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"err\">Δ</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"err\">Δ</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191463340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584965070
    },
    {
        "content": "<p>using <code>simp</code> before a tactic that doesn't care too much about the shape of the input, like <code>ring</code>, is okay</p>",
        "id": 191463389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584965118
    },
    {
        "content": "<p>Ok. Thank you.</p>",
        "id": 191463483,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584965164
    },
    {
        "content": "<p>Another question, when I try to <code>rw ΔXn</code>, it doesn't work. But <code>rw ΔXn Δ</code> works. But then it puts all of <code>Δ1 Δ2 Δ3 Δ4</code> as new goals. Why? It's easy to solve (<code>repeat {assumption}</code>), but I'd still like to know why this is the case.</p>",
        "id": 191465258,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584966260
    },
    {
        "content": "<p>Because you used variables</p>",
        "id": 191470949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969414
    },
    {
        "content": "<p>The theorems you're proving are \"if Delta satisfies all these axioms then...\" and the proofs are hence all functions which demand proofs of all the axioms as input</p>",
        "id": 191471059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969474
    },
    {
        "content": "<p>One way around this would probably be to make some sort of structure to carry the variables around in</p>",
        "id": 191471211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969530
    },
    {
        "content": "<p>You can probably also use <code>parameters</code> but it doesn't take much to stumble on places where they don't work very well</p>",
        "id": 191471417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584969628
    },
    {
        "content": "<p>If you used parameters you would probably be able to avoid this issue in this one particular lean file, but if someone were to import your file because they wanted to use your work, the extra assumptions would be back by default</p>",
        "id": 191471600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969726
    },
    {
        "content": "<p>And the user could probably try to <code>include</code> them but then they have to remember to <code>exclude</code> them later. This set up happens very little in mathlib</p>",
        "id": 191471674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969778
    },
    {
        "content": "<p>I think that's what you want in this case though. There are two or three intermediate lemmas and you don't want to refer to the assumptions since they are fixed, but once you reach the goal, you discharge everything and it becomes a regular theorem with a bunch of hypotheses</p>",
        "id": 191471735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584969820
    },
    {
        "content": "<p>Here's how it would work with structures. You could define delta-structure on a ring R to be a function called Delta from polynomial R to polynomial R which satisfied the axioms. Just like the definition of a group in the group theory game.</p>",
        "id": 191471856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969882
    },
    {
        "content": "<p>I think it has a name, it's called a derivation</p>",
        "id": 191471878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584969900
    },
    {
        "content": "<p>And then you want to prove that if Delta is any delta-structure then the underlying map Delta.to_fun must agree with differentiation</p>",
        "id": 191472032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969968
    },
    {
        "content": "<p>A general derivation goes from R to another ring A and there is no Delta 1 axiom</p>",
        "id": 191472177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584970053
    },
    {
        "content": "<p>The advantage of the structure approach is that you have easy access to the axioms: Delta.map_add is Delta2 for the function Delta.to_fun for example</p>",
        "id": 191472348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584970135
    },
    {
        "content": "<p>Delta4 will be called Delta.map_mul</p>",
        "id": 191472384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584970153
    },
    {
        "content": "<p>And someone better at knowing Lean's naming convention can figure out what Delta3 is called</p>",
        "id": 191472517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584970206
    },
    {
        "content": "<p>something with <code>smul</code>?</p>",
        "id": 191472551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584970227
    },
    {
        "content": "<p>Oh is it not in canonical form??</p>",
        "id": 191473023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584970470
    },
    {
        "content": "<p>I understand this canonical form/naming convention far worse than I would like to</p>",
        "id": 191473129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584970505
    },
    {
        "content": "<p>No, I think it's fine to write <code>C k * p</code> instead of <code>k \\bu p</code> since it's an algebra</p>",
        "id": 191474127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584970981
    },
    {
        "content": "<p>I just meant that something like <code>map_smul</code> could be used for the name</p>",
        "id": 191474167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584971002
    },
    {
        "content": "<p>but since it isn't written with <code>\\bu</code> that's a bit of a lie, so perhaps <code>map_C_mul</code> is better</p>",
        "id": 191474189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584971026
    },
    {
        "content": "<p>The correct theorem from the point of view of derivations is that if we have a structure satisfying the last three axioms then there exists a unique polynomial g such that Delta (f) = g*f', and that g can be taken to be Delta(X)</p>",
        "id": 191475341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584971561
    },
    {
        "content": "<p>This has the original question as a special case</p>",
        "id": 191475374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584971578
    },
    {
        "content": "<p>Do we have a theory of derivations in Lean already? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 191475499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584971641
    },
    {
        "content": "<p>I think it would be quite fun to prove the universal property of derivations in general.</p>",
        "id": 191475676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584971713
    },
    {
        "content": "<p>pretty sure we don't</p>",
        "id": 191476302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584971982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> so there's your homework while your teachers go through all the people in your year awarding them A-levels. I wonder if they'll do it anonymously?</p>",
        "id": 191476679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584972155
    },
    {
        "content": "<p>Feel free to ask if you need help</p>",
        "id": 191476701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584972165
    },
    {
        "content": "<p>But let's make a new thread because this one has a silly name. It can go in #maths</p>",
        "id": 191476740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584972185
    },
    {
        "content": "<p>I had a meeting with my teachers earlier, and as I'm doing International A Levels, apparently my exams are still going ahead... It's just STEP that's a maybe...</p>\n<p>Apparently the exam boards think that it's safe to go ahead (even though IB has cancelled for everyone as well).</p>",
        "id": 191476978,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584972300
    },
    {
        "content": "<p>So I guess I still have to revise...</p>",
        "id": 191477020,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584972323
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191477234,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584972410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/tactic.20failed.2C.20result.20contains.20meta-variables/near/191475499\" title=\"#narrow/stream/113489-new-members/topic/tactic.20failed.2C.20result.20contains.20meta-variables/near/191475499\">said</a>:</p>\n<blockquote>\n<p>Do we have a theory of derivations in Lean already? <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> ?</p>\n</blockquote>\n<p>Not yet, but <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> looked into it at some point, I htink.</p>",
        "id": 191477892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584972694
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/derivation/near/170730598\" title=\"#narrow/stream/116395-maths/topic/derivation/near/170730598\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/derivation/near/170730598</a></p>",
        "id": 191478072,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584972772
    },
    {
        "content": "<p>Has enough API been extracted?</p>",
        "id": 191478600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584973053
    },
    {
        "content": "<p>What are you thinking of?</p>",
        "id": 191478634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584973072
    },
    {
        "content": "<p>Did we locate the characteristic predicate yet?</p>",
        "id": 191478701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584973088
    },
    {
        "content": "<p>I think this has something to do with transfer.</p>",
        "id": 191478765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584973121
    },
    {
        "content": "<p>No, I don't think much happened so far.</p>",
        "id": 191478825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584973150
    },
    {
        "content": "<p>Also, didn't we switch to calling it the \"characteristic predicate\"?</p>",
        "id": 191478857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584973166
    },
    {
        "content": "<p>Somehow the bare minimum API is the universal property, and then there is the problem of isolating the characteristic predicate and proving that a module satisfies the characteristic predicate iff it's the differentials</p>",
        "id": 191478976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584973208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">delta_structure</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_X&#39;</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_C_mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">delta_structure</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_X</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"err\">Δ</span><span class=\"bp\">.</span><span class=\"n\">map_X&#39;</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">},</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"err\">Δ</span><span class=\"bp\">.</span><span class=\"n\">map_add&#39;</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_C_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"err\">Δ</span><span class=\"bp\">.</span><span class=\"n\">map_C_mul&#39;</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"err\">Δ</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"err\">Δ</span><span class=\"bp\">.</span><span class=\"n\">map_mul&#39;</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">delta_structure</span>\n</pre></div>\n\n\n<p>What do you think of my structure?</p>",
        "id": 191611207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585057678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> now has a <a href=\"https://github.com/shingtaklam1324/step3-06-q8-lean\" title=\"https://github.com/shingtaklam1324/step3-06-q8-lean\">github repo</a> where this question is solved using derivations on a polynomial ring. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> at the time of writing I see that he only has one branch, which is <code>lean-3.4.2</code>. Is this something to do with the tooling? Shing -- did you use <code>leanproject</code> to make this repo?</p>",
        "id": 192011188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585313194
    },
    {
        "content": "<p>the linter doesn't like the <code>simp</code>s above but now I have a much better understanding of what is going on there.</p>",
        "id": 192011475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585313425
    },
    {
        "content": "<p>Yes I did use <code>leanproject</code>. Just to check I made a new project.</p>\n<div class=\"codehilite\"><pre><span></span>$ leanproject new test\n&gt; mkdir -p test\n&gt; cd test\n&gt; mkdir src\n&gt; git init -q\n&gt; git checkout -b lean-3.4.2\nSwitched to a new branch &#39;lean-3.4.2&#39;\nconfiguring test 0.1\nAdding mathlib\n</pre></div>\n\n\n<p>I'm kinda confused now as that shouldn't be happening... </p>\n<p>Looking at the repo at <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/96734b3f6e7b1b6d69f86e18f4fee9c4c3e8bfff/mathlibtools/lib.py#L435\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/96734b3f6e7b1b6d69f86e18f4fee9c4c3e8bfff/mathlibtools/lib.py#L435\">https://github.com/leanprover-community/mathlib-tools/blob/96734b3f6e7b1b6d69f86e18f4fee9c4c3e8bfff/mathlibtools/lib.py#L435</a> the branch should be called <code>master</code>.</p>",
        "id": 192012279,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585313897
    },
    {
        "content": "<p>For what it's worth</p>\n<div class=\"codehilite\"><pre><span></span>$ pip list | grep mathlibtools\nmathlibtools                       0.0.4\n</pre></div>",
        "id": 192012400,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585313965
    },
    {
        "content": "<p>The tooling is brand new, much better than what we had before, but still contains a few minor glitches. It has already transformed my workflow though.</p>",
        "id": 192012412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585313970
    },
    {
        "content": "<p>Yeah, that number is an indication of how new it is :-)</p>",
        "id": 192012429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585313980
    },
    {
        "content": "<p><code>leanproject</code> still uses leanpkg to create new projects. And leanpkg uses the default elan toolchain. We should change that, but that requires finding time to do it.</p>",
        "id": 192017201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585316106
    },
    {
        "content": "<p>Also note that every complain or feature request about leanproject that is expressed here but not in a GitHub issue currently falls into a black hole.</p>",
        "id": 192017340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585316170
    },
    {
        "content": "<p>Mhm... I found</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib-tools/issues/26\" title=\"https://github.com/leanprover-community/mathlib-tools/issues/26\">https://github.com/leanprover-community/mathlib-tools/issues/26</a></p>\n<p>and </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib-tools/commit/5768b8fdf7de059eb8d4d663bd42fc8f9809190c\" title=\"https://github.com/leanprover-community/mathlib-tools/commit/5768b8fdf7de059eb8d4d663bd42fc8f9809190c\">https://github.com/leanprover-community/mathlib-tools/commit/5768b8fdf7de059eb8d4d663bd42fc8f9809190c</a></p>\n<p>So this should be fixed...</p>",
        "id": 192023908,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585318956
    },
    {
        "content": "<p>The lean-3.4.2 exists in your repository, but the master branch also exist. Did you need to manually merge one branch into the other?</p>",
        "id": 192025409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585319553
    },
    {
        "content": "<p>That was me renaming the branch locally from lean-3.4.2 to master then pushing it.</p>",
        "id": 192026054,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585319803
    },
    {
        "content": "<p>lean-3.4.2 now only exists on github but not on my local copy. I can probably delete it.</p>",
        "id": 192026198,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585319870
    },
    {
        "content": "<p>I'm sorry I can't reproduce this locally.</p>\n<div class=\"codehilite\"><pre><span></span>$ leanproject new test\n$ git a leanpkg.toml\n$ git commit\n$ git branch\n* master\n</pre></div>",
        "id": 192028029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585320607
    },
    {
        "content": "<p>No problem. I have a few ideas on what may have caused this, I'll give it a go tomorrow. If I find anything then I'll report back.</p>",
        "id": 192028424,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585320771
    }
]