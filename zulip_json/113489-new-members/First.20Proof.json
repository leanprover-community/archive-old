[
    {
        "content": "<p>In the first proof document, I don't understand the following content. Could anyone please give me some detailed explanations (like the functions of the commands, the constructions of the commands)?<br>\n<a href=\"/user_uploads/3121/ZKF2bW2HmVnKiZsHPn4KoQhl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZKF2bW2HmVnKiZsHPn4KoQhl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ZKF2bW2HmVnKiZsHPn4KoQhl/image.png\"></a></div>",
        "id": 239936451,
        "sender_full_name": "Lu-Ming Zhang",
        "timestamp": 1621760544
    },
    {
        "content": "<p>Lean is both a tool for constructing mathematical proofs, and a programming language. Those lines say roughly \"we're only going to do mathematics (with classical logic), so ignore some issues that are only relevant for programming\"</p>",
        "id": 239939744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1621764380
    },
    {
        "content": "<p>What does \"noncomputable theory\" mean? What is the function of that?</p>",
        "id": 239950824,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621775829
    },
    {
        "content": "<p>There's some info in these two pages I think that you may find interesting:</p>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html</a><br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions</a></p>",
        "id": 239951876,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621776805
    },
    {
        "content": "<p>(the first on computability, which <code>noncomputable theory</code> affects, and the second on constructive vs. classical logic, which <code>open_locale classical</code> affects)</p>",
        "id": 239951889,
        "sender_full_name": "Julian Berman",
        "timestamp": 1621776839
    },
    {
        "content": "<p>It means that you can give a definition of <code>foo</code> without giving a true algorithm to compute <code>foo</code>. For example, for any positive integer <code>k</code>Â¸we know that there is an integer <code>f k</code> such that all natural numbers can be written using at most  <code>f k</code> powers (for example all numbers are the sum of 4 squares).  This <code>f</code> is, for a mathematician , a perfectly defined function (take <code>f k</code> minimal if you want). But there is no algorithm to compute it, at least not in this definition</p>",
        "id": 239951981,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1621776887
    },
    {
        "content": "<p>Actually it's a tricky theorem that there <em>is</em> an algorithm to compute Riccardo's f, because for k&gt;=3 it turns out that basically the hardest number to write as a sum of k'th powers is the number just less than the largest multiple of 2^k which is less than 3^k (e.g. 23 is hard to write as a sum of natural cubes, you'll need 9, and f(3)=9). This of course doesn't change the fact that one wants to be able to reason about the function without proving the hard theorem I just mentioned above. No algorithm is known to compute the \"all sufficiently large n\" version of Riccardo's function (which is actually <a href=\"https://en.wikipedia.org/wiki/Waring%27s_problem\">Waring's function</a> -- all sufficiently large naturals are definitely the sum of 7 natural cubes, it is conjectured that all n&gt;7373170279850 are the sum of 4 natural cubes, but whether the \"magic number\" for cubes is 4, 5, 6 or 7 is unknown. Andrej Bauer pointed out to me that you can make this function computable, but it then maps to a target space which is not computably isomorphic to the naturals (but which is classically isomorphic to them).</p>",
        "id": 239956927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621782018
    }
]