[
    {
        "content": "<p>Hi y'all. Sorry to bother again. I'm having trouble working with the empty set. Specifically, I'd like to prove that a set is not empty whenever I can produce a concrete element of it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>but so far, I haven't been successful. What can I do here?</p>",
        "id": 150729616,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543770566
    },
    {
        "content": "<p><code>set.ne_empty_of_mem</code> will probably be helpful!</p>",
        "id": 150729661,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543770621
    },
    {
        "content": "<p>You'll have to import <code>data.set.basic</code> from mathlib.</p>",
        "id": 150729662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543770640
    },
    {
        "content": "<p>Thanks! I will try it.</p>",
        "id": 150729664,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543770645
    },
    {
        "content": "<p>no import needed :)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">H</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 150729714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543770744
    },
    {
        "content": "<p>...says the person with over 1 year's Lean experience ;-)</p>",
        "id": 150729721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770794
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ne_empty_iff_exists_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- refl doesn&#39;t work!</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150729723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770823
    },
    {
        "content": "<p><code>refl</code> is really bad at set membership.</p>",
        "id": 150729730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770842
    },
    {
        "content": "<p><code>example (a : ℕ) : a ∈ {x : ℕ | x = a} := by refl -- fails </code></p>",
        "id": 150729783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543770937
    },
    {
        "content": "<p>I wonder whether we could fool it into working somehow</p>",
        "id": 150729785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543770940
    },
    {
        "content": "<p>Hmmm I don't seem to have the mathlib tho.. <del>can I install it using elan?</del> I have found a way to do it ^^</p>",
        "id": 150729786,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543770942
    },
    {
        "content": "<p>basically by adding what Kevin just wrote as a <code>relfexivity</code> lemma</p>",
        "id": 150729787,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543770953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143658\">@Marcus Klaas</span> mathlib is great. It's not just for mathematicians. It has a bunch of useful tactics in, and a whole host of useful data structures. If you work with Lean projects (as I do -- all my files, even scratch files, are within a Lean project) then you can just make mathlib a dependency for that project and then <code>leanpkg upgrade</code> will download mathlib.</p>",
        "id": 150729838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543771057
    }
]