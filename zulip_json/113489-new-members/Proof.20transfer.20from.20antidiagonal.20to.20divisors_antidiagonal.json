[
    {
        "content": "<p>In the library we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.nat.sum_antidiagonal_eq_sum_range_succ\">docs#finset.nat.sum_antidiagonal_eq_sum_range_succ</a> and I need to use the analogous statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">div_antidiagonal_eq_sum_divisors</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">X.divisors_antidiagonal.sum</span> <span class=\"n\">func</span> <span class=\"bp\">=</span>\n  <span class=\"n\">finset.sum</span> <span class=\"n\">X.divisors</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>I was hoping I could basically copy the proof over, swapping <code>n-k</code> for <code>X / x</code>, but the proof just looks like black magic.  I tried printing it and looked to find the important bits, but it refused to typecheck even after I cleaned it up.  I tried rewriting it in terms of a product instead of a sum like for the one we have, but it didn't do anything.  <br>\nI was wondering what I should try next.</p>",
        "id": 266597753,
        "sender_full_name": "Sigma",
        "timestamp": 1641104409
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.nat_antidiagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.divisors</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">div_antidiagonal_eq_sum_divisors</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">X.divisors_antidiagonal.sum</span> <span class=\"n\">func</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">X.divisors</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"n\">finset.sum_map</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prod.mk.inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>seems to lead to a pretty sensible proof state, and the proof is basically copy-paste; what are you confused about? glad to try and explain if i get it myself ^^</p>",
        "id": 266598507,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641105757
    }
]