[
    {
        "content": "<p>On another lean saturday afternoon, I continued looked forther into formalizing another basic lean maths. This time I want to compute sub-matrixes for ring_theory.matrix.</p>\n<p>This is what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rsubmx</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">),</span>\n<span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span> <span class=\"bp\">+</span> <span class=\"n\">n_left</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y_l</span> <span class=\"n\">y_r</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">offset</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y_r</span> <span class=\"bp\">+</span> <span class=\"n\">y_l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">add_nat</span> <span class=\"n\">j</span> <span class=\"n\">y_l</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">offset</span>\n</pre></div>\n\n\n<p>It compiles without flaws, but looks very messy. Two things I feel should still be changed are:<br>\n1) It would be nice if the function would not require m, n_right, n_left to be passed explicitly, but would instead automatically derive the relevant offsets.<br>\n2) I keep getting type errors due to a fin(x + y) being not equal to fin(y + x) when using it. It would be great if one could automatically convert between the two.</p>",
        "id": 134897036,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538257043
    },
    {
        "content": "<p>Feedback very much appreciated.</p>",
        "id": 134897038,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538257065
    },
    {
        "content": "<p>I think that I would have been tempted to move away from just adding an offset and would instead consider any increasing maps <code>fin m' -&gt; fin m</code> and <code>fin n' -&gt; fin n</code>. Isn't that what people usually look at -- all the m' x n' minors or something?</p>",
        "id": 134897446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538257943
    },
    {
        "content": "<p>I am not sure I understand what interface you have in mind.</p>",
        "id": 134898201,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538259763
    },
    {
        "content": "<p>For example, suppose I have a 5x5 matrix and want to extract the 3x3 matrix consisting of rows 1,2,4 and columns 1,3,4.</p>",
        "id": 134898247,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538259871
    },
    {
        "content": "<p>Right.</p>",
        "id": 134898256,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538259936
    },
    {
        "content": "<p>I mean, it makes sense to have a more generic interface that computes a minor.</p>",
        "id": 134898258,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538259952
    },
    {
        "content": "<p>Such a functionality could even be the basis for this function, I assume.</p>",
        "id": 134898297,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538259982
    },
    {
        "content": "<p>Still, I feel that it would not completely replace this function as the interface for the special case I propose could be simpler, as it could just derive the sizes from the types.</p>",
        "id": 134898355,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538260181
    },
    {
        "content": "<p>More from a practical perspective, I am not sure how a general minorification interface should look like. Would I ask for two more parameters fin m -&gt; Prop and fin n -&gt; Prop, which evaluate to true if the specific column should be included?</p>",
        "id": 134898446,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538260325
    },
    {
        "content": "<p>Computing the necessary offsets seems a little involved. Not sure how this will effect performance.</p>",
        "id": 134898452,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538260370
    },
    {
        "content": "<p>I think the interface Kevin suggests is the following: to specify a general <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>m</mi><mo mathvariant=\"normal\">′</mo></msup><mo>×</mo><msup><mi>n</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">m' \\times n'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.835222em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mbin\">×</span><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> submatrix of an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.58333em;\"></span><span class=\"strut bottom\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">m</span><span class=\"mbin\">×</span><span class=\"mord mathit\">n</span></span></span></span> matrix, it is sufficient to provide two increasing maps, one of type <code>fin m' → fin m</code> and one of type <code>fin n' → fin n</code>. No need to compute any offsets, so far as I can tell; simply pull out the specified matrix entries using the two maps to grab the row and column indices.</p>",
        "id": 134898699,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538260944
    },
    {
        "content": "<p>And then the function you've already implemented could be a special case of this.</p>",
        "id": 134899303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538262305
    },
    {
        "content": "<p>Right.</p>",
        "id": 134910891,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538287809
    },
    {
        "content": "<p>Here what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">m&#39;</span> <span class=\"n\">n&#39;</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n&#39;</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">minormx</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"n\">m&#39;</span> <span class=\"n\">n&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">trans_col</span> <span class=\"n\">trans_row</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">trans_col</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trans_row</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rsubmx</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span> <span class=\"bp\">+</span> <span class=\"n\">n_left</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">minormx</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">add_nat</span> <span class=\"n\">j</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134910897,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538287840
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 134910905,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538287900
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 134910948,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538287933
    },
    {
        "content": "<p>I created a bunch of tests:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">rsubmx_test_join_fail</span><span class=\"o\">:</span>\n<span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rsubmx_test_split_const_ok</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rsubmx_test_split_const_fail</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rsubmx_test_split_param_ok</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rsubmx_test_split_param_fail</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n<p>Only if the fine type is split into a clear  \"+\" with the correct order of operands in the plus (the LHS operand must appear in the result type), this compiles. Automatic splitting or exploiting commutativity does not work.</p>\n<p>Here the associated error messages:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">A</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">A</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">rsubmx</span> <span class=\"n\">A</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">A</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 134911004,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538288110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , any idea how to make my tests independent of the order of fin? This seems to require lean foo I am not yet capable of.</p>",
        "id": 134911323,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538288873
    },
    {
        "content": "<p>Use Kevin's suggestion</p>",
        "id": 134911423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289070
    },
    {
        "content": "<p>You should avoid algebra inside types like the plague</p>",
        "id": 134911425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289082
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">minormx</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"n\">m&#39;</span> <span class=\"n\">n&#39;</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">trans_col</span> <span class=\"n\">trans_row</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">trans_col</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trans_row</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I tried to implement Kevin's suggestion.</p>",
        "id": 134911524,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538289287
    },
    {
        "content": "<p>I now try to implement ssreflects</p>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">|</span><span class=\"n\">r</span><span class=\"o\">]</span><span class=\"n\">submx</span> <span class=\"n\">A</span> <span class=\"o\">==</span> <span class=\"n\">the</span> <span class=\"k\">left</span><span class=\"o\">/</span><span class=\"k\">right</span> <span class=\"n\">submatrices</span> <span class=\"k\">of</span> <span class=\"n\">a</span> <span class=\"n\">row</span> <span class=\"n\">block</span> <span class=\"n\">matrix</span> <span class=\"n\">A</span><span class=\"o\">.</span>\n                   <span class=\"n\">Note</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"k\">of</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">&#39;</span><span class=\"n\">M_</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span><span class=\"o\">)</span> <span class=\"n\">indicates</span> <span class=\"n\">how</span> <span class=\"n\">A</span>\n                   <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"n\">decomposed</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>on top of it.</p>",
        "id": 134911533,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538289347
    },
    {
        "content": "<p>It seems a nice feature that they can split just based on the type sizes.</p>",
        "id": 134911571,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538289365
    },
    {
        "content": "<p>Are you saying the interface they use in coq is not a good interface for lean?</p>",
        "id": 134911578,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538289390
    },
    {
        "content": "<p>That will only work when <code>n1</code> and <code>n2</code> are explicitly given, and they also have to be numerals not variables for it to be useful</p>",
        "id": 134911625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289503
    },
    {
        "content": "<p>Do you have any examples of use of this notation in Coq?</p>",
        "id": 134911629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289545
    },
    {
        "content": "<blockquote>\n<p>Note that the type of A, 'M_(m, n1 + n2) indicates how A should be decomposed.</p>\n</blockquote>\n<p>This sounds to me like lean's behavior is consistent with coq's: You have to give an input of a matrix <code>matrix 5 (3 + 2)</code> rather than <code>matrix 5 5</code> to get the function to figure out <code>n1</code> and <code>n2</code></p>",
        "id": 134911682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289673
    },
    {
        "content": "<p>Sure, my guaussien elimination code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Fixpoint</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M_</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">→</span> <span class=\"k\">&#39;</span><span class=\"n\">M_m</span> <span class=\"err\">×</span> <span class=\"k\">&#39;</span><span class=\"n\">M_n</span> <span class=\"err\">×</span> <span class=\"kt\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"o\">_.+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">_.+</span><span class=\"mi\">1</span> <span class=\"err\">⇒</span> <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M_</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">_,</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">_)</span> <span class=\"err\">⇒</span>\n    <span class=\"k\">if</span> <span class=\"o\">[</span><span class=\"n\">pick</span> <span class=\"n\">ij</span> <span class=\"o\">|</span> <span class=\"n\">A</span> <span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"mi\">2</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"k\">is</span> <span class=\"n\">Some</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">A1</span> <span class=\"o\">:=</span> <span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ursubmx</span> <span class=\"n\">A1</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">^-</span><span class=\"mi\">1</span> <span class=\"o\">*:</span> <span class=\"n\">dlsubmx</span> <span class=\"n\">A1</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">(</span><span class=\"n\">drsubmx</span> <span class=\"n\">A1</span> <span class=\"o\">-</span> <span class=\"n\">v</span> <span class=\"err\">×</span><span class=\"n\">m</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"o\">(</span><span class=\"n\">xrow</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">xcol</span> <span class=\"n\">j</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">block_mx</span> <span class=\"n\">a</span><span class=\"o\">%:</span><span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"mi\">0</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"o\">.+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">%</span><span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">|</span> <span class=\"o\">_,</span> <span class=\"o\">_</span> <span class=\"err\">⇒</span> <span class=\"k\">fun</span> <span class=\"o\">_</span> <span class=\"err\">⇒</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">%:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">%</span><span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>it uses <code>dlsubmx</code> which again is defined as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">ulsubmx</span> <span class=\"o\">:=</span> <span class=\"n\">lsubmx</span> <span class=\"o\">(</span><span class=\"n\">usubmx</span> <span class=\"n\">A</span><span class=\"o\">).</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">ursubmx</span> <span class=\"o\">:=</span> <span class=\"n\">rsubmx</span> <span class=\"o\">(</span><span class=\"n\">usubmx</span> <span class=\"n\">A</span><span class=\"o\">).</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">dlsubmx</span> <span class=\"o\">:=</span> <span class=\"n\">lsubmx</span> <span class=\"o\">(</span><span class=\"n\">dsubmx</span> <span class=\"n\">A</span><span class=\"o\">).</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">drsubmx</span> <span class=\"o\">:=</span> <span class=\"n\">rsubmx</span> <span class=\"o\">(</span><span class=\"n\">dsubmx</span> <span class=\"n\">A</span><span class=\"o\">).</span>\n</pre></div>\n\n\n<p>which again uses</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Fact</span> <span class=\"n\">lsubmx_key</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span><span class=\"o\">.</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">lsubmx</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]_(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"err\">\\</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">lsubmx_key</span><span class=\"o\">]_(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">lshift</span> <span class=\"n\">n2</span> <span class=\"n\">j</span><span class=\"o\">).</span>\n\n<span class=\"kn\">Fact</span> <span class=\"n\">rsubmx_key</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span><span class=\"o\">.</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">rsubmx</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]_(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"err\">\\</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">rsubmx_key</span><span class=\"o\">]_(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">rshift</span> <span class=\"n\">n1</span> <span class=\"n\">j</span><span class=\"o\">).</span>\n\n<span class=\"kn\">Fact</span> <span class=\"n\">usubmx_key</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span><span class=\"o\">.</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">usubmx</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]_(</span><span class=\"n\">m1</span> <span class=\"o\">+</span> <span class=\"n\">m2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"err\">\\</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">usubmx_key</span><span class=\"o\">]_(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">lshift</span> <span class=\"n\">m2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Fact</span> <span class=\"n\">dsubmx_key</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span><span class=\"o\">.</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">dsubmx</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]_(</span><span class=\"n\">m1</span> <span class=\"o\">+</span> <span class=\"n\">m2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"err\">\\</span><span class=\"n\">matrix</span><span class=\"o\">[</span><span class=\"n\">dsubmx_key</span><span class=\"o\">]_(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">rshift</span> <span class=\"n\">m1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Lemma</span> <span class=\"n\">lshift_subproof</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">I_m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Lemma</span> <span class=\"n\">rshift_subproof</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">I_n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Definition</span> <span class=\"n\">lshift</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">I_m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Ordinal</span> <span class=\"o\">(</span><span class=\"n\">lshift_subproof</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">).</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">rshift</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">I_n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Ordinal</span> <span class=\"o\">(</span><span class=\"n\">rshift_subproof</span> <span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">).</span>\n</pre></div>",
        "id": 134911732,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538289759
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Note that the type of A, 'M_(m, n1 + n2) indicates how A should be decomposed.</p>\n</blockquote>\n<p>This sounds to me like lean's behavior is consistent with coq's: You have to give an input of a matrix <code>matrix 5 (3 + 2)</code> rather than <code>matrix 5 5</code> to get the function to figure out <code>n1</code> and <code>n2</code></p>\n</blockquote>\n<p>If that's as good as it gets that's fine. I just had hoped lean would be able to figure out that 5 can be split into 3 + 2. If this not the case, I need to do this manually. Is there a function that does this type splitting for me?</p>",
        "id": 134911822,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538289963
    },
    {
        "content": "<p>what is the type of <code>A1</code>?</p>",
        "id": 134911829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289968
    },
    {
        "content": "<p>or <code>xrow</code> and <code>xcol</code></p>",
        "id": 134911831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538289982
    },
    {
        "content": "<p>Lean can figure out that <code>5</code> is <code>3 + 2</code>, but it is ambiguous what to split it into</p>",
        "id": 134911835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538290019
    },
    {
        "content": "<p>I see.</p>",
        "id": 134911888,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290100
    },
    {
        "content": "<p>In my implementation in lean it is <code>A1 : matrix (fin (x + 1)) (fin (y + 1)) α</code></p>",
        "id": 134911942,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290222
    },
    {
        "content": "<p>So what I have today might already be enough.</p>",
        "id": 134911944,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290238
    },
    {
        "content": "<p>I learn that generalizing this further is not a good idea.</p>",
        "id": 134911946,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290247
    },
    {
        "content": "<p>Thanks! I leave it at this generality.</p>",
        "id": 134911948,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290259
    },
    {
        "content": "<p>Now I am only left with the problem of casting. I need the matrix to be of type  matrix (fin (1 + x)) (fin (1 + y)))</p>",
        "id": 134912144,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290707
    },
    {
        "content": "<p>I tried to type-cast using:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">A1&#39;</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">A1</span> <span class=\"k\">in</span>\n</pre></div>\n\n\n<p>but this just gives</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">_</span><span class=\"n\">let_match</span> <span class=\"n\">A1&#39;</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">A1&#39;</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 134912154,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290746
    },
    {
        "content": "<p>You said lean should be able to understand this.</p>",
        "id": 134912155,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290756
    },
    {
        "content": "<p>This is no ambiguity</p>",
        "id": 134912158,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290769
    },
    {
        "content": "<p>I just need to show that these two are equivalent types.</p>",
        "id": 134912207,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538290813
    },
    {
        "content": "<p>this is not ambiguous, but since <code>x</code> is not a numeral these aren't defeq</p>",
        "id": 134912270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538290950
    },
    {
        "content": "<p>How do the <code>xrow i 0 (xcol j 0 A)</code> functions work?</p>",
        "id": 134912321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291064
    },
    {
        "content": "<p>are you building a new row on <code>A</code> or taking a minor?</p>",
        "id": 134912324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291082
    },
    {
        "content": "<p>They just interchange rows. AFAIU they don;t thange the type.</p>",
        "id": 134912386,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291247
    },
    {
        "content": "<p>The fact that in coq <code>1+x = succ x</code> is definitional makes this translation more complicated, unless you reverse the <code>+</code> arguments in the minors function, or work from the bottom rather than the top of the matrix</p>",
        "id": 134912393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291275
    },
    {
        "content": "<p>In lean <code>x+1 = succ x</code> is definitional</p>",
        "id": 134912434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291301
    },
    {
        "content": "<p>My lean implementation is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">xrow</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">row1</span><span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">row2</span><span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">row1</span>\n         <span class=\"k\">then</span>\n           <span class=\"n\">A</span> <span class=\"n\">row2</span> <span class=\"n\">y</span>\n         <span class=\"k\">else</span>\n           <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">row2</span>\n             <span class=\"k\">then</span>\n               <span class=\"n\">A</span> <span class=\"n\">row1</span> <span class=\"n\">y</span>\n             <span class=\"k\">else</span>\n               <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 134912435,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291305
    },
    {
        "content": "<p>right, I see, that shouldn't be a problem</p>",
        "id": 134912437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291332
    },
    {
        "content": "<p>you are still using the code you posted above for <code>rsubmx</code>?</p>",
        "id": 134912448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291353
    },
    {
        "content": "<p>with <code>n_right + n_left</code> in the type I mean</p>",
        "id": 134912449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291363
    },
    {
        "content": "<p>Yes.</p>",
        "id": 134912451,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291385
    },
    {
        "content": "<p>I could move the zero columns/rows to position x+1 / y +1, then the types would work out.</p>",
        "id": 134912494,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291415
    },
    {
        "content": "<p>But then the result matrices are layed out in a non-standard way.</p>",
        "id": 134912497,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291446
    },
    {
        "content": "<p>so since <code>A</code> has type <code>(n+1) (n+1)</code> you can naturally strip off the left/top end</p>",
        "id": 134912499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291446
    },
    {
        "content": "<p>Right.</p>",
        "id": 134912500,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291453
    },
    {
        "content": "<p>That's easy. Just that most textbook implementations of gaussian elimination build upper triangular matrices.</p>",
        "id": 134912509,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291482
    },
    {
        "content": "<p>So the zeros should be at the lower left corner.</p>",
        "id": 134912510,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291500
    },
    {
        "content": "<p>I think you can still build upper triangular if you also transpose the rows and columns</p>",
        "id": 134912551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291525
    },
    {
        "content": "<p>Sure, I could probably hack my way though this.</p>",
        "id": 134912554,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291540
    },
    {
        "content": "<p>Just don't feel this is nice.</p>",
        "id": 134912559,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291552
    },
    {
        "content": "<p>But I think that having reversed arguments to the minors function is also fine</p>",
        "id": 134912560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291554
    },
    {
        "content": "<p>Why again does this work in coq?</p>",
        "id": 134912562,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291565
    },
    {
        "content": "<p>because they defined addition by recursion on the first argument rather than the second</p>",
        "id": 134912568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291586
    },
    {
        "content": "<p>Personally I prefer lean's definition (i.e. <code>x + succ y = succ (x + y)</code>)</p>",
        "id": 134912573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291619
    },
    {
        "content": "<p>They do?</p>",
        "id": 134912575,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291635
    },
    {
        "content": "<p>I feel they also have this cast in their code.</p>",
        "id": 134912607,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> <span class=\"o\">|</span> <span class=\"o\">_.+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">_.+</span><span class=\"mi\">1</span> <span class=\"err\">⇒</span> <span class=\"k\">fun</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">M_</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">_,</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"o\">_)</span> <span class=\"err\">⇒</span>\n</pre></div>",
        "id": 134912616,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291653
    },
    {
        "content": "<p>That's why in the induction you notice the type is <code>1+_</code> instead of <code>_ +1</code></p>",
        "id": 134912619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291659
    },
    {
        "content": "<p>The <code>.+</code> is suspicious</p>",
        "id": 134912630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291706
    },
    {
        "content": "<p>do you know what it means?</p>",
        "id": 134912633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Notation</span> <span class=\"s2\">&quot;n .+1&quot;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">succn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">at</span> <span class=\"n\">level</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">left</span> <span class=\"n\">associativity</span><span class=\"o\">,</span>\n  <span class=\"n\">format</span> <span class=\"s2\">&quot;n .+1&quot;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat_scope</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 134912635,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291753
    },
    {
        "content": "<p>heh</p>",
        "id": 134912674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291763
    },
    {
        "content": "<p>So they define notation to allow RHS addition of +1?</p>",
        "id": 134912678,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291774
    },
    {
        "content": "<p>so <code>1+n = n .+1</code></p>",
        "id": 134912679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291775
    },
    {
        "content": "<p>looks like it</p>",
        "id": 134912682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291797
    },
    {
        "content": "<p>This stuff is all crazy!</p>",
        "id": 134912683,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291802
    },
    {
        "content": "<p>Now based on the way nat is defined I cannot write my algorithm the way I want it.</p>",
        "id": 134912686,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291823
    },
    {
        "content": "<p>:(</p>",
        "id": 134912692,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538291832
    },
    {
        "content": "<p>You can also write <code>fin.add_nat</code> with an appropriate type</p>",
        "id": 134912693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291850
    },
    {
        "content": "<p>You can also <code>cast</code> to get <code>A1'</code> the way you were attempting, but this will cause more problems later on</p>",
        "id": 134912743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538291945
    },
    {
        "content": "<p>OK, I will try to write add_nat after breakfast.</p>\n<p>There is already</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_nat</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_lt_add_right</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 134912799,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292024
    },
    {
        "content": "<p>Seems trivial to write (assuming one knows what to write)</p>",
        "id": 134912800,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292038
    },
    {
        "content": "<p>Now, I am not sure what I actually want here.</p>",
        "id": 134912806,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292068
    },
    {
        "content": "<p>In some way I just want to cast from n + 1 to 1 + n.</p>",
        "id": 134912807,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292089
    },
    {
        "content": "<p>Or pattern match based on 1 + n.</p>",
        "id": 134912809,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292106
    },
    {
        "content": "<p>Would add_nat help me with the pattern matching?</p>",
        "id": 134912811,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292119
    },
    {
        "content": "<p>just swap the arguments, like this</p>\n<div class=\"codehilite\"><pre><span></span>def nat_add {n} (k) (i : fin n) : fin (k + n) :=\n⟨k + i.1, nat.add_lt_add_left i.2 _⟩\n</pre></div>",
        "id": 134912854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538292183
    },
    {
        "content": "<p>then use it in your minors function</p>",
        "id": 134912857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538292205
    },
    {
        "content": "<p>Are you suggeting to change the signature of my functions.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ursubmx</span> <span class=\"o\">{</span><span class=\"n\">m_bottom</span> <span class=\"n\">m_top</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m_bottom</span> <span class=\"n\">m_top</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">),</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_bottom</span> <span class=\"bp\">+</span> <span class=\"n\">m_top</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_left</span> <span class=\"bp\">+</span> <span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ursubmx2</span> <span class=\"o\">{</span><span class=\"n\">m_bottom</span> <span class=\"n\">m_top</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m_bottom</span> <span class=\"n\">m_top</span> <span class=\"n\">n_left</span> <span class=\"n\">n_right</span><span class=\"o\">),</span>\n  <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m_top</span> <span class=\"bp\">+</span> <span class=\"n\">m_bottom</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span> <span class=\"bp\">+</span> <span class=\"n\">n_left</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m_top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n_right</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 134912972,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292480
    },
    {
        "content": "<p>yes... although I think this will make a cast required</p>",
        "id": 134913014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538292524
    },
    {
        "content": "<p>I feel I have enough ideas to make things work. I can then later try to make the code nice.</p>",
        "id": 134913015,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292525
    },
    {
        "content": "<p>This just screems ugly all over the place.</p>",
        "id": 134913018,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292544
    },
    {
        "content": "<p>Need to get used to this more to see a beautiful solution.</p>",
        "id": 134913022,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292565
    },
    {
        "content": "<p>Need to have breakfast now. Thanks a lot for the helpful discussion. I learned a lot!</p>",
        "id": 134913024,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538292590
    },
    {
        "content": "<p>Here's a trick: You can use Kevin's minors function as a cast</p>",
        "id": 134913071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538292614
    },
    {
        "content": "<p>the identity function <code>fin (m+n) -&gt; fin (n+m)</code> is monotonic :)</p>",
        "id": 134913073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538292641
    },
    {
        "content": "<p>Is there an argument for not even using <code>fin n</code> at all and having a general class indexed over a pair of finite types?</p>\n<p>Here's a result I'd like to see in Lean one day: if f(X) is the char poly of the n x n matrix M then the coefficient of X^(n-i) in f(X) is the sum of the (appropriately signed?) determinants of the i x i principal minors.</p>",
        "id": 134914237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538295429
    },
    {
        "content": "<p>We already have that; Tobias is explicitly avoiding that because he wants to do induction on fin n</p>",
        "id": 134914299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538295594
    },
    {
        "content": "<p>Oh -- I'm behind the times :-)</p>",
        "id": 134914352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538295688
    },
    {
        "content": "<p>If this is to be computationally efficient, it should probably use list representation though (a.k.a <code>fast_matrix</code>), and it might be possible to just ignore the dependent types and work with <code>list (list A)</code></p>",
        "id": 134914394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538295746
    },
    {
        "content": "<p>I see.</p>",
        "id": 134915836,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538299046
    },
    {
        "content": "<p>I would certainly like this to be computationally efficient, but will take this a step at a time. I feel I am close to sth that could work. I will finish this up and polish it.</p>",
        "id": 134915876,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538299091
    },
    {
        "content": "<p>Then we have a first baseline implementation. I am then happy to take feedback on how to improve interface / performance / ...</p>",
        "id": 134915879,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538299141
    },
    {
        "content": "<p>I think that's a good idea</p>",
        "id": 134916119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538299732
    },
    {
        "content": "<p>OK, I think I got a first implementation: <a href=\"https://gist.github.com/tobig/376e9a394c674474b8c1f6ecf9555478\" target=\"_blank\" title=\"https://gist.github.com/tobig/376e9a394c674474b8c1f6ecf9555478\">https://gist.github.com/tobig/376e9a394c674474b8c1f6ecf9555478</a><br>\nIt compiles and gives expected results. Still a couple of sorry, but seems to work.</p>",
        "id": 134921308,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538310953
    },
    {
        "content": "<p>Need to clean up everything at some point.</p>",
        "id": 134921349,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538310979
    },
    {
        "content": "<p>But no today any more.</p>",
        "id": 134921353,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538310986
    },
    {
        "content": "<p>Also I learned it is indeed _very_ slow.</p>",
        "id": 134921355,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538311005
    },
    {
        "content": "<p>I need to wait 10s of seconds for results on a 3x3 matrix.</p>",
        "id": 134921356,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538311017
    },
    {
        "content": "<p>Oh dear, seems there is optimization potential.</p>",
        "id": 134921362,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538311027
    },
    {
        "content": "<p>I think for your test matrix I would have been tempted to send x and y to <code>C[3*x+y]</code> with C a vector of the nine entries (<code>def C := [3,3,3,3,2,3,2,1,1]</code>)...hmm...one might then have to prove 3*x+y&lt;=8...</p>",
        "id": 134922425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538312854
    },
    {
        "content": "<p>hmm, are you aiming for speed? I believe <code>vector</code> has special support in the VM, so you might try defining matrix using that instead of an arbitrary <code>fintype</code></p>",
        "id": 134924823,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538317752
    },
    {
        "content": "<p>iirc, and you would be more familiar than me on this topic, but doesn't SSReflect also define matrix as a vector of vectors?</p>",
        "id": 134924884,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1538317827
    },
    {
        "content": "<p>I am not aiming for speed atm. I just want to get things working / defined and improve my lean-knowledge.</p>",
        "id": 134926152,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538320491
    },
    {
        "content": "<p>Eventually, I would like this to be fast and maybe even support exporting code to C++.</p>",
        "id": 134926161,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538320510
    },
    {
        "content": "<p>However, this is a medium term only.</p>",
        "id": 134926164,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538320523
    },
    {
        "content": "<p>My first pull request: <a href=\"https://github.com/leanprover/mathlib/pull/387\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/387\">https://github.com/leanprover/mathlib/pull/387</a></p>\n<p>Still very small, but gets things rolling.</p>",
        "id": 135234645,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538716146
    },
    {
        "content": "<p>I got an amazing review from <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> and <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span>. Thanks a lot!</p>",
        "id": 135236714,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538720121
    },
    {
        "content": "<p>The PR has my stamp of approval and, I think, that of <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span>, now we just need <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> or <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> to merge it.</p>",
        "id": 135236765,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538720179
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 135236826,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538720325
    },
    {
        "content": "<p>yeah okay</p>",
        "id": 135236830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538720342
    },
    {
        "content": "<p>This must be some sort of record :D</p>",
        "id": 135236836,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538720357
    },
    {
        "content": "<p>Impressive!</p>",
        "id": 135236911,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538720483
    },
    {
        "content": "<p>I pushed anther pull request for fin in (<a href=\"https://github.com/leanprover/mathlib/pull/388\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/388\">https://github.com/leanprover/mathlib/pull/388</a>) as well as the submatrix definitions this thread was originally about in: <a href=\"https://github.com/leanprover/mathlib/pull/389\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/389\">https://github.com/leanprover/mathlib/pull/389</a>. The last PR uses <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s idea of using a general function minormx to implement this functionality.</p>",
        "id": 135242622,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538729527
    },
    {
        "content": "<p>Especially the last one is more a RFC, as I am not sure if limiting these functionality to (fin n) makes sense.</p>",
        "id": 135242713,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538729646
    },
    {
        "content": "<p>My lean time is over for today. Will look at potential feedback later tonight. Thanks everyone again!</p>",
        "id": 135242722,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538729681
    }
]