[
    {
        "content": "<p>On my <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/ordered-module-smul\">branch#pechersky/ordered-module-smul</a>, I am hitting a diamond on smul actions on <code>order_dual</code>. But it seems that the data (the actual <code>smul</code>) is the same. What's going on here? Is this another instance of how use of defeq of <code>R</code> and <code>order_dual R</code> causes issues later on?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.ordered</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">semiring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LHS</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_dual.smul_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">E</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">E</span> <span class=\"n\">hc</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">E</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">E</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">E</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">E</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"n\">E</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">E</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">E</span> <span class=\"n\">hc</span><span class=\"o\">))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module.to_mul_action_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_add_comm_group</span> <span class=\"n\">E</span> <span class=\"n\">hc</span><span class=\"o\">))</span>\n          <span class=\"n\">hm</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RHS</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">k</span> <span class=\"n\">hr</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_ordered_cancel_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_dual.ordered_add_comm_group</span> <span class=\"n\">E</span> <span class=\"n\">hc</span><span class=\"o\">)))))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module.to_mul_action_with_zero</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">hr</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_dual.ordered_add_comm_group</span> <span class=\"n\">E</span> <span class=\"n\">hc</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_dual.module</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">E</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_group.to_ordered_cancel_add_comm_monoid</span> <span class=\"n\">E</span> <span class=\"n\">hc</span><span class=\"o\">))</span>\n            <span class=\"n\">hm</span><span class=\"o\">)))</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">LHS</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span> <span class=\"n\">hm</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">LHS k E : smul_with_zero k (order_dual E)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">RHS</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span> <span class=\"n\">hm</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">RHS k E : smul_with_zero k (order_dual E)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">smul_with_zero</span> <span class=\"n\">has_scalar</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LHS</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span> <span class=\"n\">hm</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RHS</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">succeed</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LHS</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span> <span class=\"n\">hm</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">RHS</span> <span class=\"n\">k</span> <span class=\"n\">E</span> <span class=\"n\">hr</span> <span class=\"n\">hc</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">semiring</span>\n</code></pre></div>",
        "id": 251385881,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630417051
    },
    {
        "content": "<p>Yes, seems so. Being less defeq-y, one avoids it. <a href=\"https://github.com/leanprover-community/mathlib/issues/8930\">#8930</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/8938\">#8938</a></p>",
        "id": 251392740,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630419570
    }
]