[
    {
        "content": "<p>Consider the code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>this gives the tactic state:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p><code>simp</code> is not able to simplify this, I think because there are only theorems that cancel for <code>(a * b) / b = a</code> and <code>(a / b) * b = a</code>.  We could add separate lemmas for different cases, but I'm curious why it doesn't just apply associativity?</p>",
        "id": 205035973,
        "sender_full_name": "Chris M",
        "timestamp": 1595738602
    },
    {
        "content": "<p>it's false when <code>c = 0</code></p>",
        "id": 205036025,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595738748
    },
    {
        "content": "<p>LHS = <code>0 * (b / 0) = 0 * 0 = 0</code> and RHS = <code>b</code></p>",
        "id": 205036067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595738775
    },
    {
        "content": "<p>so you need to tell simp to use <code>h</code>, i.e. <code>simp [h]</code></p>",
        "id": 205036071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595738787
    },
    {
        "content": "<p>ooh i see</p>",
        "id": 205036079,
        "sender_full_name": "Chris M",
        "timestamp": 1595738843
    },
    {
        "content": "<p>no actually it doesn't seem to do that then either. (also, is there a way to make simp just automatically use all assumptions without having to tell it to?)</p>",
        "id": 205036121,
        "sender_full_name": "Chris M",
        "timestamp": 1595738915
    },
    {
        "content": "<p><code>simp *</code> uses all assumptions</p>",
        "id": 205036127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595738948
    },
    {
        "content": "<p>apparently <code>mul_div_cancel'</code> is not a <code>simp</code>-lemma so you need <code>simp [h, mul_div_cancel']</code></p>",
        "id": 205036185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595739048
    },
    {
        "content": "<p>but then why not <code>exact mul_div_cancel' _ h</code>?</p>",
        "id": 205036188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595739064
    },
    {
        "content": "<p>Does <code>library_search</code> work in this case?</p>",
        "id": 205039842,
        "sender_full_name": "Chris Wong",
        "timestamp": 1595747031
    },
    {
        "content": "<p>Hopefully!</p>",
        "id": 205042181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595751623
    },
    {
        "content": "<p>Shall I add <code>@[simp]</code> to <code>mul_div_cancel'</code> and similar?</p>",
        "id": 205044864,
        "sender_full_name": "Chris M",
        "timestamp": 1595757097
    },
    {
        "content": "<p>There is also <code>field_simp</code> that can deal with these division issues pretty well:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205054979,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1595775086
    },
    {
        "content": "<p>Probably we should make <code>simp</code> use the simp set used by <code>field_simp</code>.</p>",
        "id": 205067701,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595798060
    },
    {
        "content": "<p>But it is a medium-scale refactor.</p>",
        "id": 205067721,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595798120
    }
]