[
    {
        "content": "<p>(deleted)</p>",
        "id": 270262928,
        "sender_full_name": "Kwame Porter Robinson",
        "timestamp": 1643740790
    },
    {
        "content": "<p>I'm a newbie; I have a hypothesis like so <code>h : k ≠ 0 → k * b = k * c → b = c</code> and was wondering if I could split it into two hypotheses,  <code>h1 : k ≠ 0 → k * b = k * c</code> and <code>h2 : k * b = k * c → b = c</code>. Splitting <code>h</code> would allow me to apply the implications of hypothesis <code>h</code>  more selectively, e..g <code>apply h1</code></p>",
        "id": 270264027,
        "sender_full_name": "Kwame Porter Robinson",
        "timestamp": 1643741204
    },
    {
        "content": "<p>this isn't true in general - look at your <code>h2</code>, for example, with <code>k = 0</code>!</p>",
        "id": 270264439,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643741398
    },
    {
        "content": "<p>More generally, for any types <code>A</code>, <code>B</code>, and <code>C</code>, the type <code>A → B → C</code> is <code>A → (B → C)</code>, meaning that a function <code>f : A → B → C</code> takes in a term <code>a : A</code> as input and returns a function <code>f(a) : B → C</code> as output.  If you can provide a further term <code>b : B</code> to this function then you get <code>f(a)(b) : C</code>.</p>",
        "id": 270273926,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643744955
    },
    {
        "content": "<p>In your case where the types are propositions, your term <code>h : k ≠ 0 → k * b = k * c → b = c</code> says the following: if you can provide a proof of <code>k ≠ 0</code> and a proof of <code>k * b = k * c</code>, then I'll give you a proof of <code>b = c</code>.</p>",
        "id": 270274424,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643745159
    },
    {
        "content": "<p>So you should read something of the form <code>A → B → C</code> as saying \"<code>A</code> and <code>B</code> together imply <code>C</code>\".  But this isn't the same as \"<code>A</code> implies <code>B</code> and also <code>B</code> implies <code>C</code>\".</p>",
        "id": 270275029,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643745358
    },
    {
        "content": "<p>In a lot of areas of mathematics (such as category theory) we often draw diagrams where arrows are chained together: if we have an arrow from some thing <code>X</code> to some thing <code>Y</code> and an arrow from <code>Y</code> to <code>Z</code>, we can compose them to make an arrow from <code>X</code> to <code>Z</code> that we might draw like <code>X → Y → Z</code>.  But that's <strong>NOT</strong> what's going on here!</p>",
        "id": 270275745,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643745621
    },
    {
        "content": "<p>This notation — writing <code>A → B → C</code> when we mean <code>A → (B → C)</code> — can be confusing at first, and you might well think that we should just put in the brackets to be clear about what we mean.  But in practice it turns out to be useful to write functions in this way: for a function that takes a lot of inputs, we can write its type as <code>A → B → C → D → ... → Z</code> without piling up loads of brackets.</p>",
        "id": 270276496,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643745905
    }
]