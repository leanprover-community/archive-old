[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sin_pi_div_two</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">sin</span> <span class=\"n\">pi</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<blockquote>\n<p>(deterministic) timeout</p>\n</blockquote>\n<p>Morally speaking, should <code>#reduce sin pi/2</code> work?</p>",
        "id": 157193193,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548860589
    },
    {
        "content": "<p>no</p>",
        "id": 157193399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548860749
    },
    {
        "content": "<p>I think the definition of <code>pi</code> is nonconstructive, but even if everything involved was constructive, in the best case this expression would reduce to the equivalence class of some particular Cauchy sequence of rationals, and you still would need to prove a theorem to know whether or not it was equal to 1. (By the way, I guess you mean <code>sin (pi/2)</code>?)</p>",
        "id": 157193636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548860889
    },
    {
        "content": "<p>True, I did mean that.</p>",
        "id": 157194006,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548861160
    },
    {
        "content": "<p>I thought you can reduce noncomputable things</p>",
        "id": 157194149,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548861266
    },
    {
        "content": "<p>but you might need to define \"work\": what output do you expect? an infinite stream of digits?</p>",
        "id": 157194172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548861298
    },
    {
        "content": "<p>I would have expected \"1\" but a stream would be interesting too.</p>",
        "id": 157194396,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548861456
    },
    {
        "content": "<p>I agree \"work\" should be clarified, but in this case, the answer will turn out to be \"no\" for any reasonable interpretation.</p>",
        "id": 157194401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548861459
    },
    {
        "content": "<p>Is there some sort of <code>#simp</code>? I imagine that you give it an expression, and it runs the simplifier against it and prints the result.</p>",
        "id": 157210893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548874215
    },
    {
        "content": "<p>That could be arranged</p>",
        "id": 157211226,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548874445
    },
    {
        "content": "<p>I would imagine that <code>#simp sin (pi/2)</code> would in fact return <code>1</code>. (Provided we have the right simp-lemmas in place.)</p>",
        "id": 157211493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548874663
    }
]