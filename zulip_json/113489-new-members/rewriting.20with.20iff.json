[
    {
        "content": "<p>I read somewhere that rewrite is supposed to work with iff  as well as with =.   At least in my example below that does not seem to work.   Can someone please tell me how to alter this non-proof so it becomes a proof?   It's the third line from<br>\nthe bottom that doesn't work.  Also,  question 2,  it's not clear to me why I have to import tactic.finish,  as this file is included in a project that uses mathlib and tactic is part of mathlib.  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">finish</span>\n<span class=\"kn\">constant</span> <span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">constant</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">-&gt;</span><span class=\"n\">M</span><span class=\"bp\">-&gt;</span><span class=\"n\">M</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mem</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">-&gt;</span><span class=\"n\">M</span><span class=\"bp\">-&gt;</span><span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">axiom_1</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pair_equality</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">u</span> <span class=\"o\">(</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mem</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">rewrite</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">ifinish</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span><span class=\"n\">q</span> <span class=\"k\">in</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">axiom_1</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">},</span>\n    <span class=\"n\">ifinish</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200932972,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592248786
    },
    {
        "content": "<p>use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to make the code more readable</p>",
        "id": 200933053,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248820
    },
    {
        "content": "<p>you have to import that files you want from mathlib</p>",
        "id": 200933087,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248842
    },
    {
        "content": "<p>the fact that mathlib is available is what makes the import statements work</p>",
        "id": 200933097,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592248851
    },
    {
        "content": "<p>here's how I would write your example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pair_equality</span>\n  <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200933611,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592249150
    },
    {
        "content": "<p><code>pairing_axiom</code> is not defined in your code</p>",
        "id": 200934202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592249443
    },
    {
        "content": "<p>I think the problem you hit is that you can't rewrite under binders</p>",
        "id": 200934301,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592249505
    },
    {
        "content": "<p>I think this gets you where you wanted to go</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pair_equality</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mem</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">},</span>\n  <span class=\"n\">squeeze_simp</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200934535,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592249618
    },
    {
        "content": "<p>Yes, Jalex has hit the nail on the head:  you can't rewrite under binders.   I did not know that.   It is not obvious WHY you can't rewrite under binders,  but that is clearly the problem with my code.   Thank you.</p>",
        "id": 200937885,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592251186
    },
    {
        "content": "<p>i recommending avoiding constants and axioms in favor of variables or just arguments</p>",
        "id": 200938126,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592251300
    },
    {
        "content": "<p>The issue is not that it's illegal in some way to rewrite under binders, the issue is that the <code>rw</code> tactic does not rewrite under binders. You can use <code>simp only [axiom_1]</code> to rewrite under binders, or you can use <code>conv</code> mode.</p>",
        "id": 200938292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592251376
    },
    {
        "content": "<p>Or <code>simp_rw</code></p>",
        "id": 200940566,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592252588
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">tactic#simp_rw</a></p>",
        "id": 200940591,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592252599
    },
    {
        "content": "<p>After using simp only or  simp_rw   there are two versions of the hypothesis that was simplified.   The original, and the simplified, both named the same (!) and when I try to work on the simplified one,  Lean works on the original instead and fails.</p>\n<p>Eg.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">mem</span> <span class=\"n\">u</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>I don't see how it makes sense to have q be of two different types.  <br>\nSo if I then try something like</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"k\">have</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>intending the second \"q\",    it tries the first \"q\" instead.</p>",
        "id": 200963134,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592268996
    },
    {
        "content": "<p>Is this related to the fact that in your original code block you created two q's with the line <code>let q :=q in...</code>?</p>",
        "id": 200963339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592269212
    },
    {
        "content": "<p>If not, then can you post some fully working code?</p>",
        "id": 200963365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592269258
    },
    {
        "content": "<p>Maybe it is.   That line bothered me too,  but I imitated it from TPIL.   If I tried  let q2 := q   it complains.<br>\nNo, I can't post working code,  that's why I'm posting non-working code.</p>",
        "id": 200963379,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592269280
    },
    {
        "content": "<p>Why not just delete the line? It's making two variables both called q and doing nothing else</p>",
        "id": 200963452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592269329
    },
    {
        "content": "<p>If you don't put that line in then q isn't recognized.  It seems to be like #include.   Since hypotheses can be changed within a tactic block they don't live past the end of that tactic block unless you at least mention them,  says TPIL.</p>",
        "id": 200963525,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592269434
    },
    {
        "content": "<p>I don't understand what you're saying. What I'm saying is that <code>let q := q in</code> creates a second variable also called <code>q</code> and that any complaints you have about having two variables called <code>q</code> beyond that point are of your own making.</p>",
        "id": 200963778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592269691
    },
    {
        "content": "<p>OK,  I think you're right.    I took that line out and it no longer produced the same complaint that caused me to <br>\nput it in in the first place.   Thank you.</p>",
        "id": 200963887,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592269896
    },
    {
        "content": "<p>Continuing the topic of rewriting under binders - how can I apply cases under a binder?</p>\n<p>I have <code>h: ∀ (m : ℕ → bool), eval m a = tt ∧ eval m b = tt</code>, and would like to split on <code>∧</code> into <code>h1</code> and <code>h2</code></p>",
        "id": 201112553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592382035
    },
    {
        "content": "<p>Something like <code>cases forall_and_distrib.mp h with h1 h2</code></p>",
        "id": 201113872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592382968
    },
    {
        "content": "<p><code>rw forall_and_distrib at h</code> did the trick, thanks</p>",
        "id": 201113994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592383053
    },
    {
        "content": "<p>What's the problem with my solution?</p>",
        "id": 201114181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592383170
    },
    {
        "content": "<p>If you had posted a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I could have helped you much better.</p>",
        "id": 201114207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592383195
    },
    {
        "content": "<p>Nothing, just wanted to understand it piecewise :)</p>",
        "id": 201114208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1592383195
    }
]