[
    {
        "content": "<p>How can I rewrite a known rational <code>r : \\Q</code> in the form <code>rat.mk (...) (...)</code>?</p>",
        "id": 135984699,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539794573
    },
    {
        "content": "<p>I expected something like <code>change rat.mk (rat.num) (rat.denom) at r,</code> but that doesn't work.</p>",
        "id": 135984779,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539794655
    },
    {
        "content": "<p>Try cases on r?</p>",
        "id": 135984790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539794673
    },
    {
        "content": "<p>Yep, just tried that, works.</p>",
        "id": 135984796,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539794681
    },
    {
        "content": "<p>I agree that <code>rat.num / rat.denom = r</code> but that looks to me like a theorem rather than something which is true by definition.</p>",
        "id": 135984816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539794704
    },
    {
        "content": "<p>\\Q is an inductive type, so you can always do cases on it. It only has one constructor so the number of goals won't change.</p>",
        "id": 135984846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539794750
    },
    {
        "content": "<p>I just found <code>theorem rat.num_denom : ∀ (a : ℚ), a = rat.mk (a.num) ↑(a.denom)</code></p>",
        "id": 135984872,
        "sender_full_name": "Scott Olson",
        "timestamp": 1539794763
    },
    {
        "content": "<p>If you want _anything_ other than what <code>cases</code> provides (and you might well find that you want what <span class=\"user-mention\" data-user-id=\"130491\">@Scott Olson</span> says rather than what I said -- I am breaking the interface) then my advice to you is to open <code>data/rat.lean</code> and pore through it until you spot what you need. Either that or get good at guessing the names of theorems (there are tips for doing this).</p>",
        "id": 135985882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539795780
    },
    {
        "content": "<p>By the way, the actual construtor <code>rat.mk'</code> needs a couple of proofs, and that's what you'll get with <code>cases</code>. The reason the initial constructor is so inconvenient is that it guarantees that two rationals are equal if and only if they're made with the same data (remember that all proofs of a proposition are equal by definition).</p>",
        "id": 135985883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539795780
    }
]