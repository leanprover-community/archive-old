[
    {
        "content": "<p>How can I prove that if <code>{a} = {b, c}</code> then <code>b</code> must be equal to <code>c</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">pair</span> <span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">pair</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">set.singleton_eq_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">set.mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set.pair_eq_singleton</span><span class=\"o\">,</span> <span class=\"n\">set.singleton_eq_singleton_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">helper</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266530157,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1640995153
    },
    {
        "content": "<p>prewarning, also a new-member.  I would break it up into smaller parts.  <br>\nwe have <code>a_2 \\in {a_1}</code> since we can rw it.  Likewise for <code>b_2</code>.  So they should both be equal to <code>a_1</code><br>\nI put the <code>have</code>s in and then used <code>library_search</code> to find the name of <code>set.mem_singleton_iff.mp</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">a2incl</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a₁</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">a2eq</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"n\">a2incl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a2eq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b2incl</span> <span class=\"o\">:</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a₁</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">b2eq</span> <span class=\"o\">:</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"n\">b2incl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">b2eq.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266531552,
        "sender_full_name": "Sigma",
        "timestamp": 1640997468
    },
    {
        "content": "<p>Here's one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">set.ext_iff.mp</span> <span class=\"n\">h</span> <span class=\"n\">a₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h''</span> <span class=\"o\">:=</span> <span class=\"n\">set.ext_iff.mp</span> <span class=\"n\">h</span> <span class=\"n\">b₂</span><span class=\"o\">,</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>tidy</code> can be replaced with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_insert_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">true_or</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span>\n    <span class=\"n\">iff_true</span><span class=\"o\">,</span> <span class=\"n\">or_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"c1\">-- generated by squeeze_simp at h' h''</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 266532359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640998826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"436145\">@Sigma</span> Here's a minimized version of your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a₁</span><span class=\"o\">}),</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b₂</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">}),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(<code>obtain rfl := </code> is a way to immediately substitute everywhere when the result is an equality)</p>",
        "id": 266532557,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640999172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Note that <code>{a₁}</code> is definitionally equal to <code>(λx, x = a₁)</code> and <code>{a₂, b₂}</code> is definitionally equal to <code>(λx, x = a₂ ∨ x = b₂)</code>, so you can also prove it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/congr_fun\">docs#congr_fun</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n<span class=\"n\">finish</span> <span class=\"n\">using</span> <span class=\"o\">[(⟨</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">b₂</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 266533898,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641001477
    },
    {
        "content": "<p>I wouldn't recommend you do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">a₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eq.trans</span> <span class=\"n\">_</span> <span class=\"n\">a₂</span> <span class=\"n\">a₁</span> <span class=\"n\">b₂</span>\n  <span class=\"o\">(</span><span class=\"n\">set.mem_singleton_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">set.mem_insert</span> <span class=\"n\">a₂</span> <span class=\"o\">({</span><span class=\"n\">b₂</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n  <span class=\"o\">(((</span><span class=\"bp\">@</span><span class=\"n\">set.mem_singleton_iff</span> <span class=\"n\">_</span> <span class=\"n\">b₂</span> <span class=\"n\">a₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n    <span class=\"o\">(</span><span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">set.mem_insert_of_mem</span> <span class=\"n\">a₂</span> <span class=\"o\">(</span><span class=\"n\">set.mem_singleton</span> <span class=\"n\">b₂</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266547161,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641024790
    },
    {
        "content": "<p>Thank you very much for the suggestions.</p>",
        "id": 266566800,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1641058302
    }
]