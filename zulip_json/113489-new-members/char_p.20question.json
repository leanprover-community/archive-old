[
    {
        "content": "<p>Hi-- newbie here. Having finished the natural numbers game and skimming some tutorials, I started fiddling around and got stuck on the following point; maybe someone can get me unstuck?!</p>\n<p>I wanted to understand how <code>char_p</code> works. So I did the following:</p>\n<p>(I don't think I'll include the <code>import</code>s in this question for now at least).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">][</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>so I'm working in characteristic 2.  I see that I can prove things like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">rw</span> <span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">F</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Probably there is an easier way to do this, but I'll worry about that later!) What I don't see how to do is to get the \"additive\" form of this statement. I'd like to prove e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>It seems that I should be able to \"reverse engineer\" this by looking e.g. at the proof of <code>add_pow_char_of_commute</code>, but I couldn't quite follow all that I was looking at. And I think I'm probably worried about \"the easy bit\" ... </p>\n<p>Here is (one of the ways...) that I've started the proof of my example above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_mul</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span>  <span class=\"c1\">-- at this point the goal reads  ⊢ 2 * a = 0</span>\n  <span class=\"c1\">-- -- one attempt (?)</span>\n  <span class=\"c1\">-- simp, --&gt;  2=0 ∨ a =0</span>\n  <span class=\"c1\">-- left,  --&gt;  2=0</span>\n  <span class=\"c1\">--  -- what are the types of the terms in that final equation??</span>\n\n  <span class=\"c1\">-- alternatively,  just trying to rewrite the 2 as 0 doesn't seem to work:</span>\n  <span class=\"c1\">-- rw char_p.cast_eq_zero F 2 --&gt;  \"did not find instance of pattern\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I guess that the issue is <code>2</code> vs  <code>↑2</code>, i.e. coercion. But I'm not quite sure how to handle it.<br>\nExplanations/thoughts/suggestions appreciated!</p>",
        "id": 279990137,
        "sender_full_name": "George McNinch",
        "timestamp": 1650820498
    },
    {
        "content": "<p>Please please please include the imports! Check out the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> link. Make it easier for us to help!</p>",
        "id": 279990817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650821753
    },
    {
        "content": "<p>By the way, assuming you're using VS Code you can just click on the = in 2=0 in the infoview to see what the types of the terms are.</p>",
        "id": 279990879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650821847
    },
    {
        "content": "<p>I am guessing that you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_two\">docs#nat.cast_two</a>.</p>",
        "id": 279991936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650823053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  thanks! Indeed, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_mul</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.cast_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">F</span> <span class=\"mi\">2</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Can I ask: prior to rewriting via <code>nat.cast_two</code>, is the term <code>2 * a</code> obtained via <code>nsmul :ℕ → F → F</code>?? (Well, I'm not sure I've asked this question in a sensible way so am happy to be corrected).</p>",
        "id": 279993966,
        "sender_full_name": "George McNinch",
        "timestamp": 1650826047
    },
    {
        "content": "<p>No, the <code>2</code> in <code>2 * a</code> is <code>2 : F</code>, not <code>2 : ℕ</code>.</p>",
        "id": 279994023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650826114
    },
    {
        "content": "<p>Huh -- thanks! So then what is the difference between <code>↑2 : F</code> and <code>2 : F</code>?</p>",
        "id": 279994050,
        "sender_full_name": "George McNinch",
        "timestamp": 1650826200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  thanks; I'll aim for a MWE in future questions.<br>\nAlso: I've been using emacs, just because I've used emacs for everything, for as long as I can remember. But maybe the VSCode support for lean is substantially better??</p>",
        "id": 279994120,
        "sender_full_name": "George McNinch",
        "timestamp": 1650826284
    },
    {
        "content": "<p>Surely there is some way to see those types in emacs...</p>",
        "id": 279994181,
        "sender_full_name": "George McNinch",
        "timestamp": 1650826349
    },
    {
        "content": "<p><code>↑(2 : ℕ) : F</code> means <code>0 + 1 + 1</code> while <code>2 : F</code> means <code>1 + 1</code>. Those are propositionally equal (you can produce a proof that they are equal) but not definitionally equal (replacing each thing by its definition does not turn the LHS into the RHS).</p>",
        "id": 279994557,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650826882
    },
    {
        "content": "<p>Yes, VS Code support for Lean is substantially better (for example you can see the type of every term in the goal view at the click of a button). [remark: I still use emacs for essentially everything, from writing papers to writing talks, because I know it back to front and I've been using it for 30 years, but I use VS Code for Lean]</p>",
        "id": 279994961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650827505
    },
    {
        "content": "<p>Also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/two_mul\">docs#two_mul</a> is probably better to use here than <code>one_add_one_eq_two</code></p>",
        "id": 279995112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650827741
    },
    {
        "content": "<p>Right, I get why those two expressions aren't definitionally equal.</p>\n<p>Is it true then that for <code>n : ℕ</code>, the application <code>↑n</code> for some reason yields <code>0 + n : F</code> (in my setting, at least)? </p>\n<p>Or rather than guessing, maybe I should just ask where is the <code>0+</code> bit coming from?</p>\n<p>Well, probably I should go read about coercion more carefully...; anyhow, thanks for answers!</p>",
        "id": 279995141,
        "sender_full_name": "George McNinch",
        "timestamp": 1650827762
    },
    {
        "content": "<p>No, <code>↑n</code> is <code>0 + 1 + ... + 1</code>, while <code>n</code> is <code>bit0 (bit1 ...)</code> where <code>bit0 a = a + a</code> and <code>bit1 a = a + a + 1</code>.</p>",
        "id": 279995184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650827840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks; indeed, I was pretty skeptical about <code>one_add_one_eq_two</code>. (I decided to triage that concern until I understood the other bit).</p>",
        "id": 279995189,
        "sender_full_name": "George McNinch",
        "timestamp": 1650827853
    },
    {
        "content": "<p>here's a pretty simple proof using just what simp already knows about multiplication in a field</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">F</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279995255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650827944
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">char_p.cast_eq_zero</span> <span class=\"n\">F</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(only posting this because it's rare that I can golf Mario)</p>",
        "id": 279995316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650828041
    },
    {
        "content": "<p>Great; thanks all.</p>",
        "id": 279995582,
        "sender_full_name": "George McNinch",
        "timestamp": 1650828446
    }
]