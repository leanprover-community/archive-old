[
    {
        "content": "<p>After spending some time pondering the following issue and coming up with exactly nothing, I think's it's time to ask this question here <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> Below I post an example of a 'trivial' statement that I cannot close by refl, which baffles me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dissection</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">S.card</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_Icc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span>  <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mem_endpoints</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dissection_card_def</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"n\">dissection</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D.N</span> <span class=\"bp\">=</span> <span class=\"n\">S.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm really lost why this happens (and what do I need to fix it), so I'll appreciate any help I get!</p>",
        "id": 233298626,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1617705875
    },
    {
        "content": "<p>When you write <code>N := S.card</code>, you are not saying that \"N is always S.card\". You are only providing a default value.</p>",
        "id": 233299734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617706637
    },
    {
        "content": "<p>Why is <code>N</code> even a field of <code>dissection</code>, rather than a separate <code>def</code>?</p>",
        "id": 233299759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617706660
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , I'll define it separately. I wanted to define <code>N</code> inside <code>dissection</code> for elegance in notation (it's tiresome to always write <code>S.card</code>). But there's probably an easier way (and actually working) way to do this, I'm guessing.</p>",
        "id": 233301768,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1617707991
    },
    {
        "content": "<p>Just <code>def dissection.N (a b : ℝ) (S : finset ℝ) (D : dissection a b S) : nat := S.card</code>.</p>",
        "id": 233301867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617708041
    },
    {
        "content": "<p>Thank you so much, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>. I'll just use <code>def</code> every time I want to say 'this is true by definition'. It's really obvious in hindsight, but surprisingly it wasn't at first.</p>",
        "id": 233302771,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1617708607
    },
    {
        "content": "<p><code>def</code> says \"this is the definition\", not \"this is true\"</p>",
        "id": 233302847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617708665
    },
    {
        "content": "<p>Since the statement \"nat is true\" is nonsense</p>",
        "id": 233302877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617708681
    },
    {
        "content": "<p>Pardon my language, I completely agree <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> .</p>",
        "id": 233302965,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1617708733
    }
]