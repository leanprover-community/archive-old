[
    {
        "content": "<p>Hey :) I'm toying around with some modular arithmetic, and am struggling to prove a basic premise: <code>3 ∣ n → ¬ 5 ∣ n → ¬ 15 ∣ n</code></p>\n<p>I'd like to prove this by assuming divisibility by 15, and finding a contradiction with divisibility by 5. However, <code>dvd_of_mul_left_dvd</code> is giving me pause.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"mi\">5</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"mi\">15</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">q</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">contra</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mul_left_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">dvd_of_mul_left_dvd</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">∣</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n</code></pre></div>\n\n<p>I am unsure why the pattern matching isn't working here. Any pointers?</p>",
        "id": 212979865,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1602447325
    },
    {
        "content": "<p>What do I need to import/open to get this working? Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 212979921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602447377
    },
    {
        "content": "<p>my apologies! I have the following imported:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.divisibility</span>\n</code></pre></div>\n\n<p>so the entire (not working :( ) file is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.divisibility</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"mi\">5</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"mi\">15</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">q</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">contra</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mul_left_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212979952,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1602447453
    },
    {
        "content": "<p>You don't have enough imports, apparently: you seem to have managed to avoid importing the fact that the naturals are a commutative monoid.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"mi\">5</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">¬</span> <span class=\"mi\">15</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h₃</span> <span class=\"n\">h₅</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">15</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">q</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">contra</span> <span class=\"o\">:=</span> <span class=\"n\">dvd_of_mul_left_dvd</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>works fine.</p>",
        "id": 212980110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602447689
    },
    {
        "content": "<p>fascinating! works for me as well :) thank you.</p>",
        "id": 212980149,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1602447723
    },
    {
        "content": "<p>These facts used to be in core Lean 3 but in the community fork we ripped them out and moved them to mathlib, so now you have to explicitly import them.</p>",
        "id": 212980170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602447745
    },
    {
        "content": "<p>I didn't know this wasn't there by default any more because every Lean file I write starts with <code>import tactic</code>.</p>",
        "id": 212980176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602447773
    },
    {
        "content": "<p>starting every file with <code>import tactic</code> is something I can definitely accept</p>",
        "id": 212980185,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1602447816
    }
]