[
    {
        "content": "<p>Hey all :) </p>\n<p>I'm hoping to get some assistance with cleaning up my proofs a bit (or overhauling them entirely!). Currently working through Smullyan's \"To Mock a Mockingbird\" which features some fun logic puzzles with combinators. This time, however, I'd like to solve the puzzles while I'm also learning Lean</p>\n<p><a href=\"https://github.com/jdan/mockingbird.lean/blob/ecd60d26338f7d07b46fbff36a7fc3d65031b88c/src/mockingbird.lean\">https://github.com/jdan/mockingbird.lean/blob/ecd60d26338f7d07b46fbff36a7fc3d65031b88c/src/mockingbird.lean</a></p>\n<p>In particular, I'm representing a \"Combinator\" as an inductive type with a single \"Ap\" constructor (Ap A B) = \"AB.\" I don't love it! I'm also struggling to simplify my proofs a little but instead relying on stuff I barely know like cases and rw :) Any help would be appreciated!</p>",
        "id": 219380175,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1607539694
    },
    {
        "content": "<p>the proofs look fine. You can use <code>use</code> instead of <code>existsi</code>, it's a bit less fussy.</p>",
        "id": 219381686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607540363
    },
    {
        "content": "<p>e.g. the last two lines of the second proof can just be <code>use [B, Hb],</code></p>",
        "id": 219381773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607540402
    },
    {
        "content": "<p>Here's a variant in writing it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mockingbird</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bird</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ap</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">Bird</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Bird.Ap</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">forest</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    (the composition condition)</span>\n<span class=\"cm\">    For any two birds A and B, there is a bird C such that</span>\n<span class=\"cm\">    for any bird x, Cx = A(Bx)</span>\n<span class=\"cm\">  -/</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    (the mockingbird condition)</span>\n<span class=\"cm\">    The forest contains a mockingbird M</span>\n<span class=\"cm\">  -/</span>\n<span class=\"o\">(</span><span class=\"n\">mockingbird</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  1. One rumor is that Every bird in the forest is fond of</span>\n<span class=\"sd\">  at least one bird</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">all_birds_fond</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">forest</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.mockingbird</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.comp</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hC</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  2. A bird x is called \"egocentric\" if it is fond of itself.</span>\n<span class=\"sd\">  Prove using C₁ and C₂ that at least one bird is egocentric.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">egocentric_bird_exists</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">forest</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.mockingbird</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">hM</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">all_birds_fond</span> <span class=\"n\">h</span> <span class=\"n\">M</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mockingbird</span>\n</code></pre></div>",
        "id": 219383369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607541055
    },
    {
        "content": "<p>Is <code>inhabited (Bird)</code> undecidable?</p>",
        "id": 219385695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607542120
    },
    {
        "content": "<p>it's false</p>",
        "id": 219385736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542139
    },
    {
        "content": "<p>Looks like <code>Bird</code> wants to be coinductive?</p>",
        "id": 219385931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607542207
    },
    {
        "content": "<p>What's the proof that it's false?</p>",
        "id": 219385981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607542228
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">no_birds</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bird.Ap</span> <span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">no_birds</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 219385993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542232
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">no_Bird</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">no_Bird</span> <span class=\"n\">b2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I gues it's confused by tactic mode?</p>",
        "id": 219386038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607542258
    },
    {
        "content": "<p>you have to actually pattern match</p>",
        "id": 219386140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542302
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bird</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ap</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219386251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1607542338
    },
    {
        "content": "<p>otherwise lean falls back on well founded recursion using a natural measure, which would have worked here except for the <code>cases</code></p>",
        "id": 219386261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542341
    },
    {
        "content": "<p>I love the <code>has_mul</code> trick and also TIL <code>structure</code> - thanks, this is great</p>",
        "id": 219386306,
        "sender_full_name": "Jordan Scales",
        "timestamp": 1607542356
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">no_Bird</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b'</span><span class=\"o\">:</span><span class=\"n\">Bird</span><span class=\"o\">,</span> <span class=\"n\">b'.sizeof</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b.sizeof</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">b'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">no_Bird</span> <span class=\"n\">b'</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IH</span> <span class=\"n\">b2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">well_founded_tactics.default_dec_tac</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219386695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542495
    },
    {
        "content": "<p>So the golfed proofs are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mockingbird</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bird</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ap</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">Bird</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Bird.Ap</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- A bird cannot exist -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">no_Bird</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Bird.Ap</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">no_Bird</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">forest</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mockingbird</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A forest cannot exist -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">no_forest</span> <span class=\"o\">:</span> <span class=\"n\">forest</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">no_Bird</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_birds_fond</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">forest</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">no_Bird</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">egocentric_bird_exists</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">forest</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">no_forest</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mockingbird</span>\n</code></pre></div>\n<p>Which is probably an indication that your theorem statement is wrong</p>",
        "id": 219386908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607542587
    },
    {
        "content": "<p>I haven't looked at the problem statement too carefully but I would guess you can just use a constant instead of an inductive</p>",
        "id": 219387046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542651
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Bird</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Bird.Ap</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bird</span>\n</code></pre></div>",
        "id": 219387102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542680
    },
    {
        "content": "<p>you can also have them be variables in addition to C1 and C2 to the theorems</p>",
        "id": 219387387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607542788
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mockingbird</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Bird</span> <span class=\"bp\">|</span> <span class=\"n\">Bird</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">forest</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Ap</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    (the composition condition)</span>\n<span class=\"cm\">    For any two birds A and B, there is a bird C such that</span>\n<span class=\"cm\">    for any bird x, Cx = A(Bx)</span>\n<span class=\"cm\">  -/</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">Ap</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Ap</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Ap</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    (the mockingbird condition)</span>\n<span class=\"cm\">    The forest contains a mockingbird M</span>\n<span class=\"cm\">  -/</span>\n<span class=\"o\">(</span><span class=\"n\">mockingbird</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">Ap</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Ap</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">forest</span> <span class=\"n\">Bird</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infixl</span> <span class=\"bp\">`*`</span> <span class=\"o\">:=</span> <span class=\"n\">h.Ap</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  1. One rumor is that Every bird in the forest is fond of</span>\n<span class=\"sd\">  at least one bird</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">all_birds_fond</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.mockingbird</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hC</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.comp</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hM</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hC</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">  2. A bird x is called \"egocentric\" if it is fond of itself.</span>\n<span class=\"sd\">  Prove using C₁ and C₂ that at least one bird is egocentric.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">egocentric_bird_exists</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bird</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">hM</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.mockingbird</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">hM</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">all_birds_fond</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mockingbird</span>\n</code></pre></div>",
        "id": 219389019,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607543589
    },
    {
        "content": "<p>Of course that's all valid because there is only one <code>Bird</code>. So I like Mario's <code>constant</code> version more.</p>",
        "id": 219389263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607543729
    },
    {
        "content": "<p>Bundling <code>Ap</code> makes sense in your version <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 219389627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607543903
    },
    {
        "content": "<p>Just add <code>variables {Bird : Type*}</code> instead of the inductive?</p>",
        "id": 219389674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607543935
    },
    {
        "content": "<p>Yeah that works too</p>",
        "id": 219389797,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607543999
    }
]