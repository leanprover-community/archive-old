[
    {
        "content": "<p>Suppose I have an enumerated type <code>A</code> (say with <code>7</code> different constructors) and I wish to define a symmetric function <code>A -&gt; A -&gt; nat</code>.</p>\n<p>The only way I know how to do is to write the definition for all <code>7 * 7 = 49</code> variations on the arguments.</p>\n<p>However, this is rather inefficient. I know that the function I wish to write is symmetric. Is there a way to give Lean only the <code>28</code> different variations and have it fill in the rest automatically by leveraging symmetry?</p>",
        "id": 188346483,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581901497
    },
    {
        "content": "<p>Sure, you can define your relation to be the symmetric closure of a relation <code>R</code> that you define with only 28 inductive constructors</p>",
        "id": 188346759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902111
    },
    {
        "content": "<p>It's not a relation.</p>",
        "id": 188346768,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581902158
    },
    {
        "content": "<p>oh, yeah that won't work without a bit of choice if you want to define a nat function</p>",
        "id": 188346814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902178
    },
    {
        "content": "<p>I guess a tactic could do it</p>",
        "id": 188346821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902201
    },
    {
        "content": "<p>but fundamentally if you have an inductive type with 7 constructors it's difficult to define any binary function without providing 49 pieces of information</p>",
        "id": 188346830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902250
    },
    {
        "content": "<p>Oh. In that case do you think it is fair to demand that this be a new feature?</p>",
        "id": 188346924,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581902425
    },
    {
        "content": "<p>Like I said, a tactic could do it. It's not a lean feature and doesn't make sense as one</p>",
        "id": 188346927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902451
    },
    {
        "content": "<p>As in I can define the function with 49 pieces and then add a proof (that's the part that uses the tactic) that it is indeed symmetric? Or is there a way to use the tactic in the definition itself?</p>",
        "id": 188346968,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581902533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20a.20symmetric.20function/near/188346759\" title=\"#narrow/stream/113489-new-members/topic/Defining.20a.20symmetric.20function/near/188346759\">said</a>:</p>\n<blockquote>\n<p>Sure, you can define your relation to be the symmetric closure of a relation <code>R</code> that you define with only 28 inductive constructors</p>\n</blockquote>\n<p>Even in the case of the relation, I don't think I understand. Won't lean rejection my definition of <code>R</code> by saying it is a non-exhaustive definition?</p>",
        "id": 188346982,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581902590
    },
    {
        "content": "<p>If it's a relation, you can define it inductively as an <code>inductive</code> rather than a <code>def</code> with a definition by cases</p>",
        "id": 188347031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902670
    },
    {
        "content": "<p>in which case it will be false on the cases you omit</p>",
        "id": 188347033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581902686
    },
    {
        "content": "<p>Here is a terrible tactic that does the job:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">match_goals</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">unify</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"bp\">.</span><span class=\"n\">inth</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"bp\">.</span><span class=\"n\">inth</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">set_goals</span> <span class=\"n\">gs</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">cases_symmetric</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span> <span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">ty</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">constructors_of</span> <span class=\"n\">ty</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span>\n  <span class=\"o\">(()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">cases_core</span> <span class=\"n\">a</span> <span class=\"o\">[])</span><span class=\"bp\">;</span> <span class=\"o\">(()</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">cases_core</span> <span class=\"n\">b</span> <span class=\"o\">[]),</span>\n  <span class=\"n\">match_goals</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n    <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">sun</span> <span class=\"bp\">|</span> <span class=\"n\">mon</span> <span class=\"bp\">|</span> <span class=\"n\">tue</span> <span class=\"bp\">|</span> <span class=\"n\">wed</span> <span class=\"bp\">|</span> <span class=\"n\">thu</span> <span class=\"bp\">|</span> <span class=\"n\">fri</span> <span class=\"bp\">|</span> <span class=\"n\">sat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cases_symmetric</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 28 × |- ℕ</span>\n\n  <span class=\"c1\">-- filling with dummy stuff</span>\n  <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_goals</span><span class=\"o\">,</span>\n    <span class=\"n\">gs</span><span class=\"bp\">.</span><span class=\"n\">enum</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n      <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unify</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">wed</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">thu</span> <span class=\"bp\">=</span> <span class=\"mi\">19</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">foo_symm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 188347514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581903755
    },
    {
        "content": "<p>Thanks for the code! This is beyond my current level of understanding so I will get started on trying to unravel what it does.</p>",
        "id": 188348442,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1581905663
    },
    {
        "content": "<p>The interesting part is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n    <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n    <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n    <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>that just creates a list of goal pairs to merge, and then <code>match_goals</code> goes through and unifies these pairwise</p>",
        "id": 188349016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581906974
    },
    {
        "content": "<p>in other words it's just saying \"let goal (1,2) be the same as goal (2,1)\" and so on</p>",
        "id": 188349032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581907077
    },
    {
        "content": "<p>The downside is that you end up with 28 unmarked identical goals and it's up to you to figure out what they correspond to</p>",
        "id": 188349075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581907137
    }
]