[
    {
        "content": "<p>I have a local copy of the tutorial project. In the first_proofs.lean file, I have access to tactics define in mathlib such as library_search. When I make a new file in the same folder, I don't. Is there a magic incantation I am missing?</p>",
        "id": 182942711,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575887645
    },
    {
        "content": "<p>Did you \"open folder\" in vscode?</p>",
        "id": 182942792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575887723
    },
    {
        "content": "<p>Hmm I think so; let me close the VSCode instance and try again.</p>",
        "id": 182942836,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575887761
    },
    {
        "content": "<p>You can tell because the explorer sidebar should show a listing of files in the folder rather than a button saying \"open folder\"</p>",
        "id": 182942898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575887772
    },
    {
        "content": "<p>yes, my sidebar has a listing of folders that includes a bunch of the mathlib source</p>",
        "id": 182942941,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575887808
    },
    {
        "content": "<p>You should open the tutorial folder, the one with <code>leanpkg.toml</code> in it</p>",
        "id": 182942976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575887842
    },
    {
        "content": "<p>I believe the tutorial files are in a <code>src</code> directory inside it. If you create another file in the <code>src</code> directory with extension <code>.lean</code>, it should work</p>",
        "id": 182943079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575887908
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/M8yxxZ-F7J0S5kdNm1cndTFr/vscode.png\" target=\"_blank\" title=\"vscode.png\">vscode.png</a> Here's what my VS Code looks like right now, if it helps.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/M8yxxZ-F7J0S5kdNm1cndTFr/vscode.png\" target=\"_blank\" title=\"vscode.png\"><img src=\"/user_uploads/3121/M8yxxZ-F7J0S5kdNm1cndTFr/vscode.png\"></a></div>",
        "id": 182943179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575887994
    },
    {
        "content": "<p>An important \"magic incantation\" is <code>import tactic</code> at the top of the file, or some import that will transitively include <code>tactic</code>.</p>",
        "id": 182943297,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575888079
    },
    {
        "content": "<p>I have included import tactic and things now work the way I expect them to. Thanks all!</p>",
        "id": 182943397,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888136
    },
    {
        "content": "<p>The first_proofs.lean file  has import data.real.basic which i guess transitively includes tactic</p>",
        "id": 182943450,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888191
    },
    {
        "content": "<p>Yes, essentially any import from mathlib imports a whole lot of tactics (but not all of them).</p>",
        "id": 182943474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888220
    },
    {
        "content": "<p>There are \"core\" tactics imported automatically (like <code>simp</code> and <code>rw</code>), which will get you only so far, and then the community writes other tactics (like <code>ring</code> or <code>linarith</code>) which get put into mathlib and which must be imported manually. [it's analogous to groups being in core so being imported automatically, but modules needing a manual import]</p>",
        "id": 182943567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888288
    },
    {
        "content": "<p>I seem to have some but not all of the tactics listed at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a></p>",
        "id": 182943607,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888324
    },
    {
        "content": "<p>Then things are functioning correctly ;-)</p>",
        "id": 182943633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888346
    },
    {
        "content": "<p>Perhaps that list should explicitly flag which ones are not imported by <code>import tactic</code>. If you type <code>import tactic.linarith</code> you will get a bunch more.</p>",
        "id": 182943724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888391
    },
    {
        "content": "<blockquote>\n<p>I seem to have some but not all of the tactics listed at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a></p>\n</blockquote>\n<p><code>import tactic</code> should get you essentially all of them. Which are you missing? It's likely they should be there.</p>",
        "id": 182943750,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575888412
    },
    {
        "content": "<p>i don't have suggest</p>",
        "id": 182943765,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888426
    },
    {
        "content": "<blockquote>\n<p>Perhaps that list should explicitly flag which ones are not imported by <code>import tactic</code>. If you type <code>import tactic.linarith</code> you will get a bunch more.</p>\n</blockquote>\n<p><code>linarith</code> should be included in <code>import tactic</code>.</p>",
        "id": 182943773,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575888433
    },
    {
        "content": "<p>i do have linarith</p>",
        "id": 182943800,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888466
    },
    {
        "content": "<p>Yeah, <code>suggest</code> was added pretty recently and I'm guessing we forgot to add it to the relevant list.</p>",
        "id": 182943874,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575888508
    },
    {
        "content": "<p><code>import tactic.suggest </code> seems to fix it</p>",
        "id": 182943881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888513
    },
    {
        "content": "<p>If you don't have a tactic, you can always search mathlib for it and import the relevant file</p>",
        "id": 182943889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888524
    },
    {
        "content": "<p>the naming is usually pretty obvious though, e.g. <code>tactic.suggest</code></p>",
        "id": 182943906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888545
    },
    {
        "content": "<p>New users find it hard to search mathlib because by default VS Code doesn't search dependencies</p>",
        "id": 182943921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888559
    },
    {
        "content": "<p>I mean grep for it</p>",
        "id": 182943940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888570
    },
    {
        "content": "<p>New users tend not to be command-line savvy either (at least if they're coming from a maths background)</p>",
        "id": 182943976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888599
    },
    {
        "content": "<p>Or search here: <a href=\"https://leanprover-community.github.io/mathlib_docs/\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 182944034,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575888608
    },
    {
        "content": "<p>If you have mathlib in the <code>_target</code> folder, will vscode's file search look in there?</p>",
        "id": 182944080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888632
    },
    {
        "content": "<p>Rob link: Now that <em>does</em> work! We should perhaps advertise this.</p>",
        "id": 182944091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888638
    },
    {
        "content": "<p>I do happen to know how to use grep, but I like rob lewis's answer a lot</p>",
        "id": 182944099,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888643
    },
    {
        "content": "<p>I actually mean vscode's file search; I don't actually use grep</p>",
        "id": 182944139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888664
    },
    {
        "content": "<blockquote>\n<p>If you have mathlib in the <code>_target</code> folder, will vscode's file search look in there?</p>\n</blockquote>\n<p>If you have followed all the instructions in the mathlib readme to the letter as a new user, then the answer is no</p>",
        "id": 182944160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888676
    },
    {
        "content": "<p>does it work if you specify it in the \"search within\" area? (Don't have a lean project to test atm)</p>",
        "id": 182944261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888730
    },
    {
        "content": "<p>and the reason is this: <a href=\"/user_uploads/3121/aDpOmyJ0VTdV43zcvq7frfE9/blue.png\" target=\"_blank\" title=\"blue.png\">blue.png</a>  -- the button \"ignore system files in your search\" is checked by default</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/aDpOmyJ0VTdV43zcvq7frfE9/blue.png\" target=\"_blank\" title=\"blue.png\"><img src=\"/user_uploads/3121/aDpOmyJ0VTdV43zcvq7frfE9/blue.png\"></a></div>",
        "id": 182944265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888734
    },
    {
        "content": "<p>What makes things worse is that the button is also hidden by default</p>",
        "id": 182944287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888758
    },
    {
        "content": "<p>It's not necessarily a bad default - mathlib is big and you should probably only search in it deliberately</p>",
        "id": 182944325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888795
    },
    {
        "content": "<p>How often is mathlib bumped in the tutorial project?</p>",
        "id": 182944340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575888820
    },
    {
        "content": "<p>That's also a good question -- a new user might not have <code>suggest</code> because it's not there ;-)</p>",
        "id": 182944414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575888856
    },
    {
        "content": "<p>I guess it's bumped whenever someone bumps it. There's nothing automatic set up. It can't really hurt to do it regularly.</p>",
        "id": 182944464,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575888917
    },
    {
        "content": "<p>(to confirm kevin's suspicion, import tactic.suggest doesn't do anything for me)</p>",
        "id": 182944487,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575888932
    },
    {
        "content": "<p>Oh, I checked out Rob's link, and it's a lot better than I last saw</p>",
        "id": 182944581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888983
    },
    {
        "content": "<p>we have a search now!</p>",
        "id": 182944596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575888997
    },
    {
        "content": "<p>Yep, Google got around to indexing the doc pages.</p>",
        "id": 182944633,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575889022
    },
    {
        "content": "<p>I might suggest putting <code>tactic.suggest</code> as the main header though, it's not obvious what file I'm looking at</p>",
        "id": 182944676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889050
    },
    {
        "content": "<p>or how to import it into my project</p>",
        "id": 182944692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889066
    },
    {
        "content": "<p>looks like it's in the &lt;title&gt; but that's not copyable</p>",
        "id": 182944773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889100
    },
    {
        "content": "<p>The module doc at <a href=\"https://github.com/leanprover-community/mathlib/blob/1c4a2966ef25ec82e65337022a0764e87a81d992/src/tactic/suggest.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/1c4a2966ef25ec82e65337022a0764e87a81d992/src/tactic/suggest.lean\">https://github.com/leanprover-community/mathlib/blob/1c4a2966ef25ec82e65337022a0764e87a81d992/src/tactic/suggest.lean</a> is malformed, which is why it's missing a header. But yeah, the path should probably be formatted as an import somewhere on the page.</p>",
        "id": 182944812,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575889139
    },
    {
        "content": "<p>If you want these doc pages to really look good, and search to really work, the library needs to be documented correctly!</p>",
        "id": 182944925,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575889202
    },
    {
        "content": "<p>the header on the sidebar should also have the full path. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/rewrite_all/basic.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactic/rewrite_all/basic.html\">https://leanprover-community.github.io/mathlib_docs/tactic/rewrite_all/basic.html</a> has header \"basic\" which isn't so helpful</p>",
        "id": 182944954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889211
    },
    {
        "content": "<p>Yup. I'll change that to be the full import path.</p>",
        "id": 182944975,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575889231
    },
    {
        "content": "<p>You could put the path in the file header, but that's just going to make the quality dependent on good doc headers, whereas this is something that can be applied uniformly by the doc tool itself</p>",
        "id": 182945099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889323
    },
    {
        "content": "<p>I think it actually looks a bit weird that there is no h1 header in the main pane, it just jumps right into the file header. I'm thinking something like:</p>\n<div class=\"codehilite\"><pre><span></span>&lt;h1&gt;tactic.suggest&lt;/h1&gt;\nfile header...\n</pre></div>",
        "id": 182945429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889597
    },
    {
        "content": "<p>I think it looks pretty natural on files like <a href=\"https://leanprover-community.github.io/mathlib_docs/geometry/manifold/real_instances.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/geometry/manifold/real_instances.html\">https://leanprover-community.github.io/mathlib_docs/geometry/manifold/real_instances.html</a> where the file name isn't a great description of the file contents.</p>",
        "id": 182945647,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575889774
    },
    {
        "content": "<p>I see, you want the file header to actually have an h1 in it. In that case, I would suggest putting the file name as <code>&lt;h2&gt;&lt;code&gt;file.name&lt;/code&gt;&lt;/h2&gt;</code> above the main header</p>",
        "id": 182945769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575889889
    },
    {
        "content": "<p>I'm not sure. I'll add the full path to the right sidebar for sure. Putting it at the top of the page would be duplicating info. It's also visible in the cascading menu on the left, in a slightly different format.</p>",
        "id": 182945965,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575890081
    },
    {
        "content": "<p>I'll experiment, but it'll have to wait until after lunch.</p>",
        "id": 182945969,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575890088
    },
    {
        "content": "<p>That's true. I like the Rust docs: <a href=\"https://doc.rust-lang.org/std/convert/trait.AsRef.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/convert/trait.AsRef.html\">https://doc.rust-lang.org/std/convert/trait.AsRef.html</a> . The path is the main header, while the sidebar only contains subfunctions and a short name. The source link is also on the main header (the [src] link)</p>",
        "id": 182946139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575890223
    },
    {
        "content": "<p>Here's the top 10 results when I search for manifold:</p>\n<div class=\"codehilite\"><pre><span></span>mathlib docs: geometry.manifold.real_instances\nhttps://leanprover-community.github.io/.../manifold/real_instances.html\nWe introduce the necessary bits to be able to define manifolds modelled over ℝ^ n, boundaryless or with boundary or with corners. As a concrete example, we ...\nmathlib docs: tactic.rcases\nhttps://leanprover-community.github.io/mathlib_docs/.../rcases.html\nThe parser/printer uses an &quot;inverted&quot; meaning for the many constructor: rather than representing a sum of products, here it represents a product of sums.\nmathlib docs: tactic.scc\nhttps://leanprover-community.github.io/mathlib_docs/.../scc.html\nStrongly Connected Components. This file defines tactics to construct proofs of equivalences between a set of mutually equivalent propositions. The tactics use ...\nmathlib docs: tactic.lint\nhttps://leanprover-community.github.io/mathlib_docs/.../lint.html\nlint command. This file defines the following user commands to spot common mistakes in the code. #lint : check all declarations in the current file; #lint_mathlib  ...\nmathlib docs: topology.metric_space.gromov_hausdorff\nhttps://leanprover-community.github.io/.../gromov_hausdorff.html\nGromov-Hausdorff distance. This file defines the Gromov-Hausdorff distance on the space of nonempty compact metric spaces up to isometry. We introduces the  ...\nmathlib docs: tactic.abel\nhttps://leanprover-community.github.io/mathlib_docs/.../abel.html\nn₁ + n₂ = n&#39; → a₁ + a₂ = a&#39; → tactic.abel.term n₁ x a₁ + tactic.abel.term n₂ x a₂ = tactic.abel.term n&#39; x a&#39;. Implicit arguments: {α : Type u_1} ...\nmathlib docs: set_theory.surreal\nhttps://leanprover-community.github.io/mathlib_docs/.../surreal.html\nSurreal numbers. The basic theory of surreal numbers, built on top of the theory of combinatorial (pre-)games. A pregame is numeric if all the Left options are ...\nmathlib docs: tactic.ring\nhttps://leanprover-community.github.io/mathlib_docs/.../ring.html\ntactic.ring.horner a₁ x n₁ b₁ * a₂ = aa → tactic.ring.horner aa x n₂ 0 = haa → a₁ * b₂ = ab → b₁ * b₂ = bb → haa + tactic.ring.horner ab x n₁ bb = t ...\nmathlib docs: data.pnat.xgcd\nhttps://leanprover-community.github.io/mathlib_docs/.../xgcd.html\nA term of xgcd_type is a system of six naturals. They should be thought of as representing the matrix [[w, x], [y, z]] = [[wp + 1, x], [y, zp + 1]] together with the vector ...\nmathlib docs: data.num.basic\nhttps://leanprover-community.github.io/mathlib_docs/.../basic.html\nAlternative representation of integers using a sign bit at the end. The convention on sign here is to have the argument to msb denote the sign of the MSB itself, ...\n</pre></div>",
        "id": 182947455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575891430
    },
    {
        "content": "<p>The first one is certainly relevant, but the others not so much. I would have expected more relevant results...</p>",
        "id": 182947468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575891457
    },
    {
        "content": "<p>After all, there are 3 files with \"manifold\" in their name</p>",
        "id": 182947562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575891530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Didn't you have some method to bump mathlib in projects that depend on it? You were working on something like that recently. Could that be used to keep the tutorial project up to date with mathlib? (Bump it once a month, or once week, or so.)</p>",
        "id": 182947767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575891705
    },
    {
        "content": "<p>A google search will try to use pagerank which will be pretty close to useless for us</p>",
        "id": 182949062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575892984
    },
    {
        "content": "<p>I actually find the Rust docs a little confusing, but I don't know the Rust ontology, so maybe that's not surprising. I suspect we're tied more closely to our file structure than they are. There doesn't seem to be a version of our collapsible menu in their docs. But this structure is the main method of organization in mathlib right now.</p>",
        "id": 182949877,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575893804
    },
    {
        "content": "<p>I swapped the sides of the two nav menus, so now the file name appears in full in the top left.</p>",
        "id": 182949905,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575893855
    },
    {
        "content": "<p>It seems more like a title there than in the top right.</p>",
        "id": 182949928,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575893872
    },
    {
        "content": "<p>The collapsible menu is a little bare at the top. Maybe the search box should move over there?</p>",
        "id": 182949992,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575893924
    },
    {
        "content": "<p>Search is using Google's \"site search,\" which is more specific than a generic Google search but much worse than a dedicated search tool. Ideally we'd return results at the declaration level, not at the page level. But we'd have to change the whole hosting setup for that, GitHub Pages only supports static sites.</p>",
        "id": 182950107,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575894033
    },
    {
        "content": "<p>Oh, the left menu isn't a consistent size anymore. I messed something up swapping the sides. Pretend it's always the same width for now.</p>",
        "id": 182950280,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575894199
    },
    {
        "content": "<p>i also find the rust docs to be a bit confusing, but that's perhaps just the fact that i'm not used to them.<br>\npersonally, i've always liked the go docs (e.g. <a href=\"https://godoc.org/github.com/gorilla/websocket\" target=\"_blank\" title=\"https://godoc.org/github.com/gorilla/websocket\">https://godoc.org/github.com/gorilla/websocket</a>), but i'm not sure how well this general style applies to lean.</p>",
        "id": 182950430,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1575894338
    },
    {
        "content": "<p>the current lean docs already look pretty good!</p>",
        "id": 182950524,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1575894453
    },
    {
        "content": "<blockquote>\n<p>(to confirm kevin's suspicion, import tactic.suggest doesn't do anything for me)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> If you installed the tutorial project from the command line with something like</p>\n<div class=\"codehilite\"><pre><span></span>git clone https://github.com/leanprover-community/tutorials.git\ncd tutorials\nleanpkg configure\nupdate-mathlib\n</pre></div>\n\n\n<p>then you could go back to the command line, find your way back into the tutorials directory, and this time type</p>\n<div class=\"codehilite\"><pre><span></span>leanpkg upgrade\nupdate-mathlib\n</pre></div>\n\n\n<p>and you should magically get access to <code>suggest</code> (although it sounds like you'll have to import it still).</p>",
        "id": 182950609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575894525
    },
    {
        "content": "<p>I admit that hierarchical navigation in the Rust docs is not so easy (you can navigate \"modules\" in the left nav but you have to go through a lot of pages), but the search is good enough that I don't really need it most of the time. The main pages talk about a struct and its functions, but that distinction is less clear for us so having file based navigation seems fine. But a good search (even just within identifiers) is very helpful for getting around</p>",
        "id": 182950705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575894592
    },
    {
        "content": "<blockquote>\n<p>[...] Ideally we'd return results at the declaration level, not at the page level. But we'd have to change the whole hosting setup for that, GitHub Pages only supports static sites.</p>\n</blockquote>\n<p>We could also implement the search part in javascript, this still works using static hosting.  IIRC sphinx also uses this approach.</p>",
        "id": 182951110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1575894923
    },
    {
        "content": "<p>That is my thought as well. I'd volunteer but I don't think I can find the time right now</p>",
        "id": 182951218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575895012
    },
    {
        "content": "<p>so I'll just make zero-effort suggestions here :P</p>",
        "id": 182951254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575895042
    },
    {
        "content": "<p>This is way out of my wheelhouse too, heh. CSS is bad enough.</p>",
        "id": 182951280,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575895073
    },
    {
        "content": "<p>lol, you should try to do the search in CSS</p>",
        "id": 182951343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575895112
    },
    {
        "content": "<p>surely it's turing complete by now</p>",
        "id": 182951352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575895131
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/2497146/is-css-turing-complete\" target=\"_blank\" title=\"https://stackoverflow.com/questions/2497146/is-css-turing-complete\">https://stackoverflow.com/questions/2497146/is-css-turing-complete</a></p>",
        "id": 182951452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575895219
    },
    {
        "content": "<p>But I got annoyed enough trying to make the three columns scroll separately.</p>",
        "id": 182951483,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575895256
    },
    {
        "content": "<p>To do JS search, we'd have to have the whole declaration database in JS, right? Or is there some way to pre-index it?</p>",
        "id": 182951821,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575895628
    },
    {
        "content": "<blockquote>\n<p>To do JS search, we'd have to have the whole declaration database in JS, right? Or is there some way to pre-index it?</p>\n</blockquote>\n<p>I think the usual approach is to store a precomputed index as a separate (e.g. JSON) file that is generated when building the documentation, and then load it on demand.</p>",
        "id": 182952185,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1575896015
    },
    {
        "content": "<p>I looked at how the rust docs do it: At the end of view-source:<a href=\"https://doc.rust-lang.org/core/panicking/index.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/core/panicking/index.html\">https://doc.rust-lang.org/core/panicking/index.html</a> there is a script tag going to <a href=\"https://doc.rust-lang.org/search-index1.39.0.js\" target=\"_blank\" title=\"https://doc.rust-lang.org/search-index1.39.0.js\">search-index1.39.0.js</a> which is precomputed during doc generation</p>",
        "id": 182954116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575897613
    },
    {
        "content": "<p>It's marked <code>&lt;script defer src=\"../../search-index1.39.0.js\"&gt;</code> and placed at the end of the file, which is a bit unusual for script tags. I guess there is a lazy loading thing going on</p>",
        "id": 182954213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575897715
    },
    {
        "content": "<p>Hmm. The JSON file used to generate the docs is ~15mb and compresses to 2.5mb. Not all of that is needed for indexing of course. The Rust js index is a much more reasonable 200kb, and I assume they have more to index. So that pre-computation is definitely important.</p>",
        "id": 182968336,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575906439
    },
    {
        "content": "<p>They have full paths for objects plus ~20 characters blurb taken from the docs on the object</p>",
        "id": 182968598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906575
    },
    {
        "content": "<p>I'm thinking we need the full path, the type, and a doc blurb</p>",
        "id": 182968772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906645
    },
    {
        "content": "<p>This is effectively what that 15mb json file has. It also has file position info (which we don't need for search) and module docs (which we do).</p>",
        "id": 182968838,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575906698
    },
    {
        "content": "<p>by blurb I mean cut off at ~20 characters</p>",
        "id": 182968935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906731
    },
    {
        "content": "<p>I don't think you are doing that now</p>",
        "id": 182968948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906739
    },
    {
        "content": "<p>Oh, no. But a lot of doc strings contain useful keywords beyond 20 characters...</p>",
        "id": 182969032,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575906785
    },
    {
        "content": "<p>By \"blurb,\" do you mean it's only including important-seeming keywords?</p>",
        "id": 182969070,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575906803
    },
    {
        "content": "<p>no, it's just the beginning. But they plan for this, and stick important stuff at the beginning</p>",
        "id": 182969112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906826
    },
    {
        "content": "<p>I recall javadoc doing something similar: the first sentence is special and appears in other places so you are encouraged to use it for summary</p>",
        "id": 182969214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906867
    },
    {
        "content": "<p>It seems like it would be almost as effective to just strip common words from the strings.</p>",
        "id": 182969658,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575907036
    },
    {
        "content": "<p>The doc strings are probably a relatively small part of the export right now, too, although hopefully they'll grow. The type info takes a lot more space. We could filter a lot of that too before indexing.</p>",
        "id": 182969771,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575907083
    },
    {
        "content": "<p>\"We.\" I'm saying this like it's something I'm going to do, but this is a project I'd much rather hand off to someone else, heh.</p>",
        "id": 182969824,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575907120
    },
    {
        "content": "<p>The doc blurbs are used both for search and display in the rustdoc case</p>",
        "id": 182971341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575907984
    },
    {
        "content": "<p>when you type, it puts each match on a line with the found instances highlighted in red</p>",
        "id": 182971406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575908021
    },
    {
        "content": "<p>I'm pretty sure this is why the blurbs are so short - more than 20 chars would bust the line length</p>",
        "id": 182971483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575908051
    },
    {
        "content": "<p>oh wait, maybe it doesn't highlight</p>",
        "id": 182971566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575908116
    },
    {
        "content": "<p>I'm not sure it even searches the strings at all.</p>",
        "id": 182971814,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575908263
    },
    {
        "content": "<p>For a random example, <a href=\"https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.port\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.port\">https://doc.rust-lang.org/std/net/enum.SocketAddr.html#method.port</a> shows up if you search <code>sort</code>. But not if you search <code>associated</code>.</p>",
        "id": 182972005,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575908363
    },
    {
        "content": "<p>This Rust website explicitly says where it will search: name, parameters or return type.</p>",
        "id": 182975480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575910429
    },
    {
        "content": "<p>Okay, so I guess the blurbs are just there to give you some context for list items in the search</p>",
        "id": 182976827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575911256
    },
    {
        "content": "<p>If we display name + type (blurb), we could do away with it entirely</p>",
        "id": 182976906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575911296
    },
    {
        "content": "<p>There are complications with searching types (and parameter types). For instance, the doc generator doesn't know the connection between <code>nat</code> and <code>ℕ</code>. As a start, I think we'd be fine searching just declaration names and doc strings, and displaying declaration name, type, and an initial segment of the doc string. We could filter common words out of the doc strings for indexing. So the search data would be tuples (name, doc string keywords, type, doc string blurb) where the latter two are for display only. I think this would still be a much larger index than the Rust index but I'm not sure.</p>",
        "id": 182978471,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575912326
    },
    {
        "content": "<p>Oh, it also needs the source file. That and declaration name are enough to build a link.</p>",
        "id": 182978556,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575912371
    },
    {
        "content": "<p>Ah, but it also needs to know about module docs. So I think it's two-sorted, \"search declarations\" or \"search files.\"</p>",
        "id": 182979674,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575913008
    },
    {
        "content": "<p>This feels more and more like a project for not-me.</p>",
        "id": 182979694,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575913021
    }
]