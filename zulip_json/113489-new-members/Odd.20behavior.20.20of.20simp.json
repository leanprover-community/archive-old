[
    {
        "content": "<p>Hi, I noticed an odd behavior of the <code>simp</code> tactic,  and I don't know what is happening...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ring_invo</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ring_invo</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ring_hom.map_one</span>\n<span class=\"c1\">-- Here simp works fine with `f.to_ring_equiv` but not with `f` alone.</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">f.to_ring_equiv</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">--simplify tactic failed to simplify</span>\n   <span class=\"gr\">sorry</span>\n   <span class=\"o\">}</span>\n\n<span class=\"c1\">-- But here it works fine with `f`  but not with `f.to_ring_equiv`.</span>\n<span class=\"k\">#check</span> <span class=\"n\">ring_invo.involution</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f.to_ring_equiv</span> <span class=\"o\">(</span><span class=\"n\">f.to_ring_equiv</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">--simplify tactic failed to simplify</span>\n   <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 256889883,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1633804848
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_invo\">docs#ring_invo</a> is quite short on lemmas</p>",
        "id": 256890814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633805750
    },
    {
        "content": "<p>Is it a good idea to make these two simp lemmas?</p>",
        "id": 256938236,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1633855600
    }
]