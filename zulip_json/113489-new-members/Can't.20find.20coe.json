[
    {
        "content": "<p>Lean doesn't seem to be able to use the coe I have defined in the following code. I have tried explicitly using lifts but that doesn't seem to be working either.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">impartial_pgame</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">impartial_pgame</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">impartial_pgame</span>\n\n<span class=\"n\">def</span> <span class=\"n\">impartial_pgame_to_pgame</span> <span class=\"o\">:</span> <span class=\"n\">impartial_pgame</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">m</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">impartial_pgame_to_pgame</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">impartial_pgame_to_pgame</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">imartial_pgame_to_pgame_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">impartial_pgame</span> <span class=\"n\">pgame</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">impartial_pgame_to_pgame</span> <span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">subsequent</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">impartial_pgame</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">pgame</span><span class=\"bp\">.</span><span class=\"n\">subsequent</span> <span class=\"n\">G</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 204663964,
        "sender_full_name": "Fox Thomson",
        "timestamp": 1595424149
    },
    {
        "content": "<p>I think you'll have to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to get help with this; I don't even remember a <code>pgame.subsequent</code>.</p>",
        "id": 204673803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595428488
    },
    {
        "content": "<p>(But general, if unsolicited advice: don't bother making coercions... They're nice when they work, but difficult, and best left for later.)</p>",
        "id": 204673890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595428528
    }
]