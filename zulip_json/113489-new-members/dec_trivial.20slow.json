[
    {
        "content": "<p>The following Python code finishes in a quarter of a second:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">):</span>\n    <span class=\"n\">for</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">):</span>\n        <span class=\"n\">for</span> <span class=\"n\">z</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"o\">):</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"mi\">143</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">91</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">77</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">==</span> <span class=\"mi\">2692</span><span class=\"o\">)</span> <span class=\"n\">and</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"mi\">6</span> <span class=\"n\">and</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"mi\">10</span> <span class=\"n\">and</span> <span class=\"n\">z</span> <span class=\"bp\">==</span> <span class=\"mi\">12</span><span class=\"o\">):</span>\n                <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s2\">\"Counterexample\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now, let's try it in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.boolean_ring</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n    <span class=\"mi\">143</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"mi\">91</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"mi\">77</span> <span class=\"bp\">*</span> <span class=\"n\">z.1</span> <span class=\"bp\">=</span> <span class=\"mi\">2692</span> <span class=\"bp\">↔</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span> <span class=\"n\">y.1</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∧</span> <span class=\"n\">z.1</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span>\n<span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>Takes forever. What am I missing?</p>",
        "id": 304252682,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1665876545
    },
    {
        "content": "<p>The Python one evaluates by using a relatively efficient bytecode interpreter but is not a verified computation, but the Lean one (if it terminates) yields a proof while using a much less efficient computation strategy.</p>",
        "id": 304253552,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665877510
    },
    {
        "content": "<p>I haven't tested it, but I would expect the following to evaluate relatively quickly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">,</span>  <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n    <span class=\"mi\">143</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"mi\">91</span> <span class=\"bp\">*</span> <span class=\"n\">y.1</span> <span class=\"bp\">+</span> <span class=\"mi\">77</span> <span class=\"bp\">*</span> <span class=\"n\">z.1</span> <span class=\"bp\">=</span> <span class=\"mi\">2692</span> <span class=\"bp\">↔</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span> <span class=\"n\">y.1</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">∧</span> <span class=\"n\">z.1</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is using a more Python-like evaluation (using the VM compiler), and you can't trust the result in the same way as with the <code>example</code>.</p>",
        "id": 304253616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665877595
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> That was indeed very fast. If I include the <code>eval</code> in a Lean file I guess it's a \"semi-formal\" proof <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 304254567,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1665878718
    },
    {
        "content": "<p>Untested: is <code>by intros x y z, fin_cases x; fin_cases y; fin_cases z; norm_num</code> faster than <code>dec_trivial</code>?</p>",
        "id": 304367425,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665971225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> thanks that's interesting although it also runs slowly for me.</p>",
        "id": 304378129,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1665981677
    },
    {
        "content": "<p>Yeah, any actual proof will almost certainly be slower than <code>#eval</code>, I was just wondering if it was much faster than <code>dec_trivial</code>.</p>",
        "id": 304381964,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665984255
    }
]