[
    {
        "content": "<p>I would like to understand the correspondence between tactics and proof terms a bit better. Consider <code>nat.bit_val</code> theorem :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bit_val</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">bit0_val</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">bit1_val</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>We can get the corresponding proof term using <code>#print</code>, which gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat.bit_val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b.cases_on</span> <span class=\"n\">n.bit0_val</span> <span class=\"n\">n.bit1_val</span>\n</code></pre></div>\n<p>and then if we try to use it solve the theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">my_bit_val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bit</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b.cases_on</span> <span class=\"n\">n.bit0_val</span> <span class=\"n\">n.bit1_val</span>\n</code></pre></div>\n<p>we would get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">b.cases_on</span> <span class=\"n\">_</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">n.bit0_val</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">bit0</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.has_add</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">ff</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>Am I missing something here ? Got the same  result  using<code>set_option pp.implicit true</code>.</p>",
        "id": 282485872,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1652703142
    },
    {
        "content": "<p>It works if you do <code>set_option pp.all true</code> in this case, but unfortunately even this is not guarenteed, in Lean 3 we have the issue that the pretty printer does not always \"round trip\" properly and sometimes extra annotations are needed to fix things up</p>",
        "id": 282486867,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652703750
    },
    {
        "content": "<p>You can experiment a bit with the many <code>pp</code> options to try and get some more readable things that still  work, e.g. <code>set_option pp.numerals true</code> and <code>set_option pp.notation true</code> gets rid of some junk</p>",
        "id": 282486984,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652703835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  thanks for the suggestion. Is there a guaranteed way to get a proof term from tactics ?</p>",
        "id": 282489050,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1652705056
    },
    {
        "content": "<p>Unfortunately I don't know of one, printing with <code>pp.all true</code> works well for not so complicated proofs, and beyond that the terms aren't very readable anyway so it seems to be ok.<br>\nThere is also a <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#show_term\">tactic#show_term</a>, which you can use from within tactic mode, but it suffers from the same issues with more complicated proofs. It is still very useful though</p>",
        "id": 282489286,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652705181
    },
    {
        "content": "<p>Thanks again. We are working on automatic proof term prediction and it would be nice to have a confident way to transform given tactics to proof terms.</p>",
        "id": 282491885,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1652706381
    },
    {
        "content": "<p>Ah okay, if that is your use case you might want to ask  in the <a class=\"stream\" data-stream-id=\"219941\" href=\"/#narrow/stream/219941-Machine-Learning-for-Theorem-Proving\">#Machine Learning for Theorem Proving</a> stream, there may be tools like  <a href=\"https://github.com/jasonrute/lean_proof_recording\">https://github.com/jasonrute/lean_proof_recording</a> that do what you want better than the interactive view</p>",
        "id": 282492391,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652706657
    }
]