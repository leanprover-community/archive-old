[
    {
        "content": "<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> be a field extension and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> be a finite dimensional subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>. I want to show that for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>:</mo><mi>L</mi><mo>→</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma : L \\to L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>,  the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> is finite-dimensional. Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">im_finite_dimensional</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_findim</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E</span><span class=\"o\">):</span>\n<span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">σ.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">σ.to_alg_hom.restrict_domain</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.finite_dimensional_range</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">E</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f.range</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">σ.to_alg_hom</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hax</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hax</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hax</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hax</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>At this point I would like to do something like <code>rw h2 at h</code>, but this doesn't work because <code>h2</code> talks about <code>f</code> and <code>h</code> talks about <code>coe f</code>. I'm not sure how to proceed, but I suspect it must be possible in very few lines from here. Any help would be much appreciated!</p>",
        "id": 266123120,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640545213
    },
    {
        "content": "<p><code>finite_dimensional</code> is defined as <code>module.finite</code>,so <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.finite.of_surjective\">docs#module.finite.of_surjective</a> should do the job</p>",
        "id": 266123632,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640546001
    },
    {
        "content": "<p>It's often the case that a predicate which can be pushed along an isomorphism can also be pushed along a surjection</p>",
        "id": 266125248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640548761
    },
    {
        "content": "<p>I'm having trouble actually getting a surjection <code>E \\to E.map \\sigma</code>. I'm sure this is really straightforward but I can't find a way to define the map</p>",
        "id": 266125633,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640549349
    },
    {
        "content": "<p>We have that surjection already for other subtypes, just not intermediate_field</p>",
        "id": 266131563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640558842
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.map_equiv\">docs#subgroup.map_equiv</a>, it's called something different for submonoid and submodule</p>",
        "id": 266131570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640558854
    },
    {
        "content": "<p>Aha, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.subgroup_equiv_map\">docs#mul_equiv.subgroup_equiv_map</a></p>",
        "id": 266131716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640559081
    },
    {
        "content": "<p>So I guess we want:</p>\n<ul>\n<li><code>ring_equiv.subsemiring_equiv_map</code></li>\n<li><code>ring_equiv.semiring_equiv_map</code></li>\n<li><code>alg_equiv.subalgebra_equiv_map</code></li>\n<li><code>alg_equiv.intermediate_field_equiv_map</code></li>\n</ul>",
        "id": 266131838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640559245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> so you’re saying there isn’t a quick way to do this with current mathlib?</p>",
        "id": 266132578,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640560335
    },
    {
        "content": "<p>The definitions above should ask only be a few lines, they're just missing</p>",
        "id": 266132660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640560475
    },
    {
        "content": "<p>Just copy the approach from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.submonoid_equiv_map/src\">src#mul_equiv.submonoid_equiv_map</a></p>",
        "id": 266132677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640560521
    },
    {
        "content": "<p>A PR adding just those would be great!</p>",
        "id": 266132741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640560629
    },
    {
        "content": "<p>Alright, I’ll do that then. Thanks for your help!</p>",
        "id": 266133815,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640562312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I've done most of it, although I'm not managing to get the <code>commutes'</code> axiom for <code>alg_equiv</code>s. Here's what I have so far: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">im_in_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L'</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">σ</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">E.map</span> <span class=\"n\">σ.to_alg_hom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_im_in_subfield</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L'</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E.map</span> <span class=\"n\">σ.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">σ.symm</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"n\">hax</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hax</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">intermediate_field_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">L'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L'</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">L'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">E.map</span> <span class=\"n\">σ.to_alg_hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">im_in_map</span> <span class=\"n\">E</span> <span class=\"n\">σ</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">σ.symm</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">inv_im_in_subfield</span> <span class=\"n\">E</span> <span class=\"n\">σ</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n   <span class=\"o\">}</span>\n</code></pre></div>\n<p>Can you see a way to close the final goal? p.s. I realise my proof is extremely long compared to the submonoid one you sent me - I don't really understand the syntax in that prove with the <code>_</code>s and the <code>..</code>s. Also I think this situation is probably harder because of the algebra structure.</p>",
        "id": 266165010,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640603737
    },
    {
        "content": "<p><code>def foo := { commutes := sorry, ..bar}</code> means \"reuse all the other fields from <code>bar</code> rather than reproving them\"</p>",
        "id": 266166919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640605914
    },
    {
        "content": "<p>Does that help with proving the <code>commutes'</code> condition? Seems like being a <code>K</code>-algebra is novel to this situation and can't be reused from one of the other constructions</p>",
        "id": 266175497,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640614467
    },
    {
        "content": "<p>You could build the alg_hom version first</p>",
        "id": 266175832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640614653
    },
    {
        "content": "<p>What's the goal state that you're stuck at?</p>",
        "id": 266175904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640614722
    },
    {
        "content": "<p>(I don't have Lean accessible)</p>",
        "id": 266175912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640614732
    },
    {
        "content": "<p>I'm stuck on </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"bp\">⇑</span><span class=\"n\">σ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">σ.to_alg_hom</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 266176161,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640615034
    },
    {
        "content": "<p>Which is pretty obviously true from a maths standpoint, but seems like a type-theoretic nightmare</p>",
        "id": 266176261,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1640615117
    },
    {
        "content": "<p><code>ext</code></p>",
        "id": 266177032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640615853
    },
    {
        "content": "<p>from toying with this, you may need <code>subalgebra.coe_algebra_map</code> for <code>intermediate_field</code>s</p>",
        "id": 266177702,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640616369
    },
    {
        "content": "<p>I would suggest proving this for subalgebra first</p>",
        "id": 266177929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640616485
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ring_equiv.subsemiring_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R.map</span> <span class=\"n\">e.to_ring_hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">e.to_add_equiv.add_submonoid_equiv_map</span> <span class=\"n\">R.to_add_submonoid</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">e.to_mul_equiv.submonoid_equiv_map</span> <span class=\"n\">R.to_submonoid</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ring_equiv.subring_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R.map</span> <span class=\"n\">e.to_ring_hom</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.subsemiring_equiv_map</span> <span class=\"n\">R.to_subsemiring</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">alg_equiv.subalgebra_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">e.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- goal is equality of elements of e(S)</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now an equality of elements of B</span>\n    <span class=\"c1\">-- but syntactically horrible</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- only partly fixes it</span>\n    <span class=\"c1\">-- ↑(⇑(e.to_ring_equiv.subsemiring_equiv_map S.to_subsemiring) (⇑(algebra_map R ↥S) r)) =</span>\n    <span class=\"c1\">--   ⇑(algebra_map R B) r</span>\n    <span class=\"n\">change</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- the cheat way to get it into simp normal form</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">e.to_ring_equiv.subsemiring_equiv_map</span> <span class=\"n\">S.to_subsemiring</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alg_equiv.intermediate_field_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">e.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.subalgebra_equiv_map</span> <span class=\"n\">E.to_subalgebra</span>\n</code></pre></div>\n<p>I got stuck in the same place as Sebastian -- I unstucked myself with a <code>change</code> but should <code>simp</code> be doing that?</p>",
        "id": 266184266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640622054
    },
    {
        "content": "<p>The problem seems to be that the new definitions added does not have accompanying simp lemmas.<br>\nadding <code>@[simps]</code> to <code>ring_equiv.subsemiring_equiv_map</code> and <code>ring_equiv.subring_equiv_map</code> works.</p>",
        "id": 266184610,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640622257
    },
    {
        "content": "<p>You just need a magic <code>@[simps]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">ring_equiv.subsemiring_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">subsemiring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R.map</span> <span class=\"n\">e.to_ring_hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">e.to_add_equiv.add_submonoid_equiv_map</span> <span class=\"n\">R.to_add_submonoid</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">e.to_mul_equiv.submonoid_equiv_map</span> <span class=\"n\">R.to_submonoid</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ring_equiv.subring_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">R</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R.map</span> <span class=\"n\">e.to_ring_hom</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.subsemiring_equiv_map</span> <span class=\"n\">R.to_subsemiring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alg_equiv.subalgebra_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S.map</span> <span class=\"n\">e.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">e.to_ring_equiv.subsemiring_equiv_map</span> <span class=\"n\">S.to_subsemiring</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alg_equiv.intermediate_field_equiv_map</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">E</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E.map</span> <span class=\"n\">e.to_alg_hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.subalgebra_equiv_map</span> <span class=\"n\">E.to_subalgebra</span>\n</code></pre></div>",
        "id": 266184719,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640622362
    },
    {
        "content": "<p>(these are now in <a href=\"https://github.com/leanprover-community/mathlib/pull/11168\">#11168</a>)</p>",
        "id": 266884455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641343502
    }
]