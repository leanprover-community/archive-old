[
    {
        "content": "<p>hi i m new in lean i m reading mathematics in lean, what libraries can i use to prove general vector spaces or if a set is a vector space? because in the book explains for rings but i see those are little different that vector spaces</p>",
        "id": 233829510,
        "sender_full_name": "bumby bumby",
        "timestamp": 1617978253
    },
    {
        "content": "<p>Hi, welcome! We have a quick tour through the linear algebra library of mathlib here: <a href=\"https://leanprover-community.github.io/theories/linear_algebra.html\">https://leanprover-community.github.io/theories/linear_algebra.html</a></p>\n<p>So I understand your question as: \"I have a set V along with some operations <code>+</code> and <code>•</code>, how can I show this is a vector space?\"</p>",
        "id": 233831005,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617978781
    },
    {
        "content": "<p>A \"thing\" isn't a vector space by itself, you have to make it a vector space by defining stuff like addition and multiplication. I think this conversation would be easier if we focussed on a much more precise question.</p>",
        "id": 233831057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617978790
    },
    {
        "content": "<p>You'll probably end up wanting <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector_space\">docs#vector_space</a> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semimodule\">docs#semimodule</a>), but I think it would be valuable for you to expand on your question</p>",
        "id": 233831808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617979004
    },
    {
        "content": "<p>Or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a> since we're starting with a set.</p>",
        "id": 233831979,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617979065
    },
    {
        "content": "<p>exactly</p>",
        "id": 233837851,
        "sender_full_name": "bumby bumby",
        "timestamp": 1617980750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381396\">@bumby bumby</span> Have you played the natural number game? It's a great way to get started with Lean.</p>",
        "id": 233838750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617980945
    },
    {
        "content": "<p>i started reading mathematics_in_lean and is great i started prove small theorems of real numbers</p>",
        "id": 233839200,
        "sender_full_name": "bumby bumby",
        "timestamp": 1617981042
    },
    {
        "content": "<p>interesting i will try thanks</p>",
        "id": 233845336,
        "sender_full_name": "bumby bumby",
        "timestamp": 1617982903
    },
    {
        "content": "<p>hi zulip members, I comment you I m trying prove that the intersection of subspaces of a vector space is another subspace. I was reading some of indexed families in logic and proof book to write the collection of subspaces in lean. I think it is right in my code. I have a little idea to prove. The problem is that I dont know how introduce W as the intersection of the subspaces. I think this should be written in the \"carrier\" part of the code. I would appreciate a lot if you can help me in this part, I give you my code</p>",
        "id": 247388024,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627418418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t14</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>   <span class=\"o\">:=</span> <span class=\"o\">{},</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247388032,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627418422
    },
    {
        "content": "<p>Sure, as you say the carrier should be the intersection of the carriers of the submodules in <code>C</code>, if we write that lean will insert the right coercion from the submodules to sets for us:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t14</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>   <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247389225,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627418966
    },
    {
        "content": "<p>This should really be a <code>def</code> rather than a theorem I guess, as you are reallly defining the intersection of submodules as a submodule here.</p>",
        "id": 247389403,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627419063
    },
    {
        "content": "<p>I think that the morally correct and least confusing way to formalise such a question would be using unbundled subspaces. One could define <code>is_subspace (S : set V)</code> to be the predicate that S is (the underlying subset of) a subspace and then use set lemmas to prove the result. This is not how these things are handled in Lean but it seems to be easier to understand than our approach.</p>",
        "id": 247391894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627419973
    },
    {
        "content": "<p>ok, after intro some hypothesis, I don't know if it's correct but I wanted using the simp only tactic maybe to simplify the general intersections and using rw tactic better, It is posible use simp only tactic with some Inter theorem ? if is not what would be another alternative?</p>",
        "id": 247407445,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627429781
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">t14</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>   <span class=\"o\">:=</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n       <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247407447,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627429787
    },
    {
        "content": "<p>Does <code>simp only</code> do anything at all here? <code>simp</code> is far more likely to be helpful</p>",
        "id": 247436705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627463156
    },
    {
        "content": "<p>hi how are you, i'm trying to prove the following 3 theorems related to subspaces. first I started entering the hypothesis and thesis here I notice that there is a common error, especially when entering the \"if and only if\". Please if someone can help me to see what is wrong and how I can correct it this first part, thank you very much</p>",
        "id": 247718572,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627656955
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/b8tPjb2XnQg-VXLfd_OW_PGk/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/b8tPjb2XnQg-VXLfd_OW_PGk/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/b8tPjb2XnQg-VXLfd_OW_PGk/imagen.png\"></a></div>",
        "id": 247718655,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627656981
    },
    {
        "content": "<p>What exactly do you mean? We can't help you with an error if you don't show the error.</p>",
        "id": 247718767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657055
    },
    {
        "content": "<p>now the codes</p>",
        "id": 247718777,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627657062
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">e18</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>   <span class=\"o\">:=</span> <span class=\"n\">W</span> <span class=\"bp\">⊆</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n\n      <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 247718922,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627657130
    },
    {
        "content": "<p>(ah - you might not be aware there's a \"press enter to send\" checkbox at the bottom right that lets you put multiple lines in a single message)</p>",
        "id": 247718926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657133
    },
    {
        "content": "<p>ok a wil try</p>",
        "id": 247718992,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627657181
    },
    {
        "content": "<p>If you're doing 18, why do you have <code>W ≠ ∅</code> which is an assumption from  17?</p>",
        "id": 247719014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657195
    },
    {
        "content": "<p>You messed up the quantifiers</p>",
        "id": 247719171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657236
    },
    {
        "content": "<p>But the text you are following is pretty sloppy with quantifiers, so this is not too suprising.</p>",
        "id": 247719268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657277
    },
    {
        "content": "<p>the code is of 17 and here is w is empty</p>",
        "id": 247719604,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627657422
    },
    {
        "content": "<p>Why did you call it e18 if it's for 17?</p>",
        "id": 247719641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657437
    },
    {
        "content": "<p>ups is error because in vsc I have with 17 sorry</p>",
        "id": 247719801,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627657490
    },
    {
        "content": "<p>Your syntax errors are:</p>\n<ul>\n<li>Hypotheses needs names. It should be <code>(hW : W ≠ ∅) </code> not <code>(W ≠ ∅) </code></li>\n<li>The format should be <code>statement := proof</code> not <code>statement proof</code>- you're missing the <code>:=</code></li>\n</ul>",
        "id": 247719852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657509
    },
    {
        "content": "<p>I think the math errors are much more serious here.</p>",
        "id": 247719922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627657539
    },
    {
        "content": "<p>I agree the math errors are also bad, but there's no hope of getting the binders right if you don't even know the syntax for binders well enough.</p>",
        "id": 247720065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657589
    },
    {
        "content": "<p>Part of your trouble here is that <code>submodule</code> is not used in the same way as \"is a submodule\". A rough translation of \"is a submodule\" is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The set `W` is a submodule of `V` if there exists a submodule `W'` whose elements are equal to</span>\n<span class=\"sd\">`W`. -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">is_submodule</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">W'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">W'</span>\n</code></pre></div>",
        "id": 247721128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627657961
    },
    {
        "content": "<p>the part of carrier until the end is correct?</p>",
        "id": 247723951,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627659289
    },
    {
        "content": "<p>Until you have the statement written down, that question isn't even meaningful - right now it's nonsense. You should start off by writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">e17</span> <span class=\"o\">(</span><span class=\"n\">your</span> <span class=\"n\">assumptions</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">your_statement</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Only once lean accepts that you should you try to replace the <code>sorry</code> with a proof.</p>",
        "id": 247724371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627659509
    },
    {
        "content": "<p>ok I will try</p>",
        "id": 247724609,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627659643
    },
    {
        "content": "<p>amm i tried it but I keep getting errors  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">e17</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"n\">set</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">W'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">W'</span> <span class=\"bp\">↔</span> <span class=\"n\">W</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 247730521,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627662401
    },
    {
        "content": "<p><code>(W set : V)</code> means \"let <code>W</code> be a <code>V</code> and let <code>set</code>be a <code>V</code>\"</p>",
        "id": 247731051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627662669
    },
    {
        "content": "<p>Esteban, I think you need to work  much more on the basic syntax of Lean before trying to prove anything in linear algebra. Did you try any of the learning resources listed on <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a>?</p>",
        "id": 247731249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627662770
    },
    {
        "content": "<p>Otherwise you'll only gain frustration.</p>",
        "id": 247731290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1627662789
    },
    {
        "content": "<p>i trying proof set theory and with help few linear algebra</p>",
        "id": 247731972,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627662988
    },
    {
        "content": "<p>Lean has helped me to be more precise in the mathematical demonstrations like today that in the book they do not mention quantifiers or Eric Wieser's explanation of the sub-modules, thanks. I have a confusion, for each github project it is advisable to create an independent project in lean, right?</p>",
        "id": 247733753,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1627663797
    },
    {
        "content": "<p>I think you're running into trouble because you're having to learn the lean syntax <em>and</em> the mathlib linear algebra library <em>and</em> what it means to state theorems precisely all at once. I agree with Patrick, you would do well to try out one of the many lean tutorial / exercise projects rather than picking your own problems to formalize.</p>",
        "id": 247735819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627664820
    },
    {
        "content": "<p>Could you please tell me if the following reasoning is correct? To understand the theorem 1.9 red underline, I supposed start reasoning from the thesis of the theorem 1.5 (  stating that span (beta) contains span (S) = V) like \"apply\" tactic in lean, so to prove this thesis I need to prove the hipothesis, that I think is \"show that S is subset of span(beta)\", is correct this backward reasonning? thank you for your answers <a href=\"/user_uploads/3121/_GKyihZfWidkdTDcynIDJ3In/imagen.png\">imagen.png</a> <a href=\"/user_uploads/3121/P1sBAh4HocJwZh643pju2tbm/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/_GKyihZfWidkdTDcynIDJ3In/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/_GKyihZfWidkdTDcynIDJ3In/imagen.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/P1sBAh4HocJwZh643pju2tbm/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/P1sBAh4HocJwZh643pju2tbm/imagen.png\"></a></div>",
        "id": 266255946,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1640695009
    },
    {
        "content": "<p>Have you managed to <em>state</em> theorem 1.9 in lean?</p>",
        "id": 266256995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640695950
    },
    {
        "content": "<p>not yet though i wish i could. First I wanted to see if my reasoning was correct and maybe then pass it on Lean</p>",
        "id": 266257703,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1640696631
    },
    {
        "content": "<p>The informal proof seems correct to me. Just be careful that <code>β</code> in Theorem 1.9 corresponds to <code>S</code> in Theorem 1.5</p>",
        "id": 266263511,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640701594
    },
    {
        "content": "<p>IMO, the part that is underlined in red will be easy to formalize. I am more worried about not knowing how to formalize the local definition of <code>β</code>.</p>",
        "id": 266263782,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640701826
    }
]