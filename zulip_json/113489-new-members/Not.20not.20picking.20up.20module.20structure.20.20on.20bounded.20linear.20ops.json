[
    {
        "content": "<p>I'm working on a construction involving a non-unital C*-algebra A but I am not sure how to make the ℂ-module structure on <code>A →L[ℂ] A </code>.</p>\n<p>Here is how I'm modelling A and my imports.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.operator_norm</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.algebra</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">ennreal</span>\n<span class=\"kn\">local</span> <span class=\"kd\">postfix</span> <span class=\"bp\">`⋆`</span><span class=\"o\">:</span><span class=\"n\">std.prec.max_plus</span> <span class=\"o\">:=</span> <span class=\"n\">star</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_unital_normed_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">cstar_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 282360669,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652545479
    },
    {
        "content": "<p>The instance seems to be called <code>continuous_linear_map.module </code> but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_linear_map.module</span>\n</code></pre></div>\n<p>fails because Lean complains that it can't find <code>has_continuous_const_smul ℂ A</code>. I don't know anything about how C^* algebras are implemented in Lean (in particular I have absolutely no idea whether your variables are OK) but my guess is that it's saying that, given your choice, it doesn't know why C acts continuously on A (so in particular it can't make the module structure because it can't prove that the C-action on linear maps preserves continuity).</p>",
        "id": 282361806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652546893
    },
    {
        "content": "<p>There is a instance of normed_space defined in the op norm file which extends module and I think my assumptions are stronger than those needed.</p>",
        "id": 282363368,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652549063
    },
    {
        "content": "<p>though it could  be they aren't in quite the right form</p>",
        "id": 282363403,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652549146
    },
    {
        "content": "<p>It feels like that <code>has_continuous_const_smul</code> should be coming from the <code>normed_space</code> instance</p>",
        "id": 282376155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652568116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Not.20not.20picking.20up.20module.20structure.20.20on.20bounded.20linear.20ops/near/282376155\">said</a>:</p>\n<blockquote>\n<p>It feels like that <code>has_continuous_const_smul</code> should be coming from the <code>normed_space</code> instance</p>\n</blockquote>\n<p>I've tried using continuous_linear_map.to_x_instance map defn in the operator norm file but lean complains when I give that a try</p>",
        "id": 282377035,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652569461
    },
    {
        "content": "<p>I think the fundamental problem here is that lean is not seeing that <code>A →L[ℂ] A</code> has a norm and at least for now the <code>has_continuous_const_smul</code> stuff is a bit of a red herring.</p>\n<p>For example the assumptions (using <code>continuous_linear_map.to_semi_normed_ring</code>) for <code>A →L[ℂ] A</code> to be a <code>semi_normed_ring</code> are the following :</p>\n<ul>\n<li>A is a <code>semi_normed_group</code>( A being a <code>non_unital_normed_ring</code> should, at least morally, be enough)</li>\n<li>ℂ is a <code>nondiscrete_normed_field</code> (holds)</li>\n<li>A is a <code>normed_space</code> over ℂ (explicit assumption).</li>\n</ul>",
        "id": 282477933,
        "sender_full_name": "Cameron Torrance",
        "timestamp": 1652697977
    }
]