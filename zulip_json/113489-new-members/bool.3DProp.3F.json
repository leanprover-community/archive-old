[
    {
        "content": "<p>Why does this type check?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bnotz</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 214287581,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1603443043
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 214287616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603443076
    },
    {
        "content": "<p>(removed)</p>",
        "id": 214287621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603443079
    },
    {
        "content": "<p>What are you surprised about?</p>",
        "id": 214287625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603443083
    },
    {
        "content": "<p>if you <code>#print</code> it you'll see coercions everywhere</p>",
        "id": 214287657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603443110
    },
    {
        "content": "<p>Aha, you are surprised because of the <code>\\not</code> instead of <code>!</code>.</p>",
        "id": 214287717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603443127
    },
    {
        "content": "<p>I pressed return prematurely.</p>",
        "id": 214287754,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1603443156
    },
    {
        "content": "<p>So <code>¬</code> is overloaded?</p>",
        "id": 214287799,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1603443183
    },
    {
        "content": "<p>It's not overloaded, but there is a coercion from <code>bool</code> to <code>Prop</code>, as well as a coercion from decidable <code>Prop</code>s back to <code>bool</code>, and a decidable instance for <code>¬ (b : Prop)</code> for <code>b : bool</code></p>",
        "id": 214287902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603443252
    },
    {
        "content": "<p>Thank you. This confused at least one of my students (and me). Sometimes it would be nice to have a student mode that switches off all the clever stuff.</p>",
        "id": 214288366,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1603443590
    },
    {
        "content": "<p>The up-arrows are the clue I guess. I well remember being totally confused by them :-)</p>",
        "id": 214289673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603444417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113489-new-members/topic/bool.3DProp.3F/near/214288366\">said</a>:</p>\n<blockquote>\n<p>Sometimes it would be nice to have a student mode that switches off all the clever stuff.</p>\n</blockquote>\n<p><code>set_option pp.all true</code> will at least show you everything that's going on under the hood. The printer options stack, so if you want everything but universes you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">off</span>\n</code></pre></div>",
        "id": 214299912,
        "sender_full_name": "Chris B",
        "timestamp": 1603451579
    }
]