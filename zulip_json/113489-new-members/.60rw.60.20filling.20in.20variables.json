[
    {
        "content": "<p>Hi! I'm doing the natural number game.</p>\n<p>I've got a hypothesis+goal state of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"n\">a_n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih</span> <span class=\"o\">:</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a_n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and I'd like to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_left_eq_zero</span>\n  <span class=\"o\">{{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>to rewrite h where a = (a_b * b) and b = b. How can I tell <code>rw</code> what to do?</p>\n<p>The error I get is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_left_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">add_left_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 266651397,
        "sender_full_name": "Nick Lewycky",
        "timestamp": 1641185201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467484\">@Nick Lewycky</span> If you use the <code>@</code> prefix for the lemma, you can give the implicit arguments explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">add_left_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>(disclaimer: I haven't tested this)</p>",
        "id": 266652610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641187163
    },
    {
        "content": "<p>While this will correct the type error, I do know it won't work right, though, since this lemma is that <code>a + b = 0 → b = 0</code>, which isn't an iff.</p>",
        "id": 266652731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641187329
    },
    {
        "content": "<p>Try <code>exact add_left_eq_zero h</code></p>",
        "id": 266652752,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641187400
    },
    {
        "content": "<p>(Hint: <code>add_left_eq_zero h</code> might be interesting.)</p>",
        "id": 266652755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641187406
    },
    {
        "content": "<p>The <code>@</code> prefix works! To my surprise, though, it breaks it up into two goals, one for <code>b = 0</code> and one for <code>a_n * b + b = 0</code>.</p>",
        "id": 266655457,
        "sender_full_name": "Nick Lewycky",
        "timestamp": 1641191922
    },
    {
        "content": "<p>The <code>exact</code> works perfectly. Thanks!</p>\n<p>In general I would like to get better at <code>rw</code>. I have wanted to do things like \"rewrite the 2nd occurrence of pattern\" and still don't know how to do that.</p>",
        "id": 266655472,
        "sender_full_name": "Nick Lewycky",
        "timestamp": 1641191973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467484\">Nick Lewycky</span> <a href=\"#narrow/stream/113489-new-members/topic/.60rw.60.20filling.20in.20variables/near/266655472\">said</a>:</p>\n<blockquote>\n<p>The <code>exact</code> works perfectly. Thanks!</p>\n<p>In general I would like to get better at <code>rw</code>. I have wanted to do things like \"rewrite the 2nd occurrence of pattern\" and still don't know how to do that.</p>\n</blockquote>\n<p>if you are not playing the Natural Number Game, you can use the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite%20/%20nth_rewrite_lhs%20/%20nth_rewrite_rhs\">nth_rewrite</a> tactic. this doesn't work in the Natural Number Game. you have to <a href=\"https://leanprover-community.github.io/extras/conv.html\">use the <code>conv</code> mode</a></p>",
        "id": 266655597,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1641192151
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266656750,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641193761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467484\">@Nick Lewycky</span> What you observed is that when <code>rw</code> rewrites using a lemma, the arguments to the lemma can appear as additional goals if Lean doesn't otherwise figure them out.</p>\n<p>In your case, <code>@add_left_eq_zero (a_n * b) b</code> ends up having the type <code>(a_n * b) + b = 0 → b = 0</code>, and <code>(a_n * b) + b = 0</code> is considered to be the argument for a <code>b = 0</code> rewrite. You should have seen that for the <code>b = 0</code> goal that the <code>h</code> hypothesis is <code>a_n * 0 + 0 = 0</code>, and in the <code>(a_n * b) + b = 0</code> goal all the hypotheses are unchanged (since you still would need to prove this is true to be able to have used the rewrite -- Lean makes sure that even if you prove things out of order like this, everything assembles into a valid proof in the end).</p>",
        "id": 266660782,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641198086
    }
]