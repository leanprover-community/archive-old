[
    {
        "content": "<p>Dear All,</p>\n<p>is the lemma below already in mathlib, in one form or another?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zmod.pred_eq_neg_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n.pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233347083,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725387
    },
    {
        "content": "<p>This is false for <code>n = 0</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 233347289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617725472
    },
    {
        "content": "<p>Is it?  I thought that for <code>n=0</code> <code>zmod 0</code> was the zero ring, no?</p>",
        "id": 233347352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725504
    },
    {
        "content": "<p>Nope, that's <code>zmod 1</code>.</p>",
        "id": 233347432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617725528
    },
    {
        "content": "<p>I thought that they were the same!</p>",
        "id": 233347449,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725538
    },
    {
        "content": "<p><code>zmod 0</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>0</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/0\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. It's actually defeq to <code>int</code></p>",
        "id": 233347452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617725539
    },
    {
        "content": "<p>ah, so it is not finite!!</p>",
        "id": 233347479,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725549
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 233347507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725561
    },
    {
        "content": "<p>You need <code>[fact (0 &lt; n)]</code></p>",
        "id": 233347546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617725575
    },
    {
        "content": "<p>So, this one says what I think it does?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zmod.pred_eq_neg_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n.pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233347727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725648
    },
    {
        "content": "<p>(and, besides, is true?)</p>",
        "id": 233347772,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725663
    },
    {
        "content": "<p>so, is it <code>fin 0</code> that is the zero ring?</p>",
        "id": 233347848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725699
    },
    {
        "content": "<p>(or maybe <code>fin 0</code> is even empty...)</p>",
        "id": 233347888,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725712
    },
    {
        "content": "<p>fin 0 has 0 elements!</p>",
        "id": 233347899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617725717
    },
    {
        "content": "<p>Yes, I think so. You can now prove it using <code>cases n</code>, and then discharge the first goal using the <code>fact</code>.</p>",
        "id": 233347908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617725719
    },
    {
        "content": "<p>fin n has n elements, zmod n is Z/nZ.</p>",
        "id": 233347960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617725742
    },
    {
        "content": "<p>Ok, I actually like these conventions!  For some reasons, I was convinced that the conventions around <code>zmod 0</code> and <code>fin 0</code> were iffy...  but they are not!</p>",
        "id": 233348027,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617725764
    },
    {
        "content": "<p>For completeness, here is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zmod.pred_eq_neg_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n.pred</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"n\">h.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_eq_zero_iff_eq_neg.mp</span> <span class=\"o\">(</span><span class=\"n\">zmod.nat_cast_self'</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or even in equation compiler form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zmod.pred_eq_neg_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n.pred</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">add_eq_zero_iff_eq_neg.mp</span> <span class=\"o\">(</span><span class=\"n\">zmod.nat_cast_self'</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 233433540,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617773273
    }
]