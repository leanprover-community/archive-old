[
    {
        "content": "<p>There's a theorem <code>absurd : ∀ {a b : Prop}, a → ¬a → b</code>. For decidable equality (like <code>Nat</code>), you can use <code>by decide</code> as in <code>example : ¬1 = 2 := by decide</code>. There are also <code>noConfusion</code> declarations for inductive types, which you might need elsewhere. <code>&lt;type&gt;.noConfusion</code> is the primitive for showing that an inductive type's constructors are injective and disjoint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- or just this, but it might be less clear.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.noConfusion</span>\n</code></pre></div>",
        "id": 275071449,
        "sender_full_name": "Chris B",
        "timestamp": 1647051813
    },
    {
        "content": "<p>In the future, you're probably better off posting in the <code>new members</code> stream and not the <code>rss</code> stream.</p>",
        "id": 275071581,
        "sender_full_name": "Chris B",
        "timestamp": 1647051974
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss/topic/lean4.20newbie\">#rss &gt; lean4 newbie</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 275072273,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647053070
    },
    {
        "content": "<p>A question about lean 4 syntax. I'd like to illustrate this with a basic example of a vector.<br>\nFor starters the following type checks correctly as it should:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cons</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>When replacing the <code>Nat</code> in the first line with <code>\\N</code>, it still typechecks, which makes sense because <code>\\N</code> is synonymous with <code>Nat</code>(<a href=\"https://leanprover.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html\">https://leanprover.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html</a>) (I am aware this isn't specific to lean 4 but I couldn't find anything equivalent) </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cons</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However replacing the Nat inside Cons with <code>\\N</code> yields a type error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Empty</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Cons</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">succ</span> <span class=\"n\">x</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>which must mean <code>\\N</code> and <code>Nat</code>are not seen as synonymous here. Why is this happening, has something changed in lean 4 and <code>\\N</code> and <code>Nat</code> are no longer synonymous? If so, why did the second example type check correctly?</p>",
        "id": 275075489,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1647058015
    },
    {
        "content": "<p>The <code>ℕ</code> is no longer associated with <code>Nat</code> by default (it still is in Mathlib). The second example doesn't type check for me on milestone 3 so I assume we're using different versions, but I think the rest of what you're seeing is a consequence of the <code>autoImplicit</code> feature and some of the relaxed error reporting around that.</p>",
        "id": 275109456,
        "sender_full_name": "Chris B",
        "timestamp": 1647108483
    },
    {
        "content": "<p>Hi, i'm trying to make a simple mutual recursion but i'm getting an strange error with the assumption tatic. <a href=\"/user_uploads/3121/MpDVaLBJLrOhFYE_cku027Hh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MpDVaLBJLrOhFYE_cku027Hh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/MpDVaLBJLrOhFYE_cku027Hh/image.png\"></a></div>",
        "id": 277921806,
        "sender_full_name": "Chiyoku",
        "timestamp": 1649182680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481858\">@Chiyoku</span> That doesn't look like a newbie issue. You might want to post it in the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> stream.<br>\nAlso, please post text using <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> instead of a screenshot</p>",
        "id": 277927304,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649184726
    },
    {
        "content": "<p>Hey guys, just some silly question from a completely newbie. Naively, I expect the code </p>\n<p>def W : Type := Nat<br>\ndef n : W := 4</p>\n<p>to behave just like</p>\n<p>def n : Nat := 4</p>\n<p>But it returns error, so I suppose something is wrong regarding my understanding of the Type object.<br>\nCan someone explain it?</p>",
        "id": 278846247,
        "sender_full_name": "chensc",
        "timestamp": 1649864581
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>then yes it will behave almost exactly the same.</p>",
        "id": 278846590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649864723
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a><br>\nThis also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 278847021,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649864895
    },
    {
        "content": "<p>Note that the reason it doesnt work per default is that lean will not per default eagerly unfold the definition of W to see that its actually a Nat, that is what the abbrev/reducible do</p>",
        "id": 278847373,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649865045
    },
    {
        "content": "<p>Thanks! However, </p>\n<p>@[reducible] def W : Type := Nat<br>\n#check W.add</p>\n<p>still returns an error.</p>",
        "id": 278847413,
        "sender_full_name": "chensc",
        "timestamp": 1649865065
    },
    {
        "content": "<p>That's for a different reason. you see Lean is not an object oriented language so the function <code>add</code> is not defined on the type <code>Nat</code> but rather in a namespace named <code>Nat</code> which can (in theory) exist without a type <code>Nat</code> so this wont just magically carry over to <code>W</code></p>",
        "id": 278847658,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649865151
    },
    {
        "content": "<p>You can however:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">W</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">W</span>\n</code></pre></div>\n<p>or:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">W.add</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span>\n</code></pre></div>",
        "id": 278847804,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649865227
    },
    {
        "content": "<p>I see. So there is an automatic self-identification between the apriori non-connected \"Nat\" as a type and the namespace \"Nat\"?</p>",
        "id": 278847907,
        "sender_full_name": "chensc",
        "timestamp": 1649865258
    },
    {
        "content": "<p>Yes Lean 4 does have some mechanisms to figure out that a certain function is hidden behind a namespace when called on a type, example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">W.add</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo.add</span> <span class=\"mi\">12</span> <span class=\"bp\">=</span> <span class=\"n\">W.add</span> <span class=\"n\">foo</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 278848198,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649865366
    },
    {
        "content": "<p>Another question: if natural numbers are defined inductively  in an unary basis, is it the case that expressions like \" 5 + 5\" are computed like the mathematical definition of natural numbers\\ordinal arithmetic? As it would be highly inefficient, I guess there is some distinction between computational arithmetic of LEAN as programing language and mathematical numbers? But is so, then what is the correlation between \"5 + 5\" and \"Nat.add 5 5\"?</p>",
        "id": 278857567,
        "sender_full_name": "chensc",
        "timestamp": 1649869170
    },
    {
        "content": "<p>5 + 5 is indeed turned into Nat.add 5 5 by means of notation and type class inference, however while the lean implementation would indeed be highly inefficient the compiled version of Lean 4 does rely on a more efficient internal representation of natural numbers which allows them to be computed basically as efficient as integers in languages like python.</p>",
        "id": 278858097,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649869353
    },
    {
        "content": "<p>This is indicated by the extern attribute on the implementation here: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.add#doc\">docs4#Nat.add</a> which points to the C implementation using the efficient internal representation</p>",
        "id": 278858194,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1649869396
    },
    {
        "content": "<p>I see, thank you!</p>",
        "id": 278858895,
        "sender_full_name": "chensc",
        "timestamp": 1649869681
    },
    {
        "content": "<p>One more question from the TPIL4, regarding the following code:</p>\n<p>universe u v</p>\n<p>def f (α : Type u) (β : α → Type v) (a : α) (b : β a) : (a : α) × β a :=<br>\n  ⟨a, b⟩</p>\n<p>def h1 (x : Nat) : Nat :=<br>\n  (f Type (fun α =&gt; α) Nat x).2</p>\n<p>Is the expression \"(f Type (fun α =&gt; α) Nat x).2\" supposed to be the second coordinate of a generalized ordered pair? And if so, why does the equivalent \"(f Type (fun α =&gt; α) Nat x).1\" return error?</p>",
        "id": 278939472,
        "sender_full_name": "chensc",
        "timestamp": 1649926632
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> will help you format your texts better here on Zulip.<br>\nWhat's the error message?</p>",
        "id": 278943749,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649929367
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">α</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 278943982,
        "sender_full_name": "chensc",
        "timestamp": 1649929516
    },
    {
        "content": "<p>There you go. The code says that <code>h1</code> should output a term of type <code>Nat</code>. Look: <code>def H1 ... : Nat</code>. But the first coordinate of what <code>f</code> returns is of type <code>Type</code>.</p>",
        "id": 278944342,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649929761
    },
    {
        "content": "<p>You can remove that part that explicitly states the output type of <code>h1</code> and let Lean infer it. Then you can use <code>#check h1</code> and you should see the difference between those two alternatives</p>",
        "id": 278944543,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649929920
    },
    {
        "content": "<p>Cool, thanks a lot!</p>",
        "id": 278945015,
        "sender_full_name": "chensc",
        "timestamp": 1649930222
    }
]