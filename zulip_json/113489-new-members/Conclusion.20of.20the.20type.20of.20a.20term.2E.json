[
    {
        "content": "<p>I realise that though I can use it, I don't really understand what <code>apply</code> does.  The docs state that apply tries to match the current goal with the conclusion of the type of the term. Consider the following example. I use <code>apply</code> with the term <code>foo</code>. </p>\n<p>There are two things I could see might be happening here.</p>\n<ol>\n<li>\n<p>The type of <code>foo</code> matches with the type of the goal, up to the types of the variables which are then inferred, closing the goal or</p>\n</li>\n<li>\n<p><code>apply</code> matches the 'conclusion' of the type of <code>foo</code> (which I'd guess to be something like <code>q ∧ p</code>) with the goal. But this is where I'm stuck in understanding what is meant by the current goal. Certainly, <code>(a → b) ∧ (b ∧ a) → (b ∧ a) ∧ (a → b) </code> doesn't seem to match with <code>q ∧ p</code>. So is it that the 'conclusion' of the goal is matched with the conclusion of the type of <code>foo</code> and the proof of the remaining subgoals closed by inference?</p>\n</li>\n</ol>\n<p>Or is it something entirely different?</p>\n<p>I'm sure someone more versed in meta programming than I could understand things perfectly just by reading the source. But is there a simple description of what is meant by the conclusion of the type of a term and (say in the example below) how it matches with the goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h.2</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214132165,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1603327208
    },
    {
        "content": "<p>Basically <code>apply foo</code> means <code>refine foo</code> followed by some <code>_</code>s, the number of which is determined by a heuristic</p>",
        "id": 214132297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603327386
    },
    {
        "content": "<p>The heuristic is: look at the types of the goal and <code>foo</code> and see how many <code>Pi/-&gt;</code>s each one ends in, and subtract the former from the latter.</p>",
        "id": 214132355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603327444
    },
    {
        "content": "<p>This heuristic probably sounds like it would always work, but it doesn't and sometimes <code>apply</code> inserts the wrong number of <code>_</code>s, which we call \"the apply bug\".</p>",
        "id": 214132555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603327669
    },
    {
        "content": "<p>When cleaning up proofs, I often replace <code>apply foo</code> with <code>refine foo</code> and start adding <code>_</code> until lean doesn't complain. This is a good strategy I think when you want to replace a bunch of <code>apply foo</code>s with <code>exact bar</code></p>",
        "id": 214132563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603327677
    },
    {
        "content": "<p>We should add some of the above info to the tactic doc!</p>",
        "id": 214132832,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603327952
    }
]