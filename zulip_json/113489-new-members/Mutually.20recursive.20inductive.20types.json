[
    {
        "content": "<p>Hi all, <br>\nI'm trying to use Lean to do some language design and experimentation.</p>\n<p>I'm just starting with an untyped lambda calculus which looks a little like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">fn</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Fn</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">primval</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Real</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">primval</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">primval</span>\n  <span class=\"bp\">|</span> <span class=\"n\">MyList</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">myexpr</span> <span class=\"bp\">→</span> <span class=\"n\">primval</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">primop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Op</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">primop</span>\n\n  <span class=\"c1\">-- number ops</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Mul</span> <span class=\"o\">:</span> <span class=\"n\">primop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Sub</span> <span class=\"o\">:</span> <span class=\"n\">primop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Div</span> <span class=\"o\">:</span> <span class=\"n\">primop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Add</span> <span class=\"o\">:</span> <span class=\"n\">primop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GT</span> <span class=\"o\">:</span> <span class=\"n\">primop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">LT</span>  <span class=\"o\">:</span> <span class=\"n\">primop</span>\n\n  <span class=\"c1\">-- bool ops</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or</span>  <span class=\"o\">:</span> <span class=\"n\">primop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">And</span>  <span class=\"o\">:</span> <span class=\"n\">primop</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">myexpr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Primval</span> <span class=\"o\">:</span> <span class=\"n\">primval</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Primop</span> <span class=\"o\">:</span> <span class=\"n\">primop</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Let</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">var</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">If</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">myexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">myexpr</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span> <span class=\"bp\">→</span> <span class=\"n\">myexpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Lambda</span> <span class=\"o\">(</span><span class=\"n\">vs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">myexpr</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">myexpr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">myexpr</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Unfortunately,  <code>MyList : list myexpr → primval</code> doesn't have <code>myexpr</code> in scope -- I guess lean doesn't hoist definitions?</p>\n<p>How would you go about doing this? Alternatively, is a resource on writing embedded DSLs in lean?</p>\n<p>Oh, also, where is <code>real</code>?</p>",
        "id": 193912235,
        "sender_full_name": "Sam Stites",
        "timestamp": 1586877103
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>```lean\n[code goes here]\n```\n</pre></div>",
        "id": 193913252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586877504
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n</pre></div>",
        "id": 193913275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586877515
    },
    {
        "content": "<p>you can have mutual inductive types</p>",
        "id": 193913421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586877581
    },
    {
        "content": "<p>In this case, though, the path of least resistance is most likely to \"inline\" <code>primval</code> into <code>myexpr</code>, given that you use it only once</p>",
        "id": 193913526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586877608
    },
    {
        "content": "<p>(A list of any-values-whatsoever isn't so \"primitive\" anyways, is it?)</p>",
        "id": 193913608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586877649
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>! Am I doing something wrong here, then? This example fails to compile.</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I can't inline as I'm aiming for something slightly more complex.</p>",
        "id": 193913768,
        "sender_full_name": "Sam Stites",
        "timestamp": 1586877706
    },
    {
        "content": "<p>Check the section of TPIL on mutual inductive types</p>",
        "id": 193913881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586877741
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#mutual-recursion</a></p>",
        "id": 193913924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586877768
    },
    {
        "content": "<p>they have their own syntax, and they are handled by translation into an indexed inductive type so they are less pleasant to handle</p>",
        "id": 193913950,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586877781
    },
    {
        "content": "<p>and <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types</a></p>",
        "id": 193914008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586877807
    },
    {
        "content": "<p>Perfect! Thank you!</p>",
        "id": 193914038,
        "sender_full_name": "Sam Stites",
        "timestamp": 1586877821
    },
    {
        "content": "<p>don't say you weren't warned <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 193914153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586877868
    },
    {
        "content": "<p>Not long ago, I asked <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  a question about some mutual inductives and his answer was something along the lines of, \"don't ever use them, they don't work\". In that spirit: Has anyone actually used mutual inductives successfully?</p>",
        "id": 193914301,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1586877928
    },
    {
        "content": "<p>(At a high level, the situation is: the Lean <em>kernel</em> does not support mutually inductive types; so either you have to use <code>mutual</code> or manage the translation yourself, each with its own downsides)</p>",
        "id": 193914334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586877950
    },
    {
        "content": "<p>Apparently there is exactly one use in mathlib, in a file I've never looked at</p>",
        "id": 193914478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586878016
    },
    {
        "content": "<p>oh but they are mutually inductive Props, which probably makes life simpler</p>",
        "id": 193914546,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586878052
    },
    {
        "content": "<p>Maybe they are usable if you only care about programming and not proving?</p>",
        "id": 193915224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586878342
    },
    {
        "content": "<p>Heh, these search results are also representative I think: <a href=\"https://github.com/flypitch/flypitch/search?q=mutual&amp;unscoped_q=mutual\" title=\"https://github.com/flypitch/flypitch/search?q=mutual&amp;unscoped_q=mutual\">https://github.com/flypitch/flypitch/search?q=mutual&amp;unscoped_q=mutual</a></p>",
        "id": 193915304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586878385
    },
    {
        "content": "<p>Ultimately, I'm hoping to formally verify some DSLs so hopefully these don't fall apart too fast</p>",
        "id": 193915479,
        "sender_full_name": "Sam Stites",
        "timestamp": 1586878422
    },
    {
        "content": "<p>One use in a subdirectory <code>old/</code>, and a comment in the real code explaining that they are not convenient</p>",
        "id": 193915501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586878426
    },
    {
        "content": "<p>Every attempt I've made to use them has worked at first, and them quickly led to despair (usually the definitional equations not being usable for some reason), and me asking the experts here \"how do I write this without mutual inductives\"?</p>",
        "id": 193976759,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586915145
    }
]