[
    {
        "content": "<p>hi am trying to prove f '' (⋃ i, A i)  ⊆ ⋃ i, f '' A i, but am stuck with the  ⋃ i, A I. this is how far I have gone</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Union</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁.1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁.2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Can some one give me a hint on how to continue?</p>",
        "id": 215920062,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604708259
    },
    {
        "content": "<p>Hi Pedro, do you mind providing a full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that we can copy and paste into our editors?</p>",
        "id": 215920325,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604708497
    },
    {
        "content": "<p>sure, sorry </p>\n<p>am trying to prove the following statement, but am not sure how to deal with ⋃ i, I know the following step in paper but can't figure it out in lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">image</span><span class=\"o\">,</span>\n<span class=\"n\">dsimp</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Union</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁.1</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁.2</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215920655,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604708793
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- unfold image,</span>\n  <span class=\"c1\">-- dsimp,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Union</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁.1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₁.2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- `squeeze_simp` tells us that</span>\n        <span class=\"c1\">-- this uses the lemmas `mem_image` and `mem_Union`</span>\n  <span class=\"n\">cases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"c1\">-- `i ∈ range A` is defeq to `∃ (y : I), A y = i`</span>\n        <span class=\"c1\">-- so we can apply `cases`</span>\n        <span class=\"c1\">-- (I'd normally use `rcases` or `obtain`,</span>\n        <span class=\"c1\">-- which are powered-up versions of `cases`)</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hj</span> <span class=\"n\">at</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215921921,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604709758
    },
    {
        "content": "<p>oh, thx <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , how would you use rcases and obtain? would it make the proof shorter?</p>",
        "id": 215922517,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604710351
    },
    {
        "content": "<p>also, can you explain to me the last line? I remember seeing ; before but I forgot what it does</p>",
        "id": 215922921,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604710785
    },
    {
        "content": "<p>Semi-colon applies the next tactic to all goals generated by the previous one.</p>",
        "id": 215923081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604710945
    },
    {
        "content": "<p><code>rintros</code>, <code>rcases</code> and <code>obtain</code> allow to compress several steps at one by doing recursive cases, or intro and unpack at the same time, and also substitution at the same time. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215923123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604711010
    },
    {
        "content": "<p>Did you follow the <a href=\"https://github.com/leanprover-community/tutorials\">tutorials project</a>? Some of those tricks are explained there.</p>",
        "id": 215923177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604711046
    },
    {
        "content": "<p>You can read tactics documentation at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a></p>",
        "id": 215923227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604711136
    },
    {
        "content": "<p>oh, i didnt use the tutorial, I was following online books, but am going to check it thanks</p>",
        "id": 215923492,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604711414
    },
    {
        "content": "<p>but how come exact ⟨h₄, hf⟩ and split; assumption are both finishing the proof, I mean the first one is obvious but I can't quite get the second</p>",
        "id": 215923526,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604711493
    },
    {
        "content": "<p><code>split; assumption</code> applies <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#split\">tactic#split</a>, which creates two goals, then it applies <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assumption\">tactic#assumption</a> to both of them.</p>",
        "id": 215923900,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604711953
    },
    {
        "content": "<p>ah, that's right, thx for the help guys.</p>",
        "id": 215923973,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604712074
    }
]