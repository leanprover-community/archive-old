[
    {
        "content": "<p>Dear All,</p>\n<p>I am very confused by the lemma below: can anyone help me to prove it?</p>\n<p>I cannot even guess if <code>⊥ + some a</code> is supposed to be <code>0, none, ⊥</code>.  Should I think that <code>⊥</code> is \"- infinity\"?  The monoid already has a zero, so I doubt that it is <code>0</code>...</p>\n<p>Thank you very much!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_monoid</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bot_add_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235839256,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184237
    },
    {
        "content": "<p>The left hand side could also be <code>\\bot + \\bot</code>, right?</p>",
        "id": 235839606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184397
    },
    {
        "content": "<p>So <code>some a</code> could be any term of <code>with_bot</code></p>",
        "id": 235839650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184419
    },
    {
        "content": "<p>Actually, I might have minimised too much the example: I would really like to understand how to work with <code>\\bot</code>...</p>",
        "id": 235839658,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184423
    },
    {
        "content": "<p>Also, you seem to be mixing <code>some</code> and <code>coe : \\a -&gt; with_bot \\a</code></p>",
        "id": 235839697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184442
    },
    {
        "content": "<p>This is a step in a bigger proof and I thought that coercion would have helped me.</p>",
        "id": 235839754,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184470
    },
    {
        "content": "<p>I do not really understand whether <code>\\bot + \\bot</code> could replace the lhs...</p>",
        "id": 235839834,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184491
    },
    {
        "content": "<p>What is the simp normal form? Either you should have coe everywhere, or <code>some</code> everywhere</p>",
        "id": 235839886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184514
    },
    {
        "content": "<p>I have some further assumptions implying monotonicity of addition <em>before</em> I take <code>with_bot</code>, but I cannot get at them...</p>",
        "id": 235839906,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/with_bot/near/235839834\">said</a>:</p>\n<blockquote>\n<p>I do not really understand whether <code>\\bot + \\bot</code> could replace the lhs...</p>\n</blockquote>\n<p>I meant that it is <em>also</em> valid in that case.</p>",
        "id": 235839908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184525
    },
    {
        "content": "<p>So you can generalize the lemma</p>",
        "id": 235839929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184531
    },
    {
        "content": "<p><code>simp</code> constantly fails...</p>",
        "id": 235839935,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184534
    },
    {
        "content": "<p>There should be a simp lemma <code>with_bot.some_eq_coe</code>.</p>",
        "id": 235839992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184560
    },
    {
        "content": "<p>Ah, yes, it is, and in that case, I think that I managed to prove it: I am casing away from <code>with_bot</code> and this is one of the last remaining steps.</p>",
        "id": 235840006,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184567
    },
    {
        "content": "<p>so applying simp should change something?</p>",
        "id": 235840042,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184587
    },
    {
        "content": "<p>Unless the lemma doesn't exist )-;</p>",
        "id": 235840132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184608
    },
    {
        "content": "<p>Ok, assumption <code>bc</code> changes to <code>a \\leq b</code> with simp.</p>",
        "id": 235840200,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184638
    },
    {
        "content": "<p>What is the definition of <code>\\bot + x</code>? Is it <code>\\bot</code> or <code>x</code>?</p>",
        "id": 235840202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184638
    },
    {
        "content": "<p>I guess it must be <code>\\bot</code>, because <code>\\bot + 0 = \\bot</code>.</p>",
        "id": 235840243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184655
    },
    {
        "content": "<p>as far as I can tell, nothing else changes with <code>simp at *</code>.</p>",
        "id": 235840245,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184656
    },
    {
        "content": "<p>There should be simp-lemmas for this.</p>",
        "id": 235840293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184677
    },
    {
        "content": "<p>I have not managed to understand what the definition of <code>bot</code> is: I imagine that it is -infinity, but I really do not know...</p>",
        "id": 235840319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184686
    },
    {
        "content": "<p>So I would suggest that you first write those simp-lemmas, if they are missing.</p>",
        "id": 235840342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184694
    },
    {
        "content": "<p>ok, I will try.   This might still be hard, since I have no idea how to work with <code>bot</code>...</p>",
        "id": 235840385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184715
    },
    {
        "content": "<p>So, hunt down the instance that gives you the addition (using widgets, eg)</p>",
        "id": 235840386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184715
    },
    {
        "content": "<p>I tried with widgets, but I only get to the \"generic\" instance.</p>",
        "id": 235840482,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184741
    },
    {
        "content": "<p>What do you mean with that?</p>",
        "id": 235840519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184759
    },
    {
        "content": "<p>Anyway, I will try to prove the focused lemma that <code>bot + .. = bot</code>.</p>",
        "id": 235840524,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184760
    },
    {
        "content": "<p>My guess is that <code>\\bot + x = \\bot</code> will be <code>by cases x; refl</code></p>",
        "id": 235840624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184790
    },
    {
        "content": "<p>I mean that I have only gotten to seeing that <code>with_bot ... = option ...</code>, but I cannot find the addition</p>",
        "id": 235840638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184796
    },
    {
        "content": "<p>Ok, let me try with that: it might be enough!</p>",
        "id": 235840664,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184810
    },
    {
        "content": "<p>Click on the <code>+</code> to get a widget for that, and then follow the instance chain.</p>",
        "id": 235840686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619184819
    },
    {
        "content": "<p>I tried, I will try again, but, as you said, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bot_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235840936,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184912
    },
    {
        "content": "<p>thanks!</p>",
        "id": 235840971,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184921
    },
    {
        "content": "<p>And then, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bot_add_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bot_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 235841145,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619184977
    },
    {
        "content": "<p><code>bot_add</code> should be a simp-lemma</p>",
        "id": 235841202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185005
    },
    {
        "content": "<p>Ok, it is exactly what I needed, even though I asked something different!  Thanks a lot for realizing what I should have asked and for answering it!</p>",
        "id": 235841499,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619185115
    },
    {
        "content": "<p>Still, I'm very surprised that these lemmas aren't there yet.</p>",
        "id": 235841596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185156
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/ordered_monoid.html#with_bot.add_bot\">https://leanprover-community.github.io/mathlib_docs/algebra/ordered_monoid.html#with_bot.add_bot</a></p>",
        "id": 235841665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185187
    },
    {
        "content": "<p><code>with_bot</code> seems to be having an identity crisis about its simp-normal form</p>",
        "id": 235841744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185206
    },
    {
        "content": "<p>Also, you can weaken the hypotheses at least</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bot_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 235841812,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619185227
    },
    {
        "content": "<p>IMO the only lemmas we should have about <code>none</code> and <code>some</code> are \"convert these to <code>bot</code> and <code>coe</code>\"</p>",
        "id": 235841822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185231
    },
    {
        "content": "<p>Johan, is the issue that I should have <code>add_comm</code> first?</p>",
        "id": 235841930,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619185284
    },
    {
        "content": "<p>Nope, I just linked to the wrong variant.</p>",
        "id": 235841965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185300
    },
    {
        "content": "<p><code>bot_add</code> is listed above it</p>",
        "id": 235841981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619185308
    },
    {
        "content": "<p>I think we're missing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top.has_add</span>\n</code></pre></div>",
        "id": 235842003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185318
    },
    {
        "content": "<p>Which would then completely relax the requirements on that lemma</p>",
        "id": 235842052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185328
    },
    {
        "content": "<p>This also does <em>not</em> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_monoid</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_bot</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 235842114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619185353
    },
    {
        "content": "<p>Yes, that's because as you remark the typeclass on the lemmas is wrong</p>",
        "id": 235842176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185377
    },
    {
        "content": "<p>So simp can't apply them there</p>",
        "id": 235842187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, do you have any plans to pick back up your \"needlessly strong typeclass\" linter?</p>",
        "id": 235842255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619185417
    },
    {
        "content": "<p>Ok, so, I will leave this be for the moment: I am already messed up with the order hierarchy and do not have the strength to pick this fight as well!  I will make do with the lemma <code>bot_add</code> and will introduce more, as needed, now that I understand better what is going on!</p>",
        "id": 235842438,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619185485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> yes, I intend to restart work on it very soon!</p>",
        "id": 235842570,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1619185537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/with_bot/near/235842003\">said</a>:</p>\n<blockquote>\n<p>I think we're missing</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">with_top.has_add</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is just the sort of nonsense which leaks and causes trouble, isn't it? Why not just duplicate the proof?</p>",
        "id": 235885812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619201810
    },
    {
        "content": "<p>Because every definition for <code>with_bot</code> is done that way</p>",
        "id": 235885931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619201865
    },
    {
        "content": "<p>So my suggestion is just copying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_bot.add_monoid/src\">src#with_bot.add_monoid</a>, whether or not what's currently done is actually a good idea</p>",
        "id": 235886279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619201995
    }
]