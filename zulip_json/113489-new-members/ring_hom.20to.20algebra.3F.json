[
    {
        "content": "<p>I'm having a bit of trouble showing that a structure is an algebra. I've got : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">dual_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">jj</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">{}</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">im</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>and have proved a homomorphism <code>incl : R →+* dual_algebra R jj</code> with type  <code>Π (jj : ?M_1), ?M_1 →+* DUAL[?M_1,jj]</code></p>\n<p>I'd like to do : instance : <code>algebra R DUAL[R,jj]  := by ring_hom.to_algebra incl</code><br>\nbut it looks like the   <code>Π (jj : ?M_1)</code>  is causing a type mismatch</p>",
        "id": 213614894,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1602882732
    },
    {
        "content": "<p>I've generally been following Yuri Kudryashov's quaternion algebra : <a href=\"https://github.com/leanprover-community/mathlib/blob/7190444fb254067ff70b6c5942bd219261281cdd/src/data/quaternion.lean\">https://github.com/leanprover-community/mathlib/blob/7190444fb254067ff70b6c5942bd219261281cdd/src/data/quaternion.lean</a><br>\nbut it looks like mathlib's changed out from under it.</p>\n<p>I'm able to get it working up until \"instance : algebra R ℍ[R, c₁, c₂]\" but that's where I get stuck</p>",
        "id": 213615154,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1602882916
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> would help</p>",
        "id": 213615827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602883355
    },
    {
        "content": "<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> as well? In particular it's not clear how you define the ring structure on <code>dual_algebra</code> and/or <code>incl</code>.</p>",
        "id": 213616246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602883618
    },
    {
        "content": "<p>one sec ...</p>",
        "id": 213616449,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1602883741
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kesinger/ed7fb84bdcc78abce09db9c710527cb4\">https://gist.github.com/kesinger/ed7fb84bdcc78abce09db9c710527cb4</a></p>",
        "id": 213616608,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1602883838
    },
    {
        "content": "<p>Thanks. It's just a syntax issue. Just replace the <code>algebra R ...</code> line with the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">DUAL</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">jj</span><span class=\"o\">]</span>  <span class=\"o\">:=</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">incl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 213616775,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602883934
    },
    {
        "content": "<p>The point is that <code>incl</code> has an explicit variable (the <code>jj</code>) that was missing.</p>",
        "id": 213616795,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602883957
    },
    {
        "content": "<p>Also, when you write <code>by ...</code> you're entering tactic mode, which isn't needed here.</p>",
        "id": 213616863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602884019
    },
    {
        "content": "<p>You could also write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">DUAL</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">,</span><span class=\"n\">jj</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">incl</span> <span class=\"n\">jj</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>if you want the sanity check that it's really the <code>jj</code> that's being used.</p>",
        "id": 213616981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602884107
    },
    {
        "content": "<p>ah heck I knew it had to be something simple<br>\nthanks!</p>",
        "id": 213617015,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1602884144
    },
    {
        "content": "<p>No problem!</p>",
        "id": 213617029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602884153
    }
]