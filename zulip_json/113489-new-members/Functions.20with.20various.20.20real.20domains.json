[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> has marked this topic as unresolved.</p>",
        "id": 273317270,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645850122
    },
    {
        "content": "<p>If I had a function defined on <code>R \\to \\R</code> then how could I state that that function is increasing only for <code>3 &lt; x</code> ? I'm using <code>strict_mono</code> for increasing function.</p>",
        "id": 273317324,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645850198
    },
    {
        "content": "<p>I think strict_mono is quantified over the whole type. So, you could roll your own strictly increasing statement for 3 &lt; x, or you could use a subtype (the former will be preferable).</p>",
        "id": 273317528,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645850548
    },
    {
        "content": "<p>What about if I simply wanted a function who's domain was all reals except zero? Is there a way to encode this in the functions type itself?</p>",
        "id": 273317712,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1645850868
    },
    {
        "content": "<p>Subtypes: <code>{ x : real // x ≠ 0}</code>. The downside is that you don't get all the theorems about real numbers because this subtype isn't the real numbers. Often it's better to just give your function a \"garbage value\" where you don't have a definition. Then the function is still total, and it's still defined on the real numbers. Then, in your theorems about that function, you just add the hypothesis <code>x≠0</code>.</p>",
        "id": 273317916,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645851189
    },
    {
        "content": "<p>A great example is the inverse function on the reals sending <code>x</code> to <code>x⁻¹</code>. In lean we have <code>0⁻¹ = 0</code> rather than defining inverse only on nonzero elements. It turns out to be much less painful this way.</p>",
        "id": 273325846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645862406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"367659\">Callum Cassidy-Nolan</span> <a href=\"#narrow/stream/113489-new-members/topic/Functions.20with.20various.20.20real.20domains/near/273317324\">said</a>:</p>\n<blockquote>\n<p>If I had a function defined on <code>R → \\R</code> then how could I state that that function is increasing only for <code>3 &lt; x</code> ? I'm using <code>strict_mono</code> for increasing function.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono_on\">docs#strict_mono_on</a></p>",
        "id": 273327882,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645865005
    },
    {
        "content": "<p>Oh, I forgot about that. Nice.</p>",
        "id": 273342537,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645884044
    }
]