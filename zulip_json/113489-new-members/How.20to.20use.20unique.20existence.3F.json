[
    {
        "content": "<p>Let's say we define the unique existence in the following way:</p>\n<p><code>def unique (S: Type) (P: S → Prop) : Prop := (∃ x:S,P x) ∧ (∀ x y: S, (P x ∧ P y) → x = y)</code></p>\n<p>Now I should be able to get from a proof of <code>h: unique(S, P)</code> to <strong>the</strong> object <code>s: S</code> and the proof <code>p: P s</code>. How do I get to it?</p>",
        "id": 216394798,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605126415
    },
    {
        "content": "<p>You can use the recursor, or one of the \"sugar-added\" approaches to using the recursor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">use_unique</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">S</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">s</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">use_unique'</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">S</span> <span class=\"n\">P</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- directly using recursor</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">use_unique''</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">S</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">Exists.rec_on</span> <span class=\"o\">(</span><span class=\"n\">h.elim_left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">p_of_s</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The recursor for <code>Exists</code> can only eliminate into Prop though, so something that directly extracts them is going to be noncomputable AFAIK. See <code>classical.indefinite_description</code>.</p>",
        "id": 216398758,
        "sender_full_name": "Chris B",
        "timestamp": 1605128642
    },
    {
        "content": "<p>However, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.choose\">docs#finset.choose</a> where a unique existence hypothesis can be used to generate a term of a type.</p>",
        "id": 216399553,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605129140
    },
    {
        "content": "<p>Yes this is noncomputable in general; <code>classical.some</code> is exactly the function you want, or if you're in tactic mode you can use <code>choose</code> (although beware the docstring, it covers a more general usage)</p>",
        "id": 216403111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605131517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20unique.20existence.3F/near/216403111\">said</a>:</p>\n<blockquote>\n<p>Yes this is noncomputable in general; <code>classical.some</code> is exactly the function you want, or if you're in tactic mode you can use <code>choose</code> (although beware the docstring, it covers a more general usage)</p>\n</blockquote>\n<p><del><code>classical.some</code> seem to only give me <code>s: S</code> but not <code>p: P s</code>. Is there a way to get the proof of <code>P s</code>?</del></p>\n<p>Oh actually never mind, I can see there's <code>classical.some_spec</code>. Thank you!</p>",
        "id": 216403760,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605131925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Out of curiosity, what do you mean by it's not computable? Is it because we can proof of the existence may already use classical logic?</p>",
        "id": 216404158,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605132159
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/\">https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/</a></p>",
        "id": 216405503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605133130
    },
    {
        "content": "<p>I was very surprised by this at first. There are computable bijections with noncomputable inverses.</p>",
        "id": 216405545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605133167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352122\">Rui Liu</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20unique.20existence.3F/near/216404158\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"228466\">Chris B</span> <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> Out of curiosity, what do you mean by it's not computable? Is it because we can prove of the existence may already use classical logic?</p>\n</blockquote>\n<p>The definition in the manual is pretty good: \"Functions that make use of <code>choice</code> to produce data are incompatible with a computational interpretation, and do not produce bytecode. They have to be declared <code>noncomputable</code>\".</p>\n<p>The issue is that theorems like <code>indefinite_description</code> use <code>classical.choice</code> to turn your Exists into something that might be in Type.</p>",
        "id": 216408587,
        "sender_full_name": "Chris B",
        "timestamp": 1605135548
    },
    {
        "content": "<p>Unlike in ZFC, in lean there is no advantage to definite description over indefinite description. They are equally nonconstructive</p>",
        "id": 216409729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605136682
    }
]