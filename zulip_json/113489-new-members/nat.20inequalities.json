[
    {
        "content": "<p>What is the most efficient way to solve situations like this? I get a bit lost in all the details of lt, le, negations, and symmetries...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">is_lt</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 134592941,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537878607
    },
    {
        "content": "<p>I am really bad at questions like this still, and I've been playing with Lean for a year. People come up with all sorts of tricks using tactics like <code>cc</code> or <code>finish</code> or a clever application of <code>dec_trivial</code> or whatever, which I never seem to spot.</p>",
        "id": 134593248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537878895
    },
    {
        "content": "<p>Depending on how you obtained the hypotheses <code>h_zero</code> and <code>h_one</code>, it might have been more efficient to use <code>cases</code> on <code>x</code> earlier</p>",
        "id": 134593402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537879024
    },
    {
        "content": "<p>I'm interested in the nat inequalites problem in general, but this came up while trying to match exhaustively on a <code>fin 2</code>. (It's a contrived example, I suppose, but I also run into <code>fin</code> troubles fairly often.)</p>\n<p>The trouble there is I'm not sure how to make the pattern compiler understand I don't need any cases beyond 0 and 1, and if I do fill in the catch-all case, I wouldn't automatically even have <code>x != 0</code> and <code>x != 1</code> with which to prove this.</p>",
        "id": 134593796,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537879414
    },
    {
        "content": "<p>Ohhh, I think I finally understood the useful way to match on them. If I use a <code>⟨n+2, is_lt⟩</code> pattern, I get the <code>is_lt : n + 2 &lt; 2</code> contradiction.</p>",
        "id": 134594159,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537879794
    },
    {
        "content": "<p>Yes exactly</p>",
        "id": 134594218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537879819
    },
    {
        "content": "<p>Now you need to prove that's false, probably something like (made up names) <code>not_lt_of_ge (le_add_self _ _)</code></p>",
        "id": 134594230,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537879844
    },
    {
        "content": "<p>and then combine that with <code>absurd is_lt ...</code></p>",
        "id": 134594252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537879880
    },
    {
        "content": "<p>For your original question you could do <code>cases</code> on <code>x</code>, handle the first case with <code>h_zero</code>, then <code>cases</code> again and handle the first case with <code>h_one</code>, then you'd be at proving <code>n + 2 &lt; 2 -&gt; false</code> again. But those two <code>cases</code> steps are just repeating some case analysis that you've already done, it sounds like (that's why you have <code>h_zero</code> and <code>h_one</code> in the first place).</p>",
        "id": 134594422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537880055
    },
    {
        "content": "<p>Yep, that makes sense. At that point I would just be going the long way around to do the same thing.</p>",
        "id": 134594432,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537880095
    },
    {
        "content": "<p><code>example : ∀ x : ℕ, x &lt; 2 → x ≠ 0 → x ≠ 1 → false := dec_trivial</code></p>",
        "id": 134594920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537880589
    },
    {
        "content": "<p>Aha! sneaky...</p>",
        "id": 134595075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537880725
    },
    {
        "content": "<p>So I guess <code>revert x, exact dec_trivial</code> should work for the original question. That's a good trick, changing the goal to something with a bounded quantifier</p>",
        "id": 134595259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537880897
    },
    {
        "content": "<p>Interesting, I was having trouble making that work in context, didn't realize I needed <code>revert x</code></p>",
        "id": 134595295,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537880972
    },
    {
        "content": "<p>Does that work because <code>\\all n &lt; k, p n</code> has a <code>decidable</code> instance or something tricky like that?</p>",
        "id": 134595371,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537881034
    },
    {
        "content": "<p>Heh, yeah, I see instances like <code>decidable (∀ (n_1 : ℕ) (h : n_1 &lt; n), P n_1 h)</code></p>",
        "id": 134595456,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537881123
    },
    {
        "content": "<p>Yes exactly</p>",
        "id": 134595469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537881141
    },
    {
        "content": "<p>Which is from mathlib, actually, so good thing I finally started using mathlib today...</p>",
        "id": 134595513,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537881193
    },
    {
        "content": "<p>Thanks for all the help. For the record, this is the exercise I gave myself, and it looks pretty minimal now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fin2_equiv_bool</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"err\">≃</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">is_lt</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">is_lt</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n        <span class=\"kn\">end</span><span class=\"o\">,</span>\n\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 134596870,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537882452
    },
    {
        "content": "<p>Although now that we mentioned dec_trivial, it occurs to me I noticed <code>\\all x : fin n, p x</code> is decidable...</p>",
        "id": 134596887,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537882500
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin2_equiv_bool</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"err\">≃</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 134596982,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537882592
    },
    {
        "content": "<p>Thanks! The <code>unfold</code> is the only step I was missing in my attempt</p>",
        "id": 134597033,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537882652
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin2_equiv_bool</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"err\">≃</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 134597181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537882801
    },
    {
        "content": "<p>It seems like the last part of these is failing for me because there's no instance of decidable for <code>\\all b : bool, p b</code></p>",
        "id": 134597623,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537883211
    },
    {
        "content": "<p>did you follow the imports?</p>",
        "id": 134597665,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537883270
    },
    {
        "content": "<p><code>data.equiv.basic</code> doesn't exist for me, I just have <code>data.equiv</code> in mathlib</p>",
        "id": 134597733,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537883327
    },
    {
        "content": "<p>I do have <code>data.fin</code></p>",
        "id": 134597737,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537883336
    },
    {
        "content": "<p>I'll double-check my mathlib dependency... I just added it with <code>leanpkg add leanprover/mathlib</code> earlier today</p>",
        "id": 134597764,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537883387
    },
    {
        "content": "<p>I see, i think it gave me the branch named lean-3.4.1 instead of master</p>",
        "id": 134597839,
        "sender_full_name": "Scott Olson",
        "timestamp": 1537883462
    },
    {
        "content": "<p>Does <code>linarith</code> work for your kind of inequality?</p>",
        "id": 134619039,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537901550
    }
]