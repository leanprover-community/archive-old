[
    {
        "content": "<p>After defining some variables like <code>variables (R: Type*) [integral_domain R]</code> I would quite often make local definitions like \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> be the field of fractions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>\". I use <code>local notation `K` := fraction_ring R</code> for this. </p>\n<p>Is that the correct way or is there a better way to do it? (to be clear, writing <code>K</code> should literally behave like writing <code>fraction_ring R</code>, and just make the statement more readable.)</p>\n<p>Moreover, is there a way to fix a notation during a theorem statement, like  <code>example {R: Type*} [ring R] (**denote K := fraction_ring R**) (p: polynomial K) ... : ... := sorry</code></p>",
        "id": 239568631,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621507323
    },
    {
        "content": "<blockquote>\n<p>Moreover, is there a way to fix a notation during a theorem statement</p>\n</blockquote>\n<p>This is legal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">two</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">two</span> <span class=\"bp\">+</span> <span class=\"n\">two</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 239570104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621508064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> The recommended way is to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">localization_map</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 239570113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508069
    },
    {
        "content": "<p>The problem is that if you use the literal <code>fraction_ring R</code>, then you can not apply your theorems to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>",
        "id": 239570153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508098
    },
    {
        "content": "<p>Because <code>rat</code> is not defined to be <code>fraction_ring int</code>.</p>",
        "id": 239570181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508109
    },
    {
        "content": "<p>Similarly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is not defined to be the <code>fraction_ring</code> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Z_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 239570237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570153\">said</a>:</p>\n<blockquote>\n<p>The problem is that if you use the literal <code>fraction_ring R</code>, then you can not apply your theorems to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>\n</blockquote>\n<p>Oh that's interesting. So do you think there should be eventually a lemma saying <code>ℚ ≅ₐ fraction_ring ℤ</code> or is there a fundamental problem that would prevent that from working?</p>",
        "id": 239570694,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621508381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570113\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> The recommended way is to write something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">localization_map</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For a slight bit of conciseness, you can also write <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fraction_map\">docs#fraction_map</a> instead of <code>localization_map (non_zero_divisors R)</code></p>",
        "id": 239570939,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621508489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570939\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570113\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> The recommended way is to write something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">localization_map</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For a slight bit of conciseness, you can also write <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fraction_map\">docs#fraction_map</a> instead of <code>localization_map (non_zero_divisors R)</code></p>\n</blockquote>\n<p>So I take it that <code>fraction_map</code> and <code>fraction_ring</code> are not fully compatible at the moment?</p>",
        "id": 239571201,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621508611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570694\">said</a>:</p>\n<blockquote>\n<p>So do you think there should be eventually a lemma saying <code>ℚ ≅ₐ fraction_ring ℤ</code> or is there a fundamental problem that would prevent that from working?</p>\n</blockquote>\n<p>No, that can certainly work. But it means you would need to invoke that all the time. And show that what every you proved about <code>fraction_ring</code> is invariant under ring isomorphisms. (Which is always trivial on paper, but not in Lean.</p>",
        "id": 239571232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508635
    },
    {
        "content": "<p>If you use <code>fraction_map</code> then you can apply it to <code>fraction_ring</code>.</p>",
        "id": 239571311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508656
    },
    {
        "content": "<p><code>fraction_ring</code> is an explicit construction of a ring that satisfies the conditions for <code>fraction_map</code>.</p>",
        "id": 239571330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508675
    },
    {
        "content": "<p>But the library also contains the facts that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> satisfies this when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">R = \\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, etc...</p>",
        "id": 239571372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621508699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570694\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/local.20notations.2Fdefinitions/near/239570153\">said</a>:</p>\n<blockquote>\n<p>The problem is that if you use the literal <code>fraction_ring R</code>, then you can not apply your theorems to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>.</p>\n</blockquote>\n<p>Oh that's interesting. So do you think there should be eventually a lemma saying <code>ℚ ≅ₐ fraction_ring ℤ</code> or is there a fundamental problem that would prevent that from working?</p>\n</blockquote>\n<p>This is almost, but not quite due to technical issues, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fraction_ring.alg_equiv_of_quotient\">docs#fraction_ring.alg_equiv_of_quotient</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fraction_ring</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fraction_ring.alg_equiv_of_quotient</span> <span class=\"n\">fraction_map.int.fraction_map</span>\n</code></pre></div>\n<p>But you get an error that ℚ doesn't have the same <code>algebra ℤ</code> structure as <code>fraction_map.int.fraction_map.codomain</code></p>",
        "id": 239571404,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621508710
    },
    {
        "content": "<p>(I have the solution to that technical issue, to assume an <code>algebra R K</code> instance in <code>localization_map</code>, but haven't gotten around to implementing it.)</p>",
        "id": 239571624,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621508806
    },
    {
        "content": "<p>Fun fact: <code>convert</code> is smart enough to fix the coherence issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fraction_ring</span> <span class=\"n\">ℤ</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">fraction_ring.alg_equiv_of_quotient</span> <span class=\"n\">fraction_map.int.fraction_map</span> <span class=\"c1\">-- Works!</span>\n</code></pre></div>",
        "id": 239571868,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621508928
    },
    {
        "content": "<p>nvm</p>",
        "id": 239573604,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621509805
    },
    {
        "content": "<p>Would it be terrible to make a definition like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Frac</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">localization_map</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so I could just work with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Frac</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Frac}(R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Frac</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> everywhere to make it more look like a mathematical proof?</p>",
        "id": 239573983,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621509975
    },
    {
        "content": "<p><code>localization_map</code> is a type of function.</p>",
        "id": 239574275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621510123
    },
    {
        "content": "<p>Specifically the functions from <code>R</code> to a localisation of <code>R</code>.</p>",
        "id": 239574293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621510138
    },
    {
        "content": "<p>You should read</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as \"let <code>R</code> be an integral domain, and <code>K</code> a field that is the fraction field of <code>R</code>. Additionally, let <code>f</code> be the ring hom <code>R -&gt; K</code>.\"</p>",
        "id": 239574459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621510218
    }
]