[
    {
        "content": "<p>Can someone give me a hand with proving the goal from <code>hAgree</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf_of_ab_groups</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">OC</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">si</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">sheafification</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">γ</span><span class=\"o\">,</span>\n<span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">sheafification</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">sheafification</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n<span class=\"n\">hAgree</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">p</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">OC</span><span class=\"bp\">.</span><span class=\"n\">Uis</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">),</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">p</span> <span class=\"bp\">_</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">p</span> <span class=\"n\">hp1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">p</span> <span class=\"n\">hp2</span>\n</pre></div>\n\n\n<p>The details of what sheafification.pre is shouldn't matter, other than that it's a subtype of <code>Π (p ∈ U), stalk_of_ab_groups F p</code></p>",
        "id": 171394085,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563754999
    },
    {
        "content": "<p>I've been trying for like half an hour but nothing has helped</p>",
        "id": 171394089,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563755017
    },
    {
        "content": "<p>Also  <code>p ∈ ⟨(OC.Uis i).val ∩ (OC.Uis j).val, _⟩</code> is definitionally equal to <code>p ∈ (OC.Uis i).val ∩ (OC.Uis j).val</code>, and those are just sets</p>",
        "id": 171394159,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563755145
    },
    {
        "content": "<p>Try <code>dsimp at hAgree</code>?</p>",
        "id": 171394267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755385
    },
    {
        "content": "<p>Oh the functions are equal so you can evaluate them both at p maybe</p>",
        "id": 171394329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755476
    },
    {
        "content": "<p>yes this is the solution</p>",
        "id": 171394332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563755496
    },
    {
        "content": "<p>You could use congr_arg or congr_fun</p>",
        "id": 171394333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755502
    },
    {
        "content": "<p>dsimp doesn't work (neither does simp or dsimp *).  Is there a good way to get lean to evaluate both sides of a goal?</p>",
        "id": 171394335,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563755505
    },
    {
        "content": "<p>ah</p>",
        "id": 171394336,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563755512
    },
    {
        "content": "<p>I forget which one you want</p>",
        "id": 171394339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755520
    },
    {
        "content": "<p><code>congr_fun (congr_fun hAgree p) hp1</code> should work</p>",
        "id": 171394340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563755520
    },
    {
        "content": "<p>Feed it hAgree</p>",
        "id": 171394382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755531
    },
    {
        "content": "<p>Yeah that</p>",
        "id": 171394385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755540
    },
    {
        "content": "<p>Or something like that</p>",
        "id": 171394391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563755555
    },
    {
        "content": "<p>the fact that <code>hp1</code> and <code>hp2</code> are not defeq seems a bit sketchy</p>",
        "id": 171394396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563755578
    },
    {
        "content": "<p>Oh I think you need to apply it to a proof that it's in the intersection, so <code>congr_fun (congr_fun hAgree p) &lt;hp1, hp2&gt;</code></p>",
        "id": 171394455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563755663
    },
    {
        "content": "<p>then the two underscore proofs applied to this should reduce to <code>hp1</code> and <code>hp2</code> respectively</p>",
        "id": 171394462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563755697
    },
    {
        "content": "<p>That worked, thanks</p>",
        "id": 171394480,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563755721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"231775\">@Brendan Seamas Murphy</span> Did you already know about subtypes before learning about sheafification?</p>",
        "id": 171395237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563757051
    },
    {
        "content": "<p>Otherwise this seems to be a pretty hardcore way of learning Hartshorne (-;</p>",
        "id": 171395242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563757081
    },
    {
        "content": "<p>Yes</p>",
        "id": 171395284,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563757130
    },
    {
        "content": "<p>I have formal verification background, I'm just rusty</p>",
        "id": 171395294,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563757152
    },
    {
        "content": "<p>Aha... well it's certainly a nice use of those old skills.</p>",
        "id": 171395378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563757313
    },
    {
        "content": "<p>There's so many little details to keep track of with sheaves that I figured I might as well try and have a computer keep track of them</p>",
        "id": 171395420,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1563757328
    },
    {
        "content": "<p>There has been some talk here about how best to implement sheaves in type theory and in some sense we still don't know the answer.</p>",
        "id": 171415016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563786886
    }
]