[
    {
        "content": "<p>We can prove a formula from assumptions declared as parameters:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n</pre></div>\n\n\n<p>We can also reuse the parameters declaring them as variables:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h₂</span>\n</pre></div>\n\n\n<p>Now imagine that we want to prove the same formula in different many ways using different assumptions. Say that we want to prove <code>A ∨ B</code> from A and also from B.  Below, in the place of the type of the conclusion, we can't use put the term <code>h₁</code>. </p>\n<div class=\"codehilite\"><pre><span></span>variable h₁ : A ∨ B\n\nexample (h : A) : ??? := or.inl h\n</pre></div>\n\n\n<p>So the possible silly question is. How can we use an object (term) in a place expecting a type?</p>",
        "id": 174875790,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567599829
    },
    {
        "content": "<p>use a definition?</p>",
        "id": 174876343,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567600223
    },
    {
        "content": "<p>hum, can you ellaborate on that?</p>",
        "id": 174877100,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567600820
    },
    {
        "content": "<p>Something like <code>def my_conclusion := A ∨ B</code></p>",
        "id": 174877681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567601339
    },
    {
        "content": "<p>but also you can't put <code>h1</code> inside there because those are two different formulas. If I understand you correctly what you actually have is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">p</span> <span class=\"n\">hq</span>\n</pre></div>",
        "id": 174877796,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567601403
    },
    {
        "content": "<blockquote>\n<p>Something like <code>def my_conclusion := A ∨ B</code></p>\n</blockquote>\n<p>In the code below, nor  h₁ or  h₂ works in the example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">def</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">???</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 174877899,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567601514
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">p</span> <span class=\"n\">hq</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p_or_q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p_or_q</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 174878182,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567601717
    },
    {
        "content": "<p>It needs to be <code>h₁ A B</code></p>",
        "id": 174878195,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567601731
    },
    {
        "content": "<blockquote>\n<p>but also you can't put <code>h1</code> inside there because those are two different formulas. If I understand you correctly what you actually have is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"n\">p</span> <span class=\"n\">hq</span>\n</pre></div>\n\n\n</blockquote>\n<p>yes, I don't want to repeat the <code>p ∨ q</code>!</p>",
        "id": 174878272,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567601767
    },
    {
        "content": "<p>ahh maybe you want parameters then</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">p_or_q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p_or_q</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p_or_q</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 174878384,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567601864
    },
    {
        "content": "<p>TL;DR. Suppose I have an encoding of the hamiltonian cycle of a graph in propositional formulas. See <a href=\"https://www.csie.ntu.edu.tw/~lyuu/complexity/2011/20111018.pdf\" target=\"_blank\" title=\"https://www.csie.ntu.edu.tw/~lyuu/complexity/2011/20111018.pdf\">https://www.csie.ntu.edu.tw/~lyuu/complexity/2011/20111018.pdf</a>. An SAT solver can give me one possible path as a truth assignment. I want to use Lean to deduce the model cheking. That is, to show that this assignment is really a model for the formulas. So what I want is to have the formulas declared first and after that introduce a set of theorems showing that all of them can be proved from the AND formula that encodes the truth assignment. Hope the motivation is clear enough.</p>",
        "id": 174878616,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567601993
    },
    {
        "content": "<p>Nice, parameters work. But I need to understand the difference between parameters and variables in a section. I was expecting that declaring the variables with <code>variables {p q : Prop}</code> would also allow me to type only <code>p_or_q</code> instead of <code>p_or_q p q</code>, but that didn't happen.  Actually, maybe I didn't yet understood the difference between introducing a variable and introduce a definition. In <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#introducing-definitions\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#introducing-definitions\">introducing definitions</a> it says: \"declaring constants in the Lean environment is a good way to postulate new objects to experiment with, but most of the time what we really want to do is define objects in Lean and prove things about them.\"</p>",
        "id": 174879877,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567602777
    },
    {
        "content": "<p>parameters vs variables is discussed in chapter 6 of TPIL</p>",
        "id": 174880465,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567603161
    }
]