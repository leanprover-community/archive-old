[
    {
        "content": "<p>Is there a way to state an example or theorem asserting that a certain object has a certain type?<br>\nFor example, I first <code>import data.real.basic</code>, then is there a way to write an example or theorem in Lean asserting that 5 has type <code>\\R</code>?</p>",
        "id": 242318282,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623402293
    },
    {
        "content": "<p><code>example : ℝ := 5</code></p>",
        "id": 242319736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623403134
    },
    {
        "content": "<p>But this doesn't mean \"<code>5</code> has type <code>ℝ</code>\", it means \"lean can parse the syntax <code>5</code> into a term of type <code>\\R</code>\"</p>",
        "id": 242319890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623403222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> The kernel can <em>check</em> that certain expressions have a certain type. But you cannot prove this.</p>",
        "id": 242319894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623403225
    },
    {
        "content": "<p>If you really want a \"proof\", you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">typeof</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">typeof</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 242320007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623403311
    },
    {
        "content": "<p>But note that if lean doesn't have a hint about how to interpret <code>5</code>, it chooses nat not real!</p>",
        "id": 242320086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623403334
    },
    {
        "content": "<p>I don't quite know how to introduce a new function in the proof of a theorem.<br>\nFor example, in the following code, how can I define f to the following function:<br>\nf x = g x if x&lt;=10<br>\nf x = 1 if 11 &lt;= x &lt;= 20<br>\nf x = 0 o/w</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span><span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242321357,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623404106
    },
    {
        "content": "<p>I can do this by using a new {} block with by_cases, but this way seems clumsy...</p>",
        "id": 242321945,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623404446
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">20</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 242321949,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1623404448
    }
]