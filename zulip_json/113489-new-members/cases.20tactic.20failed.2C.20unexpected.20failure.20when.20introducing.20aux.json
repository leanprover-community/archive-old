[
    {
        "content": "<p>In the following, <code>var</code> is a constructor depending on a natural index and a proof of a statement about it. I believe I am not mistaken in thinking that <code>var i hi = var j hj -&gt; i = j</code>, as I am trying to show below. However, my go-to approach of using cases on <code>var i hi = var j hj</code> fails. <br>\nWhat's happening here? Any ideas on how to solve this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ctx.nth</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hi</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hj</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  cases tactic failed, unexpected failure when introducing auxiliary equalities</span>\n<span class=\"cm\">  state:</span>\n<span class=\"cm\">  ctx : context,</span>\n<span class=\"cm\">  σ : type,</span>\n<span class=\"cm\">  i : ℕ,</span>\n<span class=\"cm\">  hi hj : list.nth ctx i = some σ,</span>\n<span class=\"cm\">  h : var i hi = var i hj</span>\n<span class=\"cm\">  ⊢ i = i</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243503549,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624362057
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hi</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hj</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243503707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624362149
    },
    {
        "content": "<p>Thanks, I didn't know about <code>injection</code></p>",
        "id": 243504007,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624362372
    },
    {
        "content": "<p>Shing Tak Lam told me about it last week :-)</p>",
        "id": 243504023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624362389
    },
    {
        "content": "<p>A shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hi</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hj</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">var</span> <span class=\"n\">ctx</span> <span class=\"n\">σ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"n\">var.inj</span>\n</code></pre></div>",
        "id": 243506579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624364089
    }
]