[
    {
        "content": "<p>Hi all. I was messing around with some code, and for some reason it decided to give me some odd errors. Could anybody suggest what I am doing wrong? Below I have attached the error it gives and the file I was using.</p>\n<p><a href=\"/user_uploads/3121/ZG1SeG8y6oANmvj-9S20NuZB/image.png\">image.png</a> <a href=\"/user_uploads/3121/Khg_onn0-gXhxK-t3pnKsMHj/test.lean\">test.lean</a> <a href=\"/user_uploads/3121/V9MTyEaeEwTjeCS_lyecl3ry/test.lean\">test.lean</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZG1SeG8y6oANmvj-9S20NuZB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ZG1SeG8y6oANmvj-9S20NuZB/image.png\"></a></div>",
        "id": 251557218,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630502755
    },
    {
        "content": "<p>Unfortunately we can't tell from your screenshot what the definition of <code>B</code> is as we don't have the file you are working on, it's much easier to help if you can post copy-pasteable code in the form of a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Even if its a full file.</p>",
        "id": 251557872,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630502985
    },
    {
        "content": "<p>If you read the error you will see that it says that <code>B</code> does not want to eat <code>a</code>, it wants to eat something of a different type. If you hover over <code>B</code> you'll see its type and what will be happening is that the first round bracket input for <code>B</code> will not be the thing you want to set as <code>a</code>. But in general, what Alex said.</p>",
        "id": 251558202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630503093
    },
    {
        "content": "<p>If I had to guess though I'd say B had explicit arguments for the type point and line, so you might want <code>B point line a b c</code> instead but its just a guess.</p>",
        "id": 251558266,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630503120
    },
    {
        "content": "<p>That is odd. I thought I had attached the file. Here it is again. <a href=\"/user_uploads/3121/-V1YscU_pIJIuRO8F0yUD5na/test.lean\">test.lean</a></p>",
        "id": 251559356,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630503495
    },
    {
        "content": "<p>You did!  My bad, it just came up next to the link to the image title so I didn't spot it, sorry for the noise <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, Or maybe I didn't see the edit in time as my internet is spotty...</p>",
        "id": 251560091,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630503758
    },
    {
        "content": "<p>Oh my bad too :-) Apologies. What people usually do is post code and errors between triple back-ticks rather than uploading files or screenshots.</p>",
        "id": 251560259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630503826
    },
    {
        "content": "<p>Indeed, if you hover over <code>B</code> then you see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Euclidean_plane.B</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Euclidean_plane</span> <span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">],</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>so the first input which B wants from the user is a term <code>line</code> of type <code>Type</code>, and you gave it a point -- the point is supposed to come later.</p>",
        "id": 251560521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630503919
    },
    {
        "content": "<p>Hmm, but I defined B with point → point → point → Prop. Why would it be expecting a line? Does this have to do with the second line in the code?</p>",
        "id": 251561079,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630504101
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Euclidean_plane</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Euclidean_plane.B</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Euclidean_plane.B : Π (line : Type) [self : Euclidean_plane ?M_1 line], ?M_1 → ?M_1 → ?M_1 → Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>It's to do with design decisions when making structures. <code>Euclidean_plane</code> expects inputs <code>point</code> and <code>line</code>, but <code>B</code> can't possibly figure out what <code>line</code> is because it only takes terms of type <code>point</code> so it asks the user to supply it explicitly.</p>",
        "id": 251561560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630504286
    },
    {
        "content": "<p>By the way you might be interested in my summer student Tianchen Zhao's project on Hilbert's set-up for Euclidean geometry: <a href=\"https://ja1941.github.io/hilberts-axioms/\">https://ja1941.github.io/hilberts-axioms/</a></p>",
        "id": 251562269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630504543
    },
    {
        "content": "<p>Yes that does seem interesting. Thanks for sharing.</p>\n<p>How would I have to modify the class so that I have two objects 'point' and 'line' but that they would not be both required as inputs for the 'B' function?</p>",
        "id": 251564808,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630505401
    },
    {
        "content": "<p>Well the way its set up, there could be multiple different euclidean plane structures on your type e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Euclidean_plane</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"n\">line2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Euclidean_plane</span> <span class=\"n\">point</span> <span class=\"n\">line2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Euclidean_plane</span> <span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinesOnePt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span><span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"bp\">≠</span> <span class=\"n\">l2</span><span class=\"o\">):</span> <span class=\"n\">pointline</span> <span class=\"n\">p</span> <span class=\"n\">l1</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">p</span> <span class=\"n\">l2</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">p'</span> <span class=\"n\">l1</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">p'</span> <span class=\"n\">l2</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"bp\">=</span><span class=\"n\">p'</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hyp1</span> <span class=\"n\">hyp2</span> <span class=\"n\">hyp3</span> <span class=\"n\">hyp4</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">(</span> <span class=\"n\">I1b</span> <span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">h</span> <span class=\"n\">hyp1</span> <span class=\"n\">hyp3</span> <span class=\"n\">hyp2</span> <span class=\"n\">hyp4</span><span class=\"o\">),</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">afs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>  <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--def parallel (l1 l2 : line) : Prop := ∀ (a : point) pointline a l1 → ¬ pointline a l2</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Euclidean_plane</span>\n</code></pre></div>\n<p>which should <code>B</code> refer to the Euclidean plane structure with line or line2?</p>",
        "id": 251569836,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630507117
    },
    {
        "content": "<p>That said, there is a way to achieve this with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/out_param\">docs#out_param</a> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span>  <span class=\"n\">data.set</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kd\">class</span> <span class=\"n\">Euclidean_plane</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"o\">):=</span>\n<span class=\"c1\">-- Equidistance of 4 Points</span>\n\n<span class=\"o\">(</span><span class=\"n\">pointline</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"c1\">--pointline P L means P is on L</span>\n<span class=\"o\">(</span><span class=\"n\">eqd</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Between A B C means B is on the line segment AC</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">dec_B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)]</span>\n\n<span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P2</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P3</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">I1a</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">pointline</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">pointline</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">I1b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"n\">b</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">a</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">b</span> <span class=\"n\">l'</span>  <span class=\"bp\">→</span><span class=\"n\">l</span><span class=\"bp\">=</span><span class=\"n\">l'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">I2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">point</span><span class=\"bp\">×</span><span class=\"n\">point</span><span class=\"o\">),</span> <span class=\"n\">pointline</span> <span class=\"n\">X.1</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">pointline</span> <span class=\"n\">X.2</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">X.1</span><span class=\"bp\">≠</span> <span class=\"n\">X.2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">I3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"o\">,</span> <span class=\"n\">pointline</span> <span class=\"n\">P1</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">pointline</span> <span class=\"n\">P2</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">pointline</span> <span class=\"n\">P3</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Euclidean_plane</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Euclidean_plane</span> <span class=\"n\">point</span> <span class=\"n\">line</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">LinesOnePt</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">p'</span><span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l1</span><span class=\"bp\">≠</span> <span class=\"n\">l2</span><span class=\"o\">):</span> <span class=\"n\">pointline</span> <span class=\"n\">p</span> <span class=\"n\">l1</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">p</span> <span class=\"n\">l2</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">p'</span> <span class=\"n\">l1</span> <span class=\"bp\">→</span>  <span class=\"n\">pointline</span> <span class=\"n\">p'</span> <span class=\"n\">l2</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"bp\">=</span><span class=\"n\">p'</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">hyp1</span> <span class=\"n\">hyp2</span> <span class=\"n\">hyp3</span> <span class=\"n\">hyp4</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">by_contra</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">(</span> <span class=\"n\">I1b</span> <span class=\"n\">p</span> <span class=\"n\">p'</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">h</span> <span class=\"n\">hyp1</span> <span class=\"n\">hyp3</span> <span class=\"n\">hyp2</span> <span class=\"n\">hyp4</span><span class=\"o\">),</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">line</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">afs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>  <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">--def parallel (l1 l2 : line) : Prop := ∀ (a : point) pointline a l1 → ¬ pointline a l2</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Euclidean_plane</span>\n</code></pre></div>",
        "id": 251570125,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630507205
    },
    {
        "content": "<p>Where are you seeing the line \"variables {point : Type} {line line2 : Type} [Euclidean_plane point line2] [Euclidean_plane point line]\"?<br>\nI tried the \"out_param\" idea but it still gives me an error, unless I am misunderstanding something about this.<br>\nSorry I'm so confused, I'm just kind of new to this kind of thing.</p>",
        "id": 251572311,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630507863
    },
    {
        "content": "<p>I modified all lines of your code to give some examples.<br>\nIn the first message, I tried to show why lean is complaining that it wants to be told which line you are talking about, because if you have more variables there are two possible answers</p>",
        "id": 251574223,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630508428
    },
    {
        "content": "<p>For the out param I gave the full file test.lean again after my changes, it compiles on my machine</p>",
        "id": 251574382,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630508478
    },
    {
        "content": "<p>what error are you getting?</p>",
        "id": 251574395,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630508483
    },
    {
        "content": "<p>I would recommend you just write <code>B line a b c</code> for now whenever you want to say that <code>a b c</code> lie on the same line in the euclidean plane structure on <code>point</code> and <code>line</code> that you assume exists</p>",
        "id": 251574610,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630508548
    },
    {
        "content": "<p>Ooooh it seems that I missed the \"include line\" that you put. Thanks a lot, it does work now!</p>",
        "id": 251597665,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630517286
    },
    {
        "content": "<p>If you want <code>line</code> to be implicit, then you can use the <code>{}</code> feature along with <code>out_param</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Euclidean_plane</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Euclidean_plane.B</span>\n<span class=\"c1\">-- Euclidean_plane.B : Π {point line : Type} [self : Euclidean_plane point line], point → point → point → Prop</span>\n</code></pre></div>\n<p>(<code>B []</code> also works, and I forget what the difference is...)</p>",
        "id": 251599054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630517842
    },
    {
        "content": "<p>I would have mentioned this but I couldn't get it to work -- I think that without the <code>out_param</code> it won't do this? Looks like you have it working though.</p>",
        "id": 251623396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630527808
    },
    {
        "content": "<p>Yeah, I had no idea that <code>out_param</code> interacts with <code>{}</code> like this, but nice to see that it does.</p>",
        "id": 251625862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630528913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Code.20not.20compiling/near/251599054\">said</a>:</p>\n<blockquote>\n<p>If you want <code>line</code> to be implicit, then you can use the <code>{}</code> feature along with <code>out_param</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Euclidean_plane</span> <span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Euclidean_plane.B</span>\n<span class=\"c1\">-- Euclidean_plane.B : Π {point line : Type} [self : Euclidean_plane point line], point → point → point → Prop</span>\n</code></pre></div>\n<p>(<code>B []</code> also works, and I forget what the difference is...)</p>\n</blockquote>\n<p>I couldn't quite make this one work. I wonder why...</p>",
        "id": 251799461,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1630623696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407577\">@Andre Hernandez-Espiet (Rutgers)</span> I'm not sure what I observed yesterday... I thought I had tested all four combinations of including or excluding <code>out_param</code> and <code>{}</code>, but I must not have tested <code>out_param</code> by itself. Sorry about that.  It seems like <code>out_param</code> is all you need to make <code>B</code> take <code>line</code> implicitly.</p>",
        "id": 251804894,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630627955
    }
]