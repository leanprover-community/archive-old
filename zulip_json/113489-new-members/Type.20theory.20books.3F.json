[
    {
        "content": "<p>This is going to sound like a SE/SO post. Is there a recommended text for Type theory?</p>\n<ol>\n<li>need not be Lean-specific.</li>\n<li>I am not necessarily interested in researching type-theory. I want more beginner-level texts that don't require a ton of background.</li>\n</ol>\n<p>This was promoted by my realization that my set-theoretic intuition doesn't always work in type theory. So I think books might help (apart from doing more Lean!).</p>",
        "id": 191468919,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584968424
    },
    {
        "content": "<p>Learn you a haskell is pretty good</p>",
        "id": 191469532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584968703
    },
    {
        "content": "<p><a href=\"https://www.amazon.com/Type-Theory-Formal-Proof-Introduction/dp/110703650X\" target=\"_blank\" title=\"https://www.amazon.com/Type-Theory-Formal-Proof-Introduction/dp/110703650X\">Nederpelt and Geuvers</a> is a good comprehensive reference, although calling it \"beginner level\" is a bit of a stretch.</p>",
        "id": 191469588,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584968742
    },
    {
        "content": "<p>The HoTT book is also good, if you ignore the stuff about HoTT (I mean that part's good too but not necessary to understand for lean)</p>",
        "id": 191469703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584968788
    },
    {
        "content": "<p>I have heard good things about Software foundations, and certified programming with dependent types, although those might have too much CS bent for you</p>",
        "id": 191469991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584968935
    },
    {
        "content": "<p>I read all three as a mathematician starting with no idea of what a type was. Learn you a Haskell I read three times, each time getting further than the last. Then I tried certified programming with dependent types and found it much too hard going because I still knew no Coq or lean. I then read Theorem proving in lean the first time, understanding some of it but certainly not typeclasses, and then I read the first book of software foundations and I did a bunch of the harder and more mathematical exercises in lean. I then read Theorem proving in lean again and all the way through I was working on concrete mathematics questions from my own example sheets or books</p>",
        "id": 191470497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969196
    },
    {
        "content": "<p>And I just asked loads of questions here</p>",
        "id": 191470514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969206
    },
    {
        "content": "<p>I later came back to CPDT and implemented the first chapter in Lean</p>",
        "id": 191470627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584969244
    },
    {
        "content": "<p>I started reading Nederpelt and Geuvers recently and while it's slow going it's been pretty enlightening so far. I don't think it really requires any special background, though there were a lot of things at the start that probably would've seemed unmotivated / way too boring if I hadn't already played around with Lean.</p>",
        "id": 191478066,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584972769
    },
    {
        "content": "<p>Thank you all for these great recommendations! Some of these I have tried reading before while there are others I hadn't heard of. Time to do more reading (and working out in Lean).</p>",
        "id": 191523128,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1584991239
    },
    {
        "content": "<p>Sorry to come in so late, but would any of you all know about a Lean version of Formal Reasoning About Programs? Its It's by Chlipala, the same author of CPDT. FRAP is also a course in MIT 6.822 to use verification methods in software, but unfortunately it is built atop of Coq. Would Lean prove to be more powerful in this context due to its higher logic than Coq?</p>",
        "id": 191567812,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585027404
    },
    {
        "content": "<p>Lean doesn't have any significant logical advances over Coq that would be relevant here AFAIK</p>",
        "id": 191568127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585027806
    },
    {
        "content": "<p>or do you mean something else?</p>",
        "id": 191568134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585027822
    },
    {
        "content": "<p>Well, I guess there is just more tooling now for Coq than Lean.</p>",
        "id": 191568271,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585028076
    },
    {
        "content": "<p>If I do a deep dive into Lean, it would be for formally verifying differential equation codes written in Julia.</p>",
        "id": 191568291,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585028108
    },
    {
        "content": "<p>But seeing this book there might be more tools to leverage with Coq.</p>",
        "id": 191568303,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585028138
    },
    {
        "content": "<p>Answering my own question, in the tutorials section there is the \"Logical Verification in Lean\" book, based on a course given by  Jasmin Blanchette and Alexander Bentkamp, so thank to them, this looks like just what I needed!</p>",
        "id": 191702688,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585114306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span>: Be aware that there is a new version of the book, with 50 or so more pages, color, etc. See</p>\n<div class=\"codehilite\"><pre><span></span>https://lean-forward.github.io/logical-verification/2020/index.html#material\n</pre></div>\n\n\n<p>The old book was really just our first draft. Based on the experience of teaching with it, we found a lot that could be improved. This concerns especially the early chapters.</p>",
        "id": 192797155,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1585917774
    },
    {
        "content": "<p>you should put the links in links instead of code blocks</p>",
        "id": 192797206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585917794
    },
    {
        "content": "<p>Beautiful! I'll be sure to take a look!</p>",
        "id": 192805124,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585921302
    },
    {
        "content": "<p>And thank you so much for coming back to this <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> ! Very much appreciated!</p>",
        "id": 192805164,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585921321
    }
]