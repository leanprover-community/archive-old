[
    {
        "content": "<p>Hello! For Fifteen, I'm trying to write a tactic to close the goal when you reach the goal position. Here is the project <code>leanproject get SnobbyDragon/leanfifteen</code>.<br>\nMy tactic (called <code>finish_game</code> in the file <code>fifteentactics.lean</code>) is supposed to be a macro for the <code>easy_cheesy</code> example in the file <code>play.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">finish_game</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">get_position</span><span class=\"o\">,</span>\n     <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"bp\">`</span><span class=\"n\">H</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">p.map</span> <span class=\"bp\">=</span> <span class=\"n\">goal_position.map</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span> <span class=\"c1\">--this line doesn't work</span>\n     <span class=\"n\">tactic.skip</span>\n<span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"we are not done !\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">easy_cheesy</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slide_tile</span> <span class=\"n\">dd</span><span class=\"o\">,</span> <span class=\"c1\">--excluding this line</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">slide</span> <span class=\"n\">dd</span> <span class=\"n\">dc</span> <span class=\"n\">easy_cheesy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"n\">goal_position.map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">slide</span> <span class=\"n\">dd</span> <span class=\"n\">dc</span> <span class=\"n\">easy_cheesy</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">goal_position</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">can_slide_to.self</span> <span class=\"n\">goal_position</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm not too sure how to do <code>have</code> since it's complaining about <code>has_to_pexpr</code>, so I tried reflecting, but it didn't like <code>@[derive has_reflect]</code> for a function. This would fail (in file <code>fifteen.lean</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [decidable_eq, has_reflect]</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">tile</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">16</span><span class=\"o\">)</span>\n<span class=\"c1\">-- (bij : function.bijective map)</span>\n</code></pre></div>\n<p>Is there a way I can make it <code>has_reflect</code>? Or is there a better way to approach this?<br>\nAny insight/feedback is appreciated!<br>\nThanks!</p>",
        "id": 221367149,
        "sender_full_name": "Angela Li",
        "timestamp": 1609532466
    },
    {
        "content": "<p>what does <code>get_position</code> return? What does the tactic state look like just before <code>finish_game</code>?</p>",
        "id": 221367205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609532558
    },
    {
        "content": "<p>You probably don't want to be reflecting anything</p>",
        "id": 221367213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609532591
    },
    {
        "content": "<p><code>get_position</code> returns <code>tactic position</code></p>",
        "id": 221367225,
        "sender_full_name": "Angela Li",
        "timestamp": 1609532636
    },
    {
        "content": "<p>See why do you need that? You should keep the <code>position</code>s out of the tactic, and then you don't need <code>reflect</code> to turn it back into an expr. It should be a <code>tactic expr</code></p>",
        "id": 221367282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609532708
    },
    {
        "content": "<p>how is it implemented</p>",
        "id": 221367288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609532736
    },
    {
        "content": "<p>oh wait that makes more sense. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_position</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">can_slide_to</span> <span class=\"bp\">%%</span><span class=\"n\">p₁</span> <span class=\"bp\">%%</span><span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n     <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">eval_expr</span> <span class=\"n\">position</span><span class=\"o\">)</span> <span class=\"n\">p₁</span><span class=\"o\">,</span>\n     <span class=\"n\">return</span> <span class=\"n\">p</span>\n<span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">get_start_position</span>\n</code></pre></div>\n<p>I think i was just using it for other things</p>",
        "id": 221367330,
        "sender_full_name": "Angela Li",
        "timestamp": 1609532767
    },
    {
        "content": "<p>but I'll just not use this in what im trying to do</p>",
        "id": 221367340,
        "sender_full_name": "Angela Li",
        "timestamp": 1609532793
    },
    {
        "content": "<p>don't do <code>eval_expr</code></p>",
        "id": 221367343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609532806
    },
    {
        "content": "<p>just return <code>p1</code></p>",
        "id": 221367345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609532815
    },
    {
        "content": "<p>I downloaded your project but you are using <code>begin [fifteen_tactic'] end</code> and it complains that the <code>fifteen_tactic'</code> tactic class doesn't exist, which is true</p>",
        "id": 221367466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533033
    },
    {
        "content": "<p>oh wait i forgot to push a file sorry ill do that now</p>",
        "id": 221367475,
        "sender_full_name": "Angela Li",
        "timestamp": 1609533065
    },
    {
        "content": "<p>okay pushed!</p>",
        "id": 221367489,
        "sender_full_name": "Angela Li",
        "timestamp": 1609533115
    },
    {
        "content": "<p>yeehaw indeed</p>",
        "id": 221367538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533139
    },
    {
        "content": "<p>So without using <code>finish_game</code>, just using the underlying tactics manually, what would a completed game look like?</p>",
        "id": 221367575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533242
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">easy_cheesy</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slide_tile</span> <span class=\"n\">dd</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but that doesn't work</p>",
        "id": 221367616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533274
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">easy_cheesy</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slide_tile</span> <span class=\"n\">dd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">slide</span> <span class=\"n\">dd</span> <span class=\"n\">dc</span> <span class=\"n\">easy_cheesy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">=</span> <span class=\"n\">goal_position.map</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">slide</span> <span class=\"n\">dd</span> <span class=\"n\">dc</span> <span class=\"n\">easy_cheesy</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">goal_position</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">can_slide_to.self</span> <span class=\"n\">goal_position</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think this should end it. I'm not sure why it's so complicated</p>",
        "id": 221367623,
        "sender_full_name": "Angela Li",
        "timestamp": 1609533301
    },
    {
        "content": "<p>Probably with how I defined the structure <code>position</code> ? It only has a function in it bc I commented out the bijective part since it made things hard</p>",
        "id": 221367629,
        "sender_full_name": "Angela Li",
        "timestamp": 1609533335
    },
    {
        "content": "<p>it looks like <code>derive decidable_eq</code> is not making a good instance. Try this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">tile</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">16</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">position</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">position.ext_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 221367803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533575
    },
    {
        "content": "<p>Cool thanks!</p>",
        "id": 221367870,
        "sender_full_name": "Angela Li",
        "timestamp": 1609533636
    },
    {
        "content": "<p>then you can reduce the original proof to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">can_slide_to.of_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">position</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">=</span> <span class=\"n\">p₂</span><span class=\"o\">),</span> <span class=\"n\">can_slide_to</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">can_slide_to.self</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">easy_cheesy</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slide_tile</span> <span class=\"n\">dd</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">can_slide_to.of_eq</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221367952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533740
    },
    {
        "content": "<p>And then your tactic reduces to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">finish_game</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span> <span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">can_slide_to.of_eq</span><span class=\"o\">,</span>\n     <span class=\"n\">tactic.exact_dec_trivial</span>\n<span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"we are not done !\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">easy_cheesy</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">slide_tile</span> <span class=\"n\">dd</span><span class=\"o\">,</span>\n  <span class=\"n\">finish_game</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221368055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609533911
    },
    {
        "content": "<p>Is it better to do that than stuff like <code>`[exact can_slide_to.of_eq dec_trivial]</code></p>",
        "id": 221368124,
        "sender_full_name": "Angela Li",
        "timestamp": 1609534019
    },
    {
        "content": "<p>It's more flexible, and a bit faster. The tactic quoting syntax is pretty limited as you saw with that have proof</p>",
        "id": 221368226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609534165
    },
    {
        "content": "<p>In this case you want as much to be done in a theorem as you can, and then just call the dec_trivial tactic to do the part that depends on the actual goal</p>",
        "id": 221368245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609534202
    },
    {
        "content": "<p>You can also automatically finish every proof in your custom state with this as a \"closer\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">meta</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">interactive.executor</span> <span class=\"n\">fifteen_tactic'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">config_type</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n    <span class=\"n\">execute_with</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">tac</span><span class=\"o\">,</span> <span class=\"n\">tac</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">fifteentactics.finish_game</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">game</span> <span class=\"n\">easy_cheesy</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"o\">[</span><span class=\"n\">fifteen_tactic'</span><span class=\"o\">]</span>\n  <span class=\"n\">slide_tile</span> <span class=\"n\">dd</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221368292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609534250
    },
    {
        "content": "<p>Ooo that's cool thanks so much!</p>",
        "id": 221368305,
        "sender_full_name": "Angela Li",
        "timestamp": 1609534277
    },
    {
        "content": "<p>You probably need some special handling with the widget stuff if you want to show the goal in case of errors</p>",
        "id": 221368310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609534289
    },
    {
        "content": "<p>True... although I haven't managed to make an error through clicking yet (at least since I disabled clicking on tiles not next to the hole) but I wouldn't count on it <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 221368380,
        "sender_full_name": "Angela Li",
        "timestamp": 1609534382
    }
]