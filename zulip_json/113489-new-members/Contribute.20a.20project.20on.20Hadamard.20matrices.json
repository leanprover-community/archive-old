[
    {
        "content": "<p>I would appreciate it if we can use this thread only for discussing the project here!<br>\n<a href=\"https://github.com/l534zhan/my_project\">https://github.com/l534zhan/my_project</a></p>",
        "id": 252096714,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630870290
    },
    {
        "content": "<p>You may want to edit the Zulip thread title to make it more specific to your project.</p>",
        "id": 252096788,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1630870359
    },
    {
        "content": "<p>I am going to PR the definition of Hadamard matrices (and basic results) in my project: <a href=\"https://github.com/l534zhan/my_project\">https://github.com/l534zhan/my_project</a>.<br>\nThis is the definition currently used there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Hadamard_matrix</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_or_neg_one</span> <span class=\"o\">[]:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">orthogonal_rows</span> <span class=\"o\">[]:</span> <span class=\"n\">H.has_orthogonal_rows</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does anyone suggest changing the definition?</p>",
        "id": 253437332,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721054
    },
    {
        "content": "<p>I would advise putting that in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> so that more people see it.</p>",
        "id": 253437409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721082
    },
    {
        "content": "<p>Why do you want to restrict the coefficients to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>?</p>",
        "id": 253437609,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631721151
    },
    {
        "content": "<p>Because <code>Q</code> is easy to work with. I can use <code>Z</code>, but <code>Z</code> will make some following lemmas more complicated as coercions are then needed. Using <code>R</code> will make some lemmas <code>noncomputalbe</code>.</p>",
        "id": 253438059,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721305
    },
    {
        "content": "<p>Should I use <code>Z</code>?</p>",
        "id": 253438094,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721316
    },
    {
        "content": "<p>Hmm... That sounds wrong.</p>",
        "id": 253438116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721324
    },
    {
        "content": "<p>You shouldn't have to use concrete structures. Is there a PR I can look at?</p>",
        "id": 253438172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721346
    },
    {
        "content": "<p>I have done several closed PRs for this project. The next PR will be the definition.</p>",
        "id": 253438328,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721394
    },
    {
        "content": "<p>Indeed, I would be interested in having a look as well (although <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  will certainly beat me  <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> )</p>",
        "id": 253438352,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631721406
    },
    {
        "content": "<p>The closed PRs are not about Hadamard matrices though.</p>",
        "id": 253438369,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721414
    },
    {
        "content": "<p>Then please @ me when your PR is out!</p>",
        "id": 253438402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721431
    },
    {
        "content": "<p>What are the things you want to have a look at?</p>",
        "id": 253438454,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721450
    },
    {
        "content": "<p>Well, in general it is strange that to define a matrix with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> you need to work over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>; I would suggest working over a very general type with an instance of <code>1 </code> and <code>-1</code> and only restrict to rings/fields when needed.</p>",
        "id": 253438508,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631721471
    },
    {
        "content": "<p>What are you using about <code>ℚ</code>? Its <code>ring</code>,<code>field</code>, <code>linear_ordered_field</code> structure?</p>",
        "id": 253438599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721490
    },
    {
        "content": "<p>The file contains the definition and the lemmas is <code>main2.lean</code>. Maybe you can have a look at that file.</p>",
        "id": 253438778,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721549
    },
    {
        "content": "<p>Oh yeah, if you really just need the presence of <code>1</code> and <code>-1</code>, you should simply assume <code>has_one</code> and <code>has_neg</code>.</p>",
        "id": 253438801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721558
    },
    {
        "content": "<p>That is indeed more general.</p>",
        "id": 253438898,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721590
    },
    {
        "content": "<p>For lemmas about the determinants, I guess I need to use a ring or a field.</p>",
        "id": 253439178,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721668
    },
    {
        "content": "<p>Because <code>1</code> is by default assumed to be a natural, you'll probably need a lot of type annotations. But these are harmless and you shouldn't take that as a sign that not using <code>ℚ</code> will make you need casts.</p>",
        "id": 253439393,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721708
    },
    {
        "content": "<p>A ring would probably be enough, although some things are already true over semi-rings. The good thing is that you can try to put basically <em>no</em> structure and let Lean complain whenever something is needed: it will say that it can't find the correct type instance (for example, if you set your coefficients to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> it won't like your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>), and then you can improve things little by little.</p>",
        "id": 253439474,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631721728
    },
    {
        "content": "<p>Note also that instead of <code>class Hadamard_matrix</code> you likely want <code>structure matrix.is_hadamard</code>.</p>\n<p>Using <code>Hadamard_matrix</code> as a typeclass is unlikely to be helpful to you here</p>",
        "id": 253439573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721761
    },
    {
        "content": "<p>Filippo, that's all I'm doing <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> Don't sell my secrets like that!</p>",
        "id": 253439586,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631721765
    },
    {
        "content": "<p>OOOPS, sorry <span aria-label=\"angel\" class=\"emoji emoji-1f47c\" role=\"img\" title=\"angel\">:angel:</span> <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 253439733,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631721816
    },
    {
        "content": "<p>So, we will be happier with the more general condition <code>has_one</code> <code>has_neg</code> in the definition?</p>",
        "id": 253439956,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721893
    },
    {
        "content": "<p>Cool. I will generalise it!</p>",
        "id": 253440021,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721915
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_orthogonal_rows\">docs#matrix.has_orthogonal_rows</a> needs a semiring, right?</p>",
        "id": 253440037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253439573\">said</a>:</p>\n<blockquote>\n<p>Note also that instead of <code>class Hadamard_matrix</code> you likely want <code>structure matrix.is_hadamard</code>.</p>\n<p>Using <code>Hadamard_matrix</code> as a typeclass is unlikely to be helpful to you here</p>\n</blockquote>\n<p>This is certainly a valid point, but may be you can speculate a bit more to help <span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> with the difference between the two approaches?</p>",
        "id": 253440145,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631721958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253440037\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_orthogonal_rows\">docs#matrix.has_orthogonal_rows</a> needs a semiring, right?</p>\n</blockquote>\n<p>Yeah. I think so.</p>",
        "id": 253440252,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631721986
    },
    {
        "content": "<p>I think perhaps it would be best for Alex to PR what they have right now, so that we can point out where our suggestions make things easier</p>",
        "id": 253440264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253440252\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253440037\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_orthogonal_rows\">docs#matrix.has_orthogonal_rows</a> needs a semiring, right?</p>\n</blockquote>\n<p>Yeah. I think so.</p>\n</blockquote>\n<p>Actually it just needs <code>[has_mul α] [add_comm_monoid α]</code>.</p>\n<p>In principle you could use <code>[has_mul α] [add_comm_monoid α] [has_neg α] [has_one α]</code>, but I think that's probably ridiculous and you should just assume <code>ring α</code>.</p>",
        "id": 253440364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722037
    },
    {
        "content": "<p>If you do that, please put a TODO next to the <code>variables</code>, in case we later change the hierarchy and a more appropriate typeclass appears.</p>",
        "id": 253440589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631722106
    },
    {
        "content": "<p>Yeah. <code>[has_mul α] [add_comm_monoid α] [has_neg α] [has_one α]</code> is the condition, which usually yields at least a semiring a think.</p>",
        "id": 253440620,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722122
    },
    {
        "content": "<p>I will relax the conditions the make things more general in the PR (no need to keep <code>Q</code>).</p>",
        "id": 253440882,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722216
    },
    {
        "content": "<p>The <code>has_neg</code> suggests that you even want a <code>ring</code></p>",
        "id": 253440931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631722232
    },
    {
        "content": "<p>right right</p>",
        "id": 253441048,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722273
    },
    {
        "content": "<p>At best I could see you wanting to relax to a <code>non_assoc_ring</code> in future (if that ever existed)</p>",
        "id": 253441084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722290
    },
    {
        "content": "<p>That is exactly the thing I was thinking about</p>",
        "id": 253441220,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253440264\">said</a>:</p>\n<blockquote>\n<p>I think perhaps it would be best for Alex to PR what they have right now, so that we can point out where our suggestions make things easier</p>\n</blockquote>\n<p>Should I keep it as a <code>class</code> or change it to a <code>structure</code>. I don't fully know the effects of doing this.</p>",
        "id": 253441492,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722420
    },
    {
        "content": "<p>Leave it as <code>class</code> for the initial PR and I'll add a comment to show you where things get simpler if its a structure</p>",
        "id": 253441594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722445
    },
    {
        "content": "<p>A <code>class</code> is a <code>structure</code> that typeclass inference can use.</p>",
        "id": 253441595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631722445
    },
    {
        "content": "<p>But you may as well rename it to <code>is_hadamard</code> now</p>",
        "id": 253441650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253441595\">said</a>:</p>\n<blockquote>\n<p>A <code>class</code> is a <code>structure</code> that typeclass inference can use.</p>\n</blockquote>\n<p>Not just that I think. If so, there is no need to remove the tag.</p>",
        "id": 253441814,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722518
    },
    {
        "content": "<p>Well, Eric is not only proposing to change from <code>class</code> to <code>structure</code>. That's my point.</p>",
        "id": 253441953,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631722557
    },
    {
        "content": "<p>OK, nice. I will do this PR after having my dinner. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 253442288,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722663
    },
    {
        "content": "<p>Thanks a lot for your suggestions!</p>",
        "id": 253442712,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631722779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253441814\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253441595\">said</a>:</p>\n<blockquote>\n<p>A <code>class</code> is a <code>structure</code> that typeclass inference can use.</p>\n</blockquote>\n<p>Not just that I think. If so, there is no need to remove the tag.</p>\n</blockquote>\n<p>Well, one question you might ask yourself is: would you plan to start a lemma about Hadamard matrices writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">hadamard_matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hadamard_matrix</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>You will go for <code>structure</code> in the former case and for <code>class</code> in the latter.</p>",
        "id": 253443287,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631722940
    },
    {
        "content": "<p>Yes exactly. To emphasize, this is the difference being bundling and not bundling a Hadamard matrix.</p>",
        "id": 253443488,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631723007
    },
    {
        "content": "<p>in the first case, this info is part of the object. In the second case, it is a distinct proof.</p>",
        "id": 253443572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631723035
    },
    {
        "content": "<p>No way is better than the other in general, but in that particular case I think it makes sense to leave it unbundled.</p>",
        "id": 253443694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631723068
    },
    {
        "content": "<p>At any rate, from my own experience, this is quite puzzling at the beginning. The best way (for me) was to develop a feeling using   <code>mathlib</code> rather than dwelling in precise definitions -- but that's just a personal point.</p>",
        "id": 253443813,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631723112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> I can certainly recommend the reading of the beautiful paper  <a href=\"https://dl.acm.org/doi/10.1145/3372885.3373824\">https://dl.acm.org/doi/10.1145/3372885.3373824</a> by the whole <code>mathlib</code> community, if you haven't read that already: it is very useful about this <code>structure</code> vs <code>class</code> debate.</p>",
        "id": 253444211,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631723234
    },
    {
        "content": "<p>I personally prefer the second one. I would like to just make <code>is_hadamard</code> a \"bundled proposition\" rather than a bundled structure containing the carrier.</p>",
        "id": 253444217,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1631723235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253443287\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project.20on.20Hadamard.20matrices/near/253441814\">said</a>:<br>\ne question you might ask yourself is: would you plan to start a lemma about Hadamard matrices writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">hadamard_matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hadamard_matrix</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bla</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>You will go for <code>structure</code> in the former case and for <code>class</code> in the latter.</p>\n</blockquote>\n<p>This is not the remark I was making</p>",
        "id": 253444227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723238
    },
    {
        "content": "<p>I think <code>is_hadarmard</code> should remain unbundled like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_diag\">docs#matrix.is_diag</a>, unless we come up with a convincing use case</p>",
        "id": 253444323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723274
    },
    {
        "content": "<p>And since <code>is_diag</code> isn't a typeclass, <code>is_hadamard</code> probably shouldn't be either</p>",
        "id": 253444393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631723289
    },
    {
        "content": "<p>You mean that it will probably never happen that Lean will need to infer that a certain matrix is a Hadamard one?</p>",
        "id": 253444453,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631723313
    },
    {
        "content": "<p>I agree with Eric, it should be an unbundled <code>structure</code>, not <code>class</code>.</p>\n<p>The rule of thumb I use for typeclasses is that they are <em>type</em>classes: they basically only work well when their parameters are <em>types</em>. (My intuition suggests this is basically because the logic used to find instances only contains <code>∧</code> and <code>→</code>, not <code>=</code>, so once you get (non-definitional) equalities, you enter a world of suffering.)</p>",
        "id": 253444473,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631723321
    },
    {
        "content": "<p>For example, if you have somethingl ike <code>is_hadamard (diagonal (a * b))</code> then you can't actually rewrite <code>a * b</code> to <code>b * a</code> because the typeclass system can't guess that <code>is_hadamard (diagonal (a * b))</code> also works for <code>is_hadamard (diagonal (b * a))</code>.</p>",
        "id": 253444724,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631723405
    },
    {
        "content": "<p>If you need an equality between two <code>Type</code>s, then you are already screwed for other reasons, so typeclasses don't create extra pain :P</p>",
        "id": 253445006,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631723498
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> to <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/Contribute.20a.20project.20on.20Hadamard.20matrices\">#maths &gt; Contribute a project on Hadamard matrices</a></p>",
        "id": 253520653,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631760708
    }
]