[
    {
        "content": "<p>Just saw this video: <a href=\"https://www.youtube.com/watch?v=BdHFLfv-ThQ\">https://www.youtube.com/watch?v=BdHFLfv-ThQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"BdHFLfv-ThQ\" href=\"https://www.youtube.com/watch?v=BdHFLfv-ThQ\"><img src=\"https://uploads.zulipusercontent.net/fa7a88b53865e61718a4f8786b04cb12dc3f3d74/68747470733a2f2f692e7974696d672e636f6d2f76692f426448464c66762d5468512f64656661756c742e6a7067\"></a></div><p><a href=\"/user_uploads/3121/OShCEmrkQAyc6uxmgDyO7DFl/existence.png\">How would this statement look like in Lean?</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OShCEmrkQAyc6uxmgDyO7DFl/existence.png\" title=\"How would this statement look like in Lean?\"><img src=\"/user_uploads/3121/OShCEmrkQAyc6uxmgDyO7DFl/existence.png\"></a></div>",
        "id": 286806695,
        "sender_full_name": "Arndt Schnabel",
        "timestamp": 1655736972
    },
    {
        "content": "<p>Stating this seems easy.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 286808501,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655737826
    },
    {
        "content": "<p>Is it also possible to state the general case, pi raised to itself an arbitrary number of times?</p>\n<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">π</span> <span class=\"bp\">^^</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 286809284,
        "sender_full_name": "Arndt Schnabel",
        "timestamp": 1655738240
    },
    {
        "content": "<p>You can use something like <code>function.iterate (^ π)</code></p>",
        "id": 286809452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655738333
    },
    {
        "content": "<p>Well, essentially all math results can be stated, and in principle proved, in Lean. Sometimes it is difficult, but I don't see any problem here.</p>",
        "id": 286809467,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655738338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"508937\">Arndt Schnabel</span> <a href=\"#narrow/stream/113489-new-members/topic/Tetration.3F/near/286809284\">said</a>:</p>\n<blockquote>\n<p>Is it also possible to state the general case, pi raised to itself an arbitrary number of times?</p>\n<p>Something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">π</span> <span class=\"bp\">^^</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I can even prove this statement :D Can you find your error?</p>",
        "id": 286809543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655738385
    },
    {
        "content": "<p>Yep ^^, missed the x=0 case :) (Is there an ℕ+ or would it be better to add a x &gt; 0 constraint?)</p>",
        "id": 286809622,
        "sender_full_name": "Arndt Schnabel",
        "timestamp": 1655738413
    },
    {
        "content": "<p>The point is that you want this for all <code>x</code>.</p>",
        "id": 286809676,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655738451
    },
    {
        "content": "<p>In mathlib I don't think we have a definition of tetration, but as Eric said, this not a problem.</p>",
        "id": 286809760,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655738523
    },
    {
        "content": "<p>The definition would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tetrate</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pow</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">tetrate</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">^^</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">tetrate</span>\n</code></pre></div>",
        "id": 286810098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655738702
    },
    {
        "content": "<p>Does mathlib contain yet unproven problems like these (so we could perhaps give them to automated theorem provers and see what they do with it? I wonder what the cutting edge solvers' 'expected provability' of this statement is <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>)</p>",
        "id": 286812454,
        "sender_full_name": "Arndt Schnabel",
        "timestamp": 1655739854
    },
    {
        "content": "<p>mathlib does not contain unproved statements (there is a discussion on having a <code>conjecture</code> folder or something similar). In any case I am pretty sure we are years away from having an automatic solver proving a real conjecture.</p>",
        "id": 286812679,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655739984
    },
    {
        "content": "<p>I doubt that any \"cutting edge solver\" knows the definition of π.</p>",
        "id": 286813122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655740223
    },
    {
        "content": "<p>Riccardo, you should be more careful with your \"real conjecture\" terminology. Some people claim this already happened. A safer terminology is \"a conjecture that I find relevant in an area of mathematics that I work in\".</p>",
        "id": 286813351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655740381
    },
    {
        "content": "<p>A classical example is <a href=\"https://en.wikipedia.org/wiki/Robbins_algebra\">https://en.wikipedia.org/wiki/Robbins_algebra</a>.</p>",
        "id": 286813476,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655740449
    },
    {
        "content": "<p>A more general hyperoperator function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hyper</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hyper</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">hyper</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Addition is <code>hyper 0</code>, multiplication is <code>hyper 1</code>, power is <code>hyper 2</code>, tetration is <code>hyper 3</code>, and so on.</p>",
        "id": 286813595,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655740556
    },
    {
        "content": "<p>Can easily be extended to real numbers of course.</p>",
        "id": 286813704,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1655740620
    },
    {
        "content": "<p>Yeah, I am maybe too pessimistic. I mean conjectures that require quite a lot of work to state. For example this one requires of course the definition of real numbers, the definition of <code>π</code>, of <code>has_pow ℝ ℝ</code> and so on. But I would be very happy to be proved wrong!!</p>",
        "id": 286813715,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655740630
    },
    {
        "content": "<p>I would give automatic theorem provers a probability of approximately 0 to prove that pi^pi^pi^pi is or is not an integer</p>",
        "id": 286814049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655740842
    },
    {
        "content": "<p>that is not something you can \"intelligent brute force\" your way to a solution</p>",
        "id": 286814142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655740894
    },
    {
        "content": "<p>It would be satisfying to see the progression from 0.000000000000001 to 0.0000000001 to 0.0001 over the years :)<br>\nDoes anyone know any prover who actually gives such a value, predicting whether it can solve a problem in advance?</p>",
        "id": 286814275,
        "sender_full_name": "Arndt Schnabel",
        "timestamp": 1655740958
    },
    {
        "content": "<p>Note that I was commenting Riccardo's very general claim, not that specific problem.</p>",
        "id": 286814312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655740985
    },
    {
        "content": "<p>well, if there are ways to make the problem easier you can look at the success rate on such easier versions</p>",
        "id": 286814341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655741005
    },
    {
        "content": "<p>The only way you can make that problem easier that would make the success rate noticeably nonzero would be to make the numbers less astronomical so that you can actually bound the value</p>",
        "id": 286814474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655741069
    },
    {
        "content": "<p>anything else hits up against some hard number theory questions that are completely unsolved outside of theorems like Lindemann-Weierstrass</p>",
        "id": 286814585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655741124
    },
    {
        "content": "<p>and ATPs are no good at making much progress in this kind of pure mathematics so far</p>",
        "id": 286814633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655741158
    },
    {
        "content": "<p>What do you mean? It's just a matter of calculating the first or maybe the second decimal digit :P</p>",
        "id": 286841376,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655761502
    },
    {
        "content": "<p>It would be conceptually easy, although computationally infeasible, to prove <code>π ^^ 4</code> isn't an integer, assuming that it isn't</p>",
        "id": 286841403,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655761540
    },
    {
        "content": "<p>Now if it turns out to be true by some sort of miracle, I give it a probability of 0 for a computer to prove this</p>",
        "id": 286841424,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655761563
    },
    {
        "content": "<p>I didn't check the exact order of magnitude but I believe that this kind of example is designed specifically so that the number of digits you need is more than any computer could possibly work out</p>",
        "id": 286846570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655766425
    },
    {
        "content": "<p>looks like it's about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mn>6.6</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>17</mn></msup></mrow></msup></mrow><annotation encoding=\"application/x-tex\">10^{6.6\\times 10^{17}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9869em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6.6</span><span class=\"mbin mtight\">×</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">17</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 286846670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655766525
    },
    {
        "content": "<p>or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><msup><mn>2</mn><mn>60.9</mn></msup></msup></mrow><annotation encoding=\"application/x-tex\">2^{2^{60.9}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9869em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">60.9</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 286846702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655766582
    },
    {
        "content": "<p>which is on the edge of what's humanly possible</p>",
        "id": 286846710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655766600
    },
    {
        "content": "<p>This requires an estimate of pi which is at least as precise, which is quite a bit beyond the best computation done so far: the recent computation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>14</mn></msup><mo>=</mo><msup><mn>2</mn><mn>46.5</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^{14}=2^{46.5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">14</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">46.5</span></span></span></span></span></span></span></span></span></span></span></span> digits of pi is still only 76% of the way there, although since the algorithm is log-linear I think storage and parallel computation is the major bottleneck</p>",
        "id": 286847462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655767335
    },
    {
        "content": "<p>Wait, does this mean that computing trillions of digits of <code>π</code> might actually have some mathematical use?</p>",
        "id": 286854898,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655775516
    },
    {
        "content": "<p>A really dumb use, but still</p>",
        "id": 286854914,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655775525
    }
]