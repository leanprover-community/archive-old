[
    {
        "content": "<p>What is the intended way to instantiate <code>has_binary_products</code> for some specific category? In my case it is easy to instantiate <code>has_limit (pair X Y)</code> for all objects <code>X</code> and <code>Y</code> (using <code>binary_fan</code> etc.), but to then give an instance of <code>has_limits_of_shape (discrete walking_pair)</code> it is required to know that for all <code>F : discrete walking_pair тед C</code> we have <code>F = pair (F.obj walking_pair.left) (F.obj walking_pair.right)</code>, which is not hard to show using <code>functor.ext</code>, but I am wondering whether this is really the intended way to provide an instance of <code>has_binary_products</code>. One could of course work with <code>F</code> directly, but then you don't get useful tools like <code>binary_fan.mk</code>. The same question applies to <code>has_equalizers</code> (but not to <code>has_kernels</code>, which is directly defined via <code>has_limit (parallel_pair f 0)</code>).</p>",
        "id": 190402922,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1584026850
    },
    {
        "content": "<p>Equality of functors is discouraged. But I think there is something like <code>has_limit_of_iso</code>, and <code>F \\iso pair (F.. left) (F.. right)</code> seems like a useful fact to me.</p>",
        "id": 190403397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584027081
    },
    {
        "content": "<p>Gluing those together is hopefully not a problem. But <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has a better overview then I do.</p>",
        "id": 190403434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584027106
    },
    {
        "content": "<p>Yes, this is a wobbly part of the API still. :-(</p>",
        "id": 190403618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584027188
    },
    {
        "content": "<p>Have you had a look at my WIP PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1622\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1622\">#1622</a>?</p>",
        "id": 190403700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584027234
    },
    {
        "content": "<p>I'd definitely avoid using <code>functor.ext</code>, it will come back and bite you later, I suspect.</p>",
        "id": 190403888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584027314
    },
    {
        "content": "<p>But maybe providing a generic function for upgrading <code>has_limit (pair X Y)</code> for all X and Y into a <code>has_limits_of_shape (discrete walking_pair)</code> would be a good addition to the library? (Using transport along the natural isomorphism, as Johan sketched.)</p>",
        "id": 190404038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584027383
    },
    {
        "content": "<p>Using a natural isomorphism sounds good, I'll look into it.</p>",
        "id": 190404828,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1584027788
    }
]