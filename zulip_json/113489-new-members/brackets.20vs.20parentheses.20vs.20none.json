[
    {
        "content": "<p>hi again :). i have a question about this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>if we're trying to prove something about an element of a set rather than the set itself, how do we do that in lean? i was trying to declare it as a variable but am stuck. <br>\nwhen declaring variables, when should we use {} versus no brackets? does <code>variable (x : U)</code> ever happen? i also see this here (from the tutorials project):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>i'm unsure of the difference here.</p>",
        "id": 242825464,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623812918
    },
    {
        "content": "<p>You can write, say,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is that what you're after?</p>",
        "id": 242825526,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1623812997
    },
    {
        "content": "<p>No brackets is equivalent to round brackets. I prefer the round bracket form because no brackets does not work in most places</p>",
        "id": 242825572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623813013
    },
    {
        "content": "<p>also round brackets is shorter since you can write <code>variables (t : T) (u : U)</code> instead of <code>variables t : T   variables u : U</code></p>",
        "id": 242825708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623813138
    },
    {
        "content": "<blockquote>\n<p>You can write, say,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is that what you're after?</p>\n</blockquote>\n<p>oh yeah i think that's what i'm looking for. so h would be an element of A?</p>",
        "id": 242825709,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623813139
    },
    {
        "content": "<p><code>h</code> is a proof that x is in A</p>",
        "id": 242825713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623813150
    },
    {
        "content": "<p>oh ok</p>",
        "id": 242825719,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623813158
    },
    {
        "content": "<p>an \"element of A\" (where <code>A : set U</code>) is a pair of an element of U and a proof that that element is in A</p>",
        "id": 242825735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623813189
    },
    {
        "content": "<p>oh ok, so could we do something like <code>example (h : x \\in A) (j : x \\in B) : h \\neq j :=</code>(this might be mathematically incorrect) where \\neq means not equal</p>",
        "id": 242826110,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623813558
    },
    {
        "content": "<p>that's not type correct, <code>h</code> and <code>j</code> don't have the same type so they can't be equated</p>",
        "id": 242826268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623813751
    },
    {
        "content": "<p>ah i see</p>",
        "id": 242826427,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623813968
    },
    {
        "content": "<p>also, is there a difference when using brackets vs parentheses?</p>",
        "id": 242826652,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623814315
    },
    {
        "content": "<p>Yes, brackets means that the variable should be inferred by type class inference</p>",
        "id": 242827029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623814780
    },
    {
        "content": "<p>see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a></p>",
        "id": 242827085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623814820
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 242827937,
        "sender_full_name": "Holly Liu",
        "timestamp": 1623816027
    }
]