[
    {
        "content": "<p>Based on the Natural Number Game, we have this theorem: <code>lean le_iff_exists_add</code>. As a simple exercise I wish to prove this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ge_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I tried using the <code>le_iff_exists_add</code> theorem to prove this but to no avail. Does anyone know how to use this existing theorem to prove my elementary theorem (or better yet so that I can practice, does anyone know the the proof for <code>le_iff_exists_add</code> so that I can adapt it to prove mine?)</p>",
        "id": 191262579,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584719939
    },
    {
        "content": "<p>I just realized there was a typo in the theorem above. Here is the theorem (same question as above though):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">g_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191263570,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584720298
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/9dbc60694d781952ef1ce705a05c059a6d8b2957/src/algebra/ordered_ring.lean#L386\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/9dbc60694d781952ef1ce705a05c059a6d8b2957/src/algebra/ordered_ring.lean#L386\">Here's the proof for <code>le_iff_exists_add</code> on natural numbers</a>.</p>",
        "id": 191265051,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1584720883
    },
    {
        "content": "<p>To go from <code>a = b + c</code>, it does induction on <code>c</code>, and to go from <code>a ≤ b</code>, it does induction on the proof that <code>a ≤ b</code></p>",
        "id": 191265571,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1584721101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  Thanks for the code. I will look through it.<br>\nSo for the latter case,  what would be statement be to start the induction, something like <code> induction [what here?]...</code>?</p>",
        "id": 191266085,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584721329
    },
    {
        "content": "<p>In the NNG I only saw uses of <code>induction a with v hv</code> but not on a proof.</p>",
        "id": 191266173,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584721377
    },
    {
        "content": "<p>If you have <code>h : a &gt; b</code>, you can write <code>induction h</code>, for example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">gt_iff_exists_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- h : a &gt; b</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191266366,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1584721479
    },
    {
        "content": "<p>Inductive propositions is something that you don't encounter a lot in pen-and-paper mathematics, but the idea is similar to inductive data types like the natural numbers. Like the natural numbers are the smallest type <code>nat</code> with <code>0 : nat</code> and <code>succ : nat -&gt; nat</code> and no other relations, <code>nat.le</code> is the smallest type such that <code>refl : a ≤ a</code> and <code>step : ∀ b, a ≤ b -&gt; a ≤ succ b</code></p>",
        "id": 191266657,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1584721632
    },
    {
        "content": "<p>You might have encountered definitions of the form \"S is the smallest subset of α such that <code>0 ∈ S</code> and if <code>a, b ∈ S</code> then <code>a + b ∈ S</code>\". With such sets, you can also do a kind of induction: to prove some proposition <code>P x</code>, it suffices to show <code>P 0</code> and if <code>P a</code> and <code>P b</code>, then <code>P (a + b)</code>. In type theory, you can use an inductive type to define <code>x ∈ S</code>.</p>",
        "id": 191267594,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1584722013
    },
    {
        "content": "<p>Thanks I will give this a try</p>",
        "id": 191268042,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584722192
    }
]