[
    {
        "content": "<p>section 3.6 of Theorem Proving in Lean has a bunch of propositional identities and says \"you can use them in your proofs\".<br>\nSo where can I find a list of names of these theorems,  as I will need their names to use them, right? <br>\nFor example I have  h: P-&gt;Q  and h2 : P',  where P' is almost the same as P but two conjuncts somewhere deep inside<br>\nhave the wrong order.  So I want to rewrite it using p \\and q = q \\and p.</p>",
        "id": 203685422,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1594625741
    },
    {
        "content": "<p>You can use <code>rw [and_comm] at h2</code>. If there are other ands around you might need to give it more information, e.g. <code>rw [and_comm p q]</code>.</p>",
        "id": 203685894,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594626176
    },
    {
        "content": "<p>That solves the specific example Michael gave, but not the general problem that the identities are not named.</p>",
        "id": 203686226,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1594626460
    },
    {
        "content": "<p>I don't know why they're not named there. Maybe guessing them is good practice to learn the mathlib naming conventions? You can find a lot of them with e.g. <code>#find _ ∧ _ ↔ _ ∧ _</code>.</p>",
        "id": 203686608,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594626801
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/93\">https://github.com/leanprover-community/leanprover-community.github.io/pull/93</a></p>",
        "id": 203688390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594628217
    },
    {
        "content": "<p>I tried rw [and_comm] at h2  as suggested.  It seems you do need to supply arguments to and_comm,  which has a universally quantified type.   The conjunction I want to commute is inside a quantifier so I used simp_rw.   But one of the propositions I want to commute mentions the quantified variable u.   And I get the error message  \"unknown variable u\".   What now?</p>",
        "id": 203757519,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1594667488
    },
    {
        "content": "<p>i don't have advice, but I probably would if you posted code</p>",
        "id": 203757961,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594667716
    },
    {
        "content": "<p>when I get in situations where I want to do things like <code>rw add_comm</code>, I try to reduce to a subproblem that <code>tauto</code> can solve by itself</p>",
        "id": 203758093,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594667781
    },
    {
        "content": "<p>tauto is not available as I am working with intuitionistic logic.    There is ifinish but it usually fails or times out.  I understand that I should post a working example if I want specific advice.   Maybe I will do that later.   For now I'm just going to tear the formulas down and get on with the proof.</p>",
        "id": 203759669,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1594668560
    },
    {
        "content": "<p>i think <code>tauto</code> is intuitionistic</p>",
        "id": 203761395,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594669407
    },
    {
        "content": "<p>and <code>tauto!</code> is not</p>",
        "id": 203761399,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594669411
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tautology\">tactic#tautology</a> says that <code>tauto!</code> uses LEM and implies that <code>tauto</code> does not, but maybe you're worried about something else</p>",
        "id": 203761409,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594669416
    },
    {
        "content": "<p>if \"tear the formulas down\" means \"get rid of the quantifiers with e.g. <code>intro</code>, function application\", then I agree that's a fine way to proceed</p>",
        "id": 203761709,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594669561
    }
]