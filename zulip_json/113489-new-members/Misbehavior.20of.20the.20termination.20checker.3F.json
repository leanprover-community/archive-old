[
    {
        "content": "<p>I have stumbled on a strange case. The termination checker accepts the following code. I don't see why it should, since there's an infinite recursion.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x_eq_y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">200</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z_eq_z</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">my_lemma</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">z_eq_z</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 170988788,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1563285890
    },
    {
        "content": "<p>If you <code>#print my_lemma</code> afterward, the recursive call doesn't appear. <code>have x : t := e, v</code> is more or less sugar for <code>(λ x : t, v) e</code> in term mode, and I guess it's the same in tactic mode. It's probably getting beta reduced away before the well-foundedness check happens.</p>",
        "id": 170989327,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1563286319
    },
    {
        "content": "<p>Strange behavior though.</p>",
        "id": 170989390,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1563286338
    },
    {
        "content": "<p>I think it's because in tactic mode, a <code>have</code> doesn't appear in the proof term unless it's used.</p>\n<p>This thing fails</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x_eq_y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">200</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z_eq_z</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">my_lemma</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">z_eq_z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 170989571,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563286484
    },
    {
        "content": "<p>Or, this is another instance of the badly behaving tactic <code>let</code> you showed me yesterday that wipes the <code>have</code>s from the context. I'm not sure if that was explainable in the same way.</p>",
        "id": 170989576,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1563286487
    },
    {
        "content": "<p>Thanks. That explains it.</p>",
        "id": 170994621,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1563289344
    }
]