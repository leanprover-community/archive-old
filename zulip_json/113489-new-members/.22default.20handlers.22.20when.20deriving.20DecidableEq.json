[
    {
        "content": "<p>Hi! I'm trying to derive a <code>DecidableEq</code> instance for an inductive type which is essentially this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Test</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Test</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>I get this error message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>default handlers have not been implemented yet, class: 'DecidableEq' types: [Lib.Module.Test]\n</code></pre></div>\n<p>How do I tackle this problem? I can derive an instance when I try to build a MWE, even across files; the only difference I see is that the actual type is defined in a library that I have declared as a dependency.</p>",
        "id": 275641820,
        "sender_full_name": "Sébastien Michelland",
        "timestamp": 1647518738
    },
    {
        "content": "<p>(you may want to put this in the #lean4 stream, most people in this zulip still use lean 3)</p>",
        "id": 275642054,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647518867
    }
]