[
    {
        "content": "<p>Hello! In section 3.5 of the github book the second code snippet says:</p>\n<div class=\"codehilite\"><pre><span></span>theorem dne {p : Prop} (h : ¬¬p) : p :=\nor.elim (em p)\n  (assume hp : p, hp)\n  (assume hnp : ¬p, absurd hnp h)\n</pre></div>\n\n\n<p>If you hit \"try it!\" and delete the (assume hp:p, hp) line it complains. How is hp:p, hp used? Isn't it enough to just assume hnp and h?</p>",
        "id": 167716052,
        "sender_full_name": "Dave",
        "timestamp": 1560112651
    },
    {
        "content": "<p>The first line splits the proof up into two cases, the case when <code>p</code> is true, and the case when <code>¬p</code> is true. You have to prove both. It will therefore expect two proofs as arguments, one of <code>p -&gt; p</code>, and also a proof of <code>¬p -&gt; p</code>. The second line is a proof of <code>p -&gt; p</code>, and the final line is the proof that <code>¬p -&gt; p</code>.</p>\n<p>You can only <code>assume hp : p</code> if you're trying to prove a goal of the form <code>p -&gt; something</code></p>",
        "id": 167716576,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560113618
    },
    {
        "content": "<p>it complains because or.elim requires you to provide two functions/proofs, one for the left side of the or, one for the right side of the or. <br>\nsay you want to prove a proposition p, and you're given a ∨ b. then you need to provide two proofs, a → p and b → p.<br>\nin your example, you want to prove p, by eliminating the disjunction em p = p ∨ ¬p.<br>\none of these cases is trivial (the first one), and the second one requires you to use your assumption hnp.</p>",
        "id": 167716625,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560113649
    },
    {
        "content": "<p>People wouldn't ask this sort of question if tactic mode were introduced first.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- note that there are now two goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167716845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224655\">@Dave</span>  can look forward to chapter 5, when easy mode is unlocked :-)</p>",
        "id": 167716894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114167
    },
    {
        "content": "<p>This clears it up quite well, thank you! Would <code> cases </code> be useful here then? Clearly it's not necessary, but maybe to guide the eye.</p>",
        "id": 167717019,
        "sender_full_name": "Dave",
        "timestamp": 1560114386
    },
    {
        "content": "<p>personally, i really liked that term mode was introduced first, because it was easier to see what was going on. that being said, my background is cs, so having seen the lambda calculus before reading the book might have influenced that perception ;)</p>",
        "id": 167717021,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560114387
    },
    {
        "content": "<p>Yes, it seems to me that it's often the mathematicians who appreciate tactic mode first and the computer scientists who appreciate term mode first.</p>",
        "id": 167717035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114431
    },
    {
        "content": "<blockquote>\n<p>People wouldn't ask this sort of question if tactic mode were introduced first.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- note that there are now two goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>Easy mode! Ok now I want to skip ahead!</p>",
        "id": 167717036,
        "sender_full_name": "Dave",
        "timestamp": 1560114445
    },
    {
        "content": "<p>I wrote a huge amount of tactic mode code before I started venturing into term mode.</p>",
        "id": 167717037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114449
    },
    {
        "content": "<p>Easy-if-you-dont-know-any-lambda-calculus-stuff mode. At all stages Lean displays exactly what you're trying to prove and what all your assumptions are.</p>",
        "id": 167717083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114489
    },
    {
        "content": "<p>If you have the right Lean messages buffer open (ctrl-shift-enter) then you can click around the proof and see what state it's in at all times.</p>",
        "id": 167717094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114532
    },
    {
        "content": "<blockquote>\n<p>Easy-if-you-dont-know-any-lambda-calculus-stuff mode. At all stages Lean displays exactly what you're trying to prove and what all your assumptions are.</p>\n</blockquote>\n<p>I don't really know lambda calculus stuff, but the first part of the book had a nice exposition. Still, tactics sounds like magic so I am even more interested now!</p>",
        "id": 167717107,
        "sender_full_name": "Dave",
        "timestamp": 1560114557
    },
    {
        "content": "<p>I read through the book once, and then I read through it again and the second time I found chapter 3 very frustrating because I wanted to do everything in tactic mode by that point.</p>",
        "id": 167717109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114573
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html</a></p>",
        "id": 167717157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114604
    },
    {
        "content": "<p>One day I'll write \"TPIL for mathematicians\". Until then, there are some super-scrappy notes.</p>",
        "id": 167717161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560114620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224655\">@Dave</span> right after the or.elim em example, the by_cases function is introduced, which represents the \"case analysis\" notion in term mode</p>",
        "id": 167717166,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560114648
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224655\">Dave</span> right after the or.elim em example, the by_cases function is introduced, which represents the \"case analysis\" notion in term mode</p>\n</blockquote>\n<p>Wow, ok... forgive me, I've read through it schizophrenically and have lost the sense in which those kinds of things are introduced.</p>",
        "id": 167717187,
        "sender_full_name": "Dave",
        "timestamp": 1560114714
    },
    {
        "content": "<blockquote>\n<p>One day I'll write \"TPIL for mathematicians\". Until then, there are some super-scrappy notes.</p>\n</blockquote>\n<p>I just realized you're the Xena Project guy on twitter! I am glad you gave me that link because I didn't know where to find your M1F notes and I wanted to for the longest time!</p>",
        "id": 167717244,
        "sender_full_name": "Dave",
        "timestamp": 1560114769
    },
    {
        "content": "<p>although further down in the book you'll learn that case analysis (over inductive types) in general is quite a powerful tool.</p>",
        "id": 167717248,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560114779
    },
    {
        "content": "<p>i've also found the introduction of tactic mode in the book to be quite transparent, and not that magical at all (although some of the concrete tactics might still feel like magic).</p>\n<p><span class=\"user-mention\" data-user-id=\"224655\">@Dave</span> i kind of felt like drowning in syntax at some points in the book, but if you do the exercises, you'll get used to everything</p>",
        "id": 167717340,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560114956
    },
    {
        "content": "<blockquote>\n<p>i've also found the introduction of tactic mode in the book to be quite transparent, and not that magic at all (although some of the concrete tactics might still feel like magic).</p>\n<p><span class=\"user-mention silent\" data-user-id=\"224655\">Dave</span> i kind of felt like drowning in syntax at some points in the book, but if you do the exercises, you'll get used to everything</p>\n</blockquote>\n<p>Ok this is very reassuring, thanks! I'm experiencing that feeling currently. Also I don't properly know where to start with the second exercise at the bottom of the chapter. How would I remove the negation if I can't use false.elim? I believe I'm thinking about this problem altogether in the wrong way (which is why I went back to this section).</p>",
        "id": 167717476,
        "sender_full_name": "Dave",
        "timestamp": 1560115156
    },
    {
        "content": "<p>you can use false.elim!<br>\nas long you don't open classical, everything you're doing is constructive.</p>",
        "id": 167717604,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1560115330
    },
    {
        "content": "<p>Oh I was under the wrong impression that false.elim was classical, lol. Thanks once more</p>",
        "id": 167717605,
        "sender_full_name": "Dave",
        "timestamp": 1560115363
    },
    {
        "content": "<p>You can do induction on any inductive type in Lean, it's pretty crazy. Induction on the natural numbers is normal induction, induction on false is <code>false.elim</code>. That function <code>or.elim</code> is induction on <code>or</code>.</p>",
        "id": 167718569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560117189
    },
    {
        "content": "<blockquote>\n<p>I am glad you gave me that link because I didn't know where to find your M1F notes and I wanted to for the longest time!</p>\n</blockquote>\n<p>When I get my act together all this will be very well signposted. I'm hoping that I will actually have some kind of coherent story for beginners by the end of July. An alternative introduction to Lean which undergraduate mathematicians might find more accessible than theorem proving in Lean (in the sense that it will get to maths more quickly).</p>",
        "id": 167718637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560117341
    },
    {
        "content": "<p>Hmm, this doesn't give e.g. the lean names for the natural deduction inference rules, e.g. or.elim matches the last disjunction rule there, but it's something I put into a pull request the other day taken from the logic &amp; proof book, perhaps it might help? <a href=\"https://gist.github.com/ratmice/ee5b2d49f8a8c141ddbe9fde798eb4e1\" target=\"_blank\" title=\"https://gist.github.com/ratmice/ee5b2d49f8a8c141ddbe9fde798eb4e1\">https://gist.github.com/ratmice/ee5b2d49f8a8c141ddbe9fde798eb4e1</a></p>",
        "id": 167718891,
        "sender_full_name": "matt rice",
        "timestamp": 1560117741
    }
]