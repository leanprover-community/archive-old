[
    {
        "content": "<p>I have come across a problem where I don't quite understand why the thing I'm trying to do doesn't typecheck.</p>\n<p>What I'm trying to do, is define a proposition that would allow me to access  the components of a cartesian product (<code>pi</code> is copied from mathlib):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"err\">∈</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cartesian_product</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">pi</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"err\">Ω</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cartesian_product2</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">pi</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"err\">Ω</span>\n</code></pre></div>\n\n\n<p>The first one seems to be happy, the second one not. And I don't understand; <code>Πa, π a</code> does have a type after all. Granted in a higher universe, but why can't I write <code>β</code>? After all, it's just a different name for an object at Type n+1.</p>",
        "id": 198399006,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590112097
    },
    {
        "content": "<p>The error message seems pretty clear:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">pi</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"err\">Ω</span>\n<span class=\"n\">term</span>\n  <span class=\"err\">Ω</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span> <span class=\"err\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198399097,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590112247
    },
    {
        "content": "<p>You've introduced some type <code>β</code>.</p>",
        "id": 198399102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590112264
    },
    {
        "content": "<p>There's no reason that type should be of the form <code>(Π (a : ?m_1), ?m_2 a)</code> for some ?m_1 and ?m_2.</p>",
        "id": 198399108,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590112291
    },
    {
        "content": "<p>So does that mean, that I'd never be able to write <code>cartesian_product \\Omega</code> for an <code>\\Omega : nat \\times nat</code>?</p>",
        "id": 198399182,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590112418
    },
    {
        "content": "<p>Or would I just need to write a coercion between <code>prod</code> and <code>pi</code>, effectively</p>",
        "id": 198399238,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590112449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235513\">Daniel Fabian</span> <a href=\"#narrow/stream/113489-new-members/topic/Problem.20with.20universe.20levels/near/198399238\">said</a>:</p>\n<blockquote>\n<p>Or would I just need to write a coercion between <code>prod</code> and <code>pi</code>, effectively</p>\n</blockquote>\n<p>uh, yes?</p>",
        "id": 198399426,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590112769
    },
    {
        "content": "<p>if <code>a : α</code> and you write <code>a : β</code>, Lean looks for a coercion</p>",
        "id": 198399478,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590112819
    },
    {
        "content": "<p>I don't know what the word \"effectively\" means, you can literally make your own coercion like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198399498,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590112865
    },
    {
        "content": "<p>I see. So if I consider the product type using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>×</mo></mrow><annotation encoding=\"application/x-tex\">\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">×</span></span></span></span> to be a cons list, I can turn the position into an index and build a mapping function that way, yes?  So that I can write <span class=\"tex-error\">$$N \\times N \\times N\\$$</span> .</p>",
        "id": 198399683,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113090
    },
    {
        "content": "<p>i don't have a clear picture of what you're trying to do</p>",
        "id": 198399772,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590113195
    },
    {
        "content": "<p>from your first post it sounded liek you wanted to reimplement e.g. <code>fst</code></p>",
        "id": 198399777,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590113212
    },
    {
        "content": "<p>Some time ago, I showed some properties of cartesian products. But n-way products and not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> kinds of products.</p>",
        "id": 198399788,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113259
    },
    {
        "content": "<p>So I was going to use the <code>pi</code> construct to talk about the n-way products.</p>",
        "id": 198399795,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113278
    },
    {
        "content": "<p>but my examples still look like <code>N x N</code> because easy</p>",
        "id": 198399836,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113302
    },
    {
        "content": "<p>The idea being, that I take points in a cartesian product</p>",
        "id": 198399853,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113359
    },
    {
        "content": "<p>take a subset thereof</p>",
        "id": 198399854,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113365
    },
    {
        "content": "<p>and now the question is, if the subset is a cartesian product in its own right</p>",
        "id": 198399859,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113381
    },
    {
        "content": "<p>is there a reason to use a subset instead of a subtype?</p>",
        "id": 198399867,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590113399
    },
    {
        "content": "<p>i.e. exactly a product of its projections to 1 dimension.</p>",
        "id": 198399871,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113401
    },
    {
        "content": "<p>yes... because the subset may not be a product</p>",
        "id": 198399918,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113427
    },
    {
        "content": "<p>it may not be expressible as a product</p>",
        "id": 198399920,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113435
    },
    {
        "content": "<p>in that case, I'd call it a union between two products</p>",
        "id": 198399927,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113451
    },
    {
        "content": "<p>(or more than 2 of course)</p>",
        "id": 198399933,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113464
    },
    {
        "content": "<p>(i don't see what that has to do with sets vs types, but the set /type distinction is tangential to the core of your problem so let's set it aside)</p>",
        "id": 198399943,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590113497
    },
    {
        "content": "<p>oh, you meant just not talking about <code>set xyz</code> but directly <code>xyz</code>?</p>",
        "id": 198400011,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113570
    },
    {
        "content": "<p>So you want something with this type signature?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_product</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 198400018,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590113576
    },
    {
        "content": "<p>No reason, I just only started and have a bit of trouble writing down the definitions.</p>",
        "id": 198400025,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113586
    },
    {
        "content": "<p>and you want it to be true if <code>x</code> is a product of some <code>y : set α</code> and <code>z : set β</code></p>",
        "id": 198400038,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590113609
    },
    {
        "content": "<p>Yes, kind of. But I need it to talk about n dimension, not 2.</p>",
        "id": 198400074,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113643
    },
    {
        "content": "<p>because the rules are something like this:</p>",
        "id": 198400092,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113651
    },
    {
        "content": "<p>union between two n-way products is a product if they agree on all but 1 dimension</p>",
        "id": 198400119,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113673
    },
    {
        "content": "<p>and it's shown by induction on the number of dimensions</p>",
        "id": 198400127,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113689
    },
    {
        "content": "<p>it almost feels like <code>pi</code> is too general, but pair too restrictive.</p>",
        "id": 198400214,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590113797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> I don't think this is expressing what you want. (That said I'm not entirely certain what you want.) It sounds like you want to talk about \"types that are pi-types\" in a more general sense than literally pi's, for example products should qualify. One way you could formalize this is that it is a type equipped with an equiv to a pi-type</p>",
        "id": 198404424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590120332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">is_a_pi</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">is_a_pi</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_a_pi</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">ι</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">is_a_pi</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_a_pi</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ff</span><span class=\"o\">),</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198404797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590120917
    },
    {
        "content": "<p>Are you trying to define \"cylinder sets\" as used in e.g. the product topology?</p>",
        "id": 198404862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590120996
    },
    {
        "content": "<p>After reading this thread again, I think what you want is what you first posted:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">cartesian_product</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">pi</span> <span class=\"n\">i</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"err\">Ω</span>\n</code></pre></div>\n\n\n<p>The <code>cartesian_product2</code> version doesn't make any sense because \"being a product\" doesn't make sense in the abstract, without a coordinatization, to say what it means for a set to be \"axis-aligned\". What is true is that given a set that satisfies <code>cartesian_product</code>, you can construct another pi type (which we view as the subset) which is bijective with the original set</p>",
        "id": 198405078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590121378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cartesian_product</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">pi</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">Ω</span>\n\n<span class=\"n\">def</span> <span class=\"n\">proj</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"err\">Ω</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cartesian_product</span><span class=\"bp\">.</span><span class=\"n\">is_proj</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">proj</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">proj</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"n\">s</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sub_pi</span> <span class=\"o\">{</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">cartesian_product</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span> <span class=\"err\">≃</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">proj</span> <span class=\"err\">Ω</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">is_proj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198405954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590122914
    },
    {
        "content": "<p>By the way, if you are wondering why I took out the first argument of <code>pi</code>, it's because it is unnecessary:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">pi&#39;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"err\">∈</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pi&#39;_eq_pi</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">pi&#39;</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 198406512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590123875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> this is great, I think I can express my notion of a subspace. From taking a quick glance at cylinder sets, I think they may be related. Not quite sure they are the same thing.</p>\n<p>At any rate, the definition is easy now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">subspace</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"err\">Ω</span> <span class=\"bp\">∧</span> <span class=\"n\">cartesian_product</span> <span class=\"err\">Ω</span> <span class=\"bp\">∧</span> <span class=\"n\">cartesian_product</span> <span class=\"n\">A</span>\n\n<span class=\"n\">def</span> <span class=\"n\">co_subspace</span> <span class=\"o\">(</span><span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">subspace</span> <span class=\"err\">Ω</span> <span class=\"o\">(</span><span class=\"err\">Ω\\</span><span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Assuming <code>Ω\\A</code> stands for set difference</p>",
        "id": 198432134,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590147956
    },
    {
        "content": "<p>the notation for set difference is <code>Ω - A</code></p>",
        "id": 198483416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590175141
    },
    {
        "content": "<p>Is <code>-</code> the symm diff? Because <code>\\</code> seemed to work just fine...</p>\n<p>At any rate it took me a while to get a mental model for what Pi types really are.</p>\n<p>It's really straight-forward when thinking about propositions, but at the signature level, I didn't get it at first. </p>\n<p>Until I realised, that the Pi construct is very similar to lambda abstraction, just at the signature level and that it allows for arbitrary computation to happen.</p>\n<p>But it clicked now!</p>",
        "id": 198491366,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1590179366
    }
]