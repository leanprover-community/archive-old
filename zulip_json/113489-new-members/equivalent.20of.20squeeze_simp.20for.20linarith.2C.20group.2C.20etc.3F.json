[
    {
        "content": "<p>I'm trying to find out how to prove <code>example (a b c d e : ℝ) (h₀ : a ≤ b) (h₁ : b &lt; c) (h₂ : c ≤ d) (h₃ : d &lt; e) :  a &lt; e := by linarith</code> without using <code>linarith</code>. It would be useful to have something like <code>squeeze_linarith</code>. Does it exist?</p>",
        "id": 202649593,
        "sender_full_name": "Chris M",
        "timestamp": 1593664627
    },
    {
        "content": "<p>what's the statement?</p>",
        "id": 202649651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593664704
    },
    {
        "content": "<p><code>by kenny</code></p>",
        "id": 202649658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593664721
    },
    {
        "content": "<p><code>linarith</code> uses Fourier-Motzkin elimination, which does not tend to give human readable proofs.</p>",
        "id": 202649670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593664744
    },
    {
        "content": "<p>hence there's no <code>linarith?</code></p>",
        "id": 202649677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593664763
    },
    {
        "content": "<p>sorry I failed to copy the entire statement. edited</p>",
        "id": 202649731,
        "sender_full_name": "Chris M",
        "timestamp": 1593664804
    },
    {
        "content": "<p>the lemmas you want are <code>lt_of_lt_of_le</code> and friends</p>",
        "id": 202649748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593664848
    },
    {
        "content": "<p>find them by making a simpler example and using <code>library_search</code></p>",
        "id": 202649750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593664859
    },
    {
        "content": "<p>just use <code>calc</code></p>",
        "id": 202649754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593664864
    },
    {
        "content": "<p>It seems pretty annoying to get this to work with a tactic proof using <code>apply</code>.</p>",
        "id": 202649827,
        "sender_full_name": "Chris M",
        "timestamp": 1593664940
    },
    {
        "content": "<p><code>library_search</code> gives me <code>unkown identifier 'library_search'</code></p>",
        "id": 202649841,
        "sender_full_name": "Chris M",
        "timestamp": 1593664970
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">a</span>\n    <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">h₀</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">h₁</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">h₂</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">h₃</span>\n</code></pre></div>",
        "id": 202649850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593664989
    },
    {
        "content": "<p>oh dear. <code>import tactic</code> :-)</p>",
        "id": 202649864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665022
    },
    {
        "content": "<p>you really should get used to using <code>library_search</code>!</p>",
        "id": 202649869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665037
    },
    {
        "content": "<p>Oh sorry, I didn't interpret it as a tactic. Ok. IN this case it gives me <code>failed</code> though.</p>",
        "id": 202649922,
        "sender_full_name": "Chris M",
        "timestamp": 1593665087
    },
    {
        "content": "<p>Yes -- I really need to fix that error message :-)</p>",
        "id": 202649927,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665103
    },
    {
        "content": "<p><code>library_search</code> will only use a single lemma from the library</p>",
        "id": 202649934,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665114
    },
    {
        "content": "<p>hence my suggestion that you do a smaller example (where you are chaining a single &lt; and ≤ together)</p>",
        "id": 202649946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665133
    },
    {
        "content": "<p>to identify the lemma that you want to use</p>",
        "id": 202649947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665141
    },
    {
        "content": "<p>oh I see.</p>",
        "id": 202649948,
        "sender_full_name": "Chris M",
        "timestamp": 1593665144
    },
    {
        "content": "<p>nice</p>",
        "id": 202649951,
        "sender_full_name": "Chris M",
        "timestamp": 1593665149
    },
    {
        "content": "<p>once you know the lemma name, you build the proof yourself</p>",
        "id": 202649952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665150
    },
    {
        "content": "<p>(or use Kenny's suggestion, which is secretly using that <code>calc</code> knows the name of this lemma :-)</p>",
        "id": 202649991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593665163
    },
    {
        "content": "<p>So calc basically turns what you write into a proof using all the appropriate lemma names?</p>",
        "id": 202650065,
        "sender_full_name": "Chris M",
        "timestamp": 1593665292
    },
    {
        "content": "<p>So if I want to prove a theorem, library search will basically search the entire library for a lemma, and if it is possible to prove the theorem by just one direct application of a lemma in the library, applied to some sequence of the theorem's assumptions, then it will find it?</p>",
        "id": 202650311,
        "sender_full_name": "Chris M",
        "timestamp": 1593665663
    },
    {
        "content": "<p>maybe not because <code>example (h: a ≤ b) : exp a ≤ exp b :=  by library_search</code> gives me <code>failed</code>, even though it can be proved by <code>exp_le_exp.mpr h</code></p>",
        "id": 202651007,
        "sender_full_name": "Chris M",
        "timestamp": 1593666810
    },
    {
        "content": "<p>no, I'd say that's a <code>library_search</code> bug!</p>",
        "id": 202651329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593667371
    },
    {
        "content": "<p>that's how it should work</p>",
        "id": 202651332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593667378
    },
    {
        "content": "<p>And what about this:<br>\nI have the following proof which type checks:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">exp_le_exp</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but the following doesn't:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">exp_le_exp</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Is there a way to make this work?</p>",
        "id": 202651475,
        "sender_full_name": "Chris M",
        "timestamp": 1593667666
    },
    {
        "content": "<p><code>mono</code>?</p>",
        "id": 202651561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593667778
    },
    {
        "content": "<p>Indeed, it's a bug in <code>library_search</code> involving stuck metavariables.</p>",
        "id": 202651781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593668113
    },
    {
        "content": "<p>The problem is that the <code>.mp</code> direction of <code>exp_le_exp</code> matches, giving a new goal <code>exp (exp a) &lt;= exp (exp b)</code>, which can't be discharged</p>",
        "id": 202651789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593668145
    },
    {
        "content": "<p>this then seems to prevent the <code>.mpr</code> direction from being tried.</p>",
        "id": 202651830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593668173
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">mono</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">exp_le_exp&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">exp_le_exp</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">mono</span><span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 202651873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593668272
    },
    {
        "content": "<p><code>linarith [exp_le_exp.mpr]</code> isn't going to work because linarith doesn't do heuristic instantiation, it's not an SMT solver</p>",
        "id": 202651934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593668345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span>, want to make a PR adding that <code>@[mono]</code> tag? :-)</p>",
        "id": 202651943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593668372
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> , how's the <code>polya</code> tactic going? I recall this example being on the recommended list :)</p>",
        "id": 202652125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593668636
    },
    {
        "content": "<p>The library_search bug is fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/3270\">#3270</a></p>",
        "id": 202653728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593670710
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">special_functions</span><span class=\"bp\">.</span><span class=\"n\">exp_log</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>now works, finding <code>exp_le_exp</code>.</p>",
        "id": 202653739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593670732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202652125\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> , how's the <code>polya</code> tactic going? I recall this example being on the recommended list :)</p>\n</blockquote>\n<p>Coming 202? :)</p>",
        "id": 202671239,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593685617
    },
    {
        "content": "<p>As for the original question in this thread, there are complications with <code>squeeze_linarith</code>. <code>linarith</code> makes no guarantees to find a minimal proof, and often finds non-minimal ones -- twice now, I've made changes that caused the linter to start complaining about unused arguments in theorems, because before it was using unnecessary hypotheses just because they were there.</p>",
        "id": 202671385,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593685736
    },
    {
        "content": "<p>There are a number of steps between the input list of hypotheses and what <code>linarith</code> actually runs on. Tracking the original source of each hypothesis would take some overhead.</p>",
        "id": 202671523,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593685841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202671239\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202652125\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> , how's the <code>polya</code> tactic going? I recall this example being on the recommended list :)</p>\n</blockquote>\n<p>Coming 202? :)</p>\n</blockquote>\n<p>Aah, so is this a promise that it will be finished within a decade? :-)</p>",
        "id": 202671678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593685992
    },
    {
        "content": "<p>Unlike <code>simp</code> vs <code>simp only</code>, <code>linarith</code> is not necessarily so much slower than <code>linarith only</code>. Depending on what else is in the context, what variables are present, the order it finds things, etc., there can be very little overhead to just using <code>linarith</code>. <code>nlinarith only</code> gains a bit more over <code>nlinarith</code> though.</p>",
        "id": 202671777,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593686070
    },
    {
        "content": "<p>And one of the main uses of <code>squeeze_simp</code> is to allow nonterminal simps; there's no notion of a nonterminal <code>linarith</code>.</p>",
        "id": 202671840,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593686143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202671678\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202671239\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202652125\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> , how's the <code>polya</code> tactic going? I recall this example being on the recommended list :)</p>\n</blockquote>\n<p>Coming 202? :)</p>\n</blockquote>\n<p>Aah, so is this a promise that it will be finished within a decade? :-)</p>\n</blockquote>\n<p>or in about 18000 years...</p>",
        "id": 202671914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593686197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202649670\">said</a>:</p>\n<blockquote>\n<p><code>linarith</code> uses Fourier-Motzkin elimination, which does not tend to give human readable proofs.</p>\n</blockquote>\n<p>Note that the FM elimination isn't verified. <code>linarith</code> uses an oracle to find a linear combination of the input hypotheses that simplifies to a proof of 0 &lt; 0. The \"readable\" output of <code>linarith</code> is something like <code>5*h1 + 3*h2 + 10*h3 = 0 &lt; 0</code>.</p>",
        "id": 202672016,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593686286
    },
    {
        "content": "<p>There's not much it can produce for you to copy-paste, but if you're curious about what it finds, you can look toward the bottom of the output with <code>set_option trace.linarith true</code>.</p>",
        "id": 202672085,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593686360
    },
    {
        "content": "<blockquote>\n<p>Aah, so is this a promise that it will be finished within a decade? :-)</p>\n</blockquote>\n<p>I have a strong suspicion that if I sit down and refactor the code, I'll spend a lot of time to conclude that it can't be done efficiently in Lean 3, and I can't afford that time right now. <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 202672401,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593686604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202653728\">said</a>:</p>\n<blockquote>\n<p>The library_search bug is fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/3270\">#3270</a></p>\n</blockquote>\n<p>:D, I tried installing the new version of lean wit h<code>pip install --upgrade mathlibtools</code> and also <code>elan self update</code>, but neither worked. How do I get the new version?</p>",
        "id": 202762017,
        "sender_full_name": "Chris M",
        "timestamp": 1593740938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/202651943\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284606\">Chris M</span>, want to make a PR adding that <code>@[mono]</code> tag? :-)</p>\n</blockquote>\n<p>What is a PR? Does it mean, edit to the library? If so, I want to do that yes :). I have no idea how though. (no real experience with github)</p>",
        "id": 202762040,
        "sender_full_name": "Chris M",
        "timestamp": 1593740990
    },
    {
        "content": "<p>Ah -- so those are reasonable commands for upgrading Lean itself, but here you need to update mathlib.</p>",
        "id": 202762307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741364
    },
    {
        "content": "<p>(Lean changes about once a week, mathlib about every two hours. :-)</p>",
        "id": 202762311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741383
    },
    {
        "content": "<p>I think <code>leanproject upgrade</code> is the usual incantation, assuming you have previously followed the <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a> instructions.</p>",
        "id": 202762318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741415
    },
    {
        "content": "<p>A PR is a \"pull request\". It means you make a branch of mathlib, make the changes you'd like, and then push that branch to github, and ask that the community reviews it.</p>",
        "id": 202762326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741449
    },
    {
        "content": "<p>Often anyone's first PR will go through lots of comment and revision, as it takes a little while to learn all the ins and outs of mathlib style. But we try not to bite! :-)</p>",
        "id": 202762371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741484
    },
    {
        "content": "<p>It gives me <code>Error: No such command 'upgrade'.</code> and similarly, <code>Error: No such command 'update'.</code></p>",
        "id": 202762474,
        "sender_full_name": "Chris M",
        "timestamp": 1593741655
    },
    {
        "content": "<p>could that mean that I followed the installation instructions incorrectly?</p>",
        "id": 202762486,
        "sender_full_name": "Chris M",
        "timestamp": 1593741679
    },
    {
        "content": "<p>No, it's just I'm the wrong person to ask, as apparently I don't use <code>leanproject</code> properly.</p>",
        "id": 202762544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741819
    },
    {
        "content": "<p>Just try <code>leanproject</code> and read the nice instructions? :-)</p>",
        "id": 202762547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741830
    },
    {
        "content": "<p>There's also advice at <a href=\"https://leanprover-community.github.io/contribute/index.html\">#contrib</a> about making PRs</p>",
        "id": 202762585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741855
    },
    {
        "content": "<p><code>leanproject up</code> perhaps</p>",
        "id": 202762592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741889
    },
    {
        "content": "<p>The first time you make a pull request to mathlib, you will need to fork mathlib on github, and push a new branch there, and make the PR from your fork.</p>",
        "id": 202762615,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741959
    },
    {
        "content": "<p>Subsequent times you can ask for direct push access to non-master branches of mathlib, and then you don't need the fork.</p>",
        "id": 202762653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593741980
    },
    {
        "content": "<p>ah it's <code>leanproject update-mathlib</code></p>",
        "id": 202762655,
        "sender_full_name": "Chris M",
        "timestamp": 1593741984
    },
    {
        "content": "<p>Ok. I assume that I can do pull requests and push requests within VSCode? Do I need some kind of extension for this? (I've looked online and there are extensions but I'm not sure if this is the appropriate way of doing it for mathlib)</p>",
        "id": 202762923,
        "sender_full_name": "Chris M",
        "timestamp": 1593742492
    },
    {
        "content": "<p>Ok, I tried to find out how to do github pull requests in VSCode but I'm not making progress. Do I need to do this in a command line terminal instead?</p>",
        "id": 202763451,
        "sender_full_name": "Chris M",
        "timestamp": 1593743329
    },
    {
        "content": "<p>Just jumping in - git is much easier to use in terminal, personally recommend doing it through the command line</p>",
        "id": 202763518,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593743415
    },
    {
        "content": "<p>Do I just execute the steps in point 5 of <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> ?</p>",
        "id": 202763535,
        "sender_full_name": "Chris M",
        "timestamp": 1593743475
    },
    {
        "content": "<p>Pretty much - though I've had trouble using the branch command in the first bullet point. My workaround was just doing <code>leanproject get mathlib</code> and then navigating into mathlib, and doing <code>git checkout -b branch-name</code></p>",
        "id": 202763624,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593743598
    },
    {
        "content": "<p><del>Oh wait hold up - I misunderstood the question. Those steps are for making changes to mathlib</del> ignore that, I skimmed through the thread and misread</p>",
        "id": 202763749,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1593743819
    },
    {
        "content": "<p>There are some nice VSCode extensions for using Git, but as Alena says it's worth learning to use the command line for git. (Note you can open a terminal right inside VSCode, so it's pretty smooth.)</p>",
        "id": 202763886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593744030
    },
    {
        "content": "<p>Neither of these replace using <code>git</code> on the command line for branching/merging operations, but I also use the extensions</p>\n<ul>\n<li>GitLens (mostly it adds the \"blame\" lines everywhere unobtrusively, which is nice for understanding who wrote what in mathlib)</li>\n<li>Github Pull Requests (perhaps only useful once you regularly have multiple PRs open concurrently!)</li>\n</ul>",
        "id": 202763973,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593744188
    },
    {
        "content": "<p>I highly recommend reading a bit of <a href=\"https://git-scm.com/book/en/v2\">the git book</a> if you're not comfortable with git. It's easy to get confused later on if you don't have a good mental model of what the various git commands are doing (or at least a place to look to figure it out).</p>",
        "id": 202764925,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593745758
    },
    {
        "content": "<p>I also frequently forget the commands for <code>leanproject</code>. Fortunately, just typing <code>leanproject</code> will return a help string with brief descriptions of all the commands.</p>",
        "id": 202764975,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593745806
    },
    {
        "content": "<p>I've tried to push my branch to github with<code>$ git push origin</code>, but I'm getting the following error message:</p>\n<div class=\"codehilite\"><pre><span></span><code>fatal: The current branch master has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin master\n</code></pre></div>",
        "id": 203230223,
        "sender_full_name": "Chris M",
        "timestamp": 1594182370
    },
    {
        "content": "<p>Before that, I used: <code>$ git commit -a</code> and got the following:</p>\n<div class=\"codehilite\"><pre><span></span><code>On branch master\n\nInitial commit\n\nUntracked files:\n  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n        .gitignore\n        Chris_styleguide.lean\n        leanpkg.toml\n        mathlib_exp_le_exp-mono-tag/\n        src/\n\nnothing added to commit but untracked files present (use &quot;git add&quot; to track)\n</code></pre></div>\n\n\n<p>(all of this is in the terminal of vscode).</p>",
        "id": 203230256,
        "sender_full_name": "Chris M",
        "timestamp": 1594182441
    },
    {
        "content": "<p>Does this mean I did something wrong earlier, or is this fine? should I just use <code>git push --set-upstream origin master</code>?</p>",
        "id": 203230310,
        "sender_full_name": "Chris M",
        "timestamp": 1594182510
    },
    {
        "content": "<p>yes, in this case you want to follow the advice git gives you</p>",
        "id": 203230415,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594182716
    },
    {
        "content": "<p>This gives me the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git push --set-upstream origin master\nerror: src refspec master does not match any\nerror: failed to push some refs to &#39;origin&#39;\n</code></pre></div>",
        "id": 203230563,
        "sender_full_name": "Chris M",
        "timestamp": 1594182918
    },
    {
        "content": "<p>Did you create a repo on github? What does <code>git remote -v</code> say?</p>",
        "id": 203230733,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594183164
    },
    {
        "content": "<p><code>git remote -v</code> produces no text at all.</p>\n<p>What I did is follow the guidelines at <a href=\"https://leanprover-community.github.io/contribute/index.html\">https://leanprover-community.github.io/contribute/index.html</a> without any adjustments. I am not sure whether this created a repo on github or how to know.</p>",
        "id": 203230811,
        "sender_full_name": "Chris M",
        "timestamp": 1594183268
    },
    {
        "content": "<p>That doesn't seem right. If I run (following the very first step in \"Making a Pull Request\"): </p>\n<div class=\"codehilite\"><pre><span></span><code>leanproject get -b mathlib:shiny_lemma\ncd mathlib_shiny_lemma\ngit remote -v\n</code></pre></div>\n\n\n<p>I see:</p>\n<div class=\"codehilite\"><pre><span></span><code>origin  git@github.com:leanprover-community/mathlib.git (fetch)\norigin  git@github.com:leanprover-community/mathlib.git (push)\n</code></pre></div>",
        "id": 203230974,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594183484
    },
    {
        "content": "<p>Also, did we already give you write access to mathlib?</p>",
        "id": 203230997,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594183532
    },
    {
        "content": "<p>If not, please let us know what your github username is.</p>",
        "id": 203231004,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594183550
    },
    {
        "content": "<p>Ok, I didn't do <code>cd mathlib_shiny_lemma</code> (note that this isn't on that webpage). Now that I did that, I'm getting </p>\n<div class=\"codehilite\"><pre><span></span><code>origin  https://github.com/leanprover-community/mathlib.git (fetch)\norigin  https://github.com/leanprover-community/mathlib.git (push)\n</code></pre></div>",
        "id": 203231063,
        "sender_full_name": "Chris M",
        "timestamp": 1594183618
    },
    {
        "content": "<p>OK, good point. All the git commands need to be run inside <code>mathlib_shiny_lemma</code>.</p>",
        "id": 203231075,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594183658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/equivalent.20of.20squeeze_simp.20for.20linarith.2C.20group.2C.20etc.3F/near/203230997\">said</a>:</p>\n<blockquote>\n<p>Also, did we already give you write access to mathlib?</p>\n</blockquote>\n<p>I don't think so. My username is xxxxxxx</p>",
        "id": 203231123,
        "sender_full_name": "Chris M",
        "timestamp": 1594183694
    },
    {
        "content": "<p>Invite sent.</p>",
        "id": 203231143,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594183750
    },
    {
        "content": "<p>Accepted. After trying things again now, I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git push --set-upstream origin exp_le_exp-mono-tag\nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0\nremote:\nremote: Create a pull request for &#39;exp_le_exp-mono-tag&#39; on GitHub by visiting:\nremote:      https://github.com/leanprover-community/mathlib/pull/new/exp_le_exp-mono-tag\nremote:\nTo https://github.com/leanprover-community/mathlib.git\n * [new branch]        exp_le_exp-mono-tag -&gt; exp_le_exp-mono-tag\nBranch &#39;exp_le_exp-mono-tag&#39; set up to track remote branch &#39;exp_le_exp-mono-tag&#39; from &#39;origin&#39;.\n</code></pre></div>\n\n\n<p>I'm assuming this is how things should go and I should follow the link <a href=\"https://github.com/leanprover-community/mathlib/pull/new/exp_le_exp-mono-tag\">https://github.com/leanprover-community/mathlib/pull/new/exp_le_exp-mono-tag</a></p>",
        "id": 203231244,
        "sender_full_name": "Chris M",
        "timestamp": 1594183908
    },
    {
        "content": "<p>Yup, that will start the PR</p>",
        "id": 203231294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594183960
    },
    {
        "content": "<p>I made a PR to tell users to run git commands inside the mathlib repo: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/79\">https://github.com/leanprover-community/leanprover-community.github.io/pull/79</a> </p>\n<p>Feel free to suggest better wording.</p>",
        "id": 203231499,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184288
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/80\">https://github.com/leanprover-community/leanprover-community.github.io/pull/80</a></p>",
        "id": 203231568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184411
    },
    {
        "content": "<p>Oops, Bryan was a little bit faster</p>",
        "id": 203231575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184419
    },
    {
        "content": "<p>Yours edits are a little more detailed, so I closed my PR.</p>",
        "id": 203231699,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184601
    },
    {
        "content": "<p>It turned out that I didn't commit the right repository earlier, so didn't even get to write a commit message. Now that I can write a commit message I'm not sure what to do:<br>\nI'm getting this:</p>\n<div class=\"codehilite\"><pre><span></span><code># Please enter the commit message for your changes. Lines starting\n# with &#39;#&#39; will be ignored, and an empty message aborts the commit.\n#\n# On branch exp_le_exp-mono-tag\n# Your branch is up to date with &#39;origin/exp_le_exp-mono-tag&#39;.\n#\n# Changes to be committed:\n#       modified:   src/data/complex/exponential.lean\n#\n~\n~\n~\n</code></pre></div>\n\n\n<p>I wrote </p>\n<div class=\"codehilite\"><pre><span></span><code>feat(src/data/complex/exponential)\nadded @[mono] tag to exp_le_exp and exp_lt_exp.\n</code></pre></div>\n\n\n<p>but it appeared ABOVE that long message, and I'm not sure how to actually send it. (enter doesn't work)</p>",
        "id": 203231703,
        "sender_full_name": "Chris M",
        "timestamp": 1594184612
    },
    {
        "content": "<p>I guess you're probably in vim, so you have to type <code>:x</code>.</p>",
        "id": 203231754,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184670
    },
    {
        "content": "<p>well, escape and then <code>:x</code></p>",
        "id": 203231760,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184683
    },
    {
        "content": "<p>Or <code>nano</code>? In which case it is <code>Ctrl-X</code> <code>Ctrl-O</code> or something like that.</p>",
        "id": 203231769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184700
    },
    {
        "content": "<p>if you mean the text editor vim, no I'm in VSCode</p>",
        "id": 203231779,
        "sender_full_name": "Chris M",
        "timestamp": 1594184711
    },
    {
        "content": "<p>Is that commit message appearing in VScode?</p>",
        "id": 203231793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184739
    },
    {
        "content": "<p>I thought you wrote <code>git commit -a</code> in a terminal</p>",
        "id": 203231798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184751
    },
    {
        "content": "<p>Did you configure <code>git</code> to use VScode as the editer?</p>",
        "id": 203231835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184763
    },
    {
        "content": "<p>yes, actually it seems <code>:x</code> also worked.</p>",
        "id": 203231837,
        "sender_full_name": "Chris M",
        "timestamp": 1594184764
    },
    {
        "content": "<p>Yes I wrote it in the VSCode terminal</p>",
        "id": 203231842,
        "sender_full_name": "Chris M",
        "timestamp": 1594184776
    },
    {
        "content": "<p>Aah, so it was <code>vim</code> inside that terminal</p>",
        "id": 203231846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I guess we need instructions for that as well...</p>",
        "id": 203231858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184823
    },
    {
        "content": "<p>What happens on Windows?</p>",
        "id": 203231866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184845
    },
    {
        "content": "<p>They don't default to <code>vim</code>, I guess.</p>",
        "id": 203231868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184855
    },
    {
        "content": "<p>Hmm, maybe we can suggest writing the commit message together with <code>git commit</code> to avoid getting people stuck in vim?</p>",
        "id": 203231879,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184872
    },
    {
        "content": "<p>I THINK I did a pull request? If I open the link that the terminal in vscode gives me it says <code>exp_le_exp-mono-tag had recent pushes 1 minute ago</code></p>",
        "id": 203231934,
        "sender_full_name": "Chris M",
        "timestamp": 1594184895
    },
    {
        "content": "<p>I can't check right this moment, but I think git bash probably has vim?</p>",
        "id": 203231935,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> I don't see the PR yet</p>",
        "id": 203231950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184942
    },
    {
        "content": "<p>That's on the github website I mean: <a href=\"https://gyazo.com/102bd44ed1630dedb48180bc76ee1ee0\">https://gyazo.com/102bd44ed1630dedb48180bc76ee1ee0</a></p>",
        "id": 203231952,
        "sender_full_name": "Chris M",
        "timestamp": 1594184943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> Nope, not yet. You have to visit <a href=\"https://github.com/leanprover-community/mathlib/compare/exp_le_exp-mono-tag\">https://github.com/leanprover-community/mathlib/compare/exp_le_exp-mono-tag</a> and click the \"Create Pull Request\" button.</p>",
        "id": 203231957,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184959
    },
    {
        "content": "<p>Or you can click the \"Compare &amp; pull request\" button in your screenshot.</p>",
        "id": 203231961,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594184978
    },
    {
        "content": "<p>You're almost done!</p>",
        "id": 203231962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594184983
    },
    {
        "content": "<p>How about now?</p>",
        "id": 203232015,
        "sender_full_name": "Chris M",
        "timestamp": 1594185015
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pulls\">https://github.com/leanprover-community/mathlib/pulls</a></p>",
        "id": 203232029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594185044
    },
    {
        "content": "<p>Yep! <a href=\"https://github.com/leanprover-community/mathlib/issues/3318\">#3318</a></p>",
        "id": 203232033,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594185049
    },
    {
        "content": "<p>There you go. Top of the list.</p>",
        "id": 203232034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594185052
    },
    {
        "content": "<p>great. So what happens now? I'm guessing others will review it and I would get a message somehow if it needs to be changed?</p>",
        "id": 203232114,
        "sender_full_name": "Chris M",
        "timestamp": 1594185161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> I edited the PR title a bit. (We don't put <code>src/</code> in the path, because it would be in almost every PR title, so we save 4 characters.)</p>",
        "id": 203232119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594185169
    },
    {
        "content": "<p>Yup, see the \"PR lifecycle\" on the contribution page</p>",
        "id": 203232129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594185194
    },
    {
        "content": "<p>I'd suggest <code>git config --global core.editor code</code> as part of the standard initial setup workflow - anyone for whom VS Code is not a suitable Git editor will already know enough to not follow that command</p>",
        "id": 203235289,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1594189796
    },
    {
        "content": "<p>Yup, that sounds like a good idea. But it shouldn't be part of the one-line-install-sh</p>",
        "id": 203235382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594189880
    },
    {
        "content": "<p>I suggest:</p>\n<blockquote>\n<p>Please execute <code>git config --global core.editor code</code> in a terminal <em>if and only if</em> you don't know what it means.</p>\n</blockquote>",
        "id": 203235409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594189922
    },
    {
        "content": "<p>Why is the following a well-formed term? <br>\n<code>@[mono] lemma exp_mono : ∀ {x y : ℝ}, x ≤ y → exp x ≤ exp y := exp_strict_mono.monotone</code><br>\nIn particular, <code>exp_strict_mono</code> has type <code>strict_mono exp</code>, which is defined as </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">strict_mono</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>I don't see why <code>.monotone</code> is well-formed here.</p>",
        "id": 203477767,
        "sender_full_name": "Chris M",
        "timestamp": 1594366724
    },
    {
        "content": "<p><code>exp_strict_mono</code> has type <code>strict_mono exp</code>. So when lean sees the <code>.</code> after <code>exp_strict_mono</code> it will start looking in the <code>strict_mono</code> namespace.</p>",
        "id": 203478589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367502
    },
    {
        "content": "<p>It finds <code>strict_mono.monotone</code>, and thus we get <code>strict_mono.monotone exp_strict_mono</code></p>",
        "id": 203478636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367532
    },
    {
        "content": "<p>The dot notation gives a shorthand for that.</p>",
        "id": 203478641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367547
    },
    {
        "content": "<p>It's quite powerful when you chain these things together.</p>",
        "id": 203478667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594367595
    },
    {
        "content": "<p>Lets say I have an <code>\\iff</code> lemma <code>foo</code>. Is <code>foo.mpr</code> actually shorthand for something like <code>logic.mpr foo</code>?</p>",
        "id": 203479586,
        "sender_full_name": "Chris M",
        "timestamp": 1594368189
    },
    {
        "content": "<p>No, for <code>iff.mpr</code></p>",
        "id": 203479612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594368209
    },
    {
        "content": "<p>right. ok cool</p>",
        "id": 203479639,
        "sender_full_name": "Chris M",
        "timestamp": 1594368230
    },
    {
        "content": "<p>Because <code>\\iff</code> is notation for <code>iff</code></p>",
        "id": 203479645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594368237
    },
    {
        "content": "<p>This PR is merged now. Sorry for the delay, I had been reading about how git &amp; github works.</p>",
        "id": 204332279,
        "sender_full_name": "Chris M",
        "timestamp": 1595132525
    }
]