[
    {
        "content": "<p>Can anybody help me with setting up lean?</p>",
        "id": 246705436,
        "sender_full_name": "Steven",
        "timestamp": 1626866189
    },
    {
        "content": "<p>I run ubuntu, and have everything working, except that I cannot import anything out of the mathlib library</p>",
        "id": 246705555,
        "sender_full_name": "Steven",
        "timestamp": 1626866281
    },
    {
        "content": "<p>we could start by you giving a more precise description of what you have done so far and what is not working, including perhaps screenshots</p>",
        "id": 246705668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626866362
    },
    {
        "content": "<p>but here is some generic advice: make sure you have made a project with leanproject and you are opening the project folder with VS Code's \"open folder\" functionality. PS if you are getting an error in VS Code which contains a link to a web page, read that web page.</p>",
        "id": 246705742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626866412
    },
    {
        "content": "<p>damn, you just gave the solution: I hadn't opened the folder using vscode, but it's parent folder<br>\nThank you!!</p>",
        "id": 246706028,
        "sender_full_name": "Steven",
        "timestamp": 1626866641
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/kZ35C1QJjvBSTlpoaNUkq9DM/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kZ35C1QJjvBSTlpoaNUkq9DM/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/kZ35C1QJjvBSTlpoaNUkq9DM/image.png\"></a></div>",
        "id": 273577705,
        "sender_full_name": "kctron sub",
        "timestamp": 1646096481
    },
    {
        "content": "<p>how to prove C y now?</p>",
        "id": 273577713,
        "sender_full_name": "kctron sub",
        "timestamp": 1646096491
    },
    {
        "content": "<p>i understand it logically, if a or b has to be true, then c is always true, but how to do it in lean</p>",
        "id": 273577739,
        "sender_full_name": "kctron sub",
        "timestamp": 1646096511
    },
    {
        "content": "<p>The <code>cases h4 with ha hb</code> tactic will split the goal into two goals, one where <code>ha : A y</code> and one with <code>hb : B y</code></p>",
        "id": 273577956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646096692
    },
    {
        "content": "<p>If you are using lean 4 (it is hard to tell from your examples whether this is lean 3 or 4), this is written</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">h4</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"n\">ha</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"n\">hb</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 273578361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097054
    },
    {
        "content": "<p>so what am i writing (im using lean 4)</p>",
        "id": 273578461,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097138
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/rU6UyVNI8vnZKLgdNeXXRbqp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/rU6UyVNI8vnZKLgdNeXXRbqp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/rU6UyVNI8vnZKLgdNeXXRbqp/image.png\"></a></div>",
        "id": 273578482,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097179
    },
    {
        "content": "<p>If that code isn't giving you errors, then that's lean 3 code not lean 4</p>",
        "id": 273578574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097244
    },
    {
        "content": "<p>i have the sorry in there so its not complete</p>",
        "id": 273578597,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097264
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/help\">#lean4 &gt; help</a> by <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span>.</p>",
        "id": 273578720,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646097402
    },
    {
        "content": "<p>oh yeah thanks</p>",
        "id": 273578735,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097435
    },
    {
        "content": "<p>If you want to do it using term mode, then it would be <code>or.elim h4 (assume ha : A y, ...) (assume hb : B y, ...)</code></p>",
        "id": 273578828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097503
    },
    {
        "content": "<p>whats the ellipsis</p>",
        "id": 273578854,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097548
    },
    {
        "content": "<p>you can put <code>_</code> there and lean will tell you what remains to fill in, or <code>sorry</code> like you've been doing</p>",
        "id": 273578885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097578
    },
    {
        "content": "<p>this is not the complete proof</p>",
        "id": 273578899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097593
    },
    {
        "content": "<p>but you can use it to replace your <code>sorry</code> and make some progress</p>",
        "id": 273578955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097606
    },
    {
        "content": "<p>what is supposed to go there though if im just using or.elim</p>",
        "id": 273579026,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097692
    },
    {
        "content": "<p>Also you should post code as text not images</p>",
        "id": 273579099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097737
    },
    {
        "content": "<p>if you replace <code>sorry</code> with <code>or.elim h4 (assume ha : A y, sorry) (assume hb : B y, sorry)</code> it should still work modulo sorry</p>",
        "id": 273579138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097778
    },
    {
        "content": "<p>yeah but  what am i supposed to put instead of sorry whenever im done with the proof</p>",
        "id": 273579179,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097832
    },
    {
        "content": "<p>what does or.elim do is what im asking</p>",
        "id": 273579257,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097892
    },
    {
        "content": "<p>well, if you put <code>_</code> there instead of sorry, what is the goal state? Do you see how to deduce the goal from there?</p>",
        "id": 273579258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097894
    },
    {
        "content": "<p>When you are done with the proof, there will still be <code>or.elim</code> in the proof</p>",
        "id": 273579292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097923
    },
    {
        "content": "<p>and do i need to have two assume or cant i just use A y</p>",
        "id": 273579299,
        "sender_full_name": "kctron sub",
        "timestamp": 1646097927
    },
    {
        "content": "<p>you need two <code>assume</code>, it is a case analysis and there are two cases so you have to handle both</p>",
        "id": 273579324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097957
    },
    {
        "content": "<p>that whole line that I wrote should go in the proof</p>",
        "id": 273579384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646097990
    },
    {
        "content": "<p>What this proof is saying is: \"We know <code>A y \\/ B y</code>, so either <code>A y</code> or <code>B y</code> is true. Suppose that <code>A y</code> is true. Then ... . So <code>C y</code> is true. Otherwise, <code>B y</code> is true. Then ... , thus <code>C y</code> is true. Hence <code>C y</code> is true in either case.\"</p>",
        "id": 273579454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098072
    },
    {
        "content": "<p>the ... in this proof correspond to the two <code>sorry</code></p>",
        "id": 273579515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098101
    },
    {
        "content": "<p>and what i put in the sorry spot is how im proving C y in both cases</p>",
        "id": 273579533,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098127
    },
    {
        "content": "<p>??</p>",
        "id": 273579535,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098128
    },
    {
        "content": "<p>i tried this but both shows are underlined in red</p>",
        "id": 273579563,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098165
    },
    {
        "content": "<p>section<br>\n  variable U : Type<br>\n  variables A B C : U → Prop</p>\n<p>variable h1 : ∀x, A x ∨ B x<br>\n  variable h2 : ∀x, A x → C x<br>\n  variable h3 : ∀x, B x → C x</p>\n<p>example : ∀x, C x :=<br>\n  assume y,<br>\n  have h4 : A y ∨ B y, from h1 y,<br>\n  have h5 : A y → C y, from h2 y,<br>\n  have h6 : B y → C y, from h3 y,<br>\n  or.elim h4 (assume ha : A y, show C y, from or.inl h4)<br>\n  (assume hb : B y, show C y, from or.inr h4)<br>\nend</p>",
        "id": 273579564,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098166
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 273579623,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1646098204
    },
    {
        "content": "<p>^ that's a link btw</p>",
        "id": 273579636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098216
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n  <span class=\"kd\">variable</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h3</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">or.elim</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">h4</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">h4</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273579758,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098242
    },
    {
        "content": "<p>there you go is it easier for you to read now</p>",
        "id": 273579774,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098273
    },
    {
        "content": "<p>If you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">or.elim</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then the errors on the show go away, so the issue is not the show but the proof you put in for them</p>",
        "id": 273579784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098289
    },
    {
        "content": "<p>you correctly said that you wanted to show <code>C y</code> there, but the proof is not showing that</p>",
        "id": 273579800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098320
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n  <span class=\"kd\">variable</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"n\">x</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h3</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">or.elim</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h5</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h6</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273579870,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098366
    },
    {
        "content": "<p>the error message says as much too</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">h4</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">or.inl</span> <span class=\"n\">h4</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>It says that <code>or.inl h4</code> is proving <code>(A y ∨ B y) ∨ something</code> which is not <code>C y</code></p>",
        "id": 273579875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098369
    },
    {
        "content": "<p>no errors</p>",
        "id": 273579876,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098369
    },
    {
        "content": "<p>im sorry but i think this damn theorem prover is so annoying but thanks for your help</p>",
        "id": 273579889,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098403
    },
    {
        "content": "<p>what is your background? What got you interested?</p>",
        "id": 273579907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098432
    },
    {
        "content": "<p>we have to learn it for school</p>",
        "id": 273579946,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098445
    },
    {
        "content": "<p>what level are you at? Math or CS oriented?</p>",
        "id": 273579997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098516
    },
    {
        "content": "<p>i am doing comp sci B.S.</p>",
        "id": 273580011,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098538
    },
    {
        "content": "<p>still only on year 2.5</p>",
        "id": 273580019,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098549
    },
    {
        "content": "<p>wanna do another one</p>",
        "id": 273580112,
        "sender_full_name": "kctron sub",
        "timestamp": 1646098653
    },
    {
        "content": "<p>I will stick with my earlier suggestion of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> then. Once you have the idea of using types for doing logic then it won't be so bad. It helps if you have or get some functional programming experience too</p>",
        "id": 273580125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098672
    },
    {
        "content": "<p>and it's actually pretty game-like once you get into it</p>",
        "id": 273580175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098689
    },
    {
        "content": "<p>by the way, another fun thing you can do with completed problems is find ways to write them shorter (aka \"proof golf\"). Here's a short version of your proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273580324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646098907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n  <span class=\"kd\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"kd\">variable</span>  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273585637,
        "sender_full_name": "kctron sub",
        "timestamp": 1646104055
    },
    {
        "content": "<p>where to go from here</p>",
        "id": 273585639,
        "sender_full_name": "kctron sub",
        "timestamp": 1646104060
    },
    {
        "content": "<p>Hint: <code>h (f y)</code> is a proof of <code>P (f y) -&gt; P (f (f y))</code></p>",
        "id": 273586769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646105421
    },
    {
        "content": "<p>Is there any walking-through videos for the tutorial?</p>",
        "id": 274156994,
        "sender_full_name": "chensc",
        "timestamp": 1646412882
    },
    {
        "content": "<p>I don't think so, but there is a 24/7 helpline if you're stuck on something (i.e., here)</p>",
        "id": 274157302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646413005
    },
    {
        "content": "<p>So I have just started to dive into the tutorial, and got confused, maybe because lack of knowledge in type thorey . There is the following definition:<br>\ndef is_max (a : ℝ) (A : set ℝ) := a ∈ A ∧ a ∈ up_bounds A</p>\n<p>and above it, explanation \"/-- Predicate <code>is_max a A</code> means <code>a</code> is a maximum of <code>A</code> -/\"</p>\n<p>So basically, in Lean, a logical predicate has a type?  we can define predicates? <br>\nMaybe there is some more detailed explanation which is supposed to be a prerequisite for the tutorial?</p>\n<p>and another question: maybe I'm just used to first order set-theoretic logic, but are there any syntax-semantics distinctions in LEAN? I mean, sure Lean deduction system  is supposed to be sound, but is it supposed to be complete, in the sense of Godel's Completeness?</p>",
        "id": 274160229,
        "sender_full_name": "chensc",
        "timestamp": 1646414214
    },
    {
        "content": "<p><code> a ∈ A ∧ a ∈ up_bounds A</code> is an example of a type in Lean. And a proof of that assertion is a term of that type. Maybe you want to read <a href=\"https://xenaproject.wordpress.com/2020/06/20/mathematics-in-type-theory/\">my witterings on the matter</a>.</p>",
        "id": 274161176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414622
    },
    {
        "content": "<p>Lean is just supposed to be maths, so within Lean, just like within maths, there are things which are true but not provable and things which are undecidable.</p>",
        "id": 274161318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414672
    },
    {
        "content": "<p>But is there a way to prove that Lean is complete as a deduction system? That every true sentence (true in any model) is provable?</p>",
        "id": 274162937,
        "sender_full_name": "chensc",
        "timestamp": 1646415418
    },
    {
        "content": "<p>you can't prove these things within Lean, you'd have to be reasoning outside the system to do that, and IANAL(ogician).</p>",
        "id": 274170328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646418826
    },
    {
        "content": "<p>the standard foundations are split into two layers, first order logic and ZFC as a theory in this logic. In Lean, the roles of both of these are fulfilled by the same layer, so I don't see any good way to state something similar to Godel's completeness. I also ANAL though</p>",
        "id": 274219304,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646454944
    },
    {
        "content": "<p>Well all I know is that they proved independence of CH in Lean so some people around here will be able to answer your questions...</p>",
        "id": 274227717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646466509
    }
]