[
    {
        "content": "<p>this is probably simple, but I'm having some trouble managing it, how can I prove  that set membership of an enumerated inductive type is decidable? Looking through Zulip I see that I can derive fintype, but I'm not sure how to leverage it </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span> <span class=\"kd\">inductive</span> <span class=\"n\">atoms</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">atom_decidable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">atoms</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">atoms</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 213212382,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1602620870
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.decidable_mem_of_fintype\">docs#set.decidable_mem_of_fintype</a> looks like what you want, but its not an instance so apply_instance wouldn't find it.</p>",
        "id": 213213000,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602621223
    },
    {
        "content": "<p>Probably you should make this a local instance</p>",
        "id": 213213074,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602621265
    },
    {
        "content": "<p>Yeah I tried using that definition, I'm not exactly sure what it means to make it a local instance. If I try to use that definition, I end up with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">atoms</span><span class=\"o\">,</span>\n<span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">atoms</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">s</span>\n</code></pre></div>\n\n<p>Do I have to make a separate fintype instance for whatever the coercion on <code>s</code> is?</p>",
        "id": 213213392,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1602621450
    },
    {
        "content": "<p>It looks like you need a fintype instance for the subtype associated to your set.</p>",
        "id": 213213439,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602621481
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_fintype\">docs#set_fintype</a></p>",
        "id": 213213518,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602621508
    },
    {
        "content": "<p>I think this is a common misconception for those not used to constructive reasoning. Decidability of membership in a set has very little to do with the underlying type. For example, <code>{x | p}</code> is a <code>set atoms</code> for every <code>p : Prop</code>, and (for example) <code>a</code> belongs to this set iff <code>p</code> holds, which is not decidable in general.</p>",
        "id": 213213955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602621760
    },
    {
        "content": "<p>So your <code>atom_decidable</code> is not valid, or more precisely, equivalent to decidability of all propositions.</p>",
        "id": 213214113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602621842
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span> <span class=\"kd\">inductive</span> <span class=\"n\">atoms</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">atom_decidable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">atoms</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">atoms</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n\n<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 213214864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602622232
    },
    {
        "content": "<p>(And now I'll go back to my mathematician's cave where I can choose things that exist and decide on everything.)</p>",
        "id": 213215438,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602622551
    },
    {
        "content": "<p>Thanks guys, appreciate the pointers :)</p>",
        "id": 213215522,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1602622586
    }
]