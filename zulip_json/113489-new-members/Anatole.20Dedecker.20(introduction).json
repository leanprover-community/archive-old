[
    {
        "content": "<p>Hello everyone, I'm a first-year undergraduate in maths and computer science at Universite Paris Saclay (France), and I have been introduced to lean by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> . I am not familiar with Zulip, so let me know if I do anything wrong !</p>\n<p>Although the course was more about formalization in general than about Lean itself, I got really interested in the language and I think I start to get used to using it. I'm mostly using it for fun (yes, that's my kind of fun), but that doesn't mean I give up when I'm stuck (it turns out to be the opposite). </p>\n<p>Recently I also started to approach a bit more the computer science side of Lean. In particular, I've been trying to encode inside Lean a game we had to code in C++ at the beginning of the year, and it is really interesting (although I've got a lot of performances problem), so I might dive a little bit deeper to this side. </p>\n<p>Anyways, I'm really interested in doing more lean. I'm currently playing the Natural Number Game, but if you have any suggestion of other things to do, I'll take it. I can also help to do more \"useful\" things, for example translating between French and English, so if there are any project where an undergraduate could help, let me know !</p>\n<p>TL;DR : Hello everyone !</p>",
        "id": 201528554,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592735627
    },
    {
        "content": "<p>I think Patrick and Sebastien have been translating the natural number game into French!</p>",
        "id": 201528881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592736205
    },
    {
        "content": "<p>Those all sound like good projects. Feel free to ask about any problems you run into, you will find plenty of folks willing to help</p>",
        "id": 201528937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592736272
    },
    {
        "content": "<p>As for performance problems with Lean vs C++, well that's basically to be expected, although it is also possible that you've accidentally done something which has very poor asymptotic complexity like reducing numerals to unary</p>",
        "id": 201529008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592736366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Anatole.20Dedecker.20(introduction)/near/201528881\">said</a>:</p>\n<blockquote>\n<p>I think Patrick and Sebastien have been translating the natural number game into French!</p>\n</blockquote>\n<p>Yes I know, Patrick sent me the repo link so I could help too, I'm a little bit busy right now but I think I'll start soon !</p>",
        "id": 201529014,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592736395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Anatole.20Dedecker.20(introduction)/near/201529008\">said</a>:</p>\n<blockquote>\n<p>As for performance problems with Lean vs C++, well that's basically to be expected, although it is also possible that you've accidentally done something which has very poor asymptotic complexity like reducing numerals to unary</p>\n</blockquote>\n<p>I was using <code>nat</code> for computing purposes, which, as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> told me, doesn't seem to be a good idea <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 201529085,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592736509
    },
    {
        "content": "<p>Yes and no. <code>nat</code> is the most efficient primitive in the lean VM for doing arithmetic</p>",
        "id": 201529235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592736808
    },
    {
        "content": "<p>despite the apparent unary implementation</p>",
        "id": 201529241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592736820
    },
    {
        "content": "<p>Oh. So what is <code>num</code> for then ?</p>",
        "id": 201529302,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592736912
    },
    {
        "content": "<p>It is not much used. It can be used as a proof that <code>nat</code> can be viewed as an inductive over binary strings, and it can also be used for efficient nat computation <em>in the kernel</em></p>",
        "id": 201529628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592737445
    },
    {
        "content": "<p>However, we generally try to avoid computation in the kernel altogether because lean is better at checking explicit proofs than \"heavy refl\" proofs</p>",
        "id": 201529639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592737498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/Anatole.20Dedecker.20(introduction)/near/201528554\">said</a>:</p>\n<blockquote>\n<p>Although the course was more about formalization in general than about Lean itself, I got really interested in the language and I think I start to get used to using it.</p>\n</blockquote>\n<p>It was not even about formalization in general, it was about the concept of proof and proof writing.</p>",
        "id": 201529836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592737805
    },
    {
        "content": "<blockquote>\n<p>I'm mostly using it for fun (yes, that's my kind of fun), but that doesn't mean I give up when I'm stuck (it turns out to be the opposite). </p>\n</blockquote>\n<p>You don't have to explain that sense of \"fun\" here...</p>",
        "id": 201529857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592737890
    },
    {
        "content": "<blockquote>\n<p>Recently I also started to approach a bit more the computer science side of Lean. In particular, I've been trying to encode inside Lean a game we had to code in C++ at the beginning of the year, and it is really interesting (although I've got a lot of performances problem), so I might dive a little bit deeper to this side. </p>\n</blockquote>\n<p>If you are interested as Lean as a programming language then going straight from C++ to Lean is a very long jump, especially since we have very little documentation on this topic. Do you already know a functional programming language? If no then the more or less canonical next step is to read <a href=\"http://learnyouahaskell.com\">learnyouahaskell.com</a>. You should do that at some point, even independently of Lean. It's a very good way to broaden your perspective on programming, and it's very interesting, although a lot of it is about solving issues created by the masochistic idea of functional programming (the code name here is monad).</p>",
        "id": 201529978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592738116
    },
    {
        "content": "<p>Also, if you are serious about using Lean as a programming language, you may want to go directly to Lean 4. It's not yet ready as a proof assistant but it's already a much better programming language if I understand correctly.</p>",
        "id": 201530028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592738174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Anatole.20Dedecker.20(introduction)/near/201529978\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Recently I also started to approach a bit more the computer science side of Lean. In particular, I've been trying to encode inside Lean a game we had to code in C++ at the beginning of the year, and it is really interesting (although I've got a lot of performances problem), so I might dive a little bit deeper to this side. </p>\n</blockquote>\n<p>If you are interested as Lean as a programming language then going straight from C++ to Lean is a very long jump, especially since we have very little documentation on this topic. Do you already know a functional programming language? If no then the more or less canonical next step is to read <a href=\"http://learnyouahaskell.com\">learnyouahaskell.com</a>. You should do that at some point, even independently of Lean. It's a very good way to broaden your perspective on programming, and it's very interesting, although a lot of it is about solving issues created by the masochistic idea of functional programming (the code name here is monad).</p>\n</blockquote>\n<p>I do know functional languages (at least in theory, i haven't used them a lot though), and I encoded the game in a way I consider being functional-style, so really different from the C++ approach of course. I was actually quite close of it working (with a lot of <code>sorry</code> though, because proofs are often required when working with <code>{n : nat // n &lt; p}</code>), but it was <strong>really</strong> inefficient, and I couldn't find why it was. I'll have a look at Haskell anyway, and maybe making the game in Haskell will help me with the lean implementation.</p>",
        "id": 201530972,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592740030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> What kind of game are you trying to encode in Lean? I'm curious about how far Lean 3 can go in ordinary programming.</p>",
        "id": 201573150,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592809315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> Have you seen the \"Lean for hackers\" tutorial by <span class=\"user-mention\" data-user-id=\"220270\">@James King</span> ?</p>",
        "id": 201573436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592809655
    },
    {
        "content": "<p>Yes, I have ( <a href=\"https://agentultra.github.io/lean-for-hackers/\">https://agentultra.github.io/lean-for-hackers/</a> ), but it seems to be far from complete (compared to an ordinary programming language).</p>",
        "id": 201573643,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592809912
    },
    {
        "content": "<p>I've read some source code of Lean 4, that opens a whole lot of possibilities. For example, maybe we could have a standard library via FFI  to Rust's <code>std</code> library.</p>",
        "id": 201573939,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592810249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113489-new-members/topic/Anatole.20Dedecker.20(introduction)/near/201573150\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> What kind of game are you trying to encode in Lean? I'm curious about how far Lean 3 can go in ordinary programming.</p>\n</blockquote>\n<p>It's a game called \"Squadro\". I might have chosen too difficult for a first approach :D</p>",
        "id": 201602544,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592831119
    }
]