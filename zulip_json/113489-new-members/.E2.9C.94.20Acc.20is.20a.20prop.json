[
    {
        "content": "<p>Hey, I'm trying to show that <code>Acc</code> is a subsingleton even if we don't force its universe to be <code>prop</code>, and my relatively basic argument, which I believe to be by structural induction, doesn't pass lean's well-founded test. Is there something obviously wrong with it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Acc</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Acc</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Acc</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Acc.inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">yx</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">α</span> <span class=\"n\">r</span>\n  <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">yx</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">ahx</span> <span class=\"n\">ihx</span> <span class=\"n\">y</span> <span class=\"n\">yx</span><span class=\"o\">,</span> <span class=\"n\">ahx</span> <span class=\"n\">y</span> <span class=\"n\">yx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Acc_prop</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Acc.mk</span> <span class=\"n\">_</span> <span class=\"n\">ah</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Acc.mk</span> <span class=\"n\">_</span> <span class=\"n\">bh</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">yx</span><span class=\"o\">,</span> <span class=\"n\">Acc_prop</span> <span class=\"o\">(</span><span class=\"n\">ah</span> <span class=\"n\">y</span> <span class=\"n\">yx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bh</span> <span class=\"n\">y</span> <span class=\"n\">yx</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Acc</span>\n</code></pre></div>",
        "id": 296268954,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661930556
    },
    {
        "content": "<p>It's fine, but lean doesn't support well founded recursion on types like <code>Acc</code>, you have to use <code>induction</code> or <code>Acc.rec</code> directly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Acc_prop</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">ah</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">bh</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">yx</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">y</span> <span class=\"n\">yx</span> <span class=\"o\">(</span><span class=\"n\">bh</span> <span class=\"n\">y</span> <span class=\"n\">yx</span><span class=\"o\">))</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296269585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661930864
    },
    {
        "content": "<p>ah, that's neat, thanks!</p>",
        "id": 296269776,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661930961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">Rémi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 296269785,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661930967
    },
    {
        "content": "<p>is there a proof of that fact somewhere that doesn't use pattern matching or tactics at all?<br>\nI've got as far as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Acc_prop'</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">α</span> <span class=\"n\">r</span>\n  <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">ahx</span> <span class=\"n\">ihx</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n      <span class=\"bp\">@</span><span class=\"n\">Acc.rec</span> <span class=\"n\">α</span> <span class=\"n\">r</span>\n        <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">e.rec_on</span> <span class=\"o\">(</span><span class=\"n\">Acc.mk</span> <span class=\"n\">x</span> <span class=\"n\">ahx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">)</span>\n        <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">ahy</span> <span class=\"n\">ihy</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n          <span class=\"o\">(</span> <span class=\"kd\">by</span>\n            <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n              <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n              <span class=\"n\">ext</span> <span class=\"n\">z</span> <span class=\"n\">zx</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">ihx</span> <span class=\"n\">z</span> <span class=\"n\">zx</span> <span class=\"o\">(</span><span class=\"n\">ahy</span> <span class=\"n\">z</span> <span class=\"n\">zx</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n            <span class=\"o\">:</span> <span class=\"n\">e.rec_on</span> <span class=\"o\">(</span><span class=\"n\">Acc.mk</span> <span class=\"n\">x</span> <span class=\"n\">ahx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Acc.mk</span> <span class=\"n\">y</span> <span class=\"n\">ahy</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n        <span class=\"n\">x</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>but gave up in the end</p>",
        "id": 296270158,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1661931124
    }
]