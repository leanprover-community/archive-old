[
    {
        "content": "<p>Could someone point me to or tell me what the underlying definition of <code>{}</code> is? For instance, the singleton set <code>{x}</code>. I haven't been able to find it in mathlib.</p>",
        "id": 212929970,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602356434
    },
    {
        "content": "<p>Nevermind, I guess VIsual Code says it is singleton.</p>",
        "id": 212930173,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602356759
    },
    {
        "content": "<p>Hmm, but then set.singleton uses the same notation.</p>",
        "id": 212930311,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602356901
    },
    {
        "content": "<p>(deleted, Pedro gave a better answer)</p>",
        "id": 212930434,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602357093
    },
    {
        "content": "<p><code>{}</code> is an empty \"set comprehension,\" like <code>{1, 2, 3}</code> but with zero elements.</p>",
        "id": 212930566,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357248
    },
    {
        "content": "<p>Look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lawful_singleton\">docs#is_lawful_singleton</a>, it should give you an idea of what is happening behind the scenes.</p>",
        "id": 212930594,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357299
    },
    {
        "content": "<p>Is there any underlying definition somewhere for set comprehension?</p>",
        "id": 212930596,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602357300
    },
    {
        "content": "<p>So it appears that a set is just a predicate?</p>",
        "id": 212930660,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602357375
    },
    {
        "content": "<p>The notation <code>{1, 2, 3}</code> folds <code>has_insert.insert</code> with <code>has_emptyc.emptyc</code>.</p>",
        "id": 212930661,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357379
    },
    {
        "content": "<p>Yes, a set is just a predicate.</p>",
        "id": 212930666,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357391
    },
    {
        "content": "<p><code>{}</code> is equal to <code>∅</code>, which is equivalent to <code>λ _, false</code>.</p>",
        "id": 212930689,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/set.20notation/near/212930661\">said</a>:</p>\n<blockquote>\n<p>The notation <code>{1, 2, 3}</code> folds <code>has_insert.insert</code> with <code>has_emptyc.emptyc</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is that correct? I can't seem to find a <code>notation</code> definition for <code> `{` l:(foldr `, ` (x xs, insert x xs) ∅ `}`)</code>. Is it defined internally in C++?</p>",
        "id": 212930770,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357574
    },
    {
        "content": "<p>Does the following represent the proposition that <code>a</code> is a member of <code>set s</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">s</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 212930821,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602357649
    },
    {
        "content": "<p>Yes. Since sets are predicates (<code>α → Prop</code>) and <code>a : α</code>, <code>s a : Prop</code>, which is <code>true</code> or <code>false</code> depending on whether <code>a</code> \"is in\" <code>s</code>.</p>",
        "id": 212930887,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602357723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/set.20notation/near/212930770\">said</a>:</p>\n<blockquote>\n<p>I can't seem to find a <code>notation</code> definition for <code> `{` l:(foldr `, ` (x xs, insert x xs) ∅ `}`)</code>. Is it defined internally in C++?</p>\n</blockquote>\n<p>I think it's defined here: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/brackets.cpp</a></p>",
        "id": 212930966,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602357881
    },
    {
        "content": "<p>Ah, yes, this looks like it.</p>",
        "id": 212931070,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602358074
    },
    {
        "content": "<p>Would this be an equivalent definition: <code>def singleton (α : Type) (a : α) (s : set α) := ∀ b : α, (set.mem b s) → b = a</code>?</p>",
        "id": 212931317,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602358390
    },
    {
        "content": "<p>Doesn't insert itself use the <code>{}</code> notation?</p>",
        "id": 212931394,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602358503
    },
    {
        "content": "<p><code>set.insert</code> uses <code>{ ... | ... }</code> notation, which is different from <code>{.., ..., ...}</code>.</p>",
        "id": 212932874,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602360977
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"k\">#print</span> <span class=\"n\">set.insert</span> <span class=\"c1\">-- λ {α : Type u} (a : α) (s : set α), set_of (λ (b : α), or (eq b a) (has_mem.mem b s))</span>\n</code></pre></div>\n\n<p>If you disable notations when printing, you can see the definition of <code>set.insert</code>.</p>",
        "id": 212932899,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602361033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"139442\">Patrick Thomas</span> <a href=\"#narrow/stream/113489-new-members/topic/set.20notation/near/212931317\">said</a>:</p>\n<blockquote>\n<p>Would this be an equivalent definition: <code>def singleton (α : Type) (a : α) (s : set α) := ∀ b : α, (set.mem b s) → b = a</code>?</p>\n</blockquote>\n<p>This is a predicate <em>on sets</em>. It says that the set <code>s</code> contains only one element.</p>",
        "id": 212932935,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602361082
    },
    {
        "content": "<p>Sets are predicates <em>on a type</em>. Consider <code>def singleton' (a : α) : set α := λ x, x = a</code>, <code>singleton' a</code> is a set of <code>α</code>, that is, a predicate on <code>α</code>. While with your definition <code>singleton a s</code> says that <code>s</code> is a set that only contains <code>a</code>.</p>",
        "id": 212933034,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602361262
    },
    {
        "content": "<p>That is what I was intending.</p>",
        "id": 212933174,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602361531
    },
    {
        "content": "<p>That it was an equivalent definition to <code>{a}</code>.</p>",
        "id": 212933225,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602361589
    },
    {
        "content": "<p>Wait, are you saying that singleton' is a set of alpha that only contains a?</p>",
        "id": 212933948,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602362932
    },
    {
        "content": "<p>Yes, <code>singleton' a</code> is a set that only contains <code>a</code>.</p>",
        "id": 212934038,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602363081
    },
    {
        "content": "<p>I guess I don't understand the difference between my <code>def singleton (α : Type) (a : α) (s : set α) := ∀ b : α, (set.mem b s) → b = a</code> and your <code>def singleton' (a : α) : set α := λ x, x = a</code>.</p>",
        "id": 212935158,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602365004
    },
    {
        "content": "<p>Is it just that mine takes a set as a parameter?</p>",
        "id": 212935164,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602365040
    },
    {
        "content": "<p>Observe the types of both definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sing</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sing'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- Remember that `set α = α → Prop`.</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">sing</span> <span class=\"n\">a</span> <span class=\"c1\">-- `set α → Prop`, that is, a predicate on `set α`.</span>\n<span class=\"k\">#check</span> <span class=\"n\">sing'</span> <span class=\"n\">a</span> <span class=\"c1\">-- `set α`, that is, a predicate on `α`.</span>\n</code></pre></div>",
        "id": 212935562,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602365686
    },
    {
        "content": "<p>I see. Thank you.</p>",
        "id": 212935634,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602365778
    },
    {
        "content": "<p>Your predicate talks about sets. It is true if and only if the set in question is a singleton set. My <code>singleton'</code> <em>creates</em> a set, that is, given an <code>a : α</code> it creates a predicate <code>α → Prop</code>.</p>",
        "id": 212935642,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602365796
    },
    {
        "content": "<p>So...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">set.mem</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">set.mem</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212935923,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602366239
    },
    {
        "content": "<p>Yes! That is exactly it!</p>",
        "id": 212936011,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366343
    },
    {
        "content": "<p>Cool. Thank you!</p>",
        "id": 212936065,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602366374
    },
    {
        "content": "<p>I'd recommend using <code>x ∈ s</code> as it is a bit easier to read than <code>set.mem</code>.</p>",
        "id": 212936070,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366381
    },
    {
        "content": "<p>Ok.</p>",
        "id": 212936086,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602366424
    },
    {
        "content": "<p>Also, since sets are predicates and predicates are functions, you can write <code>λ x, s x ∨ t x</code> to make what is happening under the hood explicit.</p>",
        "id": 212936089,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1602366429
    },
    {
        "content": "<p>Cool.</p>",
        "id": 212936152,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1602366507
    },
    {
        "content": "<p>So, I've seen that Lean has a kind of set notation: <code>{a : nat | a &gt;= 3}</code> (modulo unicode syntax). Is this hard-coded into the language, or could you define a similar kind of notation for other things?</p>",
        "id": 220528900,
        "sender_full_name": "Lúcás Meier",
        "timestamp": 1608485604
    },
    {
        "content": "<p>It's hardcoded.</p>",
        "id": 220528909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608485622
    },
    {
        "content": "<p>but you can define similar notation, as long as you don't start with <code>{</code></p>",
        "id": 220529030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608485783
    },
    {
        "content": "<p>Does lean recognise any kind of  \"dot notation\" for sets?<br>\n<code>def S (n: ℕ) :set ℕ:= {1,2,...,n}</code></p>",
        "id": 246392984,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626634742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> No, not as far as I've seen.  That set happens to be called <code>set.Icc 1 n</code>, though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">S'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">set.Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span>\n<span class=\"kd\">def</span> <span class=\"n\">S''</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">set.univ</span>\n</code></pre></div>",
        "id": 246393273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626635111
    },
    {
        "content": "<p>If I have a finite field F with card p (odd and large) say,<br>\nthen is it possible to define a set to be say {0 , 1, ... (p-1)/2} :<code>set F</code>?</p>",
        "id": 246394113,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626636253
    },
    {
        "content": "<p>by defining to be the image of some function perhaps? any convenient way?</p>",
        "id": 246394122,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626636292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408694\">@Alex Zhang</span> There's a natural map from natural numbers to a ring, which is given as a coercion instance, and you can take the image of <code>set.Icc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">set.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>It's up to you to pass in the upper bound you want.</p>",
        "id": 246394265,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636550
    },
    {
        "content": "<p>More generally,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"bp\">''</span> <span class=\"n\">set.Icc</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 246394273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636572
    },
    {
        "content": "<p>Very helpful, Kyle!</p>",
        "id": 246394427,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626636768
    },
    {
        "content": "<p>Will you be taking sums over these? There is also <code>finset.Ico</code>, and soon we will also have <code>finset.Icc</code> and all the other variants.</p>",
        "id": 246394689,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626637171
    }
]