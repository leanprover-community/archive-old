[
    {
        "content": "<p>What's the command to make Lean automatically derive <code>decidable_eq</code> for some custom inductive type?</p>",
        "id": 148007940,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542674789
    },
    {
        "content": "<p>@[derive decidable_eq]</p>",
        "id": 148007958,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542674835
    },
    {
        "content": "<p>ah I should've thought of that, thanks! :)</p>",
        "id": 148007972,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542674869
    },
    {
        "content": "<p>Hm, when I add</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>to a file, definitions below it which used to pass now fail with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">subst</span><span class=\"bp\">._</span><span class=\"n\">main&#39;</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice&#39;</span>\n</pre></div>\n\n\n<p>Why might this be?</p>\n<p>Is it basically because <code>classical</code> makes things uncomputable? If so, maybe Lean should detect that <code>classical</code> is not used in a particular case and still compile the definition?</p>",
        "id": 148013728,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542683891
    },
    {
        "content": "<p>Try <code>[instance, priority 0]</code>. Otherwise it uses classical decidability even when there's proper decidability.</p>",
        "id": 148013848,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542684116
    },
    {
        "content": "<p>Ah indeed, thanks Chris!</p>",
        "id": 148013915,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542684225
    },
    {
        "content": "<p>This trips lots of people up! I wonder where people are learning this trick? Not putting priority 0 can trip you up later in quite a confusing way</p>",
        "id": 148024166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542702124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  needs to fix the very bottom of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html</a></p>",
        "id": 148024213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542702202
    },
    {
        "content": "<p>I think Lean shows an error message when it can't find an instance for <code>decidable</code>, and that error message does not include setting the priority. It would be very helpful if it did.</p>",
        "id": 148024215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702206
    },
    {
        "content": "<p>and <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a></p>",
        "id": 148024219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542702224
    },
    {
        "content": "<p>I'm on it -- I'll do it tomorrow.</p>",
        "id": 148044684,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1542726186
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 148049459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542730116
    },
    {
        "content": "<p>how about <em>not</em> using <code>classical.dec</code></p>",
        "id": 148049511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542730153
    },
    {
        "content": "<p>Let's just agree to not not use it</p>",
        "id": 148049651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542730250
    },
    {
        "content": "<p>that doesn't mean we <em>use</em> it :P</p>",
        "id": 148049677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542730282
    },
    {
        "content": "<p>You may have missed Reid's point</p>",
        "id": 148049697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542730311
    },
    {
        "content": "<p>It doesn't mean <em>you</em> use it</p>",
        "id": 148049698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542730313
    },
    {
        "content": "<p>Is it possible to make Lean display the values of constant variables in the tactic state? E.g. if i have <code>lst: list nat</code> which is also empty, it would be nice to see that it's empty.</p>",
        "id": 148074938,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542754797
    },
    {
        "content": "<p>either this doesn't make sense, or <code>subst lst</code></p>",
        "id": 148075021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542754892
    },
    {
        "content": "<p>Hm I should elaborate, maybe I'm misunderstanding how <code>induction</code> works. Say I have a hypothesis <code>h: InductiveFoo list.nil</code>, where <code>InductiveFoo: list nat -&gt; Prop</code>. So then running <code>induction h</code> creates cases for all the constructors of <code>InductiveFoo</code>, which take the list as an input, say <code>lst</code>. But the <code>lst</code> is empty, so it'd be nice to see that in the state.</p>",
        "id": 148075182,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542755057
    },
    {
        "content": "<p>you can't because it's forgotten</p>",
        "id": 148075295,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542755163
    },
    {
        "content": "<p>you might want to <code>generalize_hyp</code></p>",
        "id": 148075309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542755171
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 148075886,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542755806
    },
    {
        "content": "<p>Perhaps it would be useful to have a reference sheet for translating from Coq to Lean tactics?</p>",
        "id": 148115433,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542812637
    },
    {
        "content": "<p>I recall such a thing being made at one point. Maybe it's in mathlib docs?</p>",
        "id": 148115539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542812708
    },
    {
        "content": "<p><a href=\"https://github.com/jldodds/coq-lean-cheatsheet\" target=\"_blank\" title=\"https://github.com/jldodds/coq-lean-cheatsheet\">https://github.com/jldodds/coq-lean-cheatsheet</a></p>",
        "id": 148115560,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542812729
    },
    {
        "content": "<p>Note the date though, it'll need updating.</p>",
        "id": 148115566,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542812738
    },
    {
        "content": "<p>Oh, nice!</p>",
        "id": 148115644,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542812779
    },
    {
        "content": "<p>Is there a general tactic for showing <code>false</code> by \"this term could not have been constructed\"? E.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Foo</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">FooT</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">true</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">FooF</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">false</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- This term could not have been constructed</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">impossible</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">true</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148119720,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542816363
    },
    {
        "content": "<p><code>cases</code></p>",
        "id": 148120085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542816699
    },
    {
        "content": "<p>also empty match</p>",
        "id": 148120091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542816704
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma impossible : Foo true false → false.\n</pre></div>",
        "id": 148120098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542816717
    },
    {
        "content": "<p>You have to make <code>Foo : bool -&gt; bool -&gt; Prop</code> for that.</p>",
        "id": 148120175,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542816765
    },
    {
        "content": "<p>Yeah, for <code>Prop -&gt; Prop -&gt; Prop</code> both of these fail, but that wasn't actually my problem, so thanks!</p>",
        "id": 148120216,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542816839
    },
    {
        "content": "<p>It seems that variations on this topic comes up again and again. We should really find a way to document that</p>",
        "id": 148120406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542816985
    },
    {
        "content": "<p>That would be nice :) I was also surprised to see that more often than not <code>contradiction</code> fails when <code>cases h</code> works. Description: <code>The contradiction tactic attempts to find in the current local context an hypothesis that is equivalent to an empty inductive type (e.g. false)</code>. I thought a hypothesis that cannot be constructed is exactly that, but maybe I'm misunderstanding it?</p>",
        "id": 148134832,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542831459
    },
    {
        "content": "<p>Is it possible to reserve some notation for an inductive type and then use it while defining the type, like in Coq? I tried this,  but the parser seems to fail:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">∋</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Typeof</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">Typeof</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">])</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Typeof</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Typeof</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">])</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Typeof</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">])</span> <span class=\"err\">∋</span> <span class=\"n\">A</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">])</span> <span class=\"err\">∋</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">infix</span> <span class=\"err\">∋</span> <span class=\"o\">:=</span> <span class=\"n\">Typeof</span>\n</pre></div>",
        "id": 148147233,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542849170
    },
    {
        "content": "<p>Yes! You can just put a notation line between the inductive header and the first constructor</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Typeof</span><span class=\"o\">{</span><span class=\"n\">Tp</span><span class=\"o\">}:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">∋</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">Typeof</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">])</span> <span class=\"err\">∋</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">])</span> <span class=\"err\">∋</span> <span class=\"n\">A</span>\n</pre></div>",
        "id": 148150619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542855626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I added a discussion of the <code>priority 0</code> trick to Section 10.4 of TPIL (search on \"priority 0\"):<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions</a><br>\nI also added a back reference in Section 11:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle</a></p>\n<p>Finally, I fixed an old issue raised by <span class=\"user-mention\" data-user-id=\"122022\">@Joseph Corneli</span> by changing all the examples in 6.4:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#attributes\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#attributes\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#attributes</a><br>\n<a href=\"https://github.com/leanprover/theorem_proving_in_lean/issues/62\" target=\"_blank\" title=\"https://github.com/leanprover/theorem_proving_in_lean/issues/62\">https://github.com/leanprover/theorem_proving_in_lean/issues/62</a></p>\n<p>Teaching my class next semester will give me a chance to review and expand TPIL. I am planning to add one more chapter on some of the fine points of dependent type theory, e.g. explaining how to work with equality and dependent types (the dark side of type theory), and explaining how Lean manages recursion on arbitrary well-founded relations. I'll also try to write a less ambitious but up-to-date version of Programming in Lean. But I am counting on the mathlib crew to continue documenting mathlib and all the new tactics, and to provide useful guidance on using the library and proving theorems.</p>",
        "id": 148238627,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1542990572
    },
    {
        "content": "<p>I have not been using Lean seriously since term started; there are three weeks to go before it finishes. After that I fully intend to go back to the perfectoid project. But when I don't understand something, my instinct is to write docs about it, because if I work something out and don't write down what I learnt then I realise a month later that I've forgotten it all again!</p>",
        "id": 148238846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542990817
    },
    {
        "content": "<p>Thank you very much Jeremy! Your documentation work is really crucial.</p>",
        "id": 148247373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543003363
    },
    {
        "content": "<p>I'm now reading random pieces of TPIL, and I have a couple more suggestions about chapter 10:</p>\n<ul>\n<li>at several places, emacs is mentioned but not VScode. I guess this goes back to before the VScode extension was available, but it could be misleading</li>\n<li>in 10.5. Managing Type Class Inference, I think it would be nice to add the standard tricks to see what's the name of an instance Lean is finding, and sometimes what's the actual definition, as in</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>maybe find a better example for the second one since the answer is not super easy to read (every nice example coming to my mind are in mathlib...)</p>",
        "id": 148249579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543007188
    },
    {
        "content": "<p>Oh, it seems <code>apply_instance</code> is never mentioned in TPIL <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 148249664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543007344
    },
    {
        "content": "<p>Another thing that would be very helpful, both because it can be puzzling and because it can be very helpful would be to discuss</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- ok</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">n</span> <span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>  <span class=\"c1\">-- ok</span>\n</pre></div>",
        "id": 148249726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543007417
    },
    {
        "content": "<p>Thanks for the input. Yes, TPIL evolved over time, and the last major rewrite was early in the days of Lean 3, before there was a VSCode extension. I'll do a global search and try to make the text less emacs-centric.</p>\n<p>I'll discuss <code>apply_instance</code> and <code>infer_instance</code>. I am thinking of using these examples:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> example 1: using apply_instance -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> example 2: using infer_instance -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> example 3: seeing them -/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span>    <span class=\"c1\">-- nat.has_add</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span>   <span class=\"c1\">-- (unreadable)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">bar</span>    <span class=\"c1\">-- pi.inhabited ℕ</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">bar</span>   <span class=\"c1\">-- {default := λ (a : ℕ), 0}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">baz</span>    <span class=\"c1\">-- infer_instance</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">baz</span>   <span class=\"c1\">-- (same as for #reduce foo)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">bla</span>    <span class=\"c1\">-- infer_instance</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">bla</span>   <span class=\"c1\">-- {default := λ (a : ℕ), 0}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> example 4: tricks to be more concise -/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">inhabited</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> examples 5: core Lean can&#39;t find an instance for inhabited set -/</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- example {α : Type*} : inhabited (set α) := by apply_instance</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> example 6: supplying one manually -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span>     <span class=\"c1\">-- λ {α : Type u}, {default := ∅}</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">ℕ</span>  <span class=\"c1\">-- {default := λ (a : ℕ), false}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> example 7: unfolding a definition so Lean can find it -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span>     <span class=\"c1\">-- λ (α : Type u), eq.mpr _ (pi.inhabited α)</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">ℕ</span>  <span class=\"c1\">-- {default := λ (a : ℕ), true}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> example 8: using dunfold instead -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dunfold</span> <span class=\"n\">set</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span>     <span class=\"c1\">-- λ (α : Type u), id (pi.inhabited α)</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">inhabited</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"bp\">ℕ</span>  <span class=\"c1\">-- {default := λ (a : ℕ), true}</span>\n</pre></div>",
        "id": 148277429,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1543065817
    },
    {
        "content": "<blockquote>\n<p>Yes! You can just put a notation line between the inductive header and the first constructor</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Typeof</span><span class=\"o\">{</span><span class=\"n\">Tp</span><span class=\"o\">}:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">∋</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">Typeof</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">])</span> <span class=\"err\">∋</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">S_</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">])</span> <span class=\"err\">∋</span> <span class=\"n\">A</span>\n</pre></div>\n\n\n</blockquote>\n<p>Is there something similar for dependant <code>structure</code>? If one field of my structure is a binary operator, can I define an infix notation usable in the remaining fields declaration?</p>",
        "id": 151432316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544519876
    },
    {
        "content": "<p>I usually make the <code>structure</code> extend the notation typeclass in this situation.</p>",
        "id": 151432380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544519937
    },
    {
        "content": "<p>In fact I have been known to make new notation typeclasses called things like <code>group_notation</code> extending <code>has_mul</code>, <code>has_one</code> and <code>has_inv</code>, and then extending these too so I get a bunch of notation at once.</p>",
        "id": 151432403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544519989
    },
    {
        "content": "<p>Thanks Kevin. I know all this, but I'm still interested in an answer to my question.</p>",
        "id": 151432470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544520078
    },
    {
        "content": "<p>Yes I understand. For example if the notation is not in the standard notation list then it would be nicer to add it directly in the definition of the structure.</p>",
        "id": 151432479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544520110
    },
    {
        "content": "<p>You can define notation in structures that's used in the remaining fields. But I think it's just local to the structure declaration.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">patrick</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">^^^</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">^^^</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">patrick</span><span class=\"bp\">.</span><span class=\"n\">h</span>\n</pre></div>",
        "id": 151440921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1544529934
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 151445285,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544534965
    },
    {
        "content": "<p>I just crossed this item off my to do list. <code>apply_inference</code> and such are now discussed here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference</a>. And VS Code is now mentioned whenever Emacs is, with VS Code first.</p>",
        "id": 154258172,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1546541374
    },
    {
        "content": "<blockquote>\n<p>If you add this to your file in Emacs mode and use C-c C-x to run an independent Lean process on your file, the output buffer will show a trace every time the type class resolution procedure is subsequently triggered.</p>\n</blockquote>\n<p>This paragraph (in the section your referred to) is still Emacs centric</p>",
        "id": 154258563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546541673
    },
    {
        "content": "<p>Yes, that is the only one, because I don't know how to start an independent Lean process from within VS Code. I guess I'll remind people that they can run Lean from the VS Code terminal.</p>",
        "id": 154260198,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1546543220
    },
    {
        "content": "<p>Why would you do that?</p>",
        "id": 154260213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546543244
    },
    {
        "content": "<p>The trace is printed in the info view</p>",
        "id": 154260222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546543254
    },
    {
        "content": "<p>Oh! I forgot. Good point. I'll fix that.</p>",
        "id": 154260439,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1546543435
    },
    {
        "content": "<p>Great!</p>",
        "id": 154260510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546543468
    },
    {
        "content": "<p>Fixed. Thanks for catching it.<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#managing-type-class-inference</a></p>",
        "id": 154261167,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1546544050
    },
    {
        "content": "<p>Hello! Is there anything special I need to do to make Lean recognise my <code>instance : has_zero Foo</code> as being equivalent to <code>0</code>? I got this state while trying to use <code>rw [this]</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">π₂</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">3</span> <span class=\"n\">goals</span>\n<span class=\"n\">π₂</span> <span class=\"o\">:</span> <span class=\"n\">mult</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">π₂</span> <span class=\"bp\">=</span> <span class=\"n\">π₂</span>\n<span class=\"err\">⊢</span> <span class=\"n\">mult</span><span class=\"bp\">.</span><span class=\"n\">Zero</span> <span class=\"bp\">+</span> <span class=\"n\">π₂</span> <span class=\"bp\">=</span> <span class=\"n\">π₂</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span><span class=\"bp\">.</span><span class=\"n\">Zero</span>\n</pre></div>\n\n\n<p>even though I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mult</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">mult</span><span class=\"bp\">.</span><span class=\"n\">Zero</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>above</p>",
        "id": 155250652,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547643039
    },
    {
        "content": "<p>rewrites don't recognise definitional equality, only syntactic equality.</p>",
        "id": 155250968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547643319
    },
    {
        "content": "<p>So you could try \"show 0 + pi2 = _\" before the rewrite</p>",
        "id": 155250980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547643335
    },
    {
        "content": "<p>or \"change mult.Zero + _ = _ at this\". Maybe it will work after one of these changes. But not after both ;-)</p>",
        "id": 155251052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547643373
    },
    {
        "content": "<p><code>convert this</code> should also work</p>",
        "id": 155251072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547643399
    },
    {
        "content": "<p>but <code>this</code> isn't the goal</p>",
        "id": 155251096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547643424
    },
    {
        "content": "<p>Oh!</p>",
        "id": 155251103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547643443
    },
    {
        "content": "<p>This <code>convert</code> trick works when the thing you're rewriting is precisely one side of the equality I guess.</p>",
        "id": 155251182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547643521
    },
    {
        "content": "<p>or <code>erw this</code> would also work but it's not as nice</p>",
        "id": 155251188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547643530
    },
    {
        "content": "<p>In fact you can use <code>a' = b'</code> to prove <code>a = b</code> with neither side matching definitionally (you'll get two new goals <code>a = a'</code> and <code>b = b'</code>), but then you run the risk that the new goals are not actually true <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 155251370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547643698
    },
    {
        "content": "<p>Ah, I see, thanks! And related, I'm proving that an object with three elements and custom add/mult tables is a semiring, how ugly is it to do all my proofs like this?</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kn\">lemma</span> <span class=\"n\">add_assoc</span> <span class=\"o\">(</span><span class=\"n\">π₁</span> <span class=\"n\">π₂</span> <span class=\"n\">π₃</span><span class=\"o\">:</span> <span class=\"n\">mult</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">π₁</span> <span class=\"bp\">+</span> <span class=\"n\">π₂</span> <span class=\"bp\">+</span> <span class=\"n\">π₃</span> <span class=\"bp\">=</span> <span class=\"n\">π₁</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">π₂</span> <span class=\"bp\">+</span> <span class=\"n\">π₃</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">π₁</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">π₂</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">π₃</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 155252212,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547644434
    },
    {
        "content": "<p>it will work, although there are simpler proofs where you ony case on one of them, I think</p>",
        "id": 155252434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547644629
    },
    {
        "content": "<p>Hm, I found that without expanding every case, I had to do a bit more work by using other lemmas and so on. The definition of <code>add</code> is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mult</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Zero</span><span class=\"o\">:</span> <span class=\"n\">mult</span>\n<span class=\"bp\">|</span> <span class=\"n\">One</span><span class=\"o\">:</span> <span class=\"n\">mult</span>\n<span class=\"bp\">|</span> <span class=\"n\">Omega</span><span class=\"o\">:</span> <span class=\"n\">mult</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">mult</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">mult</span><span class=\"bp\">.</span><span class=\"n\">Zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">mult</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">mult</span><span class=\"bp\">.</span><span class=\"n\">One</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ω</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">mult</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span><span class=\"o\">:</span> <span class=\"n\">mult</span> <span class=\"bp\">→</span> <span class=\"n\">mult</span> <span class=\"bp\">→</span> <span class=\"n\">mult</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">π</span>\n<span class=\"bp\">|</span> <span class=\"n\">π</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">π</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ω</span>\n<span class=\"bp\">|</span> <span class=\"n\">ω</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ω</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">ω</span> <span class=\"o\">:=</span> <span class=\"n\">ω</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">mult</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 155252646,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547644815
    },
    {
        "content": "<p>right</p>",
        "id": 155252763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547644951
    },
    {
        "content": "<p>you should have lemmas like <code>x + ω = ω</code> as simp lemmas which should simplify most of the cases</p>",
        "id": 155252890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547645076
    },
    {
        "content": "<p>or you could just split into 27 cases if you want</p>",
        "id": 155252915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547645107
    },
    {
        "content": "<p>Ah ok, i'll try it with simp as well, thanks!</p>",
        "id": 155253007,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547645194
    },
    {
        "content": "<p>Scott Morrison's case-bashing tactic would probably be useful here. But I don't know where that tactic lives at the moment...</p>",
        "id": 155254705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547646935
    },
    {
        "content": "<p>if you want to do a case bashing proof, another approach is to prove <code>fintype mult</code> and <code>decidable_eq mult</code> (you can <code>derive</code> this), and then you can just revert everything and use <code>dec_trivial</code></p>",
        "id": 155255138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547647294
    },
    {
        "content": "<p>Should even be reasonably fast, I guess.</p>",
        "id": 155255210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547647336
    },
    {
        "content": "<p>as long as you don't have too many variables; it is still 27 cases</p>",
        "id": 155255232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547647362
    },
    {
        "content": "<p>Kind of a stupid question, but when I'm using other computer algebra systems I would expect checking a million cases to be very quick. Mario's comments suggest that 27 is rather large for Lean. What is happening here?</p>",
        "id": 155256347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547648285
    },
    {
        "content": "<p>There is a large overhead of the expression that is generated, elaboration for it, and typechecking</p>",
        "id": 155257947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649456
    },
    {
        "content": "<p>I don't think 27 is that large in this context, I guess it's probably less than a second to check</p>",
        "id": 155258030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649492
    },
    {
        "content": "<p>I just think it's better to have more \"human\" proofs with fewer cases</p>",
        "id": 155258059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649520
    },
    {
        "content": "<p>This is what I don't understand. We have to check that 27 things of the form add a (add b c) = add (add a b) c hold and in each case this is by refl.</p>",
        "id": 155258070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547649528
    },
    {
        "content": "<p>How long does it take Lean to prove (0 + 1) + 1 = 0 + (1 + 1) in this type?</p>",
        "id": 155258119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547649569
    },
    {
        "content": "<p>there is also all the intermediate steps, the generation of motives, lots of abstraction and substitution going on, and large terms being built up behind the scenes before you even attack those 27 cases</p>",
        "id": 155258201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649613
    },
    {
        "content": "<p>So the bottleneck is elsewhere?</p>",
        "id": 155258224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547649637
    },
    {
        "content": "<p>I have heard it repeatedly asserted that the kernel is not a bottleneck</p>",
        "id": 155258252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649663
    },
    {
        "content": "<p>Again the idea of a \"large\" term is confusing to me. In python I could happily manipulate a list with 1000 elements.</p>",
        "id": 155258265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547649667
    },
    {
        "content": "<p>this term has way more than 1000 subterms</p>",
        "id": 155258275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649681
    },
    {
        "content": "<p>One of my kids has been learning about algorithms over the last few months and I realise now that I am far more aware of these things than I used to be.</p>",
        "id": 155258304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547649719
    },
    {
        "content": "<p>all in all it makes lean just look a lot slower to do \"simple\" things</p>",
        "id": 155258379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649752
    },
    {
        "content": "<p>because there is a lot of bookkeeping in the background</p>",
        "id": 155258393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649767
    },
    {
        "content": "<p>I would like to figure out ways to minimize the overhead, but that runs close to work on the lean compiler</p>",
        "id": 155258552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547649877
    },
    {
        "content": "<blockquote>\n<p>this term has way more than 1000 subterms</p>\n</blockquote>\n<p>In the same way that a set with 10 elements has more than 1000 subsets, or in a more serious \"we really need to work with way more than 1000 things\" way?</p>",
        "id": 155261902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547652517
    },
    {
        "content": "<p>in the more serious way. (It's tricky to count the \"size\" of an expression but number of subterms is a good proxy)</p>",
        "id": 155263745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547653828
    },
    {
        "content": "<p>there is no exponential growth because subterms can't overlap, they are either disjoint or in a containment relationship</p>",
        "id": 155263817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547653885
    },
    {
        "content": "<p>Is it possible to define a custom synthesis strategy for an implicit argument? I would like to define a function which extracts concrete values from concrete lists, like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">get&#39;</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">},</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">get&#39;</span> <span class=\"n\">xs</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and for concrete args, <code>h</code> is always derivable with a custom tactic. I'd like Lean to use that tactic to synthesise it.<br>\nOR am I doing this completely wrong and there is a much simpler way?</p>",
        "id": 156331129,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547769890
    },
    {
        "content": "<p>unification hints! I don't know much about them though.</p>",
        "id": 156331279,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547770029
    },
    {
        "content": "<p>This function is <code>list.nth_le</code> btw</p>",
        "id": 156334847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547772668
    },
    {
        "content": "<p>you can synthesize the argument using typeclasses, but <code>exact_dec_trivial</code> is another easy way to do it</p>",
        "id": 156334971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547772800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">get&#39;</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">.</span> <span class=\"n\">exact_dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">get&#39;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 156335048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547772886
    },
    {
        "content": "<p>Ah indeed, thanks Mario! Can I use something like this in a Pi-type (to make the equation compiler work)? The <code>foo . tactic</code> syntax doesn't seem to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">debrujin_of_nat</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">.</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c1\">-- ill-formed declaration</span>\n</pre></div>",
        "id": 156335623,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547773666
    },
    {
        "content": "<p>If you can put it left of the colon, the dot notation should work. But if you can't write it that way, it's sugar for <code>auto_param</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">get&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">exact_dec_trivial</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">get&#39;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 156335911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547774046
    },
    {
        "content": "<p>Can I have a _named_ <code>auto_param</code> <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span>? I need to use the hypothesis in the type signature itself, more specifically in the return type.</p>",
        "id": 156336087,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547774355
    },
    {
        "content": "<p>sure, just use a pi instead of an arrow</p>",
        "id": 156336185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547774483
    },
    {
        "content": "<p><code>auto_param T n</code> is defeq to <code>T</code> so it doesn't cause any problems</p>",
        "id": 156336193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547774504
    },
    {
        "content": "<p>Oh, I was sure I'd tried that but apparently not, thanks! Doesn't seem to work under <code>#eval</code> unfortunately:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">[</span><span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;exact_dec_trivial&quot;</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;tactic&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 156336460,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547774827
    },
    {
        "content": "<p>what did you write?</p>",
        "id": 156336541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547774951
    },
    {
        "content": "<p>it's not really related to the context you write it in, but rather the expected type during elaboration</p>",
        "id": 156336637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547775041
    },
    {
        "content": "<p>Apologies for the length, but this is the full context:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">auto_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">Tp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat</span><span class=\"o\">:</span> <span class=\"n\">Tp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bool</span><span class=\"o\">:</span> <span class=\"n\">Tp</span>\n<span class=\"bp\">|</span> <span class=\"n\">Fn</span><span class=\"o\">:</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">⇒</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Fn</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Env</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">Tp</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">TypeIn</span><span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∋</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">TypeIn</span>\n<span class=\"bp\">|</span> <span class=\"n\">ZVar</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">T</span><span class=\"o\">},</span> <span class=\"n\">T</span><span class=\"bp\">::</span><span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">SVar</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">U</span><span class=\"bp\">::</span><span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">T</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∋</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">TypeIn</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TypeIn</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Term</span><span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Tp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span> <span class=\"c1\">-- in all environments, nat literals have type Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Bool</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">):</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Bool</span> <span class=\"c1\">-- and booleans have type Bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">T</span><span class=\"o\">},</span> <span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"n\">T</span> <span class=\"c1\">-- A variable has type T given its de Brujin index</span>\n                                 <span class=\"c1\">-- is in the environment.</span>\n<span class=\"bp\">|</span> <span class=\"n\">Abs</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"err\">⇒</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"err\">⇒</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"err\">Γ</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">def</span> <span class=\"n\">debrujin_of_nat</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">:</span> <span class=\"n\">Env</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"err\">∋</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ZVar</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">::</span><span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">SVar</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">debrujin_of_nat</span> <span class=\"err\">Γ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`#`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Var</span> <span class=\"o\">(</span><span class=\"n\">debrujin_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">App</span> <span class=\"o\">[]</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Abs</span> <span class=\"o\">[]</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Var</span> <span class=\"o\">[</span><span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"n\">Tp</span><span class=\"bp\">.</span><span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">debrujin_of_nat</span> <span class=\"mi\">0</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">[]))</span>\n</pre></div>",
        "id": 156336845,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547775319
    },
    {
        "content": "<p>Basically given a concrete <code>list Tp</code> and a concrete <code>n</code>, I'd like it to figure out that <code>n</code> is within bounds and include the result of <code>lst.nth_le n _</code> in the return type.</p>",
        "id": 156336955,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547775478
    },
    {
        "content": "<p>This does work: <code>#eval (@App [] Tp.Nat Tp.Nat (@Abs [] Tp.Nat Tp.Nat (@Var [Tp.Nat] Tp.Nat (@debrujin_of_nat [Tp.Nat] 0 (by tactic.exact_dec_trivial)))) (@Nat 3 []))</code> (notice the explicit proof I put in)</p>",
        "id": 156337127,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547775676
    },
    {
        "content": "<p>so what did you write?</p>",
        "id": 156338055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547777160
    },
    {
        "content": "<p>Well, the <code>#eval</code> at the bottom of that long snippet is what fails synthesis. The <code>#eval</code> with an explicit proof works</p>",
        "id": 156338116,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547777225
    },
    {
        "content": "<p>aha, you made the arg implicit</p>",
        "id": 156338117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547777236
    },
    {
        "content": "<p>auto params should be explicit</p>",
        "id": 156338118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547777248
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def debrujin_of_nat: Π {Γ: Env} (n: ℕ) (h: auto_param (n &lt; Γ.length) ``tactic.exact_dec_trivial), (Γ ∋ Γ.nth_le n h)\n</pre></div>",
        "id": 156338120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547777262
    },
    {
        "content": "<p>Oh thanks, now it does work, but still behaves as if it were implicit <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span> is this currying at work, meaning I have to place <code>auto_param</code> last, s.t. given <code>foo: nat -&gt; auto_param blah -&gt; nat</code>, <code>(foo n): nat</code> (and <code>foo n _</code> still fails)?</p>",
        "id": 156338198,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547777391
    },
    {
        "content": "<p>(unrelated to above)<br>\nI'm seeing a wierd error in an inductive type: <code>invalid occurrence of recursive arg#3 of 'context.cons', the body of the functional type depends on it.</code>. The type definition is below, and as far as I know it's a perfectly legit defn, so what's wrong?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">ns</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kn\">context</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">ns</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>EDIT: swapping two arguments makes it compile, but why?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ns</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kn\">context</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">ns</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 156408748,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547854769
    },
    {
        "content": "<p>I think Gabriel recently pointed out an example similar to this. You have a dependent pi (<code>n</code>) after a recursive arg (<code>_ : context ns</code>) and lean doesn't like this</p>",
        "id": 156409198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547855330
    },
    {
        "content": "<p>Ah ok, maybe this could be fixed in Lean 4? :)</p>",
        "id": 156411833,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547858231
    },
    {
        "content": "<p>Do I need to do something special to make the semiring-ness of my custom type available to the <code>ring</code> tactic? I have a state like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">π</span> <span class=\"n\">π&#39;</span> <span class=\"o\">:</span> <span class=\"n\">mult</span><span class=\"o\">,</span>\n<span class=\"n\">π_1</span> <span class=\"o\">:</span> <span class=\"n\">mult</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"n\">π&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">π_1</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">π&#39;</span> <span class=\"bp\">*</span> <span class=\"n\">π_1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>which is provable by <code>exact mult.monoid.mul_assoc π π' π_1</code>, but <code>ring</code> fails. I have <code>instance : semiring mult</code> shown a few lines above.</p>",
        "id": 156414862,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1547862660
    },
    {
        "content": "<p>you need to prove <code>comm_semiring mult</code></p>",
        "id": 156415302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547863300
    },
    {
        "content": "<p>Given <code>def add (a b: foo): foo := blah</code>, what's the difference between <code>infix </code> ++ <code> := add</code> and <code>instance : has_add foo := ⟨add⟩</code>? If i switch from the former to the latter and replace <code>++</code> with <code>+</code>, my proofs break at the simplification stage, namely addition seems to not be <code>unfold</code>able anymore</p>",
        "id": 156554174,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548095765
    },
    {
        "content": "<p>They're very different in the sense that they're using different machinery to figure out what's going on.</p>",
        "id": 156554210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548095832
    },
    {
        "content": "<p>I guess the <code>infix</code> trick is just syntax sugar, whereas the <code>instance</code> approach is using type class inference. Can you give an example of something which breaks?</p>",
        "id": 156554280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548095895
    },
    {
        "content": "<p>I guess if you go via the instance approach then you have an extra layer of unfolding to do. <code>+</code> is <code>has_add.add</code>, which unfolds to your add.</p>",
        "id": 156554315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548095959
    },
    {
        "content": "<p>Maybe that's the answer to your question. If you're trying to unfold things explicitly in the middle of a proof, maybe you have to insert some <code>unfold has_add.add</code>'s</p>",
        "id": 156554337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548095999
    },
    {
        "content": "<p><code>++</code> unfolds directly to your <code>add</code>, whereas <code>+</code> unfolds to <code>has_add.add</code> which unfolds to your add.</p>",
        "id": 156554416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548096048
    },
    {
        "content": "<p>[NB I'm a bit of a CS noob, I don't know if \"unfolds\" is the right terminology for notation turning into its underlying definition]</p>",
        "id": 156554455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548096121
    },
    {
        "content": "<p>[they might well be syntactically equal rather than just definitionally equal]</p>",
        "id": 156554512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548096155
    },
    {
        "content": "<p>Ah indeed, <code>unfold</code>ing twice does make it work - thanks!</p>",
        "id": 156556743,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548098961
    },
    {
        "content": "<p>Does there exist a general tactic for proving <code>f a0 .. an = f b0 .. bn</code> from <code>a0 = b0 .. an = bn</code>?</p>",
        "id": 156571293,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548119534
    },
    {
        "content": "<p><code>congr</code></p>",
        "id": 156571984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548120818
    },
    {
        "content": "<p>Hm, I tried <code>congr</code> but it seems to iterate the congruence, which gives me unprovable goals. Namely, I have a goal <code>f (g x) = f (g y)</code> and <code>congr</code> gives me <code>x = y</code> but I just want <code>g x = g y</code>. EDIT: <code>congr' 1</code> works, thx!</p>",
        "id": 156572109,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548121005
    },
    {
        "content": "<p>use <code>congr' 1</code> and increase the number until you get a good result</p>",
        "id": 156574364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548124662
    },
    {
        "content": "<p>The issue of <code>has_add.add</code> and its actual value not being definitionally equal makes a lot of my proofs quite ugly - I have to expand definitions first so that the expressions can simplify and then fold them back into the <code>has_add.add</code> version (or <code>has_mul.mul</code>, etc), because all the ring/module/whatever laws only work on those. For example:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    case context.cons</span>\n<span class=\"cm\">    δ γ γ₁ : precontext,</span>\n<span class=\"cm\">    π₁ : mult,</span>\n<span class=\"cm\">    T₁ : tp,</span>\n<span class=\"cm\">    Γ₁ : context γ₁,</span>\n<span class=\"cm\">    ih₁ : ∀ {Γ₂ : context γ₁} {Ξ : matrix γ₁ δ}, vmul (Γ₁ + Γ₂) Ξ = vmul Γ₁ Ξ + vmul Γ₂ Ξ,</span>\n<span class=\"cm\">    Γ₂ : context (T₁ :: γ₁),</span>\n<span class=\"cm\">    Ξ : matrix (T₁ :: γ₁) δ</span>\n<span class=\"cm\">    ⊢ vmul (cons π₁ T₁ Γ₁ + Γ₂) Ξ = vmul (cons π₁ T₁ Γ₁) Ξ + vmul Γ₂ Ξ</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">cases</span> <span class=\"err\">Γ₂</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">π₂</span> <span class=\"bp\">_</span> <span class=\"err\">Γ₂</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- unfold</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">vmul</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- fold back</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">vmul</span> <span class=\"err\">Γ₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ₁</span> <span class=\"err\">∋</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"err\">Ξ</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">SVar</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">vmul</span> <span class=\"err\">Γ₂</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ₁</span> <span class=\"err\">∋</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"err\">Ξ</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">SVar</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"n\">change</span>\n      <span class=\"o\">(</span><span class=\"n\">π₁</span> <span class=\"bp\">+</span> <span class=\"n\">π₂</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"err\">Ξ</span> <span class=\"n\">T₁</span> <span class=\"n\">ZVar</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">π₁</span><span class=\"err\">•</span><span class=\"o\">(</span><span class=\"err\">Ξ</span> <span class=\"n\">T₁</span> <span class=\"n\">ZVar</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">π₂</span><span class=\"err\">•</span><span class=\"o\">(</span><span class=\"err\">Ξ</span> <span class=\"n\">T₁</span> <span class=\"n\">ZVar</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- simplify using monoid laws</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>is there some tactic or such that I could apply to do this automatically?</p>",
        "id": 156647038,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548196988
    },
    {
        "content": "<p>This is what simp lemmas are for</p>",
        "id": 156647545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548197491
    },
    {
        "content": "<p>If you define <code>add x (y :: z) := y :: add x z</code>, for example, and then install <code>add</code> as a <code>has_add</code> instance, then you can prove <code>x + (y :: z) = y :: (x + z)</code> by rfl, and you should state this as a simp lemma</p>",
        "id": 156647677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548197629
    },
    {
        "content": "<p>You should not ever have to unfold <code>has_add.add</code></p>",
        "id": 156647754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548197693
    },
    {
        "content": "<p>Hm okay, so basically I need to \"lift\" the behaviour of my functions from the custom definition to one using <code>has_op.op</code>? I'll try</p>",
        "id": 156647865,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548197800
    },
    {
        "content": "<p>Is it fine to unfold <code>has_zero.zero</code> though? My definition of <code>0</code> for this type is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">zeros</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"kn\">context</span> <span class=\"n\">γ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">::</span><span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"mi\">0</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">zeros</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and I need the <code>cons</code> to prove <code>0+Γ=Γ</code></p>",
        "id": 156648686,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548198585
    },
    {
        "content": "<p>In any case this is pretty awesome, all my proofs have shortened by half now without the unfolding, thanks a lot!</p>",
        "id": 156649254,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1548199273
    },
    {
        "content": "<p>For this, you should decide whether you prefer to write the empty context as <code>0</code> or <code>[]</code>, and write a simp lemma like <code>0 = []</code> if you want to get rid of the 0 everywhere. In this case you should also make sure that all your other simp lemmas use the \"preferred form\" of this element on the LHS</p>",
        "id": 156653719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548203844
    },
    {
        "content": "<p>What's the closest thing to the <code>ring</code> tactic when what I have is not a commutative semiring, e.g. just a monoid? Say my theorems are provable simply by repeated application of monoid or group laws, what tactic could I use?</p>",
        "id": 159247553,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550959478
    },
    {
        "content": "<p>If it's abelian then <code>abel</code> might work, and if it's not then you're best going with <code>simp</code> I think</p>",
        "id": 159247675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550959738
    },
    {
        "content": "<p>You might have to write <code>simp [mul_assoc]</code> maybe, I can't remember if mul_assoc is a simp lemma</p>",
        "id": 159247686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550959794
    },
    {
        "content": "<p><code>abel</code> worked :) thanks. And no, <code>mul_assoc</code> doesn't seem to be a simp lemma.</p>",
        "id": 159247850,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550960100
    },
    {
        "content": "<p>Say I would like to work with a particular module which uses a variable <code>v</code> instantiated over a concrete <code>v</code>. For example, a file <code>foo.lean</code> could first declare <code>variable {v: Type}</code> and then use <code>v</code> in all definitions/lemmas in the file. I would like to import everything in <code>foo</code> instantiated with e.g. <code>nat</code> for <code>v</code>. This would be equivalent to partially applying everything in the file to <code>nat</code>. Is such a thing possible without manually redefining everything?</p>",
        "id": 159250591,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550965283
    },
    {
        "content": "<p>You could write a tactic to do it</p>",
        "id": 159250640,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550965378
    },
    {
        "content": "<p>But, why?</p>",
        "id": 159250642,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550965382
    },
    {
        "content": "<p>I would like to do this in order to:<br>\na) Avoid type class search by giving it the right instance from the start.<br>\nb) Make inference work. I found that making one of my modules more generic (I changed it from using a particular semiring to being generic over arbitrary semirings) broke inference in a lot of places where I use this module because it no longer knows which semiring to pick and I don't want to specify it everywhere manually.<br>\nFor a more concrete example which is close to what I'm doing, say I define a list <code>inductive slist {α: Type} [semiring α]: Type</code> which is a list the elements of which are also elements of a semiring and then derive a bunch of theorems about the behaviour of such a list under some transformations. I would then like to use all of these theorems only with a particular choice of <code>α</code>, even though the <code>slist</code> file/module is generic.</p>",
        "id": 159250779,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550965648
    },
    {
        "content": "<p>But if you're using <code>{alpha  : Type}</code> correctly, then Lean should be able to infer what alpha is from subsequent terms, so you don't need to change it to nat, Lean will just guess it for you and do it itself. Have I missed the point?</p>",
        "id": 159251390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550966787
    },
    {
        "content": "<p>\"no longer knows which semiring to pick\" this sounds fishy</p>",
        "id": 159251642,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550967315
    },
    {
        "content": "<p>The <code>{}</code> brackets aren't type class search, they are dealt with using unification.</p>",
        "id": 159251765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550967531
    },
    {
        "content": "<p>You're right, Lean can still unify it and find the class instance - I was perhaps a bit rash there when figuring out what's going on. However, tactic state updates that used to take about 300ms when I was working over a concrete object now take several seconds, making it somewhat painful to work interactively. I was hoping that reinstantiating all the lemmas over the concrete objects again would alleviate this.</p>",
        "id": 159251957,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550967812
    },
    {
        "content": "<p>Again, if you're talking about <code>{}</code>s then this isn't to do with classes, it's something else.</p>",
        "id": 159252010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550967853
    },
    {
        "content": "<p>But I agree that sometimes things get slow, and it can sometimes be quite difficult to find out why.</p>",
        "id": 159252015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550967891
    },
    {
        "content": "<p>I'm talking about both - the <code>{alpha}</code> variable being unified and <code>[semiring alpha]</code> which needs a class instance.</p>",
        "id": 159252030,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550967917
    },
    {
        "content": "<p>Aah yes, that is a class instance. Sorry.</p>",
        "id": 159252032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550967931
    },
    {
        "content": "<p>Does it help to actually put the type class instances explicitly into Lean at the top of the file?</p>",
        "id": 159252038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550967958
    },
    {
        "content": "<p>e.g. you were working with a random alpha assumed to be a semiring, and now you're working with nat, so you could put <code>instance : semiring nat := by apply_instance</code> at the top of the file. However that instance should already be there so I can't imagine it will help :-/</p>",
        "id": 159252086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550968006
    },
    {
        "content": "<p>oh this can't be the problem. Unless your actual instances are hard to find.</p>",
        "id": 159252098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550968029
    },
    {
        "content": "<p>I couldn't say for sure without benchmarking, but I would guess that the two implicit arguments I added to <em>everything</em> makes it appreciably more difficult to carry out elaboration.</p>",
        "id": 159252205,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550968223
    },
    {
        "content": "<p>I'm afraid you'll have to speak to a computer scientist about this one :-)</p>",
        "id": 159252209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550968253
    },
    {
        "content": "<p>In maths, everything runs instantly.</p>",
        "id": 159252211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550968263
    },
    {
        "content": "<p>You should consider moving to the Platonic universe.</p>",
        "id": 159252220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550968284
    },
    {
        "content": "<p>We don't have engineering troubles there.</p>",
        "id": 159252221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550968301
    },
    {
        "content": "<p>Oh okay, I ran into the problem that made me think unification fails again. In fact, I believe it could eventually succeed, but currently <code>simp *</code> takes so long it times out, while it would work fine before I added the implicit parameters to one of my modules.</p>",
        "id": 159252992,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550969731
    },
    {
        "content": "<p>If you want to try to speed things up yourself, you could take a look at what simp was doing before and after by putting logging on.</p>",
        "id": 159253178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550970027
    },
    {
        "content": "<p><code>set_option trace.simplify.rewrite true</code> is what you need to see what simp is doing.</p>",
        "id": 159253197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550970076
    },
    {
        "content": "<p>Does Lean have an equivalent of Haskell's/Agda's <code>where</code>? E.g. <code>def abc := two where two := 2</code></p>",
        "id": 159302724,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551052548
    },
    {
        "content": "<p>no</p>",
        "id": 159303137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551053194
    },
    {
        "content": "<p>it messes with elaboration order</p>",
        "id": 159303140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551053204
    },
    {
        "content": "<p>Could you <em>elaborate</em> on what the issue is?</p>",
        "id": 159303855,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551054423
    },
    {
        "content": "<p>Lean does pretty much all elaboration from left to right. If you use a postfix <code>let</code>, then the type and value of the defined variable will not be known when it is needed</p>",
        "id": 159304378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551055409
    },
    {
        "content": "<p>Is this stupid? Yes. I think lean 4 will relax the elaboration order a bit to allow stuff like this to work</p>",
        "id": 159304384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551055438
    },
    {
        "content": "<p>Does anyone know where the extra argument comes from (I do know <code>(n = 0)</code> is probably not valid syntax for a hypothesis)?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo_fn</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">string</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo_fn</span>\n<span class=\"c\">/-</span><span class=\"cm\"> def foo_fn : Type :=</span>\n<span class=\"cm\">   ℕ → Π (n : ℕ), n = 0 → string -/</span>\n<span class=\"c1\">-- ^ what is this?</span>\n</pre></div>",
        "id": 159645662,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551383274
    },
    {
        "content": "<p>Do you have a <code>variable</code> somewhere in your file?</p>",
        "id": 159645923,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551383491
    },
    {
        "content": "<p>Oh no actually. <code>Π (n = 0), _</code> is shorthand for <code>Π n, n = 0 -&gt; _</code></p>",
        "id": 159646059,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551383579
    },
    {
        "content": "<p>Ah so it <em>is</em> valid syntax. Thanks!</p>",
        "id": 159646200,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551383669
    },
    {
        "content": "<p>I would like to define a subtype of Lean functions like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">foo_fn</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">is_foo</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Id</span><span class=\"o\">:</span> <span class=\"n\">is_foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Rec</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span><span class=\"o\">},</span> <span class=\"n\">is_foo</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">is_foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">is_foo</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Where a <code>foo</code> is a <code>ℕ → ℕ</code> together with a proof that it's a valid kind of <code>foo_fn</code>, i.e. either the identity or some other <code>foo</code> plus 1. Then, I would also like to carry out transformations on the <code>foo</code> structure by modifying the <code>foo_fn</code> and adjusting its proof. Unfortunately the <code>foo_fn</code> is opaque as just a Lean function, so to actually do this it seems I need the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">foo&#39;</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Id</span><span class=\"o\">:</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Rec</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span><span class=\"o\">},</span> <span class=\"n\">foo&#39;</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">foo&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>My question is, can <code>foo'</code> be considered equivalent to <code>foo</code> in the sense that I can extract <code>f: foo_fn</code> out of <code>foo' f</code> and use it as I would use the <code>f</code> member of the structure <code>foo</code>?</p>",
        "id": 159657235,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551391712
    },
    {
        "content": "<p>I don't understand the question. Are you not happy with this sort of thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo_fn</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">is_foo</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">Id</span><span class=\"o\">:</span> <span class=\"n\">is_foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Rec</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span><span class=\"o\">},</span> <span class=\"n\">is_foo</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">is_foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"o\">:</span> <span class=\"n\">is_foo</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_one</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 159663701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551397368
    },
    {
        "content": "<p>The problem is that I couldn't redefine <code>add_one</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_one&#39;</span><span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"c\">/-</span><span class=\"cm\"> induction tactic failed, recursor &#39;is_foo.dcases_on&#39; can only eliminate into Prop -/</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Id</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Id</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">hf&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"o\">(</span><span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">hf&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>And in general any definition which tries to extract an inner <code>foo_fn</code> out of an <code>is_foo</code> constructor will fail, but I need to do that sometimes in order to transform the <code>foo_fn</code>. So far the <code>inductive foo': foo_fn -&gt; Type</code> definition seems to work well though.</p>",
        "id": 159798929,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551535759
    },
    {
        "content": "<p>Aah I see; the recursor for <code>is_foo</code> only eliminates into <code>Prop</code>. Yeah you need an expert, not a mathematician :-)</p>",
        "id": 159799119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551536121
    },
    {
        "content": "<p>The reason this isn't possible in general, is that by proof irrelevance <code>is_foo.Id = is_foo.rec _</code> if the proofs have the same type, so I cannot define functions that treat these two cases differently.</p>\n<p>Since both cases are equal in your function, you can write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_one&#39;</span><span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"o\">(</span><span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">hf&#39;</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 159799673,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551536769
    },
    {
        "content": "<p>Usually this form is preferred however</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_one&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Id</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span> <span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"o\">(</span><span class=\"n\">is_foo</span><span class=\"bp\">.</span><span class=\"n\">Rec</span> <span class=\"n\">hf&#39;</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 159799742,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551536911
    },
    {
        "content": "<p>The second <code>add_one'</code> will definitionally reduce in a nice way when applied to an argument <code>f : foo</code>, wherease the first definition will only reduce when applied to an argument of the form <code>⟨f, h⟩ : foo</code>. This makes the first definition harder to work with in proofs.</p>",
        "id": 159799766,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551537001
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 159801343,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551539526
    },
    {
        "content": "<p>I am trying to say something about free objects, using an existing definition of concrete categories in mathlib.<br>\nI couldn't find an existing definition in mathlib for free objects (edit: really, I just need to define free objects over a set or type with one element), so I was going to define them myself.<br>\nI have mathlib installed using leanpkg, and it looks like because I have lean version 3.4.1 installed, leanpkg used the branch with that name from the mathlib repository.<br>\nHowever, I notice that the master branch and the 3.4.1 branch have the definition of concrete categories in different places.<br>\nShould I go ahead and use the version which is defined in the 3.4.1 branch, and is in the category.lean file, or ought I somehow use the version in the concrete_category.lean version currently in the master branch?</p>",
        "id": 159866654,
        "sender_full_name": "drocta",
        "timestamp": 1551650233
    },
    {
        "content": "<p>The master branch of mathlib doesn't work with Lean 3.4.1.</p>",
        "id": 159868739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551653818
    },
    {
        "content": "<p>If I were you I'd use 3.4.2 (probably the last release of Lean 3) and mathlib master. If you install elan then it will all work by magic and you won't have to worry.</p>",
        "id": 159868775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551653883
    },
    {
        "content": "<p>thank you<br>\n(edit 7:33 : that worked for me)</p>",
        "id": 159870797,
        "sender_full_name": "drocta",
        "timestamp": 1551657366
    },
    {
        "content": "<p>I'm not sure where to find the documentation on out_param . Could you point me towards it?<br>\nthe definition in core.lean looks like it is just an identity function, but I assume I'm missing something, seeing as I think the lack of it just caused me to get a type error.</p>",
        "id": 159876903,
        "sender_full_name": "drocta",
        "timestamp": 1551667682
    },
    {
        "content": "<p>found a way to do what I was trying to do which didn't require that, so nvm I guess?</p>",
        "id": 159884489,
        "sender_full_name": "drocta",
        "timestamp": 1551671408
    },
    {
        "content": "<p><code>out_param</code> is something to do with telling Lean's elaborator what order to do type inference, or something like that. I'm afraid the only documentation that I know of is when I asked for details about it on either this chat or at the old chat, and Mario Carneiro explained it.</p>",
        "id": 159891658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551683037
    },
    {
        "content": "<p><a href=\"https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351\">https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351</a></p>",
        "id": 159893666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551685940
    },
    {
        "content": "<blockquote>\n<p><code>out_param</code> is something to do with telling Lean's elaborator what order to do type inference, or something like that. I'm afraid the only documentation that I know of is when I asked for details about it on either this chat or at the old chat, and Mario Carneiro explained it.<br>\n<a href=\"https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351\">https://gitter.im/leanprover_public/Lobby?at=5a6e31685a9ebe4f75e77351</a></p>\n</blockquote>\n<p>Ah! Thank you!</p>",
        "id": 159971264,
        "sender_full_name": "drocta",
        "timestamp": 1551753319
    },
    {
        "content": "<p>What is the meaning of this error: <code>rewrite tactic failed, motive is not type correct</code>?<br>\nI get it when trying to apply <code>rw [sesh_tp.dual_end_recv]</code> where <code>sesh_tp.dual_end_recv : sesh_tp.dual End? = End!</code> to the following state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"bp\">⬝</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">sesh_tp</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"n\">End</span><span class=\"err\">?</span><span class=\"o\">)</span><span class=\"err\">⟧</span><span class=\"bp\">::</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">identity</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">sesh_tp</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"n\">End</span><span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">End</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">ZVar</span> <span class=\"n\">γ</span> <span class=\"err\">↑</span><span class=\"n\">End</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I thought that <code>rw</code> should be able to simply replace the instances of <code>sesh_tp.dual End?</code>.<br>\n(<code>End?</code> and <code>End!</code> are constructors for the <code>sesh_tp</code> inductive type.)</p>",
        "id": 160008880,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551797501
    },
    {
        "content": "<p>We need an emoji for this error</p>",
        "id": 160012954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551800396
    },
    {
        "content": "<p>It means that doing the rewrite will give you an expression which doesn't type check, presumably because you had a dependent type and rewrote the parameter. The classical example is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160013094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551800465
    },
    {
        "content": "<p>Try understanding this simple example and then your complicated one</p>",
        "id": 160013133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551800488
    },
    {
        "content": "<p>Oh right, I get the issue, thanks! But if you <code>rw add_comm</code> both sides of the equation, it should still type check, no? I managed to solve my problem by explicitly stating the type of the goal with both instances of <code>sesh_tp.dual End?</code> rewritten to <code>End!</code>. Could <code>rw</code> not check the type after doing <em>both</em> rewrites?</p>",
        "id": 160015041,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1551801886
    },
    {
        "content": "<p><code>rw</code> is what it is. If you want more you can try lots of tricks, e.g. <code>erw</code> or <code>simp only</code> or using <code>conv</code> mode -- we have lots of workarounds :-)  But this is dependent type theory, random rewriting can create terms which are not type correct and Lean pulls the plug when this happens.</p>",
        "id": 160024039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551808369
    },
    {
        "content": "<p>Is there a way to make use of the fact that pattern matches in a theorem have the same structure as in a definition? In particular, that given a catchall pattern match later in the theorem, it can't be the case that the thing being matched against matches one of the earlier pattern matches?</p>\n<p>Concretely, when proving <code>simp_const_eq</code> below, I want to match on <code>plus (const a) (const b)</code>, <code>times (const a) (const b)</code> and then a catchall. Is this possible, or do I just need some extra cases that I can rfl my way through? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">aexpr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">aexpr</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₁</span> <span class=\"bp\">+</span> <span class=\"n\">aeval</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">aeval</span> <span class=\"n\">e₁</span> <span class=\"bp\">*</span> <span class=\"n\">aeval</span> <span class=\"n\">e₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simp_const</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simp_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 160029879,
        "sender_full_name": "Plam",
        "timestamp": 1551812287
    },
    {
        "content": "<p>While I don't think this is possible right now (correct me if I'm wrong), would it in principle be possible to extend Lean with support for custom type unification procedures? The way I defined some inductive families requires me to do <em>a lot</em> of conversions from terms of type <code>T a</code> to a type <code>T b</code> that Lean expects, where <code>a = b</code>. All of these are resolvable more or less with a single tactic, and it would be awesome if I could just teach Lean a heuristic like \"If type U is expected and a term of type T is given, see if T or U (or both) contain a specific expression. If so, try to use this tactic to convert T to U\".</p>",
        "id": 161024741,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1552873687
    },
    {
        "content": "<p>Search the chat for \"unification hints\"</p>",
        "id": 161036029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552893305
    },
    {
        "content": "<p>I'm hoping that might be exactly the thing you want. Note however that we don't have much experience with them. Unification hints haven't been used outside of a demo, as far as I am aware.</p>",
        "id": 161036030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552893305
    },
    {
        "content": "<p>If by <code>a = b</code> you mean you have a proof that they are equal, not that they are defeq, then unification hints won't help, and a lot of things will get more complicated</p>",
        "id": 161036875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552894475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> indeed by <code>a = b</code> I mean <code>eq a b</code>. What I end up having in the actual terms is a bunch of <code>eq.mpr</code>s which do the conversions from <code>T a</code> to <code>T b</code>. My idea here was, could I not just tell Lean to try to insert those conversions automatically when it fails to unify types?</p>",
        "id": 161053399,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1552912716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I was looking into those but it seems they are not powerful enough to modify the term in question which is what seems to be needed when the types are not algorithmically definitonally equal according to Lean. Moreover, some of the problems that Coq resolves using Canonical Structures, which seem to be a type of unification hint, Lean resolves using type class inference.</p>",
        "id": 161053547,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1552912866
    },
    {
        "content": "<p>There was some discussion about these issues at Lean Together in January. Note that Lean 4 will apparently be removing unification hints, perhaps because nobody uses them in Lean.</p>",
        "id": 161055174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552914260
    },
    {
        "content": "<p>The speakers who talked about it were Assia Mahboubi and Cyril Cohen, and I am pretty sure their slides are online and linked to here somewhere.</p>",
        "id": 161055192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552914292
    },
    {
        "content": "<p>See: <br>\n<a href=\"#narrow/stream/113488-general/topic/unification.20hints/near/158613068\" title=\"#narrow/stream/113488-general/topic/unification.20hints/near/158613068\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unification.20hints/near/158613068</a></p>",
        "id": 161055258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552914351
    },
    {
        "content": "<p>We also ran into this issue in Flypitch. I found it helpful to have a library of <code>simp</code> lemmas to normalize the location of the casts. I also had the occasional odd experience of being unable to prove an instance of a cast lemma by <code>refl</code> inside a larger proof, but was able to prove that lemma by <code>refl</code> separately, mark it as <code>simp</code>, and then <code>simp</code> would work...</p>",
        "id": 161059451,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1552917708
    },
    {
        "content": "<blockquote>\n<p>Note that Lean 4 will apparently be removing unification hints, perhaps because nobody uses them in Lean.</p>\n</blockquote>\n<p>Is this really clear? I thought that Assia and Cyril provided ample proofs that this would be a tragic mistake. I understand they were removed at the beginning of Lean 4, but many things were removed, and some of them will return at some point. Is there any update on this <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>?</p>",
        "id": 161072189,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552925935
    },
    {
        "content": "<p>no</p>",
        "id": 161072430,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552926091
    },
    {
        "content": "<p>Why does <code>auto_param</code> seem to not work as an implicit argument? I'd like to have a constructor like <code>foo {h: auto_param some_prop ``mytac}: Foo</code> and match on it like <code>| foo</code> rather than <code>| (foo _)</code>, but if I put the <code>auto_param</code> in curly brackets, it seems to not actually run the tactic when using <code>def abc := foo</code> - it fails with \"failed to synthesize placeholder\" rather than trying to run <code>mytac</code>.</p>",
        "id": 161537406,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553365846
    },
    {
        "content": "<p>I want the unique function from the type <code>empty</code> to another type. I thought I might be able to do that with <code>empty.rec</code> or <code>empty.rec_on</code> , (going off of the tutorial's use of that with days of the week), but it looks like those both expect to be given a function from empty as an argument, when that is what I'm trying to get.<br>\nWhat am I missing?</p>",
        "id": 161612010,
        "sender_full_name": "drocta",
        "timestamp": 1553484980
    },
    {
        "content": "<p>I think this is what you want:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"n\">def</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"bp\">.</span>\n</pre></div>",
        "id": 161616137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553492280
    },
    {
        "content": "<p><code>congr</code> gave me the following goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">precontext</span><span class=\"o\">,</span>\n<span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"n\">γ</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">term</span> <span class=\"n\">γ</span> <span class=\"err\">Γ</span> <span class=\"err\">↑</span><span class=\"n\">End</span><span class=\"err\">?</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Wait</span> <span class=\"n\">γ</span> <span class=\"err\">Γ</span> <span class=\"n\">M</span> <span class=\"bp\">==</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">term</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">tp</span><span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">term</span> <span class=\"n\">γ</span> <span class=\"err\">Γ</span> <span class=\"n\">tp</span><span class=\"bp\">.</span><span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Wait</span> <span class=\"n\">γ</span> <span class=\"err\">Γ</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Having never worked with <code>heq</code>, I'm not sure if this is provable? Clearly both sides are the same expression, but one has been passed through <code>eq.mpr</code> to cast its type. If it's provable, what would be a good tactic/term to solve it? <em>EDIT</em>: It's probably worth noting that it has been casted to the wrong type, i.e. RHS has the same type as LHS before the cast, but a different one after. Can I undo <code>eq.mpr</code> in here somehow?</p>",
        "id": 161817781,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553647902
    },
    {
        "content": "<p>Ah <code>h_generalize</code> did it. I would still be interested in hearing if there's a more automated way of doing it.</p>",
        "id": 161819590,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553649919
    },
    {
        "content": "<p><code>cc</code> can sometimes handle heqs of casts which are close to being definitional equalities</p>",
        "id": 161819890,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553650210
    },
    {
        "content": "<p>however, it works better when <code>eq.mpr</code>s are hidden beneath <code>cast</code>s</p>",
        "id": 161819901,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553650246
    },
    {
        "content": "<p>What's the difference between <code>cast</code> and <code>eq.mpr</code>?</p>",
        "id": 161820139,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553650553
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span> <span class=\"n\">h₂</span>\n</pre></div>",
        "id": 161820220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553650657
    },
    {
        "content": "<p>Oh, it's just reversed? Okay then :)</p>",
        "id": 161820396,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553650844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n</pre></div>",
        "id": 161820412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1553650869
    },
    {
        "content": "<p>There are people here who would say that if you're dealing with heqs, you're doing it wrong</p>",
        "id": 161835910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672424
    },
    {
        "content": "<p>Equality of types is evil in type theory</p>",
        "id": 161835917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672443
    },
    {
        "content": "<p>And maybe you'd be better off making an equiv if you have two types which you have identified in your mind</p>",
        "id": 161835932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672470
    },
    {
        "content": "<p>Many of the key facts about equality are also proved for equivs</p>",
        "id": 161835946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672507
    },
    {
        "content": "<p>The key missing one is <code>rw</code></p>",
        "id": 161835947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672519
    },
    {
        "content": "<p>But we're working on it</p>",
        "id": 161835992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672526
    },
    {
        "content": "<p>Yeah, I (ab)use dependent types in a way that makes it necessary to prove type equality quite often. I try to give my functions built-in &amp; semi-automated support for this by adding arguments like <code>(h: auto_param (expected_T = actual_T) ``some_tac)</code>, but it's not always possible</p>",
        "id": 161858773,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553693450
    },
    {
        "content": "<p>While I'm at it, how can I <code>rw</code> using a <code>heq</code>? Given <code>Hx: M == x</code>, <code>rw [Hx]</code> tells me that <code>lemma is not an equality nor an iff</code>.</p>",
        "id": 161866241,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553698098
    },
    {
        "content": "<p>With great difficulty. You can try using <code>heq.rec_on</code>, but I think this is usually quite hard, because the resulting expression often won't type check.</p>",
        "id": 161866351,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553698170
    },
    {
        "content": "<p>This is a lesson you have to learn eventually: just because you can write it this way and that it is type correct doesn't mean it's a good idea. Keep the type of your definitions as simple as possible. Move your added logic to separate lemmas or separate definitions.</p>",
        "id": 161870735,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553700503
    },
    {
        "content": "<p><code>heq.subst</code> will let you simulate some rewriting, but as Chris said, it is very painful</p>",
        "id": 161872490,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553701669
    },
    {
        "content": "<p>If you know you are abusing dependent types then maybe you are bringing the pain on yourself. I had a maths repo where I used equality of types, because I was learning type theory and didn't understand the difference between equality and definitional equality; I ran into real trouble, which was only fixed by a refactor. What I am pushing for now is a tactic which will rewrite appropriate terms along equivs (or however you say it: if P is a predicate on rings which is mathematically reasonable then for two isomorphic rings R and S, P R will be true iff P S is, and I want a tactic which will show this -- this is something mathematicians do all the time but which seems to be painful in type theory).</p>",
        "id": 161896451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553717707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Well, kind of, but not necessarily. I'm still a newcomer to type theory/theorem proving, but from what I read and some discussions I've had, my understanding is that currently Coq can handle these kinds of things much better than Lean. Adding good support for working with dependent types which are only propositionally equal could be well worth the effort. In particular, Coq has a <a href=\"https://coq.inria.fr/refman/addendum/program.html\" target=\"_blank\" title=\"https://coq.inria.fr/refman/addendum/program.html\">Program</a> framework (which I think I've mentioned here at some point) which is able to find which <code>eq</code>s need to be proven while constructing an expression and generate them as external goals. This way we get a clean expression and all the nasty details are resolved externally. After the goals are proven, <code>Program</code> seems to automatically insert <code>casts</code>, more or less. Moreover, Coq can be told which tactics to use in order to automatically resolve most of such side equality goals. In PVS, I believe these things are called \"Type Correctness Conditions\" and are also dealt with outside the expression. HoTT also seems to provide an interesting answer to this in the form of paths, but I've only started looking into that.</p>",
        "id": 161905929,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553725666
    },
    {
        "content": "<p>Is <code>Program</code> ready for prime time? I only read about it in CPDT, Chlipala is not big on it. <a href=\"http://adam.chlipala.net/cpdt/html/Subset.html\" target=\"_blank\" title=\"http://adam.chlipala.net/cpdt/html/Subset.html\">http://adam.chlipala.net/cpdt/html/Subset.html</a></p>",
        "id": 161926249,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1553752564
    },
    {
        "content": "<p>In Coq, <a href=\"https://coq.inria.fr/library/Coq.Logic.JMeq.html\" target=\"_blank\" title=\"https://coq.inria.fr/library/Coq.Logic.JMeq.html\"><code>JMeq_eq</code></a> is an axiom, but in Lean <a href=\"https://github.com/leanprover/lean/blob/master/library/init/core.lean#L205\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/core.lean#L205\"><code>eq_of_heq</code></a> seems to be a lemma with no non-core axioms below it. Does that mean it follows from proof irrelevance or another axiom that Lean has built-in?</p>",
        "id": 162060279,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553876505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Yes, it relies on proof irrelevance.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">eq_of_heq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α&#39;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h₂</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α&#39;</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">heq</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">α&#39;</span> <span class=\"n\">a&#39;</span><span class=\"o\">),</span> <span class=\"n\">heq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"n\">this</span> <span class=\"n\">α</span> <span class=\"n\">a&#39;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>the <code>rfl</code> on line 3 has type <code>eq.rec_on h₂ a = a</code>, which only makes sense because <code>h₂  : α = α</code> is defeq to <code>rfl</code> by proof irrelevance</p>",
        "id": 162069155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553882192
    },
    {
        "content": "<p>Gotcha, thanks!</p>",
        "id": 162070989,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1553883402
    },
    {
        "content": "<p>How can I introduce a new constant into all goals using <code>;</code>? <code>sometac; have a := 2,</code> doesn't seem to work. <em>EDIT</em>: <code>all_goals { have a := 2 }</code> worked. Unsure why <code>;</code> doesn't.</p>",
        "id": 162185922,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554056201
    },
    {
        "content": "<p>This worked for me</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>However, this didn't work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Maybe the semicolon only works for the goals generated by the last tactic.</p>",
        "id": 162186078,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554056449
    },
    {
        "content": "<p><code>sometac; have a := 2</code> works. Remember <code>have</code> is different from <code>let</code>. You'll get <code>a : ℕ</code> in the context, but won't see that it's 2.<br>\nEdit: oh, I see the confusion. <code>;</code> doesn't mean \"do the second tactic to all goals.\" I think <code>t; s</code> means \"do <code>t</code> to the first goal, and then do <code>s</code> to all remaining goals.\"<br>\nEdit 2: I'm thinking about too many things at once and writing unclearly, sorry. Chris phrased what I meant better. <code>t; s</code> focuses on the first goal, applies t, and then applies <code>s</code> to all goals generated from that. \"Remaining goals\" meaning remaining in the focus.</p>",
        "id": 162186080,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1554056454
    },
    {
        "content": "<p>Double-checked, it acts wierdly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn&#39;t work</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">case</span> <span class=\"n\">Foo</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>",
        "id": 162186223,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554056651
    },
    {
        "content": "<p>What Chris said. <code>x; y</code> applies <code>y</code> to each goal produced by <code>x</code>.</p>",
        "id": 162186513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554057221
    },
    {
        "content": "<p>Oooh, ok! Thanks</p>",
        "id": 162186557,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554057249
    },
    {
        "content": "<p>Different question - in every goal I have a hypothesis of the form <code>h : hE' = Foo Γₑ' hΓ_1 N E_1 a</code>, where <code>Foo</code> is that goal's case. I would like to solve each goal by applying that goal/case's constructor, but with different arguments. Can I somehow \"extract\" which constructor was used for the case and reuse it to solve the goal without quoting expressions and all that?</p>",
        "id": 162186774,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554057696
    },
    {
        "content": "<p>How can I debug a <code>(deterministic) timeout</code> when Lean tries to prove well-foundedness of a recursion given my custom tactic?</p>",
        "id": 162242088,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554127753
    },
    {
        "content": "<p>Oh actually I also get a \"failed to prove well-foundedness\" with the state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">hE&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">EAppLeft</span> <span class=\"err\">Γₑ&#39;</span> <span class=\"n\">h</span><span class=\"err\">Γ</span><span class=\"bp\">_</span><span class=\"mi\">1</span> <span class=\"n\">N</span> <span class=\"n\">E_1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"n\">γ</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Γ</span> <span class=\"n\">A&#39;&#39;</span>\n<span class=\"err\">⊢</span> <span class=\"n\">eval_ctx</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span>\n      <span class=\"o\">(((</span><span class=\"bp\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span>\n          <span class=\"bp\">⟨</span><span class=\"err\">Γₑ</span><span class=\"o\">,</span>\n           <span class=\"bp\">⟨</span><span class=\"err\">Γ₁</span><span class=\"o\">,</span>\n            <span class=\"bp\">⟨</span><span class=\"n\">A&#39;&#39;</span><span class=\"o\">,</span>\n             <span class=\"bp\">⟨</span><span class=\"n\">A&#39;</span><span class=\"o\">,</span>\n              <span class=\"bp\">⟨</span><span class=\"n\">A_1</span><span class=\"err\">⊸</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hE</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">E_1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">Γₑ</span> <span class=\"bp\">+</span> <span class=\"err\">Γ₁</span><span class=\"o\">,</span> <span class=\"bp\">_⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n      <span class=\"o\">(((((((((</span><span class=\"bp\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span>\n                <span class=\"bp\">⟨</span><span class=\"err\">Γₑ</span><span class=\"o\">,</span>\n                 <span class=\"bp\">⟨</span><span class=\"err\">Γ₁</span><span class=\"o\">,</span>\n                  <span class=\"bp\">⟨</span><span class=\"n\">A&#39;&#39;</span><span class=\"o\">,</span>\n                   <span class=\"bp\">⟨</span><span class=\"n\">A&#39;</span><span class=\"o\">,</span>\n                    <span class=\"bp\">⟨</span><span class=\"n\">A_1</span><span class=\"err\">⊸</span><span class=\"n\">A</span><span class=\"o\">,</span>\n                     <span class=\"bp\">⟨</span><span class=\"n\">E</span><span class=\"o\">,</span>\n                      <span class=\"bp\">⟨</span><span class=\"n\">hE</span><span class=\"o\">,</span>\n                       <span class=\"bp\">⟨</span><span class=\"n\">E_1</span><span class=\"o\">,</span>\n                        <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span>\n                         <span class=\"bp\">⟨</span><span class=\"err\">Γₑ</span> <span class=\"bp\">+</span> <span class=\"err\">Γ₁</span><span class=\"o\">,</span>\n                          <span class=\"bp\">_⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n      <span class=\"n\">a</span> <span class=\"bp\">&lt;</span>\n    <span class=\"n\">eval_ctx</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span>\n      <span class=\"o\">(((</span><span class=\"bp\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span>\n          <span class=\"bp\">⟨</span><span class=\"err\">Γₑ</span><span class=\"o\">,</span>\n           <span class=\"bp\">⟨</span><span class=\"err\">Γₑ&#39;</span><span class=\"o\">,</span>\n            <span class=\"bp\">⟨</span><span class=\"n\">A&#39;&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">A&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hE</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">E&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hE&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">Γ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"err\">Γ</span><span class=\"bp\">⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n      <span class=\"o\">(((((((((</span><span class=\"bp\">⟨</span><span class=\"n\">γ</span><span class=\"o\">,</span>\n                <span class=\"bp\">⟨</span><span class=\"err\">Γₑ</span><span class=\"o\">,</span>\n                 <span class=\"bp\">⟨</span><span class=\"err\">Γₑ&#39;</span><span class=\"o\">,</span>\n                  <span class=\"bp\">⟨</span><span class=\"n\">A&#39;&#39;</span><span class=\"o\">,</span>\n                   <span class=\"bp\">⟨</span><span class=\"n\">A&#39;</span><span class=\"o\">,</span>\n                    <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span>\n                     <span class=\"bp\">⟨</span><span class=\"n\">E</span><span class=\"o\">,</span>\n                      <span class=\"bp\">⟨</span><span class=\"n\">hE</span><span class=\"o\">,</span>\n                       <span class=\"bp\">⟨</span><span class=\"n\">E&#39;</span><span class=\"o\">,</span>\n                        <span class=\"bp\">⟨</span><span class=\"n\">hE&#39;</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">Γ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"err\">Γ</span><span class=\"bp\">⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩⟩.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n      <span class=\"n\">hE&#39;</span>\n</pre></div>\n\n\n<p>Since <code>h: hE' = EAppLeft ... a</code> is in the context, why can't Lean just rewrite it using that and then show that <code>sizeof a &lt; sizeof EAppLeft .. a</code>?</p>",
        "id": 162242434,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554127982
    },
    {
        "content": "<p>this error log is pretty hard to understand just by looking at it</p>",
        "id": 162245368,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554130063
    },
    {
        "content": "<p>what always gets linked when these things come up: TPIL and <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a></p>",
        "id": 162245470,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554130113
    },
    {
        "content": "<p>what is not mentioned in the mathlib doc is what I usually do when I don't want to stare at a bunch of errors: prove my relation is well-founded by hand <code>well_founded r</code> and directly use <code>well_founded.fix</code></p>",
        "id": 162246128,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554130505
    },
    {
        "content": "<p>Oh yeah I'd read that, but was hoping Lean could employ a bit of automation when trying to prove the inequality. I'll try <code>fix</code> as I don't think I can use <code>have</code>( the fn definition is entirely in tactic mode), thanks.</p>",
        "id": 162246653,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554130870
    },
    {
        "content": "<p>oh, don't forget <a href=\"http://adam.chlipala.net/cpdt/html/GeneralRec.html\" target=\"_blank\" title=\"http://adam.chlipala.net/cpdt/html/GeneralRec.html\">http://adam.chlipala.net/cpdt/html/GeneralRec.html</a></p>",
        "id": 162247008,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554131060
    },
    {
        "content": "<p>the definitions are sorta almost the same if you squint</p>",
        "id": 162247040,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554131079
    },
    {
        "content": "<p>What would be the correct way to define a function from ℤ to (abelian) groups? (i.e. having indexed groups G_1, G_2, ...)</p>\n<p>I don't think that this here is working as it should.  This would be a constant function, wouldn't it?</p>\n<div class=\"codehilite\"><pre><span></span>universes u\nvariables {α: Type u}\ndef my_indexes_groups (i:ℤ) := add_group α\n#check my_indexes_groups 3\n</pre></div>\n\n\n<p>Thx :)</p>",
        "id": 162316155,
        "sender_full_name": "snowbunting",
        "timestamp": 1554196321
    },
    {
        "content": "<p>No, because then all groups have the same cardinality</p>",
        "id": 162316216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554196357
    },
    {
        "content": "<p>You define a function from Z to <code>Type</code></p>",
        "id": 162316224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196368
    },
    {
        "content": "<p>What you do is <code>G : Z → Type</code></p>",
        "id": 162316234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554196375
    },
    {
        "content": "<p>And then <code>[\\for i, add_group G i]</code></p>",
        "id": 162316254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554196385
    },
    {
        "content": "<p>And then you define another function from Z to the structure of a group on the image of the first function :-)</p>",
        "id": 162316274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196404
    },
    {
        "content": "<p>And you also note that Lean's definition of <code>add_group</code> doesn't require commutativity so if you're doing exact sequences you might want to use add_comm_group</p>",
        "id": 162316367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196487
    },
    {
        "content": "<p>Johan and I are both interested in seeing exact sequences in Lean by the way, we're both mathematicians</p>",
        "id": 162316397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196518
    },
    {
        "content": "<p>The way to think about groups in Lean is that they are two things. First you have G, a <em>type</em></p>",
        "id": 162316483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196583
    },
    {
        "content": "<p>And then you have another thing h, a term of type [group G]</p>",
        "id": 162316499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196611
    },
    {
        "content": "<p>And it's h that has all the data of the multiplication and the axioms</p>",
        "id": 162316522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196635
    },
    {
        "content": "<p>But amazingly you never have to mention h at all when you're working with groups</p>",
        "id": 162316532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196655
    },
    {
        "content": "<p>Because whenever Lean needs this data it gets it from G using something called type class inference</p>",
        "id": 162316589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196683
    },
    {
        "content": "<p>You try to do a group thing on G like multiplying two elements together</p>",
        "id": 162316617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196711
    },
    {
        "content": "<p>ok that works indeed! Maybe it would be actually ask to ask what the difference between <code>Type</code> and <code>Type u</code> is, although it feels super dumb...</p>",
        "id": 162316655,
        "sender_full_name": "snowbunting",
        "timestamp": 1554196760
    },
    {
        "content": "<p>And Lean says \"what's this multiplication they're talking about? Does my big list of type class stuff contain anything which mentions a multiplication on G? And then it looks and it finds h and says \"ok I'll just use that stuff\"</p>",
        "id": 162316675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196799
    },
    {
        "content": "<p>Type is Type 0</p>",
        "id": 162316719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196806
    },
    {
        "content": "<p>In type theory everything has to have a type</p>",
        "id": 162316729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196817
    },
    {
        "content": "<p>So unfortunately Type has to have a type</p>",
        "id": 162316736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196828
    },
    {
        "content": "<p>Which is Type 1</p>",
        "id": 162316742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196835
    },
    {
        "content": "<p>You get the picture</p>",
        "id": 162316743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196840
    },
    {
        "content": "<p>Type u is a random universe somewhere up in the hierarchy</p>",
        "id": 162316760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196865
    },
    {
        "content": "<p>It's best practice to make functions and constructions take inputs from arbitrary universes in type theory</p>",
        "id": 162316792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196905
    },
    {
        "content": "<p>You should do a map from Z to <code>Type u</code> really</p>",
        "id": 162316875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554196967
    },
    {
        "content": "<p>People might also write <code>Type*</code> -- this is the same thing, it just saves you having to name u</p>",
        "id": 162316906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554197013
    },
    {
        "content": "<p>ok so <code>u</code> really is just a number, like <code>Type u</code> one of <code>Type 0</code>, <code>Type 1</code>,  ...<br>\nAnd if I don't want to force two variables to be both for example <code>Type 2</code> simultaneously, then I should use <code>Type u</code> and <code>Type v</code> in the definition, right?</p>\n<p>And if I would write <code>def xxx (a: Type*) (b: Type*): Type* := sorry</code> then there is no constrains if they have the same type or not, is there?</p>\n<p>Thx :)</p>",
        "id": 162317141,
        "sender_full_name": "snowbunting",
        "timestamp": 1554197282
    },
    {
        "content": "<p>That's right.</p>",
        "id": 162317205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554197327
    },
    {
        "content": "<p>u is a natural number, but it's not a Lean natural number, it's a universe variable, which is treated differently; it's part of the core language or something.</p>",
        "id": 162317229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554197353
    },
    {
        "content": "<blockquote>\n<p>And then <code>[\\for i, add_group G]</code></p>\n</blockquote>\n<p>This works great together with <code>variable</code>, but how would I now include that into a class? This does not seem to be working:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">class</span> <span class=\"n\">chain</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">}:</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">chain</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">diff</span> <span class=\"n\">g</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span>    <span class=\"c1\">-- has_add (chain.group C 1)</span>\n</pre></div>",
        "id": 162342248,
        "sender_full_name": "snowbunting",
        "timestamp": 1554216780
    },
    {
        "content": "<p>Put it with <code>()</code> in the class. Then aftwerwards state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">x</span> <span class=\"n\">i</span>\n</pre></div>",
        "id": 162342427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554216877
    },
    {
        "content": "<p>Modulo mistakes</p>",
        "id": 162342450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554216889
    },
    {
        "content": "<p>Also, you might be interested in <code>category_theory/</code></p>",
        "id": 162342638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554216991
    },
    {
        "content": "<p>Of course, I should have remembered <code>instance</code>, used that before, thank you!</p>",
        "id": 162342654,
        "sender_full_name": "snowbunting",
        "timestamp": 1554217002
    },
    {
        "content": "<p>Your alpha doesn't do anything</p>",
        "id": 162358531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554227953
    },
    {
        "content": "<p>You could just remove it, and you could change class to structure</p>",
        "id": 162358571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554227981
    },
    {
        "content": "<p>Then a term of type <code>chain</code> would be a bunch of abelian groups and homs</p>",
        "id": 162358765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554228070
    },
    {
        "content": "<p>You use <code>class</code> when there's only expected to be one term of that type</p>",
        "id": 162358791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554228102
    },
    {
        "content": "<blockquote>\n<p>Also, you might be interested in <code>category_theory/</code></p>\n</blockquote>\n<p>Regarding initial experiments, this isn't meant at all as discouragement --- but eventually we'd like the definition of <code>chain_complex</code> to be as generic as possible (e.g. any category enriched in a category with_zero).</p>",
        "id": 162378298,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554242739
    },
    {
        "content": "<p>Is there anything I can do to debug \"equation compiler failed to prove equation lemma (workaround: disable lemma generation using <code>set_option eqn_compiler.lemmas false</code>)\"?</p>",
        "id": 162659075,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554496929
    },
    {
        "content": "<p>Wow that's some error! How did you get that?</p>",
        "id": 162661482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554498643
    },
    {
        "content": "<p>Kevin is so jalous...</p>",
        "id": 162661525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554498682
    },
    {
        "content": "<p>:) It happens in <a href=\"https://github.com/Vtec234/lean-sesh/blob/master/src/sesh/eval.lean#L194\" target=\"_blank\" title=\"https://github.com/Vtec234/lean-sesh/blob/master/src/sesh/eval.lean#L194\">this definition (link)</a></p>",
        "id": 162666797,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554503060
    },
    {
        "content": "<p>it doesn't compile for me because it needs imports I don't have :-/</p>",
        "id": 162667290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554503489
    },
    {
        "content": "<p>but even if it did compile for me I think I wouldn't be able to help.</p>",
        "id": 162667295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554503498
    },
    {
        "content": "<p>Oh, it's self-contained modulo downloading mathlib, but for some reason leanpkg.path was in my .gitignore and it's needed for import paths to resolve - fixed that</p>",
        "id": 162669637,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554505477
    },
    {
        "content": "<p>leanpkg.path should indeed be in .gitignore (assuming you are actually using leanpkg)</p>",
        "id": 162671215,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554507092
    },
    {
        "content": "<p>Is it related to the use of <code>let</code> in the type of the function you are defining by pattern matching?</p>",
        "id": 162678219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554516905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it doesn't seem like it, I can inline the <code>let</code>, same error</p>",
        "id": 162720668,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554584968
    },
    {
        "content": "<p>do you have a self contained MWE?</p>",
        "id": 162720727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554585012
    },
    {
        "content": "<p>(Try putting everything needed in one file, then start deleting things that don't matter for the error)</p>",
        "id": 162720738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554585058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks, that was good idea! It took a while but I was able to simplify it to this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"n\">def</span> <span class=\"n\">foo_fn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">is_foo_fn</span>\n  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">foo_fn</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">IsFooEta</span><span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span>\n  <span class=\"n\">is_foo_fn</span> <span class=\"n\">f</span>\n<span class=\"bp\">→</span> <span class=\"n\">is_foo_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_foo_fn</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ext</span><span class=\"o\">:</span> <span class=\"c1\">-- equation compiler failed to prove equation lemma (workaround: disable lemma generation using `set_option eqn_compiler.lemmas false`)</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n      <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span>\n    <span class=\"n\">is_foo_fn</span> <span class=\"n\">f</span>\n  <span class=\"bp\">→</span> <span class=\"err\">Σ</span> <span class=\"n\">f&#39;</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">is_foo_fn</span> <span class=\"n\">f&#39;</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">IsFooEta</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">IsFooEta</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>which still fails, while making the following change makes the eqn compiler work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ext</span><span class=\"o\">:</span> <span class=\"c1\">-- good</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n      <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span>\n    <span class=\"n\">is_foo_fn</span> <span class=\"n\">f</span>\n  <span class=\"bp\">→</span> <span class=\"err\">Σ</span> <span class=\"n\">f&#39;</span><span class=\"o\">:</span> <span class=\"n\">foo_fn</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">is_foo_fn</span> <span class=\"n\">f&#39;</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">IsFooEta</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">IsFooEta</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Can you spot the difference? :) (it's the order of arguments). To me this seems like an eqn_compiler bug<br>\nAnd indeed this stupid-simple fix works on my actual code :D</p>",
        "id": 162944584,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554839878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What do you think? Is this a bug or am I missing something obvious?</p>",
        "id": 162947094,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1554841816
    },
    {
        "content": "<p>Thanks for putting in the effort. I've never seen this error before.</p>",
        "id": 162947160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554841880
    },
    {
        "content": "<p>Me neither</p>",
        "id": 162947406,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1554842044
    },
    {
        "content": "<p>Can you reproduce it in Lean 4?</p>",
        "id": 162947461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554842087
    },
    {
        "content": "<p>If not, then who cares about this error?</p>",
        "id": 162947480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554842103
    },
    {
        "content": "<p>those of us who are stuck with Lean 3?</p>",
        "id": 162947821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554842374
    },
    {
        "content": "<p>;-)</p>",
        "id": 162947830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554842379
    },
    {
        "content": "<p>I don't have time to look into this deeply, but just remarking that I have seen 'equation compiler failed to prove equation lemma' before</p>",
        "id": 162956880,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554849728
    },
    {
        "content": "<p>a very long time ago, I think the last time I saw it there was some problem with eta reduction</p>",
        "id": 162956912,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554849763
    },
    {
        "content": "<p>but i could be hallucinating how I fixed it, since it was awhile ago</p>",
        "id": 162956941,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1554849789
    },
    {
        "content": "<p>Given</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- this is obviously false</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"c1\">-- this unfolds both occurrences</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>how can I unfold <code>P</code> just at the right-hand side?</p>",
        "id": 163636511,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555581061
    },
    {
        "content": "<p>you can just use <code>change</code> or <code>show</code></p>",
        "id": 163636605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581152
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- this is obviously false</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span><span class=\"o\">),</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163636661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581231
    },
    {
        "content": "<p>If you're planning on using the <code>rw</code> tactic, then Lean might be very fussy about exactly which form a term is in</p>",
        "id": 163636738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581283
    },
    {
        "content": "<p>but conversely Lean is happy to switch between definitionally equal forms of the same term, using the <code>change</code> and <code>show</code> tactics (which do the same thing, <code>change</code> having the advantage that it also works for hypotheses in your context with <code>change ... at H</code>)</p>",
        "id": 163636776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581338
    },
    {
        "content": "<p>Ah okay, thanks. If my goal statement is very long though, I end up copy-pasting a lot of text.</p>",
        "id": 163636784,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555581354
    },
    {
        "content": "<p>there are other ways</p>",
        "id": 163636823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581363
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- this is obviously false</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">begin</span>\n    <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163636873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581425
    },
    {
        "content": "<p><code>conv</code> mode is a mode which isn't mentioned at all in the official docs</p>",
        "id": 163636890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581449
    },
    {
        "content": "<p>It enables you to zoom into parts of terms</p>",
        "id": 163636893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581459
    },
    {
        "content": "<p>Unfortunately, when you're in conv mode, the tools available to you are completely different, and it doesn't look like <code>unfold</code> is available yet.</p>",
        "id": 163636946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581487
    },
    {
        "content": "<p>So I had to use <code>simp only</code></p>",
        "id": 163636948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581492
    },
    {
        "content": "<p>which is close to the same thing</p>",
        "id": 163636952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581499
    },
    {
        "content": "<p>uuh, the hidden secrets. that does not seem very elegant to me though :')</p>",
        "id": 163636953,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555581503
    },
    {
        "content": "<p>The community documented <code>conv</code> mode.</p>",
        "id": 163636958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581516
    },
    {
        "content": "<p>I though I could make use of some pattern matching or occurrence counting when I was reading <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\" target=\"_blank\" title=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">https://leanprover.github.io/tutorial/A1_Quick_Reference.html</a> A1.6.2.1</p>",
        "id": 163636975,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555581528
    },
    {
        "content": "<p>But I am either to silly or misinterpreting what is written there.</p>",
        "id": 163636989,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555581551
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 163636992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581555
    },
    {
        "content": "<p>Your link there is to an out of date file :-/ That's Lean 2 you're looking at</p>",
        "id": 163637060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581613
    },
    {
        "content": "<p>You can use <code>conv</code> to zoom directly into the right hand side with <code>conv in</code> or <code>conv at</code> or something, I can never remember the details, but they're clearly documented in Patrick's conv.md write-up</p>",
        "id": 163637073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581654
    },
    {
        "content": "<p>Oh damn, google fooled me</p>",
        "id": 163637094,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555581674
    },
    {
        "content": "<p>That way you avoid the <code>to_rhs</code> conv-mode tactic</p>",
        "id": 163637097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581678
    },
    {
        "content": "<blockquote>\n<p>Oh damn, google fooled me</p>\n</blockquote>\n<p>call them up and complain</p>",
        "id": 163637103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581691
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- this is obviously false</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163637176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- this is obviously false</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163637250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581813
    },
    {
        "content": "<p>This way avoids conv mode and is more precise about what you want done</p>",
        "id": 163637270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581837
    },
    {
        "content": "<p>What exactly are you looking for? Tactic-writers here are very good.</p>",
        "id": 163637329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581857
    },
    {
        "content": "<p>People can just make new stuff. Lean tactics are written in Lean and some people (not me though! I'm a mathematician) can just knock them off before breakfast.</p>",
        "id": 163637360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555581897
    },
    {
        "content": "<p>Basically, I had a rather long equation of the form <code>l=r</code> and I wanted to unfold an expression in <code>r</code> by its definition, which again, is a rather long term. Hence, I neither want to re-state the whole goal nor the result of the unfolded definition. What I want to do is something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">P</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"c1\">-- this should unfold the second occurrence of P in the goal (or the third if you count from zero)</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163637832,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555582307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is that already a tactic, do you know?</p>",
        "id": 163637905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582355
    },
    {
        "content": "<p>Is there any obstruction to making it?</p>",
        "id": 163637917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> you could just do all the unfolds manually, ignore what happens to <code>l</code>, and then once you've got <code>r</code> into the form you want you can just delet everything and write <code>show _ = [what you want r to be]</code></p>",
        "id": 163638014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582461
    },
    {
        "content": "<p>(the point being that <code>show</code> will take <code>_</code> for the left hand side)</p>",
        "id": 163638029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582486
    },
    {
        "content": "<p>I think I've now told you all the tricks I know -- but I can see that your proposed idea is nicer. It might be a pain though -- if you want to unfold a bunch of stuff in <code>r</code> but not in <code>l</code> you might have to keep changing the numbers, depending on which things you want to unfold in <code>r</code> also show up in <code>l</code>. I think that if you're adamant that you want to change <code>r</code> and leave <code>l</code> untouched, just use <code>conv</code> mode and <code>to_rhs</code>. That's only a couple of lines and I think it's better than your idea because of the issue with numbers perhaps changing depending on exactly you want to unfold.</p>",
        "id": 163638165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582594
    },
    {
        "content": "<p>Yes, you can do this with <code>conv</code>.  Unfortunately, <code>unfold</code> isn't wrapped so you need to use <code>simp</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n</pre></div>",
        "id": 163638189,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1555582620
    },
    {
        "content": "<p>OTOH I guess your idea has its merits when there is more than one occurrence of P in the RHS.</p>",
        "id": 163638194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582623
    },
    {
        "content": "<p>Aah, I'd forgotten <code>conv</code> could take numbers!</p>",
        "id": 163638210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582646
    },
    {
        "content": "<p>Thanks Gabriel</p>",
        "id": 163638215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582651
    },
    {
        "content": "<p>hey what is this voodoo? <code>for</code>? I thought functional languages didn't have <code>for</code> loops!</p>",
        "id": 163638303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582711
    },
    {
        "content": "<p>Aah yes, I see now that <code>for</code> is documented in the <code>conv</code> document I linked to earlier.</p>",
        "id": 163638383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582802
    },
    {
        "content": "<p>It's about time I re-read it :D</p>",
        "id": 163638461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582810
    },
    {
        "content": "<p>I'll show you a Lean trick Kevin. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">P</span>\n\n<span class=\"c1\">-- P.equations._eqn_1 : ∀ (n : ℕ), P n = (n &gt; 42)</span>\n</pre></div>\n\n\n<p>When you define <code>P</code>, Lean makes one or more \"equation lemmas\" for it. <code>unfold P</code> is basically the same as <code>simp only [P.equations._eqn_1]</code> or <code>simp only [P]</code> for short. It's a shame there's no <code>unfold</code> in <code>conv</code> mode, but these are the tricks you can use to emulate it.</p>",
        "id": 163638592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555582939
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- this is obviously false</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163638639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555583003
    },
    {
        "content": "<p>Okay, I summarise: <code>conv</code> is pretty useful, I should read about it, and I guess it should also be included in the official docs at some point to avoid noobs like me wondering how to rewrite subterms :p</p>",
        "id": 163638662,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555583025
    },
    {
        "content": "<p>The Lean team is currently working on Lean 4, I don't think they're interested in documentation-writing at the minute.</p>",
        "id": 163638723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555583060
    },
    {
        "content": "<p>If Lean 4 is a success then we'll all be porting the docs over to there</p>",
        "id": 163638734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555583084
    },
    {
        "content": "<p>The community-written docs are really helpful for technical questions not covered by Theorem Proving In Lean.</p>",
        "id": 163638750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555583103
    },
    {
        "content": "<p>They all live in the mathlib repo but they're not really anything to do with mathlib, they're just where these community-generated docs ended up.</p>",
        "id": 163638771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555583145
    },
    {
        "content": "<p>I see. I think rewriting subterms is quite common though, so I would mention it at least in the official doc. Anyway, thanks Kevin &amp; Gabriel :)</p>",
        "id": 163638971,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555583352
    },
    {
        "content": "<p>you can use underscores with <code>change</code> and Lean will try to infer what should be there from the current goal. that way <code>change _ = new_rhs</code> lets you avoid copy-pasting the entire left hand side</p>",
        "id": 163648072,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1555591947
    },
    {
        "content": "<p>How would I go about proving ∀ x : ℤ, even x ∨ odd x? I have even and odd as<br>\ndef even : ℤ → Prop := λ n, ∃ m : ℤ, 2*m = n<br>\ndef odd : ℤ → Prop := λ n, ∃ m : ℤ, 2*m + 1 = n<br>\nI assume that I would first have to show that odd is equivalent to not even, then apply classical.em. However, I'm having trouble proving odd x ↔ ¬(even x)</p>",
        "id": 163860118,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555867469
    },
    {
        "content": "<p>My instinct would be to prove even n -&gt; odd (n+1) etc, and then prove by induction that every integer was odd or even.</p>",
        "id": 163860254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867687
    },
    {
        "content": "<p>There are induction hypotheses of the form (P 0 and (forall n, P n -&gt; P(n+1)) and (forall N, P(n)-&gt;P(n-1))) implies P(n) for all n</p>",
        "id": 163860266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867735
    },
    {
        "content": "<p>Ah, I see. That makes sense. I'm not familiar enough with induction in Lean yet, but I'll try it out</p>",
        "id": 163860279,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555867752
    },
    {
        "content": "<p>thank you, I'll respond again if I'm stuck on the inductive bit</p>",
        "id": 163860281,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555867771
    },
    {
        "content": "<p>If you just apply the induction tactic out of the box, you'll get an unpleasant surprise</p>",
        "id": 163860285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867783
    },
    {
        "content": "<p>You'll end up with some question about natural numbers instead, and it will be pain converting from naturals to integers.</p>",
        "id": 163860338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867807
    },
    {
        "content": "<p>You'll need to find an appropriate custom induction term in the library.</p>",
        "id": 163860351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867830
    },
    {
        "content": "<p>Oh, okay. I'm not familiar enough with the library to get started with that. Where would I go to look for something like that?</p>",
        "id": 163860369,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555867873
    },
    {
        "content": "<p><code>int.induction_on</code> should be fine for you.</p>",
        "id": 163860373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867907
    },
    {
        "content": "<p><code>import data.int.basic</code> at the top of your file (you'll need the maths library mathlib) and then apply that function, and you'll be left with goals of the form \"n even or n odd -&gt; n+1 even or n+1 odd\" which you should be able to cope with. Prove n even -&gt; n+1 odd and the other three results (e.g. n odd -&gt; n-1 even) first and then use them all to prove the result.</p>",
        "id": 163860436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555867994
    },
    {
        "content": "<p>Neat. I have mathlib, but I find most of the algebra/analysis files unreadable despite being highly competent with the material on paper. Are there any other packages you would recommend before diving into that level of material?</p>",
        "id": 163860497,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868094
    },
    {
        "content": "<p>I would recommend doing just what you're doing -- writing material yourself. I agree that the library is impenetrable for a beginner. Proofs are specifically shortened for efficiency reasons, they are not written to be readable. We are still lacking a bunch of good teaching material for mathematicians; I intend to make some this summer, however I also said that last summer.</p>",
        "id": 163860556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868196
    },
    {
        "content": "<p>Here's me trying to do some problem sheets which we give to 1st year mathematicians at Imperial: <a href=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets\">https://github.com/ImperialCollegeLondon/M1F_example_sheets</a></p>",
        "id": 163860618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868304
    },
    {
        "content": "<p>Oh wow, that's a substantial amount of material. Thank you so much!</p>",
        "id": 163860637,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868386
    },
    {
        "content": "<p>The proofs are written in a far more longwinded way, they might be more instructional but there are still not many comments.</p>",
        "id": 163860684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868445
    },
    {
        "content": "<p>You can step through them in tactic mode and watch the state change, of course.</p>",
        "id": 163860685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868459
    },
    {
        "content": "<p>Right, I think that as long as I can just run through the tactic state I should be fine. Are there solutions for every single exercise?</p>",
        "id": 163860739,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868547
    },
    {
        "content": "<p>Also, despite there being a real numbers package in mathlib, I've never seen it before. That's super useful!</p>",
        "id": 163860801,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868690
    },
    {
        "content": "<p>oh wow, there's also complex numbers defined. That's amazing</p>",
        "id": 163860817,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868739
    },
    {
        "content": "<p>I don't think I managed every single exercise. There were some which were hard to formalise.</p>",
        "id": 163860818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868747
    },
    {
        "content": "<p>Those answers are really just a big work in progress. They were just me trying to figure out if Lean was ready for a beginning undergraduate level maths course. It was.</p>",
        "id": 163860865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868791
    },
    {
        "content": "<p>Are you a professor at Imperial?</p>",
        "id": 163860866,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868804
    },
    {
        "content": "<p>Yes</p>",
        "id": 163860867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868810
    },
    {
        "content": "<p>Oh, that's awesome. I'm just an undergrad math student</p>",
        "id": 163860881,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555868850
    },
    {
        "content": "<p>I felt like that when I was trying to get Lean to do my own problem sheets.</p>",
        "id": 163860882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555868880
    },
    {
        "content": "<p>Haha yeah, the professor here at UVA has a tough time teaching Lean. It seems like it's one of those things where many trivial proofs on paper are just very difficult to formalise, despite familiarity</p>",
        "id": 163860993,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869011
    },
    {
        "content": "<p>Yes. I spent about a year being very frustrated with not being able to make Lean do obvious things. I'm now finally over that initial learning hump and I can write even research level maths in Lean now, although it can take a long time.</p>",
        "id": 163861008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869077
    },
    {
        "content": "<p>Well congrats. I hope to get to that point someday. What maths research have you been able to formalise in Lean?</p>",
        "id": 163861071,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869202
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces\">https://github.com/leanprover-community/lean-perfectoid-spaces</a></p>",
        "id": 163861075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869218
    },
    {
        "content": "<p>It's not finished yet but we're getting there.</p>",
        "id": 163861076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869231
    },
    {
        "content": "<p>I've just spent the last 30 minutes staring at <a href=\"#narrow/stream/116395-maths/topic/Cute.20lemma/near/163135381\" title=\"#narrow/stream/116395-maths/topic/Cute.20lemma/near/163135381\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Cute.20lemma/near/163135381</a></p>",
        "id": 163861121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869258
    },
    {
        "content": "<p>some technical lemma about topological spaces which we need.</p>",
        "id": 163861130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869277
    },
    {
        "content": "<p>that's... absolutely amazing. I never imagined we could do something like this in Lean so soon.</p>",
        "id": 163861147,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869315
    },
    {
        "content": "<p>Yeah me neither</p>",
        "id": 163861149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869326
    },
    {
        "content": "<p>I've had a huge amount of support from other people here</p>",
        "id": 163861150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869337
    },
    {
        "content": "<p>18 months ago there weren't even complex numbers</p>",
        "id": 163861156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869361
    },
    {
        "content": "<p>Now we have schemes <a href=\"https://github.com/ramonfmir/lean-scheme\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme\">https://github.com/ramonfmir/lean-scheme</a> and they work</p>",
        "id": 163861201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869388
    },
    {
        "content": "<p>Wow. Yeah, I'm now very happy that I've been introduced to this chat by Dr. Hölzl</p>",
        "id": 163861203,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869398
    },
    {
        "content": "<p>Oh wow, algebraic geometry? I'll have to tell my advisor about this</p>",
        "id": 163861205,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869414
    },
    {
        "content": "<p>we have stuff which reflects the interests of the people involved, I guess.</p>",
        "id": 163861218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869450
    },
    {
        "content": "<p>Thank you so much for all this info. I really appreciate it. I look forward to participating more in the future, when I get a little bit more acquainted with Lean.</p>",
        "id": 163861264,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869490
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Taking.20the.20Stacks.20Project.20formalisation.20forward\" title=\"#narrow/stream/116395-maths/topic/Taking.20the.20Stacks.20Project.20formalisation.20forward\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Taking.20the.20Stacks.20Project.20formalisation.20forward</a></p>",
        "id": 163861269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869500
    },
    {
        "content": "<p>That's the schemes thread</p>",
        "id": 163861270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869506
    },
    {
        "content": "<p>we're going to re-write it using the category theory library; at the minute we make all the categories by hand.</p>",
        "id": 163861273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869532
    },
    {
        "content": "<p>There are universe issues, as ever in category theory, so it gets a bit hairy because you have to do it all properly in a system like this</p>",
        "id": 163861283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555869560
    },
    {
        "content": "<p>That makes sense. Cat theory makes for the introduction of some interesting nuances</p>",
        "id": 163861354,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555869659
    },
    {
        "content": "<p>How do I apply one direction of an iff? Like, if I wanted to only apply the left implication in a proof.</p>",
        "id": 163861817,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555870477
    },
    {
        "content": "<p><code>bla.1</code> or <code>bla.mp</code></p>",
        "id": 163862508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555871790
    },
    {
        "content": "<p>which is short for <code>iff.mp bla</code></p>",
        "id": 163862512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555871808
    },
    {
        "content": "<p>oh okay, so if my iff statement was titled bla, bla.1 would be the left implication, and bla.2 would be the right?</p>",
        "id": 163862527,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555871873
    },
    {
        "content": "<p>Also, where can I find the xenalib package?</p>",
        "id": 163862878,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555872530
    },
    {
        "content": "<p>nvm, found it</p>",
        "id": 163862942,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555872628
    },
    {
        "content": "<p>Okay, I've got a Lean file I've tinkered around with in the past, which includes some simple proofs about integers. Some propositions I've failed to prove in Lean, and the rest I'm sure are anything but efficient. I was wondering if anyone would be willing to look over this file for me and give me some pointers on how to improve my proving techniques. <a href=\"/user_uploads/3121/oDrGTH44Zfg48XIg3ZaoHSYE/int_props.lean\" target=\"_blank\" title=\"int_props.lean\">int_props.lean</a></p>",
        "id": 163902237,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555938151
    },
    {
        "content": "<p>It's sort of a long file, and not very organised, but any help at all would be really appreciated. Sorry in advance.</p>",
        "id": 163902261,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555938186
    },
    {
        "content": "<p>I'm having trouble defining structure fields. The generic construction of structures is fine, I just don't understand fields. How would I go about appending them to a given structure?</p>",
        "id": 163965002,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1555999968
    },
    {
        "content": "<p>Do you mean extending a structure?</p>",
        "id": 163965231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556000187
    },
    {
        "content": "<p>Search for \"extend\" in mathlib and you will find lots of examples</p>",
        "id": 163965232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556000187
    },
    {
        "content": "<p>oh, cool. Thank you. I didn't even know what I was looking for until you showed me</p>",
        "id": 163966248,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556001709
    },
    {
        "content": "<p>You might want to read the chapters on inductive types and structures in TPIL.</p>",
        "id": 163967041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556002720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218940\">@Greg Conneen</span> what Kevin really means is: if you have any interest in learning Lean, you want to read all of TPIL. The modern way of doing that is to launch VScode, open any Lean file, type Ctrl-shift-p type lean, select \"Open documentation view\", click \"Theorem proving in Lean\". This way you can click \"Try it!\" links on code snippets to open them right in VScode and play with them.</p>",
        "id": 163968134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556004160
    },
    {
        "content": "<p>Trying to figure out the community map: Greg, are you a student of the Kevin Sullivan?</p>",
        "id": 163968575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556004767
    },
    {
        "content": "<p>I was Prof. Sullivan's student last year, yes.</p>",
        "id": 163985682,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556023650
    },
    {
        "content": "<p>I've read the entirety of TPIL. I'm just still having trouble with implementation. I guess I'll tinker around with it a bit more</p>",
        "id": 163985995,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556023793
    },
    {
        "content": "<p>Okay, so if a group is defined like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">group</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span><span class=\"o\">)</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>the way I would make something like this would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">fake_group</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>except, I want to change group α to fake_group α and I don't understand how to do that. I also in general don't understand the bracket notation or what pi does.</p>",
        "id": 163988098,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556024946
    },
    {
        "content": "<p>Note, you can use</p>\n<div class=\"codehilite\"><pre><span></span>```lean\nfoobar\n```\n</pre></div>\n\n\n<p>to get code blocks with syntax highlighting</p>",
        "id": 163988588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025292
    },
    {
        "content": "<p>oh okay, thanks</p>",
        "id": 163988616,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025311
    },
    {
        "content": "<p>Note that a group is not defined the way you did. (Internally that is what Lean sees, maybe. But it isn't how it's written in the Lean source files.)</p>",
        "id": 163988667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025362
    },
    {
        "content": "<p>Tip: write <code>#print group</code> in VScode, and <code>Ctrl</code>-click on <code>group</code>.</p>",
        "id": 163988729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025389
    },
    {
        "content": "<p>Or put your cursor on <code>group</code> and hit <code>Ctrl - Shift - F10</code></p>",
        "id": 163988749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025407
    },
    {
        "content": "<p>ohhhh I see. So a group is simply an extension of a monoid, which I assume is an extension of a semigroup.</p>",
        "id": 163988801,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025448
    },
    {
        "content": "<p>...which it is, 4 lines above. Thank you so much.</p>",
        "id": 163988875,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025486
    },
    {
        "content": "<p>So, in general, classes are used in the backend, but Lean interprets them as structures. What's the difference?</p>",
        "id": 163989273,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025740
    },
    {
        "content": "<p>Also, is there any way to formalise has_mul and has_one without extending those classes?</p>",
        "id": 163989367,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025800
    },
    {
        "content": "<p>No the difference between classes and structures is type class inference</p>",
        "id": 163989436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025843
    },
    {
        "content": "<blockquote>\n<p>Also, is there any way to formalise has_mul and has_one without extending those classes?</p>\n</blockquote>\n<p>Just copy paste their definitions.</p>",
        "id": 163989470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025862
    },
    {
        "content": "<p>I don't know what you mean by that</p>",
        "id": 163989477,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025871
    },
    {
        "content": "<p>The word <code>class</code> is a red herring in this discussion</p>",
        "id": 163989478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025874
    },
    {
        "content": "<p>You could write <code>structure</code> everywhere</p>",
        "id": 163989495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025886
    },
    {
        "content": "<p>gotcha. So the only difference is that structures are't able to inherit the properties of other structures. So when would you use a structure over a class?</p>",
        "id": 163989589,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556025951
    },
    {
        "content": "<p>No, structures can inherit</p>",
        "id": 163989676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556025994
    },
    {
        "content": "<p>The difference is \"type class instance\". Search for that in TPIL.</p>",
        "id": 163989696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026014
    },
    {
        "content": "<p>oh. Then what do you mean by \"type class inference?\"</p>",
        "id": 163989699,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556026016
    },
    {
        "content": "<p>oh okay, gotcha</p>",
        "id": 163989710,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556026025
    },
    {
        "content": "<p>must've skimmed over that section</p>",
        "id": 163989725,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556026032
    },
    {
        "content": "<p>inference, not inheritance <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 163989731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026036
    },
    {
        "content": "<p>/me never read TPIL in detail. I'm a cargo cult Leaner.</p>",
        "id": 163989753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556026062
    },
    {
        "content": "<p>The difference between a structure and a class is that classes are structures with extra magical sauce.</p>",
        "id": 163989760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026067
    },
    {
        "content": "<p>Ah, that's my confusion. Thank you for being patient with me</p>",
        "id": 163989767,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556026074
    },
    {
        "content": "<p>I was trying to write some advanced notes on type class inference</p>",
        "id": 163989772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026078
    },
    {
        "content": "<p>but before I wrote them I wrote some basic notes on type class inference for mathematicians</p>",
        "id": 163989828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026091
    },
    {
        "content": "<p>These might help. They present the same material as in TPIL but in a way far more suited to mathematicians.</p>",
        "id": 163989843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026105
    },
    {
        "content": "<p>They're in a branch of mathlib, hang on, I'll dig it out. I'm actually on an aeroplane at this point</p>",
        "id": 163989867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026124
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/kbuzzard_typeclass_inference_doc/docs/extras/typeclass_inference.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/kbuzzard_typeclass_inference_doc/docs/extras/typeclass_inference.md\">https://github.com/leanprover-community/mathlib/blob/kbuzzard_typeclass_inference_doc/docs/extras/typeclass_inference.md</a></p>",
        "id": 163990167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026371
    },
    {
        "content": "<p>I found typeclass inference really hard to learn. It was only when I began to try to do normal maths in Lean that I began to see the point of it and understand it properly.</p>",
        "id": 163990228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026423
    },
    {
        "content": "<p>For reasons that you don't need to worry about and which might change, Lean keeps a ring in two packages not one. The first is a type called something like R. The second is a whole bunch of data which might be called something like <code>_inst_1 : ring R</code> and which you should never need to look at, but it's here that all the multiplication and the addition and the zero and the axioms are all stored. You will probably not need to dig out the axioms, you should just be applying lemmas, if you're doing mathematics -- but sometimes it's important to know where Lean magics up e.g. the proof of the distributivity law for the integers, and if you want to know this then you need to know about typeclass inference.</p>",
        "id": 163990426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556026569
    },
    {
        "content": "<p>What if I wanted to talk about a ternary operator instead of a binary one (I want to define an algebraic heap)? I can't use has_mul, since it's strictly binary...</p>",
        "id": 163993041,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556028641
    },
    {
        "content": "<p>yup</p>",
        "id": 163993235,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1556028758
    },
    {
        "content": "<p>what exactly is your question about ternary operators?</p>",
        "id": 163993287,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1556028789
    },
    {
        "content": "<p>I want to define a class, let's start with semiheap. I only need it to have the following property, called para-associativity:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">forall</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">alpha</span><span class=\"o\">,</span> <span class=\"o\">[[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]]</span>\n</pre></div>\n\n\n<p>where [a b c] is a ternary operator. Although, If I have to use different notation given Lean's use of square brackets, that's fine</p>",
        "id": 163993708,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029072
    },
    {
        "content": "<p>I assume I have to define some sort of infix for a ternary operator, but I don't know how to implement that</p>",
        "id": 163993810,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029142
    },
    {
        "content": "<p>Does the operator have a \"canonical\" name in the literature?</p>",
        "id": 163993844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556029160
    },
    {
        "content": "<p>section 10.3 in TPIL describes notation</p>",
        "id": 163993867,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1556029173
    },
    {
        "content": "<p>You will first want to define it without the ternary notation.</p>",
        "id": 163993868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556029175
    },
    {
        "content": "<p>Afterward, you can define the notation, and start using it.</p>",
        "id": 163993885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556029186
    },
    {
        "content": "<p>Okay. I assume that I need to give it an operation on 3 elements, then state the rule</p>",
        "id": 163994014,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029259
    },
    {
        "content": "<p>And no, unfortunately there's not really a canonical name for the operator. It's just a ternary operation, in the same way that the standard operation a group deals with is just a binary one</p>",
        "id": 163994076,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029314
    },
    {
        "content": "<p>Yup. So you want fields</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">semi_assoc</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">blabla</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 163994086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556029321
    },
    {
        "content": "<blockquote>\n<p>And no, unfortunately there's not really a canonical name for the operator. It's just a ternary operation, in the same way that the standard operation a group deals with is just a binary one</p>\n</blockquote>\n<p>We \"canonically\" call it <em>multiplication</em>.</p>",
        "id": 163994154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556029350
    },
    {
        "content": "<p>Ah, I see. That makes sense. Although, most mathematicians I know don't like to be so restrictive in terminology :P</p>",
        "id": 163994218,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029400
    },
    {
        "content": "<p>I was just wondering whether there was a good alternative to <code>tern_op</code>.</p>",
        "id": 163994232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556029409
    },
    {
        "content": "<p>Yeah, I figured that's what you were after. Heaps aren't really a common algebraic structure, I'm really just trying to implement this so I have a better understanding of how Lean deals with structures/classes</p>",
        "id": 163994355,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029494
    },
    {
        "content": "<p>Also, am I able to say that 3 things are equal in one field without using \"and\"?</p>",
        "id": 163994731,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029777
    },
    {
        "content": "<p>like how I wrote above</p>",
        "id": 163994748,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029792
    },
    {
        "content": "<p>there are stupid indirect ways to say it, but using <code>and</code> is the reasonable one</p>",
        "id": 163994885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556029868
    },
    {
        "content": "<p>Okay. Unfortunate, but I guess it's better than defining two separate fields</p>",
        "id": 163995024,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556029958
    },
    {
        "content": "<p>If you really want to you can build an API around this</p>",
        "id": 163995099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030017
    },
    {
        "content": "<p>No thank you lol</p>",
        "id": 163995181,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030058
    },
    {
        "content": "<p>You will need lemmas about heaps saying that anyway</p>",
        "id": 163995227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030092
    },
    {
        "content": "<p>Whatever is inside your field, you'll want a lemma asserting the three relevant equalities</p>",
        "id": 163995273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030126
    },
    {
        "content": "<p>I don't know what you mean</p>",
        "id": 163995312,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030153
    },
    {
        "content": "<p>Why would I need a lemma? Are you talking about showing that some object is a heap?</p>",
        "id": 163995379,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030173
    },
    {
        "content": "<p>I'd expect that just implementing the classes wouldn't require lemmas</p>",
        "id": 163995408,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030195
    },
    {
        "content": "<p>No, he is talking about making it usable</p>",
        "id": 163995431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556030211
    },
    {
        "content": "<p>Oh, okay. So I can't refer to the fields until I define lemmas for them?</p>",
        "id": 163995485,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030244
    },
    {
        "content": "<p>You will have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">heap</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">heap</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">heap</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">assoc1</span>  <span class=\"o\">:</span> <span class=\"o\">[[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">assoc2</span>  <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">assoc3</span>  <span class=\"o\">:</span> <span class=\"o\">[[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">]]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span> <span class=\"n\">heap</span>\n</pre></div>",
        "id": 163995586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030341
    },
    {
        "content": "<p>I would have three fields rather than an <code>and</code></p>",
        "id": 163995601,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556030352
    },
    {
        "content": "<p>You can refer to them, otherwise you can't state the lemmas. What Patrick is saying is that with only the fields you'll have something that is cumbersome to use.</p>",
        "id": 163995610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556030365
    },
    {
        "content": "<p>yeah I'm putting it into 3 fields. I've realised that's easier</p>",
        "id": 163995614,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030371
    },
    {
        "content": "<p>The point is: whatever the implementaion chosen, after writing  those three lemmas, you will have your three equalities</p>",
        "id": 163995629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030388
    },
    {
        "content": "<p>What does that change? Just being able to refer to the property without using semiheap.*?</p>",
        "id": 163995708,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030437
    },
    {
        "content": "<p>Of course if you put all three lemmas as fields then you don't have to state theses lemmas to use them (unless for some reason you want to change binder types, but that's a more advanced discussion)</p>",
        "id": 163995709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030439
    },
    {
        "content": "<p>Also, is Type* a way of referring to an arbitrary Type level without defining a universe?</p>",
        "id": 163995722,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030462
    },
    {
        "content": "<p>And if you use redundant fields like that you will probably want a custom constructor</p>",
        "id": 163995769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030500
    },
    {
        "content": "<p>How would a custom constructor help me?</p>",
        "id": 163995886,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030583
    },
    {
        "content": "<p>Sorry, but I'm still very new, and I don't really see the big picture yet</p>",
        "id": 163995931,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030635
    },
    {
        "content": "<p>I think the discussion would be much easier if you write something and then we comment it</p>",
        "id": 163996078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030713
    },
    {
        "content": "<p>Abstract discussion won't help</p>",
        "id": 163996098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556030726
    },
    {
        "content": "<p>Yeah I agree. I'll post in just a second</p>",
        "id": 163996115,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556030737
    },
    {
        "content": "<p>This is what I've got so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">semiheap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">para_assoc1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">tern_op</span> <span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">tern_op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">para_assoc2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">tern_op</span> <span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">tern_op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">para_assoc3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">tern_op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">tern_op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">tern_op</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semiheap</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">tern_op</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiheap</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">para_assoc1</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">para_assoc2</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">para_assoc3</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span> <span class=\"n\">semiheap</span>\n</pre></div>\n\n\n<p>The semiheap as defined is fine. I'm just having trouble with the notation, since it throws an error saying I'm referencing local variables if I put it below them, and I don't know how to reference the semiheap alpha if I put it above.</p>",
        "id": 163997611,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556031633
    },
    {
        "content": "<p>I don't think you can use space as a delimiter in this notation. You can play with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"n\">semiheap</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">tern_op</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">notation</span><span class=\"w\"> </span><span class=\"n\">`</span><span class=\"p\">[</span><span class=\"n\">`</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">`</span><span class=\"o\">|</span><span class=\"n\">`</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">`</span><span class=\"o\">|</span><span class=\"n\">`</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">`</span><span class=\"p\">]</span><span class=\"n\">`</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">tern_op</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">para_assoc1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">para_assoc2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">]])</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">para_assoc3</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">]])</span><span class=\"w\"></span>\n\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">semiheap</span><span class=\"o\">.</span><span class=\"n\">mk</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nc\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">semiheap</span><span class=\"w\"> </span><span class=\"err\">α</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">tern_op</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">para_assoc1</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">para_assoc2</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"err\">λ</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">▸</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">para_assoc3</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"n\">h2</span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163998753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556032372
    },
    {
        "content": "<p>The function is the custom constructor, it lets you build a structure by providing only two equalities</p>",
        "id": 163998816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556032422
    },
    {
        "content": "<p>Why have we defined .mk'? What does it do? Also, what is ▸?</p>",
        "id": 163999075,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556032576
    },
    {
        "content": "<p>Please first try to define an instance of <code>semiheap</code></p>",
        "id": 163999113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556032622
    },
    {
        "content": "<p>It clearly rewrote, but what does it do in general?</p>",
        "id": 163999124,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556032627
    },
    {
        "content": "<p>Okay, I will</p>",
        "id": 163999130,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556032631
    },
    {
        "content": "<p>I've got it.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">tern_add</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span>\n<span class=\"kn\">instance</span> <span class=\"n\">int_semiheap</span> <span class=\"o\">:</span> <span class=\"n\">semiheap</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">semiheap</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">tern_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tern_add</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tern_add</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164003046,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556035264
    },
    {
        "content": "<p>Thank you so much for your help.</p>",
        "id": 164003070,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556035286
    },
    {
        "content": "<p>Does that code compile?</p>",
        "id": 164003572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556035592
    },
    {
        "content": "<p>Anyway, the point is you had to prove only para-associativity equalities instead of three</p>",
        "id": 164003623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556035634
    },
    {
        "content": "<p>You can also study (after adding <code>import tactic.abel</code> on top of your file):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">tern_add</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">semiheap</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">tern_op</span> <span class=\"o\">:=</span> <span class=\"n\">tern_add</span><span class=\"o\">,</span>\n  <span class=\"n\">para_assoc1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">tern_add</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">},</span>\n  <span class=\"n\">para_assoc2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">tern_add</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">},</span>\n  <span class=\"n\">para_assoc3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">tern_add</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">semiheap</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">semiheap</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">tern_add</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">tern_add</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">tern_add</span><span class=\"o\">],</span> <span class=\"n\">abel</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 164003676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556035675
    },
    {
        "content": "<p>you can also replace <code>dsimp [tern_add]</code> by <code>unfold tern_add</code></p>",
        "id": 164003782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556035728
    },
    {
        "content": "<p>Okay, I will. I'm currently implementing heaps as an extension of semiheaps. How do I avoid having to write the notation as a field over and over?</p>",
        "id": 164003941,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556035850
    },
    {
        "content": "<p>you need to reissue the notation command after the semiheap definition. The one inside the definition has limited scope</p>",
        "id": 164004090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556035953
    },
    {
        "content": "<p>Gotcha. So at most I'll only have to write it twice</p>",
        "id": 164004118,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556035972
    },
    {
        "content": "<p>yes</p>",
        "id": 164004140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556035983
    },
    {
        "content": "<p>Is the symmetric group defined anywhere in mathlib? If not, I'd like to go about implementing it, and in doing so would need some guidance</p>",
        "id": 164019736,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556046454
    },
    {
        "content": "<p>It is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\">- `perm α` is the type of bijections from `α` to itself. -/</span>\n</pre></div>",
        "id": 164019868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046529
    },
    {
        "content": "<p>Thank you</p>",
        "id": 164019920,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556046564
    },
    {
        "content": "<p>Followup question, has Cayley's theorem been proven?</p>",
        "id": 164020042,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556046635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I guess you did Cayley somewhere, right?</p>",
        "id": 164020295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046794
    },
    {
        "content": "<p>No.</p>",
        "id": 164020371,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046843
    },
    {
        "content": "<p>But it won't be hard.</p>",
        "id": 164020394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556046851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218940\">@Greg Conneen</span> It would be a very nice project to start with!</p>",
        "id": 164020421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556046867
    },
    {
        "content": "<p>Okay. I assume it won't be. That sounds like a great thing to do.</p>",
        "id": 164020443,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556046883
    },
    {
        "content": "<p>I'm going to need help understanding data.equiv.basic though</p>",
        "id": 164020496,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556046930
    },
    {
        "content": "<p>It looks like α ≃ β means α is isomorphic to β, given the defn. perm α makes sense. I'm still not completely comfortable with set theory notation and techniques in Lean, since I was introduced almost exclusively through propositions</p>",
        "id": 164020674,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556047048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218940\">@Greg Conneen</span> Do you have an idea how you would formalise the statement?</p>",
        "id": 164021104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556047300
    },
    {
        "content": "<p>I'm looking into that now. The proof is trivial to me on paper. I should be fine in abstracting it. I'll definitely ask for help with it when I need it</p>",
        "id": 164021263,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556047394
    },
    {
        "content": "<blockquote>\n<p>It looks like α ≃ β means α is isomorphic to β</p>\n</blockquote>\n<p>This is an extremely confusing notation, but you'll get used to it</p>",
        "id": 164021723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047713
    },
    {
        "content": "<p>The first piece of truth is <code>α ≃ β</code> is the type of isomorphisms from <code>α</code> to <code>β</code></p>",
        "id": 164021787,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047759
    },
    {
        "content": "<p>So it's not a <code>Prop</code>, it contains data</p>",
        "id": 164021806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047775
    },
    {
        "content": "<p>oh no</p>",
        "id": 164021815,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556047785
    },
    {
        "content": "<p>lol that's certainly unintuitive</p>",
        "id": 164021875,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556047802
    },
    {
        "content": "<p>The next layer of confusion is that an isomorphism from <code>α</code> to <code>β</code> is not only a map from <code>α</code> to <code>β</code> which happens to be an isomorphism, it's a bundle containing such a map, the corresponding inverse map and two proofs</p>",
        "id": 164021956,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047846
    },
    {
        "content": "<p>you need to read <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/equiv/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/equiv/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/equiv/basic.lean</a></p>",
        "id": 164022067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047906
    },
    {
        "content": "<p>keeping the above explanation in mind</p>",
        "id": 164022095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047919
    },
    {
        "content": "<p>That's perfectly fine. I can understand that such a map needs more info packaged in with it. So, what's the actual prop that A is iso to B?</p>",
        "id": 164022151,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556047932
    },
    {
        "content": "<p>don't forget to first read back the section on coercions in TPIL</p>",
        "id": 164022152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047933
    },
    {
        "content": "<p>And yeah I've been reading that file</p>",
        "id": 164022169,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556047944
    },
    {
        "content": "<p><code>nonempty (α ≃ β)</code></p>",
        "id": 164022251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556047996
    },
    {
        "content": "<p>This is the Prop you are looking for</p>",
        "id": 164022274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556048014
    },
    {
        "content": "<p>Probably I missed that piece of information: at what stage of your math studies are you? (Knowing this will help choosing explanations for you)</p>",
        "id": 164022456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556048125
    },
    {
        "content": "<p>I don't think I've fully elaborated. I'm a 2nd year undergraduate math major currently taking my first semester of graduate real and complex analysis, and my third semester of graduate algebra. I plan on studying algebraic combinatorics, algebraic geometry, or algebraic topology. Either way, interested in algebra</p>",
        "id": 164022688,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556048281
    },
    {
        "content": "<p>I'm afraid my knowledge of the American university system is clearly not good enough to understand that answer. Can you give a couple of examples of theorems you recently learned in your most advanced courses?</p>",
        "id": 164022856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556048400
    },
    {
        "content": "<blockquote>\n<p><code>nonempty (α ≃ β)</code></p>\n</blockquote>\n<p>That just says alpha bijects with beta. You want an isomorphism of what structure?</p>",
        "id": 164023106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556048533
    },
    {
        "content": "<p>He doesn't need more structure. He is trying to formalise Cayley's theorem.</p>",
        "id": 164023186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556048617
    },
    {
        "content": "<p>Yeah. I'm currently in a course on wedderburn theory/commutative algebra. So, for example, we just covered the classification theorem for semisimple rings and semisimple algebras. In manifolds, we just covered the generalisation of stokes' theorem, and we just had an ending seminar on the Poincare lemma and the DeRham cohomology.</p>",
        "id": 164023555,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556048883
    },
    {
        "content": "<p>Thanks, this I understand (but I have no idea how to relate this to your abstract answer)</p>",
        "id": 164023653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556048964
    },
    {
        "content": "<p>Well, I'm glad I could clarify for you</p>",
        "id": 164023777,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556049039
    },
    {
        "content": "<p>What is the recommended/most elegant way to simplify/rewrite a hypothesis/assumption while re-stating the desired outcome of the simplification/rewriting? For example, doing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>is not quite perfect as I have to write <code>by { simp at hyp, assumption }</code> (preferably, I'd like to simply write <code>by simp at hyp</code>) and leaves me with two hypotheses called <code>hyp</code>, namely</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n<span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>Is there something like <code>change</code> for hypotheses?</p>",
        "id": 164249738,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556274479
    },
    {
        "content": "<p>There is <code>rwa</code> and <code>simpa</code>. Do those help you?</p>",
        "id": 164251420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556276357
    },
    {
        "content": "<p>Alright, that solves the former issue. Can I also somehow drop the non-simplified version from the list of assumptions?</p>",
        "id": 164251567,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556276514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span>  <code>replace hyp : bla, by foobar</code>?</p>",
        "id": 164251650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556276585
    },
    {
        "content": "<p>Yeah, that's exactly what I was looking for! thanks :) I do not think <code>replace</code> is mentioned in the tutorial. Is there some sort of document/website with \"advanced tactics/APIs\" that I can consult in such cases?</p>",
        "id": 164251946,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556276890
    },
    {
        "content": "<p>Which tutorial?</p>",
        "id": 164251990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556276970
    },
    {
        "content": "<p>See the <code>docs/</code> folder in mathlib. There is some stuff there.</p>",
        "id": 164251998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556276985
    },
    {
        "content": "<p>This document: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf\">https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf</a></p>",
        "id": 164252005,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556277001
    },
    {
        "content": "<blockquote>\n<p>Is there something like <code>change</code> for hypotheses?</p>\n</blockquote>\n<p>Yes, it's called <code>change</code></p>",
        "id": 164253453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556278683
    },
    {
        "content": "<p>If you have <code>hyp : 1 + 1 = 2</code> you can <code>change 2 = 2 at hyp</code></p>",
        "id": 164253515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556278759
    },
    {
        "content": "<p>It's me again :') I'm having some problems when using <code>let</code>-expressions + cases/induction. For example, this does not work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span> <span class=\"c1\">-- error: could not find open goal of given case</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>whereas this works</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Does someone know what I am doing wrong?</p>",
        "id": 164446721,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556540442
    },
    {
        "content": "<p>Maybe that's a bug in <code>case</code>? You know that you don't need it, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164446952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556540667
    },
    {
        "content": "<p>Yep, I'd really like to keep the <code>case nat.xxx</code> annotations though to keep my proofs more readable.</p>",
        "id": 164447000,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556540714
    },
    {
        "content": "<p>Make it a comment within the <code>{}</code>. And complain to the devs :-)</p>",
        "id": 164447056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556540753
    },
    {
        "content": "<p>Haha, alright :D Thanks</p>",
        "id": 164447163,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1556540826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> is this a bug?</p>",
        "id": 164447324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556540979
    },
    {
        "content": "<p>I think it is. I'll look into it</p>",
        "id": 164447705,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556541320
    },
    {
        "content": "<p>Does <code>unfold</code> actually do anything other than change what the goal looks like? Isn't <code>#print</code> or <code>Ctrl-click</code> on what you're unfolding a replacement, since it's just a method of getting information about your goal? It seems that any proof can have the <code>unfold</code> statement removed, and it works just the same</p>",
        "id": 164506505,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1556592661
    },
    {
        "content": "<p>yes and no (and no). <code>unfold</code> will rewrite with equations that are not necessarily definitional equalities, so it might do more than just change the appearance of the goal. It's really a wrapper around <code>simp</code> with particular config options. <code>dunfold</code> is closer to your description, as it only does defeq simplifications. But there are two reasons that it's still not correct to say that it \"doesn't actually do anything other than change what the goal looks like\" and \"any proof can have the <code>dunfold</code> statement removed and it works just the same\". First, it does actually do something - it inserts an <code>id</code> term into the result (the partial proof being constructed). So you can see the result of <code>dsimp</code> and <code>dunfold</code> applications in the resulting proof if you <code>#print</code> it. This is done to keep typechecking time down by remembering the simplification path in the proof term.</p>\n<p>The more important reason why <code>dunfold</code> and friends can't necessarily be removed from a proof is because many tactics depend on the syntactic shape of the goal or a hypothesis. For example, <code>rw</code> will not match against the goal if some definitional unfolding is required to see the constant that appears. For example if the goal is <code>2 * n = 0</code> where <code>n : nat</code>, then this is defeq to <code>n + n = 0</code> but <code>rw add_comm</code> would only work on the second form of the goal. So anything that \"changes what the goal looks like\" could potentially affect whether a later tactic succeeds. That said, many tactics don't care about anything beyond defeq, in particular <code>apply</code>, <code>refine</code> and <code>exact</code>, and in many cases you can remove superfluous <code>unfold</code> and <code>dunfold</code> tactics without breaking the proof.</p>",
        "id": 164506888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556593293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> I now have a fix for your <code>let</code> / <code>case</code> issue. It should be in the next nightly build of Lean 3.5.0c</p>",
        "id": 164832882,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556919944
    },
    {
        "content": "<p>Real quick, what is a meta variable and why is <code>tactic.finish</code> absolutely packed with them? I'm not sure exactly what's going on, but it seems that any trivial propositional technique is proven immediately with <code>by finish</code></p>",
        "id": 164884660,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557000473
    },
    {
        "content": "<p>What do you mean <code>finish</code> is packed with metavariable?</p>",
        "id": 164884711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557000510
    },
    {
        "content": "<p>A meta-variable is a kind of hole Lean will have to fill in. It can be the goal you need to solve or some implicit argument to be inferred by unification</p>",
        "id": 164884724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557000558
    },
    {
        "content": "<p>I just mean that when I pressed <code>Ctrl-Click</code> on <code>tactic.finish</code>, I came upon a file that was filled with the keyword <code>meta</code> and I wasn't sure what any of it meant</p>",
        "id": 164884862,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557000828
    },
    {
        "content": "<p>oohh</p>",
        "id": 164884865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557000840
    },
    {
        "content": "<p>that's a different meta</p>",
        "id": 164884911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557000850
    },
    {
        "content": "<p>I suppose so, I just assumed that <code>meta def</code> was defining a metavariable, although I suppose that wouldn't make sense given my preconceived notion of what a metavariable is</p>",
        "id": 164884923,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557000900
    },
    {
        "content": "<p><code>meta</code> in this context means \"unsafe\". It's code that won't be checked by Lean. It particular it doesn't have to be provably terminating</p>",
        "id": 164884925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557000901
    },
    {
        "content": "<p>Why would one ever need such a thing?</p>",
        "id": 164884946,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557000932
    },
    {
        "content": "<p>Typically tactics (the commands you type between begin and end) are meta. They produce proofs that <em>will</em> be checked by Lean. But the way they produces those proofs is freestyle</p>",
        "id": 164884950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557000952
    },
    {
        "content": "<p>Ah, okay. So it's not just a cheeky way of making axioms. So the reason I can solve so many things with <code>by finish</code> is because all of the structures in <code>finish</code> are using this meta keyword? I assume without it, there wouldn't be a way of taking arbitrary propositions and figuring out how to solve them</p>",
        "id": 164885023,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001066
    },
    {
        "content": "<p>That is, <code>finish</code> wouldn't know how to solve a proposition handed to it if it weren't in a specific order of some sort</p>",
        "id": 164885069,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001108
    },
    {
        "content": "<p><code>meta</code> code can do non-terminating recursion, and it can also work with \"reflected\" versions of mathematical objects, i.e. their actual representations as <code>expr</code> objects in the C++ code.</p>",
        "id": 164885070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001109
    },
    {
        "content": "<p><code>finish</code> constructs a proof for you</p>",
        "id": 164885074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557001125
    },
    {
        "content": "<p>Okay, that's really cool <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 164885086,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001155
    },
    {
        "content": "<p>I don't think there is any risk of non-termination here. But the type of Lean expressions is meta, for reasons too long to explain (unless you understand what Scott wrote)</p>",
        "id": 164885089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557001175
    },
    {
        "content": "<p>This is one of the lovely things about Lean --- you can write new tactics (i.e. programs that construct proofs, but aren't necessarily themselves correct) in Lean itself.</p>",
        "id": 164885133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001207
    },
    {
        "content": "<p>I understand C++ enough to generally know what he means</p>",
        "id": 164885135,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001210
    },
    {
        "content": "<p>In previous interactive theorem provers you needed to step out, either into the base implementation language, or some DSL, to write new tactics.</p>",
        "id": 164885145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001247
    },
    {
        "content": "<p>So, even with meta, there's still no way to prove false? Because a bad tactic won't construct a good proof?</p>",
        "id": 164885155,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001265
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 164885159,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001271
    },
    {
        "content": "<p>The <code>meta</code> keyword <em>protects</em> the real maths from these \"helper\" functions that we write to help construct proofs.</p>",
        "id": 164885161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001278
    },
    {
        "content": "<p>ahh</p>",
        "id": 164885165,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001287
    },
    {
        "content": "<p>Exactly. The tactic framework lets you <em>run</em> meta code to produce proof terms, but those proof terms will be rejected if they refer to any <code>meta</code> functions.</p>",
        "id": 164885169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001321
    },
    {
        "content": "<p>so, how would a noob go about using meta? Or, should I just not even touch the thing?</p>",
        "id": 164885214,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001340
    },
    {
        "content": "<p>It depends on your taste, background and goals</p>",
        "id": 164885226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557001383
    },
    {
        "content": "<p>Read <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md</a></p>",
        "id": 164885227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001385
    },
    {
        "content": "<p>And start reading all the files in <code>src/tactic/</code> in the mathlib repository.</p>",
        "id": 164885234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001409
    },
    {
        "content": "<p>and ask here :-)</p>",
        "id": 164885236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001418
    },
    {
        "content": "<p>Yes, reading that tutorial will give you a first glance at what it looks like</p>",
        "id": 164885242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557001424
    },
    {
        "content": "<p>Reading <code>src/tactic/</code> will give you a lot more (after a <em>lot</em> more time)</p>",
        "id": 164885244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557001441
    },
    {
        "content": "<p>Great, thank you. My goal generally is to git gud in Lean, but eventually I want to start implementing some actual maths. I expect that will take me some time, given I'll have to read quite a bit of mathlib</p>",
        "id": 164885297,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001479
    },
    {
        "content": "<p>You don't have to read all of mathlib before starting to implement actual maths</p>",
        "id": 164885311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557001527
    },
    {
        "content": "<p>sure, but I'd like to understand a chunk of what's already there on a fundamental level</p>",
        "id": 164885428,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001699
    },
    {
        "content": "<p>Do you have an idea what maths you'd like to do?</p>",
        "id": 164885432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001705
    },
    {
        "content": "<p>If you're ever tempted to add documentation to stuff you're reading, documentation-only pull requests are very welcome. :-)</p>",
        "id": 164885440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557001740
    },
    {
        "content": "<p>I'd like to define a manifold, and maybe prove the inverse/implicit function theorem</p>",
        "id": 164885457,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001766
    },
    {
        "content": "<p>I just really need to look over how topology and euclidean space are implemented first</p>",
        "id": 164885514,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001806
    },
    {
        "content": "<p>Also, do we have the definition of a metric space?</p>",
        "id": 164885519,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557001815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218940\">@Greg Conneen</span> If you want to implement some actual maths in Lean, then don't try to get good at Lean first, just try to implement some actual maths in Lean, get stuck, ask for help here, and you will succeed.</p>",
        "id": 164885594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557001928
    },
    {
        "content": "<p>I am precisely working on the definition of a manifold. Work in progress (very much in a preliminary state) at <a href=\"https://github.com/sgouezel/mathlib/blob/aa7fbab39d1e6a01665e24e6197b09338e855467/src/geometry/manifolds/basic.lean#L1598\" target=\"_blank\" title=\"https://github.com/sgouezel/mathlib/blob/aa7fbab39d1e6a01665e24e6197b09338e855467/src/geometry/manifolds/basic.lean#L1598\">https://github.com/sgouezel/mathlib/blob/aa7fbab39d1e6a01665e24e6197b09338e855467/src/geometry/manifolds/basic.lean#L1598</a></p>",
        "id": 164885598,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557001947
    },
    {
        "content": "<p>I have no idea how to write tactics. Tactics are written in meta code because they can fail. You don't need to know anything about tactic-writing (which is what people use meta code for) to write maths.</p>",
        "id": 164885608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557001970
    },
    {
        "content": "<p>However, what you do need to know is what is already there and what is being worked on, because this changes <em>fast</em> here</p>",
        "id": 164885624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557001991
    },
    {
        "content": "<p>Yes we have metric spaces. You can see this yourself by firing up a project with mathlib as a dependency in VS Code and searching for metric space. This is a really important beginner skill to learn.</p>",
        "id": 164885676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002054
    },
    {
        "content": "<p>Make sure that \"the cog doesn't have a box around it\" in \"files to exclude\" in VS Code. That way you can search your dependencies.</p>",
        "id": 164885695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002112
    },
    {
        "content": "<p>Several people would like to define manifolds and people are sort of in the middle of things, so it might not be a perfect project right now for a beginner.</p>",
        "id": 164885701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002156
    },
    {
        "content": "<p>Definitions are harder than theorems; proofs can be sloppy but it's important to get definitions right.</p>",
        "id": 164885752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002186
    },
    {
        "content": "<p>One big obstruction to doing much with manifolds is that we don't have enough calculus, but again people are working on this and things are changing fast.</p>",
        "id": 164885756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002219
    },
    {
        "content": "<p>Bump functions are still a little out of reach at the minute, but it won't be long until we have them.</p>",
        "id": 164885771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002247
    },
    {
        "content": "<p>For polynomials we have multivariable ones and single variable ones; I am not an expert in either analysis or Lean-analysis, but I am wondering whether we are going to need a robust theory of calculus in one real variable, proving basic theorems such that the derivative of the integral is the function. I don't think we even have that.</p>",
        "id": 164885840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002320
    },
    {
        "content": "<p>We have no complex analysis worth mentioning, not even integrating along a reasonable path.</p>",
        "id": 164885857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002355
    },
    {
        "content": "<p>Because of our lack of analysis, this makes manifolds harder to do, however having goals like manifolds in mind is driving the library forwards in the right direction (as far as I am concerned). Lean seems to me to be focussing on the kind of mathematics mathematicians do, as opposed to the kind of mathematics that computer scientists have managed to pick up somehow.</p>",
        "id": 164885923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002426
    },
    {
        "content": "<p>Gotcha, thanks for the information. Do you think that complex would be a good thing to get working on, or do we not have it because it's hard to implement?</p>",
        "id": 164886015,
        "sender_full_name": "Greg Conneen",
        "timestamp": 1557002595
    },
    {
        "content": "<p>I am not an analyst and it's been nearly 30 years since I thought about the basics, Cauchy's integral formula etc. I've never taught the course either, so I am not the person to ask.</p>",
        "id": 164886260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557002985
    },
    {
        "content": "<p>One thing I know was an issue is that someone has to make a decision about in what generality to define path integrals -- C^infinity paths isn't good enough because you want to integrate round semicircles and rectangles etc.</p>",
        "id": 164886319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557003038
    },
    {
        "content": "<p>I really don't know what's there already though; I know a lot of the algebra stuff in Lean but the analysis stuff is changing quickly at the minute.</p>",
        "id": 164886332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557003066
    },
    {
        "content": "<p>Kevin, the way this is going, we'll soon have manifolds with boundary <em>and</em> corners. When we'll have differential forms this will be much more than enough for rectangle and semi-circles</p>",
        "id": 164886554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557003405
    },
    {
        "content": "<p>Woo hoo we'll have de Rham. cohomology one day. Is this in any other theorem prover?</p>",
        "id": 164887338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557004621
    },
    {
        "content": "<p>Is it possible to \"unimport\" <code>core</code>/<code>prelude</code>, i.e. the basic definitions of <code>nat</code>, <code>eq</code>, etc, leaving an environment pretty much free of any definitions?</p>",
        "id": 167754387,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560169488
    },
    {
        "content": "<p>You can put <code>prelude</code> at the top of your file</p>",
        "id": 167754427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560169524
    },
    {
        "content": "<p>which translates to \"this file is part of the prelude\" (so don't be importing all the prelude)</p>",
        "id": 167754438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560169543
    },
    {
        "content": "<p>I've never used it, I've just seen people suggest it</p>",
        "id": 167754444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560169558
    },
    {
        "content": "<p>Yup, that seems to work. Thank you!</p>",
        "id": 167754516,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560169594
    },
    {
        "content": "<p>Is the notation <code>h.fn arg</code> given <code>class myclass (α: Type*) := (fn: α → ℕ)</code> and <code>[h: myclass α]</code> discouraged? It stops working for example if <code>fn: ℕ → α</code> because the type argument <code>α </code> to <code>myclass.fn</code> becomes explicit, i.e. <code>myclass.fn : Π (α : Type u_1) [c : myclass α], ℕ → α</code>.</p>",
        "id": 167898225,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560293793
    },
    {
        "content": "<p>Given a positive integer n, how to define a vector with n entries? Thanks</p>",
        "id": 168518423,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560959094
    },
    {
        "content": "<p><code>vector \\alpha n</code></p>",
        "id": 168518493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560959155
    },
    {
        "content": "<p>Oh, and say x is the vector, how do we decribe its i-th entry?</p>",
        "id": 168518616,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560959209
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 168518620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560959215
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">k</span>\n</pre></div>",
        "id": 168518656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560959240
    },
    {
        "content": "<p>how to do summation from i=1 to n ?</p>",
        "id": 168519365,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560959710
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector2</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</pre></div>",
        "id": 168519856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560960003
    },
    {
        "content": "<p>one more question: how do we define new 3-vector, say, (x,y,x+y) where x, y are variable?</p>",
        "id": 168521168,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560961095
    },
    {
        "content": "<p>and more importantly, is there some online resource where I can read and get familiarized with these simple commands? I skimmed through theorem_proving_in_lean.pdf and couldn't find what I want... I feel like i'm asking too many noob questions like an idiot lol</p>",
        "id": 168521321,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560961220
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 168521500,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560961411
    },
    {
        "content": "<p>how about an n-vector like (x, 2x, 3x, ..., nx)? <span aria-label=\"mischievous\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"mischievous\">:mischievous:</span></p>",
        "id": 168521617,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560961509
    },
    {
        "content": "<blockquote>\n<p>is there some online resource where I can read and get familiarized with these simple commands</p>\n</blockquote>\n<p>Unfortunately there isn't much beyond TPiL. You'll have to get used to reading source files. <a href=\"https://github.com/leanprover/lean/blob/master/library/data/vector.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/data/vector.lean\">Here's data.vector</a>.</p>",
        "id": 168521647,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560961549
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>is there some online resource where I can read and get familiarized with these simple commands</p>\n</blockquote>\n<p>Unfortunately there isn't much beyond TPiL. You'll have to get used to reading source files. <a href=\"https://github.com/leanprover/lean/blob/master/library/data/vector.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/data/vector.lean\">Here's data.vector</a>.</p>\n</blockquote>\n<p>Oh i see, thanks</p>",
        "id": 168521728,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560961609
    },
    {
        "content": "<p>Currently, if you want to figure these things out yourself, the best way is just to look through the library files in mathlib (and core). You can go to <code>data/vector2</code> in mathlib or the file Bryan mentioned in core. Also, operations on list might be useful to know for vectors. Other ways to find things you're searching for: </p>\n<ul>\n<li>Browse through files (either on Github or locally)</li>\n<li>\"Go to definition\" and \"peek definition\" (F12 and alt-F12 / option-F12?)</li>\n<li>Search in VSCode (ctrl+shift+F)</li>\n<li>Search on Github</li>\n<li>Execute <code>#print prefix vector</code> in Lean</li>\n<li>Find lemmas using the tactic <code>library_search</code></li>\n</ul>",
        "id": 168521872,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560961703
    },
    {
        "content": "<blockquote>\n<p>(x, 2x, 3x, ..., nx)</p>\n</blockquote>\n<p>without looking at the library: hopefully <code>vector.range</code> and <code>vector.map</code> both exists, from which you should be able to figure it out (if not, use <code>list.range</code> and/or <code>list.map</code>)</p>",
        "id": 168521944,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560961772
    },
    {
        "content": "<blockquote>\n<p>how about an n-vector like (x, 2x, 3x, ..., nx)? <span aria-label=\"mischievous\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"mischievous\">:mischievous:</span></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">pnat</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">multiple</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"c1\">-- junk value</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">multiple</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">multiple</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 168522426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560962117
    },
    {
        "content": "<p>If \\a is an <code>add_monoid</code>, you can use <code>add_monoid.smul</code> instead of <code>multiple</code></p>",
        "id": 168523081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1560962638
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector2</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">to_list</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</pre></div>\n\n\n</blockquote>\n<p>Is there a way to do summation without using vector?</p>",
        "id": 168524430,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560963602
    },
    {
        "content": "<p>You might be interested in <code>finset.sum</code> and <code>finset.range</code>. The first gives you sums, the second gives you the <code>finset</code> \"{0, ..., n-1}\"</p>",
        "id": 168524753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560963779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218709\">@Adrian Chu</span> the problem is that TPIL just deals with core Lean, and you are asking about how to use stuff in the maths library. When I was learning the basics, I found the maths library very intimidating, but when I realised that I should just stop reading the proofs and instead just look at the definitions, I found that I could proceed with my mathematics very nicely, which in turn led to more understanding, which in turn made reading the proofs which I had been ignoring all this time much easier.</p>\n<p>One thing I learnt fairly quickly was to abstract exactly what I wanted. For example you asked how to make (x, 2x, 3x, ..., nx). But in fact you can break this down into smaller questions. Probably you know well how to make a function like <code>lam n, (n + 1) * x</code>, so then you realise that what you really need is how to make (f 0, f 1, ..., f m). Now from general functional programming you might know that they like things like working out how to take a function f and to apply it to a vector like (0 1 2 ... n) so now you have two smaller questions -- how to make a vector like (0 1 2 ... n) and how to apply a function to every element of a vector. By this stage we are in the world where these ideas have a common name -- <code>range</code> for (0 1 2 ... n) and <code>map</code> for applying a function to a bunch of things at once. Now you can begin to guess the actual names of the functions you want. </p>\n<p>Learning to think this way was a very important stepping stone for me; I slowly began to realise that I was developing a method for being able to answer my own questions of this nature. I am still learning, but this is the way to think about it. For every question, figure out how to build it from general tools and then figure out where those general tools are, perhaps by figuring out first what they should be called.</p>",
        "id": 168524885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560963852
    },
    {
        "content": "<p>I see... I feel that TPiL is like a book teaching grammar, while mathlib is a dictionary. And knowing all the grammar does not immediately guarantee one can fluently read a dictionary, let alone writing sentences or paragraphs.</p>",
        "id": 168525940,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1560964580
    },
    {
        "content": "<p>If you look through something like <code>data.list.basic</code> and take a look at just the names and the statements of the theorems, you can learn a lot about mathlib's naming conventions. The description above (breaking what you want down into small pieces) is I think how you're supposed to think about functional programming; the same sort of themes come up again and again; import <code>data.finset</code> and then use <code>#check</code> to look at the types of <code>list.map</code> and <code>multiset.map</code> and <code>finset.map</code> and it slowly dawns on you that <code>map</code> means a very specific thing in this game. Then try <code>list.range</code> and <code>multiset.range</code> and <code>finset.range</code>. It will slowly dawn on you by people are suggesting that you use <code>vector.map</code> and <code>vector.range</code> without even knowing if these functions are defined in Lean -- and if they're not then it's not hard to make them.</p>",
        "id": 168538087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1560972422
    },
    {
        "content": "<p>Can I place a variable declaration in the middle of a proof? <br>\nFor example instead of this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span>  <span class=\"bp\">⟨</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I want the variable <code>s : α </code> declared inside the proof, like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kn\">variable</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span>  <span class=\"bp\">⟨</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hr</span> <span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 168565250,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1561003733
    },
    {
        "content": "<p>No, that's not possible. Maybe you mean <code>have</code> or <code>let</code>?</p>",
        "id": 168565314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561003811
    },
    {
        "content": "<p>The goal is to prove that some <code>alpha</code> exists. You can't just grab it out of nowhere.</p>",
        "id": 168565329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561003861
    },
    {
        "content": "<p>Ok, that makes sense.</p>",
        "id": 168565408,
        "sender_full_name": "Luis Berlioz",
        "timestamp": 1561003989
    },
    {
        "content": "<p>how to fix <br>\n<code>def y := [1,2,3] \n#eval 4+y.nth 2</code> ? why can't I add?</p>",
        "id": 168583023,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561025657
    },
    {
        "content": "<p>nth returns <code>option nat</code></p>",
        "id": 168583185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561025817
    },
    {
        "content": "<p>you should be able to use <code>y.nth_le 2 dec_trivial</code></p>",
        "id": 168583205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561025860
    },
    {
        "content": "<p>oh it works, thanks! but what do .nth_le and dec_trivial means?</p>",
        "id": 168583631,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561026308
    },
    {
        "content": "<p>no one wants an array out of bounds exception</p>",
        "id": 168583717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561026366
    },
    {
        "content": "<p>the dec_trivial is a proof that 2 &lt; 3</p>",
        "id": 168583726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561026377
    },
    {
        "content": "<p>i see</p>",
        "id": 168584110,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561026752
    },
    {
        "content": "<p>How about </p>\n<div class=\"codehilite\"><pre><span></span>def y := [1,2,3]\ndef g (i : fin 3) : ℕ := y.nth_le i-1\ndef f (i : fin 3) : ℕ := 4 + y.nth_le i-1 dec_trivial\n</pre></div>\n\n\n<p>? What's wrong?</p>",
        "id": 168585134,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561027924
    },
    {
        "content": "<p>Clearly you intended to have parentheses around <code>i-1</code>, but I'm not sure what you are trying to achieve</p>",
        "id": 168587909,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561030934
    },
    {
        "content": "<p>Yep, function application binds tighter than subtraction, so to express what you want you need to put parentheses around <code>i-1</code>. You're also missing a proof that <code>(i-i &lt; list.length y)</code> in <code>g</code> (no second argument is given).</p>",
        "id": 168588087,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561031138
    },
    {
        "content": "<blockquote>\n<p>Yep, function application binds tighter than subtraction, so to express what you want you need to put parentheses around <code>i-1</code>. You're also missing a proof that <code>(i-i &lt; list.length y)</code> in <code>g</code> (no second argument is given).</p>\n</blockquote>\n<p>How exactly should I give the proof then?</p>",
        "id": 168589081,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561032191
    },
    {
        "content": "<p>You could use <code>fin.last</code> instead</p>",
        "id": 168589164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561032260
    },
    {
        "content": "<p>If you were doing this from scratch, you would be proving i-1 &lt; 3 given i &lt; 3. There are theorems in data.nat.basic to help with this</p>",
        "id": 168589276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561032379
    },
    {
        "content": "<p>alternatively, you can skip the proof and just handle the possibility of error using <code>nth</code></p>",
        "id": 168589294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561032413
    },
    {
        "content": "<p>I'm kinda surprised that <code>forall (n m k: nat), n &lt; m -&gt; n-k &lt; m</code> isn't already in mathlib.</p>",
        "id": 168589705,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561032882
    },
    {
        "content": "<p>it's just the composition of lt_of_le_of_lt and sub_le</p>",
        "id": 168590997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561034194
    },
    {
        "content": "<p>That said, I think we should add it. Finding these lemmas is excruciating for beginners (who haven't even learnt that you can in principle guess the names of most basic facts, let alone learnt how to do it).</p>",
        "id": 168641043,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561070741
    },
    {
        "content": "<p>How bad is the downside of swamping Lean with these sort of \"composition of two lemmas\" lemmas?</p>",
        "id": 168641134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561070832
    },
    {
        "content": "<p>there is a combinatorial explosion</p>",
        "id": 168641154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561070869
    },
    {
        "content": "<p>it's not even clear which compositions are the most common</p>",
        "id": 168641198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561070893
    },
    {
        "content": "<p>and we don't even have the complete set of basic lemmas</p>",
        "id": 168641218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561070913
    },
    {
        "content": "<p>I would rather put more smarts into <code>library_search</code>type provers than flood the library with random facts</p>",
        "id": 168641245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561070962
    },
    {
        "content": "<p>/me needs to get back to <code>back</code></p>",
        "id": 168643353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561073233
    },
    {
        "content": "<p>There need not be a combinatorial explosion, nor does the naming convention have to be so baroque.</p>\n<p>It appears to me that Lean is using a flat namespace.  The naming convention makes it really hard to guess what you need.</p>\n<p>Farmer and Carette (McMaster U.) have the notion of \"tiny theories\" which intrioduce a single axiom or a single signature. These can be combined to form larger objects which inherit the axioms and signatures. So, for instance, there would be a \"commutative\" axiom which can be inherited everywhere it makes sense.</p>\n<p>This hierarchical organization enables re-use of axioms and signatures and allows the same name to occur in different paths in the inheritance graph.</p>",
        "id": 168646368,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561077313
    },
    {
        "content": "<p>Lean has namespaces, which are used to label the major components in the theorem, or the broad area in which it lives</p>",
        "id": 168646462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561077454
    },
    {
        "content": "<p>The naming convention is designed to be easy to guess based on the statement, so you can think of a statement that you think is true and then search for the corresponding name. I'm curious how you would propose to improve on that scheme</p>",
        "id": 168646544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561077541
    },
    {
        "content": "<p>The number of theorems does increase exponentially as the depth increases. If there are n theorems, then there are O(n^2) ways to compose two of them, O(n^3) ways to compose three, and so on. Even 2n theorems is a major increase; n^2 is totally intractable</p>",
        "id": 168646671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561077686
    },
    {
        "content": "<p>Namespaces don't implement an inheritance graph in any generality. You'd like to state the commutative axiom in one place in the graph and have it available whereever it is used.  What you really want is genreal \"name polymorphism\" so that the name 'factor' can have different semantics in different contexts. Using 'dotted namespace notation' forces the user to manage the namespace. This doesn't scale.</p>",
        "id": 168646829,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561077859
    },
    {
        "content": "<p>Well... only a fraction of those n^2 theorems actually make sense. I wish I had a better sense of what that fraction was. I guess this could be automated. :-)</p>",
        "id": 168646851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561077911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223495\">@Tim Daly</span>, of course Lean does state the commutative axiom only once.</p>",
        "id": 168646874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561077952
    },
    {
        "content": "<p>(Okay, twice, once for \"additive\" structures and once for \"multiplicative\", which is lame, but still, it's only 2. :-)</p>",
        "id": 168646924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561077976
    },
    {
        "content": "<p>How does Lean handle a Lie algebra? Lie groups are skew-symmetric and they are non-associative. So</p>\n<p>x*y = -y * x and</p>\n<p>x * (y  * z) = (x * y) * z + y * (x * z)</p>\n<p>Do you have to \"built it from nothing\" using an odd naming convention for things like \"algebra.lie.cross_product_skew_symmetric.\"?</p>\n<p>Axiom, which uses something similar to Farmer/Carette \"tiny theories\" has 10,000 functions but a much smaller set of names.</p>",
        "id": 168647408,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561078701
    },
    {
        "content": "<p>As far as I'm aware no one has done anything on Lie algebras yet.</p>",
        "id": 168647526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561078918
    },
    {
        "content": "<p>We would normally use some naming convention based on the symbols in the axiom, but for core laws that have names we have a small set of name segments to describe the law. We've not dealt with these laws before, so I guess they would require a new terminology; I would use something like <code>lie_algebra.mul_anticomm</code> and <code>lie_algebra.jacobi</code> for these</p>",
        "id": 168647779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561079287
    },
    {
        "content": "<p>You should take a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md</a></p>",
        "id": 168647854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561079417
    },
    {
        "content": "<p>I wonder, actually, if we'd even want to use <code>mul</code> for a Lie algebra. It's true that it distributes over addition just as a \"normal\" multiplication does, but otherwise has little in common.</p>",
        "id": 168647855,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561079420
    },
    {
        "content": "<p>This places the burden of finding multiplication in an algebra on the user's ability to infer names. Polymorphic names could be disambiguated by a prolog-like match algorithm. The naming convention \"is what it is\", of course.  But it seems to me that I have to read the original sources and \"internalize\" the names in my mind, which is a very small place.</p>",
        "id": 168648328,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561080189
    },
    {
        "content": "<p>I'm not sure what problem you are trying to solve. There are multiple theorems with the same name in different namespaces, and we take care to have them be the same or clearly analogous</p>",
        "id": 168648394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561080274
    },
    {
        "content": "<p>If you have multiple theorems with the same name in scope (because you have opened multiple namespaces), it will disambiguate them based on the type</p>",
        "id": 168648474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561080387
    },
    {
        "content": "<p>isn't this tiny theory system the type class inference system in disguise?</p>",
        "id": 168648560,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561080549
    },
    {
        "content": "<p>Namespaces are a kind of type in that case. If they were all \"in scope\" then there is no need for namespaces?</p>",
        "id": 168648564,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561080569
    },
    {
        "content": "<p>specifically the often linked \"unbundled type classes\" section here: <a href=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\" target=\"_blank\" title=\"https://github.com/leanprover/lean/wiki/Refactoring-structures\">https://github.com/leanprover/lean/wiki/Refactoring-structures</a></p>",
        "id": 168648615,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1561080613
    },
    {
        "content": "<p>well no, namespaces are separate from types. The type system is DTT, the namespace system is just names and overloading</p>",
        "id": 168648616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561080621
    },
    {
        "content": "<p>Disguise? It is the type class inference problem.</p>",
        "id": 168648617,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561080621
    },
    {
        "content": "<p>I admit ignorance of the full details. Further study on my part is needed.</p>",
        "id": 168648639,
        "sender_full_name": "Tim Daly",
        "timestamp": 1561080677
    },
    {
        "content": "<p>You can always refer to a theorem by its full name if the file that defines it has been imported. Opening a namespace just makes the name a bit shorter to reference</p>",
        "id": 168648694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561080737
    },
    {
        "content": "<p>Btw, when Lean 4 comes out one day, what will happen to mathlib?</p>",
        "id": 168653056,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561088113
    },
    {
        "content": "<p>Lean 4 is already \"out\", but not production ready. When it is solid we will start working on a port</p>",
        "id": 168653498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561088925
    },
    {
        "content": "<p>there isn't much point working on it at scale yet because it's too unstable and unfinished, although testing out a single file might be worthwhile</p>",
        "id": 168653519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561088985
    },
    {
        "content": "<p>I see, then when it's stable enough, how much manual work is needed to update mathlib?</p>",
        "id": 168653626,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561089127
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 168653653,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561089205
    },
    {
        "content": "<p>somewhere between \"a significant endeavor\" and \"a total overhaul\"</p>",
        "id": 168653654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561089206
    },
    {
        "content": "<p>If we can get any refactoring tools in lean 3.5c then it may make this a lot easier. There is a lot of silly busywork like changing the naming convention</p>",
        "id": 168653715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561089291
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>variable n : ℕ\ndef vec_exp1 (i : fin n) (x : vector ℕ n) (y : vector ℕ n) : ℕ :=\n    (x.nth i)^(y.nth i)\ndef vec_exp2 (x : vector ℕ n) (y : vector ℕ n) : vector ℕ n :=\n    ⟨(list.range n).map (λ i, vec_exp1 i x y), by simp⟩\n</pre></div>",
        "id": 168666562,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561108341
    },
    {
        "content": "<p>I am trying to compute the entry-wise exponential of two n-vector. but the last line has error: the term x has type vector N n but is expected to have type fin i. what is wrong??</p>",
        "id": 168666608,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561108438
    },
    {
        "content": "<p>btw if i change n to 3, it works</p>",
        "id": 168666669,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561108484
    },
    {
        "content": "<p>the variable <code>n : N</code> is getting added to <code>vec_exp1</code>, so it actually takes four arguments</p>",
        "id": 168666781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561108642
    },
    {
        "content": "<p>you should make it implicit by writing it in braces</p>",
        "id": 168666785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561108655
    },
    {
        "content": "<p>ah i see! but now I'm getting another error in the last line: vec_exp1 i, the term i has type \\N but is expected to have type fin ?m_1. how can I fix it?</p>",
        "id": 168667135,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561109097
    },
    {
        "content": "<p>If you hover over <code>vec_exp1</code> you can see it has type <code>vec_exp1 : Π {n : ℕ}, fin n → vector ℕ n → vector ℕ n → ℕ</code>. So it wants an input of type <code>fin n</code> and an input of type <code>vector ℕ n</code>. If you hover over <code>i</code> you see it has type <code>ℕ</code>. So now you can understand the error. How to fix it -- make the types correct ;-) Do you have a more specific question?</p>",
        "id": 168668282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561110522
    },
    {
        "content": "<p>Do you understand how to interpret <code>(list.range n).map</code>? Hover over <code>list.range</code>  to see it has type <code>ℕ → list ℕ</code>. So <code>list.range n</code> has type <code>list ℕ</code>. Now this clever <code>l.map</code> thing means <code>list.map l</code> and doing <code>#check list.map</code> you can see the type of that too. You can just unravel everything. Your code doesn't work because when you unravel it it doesn't make sense.</p>",
        "id": 168668574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561110882
    },
    {
        "content": "<p>Figuring out yourself what you want to do and then the types of the functions you want which will do them is a really good exercise for Lean beginners. It gets you thinking in the \"functional programming\" way.</p>",
        "id": 168668701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561111024
    },
    {
        "content": "<p>I think you would be better off using <code>vector.map</code> than <code>list.map</code> because you're dealing with vectors. I see there is no <code>vector.range</code> though. It would be a good exercise to define <code>vector.range</code> first. Its type should be this:</p>\n<p><code>def vector.range : Π (n : ℕ), vector ℕ n := sorry</code></p>",
        "id": 168668956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561111297
    },
    {
        "content": "<blockquote>\n<p>If you hover over <code>vec_exp1</code> you can see it has type <code>vec_exp1 : Π {n : ℕ}, fin n → vector ℕ n → vector ℕ n → ℕ</code>. So it wants an input of type <code>fin n</code> and an input of type <code>vector ℕ n</code>. If you hover over <code>i</code> you see it has type <code>ℕ</code>. So now you can understand the error. How to fix it -- make the types correct ;-) Do you have a more specific question?</p>\n</blockquote>\n<p>yeah, i understand the error but just don't know what how to make i of type fin n. Should I use something like <code>max i n</code>? Also, why does <code>#check max 3 4</code> works while <code>#eval max 3 4</code> don't?</p>",
        "id": 168670254,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561112921
    },
    {
        "content": "<blockquote>\n<p>I think you would be better off using <code>vector.map</code> than <code>list.map</code> because you're dealing with vectors. I see there is no <code>vector.range</code> though. It would be a good exercise to define <code>vector.range</code> first. Its type should be this:</p>\n<p><code>def vector.range : Π (n : ℕ), vector ℕ n := sorry</code></p>\n</blockquote>\n<p>OK! i will try...</p>",
        "id": 168670266,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561112942
    },
    {
        "content": "<p>Actually... why do you want to work with <code>vector</code>s?</p>",
        "id": 168670605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561113319
    },
    {
        "content": "<p>That's the annoying thing: you have to choose a data representation.</p>",
        "id": 168670613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561113335
    },
    {
        "content": "<p>It could be <code>list</code>, or <code>vector</code> or maps from <code>fin n</code>.</p>",
        "id": 168670617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561113352
    },
    {
        "content": "<p>Possibly other choices.</p>",
        "id": 168670620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561113359
    },
    {
        "content": "<p>What is the end goal?</p>",
        "id": 168670630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561113363
    },
    {
        "content": "<p>\"Just goofing around\" <em>is</em> a valid answer, in which case using <code>vector</code>s is totally fine.</p>",
        "id": 168670670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561113390
    },
    {
        "content": "<blockquote>\n<p>What is the end goal?</p>\n</blockquote>\n<p>The goal is simply to have an n-tuple of numbers. Now you mention it, fin n \\to \\N does sounds a lot more simplier. I will use this....</p>",
        "id": 168671100,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561113966
    },
    {
        "content": "<blockquote>\n<p><code>fin n → ℕ</code> does sounds a lot more simplier.</p>\n</blockquote>\n<p>Depends...</p>",
        "id": 168672315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561115477
    },
    {
        "content": "<p>If you want to write down an explicit 5-tuple, I guess <code>vector</code> is easier.</p>",
        "id": 168672339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561115509
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>fin n → ℕ</code> does sounds a lot more simplier.</p>\n</blockquote>\n<p>Depends...</p>\n</blockquote>\n<p>say now i have  <code>f:fin n → ℕ</code> and want to calculate f(1)+...+f(n). do I have to convert f  to a vector and use <code>.tolist_sum</code> ? or is there a more direct way?</p>",
        "id": 168675134,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561118520
    },
    {
        "content": "<p>Try <code>finset.univ.sum</code>.</p>",
        "id": 168676828,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1561120184
    },
    {
        "content": "<p>i know that int.gcd can find the gcd of two numbers. how about finding the gcd of n numbers? what is the best way?</p>",
        "id": 168684121,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561125759
    },
    {
        "content": "<p>since gcd is an associative function, you can foldr or foldl over the collection of numbers</p>",
        "id": 168684813,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561126361
    },
    {
        "content": "<blockquote>\n<p>yeah, i understand the error but just don't know what how to make i of type fin n. Should I use something like <code>max i n</code>?</p>\n</blockquote>\n<p>Do you understand how to make a term of type <code>fin n</code>? By definition, a term of type <code>fin n</code> is a pair, consisting of a natural number <code>i</code> and a proof that <code>i &lt; n</code>. In your function you seem to have a random natural number <code>i</code> with no conditions at all, so it will be impossible to prove that <code>i &lt; n</code>. That was why I was encouraging you to step back a bit and think about the functions you're using and what you're doing.</p>\n<blockquote>\n<p>Also, why does <code>#check max 3 4</code> works while <code>#eval max 3 4</code> don't?</p>\n</blockquote>\n<p><code>#eval max 3 4</code> works for me. Can you post a MWE?</p>",
        "id": 168688556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561129199
    },
    {
        "content": "<p>What does MWE stand for? lol</p>",
        "id": 168689946,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561130279
    },
    {
        "content": "<p>And the error message for <code>#eval max 3 4</code> is \"code generation failed, VM does not have code for lattice.lattice.conditionally_complete_linear_order_bot'\"</p>",
        "id": 168690011,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561130303
    },
    {
        "content": "<p>Minimal working example. I type <code>#eval max 3 4</code> and it worked fine. I was wondering exactly what you did. A MWE is something you can cut and paste so I can see the error you're seeing. Currently I can't do that becaue you're only posting the line which gave the error.</p>",
        "id": 168690036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561130327
    },
    {
        "content": "<p>Oh, I figured it out. It is because I imported ring_theory.principal_ideal_domain</p>",
        "id": 168690588,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561130839
    },
    {
        "content": "<p>given positive integers a and b how can we prove that the sum of a b's is ab?</p>",
        "id": 168697094,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561135786
    },
    {
        "content": "<p>How are you defining the sum of <code>a</code> <code>b</code>'s? The devil is in the detail for this one.</p>",
        "id": 168697161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561135807
    },
    {
        "content": "<p>And why do you want to prove it?</p>",
        "id": 168697177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561135825
    },
    {
        "content": "<p>You might decide the definition of <code>a * b</code> already answers your question</p>",
        "id": 168697472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561136033
    },
    {
        "content": "<p>Or possibly <code>b * a</code></p>",
        "id": 168697479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561136038
    },
    {
        "content": "<blockquote>\n<p>How are you defining the sum of <code>a</code> <code>b</code>'s? The devil is in the detail for this one.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I'm using <code>finset.univ.sum (λ i : fin a, b)</code></p>",
        "id": 168697546,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561136070
    },
    {
        "content": "<blockquote>\n<p>And why do you want to prove it?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <br>\nThis is a crucial lemma in a theorem I wanna prove. Specifically, I need to prove that given positive integers b, c, the sum of b (b^c)'s is b^(c+1)</p>",
        "id": 168697685,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561136184
    },
    {
        "content": "<p>Well this statement still has the phrase \"the sum of <code>x</code> <code>y</code>s\" in it so I could ask the same question again</p>",
        "id": 168697749,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561136245
    },
    {
        "content": "<p>We all know the sum of X Ys is X * Y, so why not just formalize the statement using *</p>",
        "id": 168697893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561136357
    },
    {
        "content": "<blockquote>\n<p>Well this statement still has the phrase \"the sum of <code>x</code> <code>y</code>s\" in it so I could ask the same question again</p>\n</blockquote>\n<p>I need to show <code>finset.univ.sum (λ i : fin a, b)=a*b</code></p>",
        "id": 168697904,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561136367
    },
    {
        "content": "<p>OK, that's a statement that we should be able to prove</p>",
        "id": 168697933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561136399
    },
    {
        "content": "<p>I feel like this should be in the library. Is it <code>sum_const</code> or something? <em>shrug</em></p>",
        "id": 168698356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561136736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218709\">@Adrian Chu</span> I would be tempted to find where <code>finset.sum</code> is defined in mathlib (just right click on it in VS Code and go to the definition) and take a look at the next 50 lemmas after its definition, to see if there is anything useful there.</p>",
        "id": 168698422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561136794
    },
    {
        "content": "<p>I found this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">sum_const</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">ι</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n  <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_equiv_prod</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span>\n</pre></div>\n\n\n<p>in set theory/cardinal</p>",
        "id": 168698549,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561136903
    },
    {
        "content": "<p>That's the wrong kind of sum. This is exactly why the devil is in the detail.</p>",
        "id": 168698817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561137167
    },
    {
        "content": "<p>Was there nothing near finset.sum?</p>",
        "id": 168698905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561137272
    },
    {
        "content": "<p>I can't see what I want (possibly due to my own ignorance)</p>",
        "id": 168699318,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561137682
    },
    {
        "content": "<p>Ok I'll take a look.</p>",
        "id": 168699536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561137848
    },
    {
        "content": "<p>It is indeed <code>finset.sum_const</code></p>",
        "id": 168699569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561137896
    },
    {
        "content": "<p>You could have just tried <code>#check finset.sum_const</code></p>",
        "id": 168699609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561137926
    },
    {
        "content": "<p>Aah, I bet you didn't have the right import.</p>",
        "id": 168700280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561138538
    },
    {
        "content": "<p><code>import algebra.big_operators</code></p>",
        "id": 168700339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561138565
    },
    {
        "content": "<p>Yeah, I don't know how to search for it if you don't have the right import. It would be nice if it was easy just to import everything temporarily.</p>",
        "id": 168700370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561138607
    },
    {
        "content": "<p>Oh wait, but you need that import for <code>finset.sum</code>...</p>",
        "id": 168700416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561138644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"err\">$</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_univ</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_id</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 168701698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561139550
    },
    {
        "content": "<p>That's the way (or you can use simp instead of the last couple of things, I should think)</p>",
        "id": 168702954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561140644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_univ</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 168703000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561140678
    },
    {
        "content": "<p>Thanks guys!</p>",
        "id": 168736064,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561178948
    },
    {
        "content": "<p>What command should I use to define a function f(x) from N to N with two cases, namely x &gt;= some fixed n and x &lt; n?</p>",
        "id": 168741659,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561190512
    },
    {
        "content": "<p>Lean has <code>if ... then ... else</code></p>",
        "id": 168741707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561190537
    },
    {
        "content": "<p>The tactic you need to know to introduce it is <code>split_ifs</code>.</p>",
        "id": 168741737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561190589
    },
    {
        "content": "<p><code>if...then...else</code> is harder to use than you might think, because Lean will by default refuse to do a case split on a condition unless it knows an algorithm for deciding whether the condition is true or not. In your case this should be no trouble.</p>",
        "id": 168741787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561190649
    },
    {
        "content": "<p>given a function f : fin n -&gt; N, how can I extend it to N -&gt; N by defining it to be zero when the input is &gt;= n ?</p>",
        "id": 168742140,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561191311
    },
    {
        "content": "<p><code>if h : x &lt; n then f &lt;x, h&gt; else 0</code></p>",
        "id": 168742185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561191376
    },
    {
        "content": "<p>You shouldn't think of <code>fin n</code> as some sort of subset of nat. There's a map from <code>fin n</code> to nat which forgets part of the structure. From your recent questions you seen to think that a term of type <code>fin n</code> is a nat. It's not -- it's a pair.</p>",
        "id": 168745111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561197710
    },
    {
        "content": "<blockquote>\n<p>You shouldn't think of <code>fin n</code> as some sort of subset of nat. There's a map from <code>fin n</code> to nat which forgets part of the structure. From your recent questions you seen to think that a term of type <code>fin n</code> is a nat. It's not -- it's a pair.</p>\n</blockquote>\n<p>ya, i know, i just didn't know that we can directly write <code>if h : x &lt; n</code> instead of <code>if x&lt;n</code></p>",
        "id": 168745330,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561198189
    },
    {
        "content": "<p>What is the correct syntax to define such a function <code>def f (x : ℕ) : ℕ := if x &lt; 10 then x else f (x-3)</code> recursively? (since I don't want to use mod for some other reason)</p>",
        "id": 168745519,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561198467
    },
    {
        "content": "<p>You will have to prove, somehow, that your function is well-defined. One thing you could do is just use the equation compiler, but that would stink a bit in this situation. You could define f zero = 0, f 1 = 1, ..., and then f (n+10) to be f(n+7). That might work.</p>",
        "id": 168747175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561201897
    },
    {
        "content": "<p>you only have to go up to n+3</p>",
        "id": 168747238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561202010
    },
    {
        "content": "<p>I'm not so sure it's as easy as that, because f(7) is not f(4)</p>",
        "id": 168747242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561202036
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 168747297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561202097
    },
    {
        "content": "<p>Nice!</p>",
        "id": 168747306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561202113
    },
    {
        "content": "<p>it still has 4 cases though</p>",
        "id": 168747308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561202128
    },
    {
        "content": "<p>I have never had to push the equation compiler to its limits, so I don't really know these tricks.</p>",
        "id": 168747312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561202142
    },
    {
        "content": "<p>try replacing <code>3</code> with <code>100</code></p>",
        "id": 168747357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561202173
    },
    {
        "content": "<p>I see... Thanks.</p>",
        "id": 168748314,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561204088
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n</blockquote>\n<p>But can someone please explain a bit what does this means?</p>",
        "id": 168748654,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561204792
    },
    {
        "content": "<p>Have you read the section about the equation compiler in TPIL?</p>",
        "id": 168748701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561204817
    },
    {
        "content": "<p>It says \"if x = y + 3 for some other nat y then do the first thing, else do the second thing\"</p>",
        "id": 168748716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561204857
    },
    {
        "content": "<p>well not yet. you are right, i should read it first :)</p>",
        "id": 168748785,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561204991
    },
    {
        "content": "<p>Now i have read the relevant sections in TPIL. But I still got a problem: How can I check the well foundedness of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 168754082,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561215509
    },
    {
        "content": "<p>Some hints are here: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a></p>",
        "id": 168756726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561220565
    },
    {
        "content": "<p>I had a go at this <a href=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20data.prod%0A%2F-%0Aset_option%20pp.all%20true%0A-%2F%0A%0Adef%20f%20%3A%20%E2%84%95%20%C3%97%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%C3%97%20%E2%84%95%0A%7C%20%28y%2B3%2C%20z%2B3%29%20%3A%3D%20have%20h%20%3A%20%28y%2C%20z%29.lex%20%28%3C%29%20%28%3C%29%20%28y%2B3%2C%20z%2B3%29%20%3A%3D%20begin%0A%20%20simp%20%5Bprod.lex_def%5D%2C%0A%20%20have%20hy%20%3A%20y%20%3C%20y%20%2B%203%20%3A%3D%20nat.lt_add_of_pos_right%20%28dec_trivial%29%2C%0A%20%20exact%20or.inl%20hy%2C%0Aend%2C%0A%20%20if%20%28%28y%2B3%29%20%3C%2010%29%20%E2%88%A7%20%28%28z%2B3%29%20%3C%2010%29%20then%0A%20%20%20%20%28y%2B3%2C%20z%2B3%29%20else%20f%20%28y%2C%20z%29%0A%7C%20%28y%2C%20z%29%20%3A%3D%20%28y%2C%20z%29%0A%0Adef%20f_curry%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%C3%97%20%E2%84%95%0A%7C%20%28y%2B3%29%20%28z%2B3%29%20%3A%3D%20if%20%28%28y%2B3%29%20%3C%2010%29%20%E2%88%A7%20%28%28z%2B3%29%20%3C%2010%29%20then%0A%20%20%20%20%28y%2B3%2C%20z%2B3%29%20else%20f_curry%20y%20z%0A%7C%20y%20z%20%3A%3D%20%28y%2C%20z%29%0A%0Adef%20f'%20%28p%20%3A%20%E2%84%95%20%C3%97%20%E2%84%95%29%20%3A%20%E2%84%95%20%C3%97%20%E2%84%95%20%3A%3D%20f_curry%20p.1%20p.2\" target=\"_blank\" title=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=import%20data.prod%0A%2F-%0Aset_option%20pp.all%20true%0A-%2F%0A%0Adef%20f%20%3A%20%E2%84%95%20%C3%97%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%C3%97%20%E2%84%95%0A%7C%20%28y%2B3%2C%20z%2B3%29%20%3A%3D%20have%20h%20%3A%20%28y%2C%20z%29.lex%20%28%3C%29%20%28%3C%29%20%28y%2B3%2C%20z%2B3%29%20%3A%3D%20begin%0A%20%20simp%20%5Bprod.lex_def%5D%2C%0A%20%20have%20hy%20%3A%20y%20%3C%20y%20%2B%203%20%3A%3D%20nat.lt_add_of_pos_right%20%28dec_trivial%29%2C%0A%20%20exact%20or.inl%20hy%2C%0Aend%2C%0A%20%20if%20%28%28y%2B3%29%20%3C%2010%29%20%E2%88%A7%20%28%28z%2B3%29%20%3C%2010%29%20then%0A%20%20%20%20%28y%2B3%2C%20z%2B3%29%20else%20f%20%28y%2C%20z%29%0A%7C%20%28y%2C%20z%29%20%3A%3D%20%28y%2C%20z%29%0A%0Adef%20f_curry%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%C3%97%20%E2%84%95%0A%7C%20%28y%2B3%29%20%28z%2B3%29%20%3A%3D%20if%20%28%28y%2B3%29%20%3C%2010%29%20%E2%88%A7%20%28%28z%2B3%29%20%3C%2010%29%20then%0A%20%20%20%20%28y%2B3%2C%20z%2B3%29%20else%20f_curry%20y%20z%0A%7C%20y%20z%20%3A%3D%20%28y%2C%20z%29%0A%0Adef%20f'%20%28p%20%3A%20%E2%84%95%20%C3%97%20%E2%84%95%29%20%3A%20%E2%84%95%20%C3%97%20%E2%84%95%20%3A%3D%20f_curry%20p.1%20p.2\">here (web editor link)</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">set_option pp.all true</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex_def</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_of_pos_right</span> <span class=\"o\">(</span><span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"c1\">-- error here, see below</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>However, I'm not able to satisfy the equation compiler either:</p>\n<div class=\"codehilite\"><pre><span></span>failed to prove recursive application is decreasing, well founded relation\n  @has_well_founded.r (ℕ × ℕ)\n    (@prod.has_well_founded ℕ ℕ (@has_well_founded_of_has_sizeof ℕ nat.has_sizeof)\n       (@has_well_founded_of_has_sizeof ℕ nat.has_sizeof))\nPossible solutions:\n  - Use &#39;using_well_founded&#39; keyword in the end of your definition to specify tactics for synthesizing well founded relations and decreasing proofs.\n  - The default decreasing tactic uses the &#39;assumption&#39; tactic, thus hints (aka local proofs) can be provided using &#39;have&#39;-expressions.\nThe nested exception contains the failure state for the decreasing tactic.\nnested exception message:\nmatch failed\nstate:\nf : ℕ × ℕ → ℕ × ℕ,\ny z : ℕ,\nh : prod.lex has_lt.lt has_lt.lt (y, z) (y + 3, z + 3)\n⊢ prod.lex has_lt.lt has_lt.lt (y, z) (y + 3, z + 3)\n</pre></div>\n\n\n<p>(Isn't <code>h</code> the same thing as the goal? Using <code>pp.all true</code> doesn't reveal any differences either)</p>\n<p>I think it's easier to define <code>f</code> by working with the curried version, like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f_curry</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">f_curry</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f_curry</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 168774276,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561256377
    },
    {
        "content": "<p>I think, from the trajectory of the questions, that <span class=\"user-mention\" data-user-id=\"218709\">@Adrian Chu</span> wants to know how to do general recursions, rather than breaking them down into structural recursions. It looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n  <span class=\"k\">have</span> <span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>You have to give a proof that <code>(x - 3, y - 3) &lt; (x, y)</code> according to some well founded relation. The default one here is lexicographic order on the natural numbers, which works in this case but may need to be replaced with something else in other examples</p>",
        "id": 168774487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561256812
    },
    {
        "content": "<p>I see.. I didn't know we have `[assumption]</p>",
        "id": 168776942,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561262246
    },
    {
        "content": "<p>I am trying to prove the following variant of Bazout lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>As pointed before, we can use <code>gcd_a</code> and <code>gcd_b</code></p>",
        "id": 168776998,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561262353
    },
    {
        "content": "<p>but the trouble is gcd_a, gcd_b can be negative</p>",
        "id": 168777157,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561262691
    },
    {
        "content": "<p>so my plan is to keep adding multiples of a*b to <code>-gcd_a a b</code> and <code>gcd_b a b</code> repsectively until they are both &gt;= 0</p>",
        "id": 168777167,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561262728
    },
    {
        "content": "<p>But I run into 2 problems. First, (as an example,) given a recursive function like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span>  <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>how can we show that f x &lt; 10 for all x ?</p>",
        "id": 168777217,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561262825
    },
    {
        "content": "<p>second, given a function f from Z to Z and a proof that f x &gt;=0 for all x, how can we define a new function F from Z to N using f?</p>",
        "id": 168777283,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561262979
    },
    {
        "content": "<p>Rather than \"repeatedly adding multiples of a*b\", just add <code>k*a*b</code> for some k. This avoids all the mess of determining any well founded recursion, but it leaves the question - what is k?</p>",
        "id": 168778028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561264530
    },
    {
        "content": "<p>Also <code>baz</code> is really obviously false when <code>a = b = 0</code></p>",
        "id": 168778068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561264570
    },
    {
        "content": "<p>or more generally when they aren't coprime</p>",
        "id": 168778069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561264588
    },
    {
        "content": "<blockquote>\n<p>Also <code>baz</code> is really obviously false when <code>a = b = 0</code></p>\n</blockquote>\n<p>oops, I carelessly left out the coprime condition. now fixed</p>",
        "id": 168778286,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561265047
    },
    {
        "content": "<p>If a and b are both nonzero, then <code>a*b</code> is also nonzero, so it is at least 1 and hence <code>k*a*b</code> is at least k. So you can pick k to be <code>gcd_a a b</code> and then <code>k*a*b - gcd_a a b</code> will be nonnegative</p>",
        "id": 168778336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561265164
    },
    {
        "content": "<blockquote>\n<p>Rather than \"repeatedly adding multiples of a*b\", just add <code>k*a*b</code> for some k. This avoids all the mess of determining any well founded recursion, but it leaves the question - what is k?</p>\n</blockquote>\n<p>Yes, I have thought of that, we can choose <code>k=max (nat_abs (nat.gcd_a x y)) (nat_abs (nat.gcd_b x y))</code></p>",
        "id": 168778404,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561265352
    },
    {
        "content": "<p>yes yours is simpler!</p>",
        "id": 168778408,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561265389
    },
    {
        "content": "<p>You can use either <code>to_nat</code> or <code>nat_abs</code> to turn a nonnegative int into a nat</p>",
        "id": 168778449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561265413
    },
    {
        "content": "<p>ok, let me try now</p>",
        "id": 168778503,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561265573
    },
    {
        "content": "<blockquote>\n<p>If a and b are both nonzero, then <code>a*b</code> is also nonzero, so it is at least 1 and hence <code>k*a*b</code> is at least k. So you can pick k to be <code>gcd_a a b</code> and then <code>k*a*b - gcd_a a b</code> will be nonnegative</p>\n</blockquote>\n<p>i was mistaken. we should add <code>k*b</code> to <code>-gcd_a a b</code> and add <code>k*a</code> to <code>gcd_b a b</code></p>",
        "id": 168778787,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561266124
    },
    {
        "content": "<p>and take <code>k = max (nat_abs (nat.gcd_a a b)) (nat_abs (nat.gcd_b a b))</code></p>",
        "id": 168778857,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561266289
    },
    {
        "content": "<p>May I ask how to prove<br>\n<code>theorem test (a : ℤ) (ha : a &gt;= 0) : a = nat_abs a</code> ?</p>",
        "id": 168790463,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561289165
    },
    {
        "content": "<p>Does cases on a work?</p>",
        "id": 168790473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561289202
    },
    {
        "content": "<p>Alternatively just use library_search.</p>",
        "id": 168790476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561289214
    },
    {
        "content": "<p>You might want to import data.int.basic before you search</p>",
        "id": 168790483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561289225
    },
    {
        "content": "<p>Here's where I'm up to: <a href=\"https://github.com/kbuzzard/xena/blob/cd8e0de23adf8c0e7c56d39f1b6f5a55d93bf6ef/Examples/mario_glueing.lean#L144\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/cd8e0de23adf8c0e7c56d39f1b6f5a55d93bf6ef/Examples/mario_glueing.lean#L144\">https://github.com/kbuzzard/xena/blob/cd8e0de23adf8c0e7c56d39f1b6f5a55d93bf6ef/Examples/mario_glueing.lean#L144</a></p>",
        "id": 168790548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561289309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">int</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 168792098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561292268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat_abs_of_nonneg</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 168792143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561292334
    },
    {
        "content": "<p>Ah, so we already have this theorem. Thanks</p>",
        "id": 168795776,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561299761
    },
    {
        "content": "<p>I am proving using <code>calc</code>, the first and last expression has type <code>nat</code> but some of the intermediate steps have type <code>int</code></p>",
        "id": 168796607,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561301406
    },
    {
        "content": "<p>apply <code>int.coe_nat_inj</code></p>",
        "id": 168796623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561301460
    },
    {
        "content": "<p>which hence give type mismatch error</p>",
        "id": 168796624,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561301460
    },
    {
        "content": "<p>before starting the calc block</p>",
        "id": 168796632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561301473
    },
    {
        "content": "<p>can someone kindly write a simple example to illustrate how a proof involving <code>int.coe_nat_inj</code> and <code>calc</code>  should look like? since I can't find this in mathlib</p>",
        "id": 168797693,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561303666
    },
    {
        "content": "<p>you can't find the theorem?</p>",
        "id": 168798063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561304455
    },
    {
        "content": "<p>show me your proof and I'll fix it</p>",
        "id": 168798070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561304481
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span> <span class=\"err\">$</span> <span class=\"k\">calc</span>\n   <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">h2</span>\n</pre></div>",
        "id": 168798166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561304693
    },
    {
        "content": "<p>wow thanks.</p>",
        "id": 168798244,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561304878
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168798285,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561304895
    },
    {
        "content": "<p>bit by bit, I'm first dealing with the last <code>sorry</code>. do you think i should use <code>int.coe_nat_inj</code> here?</p>",
        "id": 168798287,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561304931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hx</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hy</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168798403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561305173
    },
    {
        "content": "<p>thx, i'll keep working on it</p>",
        "id": 168798581,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561305566
    },
    {
        "content": "<p>what should replace <code>sorry</code> in this step? +_+ why doesn't <code>left_distrib</code> works?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 168799229,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561306852
    },
    {
        "content": "<p>it's not just <code>left_distrib</code>, you also associated + and distributed <code>-</code> over <code>*</code></p>",
        "id": 168799239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561306918
    },
    {
        "content": "<p><code>simp [mul_add]</code> should do it</p>",
        "id": 168799278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561306931
    },
    {
        "content": "<p><code>by simp [mul_add]</code> doesnt work...</p>",
        "id": 168799286,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561306998
    },
    {
        "content": "<p>look at what you get, and add theorems that make them look more alike</p>",
        "id": 168799337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561307079
    },
    {
        "content": "<p>i need <code>mul_assoc</code> !!</p>",
        "id": 168799451,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561307294
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168822645,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561352720
    },
    {
        "content": "<p>I have trouble to finish the last sorry (on the 5th last line)</p>",
        "id": 168822703,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561352790
    },
    {
        "content": "<p>I know that i should use <code>gcd_eq_gcd_ab</code>, but type problems  of Z and N keep coming up, and I don't know how to use  ↑ correctly</p>",
        "id": 168822720,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561352850
    },
    {
        "content": "<p>make sure to bracket things correctly so that the work is isolated</p>",
        "id": 168825903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561358045
    },
    {
        "content": "<p>when you write <code>a+b+c+d</code> that gets associated as <code>((a+b)+c)+d</code>, so you are mixing different concerns</p>",
        "id": 168825930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561358094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_eq_gcd_ab</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168825960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561358161
    },
    {
        "content": "<p>nope, this doesnt work, it has error message :</p>\n<p>rewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  gcd ?m_4 ?m_5<br>\nstate:<br>\na b : ℕ,<br>\nh : nat.gcd a b = 1,<br>\nk : ℕ := max (nat_abs (gcd_a ↑a ↑b)) (nat_abs (gcd_b ↑a ↑b)),<br>\nx : ℤ := -nat.gcd_a a b + ↑b * ↑k,<br>\ny : ℤ := nat.gcd_b a b + ↑a * ↑k,<br>\nhx : x = ↑(nat_abs x),<br>\nhy : y = ↑(nat_abs y)<br>\n⊢ -↑a * nat.gcd_a a b + ↑(nat.gcd a b) + ↑a * ↑b * ↑k =<br>\n    -↑a * nat.gcd_a a b + (↑a * nat.gcd_a a b + ↑b * nat.gcd_b a b) + ↑a * ↑b * ↑k<br>\nstate:<br>\na b : ℕ,<br>\nh : nat.gcd a b = 1,<br>\nk : ℕ := max (nat_abs (gcd_a ↑a ↑b)) (nat_abs (gcd_b ↑a ↑b)),<br>\nx : ℤ := -nat.gcd_a a b + ↑b * ↑k,<br>\ny : ℤ := nat.gcd_b a b + ↑a * ↑k,<br>\nhx : x = ↑(nat_abs x),<br>\nhy : y = ↑(nat_abs y)<br>\n⊢ ↑(a * nat_abs x + 1) = ↑(b * nat_abs y)</p>",
        "id": 168826122,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561358326
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_eq_gcd_ab</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168826782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561359171
    },
    {
        "content": "<p>it's not clear to me what you have open, but it seems to work with <code>nat</code> and <code>int</code> open</p>",
        "id": 168826864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561359268
    },
    {
        "content": "<p>maybe you have something else imported so that <code>gcd</code> means something else?</p>",
        "id": 168826877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561359309
    },
    {
        "content": "<p>I opened euclidean domain, thats why. but actually i don't need it. Thanks!</p>",
        "id": 168827791,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561360442
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">--simp [le_max_left]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"c1\">--simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>this time is about the 2nd and 3rd <code>sorry</code>. why dont those corresponding commands (which I commented above) work?</p>",
        "id": 168835461,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561369505
    },
    {
        "content": "<p>I insert my canonical remark. [It would be easier for people like me if you could just post fully working code. I need to open things, maybe import things, etc; can you do this part of the job for me please?].</p>",
        "id": 168841318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561375936
    },
    {
        "content": "<p>But the answer to your question might be that the first sorry won't work because <code>simp</code> is designed to prove equalities, not inequalities, and the second proof should probably be <code>rfl</code> because it looks to me like it's true by definition.</p>",
        "id": 168841441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561376065
    },
    {
        "content": "<p>All the simplifier does is that it proves things of the form X = Y by attempting to simplify both sides into a canonical form and then checking that they're true by definition. A simp lemma is of the form A = B, and if A is a sub-term in X then the simplifier will replace A by B; that's why simp lemmas should have (complicated) = (simpler) in that order.</p>",
        "id": 168841553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561376199
    },
    {
        "content": "<blockquote>\n<p>I insert my canonical remark. [It would be easier for people like me if you could just post fully working code. I need to open things, maybe import things, etc; can you do this part of the job for me please?].</p>\n</blockquote>\n<p>ok sure!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">--simp [le_max_left]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat_abs_of_nonneg</span> <span class=\"n\">hxx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_eq_gcd_ab</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168841913,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561376530
    },
    {
        "content": "<p>for the 3rd sorry, rfl doesnt work...</p>",
        "id": 168842049,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561376657
    },
    {
        "content": "<blockquote>\n<p>All the simplifier does is that it proves things of the form X = Y by attempting to simplify both sides into a canonical form and then checking that they're true by definition. A simp lemma is of the form A = B, and if A is a sub-term in X then the simplifier will replace A by B; that's why simp lemmas should have (complicated) = (simpler) in that order.</p>\n</blockquote>\n<p>ah, i see</p>",
        "id": 168842067,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561376686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>a=1 and b=0 is a counterexample to this. This is the problem with skipping stuff -- even if your later two sorries are fixed the code might be unusable anyway.</p>",
        "id": 168842238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561376845
    },
    {
        "content": "<p>no, we cant have a=1, b=0 because of the hypothesis h</p>",
        "id": 168842349,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561376957
    },
    {
        "content": "<p>1 and 0 are coprime</p>",
        "id": 168842361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561376972
    },
    {
        "content": "<p>The problem with the final sorry is that <code>k</code> is defined using the max on nat, and the other max is on int.</p>",
        "id": 168842365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561376976
    },
    {
        "content": "<p>oh no! :(</p>",
        "id": 168842427,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561377005
    },
    {
        "content": "<p>i need to add more hypothesis then</p>",
        "id": 168842449,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561377027
    },
    {
        "content": "<blockquote>\n<p>The problem with the final sorry is that <code>k</code> is defined using the max on nat, and the other max is on int.</p>\n</blockquote>\n<p>how should I get around?</p>",
        "id": 168842509,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561377106
    },
    {
        "content": "<p>There might be some magic tactic which does it, I've not tried those new cast tactics. If not, then you have to fix things up yourself. </p>\n<p>My recommendation would be to change every single variable into an int as soon as possible, make all the problems go away, and then just prove that various things are &gt;= 0 at the end and then cast them back to nats.</p>",
        "id": 168842683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561377251
    },
    {
        "content": "<p>I would keep the max on nat, because that's the definition of k</p>",
        "id": 168842703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561377283
    },
    {
        "content": "<p>You're just in the typical nat/int hell which several of my students found themselves in over the summer. In my mind, if your proof uses ints, then why even use nats at all? Just use ints with a proof that they're &gt;= 0.</p>",
        "id": 168842707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561377289
    },
    {
        "content": "<p>it might help to write some up arrows because it's important to know where they are</p>",
        "id": 168842730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561377323
    },
    {
        "content": "<p>Maybe this would be a great place to test out the cast tactics. Did they get written up in the tactics docs?</p>",
        "id": 168842734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561377333
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a></p>\n<p>They're right at the bottom. Maybe these can help. I've never used them though.</p>",
        "id": 168842798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561377373
    },
    {
        "content": "<p>to use the cast tactics, you have to actually have a specific goal that you can use them with</p>",
        "id": 168842833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561377399
    },
    {
        "content": "<p>distributing the arrows in this case is easily enough done by simp, that's already working in the example</p>",
        "id": 168842871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561377450
    },
    {
        "content": "<p>yes, i should definitely use int instead of nat. because I have to add the condition that a, b &gt;0 anyway, as you pointed out</p>",
        "id": 168849016,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561382826
    },
    {
        "content": "<p>but since gcd_a and gcd_b are for nat instead of int, other troubles will arise...</p>",
        "id": 168849713,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561383360
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- rw le_max_left</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat_abs_of_nonneg</span> <span class=\"n\">hxx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_eq_gcd_ab</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168853863,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561386295
    },
    {
        "content": "<p>now i have changed the definition of k so that everything should be in int. why <code>rw le_max_left </code> still doesnt work?</p>",
        "id": 168853912,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561386334
    },
    {
        "content": "<p>oh, i know why, its because i need a proof for <code>(b:nat)(a:int)(c:int)(a&lt;=c) : b*a &lt;= b*c</code>. i guess this is proven somewhere already?</p>",
        "id": 168857486,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561388720
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- rw hb ...?</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n        <span class=\"o\">:</span> <span class=\"n\">sub_mul</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- ...?</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- rw le_max_left ...?</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat_abs_of_nonneg</span> <span class=\"n\">hxx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_eq_gcd_ab</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168859399,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561389919
    },
    {
        "content": "<p>OK, I can finally see the end. Only 3 sorry's (the first 3) are left to be filled, which I believe can be done using existing theorems. Can someone please tell me what the right commands are? Thanks!</p>",
        "id": 168859748,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561390149
    },
    {
        "content": "<p>Did you try library search?</p>",
        "id": 168861621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561391581
    },
    {
        "content": "<p>How to do <code>library_search</code>? <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 168862027,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561391888
    },
    {
        "content": "<p>Read the documentation for <code>library_search</code>?</p>",
        "id": 168862066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561391929
    },
    {
        "content": "<p>in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a></p>",
        "id": 168862199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561392014
    },
    {
        "content": "<blockquote>\n<p>Read the documentation for <code>library_search</code>?</p>\n</blockquote>\n<p>Ya, I just noticed this, embarrassing lol</p>",
        "id": 168862716,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561392508
    },
    {
        "content": "<p>library_search times out :(</p>",
        "id": 168863189,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561393001
    },
    {
        "content": "<p>So your first sorry is a proof of</p>\n<div class=\"codehilite\"><pre><span></span> 0 * nat_abs (gcd_a a b) ≤ (b - 1) * (nat_abs (gcd_a a b))\n</pre></div>\n\n\n<p>You wrote <code>rw hb</code>, and here <code>hb : b &gt;= 1</code>. NB that's not the canonical way to write that inequality, the canonical way is <code>1 &lt;= b</code>. Yes, it does make a difference :-/</p>\n<p>But you probably know what rw really does. For <code>rw h</code> to work, <code>h</code> must really be of the form <code>A = B</code>, and then <code>rw</code> takes the A's and replaces them with B's. So this is not a rewrite at all. What it is is a theorem. It's the theorem that x &lt;= y and c &gt;= 0 then x * c &lt;= y * c. And that theorem will have a name, which you can either guess (once you understand the naming conventions), remember (once you've used Lean for a while) or look up using library-search (if it works).</p>",
        "id": 168863686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561393459
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- works!</span>\n</pre></div>",
        "id": 168863743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561393521
    },
    {
        "content": "<p>Your second sorry seems to be of the form</p>\n<div class=\"codehilite\"><pre><span></span>↑b*↑(nat_abs (gcd_a a b)) - ↑1*↑(nat_abs (gcd_a a b)) ≤ b*(nat_abs (gcd_a a b)) - gcd_a a b\n</pre></div>\n\n\n<p>Why are you proving an inequality? It looks to me like this should be an equality. It seems to me that there are three issues here. The first is the inequality. The second is that a bunch of arrows disappeared (either because you didn't write them and they're still there really, or because you really are switching from integers to naturals). To sort that out you'll either need some cast tactic, or you should just work with integers all the way through. The final thing is the issue that you are implicitly assuming <code>1 * x = x</code>. That's a theorem, it's not true by definition, so it will have a name (I guess the name is <code>one_mul</code>), and that theorem needs to be applied somehow (by rewriting I guess) to get rid of that 1.</p>",
        "id": 168864060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561393815
    },
    {
        "content": "<p>The third sorry is</p>\n<div class=\"codehilite\"><pre><span></span>-gcd_a a b + b*↑(nat_abs (gcd_a a b))\n ≤ -gcd_a a b + b*(max ↑(nat_abs (gcd_a a b)) ↑(nat_abs (gcd_b a b)))\n</pre></div>\n\n\n<p>You want to use <code>le_max_left</code> but again there are several steps which you're leaving out. As well as le_max_left there's the analogous theorem for the first sorry, but this time with conclusion <code>c * a &lt;= c * b</code> (different conclusion = different theorem name), and you're also using the fact that a &lt;= b implies c + a &lt;= c + b. I think the simplifier is not well suited for these questions -- but I might be wrong. In some sense this is the problem with calc mode. You could just enter tactic mode again with a begin end, and then do the rewriting yourself.</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- rw hb ...?</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n        <span class=\"o\">:</span> <span class=\"n\">sub_mul</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- ...?</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n        <span class=\"k\">begin</span>\n          <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span><span class=\"o\">,</span>\n          <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"c1\">-- etc</span>\n          <span class=\"n\">sorry</span>\n        <span class=\"kn\">end</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>Tactic mode is the best mode really. You wrote <code>rw le_max_left</code> but that doesn't even make sense; you can only rewrite equalities. You are not thinking about what is really happening. What is really happening is that you are constantly applying little lemmas. The proof of <code>c + d * a &lt;= c + d * (max a b)</code> is really not a rewrite. It is an application of several unrelated facts about inequalities, each of which has been painstakingly proved by the library creators. One of them is le_max_left but there are others.</p>",
        "id": 168864547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561394340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_ring</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hb</span> <span class=\"n\">hg</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n        <span class=\"n\">sub_mul</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- rw le_max_left ...?</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat_abs_of_nonneg</span> <span class=\"n\">hxx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_eq_gcd_ab</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_neg_self</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat_abs</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168864836,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561394591
    },
    {
        "content": "<p>This is my attempt to resolve the first sorry, but I got an enormous error message. As for the second sorry, it should be an inequality since gcd_a can be negative. I will come back to this tomorrow, its so late at night. Anyway, thanks~</p>",
        "id": 168864938,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561394682
    },
    {
        "content": "<blockquote>\n<p>As for the second sorry, it should be an inequality since gcd_a can be negative.</p>\n</blockquote>\n<p>Oh, apologies! I thought these were the nat ones. In which case my comments apply about how things like a &lt;= b implies c - a &gt;= c - b are not immediate or automatic, they are theorems which need applying. You'll also need one_mul, and the fact that z &lt;= abs z.</p>",
        "id": 168865211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561394929
    },
    {
        "content": "<p>The enormous error message is only enormous because Lean has expanded everything out for you to explain what the problem is. If it just said \"I was expecting a proof that something was &lt;= something, and you gave me a proof that something was &lt;= something\" then it would be confusing. But</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  mul_le_mul_of_nonneg_right hb\nterm\n  hb\nhas type\n  @has_le.le nat nat.has_le 0\n    (@has_sub.sub nat nat.has_sub\n       (@coe nat nat (@coe_to_lift nat nat (@coe_base nat nat (@nat.cast_coe nat nat.has_zero nat.has_one nat.has_add)))\n          b)\n       1)\nbut is expected to have type\n  @has_le.le int\n    (@preorder.to_has_le int\n       ...\n</pre></div>\n\n\n<p>says that <code>hb</code> has type <code>@has_le.le nat ...</code> (i.e. it's a proof that one nat is &lt;= another nat) and you attempted to insert it into a function which was expecting something of type <code>@has_le.le int ...</code> i.e. expecting a proof that one int is &lt;= another int.</p>",
        "id": 168865408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561395121
    },
    {
        "content": "<p>replacing <code>by exact mul_le_mul_of_nonneg_right</code> with the more refined \"attempt to solve the goal with this function but give me the inputs as new goals\" <code>refine</code> tactic</p>\n<div class=\"codehilite\"><pre><span></span>begin refine mul_le_mul_of_nonneg_right _ _, sorry, sorry end\n</pre></div>\n\n\n<p>shows you what the problem is. You now need to fill in those two holes, and the results you have are not good enough because they have the wrong type. Did I mention the idea of just using integers everywhere by the way?</p>",
        "id": 168865616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561395302
    },
    {
        "content": "<blockquote>\n<p>Did I mention the idea of just using integers everywhere by the way?</p>\n</blockquote>\n<p>but gcd_a, gcd_b are defined for nat instead of int</p>",
        "id": 168866030,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561395635
    },
    {
        "content": "<p>But this issue is just a general pain in type theory. Do you understand how to use these new cast tactics? The first hole needs a resolution of this issue</p>\n<div class=\"codehilite\"><pre><span></span>hb : 0 ≤ ↑b - 1\n⊢ 0 ≤ ↑b - 1\n</pre></div>\n\n\n<p>Here your hypothesis <code>hb</code> has an arrow in, which turns out to be a cast from <code>nat</code> to <code>nat</code>. You can see all the gory details of everything by <code>set_option pp.all true</code>. Setting this option will give you some real insight into how the computer is thinking about what you are doing. In particular you cannot cast from a nat to an int by just putting an up-arrow -- Lean doesn't know where you're casting to.</p>",
        "id": 168866043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561395647
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Did I mention the idea of just using integers everywhere by the way?</p>\n</blockquote>\n<p>but gcd_a, gcd_b are defined for nat instead of int</p>\n</blockquote>\n<p>Feed them absolute values of ints? I don't know if this is a feasible solution.</p>",
        "id": 168866118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561395699
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>Did I mention the idea of just using integers everywhere by the way?</p>\n</blockquote>\n<p>but gcd_a, gcd_b are defined for nat instead of int</p>\n</blockquote>\n<p>Feed them absolute values of ints? I don't know if this is a feasible solution.</p>\n</blockquote>\n<p>i will try tomorrow</p>",
        "id": 168866318,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561395847
    },
    {
        "content": "<p>I don't know if this is feasible. All I see when I look at your code though is a bunch of stuff about ints, with subtractions etc. You might well find the int analogue of the <code>gcd_a</code> functions in <code>data.int.basic</code> somewhere or maybe even in core.</p>",
        "id": 168866850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561396319
    },
    {
        "content": "<p>Maybe now we have <code>norm_cast</code> you don't need to make everything an integer. This little lemma might be a nice test case. I just tried it on the first sorry and had positive results:</p>\n<div class=\"codehilite\"><pre><span></span>    calc (0 : ℤ) = 0 * nat_abs (gcd_a a b) : by simp\n    ... ≤ (↑b - 1) * (nat_abs (gcd_a a b)) :\n        begin apply mul_le_mul_of_nonneg_right,\n          {norm_cast at hb ⊢, exact hb},\n          {norm_cast, simp}\n        end\n</pre></div>",
        "id": 168867991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561397277
    },
    {
        "content": "<p>For the next one you need the theorem that a &lt;= b implies c - b &lt;= c - a (note how I always stick with &lt;=, otherwise there would be lots of ways of saying inequalities; there is a \"canonical form\" for many expressions in Lean and it is only slowly dawning on me how important this is in practice). To find that theorem you see that the conclusion is of the form \"a subtraction is less than or equal to a subtraction\" so I type \"apply sub_le_sub\" and then I press ctrl-space in VS Code and see a list of all Lean's theorems that start <code>sub_le_sub</code> and all their types too, so it's easy to find the one I want. That's another way of finding out the right name for a theorem.</p>",
        "id": 168868375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561397540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218709\">@Adrian Chu</span> I don't think you're going in the right direction. The first thing to understand is natural numbers are bad. You never noticed because real world always insert coercions to integers and all the coercion related lemmas. My advice is to first state and prove the integer version. Then we'll talk about deducing the evil version. Here is the exercise I propose:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now you can `calc`</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168875750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561402629
    },
    {
        "content": "<p>each <code>calc</code> block is 4 lines long</p>",
        "id": 168875884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561402727
    },
    {
        "content": "<p>The first sorry is 20 characters (including spaces)</p>",
        "id": 168875916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561402765
    },
    {
        "content": "<p>Hmm, do we have any lemma relating <code>nat.gcd</code> and <code>euclidean_domain.gcd</code>?</p>",
        "id": 168877209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561403800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> maybe?</p>",
        "id": 168877349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561403945
    },
    {
        "content": "<p>I'm not too familiar with that part of the lib...</p>",
        "id": 168877368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561403977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> ?</p>",
        "id": 168877373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561403986
    },
    {
        "content": "<p>I don't know, but I think there is glue between <code>nat.gcd</code> and <code>int.gcd</code>, and then also between <code>int.gcd</code> and <code>euclidean_domain.gcd</code>...</p>",
        "id": 168877439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561404016
    },
    {
        "content": "<p>Where would that be?</p>",
        "id": 168877452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561404029
    },
    {
        "content": "<p>Not sure... my memories might be wrong.</p>",
        "id": 168877481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561404074
    },
    {
        "content": "<p>Going from the int version of Adrian's lemma to the evil version is trivial except for:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">gcd</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 168877567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561404139
    },
    {
        "content": "<p>Hmm... if library_search can't close that, then we probably don't have it.</p>",
        "id": 168877750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561404338
    },
    {
        "content": "<p>I'm sure British people can prove this</p>",
        "id": 168877876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561404448
    },
    {
        "content": "<p>Maybe show they both have the same universal property? ;-)</p>",
        "id": 168878243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561404768
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">unfold</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"bp\">;</span> <span class=\"n\">congr&#39;</span>\n</pre></div>",
        "id": 168878547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561405007
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 168878603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561405080
    },
    {
        "content": "<p>I was slightly surprised this worked until I realised that <code>int.nat_abs (\\u m) = m</code> was defeq for m a nat.</p>",
        "id": 168878755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561405186
    },
    {
        "content": "<p>Nice! This bridges to <code>int.gcd</code> but not to <code>euclidean_domain.gcd</code></p>",
        "id": 168878842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561405226
    },
    {
        "content": "<p>and the <code>by convert</code> is useless...</p>",
        "id": 168879427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561405749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>Oh yeah! I used <code>convert</code> because I \"knew\" there would be trouble with the cast to int and back.</p>",
        "id": 168879526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561405826
    },
    {
        "content": "<p>but the game is to use <code>euclidean_domain.gcd</code></p>",
        "id": 168879571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561405871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#eval euclidean_domain.gcd (-1 : ℤ) (1 : ℤ) -- -1\n#eval int.gcd (-1 : ℤ) (1 : ℤ) -- +1\n</pre></div>\n\n\n<p>:-(</p>",
        "id": 168880379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561406420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">gcd</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_zero_left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_zero_left</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hab</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">gcd_val</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ int.gcd a b = int.gcd (b % a) a</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This code (thanks, whoever wrote gcd.induction!) reduces the question to <code> int.gcd a b = int.gcd (b % a) a</code>.</p>",
        "id": 168881009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561406891
    },
    {
        "content": "<p>...which is almost a question about nat.gcd apart from the fact that one needs to relate |b%a| to |b|%|a|.</p>",
        "id": 168881093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561406993
    },
    {
        "content": "<p>What you are doing is not what I asked for</p>",
        "id": 168881330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407195
    },
    {
        "content": "<p>why don't you formalise the question?</p>",
        "id": 168881361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407220
    },
    {
        "content": "<p>I did!</p>",
        "id": 168881384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407239
    },
    {
        "content": "<p>Oh -- I misunderstood the arrows.</p>",
        "id": 168881432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407250
    },
    {
        "content": "<blockquote>\n<p>Going from the int version of Adrian's lemma to the evil version is trivial except for:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">gcd</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n</blockquote>",
        "id": 168881435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407252
    },
    {
        "content": "<p>I thought I did that one.</p>",
        "id": 168881438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407259
    },
    {
        "content": "<p>I have Lean code which looks like that on my screen right now, with int open :-)</p>",
        "id": 168881460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407278
    },
    {
        "content": "<p>You need to open <code>euclidean_domain</code> instead</p>",
        "id": 168881482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407294
    },
    {
        "content": "<p>you didn't post a MWE ;-)</p>",
        "id": 168881497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407304
    },
    {
        "content": "<p>I did</p>",
        "id": 168881523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407328
    },
    {
        "content": "<p>a few messages above</p>",
        "id": 168881530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407333
    },
    {
        "content": "<p>anyway</p>",
        "id": 168881532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407335
    },
    {
        "content": "<p>It was too minimal -- I guessed you'd opened the wrong thing :-)</p>\n<p>I still propose we prove the thing I said about int. You can't use the inductive predicate for euclidean_domain.gcd on nats.</p>",
        "id": 168881548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407359
    },
    {
        "content": "<p>So unless you want to get your hands dirty, we prove some statement which is valid for all ints (as I was in the middle of doing) and then deduce the nat thing via some dirty work.</p>",
        "id": 168881620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407394
    },
    {
        "content": "<p>The context was my first message to Adrian, which included all imports and open</p>",
        "id": 168881622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561407398
    },
    {
        "content": "<p>And the best statement I could find which was true for all ints was the one I posted.</p>",
        "id": 168881667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407448
    },
    {
        "content": "<p>bleurgh we need (a b : int), both &gt;=0 implies euclidean_domain.gcd a b &gt;=0 :-/</p>",
        "id": 168881860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561407601
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">useful</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Meh.</p>",
        "id": 168883133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561408631
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useful</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">useful2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">abs_gcd_eq_int_gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">gcd</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">gcd_zero_left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_zero_left</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hab</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">gcd_val</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"c1\">--goal now : a ≠ 0 → int.gcd a b = int.gcd (b % a) a -- should be in mathlib</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">useful</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"c1\">-- nat.gcd equation lemma</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_nat_abs_eq_zero</span> <span class=\"n\">h3</span><span class=\"o\">),</span> <span class=\"c1\">-- missing a trick here</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">patrick</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">abs_gcd_eq_int_gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_nat_abs_eq_of_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ euclidean_domain.gcd ↑a ↑b ≥ 0</span>\n  <span class=\"n\">apply</span> <span class=\"n\">useful2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Two sorries at the top. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what tricks am I missing?</p>",
        "id": 168884494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561409767
    },
    {
        "content": "<p>The goal is to prove theorem <code>patrick</code>.</p>",
        "id": 168884513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561409792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">useful2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">euclidean_domain</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">gcd</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">gcd_zero_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hcn</span> <span class=\"n\">h</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">gcd_val</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_nonneg</span> <span class=\"n\">d</span> <span class=\"n\">hcn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168887163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561412223
    },
    {
        "content": "<p>Personally I would question why you want to prove that theorem?</p>",
        "id": 168887964,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561412887
    },
    {
        "content": "<p>I don't see why euclidean_domain.gcd is getting involved at all if the goal is to prove adrian's original statement</p>",
        "id": 168888593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561413459
    },
    {
        "content": "<p>Yeah I already tried that but Patrick moaned</p>",
        "id": 168889874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561414645
    },
    {
        "content": "<p>I'm having trouble working with <code>-A % B</code> with (A B : nat) and <code>int.mod</code></p>",
        "id": 168889950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561414711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>1 goal\nB : ℕ,\nA : ℕ,\n⊢ int.nat_abs (-↑A % ↑B) = int.nat_abs (-↑A) % B\n</pre></div>",
        "id": 168889991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561414777
    },
    {
        "content": "<p>That's the last goal but it's bedtime</p>",
        "id": 168890963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561415697
    },
    {
        "content": "<p>The left mod is int.mod</p>",
        "id": 168891065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561415807
    },
    {
        "content": "<p>Aargh I don't think some of these are true :-/</p>",
        "id": 168891573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561416338
    },
    {
        "content": "<p>No wonder I was struggling :-)</p>",
        "id": 168891593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561416359
    },
    {
        "content": "<p>Do we have a tool which checks statements like these for a few random values of the integers in question?</p>",
        "id": 168891663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561416405
    },
    {
        "content": "<p>sure, you can use list ops to make a mini quickcheck</p>",
        "id": 168891697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561416472
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">A</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">B</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">A</span> <span class=\"err\">%</span> <span class=\"err\">↑</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"err\">↑</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"c1\">-- [(1, 3), ...]</span>\n</pre></div>",
        "id": 168891798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561416569
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"218709\">Adrian Chu</span> I don't think you're going in the right direction. The first thing to understand is natural numbers are bad. You never noticed because real world always insert coercions to integers and all the coercion related lemmas. My advice is to first state and prove the integer version. Then we'll talk about deducing the evil version. Here is the exercise I propose:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now you can `calc`</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>So i guess i should try finishing this version of my lemma, and forget everything about nat.gcd</p>",
        "id": 168947675,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561475677
    },
    {
        "content": "<p>If you can afford that then of course everything becomes much easier. I still think it's a problem that mathlib has at least three gcd with no lemmas relating them in the case of integers</p>",
        "id": 168947873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561475832
    },
    {
        "content": "<p>Did you manage to fill in the sorries in my exercise?</p>",
        "id": 168947884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561475846
    },
    {
        "content": "<p>I am working on them now</p>",
        "id": 168947953,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561475887
    },
    {
        "content": "<p>Ok, I hope I inserted them wisely. I first wrote the full proof and then removed it to help you getting better training. Don't hesitate to ask questions if it's still too painful</p>",
        "id": 168948117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561476044
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span>\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">u</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_max_left</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_max_left</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">u</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_max_left</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hb</span> <span class=\"n\">hk</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_max_left</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">v</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">abs_neg</span> <span class=\"n\">v</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_max_right</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">ha</span> <span class=\"n\">hk</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168950201,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561477808
    },
    {
        "content": "<p>I'm not able to figure out the first sorry (with 20 characters only). i know we need to use <code>gcd_eq_gcd_ab</code> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 168950242,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561477857
    },
    {
        "content": "<blockquote>\n<p>Personally I would question why you want to prove that theorem?</p>\n</blockquote>\n<p>This is a crucial lemma in a theorem i want to prove</p>",
        "id": 168950598,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561478155
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Personally I would question why you want to prove that theorem?</p>\n</blockquote>\n<p>This is a crucial lemma in a theorem i want to prove</p>\n</blockquote>\n<p>I think that \"that theorem\" might have referred to the compatibility of the various notions of <code>gcd</code> which we have in Lean.</p>",
        "id": 168950684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561478221
    },
    {
        "content": "<p>You can shorten your first calc block to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">u</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>(or of course you can say <code>have hk : 0 ≤ k, from le_trans (abs_nonneg u) (le_max_left _ _),</code>)</p>",
        "id": 168951452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561478762
    },
    {
        "content": "<p>The sorry you couldn't do is <code>h ▸ gcd_eq_gcd_ab a b</code></p>",
        "id": 168951491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561478792
    },
    {
        "content": "<p>I hope you've learn a couple of tricks (those are no so easy to document)</p>",
        "id": 168951572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561478855
    },
    {
        "content": "<p>wow thanks a lot!</p>",
        "id": 168951723,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561478946
    },
    {
        "content": "<p>i can finally move one to the second lemma, and then my main theorem :)</p>",
        "id": 168951742,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561478967
    },
    {
        "content": "<p>The triangle is term mode's version of the rewrite tactic.</p>",
        "id": 168951744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561478972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_n_to_list</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_lcm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">lcm</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">fin_n_to_list</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">n_lcm_coprime</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">n_lcm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 168955379,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561481603
    },
    {
        "content": "<p>i will start to prove this lemma. is my formulation of definitions and the statement of lemma appropriate?</p>",
        "id": 168955506,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561481697
    },
    {
        "content": "<p>Why are you using maps <code>fin n -&gt; int</code> at all? You are carrying around the length of your list, but you could just read it off by looking at the length of the list.</p>",
        "id": 168956553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561482436
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lcm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">lcm</span> <span class=\"mi\">1</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">lcm_coprime</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">gcd</span> <span class=\"n\">s</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">lcm</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>No <code>n</code> in sight -- it's never needed.</p>",
        "id": 168957099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561482812
    },
    {
        "content": "<p>Note also <code>x.lcm</code> for <code>list.lcm x</code>, it's a cool thing which I only recently understood.</p>",
        "id": 168957196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561482860
    },
    {
        "content": "<p>The CS purists might even say that these should all be theorems about multisets not lists, because the lcm does not depend on the order, so why are you carrying that around?</p>",
        "id": 168957270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561482938
    },
    {
        "content": "<p>a naive question: can a list have infinite length?</p>",
        "id": 168998075,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561521848
    },
    {
        "content": "<p>No</p>",
        "id": 168998413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561522401
    },
    {
        "content": "<p>Nope, they can not.</p>",
        "id": 168998539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561522575
    },
    {
        "content": "<p><code>list.length</code> is defined for all lists, and it is a function to <code>nat</code>.</p>",
        "id": 168998540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561522575
    },
    {
        "content": "<p>Infinite lists are usually called \"streams\", and they need a different implementation. Not sure if we have them in Lean.</p>",
        "id": 168998541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561522575
    },
    {
        "content": "<p>Sorry... laggy internet connection...</p>",
        "id": 168998549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561522605
    },
    {
        "content": "<p>we have streams, they are just defined as <code>stream A := nat -&gt; A</code></p>",
        "id": 168998675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561522816
    },
    {
        "content": "<p>i see. all I want is an n-tuple of numbers. so i will use list Z instead of fin n -&gt; Z.</p>",
        "id": 168998689,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561522860
    },
    {
        "content": "<p>There are also lazy lists, which are more like haskell lists in implementation but are still finite according to the theory. But in meta land you can construct infinite lazy lists</p>",
        "id": 168998690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561522861
    },
    {
        "content": "<blockquote>\n<p>i see. all I want is an n-tuple of numbers. so i will use list Z instead of fin n -&gt; Z.</p>\n</blockquote>\n<p>The question is... is your <code>n</code> fixed? Because with a list, you don't know if it has length <code>n</code>.</p>",
        "id": 168998753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561522940
    },
    {
        "content": "<p>no, the lemma (and my main theorem) just need an arbitrary finite number of positive integers as inputs.</p>",
        "id": 168998851,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561523159
    },
    {
        "content": "<p>so list should be good</p>",
        "id": 168998894,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561523170
    },
    {
        "content": "<p>i just realized a problem. in my main theorem, i have a statement involving a^b, where a and b are positive integers. but since we are now letting a, b be int instead of nat, i cant use the default a^b function</p>",
        "id": 168999684,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561524519
    },
    {
        "content": "<p>well i can use (nat_abs a)^(nat_abs b). its a bit ugly, but nvm</p>",
        "id": 168999817,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561524800
    },
    {
        "content": "<p>I think you should keep them as nats rather than do something like that</p>",
        "id": 169000582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561526019
    },
    {
        "content": "<p>if they are actually nats then there's nothing wrong with that</p>",
        "id": 169000589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561526032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218709\">@Adrian Chu</span> You can let <code>a</code> and <code>b</code> be <code>nat</code>s but nevertheless use <code>int.gcd</code> instead of <code>nat.gcd</code>.</p>",
        "id": 169001233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561526922
    },
    {
        "content": "<p>I agree that it's quite messy.</p>",
        "id": 169001234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561526930
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"218709\">Adrian Chu</span> You can let <code>a</code> and <code>b</code> be <code>nat</code>s but nevertheless use <code>int.gcd</code> instead of <code>nat.gcd</code>.</p>\n</blockquote>\n<p>I don't think we can, since this gives error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mythm</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 169002015,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561527938
    },
    {
        "content": "<p>what error? You may need to put some up arrows in there</p>",
        "id": 169002082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561528050
    },
    {
        "content": "<p>OK, fixed</p>",
        "id": 169002151,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561528195
    },
    {
        "content": "<p>let x : list nat and I want to sum it. if for some reason I want to use <code>finset.univ.sum</code> instead of <code>x.sum</code>, what is the correct syntax?</p>",
        "id": 169002570,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561528867
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">range</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>this doesnt work</p>",
        "id": 169002693,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561529047
    },
    {
        "content": "<p>You need to <code>range</code> of the <code>length</code> of the list.</p>",
        "id": 169002715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561529108
    },
    {
        "content": "<p>Why do you want to use <code>finset.sum</code>?</p>",
        "id": 169002720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561529140
    },
    {
        "content": "<p>If so... shouldn't you be using <code>finset nat</code> instead of <code>list nat</code>?</p>",
        "id": 169002725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561529153
    },
    {
        "content": "<p>well I have <code>x : list nat</code> and <code>r : list nat</code>, lists of positive integers of the same length, and i want to sum (i-th term of x)^(i-th term of r) over i</p>",
        "id": 169002853,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561529345
    },
    {
        "content": "<p>i thought using <code>finset.univ.sum</code> is the easiest</p>",
        "id": 169002866,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561529384
    },
    {
        "content": "<p>I would do something like <code>zip_with</code> to put the powers together and <code>list.sum</code> to add them up</p>",
        "id": 169002917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561529417
    },
    {
        "content": "<blockquote>\n<p>well I have <code>x : list nat</code> and <code>r : list nat</code>, lists of positive integers of the same length, and i want to sum (i-th term of x)^(i-th term of r) over i</p>\n</blockquote>\n<p>??? why are they of the same length?</p>",
        "id": 169002928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561529440
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>well I have <code>x : list nat</code> and <code>r : list nat</code>, lists of positive integers of the same length, and i want to sum (i-th term of x)^(i-th term of r) over i</p>\n</blockquote>\n<p>??? why are they of the same length?</p>\n</blockquote>\n<p>by assumption</p>",
        "id": 169002949,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561529493
    },
    {
        "content": "<p>Can you arrange to have a <code>list (nat x nat)</code>?</p>",
        "id": 169005531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561533231
    },
    {
        "content": "<blockquote>\n<p>Can you arrange to have a <code>list (nat x nat)</code>?</p>\n</blockquote>\n<p>how will this help?</p>",
        "id": 169006265,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561534175
    },
    {
        "content": "<p>it ensures that you have two lists of the same size, but is this really the easiest way to do it? why not pass a proof that the lengths are equal instead?</p>",
        "id": 169006369,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561534265
    },
    {
        "content": "<p>it separates the information somewhat and generally makes the proofs harder</p>",
        "id": 169006384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561534291
    },
    {
        "content": "<p>I don't know about the direction of this thread though. What is the actual goal? I think the encoding decisions are being made without a good idea of the target theorem and that's bad news</p>",
        "id": 169006472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561534365
    },
    {
        "content": "<p>okok, let me write out the complete thm</p>",
        "id": 169006489,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561534387
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mythm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 169006690,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561534632
    },
    {
        "content": "<p>this is the original form of my theorem</p>",
        "id": 169006696,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561534645
    },
    {
        "content": "<p>and we can discuss whether  (1) to use nat or int, and (2) to use fin n -&gt; nat or list nat</p>",
        "id": 169006759,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561534697
    },
    {
        "content": "<p>the only adv of fin n -&gt; nat i can think of is that fin n -&gt; nat can be handy when dealing with nested inductive types</p>",
        "id": 169006867,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1561534855
    },
    {
        "content": "<p>and I will use these 2 lemmas</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_n_to_list</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_lcm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lcm</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">fin_n_to_list</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">n_lcm_coprime</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">n_lcm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- not yet proven</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bazout</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- already proven</span>\n</pre></div>",
        "id": 169006962,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561535006
    },
    {
        "content": "<p>The statement of <code>mythm</code> looks fine, except that you can replace <code>fin n</code> with any fintype <code>A</code>, and the <code>0 &lt;= y</code> is redundant</p>",
        "id": 169007185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561535271
    },
    {
        "content": "<p>no... i just tried, the conversion between int and nat is so frustrating (since my bazout lemma is using int). i want to use int in mythm. do we have a^b for a, b in int ?</p>",
        "id": 169014710,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561543119
    },
    {
        "content": "<p>You want to have your bezout lemma on nat too</p>",
        "id": 169014943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561543352
    },
    {
        "content": "<p>good idea, i can make a new lemma bazout2 for nat using bazout</p>",
        "id": 169015511,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561544020
    },
    {
        "content": "<p>my strategy now is to use a, b : nat, but use euclidean_domain.gcd (a:int) b</p>",
        "id": 169016013,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561544530
    },
    {
        "content": "<p>Since you seem to already have a solution, I will show you how I would have proven your original bezout theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">bezout</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simpa</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">k1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sub_nonneg</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_nonneg</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le_nat_abs</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sub_le_iff_le_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">ha&#39;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_nonneg</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">le_nat_abs</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs_neg</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_le</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"n\">x0</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">to_nat_of_nonneg</span> <span class=\"n\">y0</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I don't think it's necessary to ban the use of nats as long as you are conscientious in your use of the up arrow. In particular if it makes you use more unusual functions with a worse interface then it's not worth it</p>",
        "id": 169016523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561545041
    },
    {
        "content": "<p>I think this is completely crazy. How can it be a good idea to have <code>nat.gcd</code>, <code>int.gcd</code> and <code>euclidean_domain.gcd</code> and not a single lemma relating those?</p>",
        "id": 169018155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561546825
    },
    {
        "content": "<p>Of course there should be such lemmas</p>",
        "id": 169018175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561546857
    },
    {
        "content": "<p>but we don't need the other gcds for this theorem</p>",
        "id": 169018192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561546871
    },
    {
        "content": "<p>The proof of this theorem is much nicer with <code>euclidean_domain.gcd</code>. Your proof is hideous, even if it could be nicer using <code>norm_cast</code></p>",
        "id": 169018289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561546949
    },
    {
        "content": "<p>None of the proof has to do with gcd</p>",
        "id": 169018308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561546973
    },
    {
        "content": "<p>It's quite possible that norm_cast can be used in a few places, but it's mostly about dealing with max and simple algebra</p>",
        "id": 169018357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547028
    },
    {
        "content": "<p>also I don't really care about calc blocks</p>",
        "id": 169018368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547038
    },
    {
        "content": "<p>Are you saying that there is a completely different proof that uses <code>euclidean_domain.gcd</code> with some different lemmas about it? I'm mostly following adrian's proof sketch here</p>",
        "id": 169018490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547152
    },
    {
        "content": "<p>The fact that we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>and this proof is still nearly 30 lines is what is so jarring.</p>",
        "id": 169018544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561547182
    },
    {
        "content": "<p>This theorem is proving something completely different</p>",
        "id": 169018563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547210
    },
    {
        "content": "<p>Hmm, I guess gcd_a is probably an int, so there's some content getting all the signs right</p>",
        "id": 169018568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561547216
    },
    {
        "content": "<p>The important part is the fact that you can shift around solutions by a multiple</p>",
        "id": 169018581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547226
    },
    {
        "content": "<p>Right.</p>",
        "id": 169018586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561547234
    },
    {
        "content": "<p>and then you have some inequalities to check</p>",
        "id": 169018603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547249
    },
    {
        "content": "<p>I mean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">],</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">u</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">le_abs_self</span> <span class=\"n\">u</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_max_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">hb</span> <span class=\"n\">hk</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">neg_le_abs_self</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_max_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_max_right</span> <span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"n\">ha</span> <span class=\"n\">hk</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169018623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561547275
    },
    {
        "content": "<p>I think our views on the meaning of the phrase \"completely different\" might have diverged a bit but I do take your point that more needs to be said.</p>",
        "id": 169018666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561547283
    },
    {
        "content": "<p>Ah, you linarith'd</p>",
        "id": 169018686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561547303
    },
    {
        "content": "<p>And then, modulo relating different versions of <code>gcd</code>, the proof of the <code>nat</code> version is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">sorry</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">],</span>\n      <span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169018701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561547326
    },
    {
        "content": "<p>and he rung.</p>",
        "id": 169018705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561547327
    },
    {
        "content": "<p>Of course I linarith, I ring, and norm_cast. I very strongly believe all this is essential for the future of proof assistants for mathematicians</p>",
        "id": 169018815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561547407
    },
    {
        "content": "<p>million thanks. i am building up the framework of the proof of mythm currently.</p>",
        "id": 169019121,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561547745
    },
    {
        "content": "<blockquote>\n<p>It's quite possible that norm_cast can be used in a few places, but it's mostly about dealing with max and simple algebra</p>\n</blockquote>\n<p>This is just the metamath-mario trying to get out. You can see a proof from very low-level principles and so figure that this is a good way to do it. The mathematicians see the theorem for <code>int</code> and figure that the boring work is already done, and that we should just use that.</p>",
        "id": 169019829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548431
    },
    {
        "content": "<p>I don't use a high level tactic until I understand very well how effective it is and in what circumstances it can be used. AKA \"no magic\"</p>",
        "id": 169019979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548596
    },
    {
        "content": "<p>That's exactly what I'm saying. You were brought up on metamath and this has formed the way you think about how to solve goals.</p>",
        "id": 169020048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548634
    },
    {
        "content": "<p>That said there are also a few proof tricks in Patrick's proof that I missed</p>",
        "id": 169020049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548635
    },
    {
        "content": "<p>We need both. We need Mario on one side, and we need Rob and Paul-Nicolas (and hopefully many more) on the other side</p>",
        "id": 169020062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561548655
    },
    {
        "content": "<p>Yes absolutely. I'm just saying that it's interesting.</p>",
        "id": 169020089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548680
    },
    {
        "content": "<p>I think Mario wrote <code>ring</code> ;-)</p>",
        "id": 169020136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548720
    },
    {
        "content": "<p>The difference between us is I feel the pressure of the actual proof term at all times</p>",
        "id": 169020231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548781
    },
    {
        "content": "<p>If I use a complicated tactic that spews some gigantic... <em>thing</em>... in for my proof, I think it's a long and ugly proof</p>",
        "id": 169020262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548816
    },
    {
        "content": "<p>That's an interesting comment. I have no concept of what proof terms look like.</p>",
        "id": 169020277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548828
    },
    {
        "content": "<p>even if the proof script is just <code>by magic</code></p>",
        "id": 169020285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548839
    },
    {
        "content": "<p>When I use <code>refine</code> and <code>apply</code> and <code>rw</code>, I know exactly what proof term is getting generated and how heavy that's going to be for the kernel</p>",
        "id": 169020355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548883
    },
    {
        "content": "<p>With Olympiad training as a kid I was taught the importance of getting the solution out as quickly as possible, who cares about other stuff like elegance.</p>",
        "id": 169020373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548905
    },
    {
        "content": "<p>I'm hoping that <code>refine</code> and <code>apply</code> don't add too much weight to the proof term! I know how to do them in term mode :-)</p>",
        "id": 169020404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561548947
    },
    {
        "content": "<p>that's exactly the point</p>",
        "id": 169020413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548957
    },
    {
        "content": "<p>Then we need more CS people working on the magic tactics, so that they produce nicer terms</p>",
        "id": 169020468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561548982
    },
    {
        "content": "<p>You don't really need them - you could do them in term mode. They are just slight shorthands for building that proof term</p>",
        "id": 169020473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561548986
    },
    {
        "content": "<p>why do I care about the size of a proof term? It's immediately forgotten.</p>",
        "id": 169020493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549020
    },
    {
        "content": "<p>I wish that was a bigger concern in lean-land. I care about it very much, but lean fights me when it comes to proof optimization</p>",
        "id": 169020494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561549020
    },
    {
        "content": "<p>It's not forgotten, it's stored and passed around and checked hundreds of time on travis and burns many CPU hours around the world</p>",
        "id": 169020507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561549053
    },
    {
        "content": "<p>I'm seriously thinking about buying a bigger CPU tonight</p>",
        "id": 169020950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561549559
    },
    {
        "content": "<p>I think I want more cores and more RAM, right?</p>",
        "id": 169020993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561549572
    },
    {
        "content": "<p>gone are the days of more pixels. I remember wanting more colours once!</p>",
        "id": 169021005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549598
    },
    {
        "content": "<p>I upgraded from 2 to 8</p>",
        "id": 169021016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549610
    },
    {
        "content": "<p>But some of the 8 colors were different on every other pixel so it was really more like... 12</p>",
        "id": 169021058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561549650
    },
    {
        "content": "<p>I think VScode doesn't use much more than 8 colors, so you should be fine now. Let's go for CPU cores instead</p>",
        "id": 169021059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561549651
    },
    {
        "content": "<p>Is a GPU of any use?</p>",
        "id": 169021066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549662
    },
    {
        "content": "<p>Unfortunately no</p>",
        "id": 169021072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561549673
    },
    {
        "content": "<p>But wait until <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> starts working on Lean 4 on GPU</p>",
        "id": 169021131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561549693
    },
    {
        "content": "<p>This isn't really a noob question and probably deserves its own thread. My laptop has something like 4 cores and 16 gigs of ram and even if I compile mathlib I don't ever get close to those 16 gigs.</p>",
        "id": 169021291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549867
    },
    {
        "content": "<p>I have RAM problems when I want to compile mathlib while using VScode on some other project</p>",
        "id": 169021323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561549919
    },
    {
        "content": "<p>In particular, I wonder whether somehow there's a theorem of the form \"if you have x cores, then don't buy any more than c * x gigs of ram because Lean won't use that much\" for some constant c.</p>",
        "id": 169021366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549939
    },
    {
        "content": "<p>When I want to compile mathlib and do something else too, I see how much free ram I have and then compile from the command line with the -M flag. Occasionally the build just runs out of memory and stops, and then I just start it again.</p>",
        "id": 169021394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561549985
    },
    {
        "content": "<p>I haven't compile mathlib in the last 6 weeks. <code>cache-olean</code> is quite awesome.</p>",
        "id": 169021429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561550040
    },
    {
        "content": "<p>Using the M flag also stopped my desktop (which had no swap) from randomly crashing when Lean suddenly goes beserk and fills up all memory.</p>",
        "id": 169021474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561550049
    },
    {
        "content": "<p>IIRC it still didn't stop Lean going crazy when invoked via VS Code, so I added some swap anyway.</p>",
        "id": 169021525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561550108
    },
    {
        "content": "<p>compiling mathlib is still required when working on mathlib</p>",
        "id": 169021560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561550139
    },
    {
        "content": "<blockquote>\n<p>It's not forgotten, it's stored and passed around and checked hundreds of time on travis and burns many CPU hours around the world</p>\n</blockquote>\n<p>You make it sound like I'm responsible for climate change!</p>",
        "id": 169026200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561553774
    },
    {
        "content": "<p>This is clearly what he means.</p>",
        "id": 169026267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561553823
    },
    {
        "content": "<p>And now you'll make it worse by flying to Portland</p>",
        "id": 169026312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561553858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fin_n_to_list</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">n_lcm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lcm</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">fin_n_to_list</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_to_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span>  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_univ</span><span class=\"o\">,</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card_fin</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">n_lcm_coprime</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">n_lcm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- need to prove</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bazout_int</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span> <span class=\"c1\">-- already proven</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bazout_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- this is Patrick&#39;s version, or we can use mario&#39;s version above</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">bazout_int</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"n\">sorry</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"c1\">-- need to prove</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">],</span>\n      <span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">]]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mythm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">n_lcm</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">t_geq_1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- need to prove</span>\n    <span class=\"k\">have</span> <span class=\"n\">ri_div_t</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">%</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- need to prove</span>\n    <span class=\"k\">let</span> <span class=\"n\">t_s_coprime</span> <span class=\"o\">:=</span> <span class=\"n\">n_lcm_coprime</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">coprime</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">bazout_nat</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"n\">t_geq_1</span> <span class=\"n\">hs</span> <span class=\"n\">t_s_coprime</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">trivial1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">fapply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">},</span> <span class=\"c1\">-- for all i xi ≥ 1</span>\n    <span class=\"k\">calc</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(((</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sum_to_mul</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">trivial1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hab</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">pow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"err\">^</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"n\">n</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169037916,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561560570
    },
    {
        "content": "<p>this is a record of my (our) progress, i am (we are) getting closer! but for me it's time to rest</p>",
        "id": 169038049,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1561560624
    },
    {
        "content": "<p>I know Lean doesn't care, but the name is <code>bezout</code> (or even better, Bézout)</p>",
        "id": 169038421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561560878
    },
    {
        "content": "<p>I'm inclined to say <em>baz…</em> (oh, well, never mind…)</p>",
        "id": 169038517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561560940
    },
    {
        "content": "<p>I assumed all along this was an intentional reference to the foo, bar, baz sequence, being a variation on Bézout</p>",
        "id": 169041288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561562707
    },
    {
        "content": "<p>but maybe I was wrong and Adrian wants to also credit <a href=\"https://en.wikipedia.org/wiki/Claude_Gaspard_Bachet_de_M%C3%A9ziriac\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Claude_Gaspard_Bachet_de_M%C3%A9ziriac\">Bachet</a></p>",
        "id": 169041398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1561562786
    },
    {
        "content": "<p>When using <code>induction t : e</code>, I get a weird inductive hypothesis. For example,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n_eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"c1\">-- ill-formed IH here</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>will create a goal </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">n_eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span>\n<span class=\"err\">⊢</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span>\n</pre></div>\n\n\n<p>but clearly, <code>n ≠ m</code> so I cannot use the IH for my proof. Am I doing something wrong? Note: I need <code>n_eq</code> in the theorem I am actually proving, so just dropping <code>n_eq :</code> is not an option.</p>",
        "id": 169070964,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561576469
    },
    {
        "content": "<p>What does \"I need <code>n_eq</code> in the theorem I am actually proving\" mean? What's wrong with just <code>induction n with m IH</code>?</p>",
        "id": 169071507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561576827
    },
    {
        "content": "<p><del>Wrong thread?</del></p>",
        "id": 169071577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561576884
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 169071596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561576901
    },
    {
        "content": "<blockquote>\n<p>What does \"I need <code>n_eq</code> in the theorem I am actually proving\" mean? What's wrong with just <code>induction n with m IH</code>?</p>\n</blockquote>\n<p>I mean, what hypothesis do you actually want, if it's not what you got?</p>",
        "id": 169071709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561576968
    },
    {
        "content": "<p>But yeah something is weird there. It's as if <code>induction n_eq : n</code> will always cause you trouble.</p>",
        "id": 169072061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577266
    },
    {
        "content": "<p>That was ill-phrased, let me clarify. I did not want to say that I need <code>n_eq</code>, but rather, I still want to be able to refer to <code>n</code> in both cases. Basically, I want to do some work for both case nat.zero and nat.succ using <code>all_goals</code> and referring to <code>n</code> like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n_eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n<span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169072066,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561577272
    },
    {
        "content": "<p>But when you do <code>induction n</code>, doesn't <code>n</code> literally disappear from the context?</p>",
        "id": 169072149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577316
    },
    {
        "content": "<p>Yep, that's what I want to avoid!</p>",
        "id": 169072171,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561577338
    },
    {
        "content": "<p>But isn't that how induction works?</p>",
        "id": 169072187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577351
    },
    {
        "content": "<p>I see what you're trying to do.</p>",
        "id": 169072221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577385
    },
    {
        "content": "<p>Why don't you just do what you want to do with n before you start on the induction?</p>",
        "id": 169072236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577399
    },
    {
        "content": "<p>Because then it introduces these statements as premises in my IH as well. Cf:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"c1\">-- check IH here</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169072432,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561577523
    },
    {
        "content": "<p>Yes you're right.</p>",
        "id": 169072485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577545
    },
    {
        "content": "<p>It's just <code>revert</code>ing all hypotheses with an <code>n</code> in before starting the induction.</p>",
        "id": 169072656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 169072703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577724
    },
    {
        "content": "<p>It must just be what the tactic does.</p>",
        "id": 169072715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577734
    },
    {
        "content": "<p>I think you can use <code>set</code> to rename <code>succ m</code> to <code>n</code> if you like</p>",
        "id": 169072718,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561577737
    },
    {
        "content": "<p>You can get round it by just applying the recursor directly like in the above.</p>",
        "id": 169072734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577752
    },
    {
        "content": "<p>I think you want to prove something like forall t &gt; 0, n \\le n * t</p>",
        "id": 169072825,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561577777
    },
    {
        "content": "<p>No, my idea doesn't work either.</p>",
        "id": 169072836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577789
    },
    {
        "content": "<p>And then apply it to n, and prove the case n =0 separately</p>",
        "id": 169072858,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561577809
    },
    {
        "content": "<p>Chris the question is how to get <code>induction</code> not to revert facts about n which you want left alone.</p>",
        "id": 169072884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577835
    },
    {
        "content": "<p><code>clear</code> first</p>",
        "id": 169072918,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561577872
    },
    {
        "content": "<p>Oh I guess I didn't really understand what you are trying to do</p>",
        "id": 169072986,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561577914
    },
    {
        "content": "<p>The question is how to get from</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nn : ℕ,\nthis : 0 ≤ n\n⊢ n ≤ n * n\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span>2 goals\ncase nat.zero\nthis : 0 ≤ 0\n⊢ 0 ≤ 0 * 0\n\ncase nat.succ\nm : ℕ,\nIH : m ≤ m * m,\nthis : 0 ≤ nat.succ m\n⊢ nat.succ m ≤ nat.succ m * nat.succ m\n</pre></div>",
        "id": 169072987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577914
    },
    {
        "content": "<p>i.e. \"do cases on <code>this</code> but do induction on the goal\"</p>",
        "id": 169073022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561577943
    },
    {
        "content": "<p>In general that's impossible, because if it didn't put the hypothesis at the start you could prove contradictions right. Unless I misunderstand.</p>",
        "id": 169073198,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561578068
    },
    {
        "content": "<p><code>induction n with m IH</code> gives</p>\n<div class=\"codehilite\"><pre><span></span>case nat.succ\nm : ℕ,\nIH : 0 ≤ m → m ≤ m * m,\nthis : 0 ≤ nat.succ m\n⊢ nat.succ m ≤ nat.succ m * nat.succ m\n</pre></div>\n\n\n<p>and <code>induction h : n with m IH</code> gives</p>\n<div class=\"codehilite\"><pre><span></span>case nat.succ\nn : ℕ,\nthis : 0 ≤ n,\nm : ℕ,\nIH : n = m → m ≤ m * m,\nh : n = nat.succ m\n⊢ nat.succ m ≤ nat.succ m * nat.succ m\n</pre></div>\n\n\n<p>In both cases the inductive hypothesis is rendered useless because the assumption is false.</p>",
        "id": 169073203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561578075
    },
    {
        "content": "<p>You might be right that it's impossible.</p>",
        "id": 169073226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561578108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198376\">@Kevin Kappelmann</span> That <code>n</code> really does not exist any more. This is the problem. If you have a statement which is true for all all nats, then don't prove it for <code>n</code>, prove it for all nats before the induction starts and then apply it to whatever you want to apply it to afterwards.</p>",
        "id": 169073345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561578192
    },
    {
        "content": "<p>I think it's misleading to think that the <code>n</code> has \"become succ m\" in the inductive step. The <code>n</code> is meaningfully attached to both <code>m</code> and <code>succ m</code> here.</p>",
        "id": 169073386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561578235
    },
    {
        "content": "<p>Here's a contradiction I can prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rubbish</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- case nat.succ</span>\n    <span class=\"c1\">-- m : ℕ,</span>\n    <span class=\"c1\">-- hm : m ≠ 1,</span>\n    <span class=\"c1\">-- n_n : ℕ,</span>\n    <span class=\"c1\">-- n_ih : n_n = m → n_n = 0 ∨ n_n &gt; m,</span>\n    <span class=\"c1\">-- h : succ n_n = m</span>\n    <span class=\"c1\">-- ⊢ succ n_n = 0 ∨ succ n_n &gt; m</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n_n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n_n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hm</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_of_lt</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">rubbish</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 169074089,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561578721
    },
    {
        "content": "<p>Alright, thanks. Using induction with this pattern <code>induction t : e</code> is pretty useless then, isn't it?</p>",
        "id": 169074364,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561578870
    },
    {
        "content": "<p>Maybe for naturals. There are definitely some uses, but I can't think of any right now.</p>",
        "id": 169074585,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561579035
    },
    {
        "content": "<p><code>cases t : e</code> is surely useful.</p>",
        "id": 169074708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561579091
    },
    {
        "content": "<p>But when it really is an induction, won't the inductive hypothesis end up contradicting another hypothesis most of the time?</p>",
        "id": 169074794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561579147
    },
    {
        "content": "<p>I think all of the time, given the freely generated nature of inductive types.</p>",
        "id": 169074938,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561579218
    },
    {
        "content": "<p>Yeah, I'm just trying to prove <code>list.rec</code> with <code>induction h : l</code> and I don't think it can be done.</p>",
        "id": 169074961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561579245
    },
    {
        "content": "<p>Maybe it would be useful for custom recursors when you do <code>induction ... using ...</code></p>",
        "id": 169075005,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561579270
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- attempt to prove list.rec</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">},</span>\n    <span class=\"n\">C</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">tl</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">T</span> <span class=\"n\">C</span> <span class=\"n\">hnil</span> <span class=\"n\">hcons</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnil</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hcons</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- dead</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169075178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561579412
    },
    {
        "content": "<p>mathlib has a fair number of uses (<code>git grep '\\binduction .*:'</code>) but I didn't check whether they could be replaced by <code>cases</code></p>",
        "id": 169075340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561579547
    },
    {
        "content": "<p>Or just search <code>\\binduction .*:</code> in VS Code but switch on the <code>.*</code> option (use regular expression)</p>",
        "id": 169076380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561580426
    },
    {
        "content": "<p>All the ones I checked, could be replaced by <code>cases</code>. There are loads in <code>data/seq</code> and I didn't check any of them.</p>",
        "id": 169076591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561580632
    },
    {
        "content": "<p>Hello,<br>\nUpon adding mathlib as a project dependency, searching for definitions with emacs helm errors out due to excessive memory consumption. I don't see any mentions of this in github lean-mode issues. Is this to be expected?<br>\nThanks,<br>\nScott</p>",
        "id": 169097926,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561601534
    },
    {
        "content": "<p>Running <code>leanpkg build</code> in your project should help</p>",
        "id": 169098105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561601763
    },
    {
        "content": "<p>That will build whatever parts of mathlib your project currently imports, so that later lean won't have to compile them on the fly</p>",
        "id": 169098128,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561601804
    },
    {
        "content": "<p>If you just want to build all of mathlib, I think <code>lean --make _target/deps/mathlib/src</code> should work</p>",
        "id": 169098192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561601879
    },
    {
        "content": "<p>I see -- I tried 'leanpkg build' and and still getting memory issues. I'll try building all of mathlib.</p>",
        "id": 169098366,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561602045
    },
    {
        "content": "<p>You might need to restart the lean server after running <code>leanpkg build</code> as well</p>",
        "id": 169098394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561602113
    },
    {
        "content": "<p>My brain isn't in Lean mode so I forget the key</p>",
        "id": 169098442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561602138
    },
    {
        "content": "<p>Oh, that did it</p>",
        "id": 169098446,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561602143
    },
    {
        "content": "<p>C-c C-r</p>",
        "id": 169098452,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561602151
    },
    {
        "content": "<p>Wonderful, thank you</p>",
        "id": 169098466,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561602183
    },
    {
        "content": "<blockquote>\n<p>My brain isn't in Lean mode so I forget the key</p>\n</blockquote>\n<p>If only brains could context switch with a simple M-x ...</p>",
        "id": 169098524,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561602255
    },
    {
        "content": "<p>Separate question -- is there a general rule of thumb of when to use the tactic mode for proofs?</p>",
        "id": 169102918,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561609502
    },
    {
        "content": "<p>Or is it just a stylistic choice</p>",
        "id": 169102927,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561609530
    },
    {
        "content": "<p>when it's easier</p>",
        "id": 169102986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561609609
    },
    {
        "content": "<p>or more compact</p>",
        "id": 169102990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561609622
    },
    {
        "content": "<p>The best approach is to use a combination of both and be comfortable going back and forth</p>",
        "id": 169103001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561609654
    },
    {
        "content": "<p>is going from regular to tactic mode using \"by\"?</p>",
        "id": 169103125,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561609847
    },
    {
        "content": "<p>and is the opposite direction using exact?</p>",
        "id": 169103139,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561609878
    },
    {
        "content": "<p>yes</p>",
        "id": 169103190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561609936
    },
    {
        "content": "<p>yes to both directions?</p>",
        "id": 169103269,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561610068
    },
    {
        "content": "<p>Also I didn't realize a bit ago that you can use start begin end blocks in the middle of a proof</p>",
        "id": 169103344,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561610217
    },
    {
        "content": "<p>I find that for \"easy\" stuff (i.e. proofs that you know ought to be easy, so you don't actually plan ahead of time what you're doing!), I always start in tactic mode, blunder about for a bit (often letting <code>tidy</code> do some of the work), then end up with a successful tactic script. Now you're only half done, and you convert all the parts of the proof that are more succinct in term mode back into term mode.</p>",
        "id": 169103509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561610458
    },
    {
        "content": "<p>What is tidy?</p>",
        "id": 169103636,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561610721
    },
    {
        "content": "<p>I found it</p>",
        "id": 169103682,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561610771
    },
    {
        "content": "<p>Is there a preference for more specificity in the proofs? Eg why not leave tidy in the proof</p>",
        "id": 169103834,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561611096
    },
    {
        "content": "<p>Is there a Lean analog of crush?</p>",
        "id": 169104004,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561611371
    },
    {
        "content": "<p>that's tidy</p>",
        "id": 169104007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561611388
    },
    {
        "content": "<p>You don't want to leave tidy in the proof because it's slow. It's basically a meta-tactic that finds a tactic script that you should use in place of tidy</p>",
        "id": 169104025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561611432
    },
    {
        "content": "<p>makes sense</p>",
        "id": 169104408,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561612003
    },
    {
        "content": "<p>It seems that in order to find tidy in emacs definition search I must first import it</p>",
        "id": 169104468,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561612114
    },
    {
        "content": "<p>which I guess is fine, I could just grep through my mathlib directory if I'm looking for something</p>",
        "id": 169104525,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561612205
    },
    {
        "content": "<p>but is this expected behavior</p>",
        "id": 169104550,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561612285
    },
    {
        "content": "<p>yes, this is unfortunate but unavoidable</p>",
        "id": 169104756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561612635
    },
    {
        "content": "<p>You can try importing everything if you want the searches to have good results, but that can take a lot of memory</p>",
        "id": 169104762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561612672
    },
    {
        "content": "<p>ok</p>",
        "id": 169105034,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561613050
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 169105368,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561613609
    },
    {
        "content": "<p>Where can I find documentation for a tactic such as apply_assumption?</p>",
        "id": 169108348,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618021
    },
    {
        "content": "<p>Not at a computer right now but there's a big file in <code>docs</code> in mathlib which contains information about most tactics. Is it <code>docs/tactics.md</code> or something?</p>",
        "id": 169108453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561618165
    },
    {
        "content": "<p>This is useful for mathlib, thanks</p>",
        "id": 169108546,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618319
    },
    {
        "content": "<p>but apply_assumption is in core.lean</p>",
        "id": 169108599,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618331
    },
    {
        "content": "<p>You can also just type <code>apply_assumption</code> inside a <code>begin ... end</code> block, and hover the mouse over it. The tooltip that pops up should contain the doc-comment, which is usually just a slightly abbreviated version of the documentation in <code>docs/tactics.md</code>.</p>",
        "id": 169108603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618334
    },
    {
        "content": "<p>Read the definition, then. :-)</p>",
        "id": 169108617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618350
    },
    {
        "content": "<p>Put your cursor in <code>apply_assumption</code>, and hit F12 to jump to the definition.</p>",
        "id": 169108635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618370
    },
    {
        "content": "<p>The community branch of Lean would probably accept PRs adding doc comments to any/all of these core tactics! :-)</p>",
        "id": 169108651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618391
    },
    {
        "content": "<p>(Remember here that core Lean is frozen while development of Lean 4 takes place, so the community branch, which is only just getting off the ground now, is the only place we can improve the documentation of core stuff.)</p>",
        "id": 169108668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618434
    },
    {
        "content": "<p>I take back what I said -- apply assumption is in mathlib/src/tactic/core.lean</p>",
        "id": 169108740,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618491
    },
    {
        "content": "<p>so why doesn't docs/tactics.md mention it?</p>",
        "id": 169108767,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618533
    },
    {
        "content": "<p>Sorry about the confusing naming. <code>src/tactic/core.lean</code> is really basic tooling stuff (mostly not used interactively). <code>src/tactic/basic.lean</code> is all the most common interactive tactics, and <code>src/tactic/default.lean</code> is the kitchen sink, importing nearly all the mathlib defined tactics.</p>",
        "id": 169108828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618593
    },
    {
        "content": "<p>Probably because <code>apply_assumption</code> has been around a long time, perhaps predating <code>docs/tactics.md</code>? I'm not sure. Comment PR definitely accepted. :-)</p>",
        "id": 169108842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618626
    },
    {
        "content": "<p>Where does the tooltip come from?</p>",
        "id": 169108941,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618779
    },
    {
        "content": "<p>Because I do get a short description this way</p>",
        "id": 169108992,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618807
    },
    {
        "content": "<p>The doc-comment.</p>",
        "id": 169108995,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618813
    },
    {
        "content": "<p>When you make a definition, you can put a comment before it</p>",
        "id": 169108998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618820
    },
    {
        "content": "<p>using the <code>/-- ... -/</code> syntax (note the double hyphen at the open comment)</p>",
        "id": 169109008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618842
    },
    {
        "content": "<p>But the definition of apply_assumption has no such comment above it</p>",
        "id": 169109015,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618853
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 169109016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618857
    },
    {
        "content": "<p>Mine does?</p>",
        "id": 169109038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618892
    },
    {
        "content": "<p>There are two apply_assumption s</p>",
        "id": 169109040,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618895
    },
    {
        "content": "<p>The one in solve_by_elim.lean has the comment</p>",
        "id": 169109046,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618912
    },
    {
        "content": "<p>When I hit F12 on apply_assumption, I was taken to the one in <code>solve_by_elim.lean</code>.</p>",
        "id": 169109047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618915
    },
    {
        "content": "<p>Ah!</p>",
        "id": 169109072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618922
    },
    {
        "content": "<p>There are very often two versions of a given tactic.</p>",
        "id": 169109092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618933
    },
    {
        "content": "<p>One in the <code>tactic.interactive</code> namespace, and one in the <code>tactic</code> namespace.</p>",
        "id": 169109099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618946
    },
    {
        "content": "<p>Do you often have to be careful which version of a tactic you are importing?</p>",
        "id": 169109108,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561618971
    },
    {
        "content": "<p>The interactive one is accessible in <code>begin ... end</code> blocks, and very often does some parsing tricks so you can conveniently control it</p>",
        "id": 169109110,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618974
    },
    {
        "content": "<p>and non-interactive one is usually not intended for use in <code>begin ... end</code> blocks, but instead by other people writing tactics.</p>",
        "id": 169109118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561618993
    },
    {
        "content": "<p>ok</p>",
        "id": 169109121,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561619007
    },
    {
        "content": "<p>Unless you know what you're doing, typically always use the interactive version.</p>",
        "id": 169109122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561619008
    },
    {
        "content": "<p>This did solve my original question though -- the documentation is (besides the tactics.md) in the comment above the definition. I just didn't see this because I was looking at the wrong version of the definition</p>",
        "id": 169109300,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561619222
    },
    {
        "content": "<p>is leanprover-community/lean much different from the original?</p>",
        "id": 169109602,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561619633
    },
    {
        "content": "<p>I don't think so. Simon Hudon is the one to ask.</p>",
        "id": 169109866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561619938
    },
    {
        "content": "<p>ok</p>",
        "id": 169109930,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1561620006
    },
    {
        "content": "<p>It's not different enough from the original Lean to have ever made me contemplate switching.</p>",
        "id": 169109962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561620060
    },
    {
        "content": "<p>right now it's just accumulating bugfixes and little things</p>",
        "id": 169110798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561621032
    },
    {
        "content": "<p>we'll let you know when it's ready for prime time</p>",
        "id": 169110806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561621050
    },
    {
        "content": "<p><code>helm</code> often gives me the same error. i find it usually works again after <code>C-c C-r</code></p>",
        "id": 169115569,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1561625654
    },
    {
        "content": "<p>What's the recommended way to use zeta-reduction at a hypothesis? E.g. going from <code>hyp : let n : ℕ := 2 in 1 + 1 = n</code> to <code>hyp : 1 + 1 = 2</code>? I know that <code>delta at hyp</code> works, but isn't this strictly speaking a zeta-reduction I am performing?<br>\nedit: fix typo</p>",
        "id": 169221322,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561725945
    },
    {
        "content": "<p>These are definitionally equal I guess, so you can just use <code>change</code>.</p>",
        "id": 169221405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561726004
    },
    {
        "content": "<p>yep, sorry for the typo. I do not want to re-state the unfolded hypothesis though.</p>",
        "id": 169221483,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1561726106
    },
    {
        "content": "<p>Why do additive monoids have scalar multiplication defined in terms of exponentiation? I found this really surprising:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 169227770,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561731095
    },
    {
        "content": "<p><code>multiplicative alpha</code> means \"I know it's addition, but pretend it's multiplication\". It's some sort of attempt to not duplicate effort.</p>",
        "id": 169228296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561731439
    },
    {
        "content": "<p>a monoid and an additive monoid are the same, but Lean is less good than mathematicans at dealing with things like this. At least in this situation we have some automation to use.</p>",
        "id": 169228427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561731503
    },
    {
        "content": "<p>That makes sense, but even when the monoid operation is interpreted as multiplication, is it conventional to call <code>pow</code> scalar multiplication? To me, <code>smul</code> seems to only make sense with vector spaces/modules.</p>",
        "id": 169228647,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561731651
    },
    {
        "content": "<p>Does anyone know why the strictness of when names are resolved is kind of flipped between quoted names and expressions (assuming I understand it correctly)? By this I mean that using <code> `my.name</code> the name is not resolved when parsing the tactic, while with <code> ``my.name</code> it is, so more backticks =&gt; resolve sooner. But with expressions, it's the opposite - with <code> `(expr)</code>, symbols are resolved at parse time, with <code> ``(expr)</code> partially so, and with <code> ```(expr)</code> resolving symbols is deferred to tactic runtime. EDIT: fixed backticks, thanks Johan!</p>",
        "id": 170529869,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1562754838
    },
    {
        "content": "<p>On Zulip formatting: Use <code> more ```backticks ``to `surround ```the code</code> then the number of <code> `adjacent </code> backticks in the code.</p>",
        "id": 170530201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562755142
    },
    {
        "content": "<p>And use the \"quote and reply\" option to see exactly what Johan did :-)</p>",
        "id": 170536732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562761812
    },
    {
        "content": "<p>Does the syntax</p>\n<div class=\"codehilite\"><pre><span></span>theorem perm_sort : forall l, sort l ~ l\n| [] := refl\n| (a::l) := ...\n</pre></div>\n\n\n<p>not give inductive hypotheses?</p>",
        "id": 170555769,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562775707
    },
    {
        "content": "<p>Right now in the second block I have proven<br>\n<code>sort l ~ l</code>, and could really use a forall</p>",
        "id": 170555863,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562775749
    },
    {
        "content": "<p>use <code>perm_sort l</code> in the second block to access the IH</p>",
        "id": 170556168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562775978
    },
    {
        "content": "<p>oh ok</p>",
        "id": 170556269,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562776057
    },
    {
        "content": "<p>Thanks</p>",
        "id": 170556294,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562776080
    },
    {
        "content": "<p>How do I specify which instance of a definition rw unfolds?</p>",
        "id": 170559007,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562778057
    },
    {
        "content": "<p>suppose I have the goal <code>rev (rev (h :: t)) = h :: t</code></p>",
        "id": 170559042,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562778084
    },
    {
        "content": "<p><code>rw rev</code> results in <code>rev_aux (rev (h :: t)) nil = h :: t</code></p>",
        "id": 170559131,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562778123
    },
    {
        "content": "<p>But I want rw to act on the inner instance of rev</p>",
        "id": 170559181,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562778154
    },
    {
        "content": "<p>I just found change, which seems to do the trick</p>",
        "id": 170559510,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1562778379
    },
    {
        "content": "<p><code>change</code> will work if the rewrite is definitional, otherwise you can try <code>convert_to</code> which will let you supply the equality proof obligation after</p>\n<p><code>conv {}</code> will let you navigate inside an expression and surgically rewrite</p>",
        "id": 170561134,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1562779557
    },
    {
        "content": "<p>is there a neat way to only generalize a specific variable?</p>",
        "id": 170588333,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562800597
    },
    {
        "content": "<p>Hi, what is the meaning of <code>@@</code>?</p>",
        "id": 170588672,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562800950
    },
    {
        "content": "<blockquote>\n<p>is there a neat way to only generalize a specific variable?</p>\n</blockquote>\n<p>Does the dosctring for <code>generalize</code> answer your question?</p>",
        "id": 170589627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562801953
    },
    {
        "content": "<blockquote>\n<p>Hi, what is the meaning of <code>@@</code>?</p>\n</blockquote>\n<p>It's explained <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#using-the-library\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#using-the-library\">just above here</a> in TPIL. Searching for @@ didn't work for me but I knew it was in there.</p>",
        "id": 170589832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562802175
    },
    {
        "content": "<p>i don't think so - i should have been more clear, sorry! i'm looking for a neat way to generalize a specific occurence of a variable, not all of them</p>",
        "id": 170589849,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562802198
    },
    {
        "content": "<p>oh, i guess something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span>lemma foo {α : Type*} (P : α → α → Prop) (a : α) : P a a :=\nbegin\n  have h : ∀ b : α, P b a, sorry,\n  exact h a\nend\n</pre></div>\n\n\n<p>will do</p>",
        "id": 170591589,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562804228
    },
    {
        "content": "<p>Is it possible to redefine the \"default constructor\"? I mean, the one used by <code>⟨⟩</code> notation.</p>",
        "id": 170591804,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562804453
    },
    {
        "content": "<p>afaik you can only use that notation if there is only one constructor</p>",
        "id": 170592009,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562804704
    },
    {
        "content": "<p>You can make a second structure with the constructor you like and then define a map to the first structure. If they were classes you could do this with type class inference I guess (on a good day with a following wind)</p>",
        "id": 170594239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562807912
    },
    {
        "content": "<p>You want more than</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 170594314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562808007
    },
    {
        "content": "<p>I am struggling a bit to imagine the syntax of what some super-precise <code>generalize</code> tactic would look like but I understand your question now (and don't know the answer)</p>",
        "id": 170594353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562808107
    },
    {
        "content": "<p>ah, suffices is a neat syntax, i forgot about that one.<br>\nit turns out that for my specific use case, simply a precise generalize wouldn't do. i also needed additional assumptions about <code>b</code> (in my use-case, <code>α</code> was <code>list foo</code> and i additionally needed <code>b ⊆ a</code> to prove my lemma).<br>\nit probably isn't a good idea to have tactics for use cases this concrete, and \"suffices\" is certainly readable enough.</p>",
        "id": 170613330,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1562834187
    },
    {
        "content": "<p>What's the convention for defining stuff on structures that can be both mul-based and add-based, e.g. <code>semigroup</code>/<code>add_semigroup</code>? Should I define it on <code>semigroup</code> and then somehow transport to <code>add_semigroup</code> using <code>additive</code>, the other way around, or something else?</p>",
        "id": 170631545,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1562851069
    },
    {
        "content": "<p>Define it on semigroup and transfer with <code>to_additive</code>.</p>",
        "id": 170631945,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562851379
    },
    {
        "content": "<p>Thanks Chris!</p>",
        "id": 170632152,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1562851544
    },
    {
        "content": "<p>See <code>group_theory/quotient_group.lean</code> for an example of how this looks.</p>",
        "id": 170636720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562854503
    },
    {
        "content": "<p>Can the equational lemmas for a function do something more than definitional/beta-reduction? I have a goal of the form (simplified) <code>fn1 (fn2 some_expr) = fn1 (fn2 other_expr)</code>, s.t. <code>fn1 \\comp fn2</code> takes both <code>expr</code>s to the same value (and the <code>expr</code>s contain some more calls to <code>fn1/2</code>). So, this should follow from <code>refl</code>, but it doesn't. If however I do <code>repeat { rw [fn1] }, repeat { rw [fn2] }</code> first, <code>refl</code> works.</p>",
        "id": 170791958,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563028181
    },
    {
        "content": "<p>A related question - is there a tactic equivalent of <code>#reduce</code>?</p>",
        "id": 170793953,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563031561
    },
    {
        "content": "<p>The equation lemmas for a function are not always definitionally true</p>",
        "id": 170796103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563035011
    },
    {
        "content": "<p>They're simp lemmas though so <code>simp</code> might work</p>",
        "id": 170796153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563035049
    },
    {
        "content": "<p>Huh okay, that is kind of surprising - I thought they were all <code>refl</code>.  Thanks!</p>",
        "id": 170798201,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563038584
    },
    {
        "content": "<p>The main time when they are not <code>rfl</code> is when well founded recursion is used. This has to do with why definitional equality is undecidable and lean's defeq is an underapproximation of the real thing</p>",
        "id": 170801612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563044804
    },
    {
        "content": "<p>Oooh yeah it is recursive - it's transitivity that's missing, right? It seemed to me like it should still reduce but is what you're saying that the <code>has_well_founded</code>s prevent it from reducing?</p>",
        "id": 170802186,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563045830
    },
    {
        "content": "<p>I came across this while trying to write some reflection tactics a la <code>ring2</code>, where in <code>correctness</code> you have <code>(H : horner_expr.of_csexpr r₁ = horner_expr.of_csexpr r₂)</code> by <code>rfl</code>. <code>of_csexpr</code> is defined recursively but it seems to reduce just fine, however I have something more like <code>(of_csexpr r1).eval = (of_csexpr r2).eval</code>, where <code>eval</code> is also recursive and this breaks (needs <code>simp; refl</code>).</p>",
        "id": 170802295,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563045963
    },
    {
        "content": "<p>I can get rid of the <code>eval</code>s so this isn't really a problem, just confusing.</p>",
        "id": 170802304,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563045998
    },
    {
        "content": "<p>Structural recursion is fine, it's just when you use well founded recursion, i.e. recursion on <code>acc</code> that it gets flaky</p>",
        "id": 170802428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563046249
    },
    {
        "content": "<p>I see, I'm doing some reassociation which I think has to rely on <code>sizeof</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reassoc</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">reassoc</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">reassoc</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 170802625,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563046670
    },
    {
        "content": "<p>Right, that's not a structural recursion, but you can rewrite it to be one</p>",
        "id": 170802986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563047386
    },
    {
        "content": "<p>Yup, <code>refl</code>s now, thanks!</p>",
        "id": 170803351,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563048037
    },
    {
        "content": "<p>Is this assumption correct: \"after compiling <code>somefile.lean</code> with <code>lean --make</code>, forall theorems in <code>somefile</code>, the resulting <code>somefile.olean</code> contains the theorems' names and types, but because they are in <code>Prop</code> and have already been typechecked, the proof terms are discarded and Lean trusts previously built modules to have correctly-typechecked definitions\"?</p>",
        "id": 171300969,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563579177
    },
    {
        "content": "<p>Okay, it's partly correct and partly not. Lean keeps the proof terms (i.e. the \"values\" of <code>theorem</code> definitions) in <code>.olean</code> files, but they're stored with a high \"trust level\" value, and I <em>think</em> that when a such a high-trust definition is imported, its value is <a href=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.h#L93\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/kernel/inductive/inductive.h#L93\">not typechecked again</a> and the type is trusted.</p>",
        "id": 171301875,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563580498
    },
    {
        "content": "<p>From <code>lean --help</code>:</p>\n<div class=\"codehilite\"><pre><span></span>  --trust=num -t     trust level (default: max) 0 means do not trust any macro,\n                     and type check all imported modules\n</pre></div>",
        "id": 171354736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563682134
    },
    {
        "content": "<p>I think, by default Lean trusts that all <code>import</code>ed <code>.olean</code> files are correct but you can tell it to double-check them.</p>",
        "id": 171354746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563682175
    },
    {
        "content": "<p>Trying one of the excercises I am stuck with deriving A \\or \\not A:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h₂</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n           <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₃</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h₁</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"n\">h₃</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Can someone point me in the right direction?</p>",
        "id": 171445739,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1563813162
    },
    {
        "content": "<p>This is just the law of the excluded middle, which is not true in constructive logic</p>",
        "id": 171446160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563813491
    },
    {
        "content": "<p>Are you allowed to use classical logic?</p>",
        "id": 171446179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563813514
    },
    {
        "content": "<p>(See also <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#the-law-of-the-excluded-middle\">TPIL 11.6</a>)</p>",
        "id": 171446189,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563813531
    },
    {
        "content": "<p>It can be done constructively I believe (but don't trust me, I am a classical guy)</p>",
        "id": 171446223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563813579
    },
    {
        "content": "<p>It's something like <code>classical.em</code>, what you want</p>",
        "id": 171446301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563813609
    },
    {
        "content": "<p>its just a task from <a href=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html\">https://leanprover.github.io/logic_and_proof/propositional_logic_in_lean.html</a>, i have not read anything about classical logic being forbidden</p>",
        "id": 171446380,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1563813704
    },
    {
        "content": "<p>lol</p>",
        "id": 171446438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563813730
    },
    {
        "content": "<p>i think it is meant to be done without imports</p>",
        "id": 171446510,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1563813812
    },
    {
        "content": "<p>Here is a constructive proof, adapted from <code>iff_not_self</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hna</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hna</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hna</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 171447029,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563814174
    },
    {
        "content": "<p>nice thanks!!</p>",
        "id": 171447327,
        "sender_full_name": "Lennard Henze",
        "timestamp": 1563814408
    },
    {
        "content": "<p>Is there an escape sequence for producing french quotes in the web editor / VS Code? More generally, is there a comprehensive list of escape sequences? Ta.</p>",
        "id": 172516901,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565021950
    },
    {
        "content": "<p>Hey Gihan!</p>",
        "id": 172516943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565021978
    },
    {
        "content": "<p>It's in some translations.json file somewhere, hang on...</p>",
        "id": 172516955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565021993
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a></p>",
        "id": 172517073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022058
    },
    {
        "content": "<p>Thanks very much Kevin!</p>\n<p>I see you're teaching M1F to a virtual tutee. Have you had success teaching Lean to corporeal M1F students?</p>",
        "id": 172517113,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565022096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> and <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> are both Imperial undergraduates who have contributed far more than me to Lean's maths library.</p>",
        "id": 172517185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022132
    },
    {
        "content": "<p><code>\\f&lt;</code> and <code>\\f&gt;</code> apparently</p>",
        "id": 172517252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022214
    },
    {
        "content": "<p>I don't usually use them</p>",
        "id": 172517261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022229
    },
    {
        "content": "<p>Amazing! I'm tempted to try this at Exeter, but I'm worried that formal proof may put off the bulk of students.</p>",
        "id": 172517315,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565022249
    },
    {
        "content": "<p>I have a lot of tips. If you do it naively then definitely you can put a lot of people off. One initial tip is not to teach people new maths and Lean at the same time.</p>",
        "id": 172517402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022346
    },
    {
        "content": "<p>by \"people\" I mean \"UG mathematicians\"</p>",
        "id": 172517410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022356
    },
    {
        "content": "<p>so if it's your job to teach them new maths then it can get quite tricky finding the balance.</p>",
        "id": 172517475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022380
    },
    {
        "content": "<p>I'm speaking in Exeter at the end of Nov, we can maybe talk then. Unfortunately I'm giving the number theory seminar rather than a general colloquium.</p>",
        "id": 172517542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022462
    },
    {
        "content": "<p>OK, that would be great. I look forward to it.</p>\n<p>My main issue really is how to teach proof tout court. Most written arguments I see from new students are full of non sequiturs. I thought Lean might be a way for students to determine whether their arguments were valid.</p>",
        "id": 172517890,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565022744
    },
    {
        "content": "<p>This was one of the reasons I got interested in Lean too.</p>",
        "id": 172517919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022778
    },
    {
        "content": "<p>I'm sure this sort of software has got a lot of potential to change the way undergraduate mathematics is taught.</p>",
        "id": 172517949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022803
    },
    {
        "content": "<p>But I'm still very much experimenting with how to do it. Patrick Massot also tried</p>",
        "id": 172517975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022833
    },
    {
        "content": "<p>using Lean with a bunch of UGs at Orsay in their introduction to proof course</p>",
        "id": 172518027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565022850
    },
    {
        "content": "<p>Thanks. I've also seen Jeremy Avigad's 'Logic and Proof' notes.</p>",
        "id": 172518197,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565023007
    },
    {
        "content": "<p>Yeah, we're all trying to change the world.</p>",
        "id": 172518228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565023036
    },
    {
        "content": "<p>An education specialist is writing a paper about my intervention, should be ready next month apparently.</p>",
        "id": 172518255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565023068
    },
    {
        "content": "<p>She interviewed lots of M1F students</p>",
        "id": 172518317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565023089
    },
    {
        "content": "<p>I'd be interested in reading the article. Where will it be published?</p>",
        "id": 172518479,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565023216
    },
    {
        "content": "<p>Don't know, I guess they will have some education journal ecosystem but I don't know anything about it.</p>",
        "id": 172518511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565023254
    },
    {
        "content": "<p>Well, maybe I'll find out in November. See you then and thanks for the information.</p>",
        "id": 172518666,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565023392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span>: If you see a character in VSCode, and you are wondering how to input it, you can also hover your mouse over the character, and in a pop-up it will tell you how to type it.</p>",
        "id": 172532018,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565034293
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 172541913,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1565042211
    },
    {
        "content": "<p>Question related to proof irrelevance: I was wondering what Lean is doing in this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">test</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t1</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t1</span> <span class=\"bp\">=</span> <span class=\"n\">t2</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t1</span> <span class=\"k\">with</span> <span class=\"n\">n1</span> <span class=\"n\">pos1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t2</span> <span class=\"k\">with</span> <span class=\"n\">n2</span> <span class=\"n\">pos2</span><span class=\"o\">,</span> <span class=\"c1\">-- current goal : {n := n1, pos := pos1} = {n := n2, pos := pos2}</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n1</span> <span class=\"bp\">=</span> <span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[],</span> <span class=\"c1\">-- current goal : n1 = n2, but why?</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is simp matching the parts of the structure that live in Prop and decides that we need <code>n1 = n2</code>? How is it deciding that? Just by unification? (PS. I know that Lean auto-generates <code>test.mk.inj_eq</code>)</p>",
        "id": 173242232,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1565816547
    },
    {
        "content": "<p>Yeah, probably these <code>mk.inj_eq</code> lemmas are hard-coded to be simp lemmas, even when doing <code>simp only</code>.</p>",
        "id": 173244750,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1565818630
    },
    {
        "content": "<p>The simp option <code>constructor_eq := ff</code> disables this behavior.</p>",
        "id": 173245868,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565819631
    },
    {
        "content": "<p>Given a function <code>f</code> taking arguments from a set <code>S : set ℕ</code>, a number <code>n : ℕ</code>, and the knowledge that <code>n ∈ S</code>, how can I apply <code>f</code> on <code>n</code>, that is, how do I make this work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"c1\">-- type mismatch</span>\n</pre></div>",
        "id": 174794053,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567521149
    },
    {
        "content": "<p><code>f ⟨n, hyp⟩</code></p>",
        "id": 174794427,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567521399
    },
    {
        "content": "<p>Ahh, right! Thanks - you're the best!</p>",
        "id": 174794552,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567521478
    },
    {
        "content": "<p>Maybe the piece you missed is that Lean can make sense of <code>(f : S → ℕ)</code> only because it inserts a coercion of <code>S</code> to the subtype <code>{n : ℕ // n ∈ S}</code></p>",
        "id": 174794976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567521721
    },
    {
        "content": "<blockquote>\n<p>Maybe the piece you missed is that Lean can make sense of <code>(f : S → ℕ)</code> only because it inserts a coercion of <code>S</code> to the subtype <code>{n : ℕ // n ∈ S}</code></p>\n</blockquote>\n<p>That was indeed the case :)</p>",
        "id": 174796117,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567522383
    },
    {
        "content": "<p>I tried proving a very simple result, the formula <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>6</mn><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">6\\sum_{i=0}^n i^2 = n(n+1)(2n+1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.113818em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>. My Lean proof, using equational reasoning, is much longer than I anticipated (30 lines). Could someone suggest a way to shorten the proof?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ssquares_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- trivial base case</span>\n<span class=\"o\">(</span>\n<span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n<span class=\"k\">calc</span>\n<span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">left_distrib</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span> <span class=\"mi\">6</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">right_distrib</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"n\">k</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"mi\">6</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"mi\">6</span> <span class=\"n\">k</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">k</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">((</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">right_distrib</span> <span class=\"mi\">3</span> <span class=\"mi\">1</span> <span class=\"n\">k</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"n\">k</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"o\">))</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">3</span> <span class=\"n\">k</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">left_distrib</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">left_distrib</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">right_distrib</span> <span class=\"n\">k</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">left_distrib</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 175177305,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1567934278
    },
    {
        "content": "<p>What is your definition of <code>ssquares</code>?</p>",
        "id": 175177408,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567934449
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ssquares</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 175177420,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1567934481
    },
    {
        "content": "<p>Let me introduce you to the <code>ring</code> tactic of <code>mathlib</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ssquares</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ssquares_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- trivial base case</span>\n<span class=\"err\">$</span>\n<span class=\"k\">assume</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n<span class=\"k\">calc</span>\n<span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 175177487,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567934623
    },
    {
        "content": "<p>But really, <code>mathlib</code> has machinery for doing finite sums already, without starting from the beginning e.g. with your definition of <code>ssquares</code>. A place to start to look is in <code>data.finset</code>, for <code>finset.sum</code>.</p>",
        "id": 175177531,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567934683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> thanks so much.</p>",
        "id": 175177544,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1567934757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> , here is also a way it could be done in tactic mode</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ssquares</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ssquares_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ssquares</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ssquares</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">left_distrib</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span> <span class=\"c1\">-- It is sad that this line is needed</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 175177813,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567935266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, why is the commented line needed there? Is this a bug?</p>",
        "id": 175177814,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567935291
    },
    {
        "content": "<p>Ring doesn't know about succ</p>",
        "id": 175177865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567935420
    },
    {
        "content": "<p>How do we make it</p>",
        "id": 175177870,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567935430
    },
    {
        "content": "<p>I guess it is one more case in the recursion</p>",
        "id": 175177873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567935465
    },
    {
        "content": "<p>Is there any appetite for some tactic-ish thing <code>normalize</code> which does all these common rewrites? Kevin could make his <code>induction'</code> just (essentially) <code>induction &gt;&gt; normalize</code></p>",
        "id": 175177930,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567935598
    },
    {
        "content": "<p>I think the normalization is domain specific</p>",
        "id": 175178077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567935908
    },
    {
        "content": "<p>Lean works fine on my Windows machine, but I have a couple of issues on the Mac.</p>\n<p>My main problems is that VS Code doesn't seem to access the added dependencies.</p>\n<p>From the Mac command line, If I move into the directory of the Lean project I've already created on Windows (and synced via OneDrive) to which I have already added mathlib as a dependency, I can execute .lean files perfectly, but I get import resolution errors when attempting the same through VS Code.</p>\n<p>For example, if the file <code>tsum.lean</code> has the contents</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n    <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tsum</span> <span class=\"mi\">10</span>\n</pre></div>\n\n\n<p>then executing, at the terminal, <code>lean tsum.lean</code> produces the expected output <code>55</code>. </p>\n<p>But VS Code presents me with the error messages:</p>\n<div class=\"codehilite\"><pre><span></span>file &#39;algebra/big_operators&#39; not found in the LEAN_PATH\n\ninvalid import: algebra.big_operators\ncould not resolve import: algebra.big_operators\n</pre></div>",
        "id": 175273971,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1568056777
    },
    {
        "content": "<p>Did you open the Lean package directory in VS Code or just the file <code>tsum.lean</code>? The vscode-lean extension won't work properly unless you do the former.</p>",
        "id": 175275887,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568058324
    },
    {
        "content": "<p>Thanks so much <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ! It wasn't a Mac problem after all. Just me not understanding how to use VS Code.</p>",
        "id": 175279344,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1568060532
    },
    {
        "content": "<p>We could probably have the extension pop up a warning if it can't find a <code>leanpkg.toml</code> file.</p>",
        "id": 175279423,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1568060608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> very early on in my Lean career I wrote a blog post about proving mathematical stuff by induction: <a href=\"https://xenaproject.wordpress.com/2018/03/30/proofs-by-induction/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/03/30/proofs-by-induction/\">https://xenaproject.wordpress.com/2018/03/30/proofs-by-induction/</a> . The first response in the comments is by a 1st year undergraduate giving lots of examples of how one can do various things in Lean, maybe it's helpful for you? He includes a link to his code.</p>",
        "id": 175284034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568063980
    },
    {
        "content": "<p>is there something wrong in the documentation in \"prepositions and proof\" in the \"3.6 Examples of Prepositional Validities\" when they write <br>\np \\and false \\iff false</p>",
        "id": 176148260,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1568932353
    },
    {
        "content": "<p>...that <code>example : ¬(p ↔ ¬p) := sorry</code> can be done constructively? That's what people usually ask about this section ;-) Yes, it can be done constructively.</p>",
        "id": 176148416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932526
    },
    {
        "content": "<p>no is there something wrong with p \\and false \\iff false</p>",
        "id": 176148508,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1568932597
    },
    {
        "content": "<p>I think that one is OK.</p>",
        "id": 176148514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932615
    },
    {
        "content": "<p>how does false implies p is false?</p>",
        "id": 176148541,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1568932680
    },
    {
        "content": "<p><code>false</code> implies anything ;-)</p>",
        "id": 176148588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932693
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176148591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932698
    },
    {
        "content": "<p><code>false</code> is an inductive type with no constructors, so the induction principle for <code>false</code>, namely <code>false.elim</code> is just <code>false -&gt; X</code> for any X.</p>",
        "id": 176148603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932720
    },
    {
        "content": "<p>It might be easier to think of things in terms of classical logic. Then P is either true or false, and in either case we see both sides are false.</p>",
        "id": 176148628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932762
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 176148709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568932815
    },
    {
        "content": "<p>thanks</p>",
        "id": 176148996,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1568933081
    },
    {
        "content": "<p>How do I fix this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">library_search</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_modeq</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>7:29 error:\ninvalid type ascription, term has type\n  ↑2 ∣ ↑(b ^ 2) - ↑(a ^ 2)\nbut is expected to have type\n  2 ∣ b ^ 2 - a ^ 2\nstate:\n2 goals\na b : ℕ,\nhyp : a ^ 2 ≡ b ^ 2 [MOD 2]\n⊢ 2 ∣ b ^ 2 - a ^ 2\n\na b : ℕ,\nhyp : a ^ 2 ≡ b ^ 2 [MOD 2],\nthis : 2 ∣ b ^ 2 - a ^ 2\n⊢ a ≡ b [MOD 2]\n</pre></div>",
        "id": 177114367,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1569980153
    },
    {
        "content": "<p>Your <code>have : 2 ∣ b^2 - a^2</code> statement is probably not what you want here. The <code>b^2</code> and <code>a^2</code> are natural numbers, so <code>-</code> is subtraction between natural numbers. To make the output a natural number, so we define it as 0 when <code>a^2 &gt; b^2</code>. This \"truncated\" subtraction is very often not what you want to use.</p>",
        "id": 177115336,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569981668
    },
    {
        "content": "<p>So you want to give Lean a hint that you want to use integer subtraction:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">all</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">dvd_of_modeq</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw [nat.modeq.modeq_iff_dvd] at hyp, norm_cast at hyp,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177115343,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569981700
    },
    {
        "content": "<p>I added an import, so that Lean knows about exponentiation of integers. You can alternatively also rewrite with <code>nat.modeq.modeq_iff_dvd</code> (see commented out code)</p>",
        "id": 177115389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569981737
    },
    {
        "content": "<p><code>norm_cast</code> and <code>exact_mod_cast</code> are useful tactics which will automatically deal with the cast from <code>nat</code> to <code>int</code>.</p>",
        "id": 177115408,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569981800
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#norm_cast\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#norm_cast\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#norm_cast</a></p>",
        "id": 177115411,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569981817
    },
    {
        "content": "<p>One very confusing point for beginners is that the natural number 2 and the integer 2 are not \"equal\" in Lean -- indeed it doesn't even make sense to ask that they are equal, because they don't have the same type. I would suggest that you work with integers all the way through rather than natural numbers, because what you want is true for integers. Of course then you have to change all the functions you use to the integer version :-/ Yes, this isn't like the way mathematicians treat it -- I know :-/</p>",
        "id": 177125131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569997838
    },
    {
        "content": "<p>LOL I really overlooked that, thanks a lot</p>",
        "id": 177199648,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1570056258
    },
    {
        "content": "<p>I guess it's just better to work under integer most of the time</p>",
        "id": 177199790,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1570056423
    },
    {
        "content": "<p>Clearly the natural numbers weren't meant to be formalized</p>",
        "id": 177209347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570068897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_iff_dvd</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>back at it but this gives me fail, meanwhile I found this with library_search</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sq_sub_sq</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>How do I apply it?</p>",
        "id": 177209529,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1570069170
    },
    {
        "content": "<p>nvm I was dumb XD forgot to specify <code>at</code> with <code>rw</code></p>",
        "id": 177209933,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1570069750
    },
    {
        "content": "<p>ahhhh... now I have to apply the fundamental theorem of arithmetic but don't know how</p>",
        "id": 177210549,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1570070860
    },
    {
        "content": "<p>you can do it by case exhaustion on <code>a</code> and <code>b</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- requires import data.zmod.basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">H₁</span> <span class=\"n\">H₁</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">H₂</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n        <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">hyp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hyp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n        <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">hyp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">hyp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₁</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>there's also fermat's little theorem for <code>zmod</code>, which might give a cleaner proof</p>",
        "id": 177212960,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1570075034
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">quadratic_reciprocity</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">frob</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">])</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">one_lt</span><span class=\"o\">)</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">fermat_little</span> <span class=\"n\">hp</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">])</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">frob&#39;</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">p</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_pow</span><span class=\"o\">,</span> <span class=\"n\">frob</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frob&#39;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime_two</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">frob&#39;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime_two</span>\n</pre></div>",
        "id": 177214111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570076911
    },
    {
        "content": "<p>Thank you both! I am understanding the proofs by tracing them step by step. I see that the key is to understand <code>zmod n</code> itself as a number type and either turning the mod congruence in <code>nat</code> into equality in <code>zmod n</code> and prove it there, or turning equality in <code>zmod n</code> into mod congruence in <code>nat</code> and apply them here. Hmm... I have a vague intuition about this from my Haskell experience, but I need to think hard about how to explain this to my maths colleagues...</p>\n<p>I still don't get many intricacies in there either, like why I need to show <code>0 = 1</code> and why <code>-hyp</code> is necessary in <code>simp[*, -hyp]</code>. <code>conv_lhs</code> has not yet been documented. The first two steps <code>congr, skip</code> seems very arbitrary. Although I understand the proofs now, I can hardly imagine writing them.</p>",
        "id": 177224238,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1570091428
    },
    {
        "content": "<p>Is there a nicer way of doing this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">always_less</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_lt</span> <span class=\"n\">a</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnc</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 178501319,
        "sender_full_name": "Chris B",
        "timestamp": 1571425020
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">split_ifs</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">always_less</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</pre></div>",
        "id": 178506622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571429188
    },
    {
        "content": "<p>Rad, thanks. I didn't know about split_ifs.</p>",
        "id": 178510296,
        "sender_full_name": "Chris B",
        "timestamp": 1571432338
    },
    {
        "content": "<p>I'm Kenny, but you're welcome</p>",
        "id": 178510400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571432439
    },
    {
        "content": "<p>How do I prove <code>∀ x : ℤ, 0 ≤ x → x ≤ 1 → x ∈ ({0, 1} : set ℤ)</code>?</p>",
        "id": 178548786,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571495497
    },
    {
        "content": "<p>Do we have something like <code>fintype {m : ℤ | a ≤ m /\\ m &lt; b}</code>?</p>",
        "id": 178548989,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571495786
    },
    {
        "content": "<p>There was a thread about this only recently</p>",
        "id": 178551312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571499724
    },
    {
        "content": "<p>I mean the fintype</p>",
        "id": 178551324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571499787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_iff_lt_or_eq</span> <span class=\"n\">at</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_add_one_le</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">le_iff_lt_or_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">lt_iff_not_ge</span> <span class=\"n\">at</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 178551619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571500222
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Some.20numerology\" title=\"#narrow/stream/116395-maths/topic/Some.20numerology\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Some.20numerology</a> That's more than you need for the fintype. As you can see, I partially PR'ed it (some nat lemmas) and then teaching started at my university and I never finished the job. Feel absolutely free to PR that stuff! I'm still snowed under until November.</p>",
        "id": 178551711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571500379
    },
    {
        "content": "<p>Thank you for the link. I'll possibly PR it next week.</p>",
        "id": 178551726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1571500427
    },
    {
        "content": "<p>The correct thing to do is probably to resume work on <a href=\"https://github.com/leanprover-community/mathlib/tree/nat_cases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/nat_cases\">https://github.com/leanprover-community/mathlib/tree/nat_cases</a></p>",
        "id": 178563223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571518808
    },
    {
        "content": "<p>If anyone has opinions about when to prefer a decidable prop over a boolean valued function as a predicate  I'd like to read them if you get a moment. In a general context like lists, core doesn't seem to take a hard line stance either way IE <code>list.filter</code> and <code>list.partition</code> use decidable predicates whereas <code>list.all</code> and <code>list.any</code> use a boolean valued function. Mathlib often defines a function for both.</p>",
        "id": 178601399,
        "sender_full_name": "Chris B",
        "timestamp": 1571591405
    },
    {
        "content": "<p>If you're going to still use Lean next year, I would use a bool-valued function</p>",
        "id": 178602494,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1571593157
    },
    {
        "content": "<p>Lean 4's core library is moving towards explicit usage of boolean-valued predicates</p>",
        "id": 178602525,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1571593202
    },
    {
        "content": "<p>Thanks, that definitely simplifies things, bool it is then.</p>",
        "id": 178604665,
        "sender_full_name": "Chris B",
        "timestamp": 1571596632
    },
    {
        "content": "<p>Hi, is it possible to express <code>∃ b &gt; a, p b</code> using <code>&lt;</code> only? I understand that I can write <code>∃ b  (H : a &lt; b),  p b</code> but this is less readable.</p>",
        "id": 179048341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1572009588
    },
    {
        "content": "<p>I think what you suggest (the less readable thing) is what we're supposed to be writing nowadays.</p>",
        "id": 179048499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572009707
    },
    {
        "content": "<p>Hi, here's a noob question: I'm trying to prove currying &amp; uncurrying, i.e. (p -&gt; q -&gt; r) &lt;-&gt; ((p \\and q) -&gt; r). Here's my try:</p>\n<div class=\"codehilite\"><pre><span></span>theorem t3 : ((p ∧ q) → r) → (p → q → r) :=\n    assume h₁ : (p ∧ q) → r,\n    assume hp : p,\n    assume hq : q,\n    have h₂ : p ∧ q, from and.intro hp hq,\n    h₁ h₂\n\ntheorem t4 : (p → q → r) → ((p ∧ q) → r) :=\n    assume h₁ : p → q → r,\n    assume h₂ : p ∧ q,\n    have hp : p, from and.left h₂,\n    have hq : q, from and.right h₂,\n    have h₃ : q → r, from h₁ hp,\n    have hr : r, from h₃ hq\n    hr\n</pre></div>\n\n\n<p>t3 seems to have no problem, but t4 has. It gives an error like</p>\n<div class=\"codehilite\"><pre><span></span>function expected at\n  h₃ hq\nterm has type\n  r\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>unknown identifier &#39;hr&#39;\n</pre></div>\n\n\n<p>but I can't find the reason. Any helps?</p>",
        "id": 179051404,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1572011816
    },
    {
        "content": "<p>I forgot one: I put <code>variables p q r : Prop</code> before t3 and t4, of course.</p>",
        "id": 179051601,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1572011925
    },
    {
        "content": "<p>because you forgot a comma</p>",
        "id": 179051680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572011997
    },
    {
        "content": "<p>these proofs are so hard to debug because they're not in tactic mode :-/</p>",
        "id": 179051735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012014
    },
    {
        "content": "<p>Oh you're right, thanks!</p>",
        "id": 179051752,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1572012025
    },
    {
        "content": "<p>Is there any efficient way to do these? I'm still not familiar with lean's grammar.</p>",
        "id": 179051794,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1572012056
    },
    {
        "content": "<p>\"Don't forget the comma\" occurs at least once in about the first six levels of <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>",
        "id": 179051801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012063
    },
    {
        "content": "<p>because extensive testing showed that it was by far the most common error which newcomers made.</p>",
        "id": 179051829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012085
    },
    {
        "content": "<p>often in bold face</p>",
        "id": 179051834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012091
    },
    {
        "content": "<blockquote>\n<p>Is there any efficient way to do these? I'm still not familiar with lean's grammar.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>",
        "id": 179051984,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572012171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  This is much better, thanks!</p>",
        "id": 179052082,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1572012236
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"c1\">-- I can see what is happening</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"c1\">-- I can still see what is happening</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"c1\">-- oh wow now I can see I have two goals</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"c1\">-- now back down to one</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"c1\">-- this is so much better than what TPIL chapter 3 says</span>\n    <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"c1\">-- I wish I had read chapter 5 much earlier</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"c1\">-- :D</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₃</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179052123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012244
    },
    {
        "content": "<p>Kenny's method is a pure term mode proof. To write these you need to know the trick with <code>_</code></p>",
        "id": 179052155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012275
    },
    {
        "content": "<p>This one was particularly easy, but in a longer one you can write something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">t4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>and hover over the <code>_</code>s to see what needs to go there.</p>",
        "id": 179052221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012335
    },
    {
        "content": "<p>In tactic mode you can see everything at all times, so it's better for mathematician beginners. What Kenny is saying is perhaps more appealing for CS beginners, as long as you know the <code>_</code> trick. You are just making the terms explicitly there.</p>",
        "id": 179052317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572012380
    },
    {
        "content": "<p>Yes I agree with you, and I just know what tactic mode is! Both seems great for me but tactic thing seems more intuitive.</p>",
        "id": 179052544,
        "sender_full_name": "Seewoo Lee",
        "timestamp": 1572012559
    },
    {
        "content": "<p>Question: does <code>simp</code> / <code>rewrite</code> work under binders?</p>",
        "id": 179401068,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572408492
    },
    {
        "content": "<p>not very well. Suggestions: (1) <code>erw</code> \"extended rewrite\" sometimes gets to places standard <code>rw</code> doesn't get to. (2) learn about conv mode: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 179401227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572408830
    },
    {
        "content": "<p>Actually <code>simp</code> usually does quite well, I think. But <code>rw</code> is really bad at this.</p>",
        "id": 179403776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572413274
    },
    {
        "content": "<p>Thanks</p>",
        "id": 179406739,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572418029
    },
    {
        "content": "<p>Another question: Does <code>pp.max_depth</code> do anything?  I have it set to <code>1000000000</code> and still see <code>…</code> in my goal</p>",
        "id": 179406742,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572418037
    },
    {
        "content": "<p>The <code>_</code> in your goal is likely a proof. Use <code>pp.proofs</code></p>",
        "id": 179429580,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572441254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> It's not <code>_</code>, it's <code>…</code>, and my term has ~no proofs.  I see things like <code>[…, …, …, …, (… * 2 ^256, …),</code> (and then more), I don't see how these could possibly be proofs</p>",
        "id": 179468497,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572463919
    },
    {
        "content": "<p>There's another pp option that does it. I don't remember what it's called.</p>",
        "id": 179469214,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572464461
    },
    {
        "content": "<p>Oh, I have never encountered that. Does setting <code>pp.max_steps</code> help?</p>",
        "id": 179469250,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1572464514
    },
    {
        "content": "<p>That does seem to help, but not interactively.  I get <code>11:1: excessive memory consumption detected at 'replace' (potential solution: increase memory consumption threshold)</code>  And it takes something like 15 GB on the command line.  Here's an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">big</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">big</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">max_depth</span> <span class=\"mi\">1000000000</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">max_steps</span> <span class=\"mi\">1000000000</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">big</span> <span class=\"n\">v</span> <span class=\"mi\">20</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">big</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179471045,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572465617
    },
    {
        "content": "<p>If I get <code>kernel failed to type check declaration 'int.pow_of_nat' this is usually due to a buggy tactic or a bug in the builtin elaborator</code> on a definition I'm giving by <code>rfl</code>, is that a bug in lean?</p>",
        "id": 179474306,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572467772
    },
    {
        "content": "<p>Probably not... :-) Can you minimise your example enough to post here?</p>",
        "id": 179474906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572468150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int_has_pow_nat</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">int</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_nat</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">int</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow_of_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">b</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- 15:5: kernel failed to type check declaration &#39;int.pow_of_nat&#39; this is usually due to a buggy tactic or a bug in the builtin elaborator</span>\n<span class=\"c1\">-- elaborated type:</span>\n<span class=\"c1\">--   ∀ (b e : ℕ), int.pow ↑b ↑e = int.of_nat (b ^ e)</span>\n<span class=\"c1\">-- elaborated value:</span>\n<span class=\"c1\">--   λ (b e : ℕ), rfl</span>\n<span class=\"c1\">-- nested exception message:</span>\n<span class=\"c1\">-- type mismatch at definition &#39;int.pow_of_nat&#39;, has type</span>\n<span class=\"c1\">--   ∀ (b e : ℕ), int.pow ↑b ↑e = int.pow ↑b ↑e</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ∀ (b e : ℕ), int.pow ↑b ↑e = int.of_nat (b ^ e)</span>\n</pre></div>",
        "id": 179476449,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572469104
    },
    {
        "content": "<p>Looks like a bug to me... Hopefully someone who knows better will chime in soon.</p>",
        "id": 179479393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572470826
    },
    {
        "content": "<p>reported as <a href=\"https://github.com/leanprover-community/lean/issues/76\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/76\">https://github.com/leanprover-community/lean/issues/76</a></p>",
        "id": 179479522,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572470896
    },
    {
        "content": "<p>I don't think it is a bug. I wouldn't expect <code>rfl</code> to be able to prove that, you should have to induct on <code>e</code> first.</p>\n<p>I don't think that's the usual error message, but I think that might be because it is a <code>def</code> rather than a lemma which would be more usual.</p>",
        "id": 179482512,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572473163
    },
    {
        "content": "<p>If I do <code>def bad : true = false := rfl</code>, then I get a standard type error, without the extra words about it being possibly a bug</p>",
        "id": 179483174,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572473746
    },
    {
        "content": "<p>It looks to me like the elaborator thought that <code>int.pow_nat (int.of_nat b) e</code> would reduce to <code>int.of_nat (b ^ e)</code>, but if you <code>#print int.pow_nat._main</code> you can see it actually won't.</p>",
        "id": 179485582,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572475949
    },
    {
        "content": "<p>Surprisingly to me and the elaborator (but apparently not to Chris) the equation compiler generated an outermost match on the second argument, not the first.</p>",
        "id": 179485649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572476025
    },
    {
        "content": "<p>If I get <code>error: deep recursion was detected at 'expression equality test' (potential solution: increase stack space in your system)</code>, how do I increase stack space?</p>",
        "id": 179488091,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572478370
    },
    {
        "content": "<p>It's a command line argument to lean</p>",
        "id": 179488142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478441
    },
    {
        "content": "<p>but there is an adage that says that if you have to increase resource limits then you are probably doing something wrong</p>",
        "id": 179488243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478511
    },
    {
        "content": "<p>I hope you don't actually expect that <code>big</code> example to work, it's a term 2^20 large</p>",
        "id": 179488271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No, I'm getting this error on a different example, the <code>big</code> example was just creating something to exhibit the <code>...</code>.  The thing I'm trying to do is in <a href=\"https://github.com/mit-plv/fiat-crypto/blob/6aaf03aed733d08ff124dffded9d8e2c7f4cc25a/src-lean/fiat_crypto.lean#L405\" target=\"_blank\" title=\"https://github.com/mit-plv/fiat-crypto/blob/6aaf03aed733d08ff124dffded9d8e2c7f4cc25a/src-lean/fiat_crypto.lean#L405\">https://github.com/mit-plv/fiat-crypto/blob/6aaf03aed733d08ff124dffded9d8e2c7f4cc25a/src-lean/fiat_crypto.lean#L405</a>, trying to get the <code>norm_num</code> tactic to finish when I change <code>open ex</code> to <code>open ex2</code> (because <code>ex</code> was just a toy example; <code>ex2</code> is the actual code I'm trying to work on)</p>",
        "id": 179488381,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572478650
    },
    {
        "content": "<p>For these kinds of big CS problems, my recommendation is to make sure you have clean inputs to the tactics</p>",
        "id": 179488473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478740
    },
    {
        "content": "<p>What do you mean by \"clean inputs\"?</p>",
        "id": 179488488,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572478761
    },
    {
        "content": "<p>If you can, use natural number equalities and known functions only to <code>norm_num</code></p>",
        "id": 179488500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478774
    },
    {
        "content": "<p>give <code>norm_num</code> space to decide the problem and simplify the if statement afterward</p>",
        "id": 179488564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478807
    },
    {
        "content": "<p>you may need to write a tactic to do this, the standard interactive mode chaining is probably not sufficient</p>",
        "id": 179488596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478854
    },
    {
        "content": "<p>You can still use the existing tactics, but you are doing something specific by unfolding some functions, targeting a particular subterm for <code>norm_num</code> simplification, then going back to the simplifier and so on</p>",
        "id": 179488639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478906
    },
    {
        "content": "<p>the <code>norm_num</code> front end handles this by just iterating <code>norm_num1, simp, norm_num1, simp</code> until stuff stops changing but that's only a heuristic</p>",
        "id": 179488698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572478943
    },
    {
        "content": "<p>I mean, iterating <code>norm_num1, simp, ...</code> seems not wrong, and in fact the call I have there produces the correct output for the smaller toy example.  (I can't see if it produces correct output on a slightly larger example because I get the recursion depth error)</p>",
        "id": 179489088,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572479289
    },
    {
        "content": "<p>So I looked through that fiat-crypto file, and what I see are 300 lines of definitions without any theorems, where almost every definition is marked for unfolding. This will <em>explode</em> in lean</p>",
        "id": 179490084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572480370
    },
    {
        "content": "<p>What you want are rewrites that unfold what matters, in the cases that matter. If you have a recursive definition (defined with <code>*.rec</code>), it should <em>never</em> be directly unfolded; instead you should have a theorem for the various constructors of the inductive type that you are recursing on</p>",
        "id": 179490140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572480445
    },
    {
        "content": "<p>What is the point of the <code>let_in</code> definition? It seems plainly useless</p>",
        "id": 179490221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572480514
    },
    {
        "content": "<p>Note that lean actually has a <code>let</code> construct</p>",
        "id": 179490281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572480575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The <code>let_in</code> definition is one of the very few definitions that should never be unfolded</p>",
        "id": 179490459,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572480769
    },
    {
        "content": "<p>After reduction/unfolding/rewriting, the only remaining definitions which are not unfolded should be <code>*</code>, <code>+</code>, <code>%</code>, <code>/</code>, and <code>let_in</code></p>",
        "id": 179490554,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572480851
    },
    {
        "content": "<p>I can change my definitions to not be in terms of recursors and instead be recursive themselves, but I don't see how that will fix anything.  The times to unfold them are in fact when the underlying recursor is ready to be reduced</p>",
        "id": 179490603,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572480941
    },
    {
        "content": "<p>The following definitions should not be simp: <code>list.flat_map</code> (aka <code>list.bind</code>), <code>list.combine</code> (aka <code>list.zip</code>), <code>int.to_nat_bit(0/1)</code> (the if statement should be a precondition), <code>associational.eval</code>, <code>mul</code>, definitely <code>square</code>, <code>negate_snd</code>, <code>split</code>, <code>reduce</code>, definitely <code>reduce_square</code>, <code>carryterm</code>, <code>positional.from_associational</code>, <code>from_associational_cons</code>, <code>chained_carries</code>, <code>chained_carries_no_reduce</code>.</p>",
        "id": 179490868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572481260
    },
    {
        "content": "<p>You don't necessarily need to change the definition (although using the equation compiler will do some of these things automatically for you), but you should add equational lemmas in the cases where you want the definition to unfold. Asking everything to unfold all at once is asking for trouble</p>",
        "id": 179490947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572481348
    },
    {
        "content": "<p>Wait, why should <code>list.combine</code> not be <code>simp</code>?  It's just there so that I could make code translation easier, it literally just unfolds to <code>list.zip</code> (which I don't touch the flags of).  <code>from_associational_cons</code> is telling <code>from_associational</code> to reduce in as close a match to the case where it should that I can get (in the case where it's applied to a concrete list)</p>",
        "id": 179491071,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572481520
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">prod</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">fst</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">snd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">fst</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">snd</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">eval_nil</span> <span class=\"o\">:</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">eval_cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 179491095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572481554
    },
    {
        "content": "<p>Sure.  Though I will note that I don't use <code>associational.eval</code> anywhere right now, so not unfolding it is not a high priority</p>",
        "id": 179491145,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572481589
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">l</span>\n</pre></div>",
        "id": 179491160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572481620
    },
    {
        "content": "<p>It's an example; I can demonstrate on something else if you like</p>",
        "id": 179491184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572481650
    },
    {
        "content": "<p>Of the ones you listed, I use <code>list.flat_map</code>, <code>list.combine</code>, <code>mul</code>, <code>split</code>, <code>reduce</code>, <code>carryterm</code>, <code>positional.from_associational</code>, and <code>chained_carries</code></p>",
        "id": 179491195,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572481669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Could you demonstrate on <code>reduce</code> (or <code>split</code>)?</p>",
        "id": 179491349,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572481822
    },
    {
        "content": "<p>I'd also be interested in seeing <code>carryterm</code></p>",
        "id": 179491370,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572481869
    },
    {
        "content": "<p><code>reduce</code> because I don't see how to write a simplification lemma for it; <code>carryterm</code> because the conditions under which it should reduce are complicated (namely, when <code>fst t</code> and <code>w</code> are numerals/closed terms)</p>",
        "id": 179491387,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572481916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">prod</span>\n<span class=\"n\">def</span> <span class=\"n\">let_in</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split_val</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n<span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">b</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">reduce_val</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">reduce</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">reduce</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">reduce</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 179491582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">carryterm</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">fw</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"n\">let_in</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"n\">t</span><span class=\"o\">)</span>         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n       <span class=\"n\">let_in</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"bp\">/</span> <span class=\"n\">fw</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d2</span><span class=\"o\">,</span>\n       <span class=\"n\">let_in</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"err\">%</span> <span class=\"n\">fw</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m2</span><span class=\"o\">,</span>\n       <span class=\"o\">[(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">fw</span><span class=\"o\">,</span> <span class=\"n\">d2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">m2</span><span class=\"o\">)])))</span>\n  <span class=\"k\">else</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">carryterm_pos</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">fw</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">carryterm</span> <span class=\"n\">w</span> <span class=\"n\">fw</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">let_in</span> <span class=\"n\">b</span>               <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t2</span><span class=\"o\">,</span>\n  <span class=\"n\">let_in</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"bp\">/</span> <span class=\"n\">fw</span><span class=\"o\">)</span>       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d2</span><span class=\"o\">,</span>\n  <span class=\"n\">let_in</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"err\">%</span> <span class=\"n\">fw</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m2</span><span class=\"o\">,</span>\n  <span class=\"o\">[(</span><span class=\"n\">w</span> <span class=\"bp\">*</span> <span class=\"n\">fw</span><span class=\"o\">,</span> <span class=\"n\">d2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">,</span><span class=\"n\">m2</span><span class=\"o\">)])))</span> <span class=\"o\">:=</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">carryterm_neg</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">fw</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">carryterm</span> <span class=\"n\">w</span> <span class=\"n\">fw</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 179491684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482368
    },
    {
        "content": "<p>The basic idea is to have all arguments to the functions be in weak head normal form (i.e. for a <code>list (Z x Z)</code> it should be an empty list or a cons of a pair), and additionally when there are destructuring lets or other pattern matches inside the function the results of these should be hypotheses</p>",
        "id": 179491760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482469
    },
    {
        "content": "<p>lean's equation compiler gives you something similar with an auxiliary function; if you print the definition of <code>associational.split</code> you will see that the destructuring let was done by creating an auxiliary that is defined by pattern matching</p>",
        "id": 179491839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482538
    },
    {
        "content": "<p>And then how do I make use of these?  Do I interleave \"prove side-conditions with <code>refl</code> with <code>simp</code> for <code>split_val</code>?  And it looks like rewriting with <code>associational.carryterm_pos</code> is incompatible with rewriting with <code>associational.carryterm_neg</code>; how do I get lean to pick the right one to rewrite with and prove the side-condition automatically?</p>",
        "id": 179491868,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572482600
    },
    {
        "content": "<p><code>simp</code> will do this</p>",
        "id": 179491878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482627
    },
    {
        "content": "<p>But I should admit that lean has for a long time needed a tactic like Coq's <code>cbv</code>, for just doing evaluations like this</p>",
        "id": 179491941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482685
    },
    {
        "content": "<p><code>simp</code> uses an auxiliary side condition discharger (that is by default <code>simp</code> to true) for using conditional rewrite lemmas</p>",
        "id": 179492026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482764
    },
    {
        "content": "<p>What does CBV stand for?</p>",
        "id": 179492047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572482814
    },
    {
        "content": "<p><code>norm_num</code> uses <code>norm_num</code> as the simp discharger, so it should be able to do the numeric part even inside if conditions and such</p>",
        "id": 179492052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482823
    },
    {
        "content": "<p>call by value</p>",
        "id": 179492061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482830
    },
    {
        "content": "<p>there is also <code>cbn</code> for call by name</p>",
        "id": 179492066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482842
    },
    {
        "content": "<p>it refers to the order of evaluation. It's basically treating terms as a functional program and evaluating functions according to their definitions</p>",
        "id": 179492078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482874
    },
    {
        "content": "<p>which is what <code>rfl</code> does already, but <code>rfl</code> has to go to completion while the hypothetical <code>cbv</code> tactic would just stop when it gets stuck</p>",
        "id": 179492131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482898
    },
    {
        "content": "<p>right now people have to write mile-long simp invocations unfolding everything in sight</p>",
        "id": 179492146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482928
    },
    {
        "content": "<p>or use carefully designed simp lemmas like the ones I've given above to guide the evaluation</p>",
        "id": 179492173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572482970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if I try that, <code>rw [associational.split_val]</code> gives <code>rewrite tactic failed, motive is not type correct</code> and <code>nested exception message: check failed, application type mismatch (use 'set_option trace.check true' for additional details)</code></p>",
        "id": 179493123,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572484140
    },
    {
        "content": "<p>Are you rewriting in an if statement?</p>",
        "id": 179493140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572484178
    },
    {
        "content": "<p>Yes</p>",
        "id": 179493194,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572484212
    },
    {
        "content": "<p>If you use the suggested approach, you should never have to see an if statement, but you can also use <code>simp</code> in these situations to rewrite and also fix the dependent decidability argument</p>",
        "id": 179493215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572484248
    },
    {
        "content": "<p>Also, <code>associational.carryterm_neg</code> doesn't seem to be triggering when the location to rewrite is under binders?</p>",
        "id": 179493403,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572484488
    },
    {
        "content": "<p>I am not sure if this strategy is going to work; it seems that <code>norm_num [lem1 lems]</code> fails to handle cases where <code>rw [lem1], norm_num [lems], norm_num [lems]</code> works, and <code>rw</code> doesn't really work under binders.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n<span class=\"kn\">open</span> <span class=\"n\">prod</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"bp\">_</span>             <span class=\"o\">:=</span> <span class=\"n\">default</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"mi\">0</span>             <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"n\">xs</span> <span class=\"n\">n&#39;</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split_val</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"mi\">65536</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"mi\">0</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"mi\">0</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split_val</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split_val</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"o\">],</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split_val</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"mi\">65536</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"mi\">0</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"mi\">0</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split_val</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"o\">]</span>\n<span class=\"c1\">-- 30:3: norm_num failed to simplify</span>\n<span class=\"c1\">-- state:</span>\n<span class=\"c1\">-- f g : list ℤ</span>\n<span class=\"c1\">-- ⊢ (associational.split 65536 [(1, list.nth_default 0 f 0 * list.nth_default 0 g 0)]).snd = list.nil</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What's going on here?</p>",
        "id": 179493963,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572485181
    },
    {
        "content": "<p><code>rw</code> doesn't work under binders, <code>simp</code> does</p>",
        "id": 179494619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572486105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241007\">@Jason Gross</span> hm, you may be right. This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">partition</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">t</span> <span class=\"bp\">/</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span> <span class=\"mi\">65536</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"mi\">0</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_default</span> <span class=\"mi\">0</span> <span class=\"n\">g</span> <span class=\"mi\">0</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">associational</span><span class=\"bp\">.</span><span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"o\">],</span> <span class=\"n\">norm_num1</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I've gone back to simp directly with the definition, but keeping the destructuring let, which prevents the unfolding from getting out of hand.</p>\n<p>I should more seriously consider writing some equivalent to <code>cbv</code> that will do all of these things in the right order</p>",
        "id": 179495462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572487432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241007\">@Jason Gross</span>  I managed to get your original <code>ex2</code> problem to compute to a value with a few modifications: <a href=\"https://gist.github.com/digama0/7649577d7c8af881cdbad50f9e84d81f\" target=\"_blank\" title=\"https://gist.github.com/digama0/7649577d7c8af881cdbad50f9e84d81f\">https://gist.github.com/digama0/7649577d7c8af881cdbad50f9e84d81f</a></p>",
        "id": 179502618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572499469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-def let_in {A : Type u} {B : Type v} (x : A) (f : A → B) := f x</span>\n<span class=\"gi\">+@[simp] def let_in {A : Type u} {B : Type v} (x : A) (f : A → B) := f x</span>\n</pre></div>\n\n\n<p>Uh, it's pretty important to not make this change; it results in ~exponential blowup, and in some of the examples even larger than this one, it becomes even more of a problem.  Is it essential to your way of making things work?</p>",
        "id": 179502848,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572499883
    },
    {
        "content": "<p>I don't think so, it was mostly to get it out of the way for the other changes. A suitable set of other simp lemmas about let_in should suffice</p>",
        "id": 179502898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572499939
    },
    {
        "content": "<p>Lean does internally deduplicate expressions though, so it shouldn't cause exponential blowup</p>",
        "id": 179502902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572499973
    },
    {
        "content": "<p>basically, your approach is interfering with lean's own approach to the same problem</p>",
        "id": 179502914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572499994
    },
    {
        "content": "<p>The issue is that the goal is to generate C code, eventually, and we don't want exponential blow-up in the C code output, so we need to not unfold let_in.  This is what all of the <code>let_in.lift*</code> lemmas at the bottom are about</p>",
        "id": 179502962,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500083
    },
    {
        "content": "<p>In that case, why is <code>let_in</code> not a constructor?</p>",
        "id": 179502972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500106
    },
    {
        "content": "<p>Because I didn't want to re-write a bunch of code to be in a monad</p>",
        "id": 179503023,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500177
    },
    {
        "content": "<p>But, sure, you could make it a constructor, and sprinkle <code>bind</code> everywhere</p>",
        "id": 179503028,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500193
    },
    {
        "content": "<p>(But then you also need a way to do <code>list (M T) -&gt; M (list T)</code>, etc)</p>",
        "id": 179503033,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500215
    },
    {
        "content": "<p>The thing is that you are also trying to compute with this in lean, and in that context the let_in doesn't make any sense</p>",
        "id": 179503048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500265
    },
    {
        "content": "<p>And you can't compute a C code expression this way because <code>let_in</code> would be reduced away</p>",
        "id": 179503090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500287
    },
    {
        "content": "<p>The final step to get to C would be reifying or otherwise pretty-printing the code</p>",
        "id": 179503100,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500310
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-  def positional.to_associational (n:ℕ) (xs:list ℤ) : list (ℤ × ℤ)</span>\n<span class=\"gd\">-    := list.combine (list.map weight (list.seq 0 n)) xs</span>\n<span class=\"gi\">+  def positional.to_associational (n:ℕ) (xs:list ℤ) : list (ℕ × ℤ)</span>\n<span class=\"gi\">+    := list.enum xs</span>\n</pre></div>\n\n\n<p>This seems wrong.   Did you deliberately remove <code>weight</code> here, or was it an oversight?</p>",
        "id": 179503118,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500351
    },
    {
        "content": "<p>the removal of weight was an oversight</p>",
        "id": 179503124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500370
    },
    {
        "content": "<p>I wasn't sure about whether the removal of <code>n</code> was correct either</p>",
        "id": 179503126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500384
    },
    {
        "content": "<p>But if <code>n</code> is much larger than <code>xs</code> the original approach has a lot of unnecessary computation</p>",
        "id": 179503176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500423
    },
    {
        "content": "<p><code>n</code> is always equal to the length of <code>xs</code></p>",
        "id": 179503188,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500462
    },
    {
        "content": "<p>In that case I would want to have just one loop instead of two here</p>",
        "id": 179503198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500479
    },
    {
        "content": "<p>Sure, that seems fine</p>",
        "id": 179503210,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500507
    },
    {
        "content": "<p>Also, how long should I expect this to take?  The code you gave me has already been running for 14 minutes</p>",
        "id": 179503263,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500530
    },
    {
        "content": "<p>my test ran 7 minutes</p>",
        "id": 179503269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500546
    },
    {
        "content": "<p>If I pass <code>--tstack=1000000</code>, does that make it slower?</p>",
        "id": 179503291,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500590
    },
    {
        "content": "<p>I doubt it</p>",
        "id": 179503294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500599
    },
    {
        "content": "<p>Maybe your machine is more than 2x as fast as mine?</p>",
        "id": 179503304,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500636
    },
    {
        "content": "<p>let me fix the bugs and try again to make sure I posted the right file</p>",
        "id": 179503354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572500682
    },
    {
        "content": "<p>(Seems doubtful that you're twice as fast as me; my cpu is 3.6 GHz...)</p>",
        "id": 179503368,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500727
    },
    {
        "content": "<p>What does <code>by exact _match l</code> do in <code>| (a::l) := positional.carry_reduce n s c a (by exact _match l)</code>?  (What's <code>_match</code>, and why are you doing it this way?)</p>",
        "id": 179503430,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572500803
    },
    {
        "content": "<p>Unfortunately lean does not have Coq's <code>fix</code> constructor for making a recursive definition in the middle of a term. It has <code>match</code> for invoking the equation compiler, but it doesn't expose the name of the recursive function so you can make a recursive call. However it is exposed in tactics with the name <code>_match</code></p>",
        "id": 179503680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501185
    },
    {
        "content": "<p>An equivalent approach would be:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">positional</span><span class=\"bp\">.</span><span class=\"n\">chained_carries_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">positional</span><span class=\"bp\">.</span><span class=\"n\">carry_reduce</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">positional</span><span class=\"bp\">.</span><span class=\"n\">chained_carries_aux</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n    <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">positional</span><span class=\"bp\">.</span><span class=\"n\">chained_carries</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idxs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">positional</span><span class=\"bp\">.</span><span class=\"n\">chained_carries_aux</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">c</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"n\">idxs</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 179503752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501286
    },
    {
        "content": "<p>It's really annoying too when <code>apply</code> notices that this funny <code>_match</code> thing has the same type as the goal (imagine that)</p>",
        "id": 179503837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572501375
    },
    {
        "content": "<p>Er, maybe not <code>apply</code> but things that try <code>assumption</code></p>",
        "id": 179503848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572501401
    },
    {
        "content": "<p>oh, I think I know what might be the difference: when I first tested it, I ran the <code>norm_num</code> invocation with <code>carry_mulmod ... = sorry</code>, and it finished after 7 minutes with the goal <code>[0, 0, 0, 0, 0] = sorry</code>. The version I put on the gist has the <code>[0,0,0,0,0]</code> edited in, which means that this also includes the kernel typechecking time</p>",
        "id": 179503924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572501484
    },
    {
        "content": "<p>If it finishes with <code>[0,0,0,0,0]</code>, that's a bug (perhaps the removal of <code>weight</code> that I mentioned?).  It's not supposed to reduce to a numeral, it's supposed to reduce to a bunch of <code>let_in</code>s expressing arithmetic about elements of <code>f</code> and <code>g</code>, followed by a list of bound variables</p>",
        "id": 179505704,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572504060
    },
    {
        "content": "<p>When I take out the <code>let_in</code> simplification, it blocks on a function that takes a list, being passed a <code>let_in</code> applied to a list literal</p>",
        "id": 179505779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572504150
    },
    {
        "content": "<p>Also, for the record this looks to be a tad bit abusive of <code>simp</code> and regular functions. I have a better idea of what you are trying to do now, and I think that all of these functions should be tactics. They will run a lot faster, and you can still produce proofs along the way</p>",
        "id": 179506591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572505378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Indeed, it blocks on a function taking a list, and that is what the lemmas like <code>let_in.lift_map</code> are for, to unblock reduction without inlining things</p>",
        "id": 179565408,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572548676
    },
    {
        "content": "<p>Which functions should be tactics?  The definitions on lists, or the reduction and let-lifting?</p>",
        "id": 179565457,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572548706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241007\">@Jason Gross</span> It's not quite clear to me how many of the functions on lists should be converted to tactics, but the basic idea would be to have all the stuff you actually want in the output (notably the <code>let_in</code> constructs) as <code>expr</code>s, with most of the list functions being functions that manipulate lists of <code>expr</code>s and such, so that you can evaluate them in the VM instead of all the simping.</p>\n<p>What isn't clear to me is what you want to assert about the resulting let lifted expression. As it is (assuming the <code>simp</code> stuff can be made to work), you end up with a proof that asserts something like <code>carry_mulmod ... = let_in (f 1 * g 1) (\\lam x, let_in ...)</code>, but as a theorem this doesn't appear particularly valuable since <code>carry_mulmod</code> is just a function that computes the thing on the right. Presumably you have some semantics about mulmod that you actually care about, and this should be what you want to prove a relation to. Or maybe you don't want to prove it is anything in particular, you just want the expression on the right, in which case it can be done a lot faster in the VM.</p>",
        "id": 179597945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572580479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The theorem I want to prove is that <code>associational.eval (positional.to_associational (carry_mulmod f g)) = (eval f * eval g) % (s - associational.eval c)</code>.  (Where <code>def asociational.eval (p) := list.foldr (+) 0 (list.map (\\lambda (w, v), w * v) p)</code>.)  Each of the list definitions has a corresponding lemma about what it does under <code>eval</code>, c.f. <a href=\"https://github.com/mit-plv/fiat-crypto/blob/master/src/Arithmetic/Core.v\" target=\"_blank\" title=\"https://github.com/mit-plv/fiat-crypto/blob/master/src/Arithmetic/Core.v\">https://github.com/mit-plv/fiat-crypto/blob/master/src/Arithmetic/Core.v</a></p>",
        "id": 179598106,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572580768
    },
    {
        "content": "<p>Then I can combine this theorem with the <code>carry_mulmod ... = let_in ...</code> theorem to get a theorem about the evaluation of the final expression</p>",
        "id": 179598188,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572580864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"241007\">@Jason Gross</span> I don't think I can help you with this one. I've tried several methods, but I think lean's kernel evaluation just isn't up to the task - it's abysmally slow at just about every approach to this that doesn't involve a complete rewrite. (It doesn't help that the algorithm itself is not super efficient; I can see that this would probably evaluate well enough in Coq but the Coq kernel evaluator is more efficient than lean's.) The fact that it's not completely a refl proof but has embedded subproofs makes this evaluation significantly more elaborate than it otherwise would be, and the constant allocation of new variables and lifting the term is also a performance bottleneck. This is possibly a good test case for lean 4.</p>",
        "id": 179606785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572595517
    },
    {
        "content": "<p>I appreciate all the help you've provided; thank you.  And feel free to take it as a test case for lean 4.  I will note that Coq only performs adequately if I rewrite the entire thing in CPS (so no term lifting needs to be done to reduce), make all the things that don't get unfolded axioms, and then run it in the vm.  Coq's rewriting tactics perform more slowly than Lean's (by a factor of 6, in the one case I could test).  Getting reasonable performance on this benchmark has been my PhD project for the last year or two, sort-of, and required writing a reflective rewriter mixed with NbE to be run in vm compute, and I'm currently in the process of writing this up in a paper for PLDI</p>",
        "id": 179607861,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572597064
    },
    {
        "content": "<p>I updated the gist with my latest version: <a href=\"https://gist.github.com/digama0/7649577d7c8af881cdbad50f9e84d81f\" target=\"_blank\" title=\"https://gist.github.com/digama0/7649577d7c8af881cdbad50f9e84d81f\">https://gist.github.com/digama0/7649577d7c8af881cdbad50f9e84d81f</a></p>\n<p>I put it in a monad after all:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">let_bound</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">let_bound</span>\n<span class=\"bp\">|</span> <span class=\"n\">dlet</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">let_bound</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">let_bound</span>\n<span class=\"bp\">|</span> <span class=\"n\">mlet</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">let_bound</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">let_bound</span>\n</pre></div>\n\n\n<p>The meaning is that <code>dlet</code> is the constructor for <code>let_in</code>, and <code>mlet</code> is a subgoal that should be solved by <code>norm_num</code>. In theory, you should be able to take the <code>(carry_mulmod ...).eval</code> term, and then successively normalize it (by whnf) to <code>(mlet x f).eval</code> which rewrites to <code>(f y).eval</code> after figuring out <code>x ~&gt; y</code> by other tactics, and <code>(dlet x f).eval</code> which rewrites to <code>let_in x (\\lam a, (f a).eval)</code>and work continues inside the lambda.</p>",
        "id": 179609507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572599138
    },
    {
        "content": "<p>In practice, it seems to take about 1 sec per let binding, plus my tactics for doing the reduction are super janky</p>",
        "id": 179609606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572599225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Neat, thanks!  Is that 1 second per internal let-binder (including mlet), or 1 second per emitted dlet?  I will note that real examples range from a couple dozen dlets at the small end to about 3800 dlets (possibly more for some of the code we don't build routinely) at the large end.</p>",
        "id": 179684072,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572667335
    },
    {
        "content": "<p>I think what I was seeing was mlets. In ex2 there are about a dozen of them (solving stupidly large goals like <code>to_bool (1 % &lt;big number&gt; = 0)</code>) before you get to the first dlet</p>",
        "id": 179684134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572667509
    },
    {
        "content": "<p>Ah, yes, there are a lot of those</p>",
        "id": 179684179,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572667566
    },
    {
        "content": "<blockquote>\n<p>solving stupidly large goals like <code>to_bool (1 % &lt;big number&gt; = 0)</code></p>\n</blockquote>\n<p>Shouldn't solving this be fast/easy, because <code>1 % &lt;big number&gt;</code> is always <code>1</code>, and the division computation should be relatively fast because the numerator is small?</p>",
        "id": 179684479,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I tried running your code, but it seems to fail with ~no progress after 77 seconds?</p>\n<div class=\"codehilite\"><pre><span></span>$ /usr/bin/time -f &quot;$@ (real: %e, user: %U, sys: %S, mem: %M ko)&quot; lean fiat-test.lean\nto_bool (weight machine_wordsize 1 0 * weight machine_wordsize 1 0 % s = 0)\n2 goals\nf g : ℕ → ℤ,\na : ℤ\n⊢ let_bound.eval\n      (let_bound.bind (positional.carry_reduce (… 1) n s c 1)\n         ((λ (x : ℤ), let_bound.bind (… s c 0) ((λ (x : ℤ), let_bound.map … (… …)) x)) a)) =\n    ?m_1 a\n\nf g : ℕ → ℤ\n⊢ ℤ → list ℤ\nto_bool (weight machine_wordsize 1 0 = weight machine_wordsize 1 0)\nf g : ℕ → ℤ,\na a_1 : ℤ\n⊢ let_bound.eval\n      (let_bound.bind (positional.carry_reduce (… 1) n s c 1)\n         ((λ (x : ℤ),\n             let_bound.bind (λ (a : list ℤ), let x : list … := … a in … …)\n               ((λ (x : ℤ), let_bound.bind … (… x)) x))\n            a_1)) =\n    ?m_1 a_1\nf g : ℕ → ℤ,\na a_1 a_2 : ℤ\n⊢ let_bound.eval\n      (let_bound.bind (positional.carry_reduce (… 1) n s c 1)\n         ((λ (x : ℤ),\n             let_bound.bind (λ (a : list ℤ), let x : list … := … a in … …)\n               ((λ (x : ℤ), let_bound.bind … (… x)) x))\n            a_2)) =\n    ?m_1 a_2\n/home/jgross/Documents/repos/fiat-lean-test/fiat-test.lean:345:2: error: convert tactic failed, there are unsolved goals\nstate:\nf g : ℕ → ℤ,\na a_1 a_2 : ℤ\n⊢ let_bound.eval\n      (let_bound.bind (positional.carry_reduce (… 1) n s c 1)\n         ((λ (x : ℤ),\n             let_bound.bind (λ (a : list ℤ), let x : list … := … a in … …)\n               ((λ (x : ℤ), let_bound.bind … (… x)) x))\n            a_2)) =\n    ?m_1 a_2\nCommand exited with non-zero status 1\n (real: 76.88, user: 76.73, sys: 0.24, mem: 396720 ko)\n</pre></div>",
        "id": 179684709,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668531
    },
    {
        "content": "<p>it probably doesn't work</p>",
        "id": 179684727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668569
    },
    {
        "content": "<p>(Maybe I am misreading the output, though...)</p>",
        "id": 179684729,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668578
    },
    {
        "content": "<p>if you can find some use for the code, great, but it comes with no warranty</p>",
        "id": 179684741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668606
    },
    {
        "content": "<p>the tactic itself is extremely experimental</p>",
        "id": 179684787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668659
    },
    {
        "content": "<p>Okay.  I think I'm not yet sufficiently experienced with Lean to extract value from the tactic code, and I've satisfied my curiosity about how good Lean's features are out-of-the-box at solving this sort of goal.</p>",
        "id": 179684795,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668692
    },
    {
        "content": "<p>it got a bit hard to test because everything takes forever</p>",
        "id": 179684796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668693
    },
    {
        "content": "<p>This is definitely not something anyone has attempted to do before in lean</p>",
        "id": 179684813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668729
    },
    {
        "content": "<blockquote>\n<p>it got a bit hard to test because everything takes forever</p>\n</blockquote>\n<p>That's the story of my PhD.  I've probably spent 80% of my time trying to figure out how to work around performance issues in Coq</p>",
        "id": 179684818,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668745
    },
    {
        "content": "<p>My instincts say \"fix the algorithm\"</p>",
        "id": 179684861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668765
    },
    {
        "content": "<p>What do you mean \"fix the algorithm\"?</p>",
        "id": 179684867,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668779
    },
    {
        "content": "<p>There is a ton of list manipulation code in here that seems to be unnecessary</p>",
        "id": 179684877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668813
    },
    {
        "content": "<p>I mean, if it's a benchmark then that's fine, but I think you can obtain equivalent results with another approach that doesn't involve all these let bindings</p>",
        "id": 179684893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668865
    },
    {
        "content": "<p>and what's with all this back and forth between positional and associational representations?</p>",
        "id": 179684951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572668928
    },
    {
        "content": "<p>The ultimate goal is to produce code like this: <a href=\"https://github.com/mit-plv/fiat-crypto/blob/5a51b7a2f9fc8aad46963f0d9bbe64047de0704f/curve25519_64.c#L96-L154\" target=\"_blank\" title=\"https://github.com/mit-plv/fiat-crypto/blob/5a51b7a2f9fc8aad46963f0d9bbe64047de0704f/curve25519_64.c#L96-L154\">https://github.com/mit-plv/fiat-crypto/blob/5a51b7a2f9fc8aad46963f0d9bbe64047de0704f/curve25519_64.c#L96-L154</a></p>",
        "id": 179684973,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572668953
    },
    {
        "content": "<p>I would write a tactic that produces that, and a simultaneously proof of the semantics of it</p>",
        "id": 179685040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669068
    },
    {
        "content": "<p>Z would never show up in the algorithm</p>",
        "id": 179685098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669127
    },
    {
        "content": "<p>(except in the tactic code itself)</p>",
        "id": 179685108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669158
    },
    {
        "content": "<p>The back-and-forth between positional and associational is because some algorithms are easy to express and prove in the associational representation (addition of numbers is just list concatenation, multiplication is just all the ways of combining pairs of elements of the lists with <code>*</code>), while positional is the format that is actually used to store the numbers in memory / transmit them on the wire.  But you're right, there's a lot of unnecessary back-and-forth in <code>chained_carries</code>, which could probably benefit from being moved to <code>associational</code>.</p>",
        "id": 179685174,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572669243
    },
    {
        "content": "<p>The point is to separate the parts of the algorithm that actually need to be executed, and the parts that are actually the output (creating the list of let bindings)</p>",
        "id": 179685253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669369
    },
    {
        "content": "<p>the part that gets executed can happen in the VM (fast and untrusted), and the part that is output is term creation with a proof of correctness</p>",
        "id": 179685264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669413
    },
    {
        "content": "<p>Right now <em>everything</em> is happening as term manipulation, so it's all slow</p>",
        "id": 179685276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669449
    },
    {
        "content": "<p>Maybe I don't understand what you mean by a tactic that produces both the term and the proof.  e.g., what would this look like for <code>associational.carryterm</code>, whose spec is <code>associational.eval (associational.carryterm w fw t) = associational.eval [t]</code> (Coq proof <a href=\"https://github.com/mit-plv/fiat-crypto/blob/5a51b7a2f9fc8aad46963f0d9bbe64047de0704f/src/Arithmetic/Core.v#L476-L483\" target=\"_blank\" title=\"https://github.com/mit-plv/fiat-crypto/blob/5a51b7a2f9fc8aad46963f0d9bbe64047de0704f/src/Arithmetic/Core.v#L476-L483\">here</a>)</p>",
        "id": 179685379,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572669602
    },
    {
        "content": "<p>(The proof is pretty simple: it's basically just the spec of div and mod, plus ring)</p>",
        "id": 179685462,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572669716
    },
    {
        "content": "<p>Do you mean something like, a tactic that builds a sigma type <code>{ ct : list (Z * Z) | associational.eval ct = associational.eval [t] }</code>?</p>",
        "id": 179685528,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572669794
    },
    {
        "content": "<p>or, er, maybe it is all inside the let monad</p>",
        "id": 179685532,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572669813
    },
    {
        "content": "<p>You have a tactic called <code>carryterm (...) : tactic (term x expr)</code>, which is given some inputs and produces a pair of a term and a proof of <code>associational.eval t' = associational.eval [t]</code> (where <code>t'</code> is the reification of the returned term)</p>",
        "id": 179685581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669858
    },
    {
        "content": "<p>yes, you could also view it as a sigma type, although you want <code>ct</code> here to be a concrete list, not an arbitrary term of type <code>list (Z * Z)</code></p>",
        "id": 179685657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572669964
    },
    {
        "content": "<p>Yes, a concrete list, but it's under let binders</p>",
        "id": 179685667,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572669999
    },
    {
        "content": "<p>which is why it is returned as a <code>term</code> (which is some inductive type you define that specifies the valid constructions, in this case a list under let binders)</p>",
        "id": 179685675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670021
    },
    {
        "content": "<p>I suspect that you actually should be keeping the let binders on the side though; that is, you have some growing context of let binders and your monad allows you to add to it</p>",
        "id": 179685702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670074
    },
    {
        "content": "<p>Hm, but the proofs are invalid if you don't know the values of the binders.  I get the evaluation for the proofs looks things up from the binders on the side?</p>",
        "id": 179685755,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572670117
    },
    {
        "content": "<p>Yes, you would be passing it as another argument to eval in that case</p>",
        "id": 179685761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670140
    },
    {
        "content": "<p>Okay, so I see how I could produce the term, but I don't see how producing the proof on the fly every time I call carryterm is going to be any faster.  It seems like it can only possibly be slower, because now not only are you computing equality of list manipulation, you're also computing equality of <code>associational.eval</code></p>",
        "id": 179685781,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572670187
    },
    {
        "content": "<p>Oh, I see, at least for carryterm, you don't need to worry about what the bool computes you, you just produce a proof of one side or the other</p>",
        "id": 179685868,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572670298
    },
    {
        "content": "<p>(I still think the proof is going to be expensive here, because you're calling ring)</p>",
        "id": 179685877,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572670321
    },
    {
        "content": "<p>Both parts are produced by application of theorems like those I mentioned earlier. You aren't \"computing\" anything in the DTT sense; you are applying theorems that build up eval equalities about these reified terms</p>",
        "id": 179685917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670324
    },
    {
        "content": "<p>You actually don't need to call <code>ring</code> at all this way</p>",
        "id": 179685920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670338
    },
    {
        "content": "<p>That's the main benefit</p>",
        "id": 179685922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670351
    },
    {
        "content": "<p>If you have something like <code>if a % s = 0 then ... else ...</code> in the algorithm, that's fine, it runs in the VM and uses a bignum library</p>",
        "id": 179685939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670417
    },
    {
        "content": "<p>The only reason you need to run <code>norm_num</code> is if you needed that fact <code>a % s = 0</code> in order to produce the correctness proof, but with this approach it's easy to run it and provide the input where it is needed</p>",
        "id": 179686014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670527
    },
    {
        "content": "<p>Hm, this is interesting, I'll have to think more about this approach</p>",
        "id": 179686076,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572670645
    },
    {
        "content": "<p>(And, indeed, in <code>associational.split</code>, we need a proof of <code>a % s = 0</code> for the <code>then</code> branch, but don't need to know anything in the <code>else</code> branch)</p>",
        "id": 179686081,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572670681
    },
    {
        "content": "<p>Additionally, you can easily shortcut the computation by applying a theorem with the alternate hypothesis <code>a = 0</code>, or <code>a = s</code>, or <code>a = k * s</code> where you precompute what <code>k</code> should be</p>",
        "id": 179686143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572670785
    },
    {
        "content": "<p>Presumably I still need <code>norm_num</code> to prove <code>a = k * s</code>, though, right?  Because of <a href=\"https://webcache.googleusercontent.com/search?q=cache:tVeSAlPEQN4J:https://github.com/leanprover/lean/issues/1799+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us\" target=\"_blank\" title=\"https://webcache.googleusercontent.com/search?q=cache:tVeSAlPEQN4J:https://github.com/leanprover/lean/issues/1799+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us\">https://webcache.googleusercontent.com/search?q=cache:tVeSAlPEQN4J:https://github.com/leanprover/lean/issues/1799+&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us</a></p>",
        "id": 179686349,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572671095
    },
    {
        "content": "<p>(Did someone delete all the issues on leanprover/lean?  There's no issue page anymore, and all the pre-existing issues give 404 now...)</p>",
        "id": 179686365,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572671123
    },
    {
        "content": "<p>What the... It appears Leo <a href=\"https://github.com/leanprover/lean/commit/72a965986fa5aeae54062e98efb3140b2c4e79fd\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/72a965986fa5aeae54062e98efb3140b2c4e79fd\">simplified the readme</a> and <em>deleted</em> the entire issues page for leanprover/lean. I didn't even know that was possible, but I hope we can get the history migrated to the community version</p>",
        "id": 179686790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572671848
    },
    {
        "content": "<p>Yes, you would want to use <code>norm_num</code> to prove the <code>a = k * s</code> side goal.</p>",
        "id": 179686909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572672117
    },
    {
        "content": "<p>Indeed, the approach I am describing is basically what <code>norm_num</code> does itself, for arithmetic goals</p>",
        "id": 179686966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572672216
    },
    {
        "content": "<p>Is there any chance I can get Lean to manage the context for me, or do I have to do it myself and reason about, e.g., uniqueness of names and context-lookup, etc?</p>",
        "id": 179687196,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572672619
    },
    {
        "content": "<p>There's a checkbox under \"options\" of a github repository to enable/disable issues.  I could believe that when you disable issues, github just makes them inaccessible to non-admins or something.  (I could also believe it deletes them)</p>",
        "id": 179687268,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572672742
    },
    {
        "content": "<p>Yeah, when you uncheck the issues box, github makes all issues be 404s.  When you recheck it, they all come back</p>",
        "id": 179687317,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572672846
    },
    {
        "content": "<p>Indeed, according to <a href=\"https://help.github.com/en/github/managing-your-work-on-github/disabling-issues\" target=\"_blank\" title=\"https://help.github.com/en/github/managing-your-work-on-github/disabling-issues\">this page</a> re-enabling the issues would make the old ones accessible again. I could only find <a href=\"https://help.github.com/en/github/managing-your-work-on-github/transferring-an-issue-to-another-repository\" target=\"_blank\" title=\"https://help.github.com/en/github/managing-your-work-on-github/transferring-an-issue-to-another-repository\">this page</a> on migrating single open issues, and it didn't look too promising. Maybe github support could work some magic though.</p>",
        "id": 179687321,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572672870
    },
    {
        "content": "<p>It's definitely possible to mass-migrate issues, though you might need to write a tool to do it using the github api (and get Leo to re-enable issues temporarily)</p>",
        "id": 179687335,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572672916
    },
    {
        "content": "<p>Coq migrated all of it's issues from bugzilla to github, mostly preserving issue numbers (but they all show as authored by coqbot, unfortunately)</p>",
        "id": 179687342,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572672952
    },
    {
        "content": "<p><a href=\"https://github.com/IQAndreas/github-issues-import\" target=\"_blank\" title=\"https://github.com/IQAndreas/github-issues-import\">https://github.com/IQAndreas/github-issues-import</a></p>",
        "id": 179687403,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572673039
    },
    {
        "content": "<p>Also, <a href=\"http://www.alexhadik.com/blog/2016/5/26/migrating-github-repositories-with-gitmover\" target=\"_blank\" title=\"http://www.alexhadik.com/blog/2016/5/26/migrating-github-repositories-with-gitmover\">http://www.alexhadik.com/blog/2016/5/26/migrating-github-repositories-with-gitmover</a></p>",
        "id": 179687464,
        "sender_full_name": "Jason Gross",
        "timestamp": 1572673165
    },
    {
        "content": "<p>you're going to want my fork: <a href=\"https://github.com/alashworth/github-issues-import\" target=\"_blank\" title=\"https://github.com/alashworth/github-issues-import\">https://github.com/alashworth/github-issues-import</a></p>",
        "id": 179707726,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1572710581
    },
    {
        "content": "<p>also you will need to speak to github admin to whitelist your account, otherwise you'll get autobanned for spamming</p>",
        "id": 179707736,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1572710610
    },
    {
        "content": "<p>(went through this in march)</p>",
        "id": 179707739,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1572710618
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 180375447,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1573413119
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 180375510,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1573413161
    },
    {
        "content": "<p>If I have an instance <code>denumerable α</code> and two values <code>x y : α</code>, is there a way to be able to write <code>if x = y then ...</code> rather than <code>if (encodable.encode x) = (encodable.encode y) then ...</code>. That is, how to I get Lean to infer <code>decidable (x = y)</code>?</p>",
        "id": 180920850,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1573925729
    },
    {
        "content": "<p>you want to assume <code>decidable_eq A</code> too</p>",
        "id": 180920960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573925887
    },
    {
        "content": "<p>Great, thanks - but it seemed to me that this can be derived from denumerability. Why should I have to assume it separately?</p>",
        "id": 180921040,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1573926046
    },
    {
        "content": "<p>because the implementation might be different</p>",
        "id": 180921045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573926060
    },
    {
        "content": "<p>Derived from denumerability, given that equality on \\Nat is decidable</p>",
        "id": 180921049,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1573926063
    },
    {
        "content": "<p>it's not usually the best way to decide equality</p>",
        "id": 180921067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573926085
    },
    {
        "content": "<p>OK, sure. Thanks!</p>",
        "id": 180921299,
        "sender_full_name": "Reuben Rowe",
        "timestamp": 1573926470
    },
    {
        "content": "<p>How does <code>rcases</code> / <code>rintro</code> with <code>rfl</code> in the pattern work? I couldn't find it documented anywhere.</p>",
        "id": 184491409,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577731244
    },
    {
        "content": "<p>I you have some expression of the form <code>x = a</code>, then the <code>rfl</code> pattern works as if you just wrote <code>h</code>, and followed the <code>rcases</code>/<code>rintro</code> with a <code>subst h</code>.</p>",
        "id": 184491982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577731769
    },
    {
        "content": "<p>Any tips on defining the unit sphere in Euclidean space? I'm using <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> 's definition <code>def euclidean_space (n : ℕ) : Type := (fin n → ℝ)</code> and can't figure out how to form the summation of the squares <code>def unit_sphere (n : ℕ) := { x : euclidean_space n // ...}</code></p>",
        "id": 185168184,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1578525307
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">euclidean_space</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unit_sphere</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 185168392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578525537
    },
    {
        "content": "<p>Maybe <code>def unit_sphere (n : ℕ) := { x : euclidean_space n // finset.univ.sum (λ i, (x i) ^ 2) = 1}</code> is a bit nicer.</p>",
        "id": 185168426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578525583
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">finset.sum : Π {α : Type u_1} {β : Type u_2} [_inst_1 : add_comm_monoid β], finset α → (α → β) → β</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p><code>finset.sum</code> eats a finite subset of alpha, and a function from alpha to a commutative monoid beta, and spits out the sum of this function over the given finite subset of alpha.</p>",
        "id": 185168551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578525720
    },
    {
        "content": "<p><code>finset.univ</code> is all of the set alpha (which Lean figures out must be <code>fin n</code> by \"unification\"), and Lean also figures out that alpha is a finite type (by \"type class inference\")</p>",
        "id": 185168826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578525966
    },
    {
        "content": "<p>What would be the best introductory book on analysis if I wanted to use Lean to formalize its statements and solve exercises along the way?</p>",
        "id": 185170969,
        "sender_full_name": "Nicholas Talin",
        "timestamp": 1578527975
    },
    {
        "content": "<p>Thank you Kevin, that works great. I will need to stare longer at <code>finset.univ</code>. Now I'll work towards proving these are smooth manifolds!</p>",
        "id": 185175076,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1578532269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111038\">@Greg Langmead</span> Would it be convenient to have the implicit function theorem first?</p>",
        "id": 185175386,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578532673
    },
    {
        "content": "<p>Then we would be able to prove that a smooth function defines a submanifold. Or you prefer to have some explicit set of charts (e.g., two stereographic projections)?</p>",
        "id": 185175487,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578532767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I'm planning on doing it both ways, i.e. with explicit charts, and then proving various more general things. I'm thinking along the lines of an introductory differential geometry text that is also an introduction to formalization.</p>",
        "id": 185176362,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1578533939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256795\">@Nicholas Talin</span> Several people have used Tao's Analysis 1 + 2; it's quite formal for an introductory text. You are on your own converting the lemmas and definitions to work with mathlib though, since it uses set theory as its foundations</p>",
        "id": 185184801,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1578547778
    },
    {
        "content": "<p>I dunno about \"on your own\" -- I for one would be very happy to help. And set theory/type theory hopefully shouldn't make too much of a difference here. I've proved basic analysis results about series/sequences etc in Lean, I think <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> proved Bolzano-Weierstrass somewhere, etc.</p>",
        "id": 185186838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578551205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111038\">@Greg Langmead</span> I have a branch with  inverse function theorem (mostly done). I'm going to make a PR in a few days.</p>",
        "id": 185267588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1578612171
    },
    {
        "content": "<p>Hi everyone! I just got introduced to Lean through the natural number game, and I started playing around with writing up the first homework from a discrete math class I TA'd recently. In that homework, students were supposed to define a sudoku puzzle as a function f: {1, 2, ..., 9} x {1, 2, ..., 9} -&gt; {1, 2, ..., 9}. So I defined the subtype</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nine</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Now I have two questions. First, although I can coerce a subtype of nat to nat, I can't seem to coerce a \"nine\" to a nat. What I mean is that this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But this produces an error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nine</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">}</span>\n<span class=\"kn\">constant</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nine</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is there a line I can add which will cause all the typeclass instances of {x : ℕ // x &lt; 9} to carry over to the new type nine?<br>\nMy second question has to do with sets in Lean. In our discrete math class obviously we work with sets, not inductive types. So I would like the students to be able to work with something like (edited, set nine changed to set nat)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nine_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>But if I then try to define a function from nine_set to nine_set, I run into the issue that nine_set is not a Type! I'm guessing that there isn't any way around this, but I thought I'd ask.</p>",
        "id": 185641416,
        "sender_full_name": "Spencer Peters",
        "timestamp": 1579036716
    },
    {
        "content": "<p>Welcome! You might find <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/sets.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories/sets.md\">this doc on \"set-like objects\" in mathlib</a> useful. I'll take a look at the more detailed questions later if no one else has gotten to them.</p>",
        "id": 185641729,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579036914
    },
    {
        "content": "<p>We already have a type <code>fin 9</code>. You might be better off sticking with that.</p>\n<p>You can add the coercion manually:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nine</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">nine</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nine</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>The switch from finite sets to types will be painful. I constantly tell the student that a term of type <code>fin 9</code> is a pair consisting of a number and a proof, and eventually this will dawn on them.</p>",
        "id": 185646746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579040137
    },
    {
        "content": "<p>Thanks Bryan! The mathlib doc was useful. And thank you Kevin! It's interesting that <code>fin 9</code> also has no coercion to nat by default, e.g. the following doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span>constant z : fin 9\n#check (↑z : ℕ)\n</pre></div>\n\n\n<p>That the switch will be painful doesn't surprise me--I also had some difficulty wrapping my head around the definition of a subtype. For context, I want to improve an introductory class for computer science majors who don't, by and large, have any background in formal math. My goal is to use Lean to help students understand formal math via their familiarity with programming. In my experience, students understand what it means for code to compile/not compile, but they don't understand as clearly what it means for a proof to be valid/invalid. In principle, Lean seems like a great way to bridge the gap, although in practice I'm not sure owing to the overhead of things like sets vs. inductive types. I'm also interested in using Lean as (or as the basis for) an interactive development environment for proofs, as an alternative to pencil and paper or TeX.</p>",
        "id": 185652123,
        "sender_full_name": "Spencer Peters",
        "timestamp": 1579043865
    },
    {
        "content": "<p>Have you seen Avigad's <a href=\"https://leanprover.github.io/logic_and_proof/index.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/index.html\">Logic and proof</a>? Perhaps his students are similar to yours? I usually deal with mathematicians so have different problems -- they might well have some idea what a proof is, but have never seen a functional language or type theory before.</p>",
        "id": 185652335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579044052
    },
    {
        "content": "<p>Yes, thanks for the pointer! This curriculum is similar to what I'd like to teach, although I can't afford to spend quite as much time on natural deduction and logic. In the course I'm working from (<a href=\"https://courses.cs.cornell.edu/cs2800/wiki/index.php/CS_2800_Fall_2019\" target=\"_blank\" title=\"https://courses.cs.cornell.edu/cs2800/wiki/index.php/CS_2800_Fall_2019\">https://courses.cs.cornell.edu/cs2800/wiki/index.php/CS_2800_Fall_2019</a>), we have to quickly cover a lot of topics relevant to computer science, starting from sets, functions and relations. I'm hoping that I can set up something that will let students start working right away without detailed knowledge of the logical foundations (like the natural number game).</p>",
        "id": 185678659,
        "sender_full_name": "Spencer Peters",
        "timestamp": 1579077965
    },
    {
        "content": "<p>I did functions and relations in my course last term.Here are the example sheets:</p>\n<p><a href=\"https://github.com/ImperialCollegeLondon/M40001_lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M40001_lean\">https://github.com/ImperialCollegeLondon/M40001_lean</a></p>",
        "id": 185693188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579091913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> have you formalised some of the lecture notes in some form? Maybe Spencer would be interested.</p>",
        "id": 185697326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579095246
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> have you formalised some of the lecture notes in some form? Maybe Spencer would be interested.</p>\n</blockquote>\n<p>Emm, well I've formalised the first part of the intro module and am currently working on analysis but I've not written any comments for those parts.<br>\nThey are all here if anyone is interested :) <br>\n<a href=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation\" target=\"_blank\" title=\"https://github.com/JasonKYi/M4000x_LEAN_formalisation\">https://github.com/JasonKYi/M4000x_LEAN_formalisation</a></p>",
        "id": 185698313,
        "sender_full_name": "Jason KY.",
        "timestamp": 1579096035
    },
    {
        "content": "<p>Spencer -- feel free to build on this stuff if it's of any use to you. Jason is one of my undergraduates; he took my class.</p>",
        "id": 185698561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579096218
    },
    {
        "content": "<p>Thank you! I'll dig into these. Much appreciated :)</p>",
        "id": 185756654,
        "sender_full_name": "Spencer Peters",
        "timestamp": 1579131848
    },
    {
        "content": "<p>Do you know how I can tell Lean that for c, d, e in Prop and c decidable, \"c -&gt; d\" and \"c -&gt; ite c d e\" are the same type? Or lift a value of the first type to a value of the second? (This is my first post here, so I hope this is the right place to ask that)</p>",
        "id": 185833027,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579192848
    },
    {
        "content": "<p>Both of them have the type <code>Prop</code>. I guess you want to prove the following?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">d</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 185835672,
        "sender_full_name": "Joe",
        "timestamp": 1579194263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> Yes</p>",
        "id": 185836033,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579194480
    },
    {
        "content": "<p>It's called something like <code>ifpos</code> [edit: <code>if_pos</code>]</p>",
        "id": 185836376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579194681
    },
    {
        "content": "<p>Can you use tactics?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">d</span> <span class=\"k\">else</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">hc</span> <span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hc</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">})</span>\n</pre></div>",
        "id": 185836955,
        "sender_full_name": "Joe",
        "timestamp": 1579195054
    },
    {
        "content": "<p>Got this with <code>if_pos</code>. Looks good!</p>\n<div class=\"codehilite\"><pre><span></span>lemma foo (c d e : Prop) [decidable c] : (c → d) ↔ (c → if c then d else e) :=\n  iff.intro (λ f c, eq.mp (eq.symm (if_pos c)) (f c)) (λ f c, eq.mp (if_pos c) (f c))\n</pre></div>",
        "id": 185837091,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1579195119
    },
    {
        "content": "<p>I'm having trouble working with continuous functions on subsets of euclidean space. I think I lack some idiom. The first proof below is working for all of ℝ but the second gives an error because it needs some sort of coercion maybe?</p>\n<div class=\"codehilite\"><pre><span></span>import geometry.manifold.real_instances\n\nlemma certain_func_is_continuous : continuous (λ x:ℝ, 4 * (x:ℝ)) :=\nbegin\n  apply continuous.mul _ _,\n  apply_instance,\n  exact continuous_const,\n  exact continuous_id,\nend\n\ndef real_gt_one := {x: ℝ | x &gt; 1}\n\nlemma certain_func_is_continuous_gtone : continuous (λ x:real_gt_one, 4 * (x:ℝ)) :=\nbegin\n  apply continuous.mul _ _,\n  apply_instance,\n  exact continuous_const,\n  exact continuous_id,\nend\n</pre></div>\n\n\n<p>the error is</p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  continuous id\nbut is expected to have type\n  continuous (λ (x : ↥real_gt_one), ↑x)\n</pre></div>\n\n\n<p>My short term goal is to define functions that are only continuous on the subset like 1/(1-x).</p>",
        "id": 186586097,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1579981738
    },
    {
        "content": "<p>Your function is from <code>real_gt_one</code> to <code>ℝ</code>, is that what you want? In this case your function at the end is not <code>id</code> the identity function but rather <code>coe</code> the coercion from <code>real_gt_one</code> to <code>ℝ</code>.</p>",
        "id": 186586405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1579982288
    },
    {
        "content": "<p>I guess you need <code>continuous_subtype_val</code></p>",
        "id": 186586410,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579982328
    },
    {
        "content": "<p>If you run <code>dsimp</code> before your last line lean simplifies your expression to show that the goal is <code>continuous coe</code> really.</p>",
        "id": 186586414,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1579982338
    },
    {
        "content": "<p>BTW, I wonder if the following will work in most cases to automatically prove continuity: (1) mark many lemmas with <code>@[continuity]</code>, and (2) make a<code>continuity</code> tactic to be a shorthand for <code>apply_rules [continuity]</code>.</p>",
        "id": 186586504,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579982502
    },
    {
        "content": "<p>I have no time do give it a try in the next week or two.</p>",
        "id": 186586551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579982579
    },
    {
        "content": "<p>There was some talk about the continuity tactic in Pittsburgh</p>",
        "id": 186586751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579982951
    },
    {
        "content": "<p>Thanks, dsimp and continuous_subtype_val helped. I am defining various real-valued functions so definitely want values in ℝ. Eventually I'll bring this back to stereographic projection which is my first mini-project.</p>\n<p>With regard to making continuity easier to prove, it seems to me (disclaimer: a noob) that it's a heavy-handed paradigm to edit all the other files to mark various lemmas that might be useful. It feels like the wrong separation of concerns. I'm not sure what the alternative is, but is it possible to build up my own personal collections of often-used lemmas (and wildcard lemmas like \"continuous*\"), and have some tactic search among those?</p>",
        "id": 186587797,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1579984778
    },
    {
        "content": "<p>To partially answer my own question, I see I can make a local attribute and add things to it per the <code>apply_rules</code> docs <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md</a>.</p>",
        "id": 186588386,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1579985764
    },
    {
        "content": "<p>To keep running with this, if I define <code>my_continuity_lemmas : user_attribute</code> then I can do <code>apply_rules [my_continuity_lemmas]</code> but this won't prove my new lemmas by itself, I also need other tactics like <code>apply_instance</code>. Can I package up <code>apply_rules [my_continuity_lemmas]</code> as a tactic <code>apply_my_continuity_lemmas</code> so I could then do <code>chain [apply_instance, apply_my_continuity_lemmas]</code>? I have a sinking feeling I'm starting to talk nonsense.</p>",
        "id": 186588843,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1579986604
    },
    {
        "content": "<p>Yes, you can create your own attribute. I was talking about a way to handle this everywhere in <code>mathlib</code>.</p>",
        "id": 186592237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579993125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Could you please tell me some details?</p>",
        "id": 186592248,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579993161
    },
    {
        "content": "<p>I don't understand things well enough to be able to say anything coherent.</p>",
        "id": 186592391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579993406
    },
    {
        "content": "<p>Then you can tag one of those who discussed this.</p>",
        "id": 186592624,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579993821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> made some comments at some point...</p>",
        "id": 186592626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579993847
    },
    {
        "content": "<p>I think that would work, except that tactics such as <code>apply</code> <code>refine</code> <code>exact</code> won't stop on the simplest cases. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 186592684,
        "sender_full_name": "Joe",
        "timestamp": 1579993944
    },
    {
        "content": "<p>Here is an example I discovered a long time ago, where using <code>apply' continuous_tan'</code> on <code>continuous (λx, sin x)</code> results in a timeout. The root of this problem is <code>exact</code>, so I guess there is nothing you can do. Though I think there must be a way to make things irreducible or something, so that unifying mismatched expressions can end quickly.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply_fun</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hf</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_tan&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">tan</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">continuous</span> <span class=\"o\">((</span><span class=\"n\">tan</span> <span class=\"err\">∘</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"err\">∘</span> <span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">continuous_tan</span> <span class=\"o\">(</span><span class=\"n\">continuous_subtype_mk</span> <span class=\"bp\">_</span> <span class=\"n\">hf</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_tan&#39;</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- apply&#39; this,</span>\n  <span class=\"c1\">-- refine this,</span>\n  <span class=\"c1\">-- apply this,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186592689,
        "sender_full_name": "Joe",
        "timestamp": 1579993967
    },
    {
        "content": "<p>Yes, probably a case of excessive (and fruitless) definitional unfolding.</p>",
        "id": 186593645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579995910
    },
    {
        "content": "<p>You can just set <code>tactic.apply</code> to only unfold reducibles right?</p>",
        "id": 186593915,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579996284
    },
    {
        "content": "<p>I don't know if that would work because <code>apply</code> is bugged. Even applying <code>continuous_sin'</code> to <code>continuous (λx, sin x)</code> fails.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hf</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">continuous_sin&#39;</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_sin&#39;</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186594496,
        "sender_full_name": "Joe",
        "timestamp": 1579997247
    },
    {
        "content": "<p>There's <code>apply'</code> which fixes the bug.</p>",
        "id": 186594570,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579997364
    },
    {
        "content": "<p>On the other hand, if you look at the source code of <code>apply'</code>, it tries <code>exact</code> first:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">retry_apply_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">apply_cfg</span><span class=\"o\">),</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">name</span> <span class=\"bp\">×</span>  <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span> <span class=\"n\">gs</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"o\">{</span>\n     <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">unify</span> <span class=\"n\">t</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>                             <span class=\"c1\">-- apply&#39; is already stuck here</span>\n     <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n     <span class=\"n\">gs&#39;</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">reorder_goals</span> <span class=\"n\">gs</span> <span class=\"n\">cfg</span><span class=\"bp\">.</span><span class=\"n\">new_goals</span><span class=\"o\">,</span>\n     <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">gs&#39;</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span>\n     <span class=\"n\">return</span> <span class=\"n\">r</span> <span class=\"o\">})</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">bi</span> <span class=\"n\">d</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span> <span class=\"bp\">|</span> <span class=\"n\">apply_core</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span><span class=\"o\">,</span>  <span class=\"c1\">-- so it will never get here</span>\n   <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">has_var</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">head_beta</span> <span class=\"err\">$</span> <span class=\"n\">e</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">retry_apply_aux</span> <span class=\"n\">e</span> <span class=\"n\">cfg</span> <span class=\"o\">((</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186594571,
        "sender_full_name": "Joe",
        "timestamp": 1579997365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I was suggesting that instead of sprinkling @[continuity] hints around mathlib, there could be one file with packages of continuity lemmas being exported under various names. That seems more general than deciding in a one-size-fits-all fashion at the point where the lemma is defined.</p>",
        "id": 186633171,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580064943
    },
    {
        "content": "<p>Now I'm trying to define continuity of a function of two variables and I can't get <code>continuous_snd</code> to work with my subset of ℝ×ℝ:</p>\n<div class=\"codehilite\"><pre><span></span>lemma certain_twovar_func_continuous : continuous (λx:real_gt_one × real_gt_one, (x.1:ℝ) * (1 - (x.2:ℝ)⁻¹)) :=\nbegin\n  apply continuous.mul _ _,\n  apply_instance,\n  sorry, -- writing &quot;apply continuous_snd&quot; here gives: invalid apply tactic, failed to unify continuous (λ (x : ↥real_gt_one × ↥real_gt_one), ↑(x.fst)) with continuous prod.snd\n  apply continuous.sub,\n  apply continuous_const,\n  apply real.continuous.inv _ sorry,\n  sorry,\nend\n</pre></div>",
        "id": 186633268,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580065108
    },
    {
        "content": "<p>I have an instance that indicates real_gt_one is a topological_space but somehow continous_snd is not type matching. Is it because I am using a lambda?</p>",
        "id": 186633285,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580065176
    },
    {
        "content": "<p>Looking at the error message. it seems that you should apply <code>continuous_fst</code>?</p>",
        "id": 186633427,
        "sender_full_name": "Joe",
        "timestamp": 1580065433
    },
    {
        "content": "<p>Also there is a coercion sign, so perhaps you can try <code>refine continuous.comp _ _</code> and see what comes out.</p>",
        "id": 186633576,
        "sender_full_name": "Joe",
        "timestamp": 1580065675
    },
    {
        "content": "<p>Sorry yes continuous_fst is what I should be using, and gives me the error, and I prepared my post with _snd by mistake.</p>\n<div class=\"codehilite\"><pre><span></span>invalid apply tactic, failed to unify continuous (λ (x : ↥real_gt_one × ↥real_gt_one), ↑(x.fst)) with continuous prod.snd\n</pre></div>\n\n\n<p>I didn't succeed yet with continuous.comp, will keep trying.</p>",
        "id": 186633962,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580066282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">certain_twovar_func_continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">real_gt_one</span> <span class=\"bp\">×</span> <span class=\"n\">real_gt_one</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_fst</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">sub</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_subtype_val</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_snd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>now I got stuck proving that <code>a.snd.val \\ne 0</code></p>",
        "id": 186634222,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580066644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111038\">@Greg Langmead</span> I guess you can take a look at how <code>nnreal</code> is defined?</p>",
        "id": 186634383,
        "sender_full_name": "Joe",
        "timestamp": 1580066938
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nnreal</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">continuous_coe</span>\n</pre></div>",
        "id": 186634394,
        "sender_full_name": "Joe",
        "timestamp": 1580066961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I'm stuck there too. I'm having trouble getting from being an element of <code>real_gt_one</code> to being <code>&gt; 1</code>. All <code>real_gt_one</code> is is a function to <code>Prop</code> and I can't discover the paradigm for accessing the values for which that Prop is true.</p>",
        "id": 186684775,
        "sender_full_name": "Greg Langmead",
        "timestamp": 1580134540
    },
    {
        "content": "<p><code>real_gt_one</code> gets promoted to a type here, because you have terms of that type. So it's not a function to Prop when you use it (there is probably a little up-arrow next to it indicating the promotion). If x has type <code>real_gt_one</code> then <code>x.2</code> will be a proof that <code>x.1&gt;1</code>.</p>",
        "id": 186685967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580135246
    },
    {
        "content": "<p>Yeah I ended up getting stuck with <code>x.1</code> vs <code>x.val</code> vs <code>\\u x</code> or some other silliness, that exact mod cast didn't want to blast through for me.</p>",
        "id": 186686143,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580135363
    },
    {
        "content": "<p>Those should all be definitionally equal...</p>",
        "id": 186686640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580135640
    },
    {
        "content": "<p>Can you paste code?</p>",
        "id": 186686706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580135650
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n</pre></div>",
        "id": 186687367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580136080
    },
    {
        "content": "<p>Hi, I am working on the natural numbers game (great stuff btw), and am currently stuck at advanced addition world l. 13. I am having trouble manipulating the expressions when my goal is <code>false</code>. My code so far is <br>\n<code>python\n  intro h,\n  rw succ_eq_add_one at h,\n  rw ← zero_add(n) at h,\n  rw add_comm at h,\n  rw ← add_comm(0) at h,\n  rw add_assoc at h,\n  rw zero_add(n+1) at h,\n  rw ← add_comm(1) at h,\n  rw one_eq_succ_zero at h,\n  </code><br>\n Leaving me with <code>n : mynat, h : 0 + n = succ 0 + n ⊢ false</code> I want to use <code>add_right_cancel</code> to get <code>0=succ 0</code> and then finish off the goal. But I cannot <code>apply add_right_cancel</code>because the goal is just a false proposition. <br>\nI am really lost on how to manipulate a false goal, so any tips are appreciated.</p>",
        "id": 186713430,
        "sender_full_name": "Jonathan Sejr",
        "timestamp": 1580151278
    },
    {
        "content": "<p><code>add_right_cancel</code> is a theorem of the form \"if m+p=n+p then m=n\"</p>",
        "id": 186713715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580151473
    },
    {
        "content": "<p>so it's actually a function which eats a proof of m+p=n+p and spits out a proof of m=n</p>",
        "id": 186713789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580151495
    },
    {
        "content": "<p>so instead of manipulating the goal, you can make a new hypothesis</p>",
        "id": 186713814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580151519
    },
    {
        "content": "<p><code>have h2 := add_right_cancel _ _ _ h,</code> would give you <code>h2 : 0 = 1</code></p>",
        "id": 186713979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580151614
    },
    {
        "content": "<p>oh great and then you can use zero_ne_succ</p>",
        "id": 186714000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580151633
    },
    {
        "content": "<p>I was actually trying have, but didn't get that I should tag an h at the end thanks! And now I am unsure how to finish it, <code>h2 : 0 = 1</code>should now be a false statement so I should be able to finish with <code>exact h2</code>, but that doesn't work. <br>\nEdit: One finishes off with<br>\n<code>have h3 := zero_ne_succ _ h2,\n  exact h3,</code><br>\nbecause <code>h3</code> will be <code>false </code>.</p>",
        "id": 186714628,
        "sender_full_name": "Jonathan Sejr",
        "timestamp": 1580152048
    },
    {
        "content": "<p>Remember that lots of things are functions</p>",
        "id": 186719188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580155042
    },
    {
        "content": "<p>A not= B is the same as (A=B) -&gt; false</p>",
        "id": 186719252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580155082
    },
    {
        "content": "<p>You can probably just do <code>exact zero_ne_succ _ h2</code></p>",
        "id": 186719371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580155161
    },
    {
        "content": "<p>And you can probably go a step further back</p>",
        "id": 186719395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580155184
    },
    {
        "content": "<p>Hi all, I'm a mathematician, completely new to Lean. Finally followed Kevin's advice and joined here (so I don't have to bug him directly for help). To get started, I want to formalize that the square of an odd number is odd. Here's what I came up with for a statement:</p>\n<p>lemma square_of_odd_is_odd : ∀ n : ℕ, (∃ k : ℕ, n=2<em>k+1) -&gt; (∃ l : ℕ, n</em>n = 2*l+1) :=<br>\nbegin<br>\n    intro n,<br>\n    intro p,</p>\n<p>At this point I'm stuck. How do I tell it to use <em>that</em> k and stick it in to n?</p>",
        "id": 186789519,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1580223144
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>```lean\n[some lean code]\n```\n</pre></div>",
        "id": 186789576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1580223176
    },
    {
        "content": "<p>you can do <code>cases p</code></p>",
        "id": 186789611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1580223201
    },
    {
        "content": "<p>Ok great, thanks! Then  </p>\n<p>use 2*p_w^2+2*p_w,</p>\n<p>Then how do I apply p_h?</p>",
        "id": 186789971,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1580223403
    },
    {
        "content": "<p>I would suggest <code>cases p with k p</code></p>",
        "id": 186790384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580223641
    },
    {
        "content": "<p>To get nicer names</p>",
        "id": 186790391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580223646
    },
    {
        "content": "<p>After that, you are looking for <code>rw p_h</code> (or <code>rw p</code>, if you change the <code>cases</code>)</p>",
        "id": 186790429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580223669
    },
    {
        "content": "<p>Alternative: <code>subst n</code>. This will look for <code>n = ...</code> in you context, and replace all occurences of <code>n</code> with <code>...</code></p>",
        "id": 186790564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580223742
    },
    {
        "content": "<p>Ah yes, rw! Thanks. Now shouldn't simp do the algebra for me and finish? </p>\n<p>Let's see if this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">square_of_odd_is_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">l</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186790567,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1580223743
    },
    {
        "content": "<p>I don't think <code>simp</code> will do that for you. But <code>ring</code> should.</p>",
        "id": 186790644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580223797
    },
    {
        "content": "<p>Yes! Works! Thanks that's great!</p>",
        "id": 186790671,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1580223819
    },
    {
        "content": "<p>You might need <code>import tactic</code> at the top of your file.</p>",
        "id": 186790688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580223831
    },
    {
        "content": "<p>Super dumb question (I've never touched a theorem prover before, just going through the lean book now -- apologies in advance). I'm wondering if lean4 (or maybe even in lean3) you can construct objects via a C/C++ FFI. This was a feature that I noticed in other theorem provers, but haven't seen anywhere in the lean docs.</p>",
        "id": 186799301,
        "sender_full_name": "Sam Stites",
        "timestamp": 1580229103
    },
    {
        "content": "<p>Lean 3, not really<br>\nLean 4, yep, that's the plan</p>",
        "id": 186799373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580229128
    },
    {
        "content": "<p>very cool! could you give a rough idea of when we can expect lean4?</p>",
        "id": 186799549,
        "sender_full_name": "Sam Stites",
        "timestamp": 1580229240
    },
    {
        "content": "<p>Not really... maybe end of this year. Maybe next year...</p>",
        "id": 186799636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580229263
    },
    {
        "content": "<p>It's open source. Some parts are already usable.</p>",
        "id": 186799672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580229283
    },
    {
        "content": "<p>But the tactic framework isn't there yet. So for maths (my field) it isn't really usable yet.</p>",
        "id": 186799714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580229304
    },
    {
        "content": "<p>that's a good enough estimate for me!</p>",
        "id": 186800048,
        "sender_full_name": "Sam Stites",
        "timestamp": 1580229476
    },
    {
        "content": "<p><del>Would the google groups be the best way to track progress? or perhaps the releases on github?</del> nevermind! just going to do both. Thanks!</p>",
        "id": 186800120,
        "sender_full_name": "Sam Stites",
        "timestamp": 1580229499
    },
    {
        "content": "<p>Hi everyone, I'm a new Lean user and trying to work through some of the code in Kevin's lecture tutorial. I'm trying to define is_even using the inductive type like he does, but keep getting this error. Does anyone know what's causing this? Thanks! <a href=\"/user_uploads/3121/egU32wKRgssM-qiK5EW73T7-/Screen-Shot-2020-01-29-at-1.26.38-AM.png\" target=\"_blank\" title=\"Screen-Shot-2020-01-29-at-1.26.38-AM.png\">Screen-Shot-2020-01-29-at-1.26.38-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/egU32wKRgssM-qiK5EW73T7-/Screen-Shot-2020-01-29-at-1.26.38-AM.png\" target=\"_blank\" title=\"Screen-Shot-2020-01-29-at-1.26.38-AM.png\"><img src=\"/user_uploads/3121/egU32wKRgssM-qiK5EW73T7-/Screen-Shot-2020-01-29-at-1.26.38-AM.png\"></a></div>",
        "id": 186859552,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1580279326
    },
    {
        "content": "<p>I think you are missing the bar character <code>|</code> at the start of each line</p>",
        "id": 186859734,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580279606
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186859738,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1580279619
    },
    {
        "content": "<p>Are there versioned tarball releases of Mathlib? I made an XBPS template for Lean itself and would like to make one for Mathlib too. It looks like the latest releases in the repo are from 2019.</p>",
        "id": 186947981,
        "sender_full_name": "Nicholas Talin",
        "timestamp": 1580348527
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib-nightly/releases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-nightly/releases\">mathlib-nightly releases</a> may have what you want.</p>",
        "id": 186948092,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580348649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256795\">@Nicholas Talin</span> Cool! I'm also using Void. Haven't yet looked into making XBPS templates though. Thanks for doing this. It might be useful to create a template for the supporting tools <code>cache-olean</code> and <code>update-mathlib</code>. Because if you have 10 Lean projects you might want them to depend on 10 different versions of mathlib. In practice a global mathlib install isn't used very much by most people in the community.</p>",
        "id": 186958670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580366292
    },
    {
        "content": "<p>Since it looks like both scripts are in PyPI's mathlibtools, I guess the Lean template is all that's needed.</p>",
        "id": 186966397,
        "sender_full_name": "Nicholas Talin",
        "timestamp": 1580376186
    },
    {
        "content": "<p>Should I be using 3.4.2 instead of 3.5.0?</p>",
        "id": 186967699,
        "sender_full_name": "Nicholas Talin",
        "timestamp": 1580377474
    },
    {
        "content": "<p>We are in the middle of a transition to 3.5c</p>",
        "id": 186968915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580378451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256795\">@Nicholas Talin</span> So I think you're good when you stick with that.</p>",
        "id": 186968968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580378485
    },
    {
        "content": "<p>Is there a stream for troubleshooting installation? I'm having an issue with the mathlib</p>",
        "id": 187010867,
        "sender_full_name": "Mason Marche",
        "timestamp": 1580406228
    },
    {
        "content": "<p>Right here!</p>",
        "id": 187010994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1580406291
    },
    {
        "content": "<p>Are you following <a href=\"https://github.com/leanprover-community/mathlib#installation\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib#installation\">https://github.com/leanprover-community/mathlib#installation</a> ?</p>",
        "id": 187011175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580406386
    },
    {
        "content": "<p>Right now I'm on macos and it looks like I've done everything correctly to install and build mathlib, but for some reason, VScode gives me the error 'Unknown Identifier Q' whenever I type \\Q</p>",
        "id": 187011235,
        "sender_full_name": "Mason Marche",
        "timestamp": 1580406437
    },
    {
        "content": "<p>Did you import <code>data.rat</code> or <code>data.rat.basic</code> or whatever it's called now?</p>",
        "id": 187011272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580406466
    },
    {
        "content": "<p>(probably either work now)</p>",
        "id": 187011390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580406517
    },
    {
        "content": "<p>That fixed it, thanks!</p>",
        "id": 187011397,
        "sender_full_name": "Mason Marche",
        "timestamp": 1580406522
    },
    {
        "content": "<p>If that worked then you're almost certainly up and running.</p>",
        "id": 187011447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580406544
    },
    {
        "content": "<p>It looks like I am</p>",
        "id": 187011509,
        "sender_full_name": "Mason Marche",
        "timestamp": 1580406590
    },
    {
        "content": "<p>Second dumb question, what's the library I need to import to access real numbers (ℝ)?</p>",
        "id": 187045896,
        "sender_full_name": "Mason Marche",
        "timestamp": 1580429709
    },
    {
        "content": "<p>data.real.basic</p>",
        "id": 187045974,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580429767
    },
    {
        "content": "<p>thank you</p>",
        "id": 187045998,
        "sender_full_name": "Mason Marche",
        "timestamp": 1580429812
    },
    {
        "content": "<p>Is the implementation of <code>nat.sqrt</code>/<code>nat.sqrt_aux</code> in mathlib original or is there somewhere I can read about it? I don't interact with bitwise stuff very frequently and I'm curious why it works the way it does.</p>",
        "id": 187046307,
        "sender_full_name": "Chris B",
        "timestamp": 1580430143
    },
    {
        "content": "<p>Just starting chapter 4 in \"Theorem proving with Lean\". How does one produce an arbitrary element of type <code>α</code> in this example (among the exercises)?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">pr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"n\">pr</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187049207,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580433393
    },
    {
        "content": "<p>If the exercise doesn't give t to you, it is a mistake: you need something like <code>variable a : α</code> in the assumptions. In Lean, types can be empty.</p>",
        "id": 187049488,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1580433736
    },
    {
        "content": "<p>There is a <code>variable a : α</code>, but how can I make use of it inside the example?</p>",
        "id": 187049522,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580433806
    },
    {
        "content": "<p>If you have <code>variable a : α</code> somewhere, you need to put <code>include &lt;variable name&gt;</code> above the term if you want to use variables in tactic blocks (between the <code>begin</code> and <code>end</code>)</p>\n<div class=\"codehilite\"><pre><span></span>variable α : Type\nvariable r : Prop\nvariable a : α\n\ninclude a\nexample : r → (∃ x : α, r) :=\nbegin\n    intro pr,\n    exact exists.intro a pr\nend\n</pre></div>",
        "id": 187049637,
        "sender_full_name": "Chris B",
        "timestamp": 1580433962
    },
    {
        "content": "<p>But in the snippet you only have <code>variable α : Type</code>.</p>",
        "id": 187049671,
        "sender_full_name": "Chris B",
        "timestamp": 1580433979
    },
    {
        "content": "<p>You can also refer to <code>a</code> if you write the proof in term mode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">hr</span>\n</pre></div>",
        "id": 187049697,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580434032
    },
    {
        "content": "<p>Thanks! Including <code>a</code>, this is what I was missing! I edited the snippet and added <code>a</code> to the variables.</p>",
        "id": 187049784,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580434165
    },
    {
        "content": "<p>There's some more detail and some stuff explaining why you actually need the include/omit bits in the Lean reference manual at the bottom of p. 37.</p>",
        "id": 187049866,
        "sender_full_name": "Chris B",
        "timestamp": 1580434292
    },
    {
        "content": "<p>There's a discussion in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections\">6.2</a> of TPiL as well.</p>",
        "id": 187050300,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580434864
    },
    {
        "content": "<blockquote>\n<p>Is the implementation of <code>nat.sqrt</code>/<code>nat.sqrt_aux</code> in mathlib original or is there somewhere I can read about it? I don't interact with bitwise stuff very frequently and I'm curious why it works the way it does.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span>  I think I am the one responsible for the current implementation of <code>nat.sqrt</code>. I am pretty sure I got it from a wikipedia article, and I think it is the \"iterative algorithm\" mentioned <a href=\"https://en.wikipedia.org/wiki/Integer_square_root#Using_bitwise_operations\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Integer_square_root#Using_bitwise_operations\">here</a>.</p>",
        "id": 187072741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580467538
    },
    {
        "content": "<p>I'm not finding the description I originally worked from, the ones I can find all look different</p>",
        "id": 187072894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580467669
    },
    {
        "content": "<p>Aha, it is the <code>isqrt()</code> function given here: <a href=\"https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Example_3\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Example_3\">Methods of computing square roots</a></p>",
        "id": 187073046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580467811
    },
    {
        "content": "<p>Aah, the old \"bring digits down two at a time\" method -- this is the method my father taught me for computing square roots by hand, although he used base 10.</p>",
        "id": 187075297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580470256
    },
    {
        "content": "<p>Hi all, is there a way to write the lambda expression I'm using below in more of a tactics mode style? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">include</span> <span class=\"n\">a</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">T10L</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Axpx_r</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">Axpx</span> <span class=\"n\">nAxpx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- case ax</span>\n        <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"o\">(</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">Axpx_r</span> <span class=\"n\">Axpx</span> <span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187215771,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580669912
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">T10L</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">Axpx_r</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">Axpx</span> <span class=\"n\">nAxpx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Axpx_r</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But <code>use</code> is a lean tactic from the maths library so you'll need <code>import tactic</code> at the top of your file (and mathlib).</p>\n<p>Without mathlib you can just write <code>existsi</code> instead of <code>use</code>, but <code>existsi</code> doesn't work so well as an introduction rule for more complicated existential statements.</p>",
        "id": 187217011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580672367
    },
    {
        "content": "<p>Thanks Kevin! I did see similar things in the number game, but apparently I need some more work before it sinks.</p>",
        "id": 187217142,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580672587
    },
    {
        "content": "<p>This software has a huge learning curve.</p>",
        "id": 187217158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580672625
    },
    {
        "content": "<p>It's worth the climb though ;-)</p>",
        "id": 187217201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580672645
    },
    {
        "content": "<p>I'm having a very good time learning it, too bad I can basically only use the weekends. The community is very helpful though!</p>",
        "id": 187217502,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580673223
    },
    {
        "content": "<p>Ultra noob question: Why can't I prove that x^2 = x * x over the integers?</p>\n<div class=\"codehilite\"><pre><span></span>variable x : ℤ\n#reduce x + (-6)^2\n\nexample (x : ℤ) : x = x := by refl\n\nexample (x : ℤ) : x^2 = x * x := by simp\n</pre></div>\n\n\n<p>Gives <code>simplify tactic failed to simplify</code>. Actually with <code>import data.int.basic</code> the -6 doesn't even reduce. Using <code>import data.zmod.basic</code> reduces -6, but not (apparently) x^2. What am I missing? Any clues would be greatly appreciated!</p>",
        "id": 187459101,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1580913920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- exact pow_two x</span>\n</pre></div>",
        "id": 187459584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580914227
    },
    {
        "content": "<p>and indeed <code>pow_two</code> hasn't been tagged with the <code>simp</code> attribute, so <code>simp</code> doesn't know about this lemma.</p>",
        "id": 187459655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580914287
    },
    {
        "content": "<p>If you only import <code>data.int.basic</code> then you don't get the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">a\\in\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">b\\in\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>. This is because the definition of the power function is made for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> in an arbitrary monoid and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">b\\in\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, so you have to import some group theory library to get it, not the integer library!</p>",
        "id": 187460015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580914545
    },
    {
        "content": "<p>Got it! Thanks! I think I'm going to have some follow up questions though :)</p>",
        "id": 187461882,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1580915665
    },
    {
        "content": "<p>I've been having followup questions since 2017 ;-)</p>",
        "id": 187462184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580915844
    },
    {
        "content": "<p>it turns out that some stuff that mathematicians think of as \"should be straightforward\" is actually an interesting research project in the formal proof verification community.</p>",
        "id": 187462241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580915883
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">pow_two</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>I am not 100% clear about why <code>pow_two</code> is not tagged with <code>simp</code>, but <code>simp</code>-tagging is a subtle issue best left to those who know a lot more computer science than me -- I don't really understand the algorithm. All I know is that tagging everything with <code>simp</code> is a bad idea.</p>",
        "id": 187462593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580916091
    },
    {
        "content": "<p><code>by ring</code> should work here, or perhaps <code>by abel</code> if it has been updated to deal with multiplicative monoids.</p>",
        "id": 187462738,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1580916170
    },
    {
        "content": "<p>Hi people, it's been a while since I have done anything concerning Lean but I am back with renewed interest. Back when I took notice there was no real way to get it working with Windows and I didn't have a reasonble option to use Linux, but now I do. So as a complete and utter noob with building things on Linux: how do I go about this?</p>",
        "id": 187469288,
        "sender_full_name": "JDM",
        "timestamp": 1580920094
    },
    {
        "content": "<p>Don't build it.</p>",
        "id": 187469342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1580920133
    },
    {
        "content": "<p>Okay, in that case, are there detailed installation instructions?</p>",
        "id": 187469396,
        "sender_full_name": "JDM",
        "timestamp": 1580920165
    },
    {
        "content": "<p>Yes, see github readme</p>",
        "id": 187469428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920188
    },
    {
        "content": "<p>Lemme fetch the link</p>",
        "id": 187469445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920199
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib#installation\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib#installation\">https://github.com/leanprover-community/mathlib#installation</a></p>",
        "id": 187469533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920226
    },
    {
        "content": "<p>Oh, that's great, thanks a lot!</p>",
        "id": 187469592,
        "sender_full_name": "JDM",
        "timestamp": 1580920261
    },
    {
        "content": "<p>We actually went through a transition to a new version of Lean <em>today</em></p>",
        "id": 187469613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920270
    },
    {
        "content": "<p>For the first time in ~ 2 years</p>",
        "id": 187469637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920285
    },
    {
        "content": "<p>Seems like a good time to get started then</p>",
        "id": 187469657,
        "sender_full_name": "JDM",
        "timestamp": 1580920293
    },
    {
        "content": "<p>So let's hope the instructions still work</p>",
        "id": 187469675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920302
    },
    {
        "content": "<p>That's a good point :-D</p>",
        "id": 187469691,
        "sender_full_name": "JDM",
        "timestamp": 1580920314
    },
    {
        "content": "<p>If anything goes wrong, please report here <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 187469797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920358
    },
    {
        "content": "<p>Will do, I'm absolutely thrilled in any case :-)</p>",
        "id": 187469884,
        "sender_full_name": "JDM",
        "timestamp": 1580920421
    },
    {
        "content": "<blockquote>\n<p>For the first time in ~ 2 years</p>\n</blockquote>\n<p>That's not really true, 3.4.2 moved some stuff from core to mathlib and that was done about a year ago. But this is the first time we're pointing to a version of Lean off the official leanprover site, and the first time with a lot of the supporting tools.</p>",
        "id": 187469885,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580920421
    },
    {
        "content": "<p>Ok, maybe I was exagerating. Your explanation is more exciting anyway <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 187470030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580920514
    },
    {
        "content": "<p>is there a way to \"unfold\" what a tactic is doing in a particular case? for example I can prove <code>x \\in {x}</code> by <code>finish</code> (which is how <code>set.mem_singleton</code> is defined), but I'm a bit curious what's going on there</p>",
        "id": 187543560,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1580992310
    },
    {
        "content": "<p>Not sure if this is exactly what you want, but you could do <code>#check</code> on the theorem that includes it?</p>",
        "id": 187544991,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580993613
    },
    {
        "content": "<p>You can use <code>#print</code>, which gives you the whole proof. Many times that will be more than you want.</p>",
        "id": 187549813,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580997716
    },
    {
        "content": "<p>Sorry, mixed up my macros--meant <code>#print</code> haha</p>",
        "id": 187550144,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1580997902
    },
    {
        "content": "<p>Is there anyone who can help me with advice on how to embed Lean code in LaTex? There are lines of code in the <code>mathlib-paper</code> in section 4.2 for example, but I couldn't make that look not nearly as nicely myself. Verbatim doesn't work because of the UTF characters, even with additional packages. I can hack text to look like Lean code by using <code>\\texttt</code> and isolating math characters, but that's a lot of tedious work. If someone has a sample <code>document.tex</code> file with Lean code to attach (like the <code>mathlib-paper.tex</code> stripped down, for example) it would help a lot.</p>",
        "id": 187550513,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580998181
    },
    {
        "content": "<p>You can use the <code>lstlean.tex</code> file available here: <a href=\"https://github.com/leanprover-community/lean/tree/master/extras/latex\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/tree/master/extras/latex\">https://github.com/leanprover-community/lean/tree/master/extras/latex</a></p>",
        "id": 187550750,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1580998384
    },
    {
        "content": "<p>Works great, thank you!</p>",
        "id": 187551212,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1580998731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span> <span class=\"user-mention\" data-user-id=\"259240\">@Cerek Hillen (he) (W2'20)</span> perfect thanks</p>",
        "id": 187551798,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1580999156
    },
    {
        "content": "<p>Note that the <code>simp</code> and <code>tidy</code> and <code>library_search</code> tactics have options where they can print out what they did. With <code>simp</code> you have to run <code>squeeze_simp</code> instead -- I think for the other two it just works automatically.</p>\n<p>As for Lean code in LaTeX, when I tried this when I wrote my article for the LMS newsletter, some stuff came out really poorly, and when I asked <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> he suggested that I had a super-old version of <code>lstlean.tex</code> and he sent me a newer one. I think the super-old version is the one which Anne has linked to. I had problems with some unicode characters IIRC.</p>",
        "id": 187558256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581003245
    },
    {
        "content": "<p>If that is the case, we should update that link.</p>",
        "id": 187558743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581003559
    },
    {
        "content": "<p>I'll update it to my current version in a bit.</p>",
        "id": 187558785,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581003592
    },
    {
        "content": "<p>Yes indeed, several of the Unicode characters in <code>sample.tex</code> seem to give me quite some trouble.</p>",
        "id": 187560751,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581004884
    },
    {
        "content": "<p>You have to include a package for unicode characters, or else all the lean unicode characters will be garbled in tex</p>",
        "id": 187561065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581005091
    },
    {
        "content": "<p>I think it is <code>\\usepackage[utf8]{inputenc}</code></p>",
        "id": 187561173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581005153
    },
    {
        "content": "<p>Also some symbols, like <code>$\\mathbb{C}$</code> are not listed, and trying to use math mode in <code>\\lstinline</code> doesn't work.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, that package is included in the preamble.</p>",
        "id": 187561247,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581005184
    },
    {
        "content": "<p>or possibly <code>\\usepackage[utf8x]{inputenc}</code></p>",
        "id": 187561280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581005201
    },
    {
        "content": "<p>Math mode doesn't work inside <code>\\lstinline</code>. I think there is a way to set the escape character so this works though</p>",
        "id": 187561368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581005259
    },
    {
        "content": "<p>The package requirements are mentioned in the md file in the directory Anne linked.</p>",
        "id": 187561524,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581005327
    },
    {
        "content": "<p>If a symbol is not listed, you can add it to <code>lstlean.tex</code>. (This is why Floris, and Rob, and I, all have uncommitted modifications to <code>lstlean.tex</code> since the last version some 3 years ago)</p>",
        "id": 187561527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581005330
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/110\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/110\">https://github.com/leanprover-community/lean/pull/110</a></p>",
        "id": 187561823,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581005502
    },
    {
        "content": "<p>Probably a bunch more keywords could be removed, since they're mostly used in tactic mode and it's weird to highlight them there.</p>",
        "id": 187561928,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581005546
    },
    {
        "content": "<p>Since the Unicode characters are quite difficult to copy/paste and most of us are used to LaTex math symbols, it would be helpful if anyone knew how to use (escape into) math mode inside <code>\\lstinline</code>.</p>",
        "id": 187564581,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581007131
    },
    {
        "content": "<p>The majority of lean snippets in tex papers I get by copying from a real lean file</p>",
        "id": 187564976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581007405
    },
    {
        "content": "<p>which of course has much better facilities for producing unicode</p>",
        "id": 187565014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581007430
    },
    {
        "content": "<p>There is a <code>mathescape=</code> option in <code>lstlean.tex</code> that you can set to <code>true</code> if you want <code>$foo$</code> to enter math mode. This interferes with lean's use of <code>$</code>, though, so it's usually turned off</p>",
        "id": 187565178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581007525
    },
    {
        "content": "<p>I think you can also set these options directly in your preamble</p>",
        "id": 187565217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581007555
    },
    {
        "content": "<p>You can of course always write everything in tex if you want to do that, i.e. <code>$\\mathtt{\\color{blue}{inductive} foo (\\alpha : Type) : Type}$</code></p>",
        "id": 187565467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581007710
    },
    {
        "content": "<p>Anyone can show me how to construct a <code>finset ℤ</code> from <code>range n</code>, where <code>n : ℕ</code> and every member is the negative of one of the elements in the <code>range</code>? Some kind of mapping should be possible.</p>",
        "id": 187733373,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581199902
    },
    {
        "content": "<p><code>finset.image (λ m : ℕ, -(m : ℤ)) (finset.range n)</code></p>",
        "id": 187733798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581200808
    },
    {
        "content": "<p>I have <em>no idea</em> why <code>finset.map</code> is <em>not</em> what you were looking for.</p>",
        "id": 187733803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581200839
    },
    {
        "content": "<p>Also <code>finset.Ico_ℤ</code></p>",
        "id": 187733853,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581200984
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <br>\n I don't know how to use <code>finset.map</code> yet. For example, I tried to get the same entries (not the negatives) with <code>finset.map int.of_nat (range 5)</code>, but that doesn't work. The symbol used in <code>finset.lean</code> for the mapping function is new to me at this point (the \"curved\" arrow).</p>",
        "id": 187733953,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581201147
    },
    {
        "content": "<p>You can do it with <code>map</code> like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><code>map</code> only works with injective functions, the curly arrow is an <code>embedding</code>, a pair of a function, and a proof that it's injective.</p>\n<p><code>map</code> is faster for computation since it doesn't erase duplicates.</p>",
        "id": 187734013,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581201358
    },
    {
        "content": "<p>Why isn't called <code>fast_map</code> or <code>inj_map</code> then? It would leave the canonical name for the canonical operation.</p>",
        "id": 187734068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581201458
    },
    {
        "content": "<p>Daniel, you can use \"jump to definition\" in VScode also on symbols.</p>",
        "id": 187734109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581201497
    },
    {
        "content": "<p>How do I get the proofs for simple things like n + n = 2 * n or 1 &lt; 2? How do I prove 1 &lt; 2? I was expecting these proofs would already be in the library and not hiding from the user</p>",
        "id": 187765009,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581266963
    },
    {
        "content": "<p><code>ring</code> and <code>norm_num</code> would do these for you.</p>",
        "id": 187765063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267019
    },
    {
        "content": "<p>Assuming you use mathlib.</p>",
        "id": 187765068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267048
    },
    {
        "content": "<p>in chapter 8... haven't been introduced to these yet</p>",
        "id": 187765177,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581267266
    },
    {
        "content": "<p>You need to give us more context then. Are you doing a specific exercise in TPIL?</p>",
        "id": 187765196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267353
    },
    {
        "content": "<p>In 8.4, the second last example. trying to solve the sorry</p>",
        "id": 187765237,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581267413
    },
    {
        "content": "<p>nat_to_bin</p>",
        "id": 187765247,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581267449
    },
    {
        "content": "<p>I don't think this is meant as an exercise. I think Jeremy didn't want to distract readers with details of this proof.</p>",
        "id": 187765297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span> Here is a slightly more complex proof. Something like you want is part of it, see the <code>have h1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">sumUpToN_1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"c1\">---------- can get the goal thus</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_assoc</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_mul</span> <span class=\"mi\">2</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"mi\">2</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"c1\">------------ or simply by:</span>\n  <span class=\"c1\">-- ring,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187765356,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581267659
    },
    {
        "content": "<p>Daniel -- instead of rewriting h1, which is true by definition, you can use the <code>change</code> tactic to just rewrite the goal to what you want it to be</p>",
        "id": 187765414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581267777
    },
    {
        "content": "<p>I understand the h1, 1 &lt;  2 seems far too complicated to prove.  It would be easier to shift to Coq</p>",
        "id": 187765419,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581267802
    },
    {
        "content": "<p>Again, <code>norm_num</code> proves it. What else do you want?</p>",
        "id": 187765428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267835
    },
    {
        "content": "<p>How can a proof be simpler than a single tactic invocation?</p>",
        "id": 187765468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, Patrick, but we beginners need to learn the basics of expressing ourselves in Lean.</p>",
        "id": 187765480,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581267906
    },
    {
        "content": "<p>So, how do I prove it with norm_num?</p>",
        "id": 187765488,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581267955
    },
    {
        "content": "<p><code>example  : 1 &lt; 2 := by norm_num</code></p>",
        "id": 187765527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581267988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span> Here is a proof for your initial quest:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">twoEqOneOne</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">done</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187765528,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581267992
    },
    {
        "content": "<p>thanks. How did you find the succ_eq_add_one? is there a good way of searching for these?</p>",
        "id": 187765540,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581268068
    },
    {
        "content": "<p>Here is another proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">twoEqOneOne</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187765591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581268153
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187765592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268163
    },
    {
        "content": "<p>I had all those problems you have before going through the natural number game. Kevin Buzzard did a great job with that! It can get you started.</p>",
        "id": 187765598,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581268195
    },
    {
        "content": "<p>Again, either you want to suffer because you think this is a good exercise, and then I don't understand what you are complaining about. Or you can use the answers I provided one minute after you asked.</p>",
        "id": 187765641,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span> certain lemmas you just end up learning because they come up a lot. You can use <code>library_search</code> to find them. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">what_is_this_called</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span> <span class=\"c1\">-- we learn it is true by definition</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187765663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581268287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Kevin, does <code>change</code> need <code>import tactic</code>?</p>",
        "id": 187765664,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581268290
    },
    {
        "content": "<p><code>show</code> certainly doesn't. I prefer <code>change</code> because it works on hypotheses as well as goals so it's easier for the beginner.</p>",
        "id": 187765668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581268320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span> there is also a naming convention which we stick to in Lean, meaning that most users can after a while <em>guess</em> that <code>succ n = n + 1</code> will be called <code>succ_eq_add_one</code>. But it takes a while to learn the conventions.</p>",
        "id": 187765717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581268394
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span>  was looking for a better way to find all the proofs available. I was using the naming convention and using print and relying on vscode intelligence</p>",
        "id": 187765762,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581268464
    },
    {
        "content": "<p>I have no reason to believe that this is any harder in Lean than in Coq or any other theorem prover. There will be naming conventions, and tactics for people who don't know the names but want to get the job done.</p>",
        "id": 187765771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581268537
    },
    {
        "content": "<p>The best way to get information about this sort of thing is to ask here. The existence of this chat room is one thing which makes learning Lean easier than learning all the other systems -- for the other systems you have to ask on a mailing list or stackoverflow.</p>",
        "id": 187765816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581268592
    },
    {
        "content": "<p>He asked, by then decided to ignore the answer and start writing he should use Coq.</p>",
        "id": 187765819,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268621
    },
    {
        "content": "<p>Here's a chat newbie question, how do you get a reply box to look reddish instead of white?</p>",
        "id": 187765866,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581268690
    },
    {
        "content": "<p>Mention some name using @</p>",
        "id": 187765868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268708
    },
    {
        "content": "<p>That person will see a reddish box</p>",
        "id": 187765871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I have to use theorems that I have already proved to proof this, I can't use rings and norm_num because I haven't reached there yet</p>",
        "id": 187765872,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581268721
    },
    {
        "content": "<p>Again, I think you misunderstood the status of this theorem. It's not an exercise. And if you want to make it an exercise, then why shouldn't you learn how to search properly?</p>",
        "id": 187765885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268790
    },
    {
        "content": "<p><code>1 &lt; 2</code> can also be proven by <code>dec_trivial</code></p>",
        "id": 187765887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581268800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span> Have a look at this, it involves an inequality:</p>\n<p><a href=\"https://stackoverflow.com/questions/59669492/how-to-switch-types-in-lean-theorem-prover-when-constants-are-involved#comment105499922_59669492\" target=\"_blank\" title=\"https://stackoverflow.com/questions/59669492/how-to-switch-types-in-lean-theorem-prover-when-constants-are-involved#comment105499922_59669492\">https://stackoverflow.com/questions/59669492/how-to-switch-types-in-lean-theorem-prover-when-constants-are-involved#comment105499922_59669492</a></p>",
        "id": 187765995,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581268968
    },
    {
        "content": "<p><code>library_search</code> would have solved both your goals.</p>",
        "id": 187765997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581268974
    },
    {
        "content": "<p>If you are working from the absolute basics, <code>1 &lt; 2</code> is <code>nat.le_refl 2</code>, where <code>nat.le_refl</code> is proven by induction</p>",
        "id": 187766005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269022
    },
    {
        "content": "<p>But I think Patrick is right -- I don't think there is enough in TPIL for the learner working through the book to easily remove that sorry. It is trivial to remove using the machinery that mathlib provides but because TPIL is about Lean not mathlib, Jeremy leaves it there. If you're trying to remove it then you're moving away from the carefully chosen basic examples in TPIL and the real world of actual mathematical formalisation. mathlib has solved all your problems in lots of different ways but you have to learn mathlb like you have to learn Lean.</p>",
        "id": 187766135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269276
    },
    {
        "content": "<p><code>two_mul</code> has a proof using commutativity to turn it inro <code>n*2</code> which is defeq to <code>0+n+n</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">zero_add</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>But this is a really low level proof. Just use the theorems, or better yet, the general tactics to kill this goal.</p>",
        "id": 187766190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269323
    },
    {
        "content": "<p>For the record, the full sorry can be replaced by <code>by rw nat.div_lt_iff_lt_mul ; linarith,</code></p>",
        "id": 187766196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581269366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span> Mario's proof probably works without mathlib :-)</p>",
        "id": 187766199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269391
    },
    {
        "content": "<p>(after  being disappointed by <code>omega</code> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>)</p>",
        "id": 187766241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581269419
    },
    {
        "content": "<p><code>omega</code> doesn't do it??</p>",
        "id": 187766246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269436
    },
    {
        "content": "<p><code>omega</code> doesn't like me. It never does what I ask it to do.</p>",
        "id": 187766249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581269457
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n</pre></div>",
        "id": 187766259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269476
    },
    {
        "content": "<p>it's because you were too rude about nat subtraction a year ago</p>",
        "id": 187766261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269486
    },
    {
        "content": "<p>This is not the full thing, Mario.</p>",
        "id": 187766263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581269493
    },
    {
        "content": "<p>Patrick is proving (n+2)/2&lt;n+2</p>",
        "id": 187766265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269499
    },
    {
        "content": "<p>that's the sorry in TPIL</p>",
        "id": 187766268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269506
    },
    {
        "content": "<p>aha</p>",
        "id": 187766269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_self</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 187766310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269570
    },
    {
        "content": "<p>this is the problem when people know the libraries too well ;-)</p>",
        "id": 187766318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269613
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</pre></div>",
        "id": 187766319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269614
    },
    {
        "content": "<p>I'm not sure what omega's status is wrt integer division</p>",
        "id": 187766345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581269642
    },
    {
        "content": "<p>so <code>omega</code> just hates Patrick personally</p>",
        "id": 187766361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269649
    },
    {
        "content": "<p>No, I meant <code>by omega</code> alone.</p>",
        "id": 187766366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581269692
    },
    {
        "content": "<p>No rewriting first.</p>",
        "id": 187766368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581269700
    },
    {
        "content": "<p>So I guess division is beyond the capabilities of <code>omega</code> is the concluson</p>",
        "id": 187766379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581269756
    },
    {
        "content": "<p>FYI, <a href=\"https://github.com/leanprover-community/mathlib/issues/1484#issuecomment-561260385\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1484#issuecomment-561260385\">https://github.com/leanprover-community/mathlib/issues/1484#issuecomment-561260385</a></p>",
        "id": 187766419,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581269766
    },
    {
        "content": "<p>Although <a href=\"https://github.com/leanprover-community/mathlib/issues/1748\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1748\">#1748</a> definitely needs to be finished first.</p>",
        "id": 187766421,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581269790
    },
    {
        "content": "<p>Thanks Rob!</p>",
        "id": 187766601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581270187
    },
    {
        "content": "<p>Oh! I figured out what TPIL stands for :). Can I suggest a small improvement to TPIL? (see, I can even use it in a sentence):<br>\nIn exercise 1 at the end of chapter 3, as one of the many \"other properties\", the reader is asked to prove <code>¬(p ↔ ¬p)</code>, but then this is also broken out as exercise 3. As exercise 2 is all about <code>classical</code> the assumption is that exercise 1 should be without it. Exercise 3 is certainly interesting enough that breaking it out seems justified. I would suggest removing it from exercise 1.</p>",
        "id": 187769322,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581275498
    },
    {
        "content": "<p><code>¬(p ↔ ¬p)</code> can be proved without LEM, but it's tricky.</p>",
        "id": 187769419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581275673
    },
    {
        "content": "<p>Right, and exercise 3 asks the reader to do it without LEM. But even in exercise 1 the assumption/implication is that they should be done without LEM. I'm just saying the duplication should probably be removed. I was stuck on exercise 1 for a long time until I noticed that I was essentially already working on exercise 3. By the time I was through with exercise 2, I could (finally) work through 3.</p>",
        "id": 187770488,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581277854
    },
    {
        "content": "<p>Anyone have an idea how to solve this e I have</p>",
        "id": 187774132,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581284958
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 187774137,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581284964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (n  : \\N) ( h : 1 * (n + 2) &lt; 2 * (n + 2)) : (n + 2) &lt; 2 * (n + 2)\n</pre></div>",
        "id": 187774204,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581285047
    },
    {
        "content": "<p>I was wondering if someone could help me out with this simple proof</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span>  <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 187774580,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581285549
    },
    {
        "content": "<p>you can rewrite <code>one_mul</code> at <code>h</code>. After a while you'll be able to guess that <code>one_mul</code> is the name of the theorem which says <code>1*x=x</code>.</p>",
        "id": 187775643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581286629
    },
    {
        "content": "<p>the rewrite will only work will = not &lt;</p>",
        "id": 187776017,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581287198
    },
    {
        "content": "<p>*with = not &lt;</p>",
        "id": 187776023,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581287214
    },
    {
        "content": "<p>Don't rewrite using h, rewrite h itself: <code>rw one_mul at h</code></p>",
        "id": 187776317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581287769
    },
    {
        "content": "<p>thanks</p>",
        "id": 187776555,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581288236
    },
    {
        "content": "<p>Anybody got any suggestions for this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>was thinking about using div_lt_of_mul_lt_of_pos but there seems to be an issue</p>",
        "id": 187777453,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1581289466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₂</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187777612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289598
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">div_lt_of_mul_lt_of_pos</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">div_lt_of_mul_lt_of_pos :</span>\n<span class=\"cm\">  ∀ {α : Type u_1} [_inst_1 : linear_ordered_field α] {a b c : α}, c &gt; 0 → b &lt; a * c → b / c &lt; a</span>\n<span class=\"cm\">  -/</span>\n</pre></div>\n\n\n<p><code>div_lt_of_mul_lt_of_pos</code> is a theorem about linearly ordered fields.</p>",
        "id": 187777644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289653
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₂</span>\n</pre></div>",
        "id": 187777691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289697
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187777699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581289749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h₁</span>\n</pre></div>",
        "id": 187778294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581290479
    },
    {
        "content": "<p>I have a function producing <code>Prop</code>s a bit like the following (but in general there can be any finite number of disjuncts)</p>\n<div class=\"codehilite\"><pre><span></span>def g (p q r s : ℕ) : Prop := (p = q) ∨ (r = s) ∨ false\n</pre></div>\n\n\n<p>now I suppose these should be decidable and hence printable, which is my aim. I have read a bit about decidable props but can't quite figure out how to reduce an application of g to a <code>true</code> or <code>false</code></p>",
        "id": 187911569,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581428322
    },
    {
        "content": "<p>Depending on the exact structure of your function, Lean can probably infer that it's decidable already. You need either <code>@[reducible] def g</code> or <code>@[derive decidable] def g</code> (the latter will only work with mathlib). Then you can <code>#eval to_bool (g 1 2 3 4)</code>.</p>",
        "id": 187911950,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581428618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> thanks. actually my Prop was set membership, so I had to stipulate <code>finset</code> but then this works. at some point I will need to understand better what is going on with this \"attribute\" business but for now...</p>",
        "id": 187914523,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581430476
    },
    {
        "content": "<p>By default, Lean won't unfold the definition of <code>g</code> to see if it's decidable, because this gets very expensive. <code>@[reducible]</code> says \"go ahead and unfold this anyway,\" and <code>@[derive decidable]</code> says \"unfold this temporarily to check that it's decidable, and add an instance to the environment.\"</p>",
        "id": 187915498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581430998
    },
    {
        "content": "<p>is there an isomorphism <code>Type x Type</code> with <code>Type</code>? I have two endofunctors on <code>Type</code> and it would seem nice to be able to see their product as again being (via isomorphism) another such endofunctor. perhaps this is nonsense</p>",
        "id": 188015695,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581518698
    },
    {
        "content": "<p>You clearly have <code>Type × Type → Type</code>. How do you want to construct <code>Type → Type × Type</code>?</p>",
        "id": 188016004,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581518905
    },
    {
        "content": "<p>Disclaimer: I'm not an expert in category theory.</p>",
        "id": 188016024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581518925
    },
    {
        "content": "<p>well, it can just be the diagonal, but if we say <code>def f : Type ⥤ (Type × Type) := λx, x × x</code>, it does not typecheck</p>",
        "id": 188016819,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581519362
    },
    {
        "content": "<p>So I understand the question better: what is the inverse of <code>(ℕ, ℝ)</code> supposed to be under <code>f</code>?</p>",
        "id": 188017533,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1581519748
    },
    {
        "content": "<p>A functor is more than a map.</p>",
        "id": 188018097,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581520142
    },
    {
        "content": "<p>You need at least <code>{obj := ..., map := ...}</code> if I remember field names correctly.</p>",
        "id": 188018129,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581520178
    },
    {
        "content": "<p>You can define functors <code>diag : Type ⥤ (Type × Type)</code> and <code>prod : (Type × Type) ⥤ Type</code>. What relations on these functors do you want?</p>",
        "id": 188018323,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581520304
    },
    {
        "content": "<p>yes, excuse me. I mean, I think clearly this does not work in the naive sense. So let me rephrase, why should <code>N x N : Type</code>? I think you can say something like type formation applies to types of a particular universe and not on that universe itself. But this typechecking example seems to indicate that we shoil be able to view any product of types as itself a Type. Am I hopelessly confused?</p>",
        "id": 188018925,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581520705
    },
    {
        "content": "<p>You can view <code>(×)</code> as a function <code>prod : Type → Type → Type</code>, Thus, <code>ℕ : Type</code> implies <code>prod ℕ ℕ : Type</code>, just like <code>mul : ℕ → ℕ → ℕ</code> implies that <code>mul 1 2 : ℕ</code>. Does that help?</p>",
        "id": 188019371,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1581520997
    },
    {
        "content": "<p>thanks. I'm not sure now how this \"thought\" got off the ground at all, will press on</p>",
        "id": 188020635,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581521730
    },
    {
        "content": "<blockquote>\n<p>is there an isomorphism <code>Type x Type</code> with <code>Type</code>? I have two endofunctors on <code>Type</code> and it would seem nice to be able to see their product as again being (via isomorphism) another such endofunctor. perhaps this is nonsense</p>\n</blockquote>\n<p>To do that you don't need an identification of <code>Type x Type</code> with <code>Type</code> -- you just compose the endofunctors, right?</p>",
        "id": 188026877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581525099
    },
    {
        "content": "<p>There will be <code>functor.comp</code> or something like that.</p>",
        "id": 188026905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581525115
    },
    {
        "content": "<blockquote>\n<p>There will be <code>functor.comp</code> or something like that.</p>\n</blockquote>\n<p>I really needed their categorial <em>product</em>, not comp, but I have realized now that my mistake is that I want their product in the functor category <code>Fun(Type, Type)</code> (which is \"calculated pointwise\"), not their product in the category <code>Type</code> (which is what <code>functor.prod</code> gives, essentially)...</p>\n<p>In defense of the idea that we might identify <code>Type</code> with <code>Type × Type</code>, it is the difference between whether there are only (types of) things in the world or if pairs (of types) of things are distinct, and not themselves (types of) things. In other words, I was thinking that if <code>Type</code> is sort of like a \"universe of sets\", and we thought that \"everything is a set\" then a pair of sets should itself be a set. Again, naively this doesn't work but I thought there might be some kind of \"universe trick\" or the like... something like the following (although this fails):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n <span class=\"c1\">-- functor.prod f g : Type u × Type w ⥤ Type u × Type w</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dummy</span> <span class=\"o\">(</span><span class=\"n\">fg</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">dummy</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>  <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 188062821,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581549325
    },
    {
        "content": "<p>It's just not true that Type = Type x Type -- does this help?</p>",
        "id": 188062940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581549422
    },
    {
        "content": "<p>This equality says that given a set there is some nice way to get two sets from it.</p>",
        "id": 188062954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581549442
    },
    {
        "content": "<p>You can certainly bundle together two types to get a new type, but there's no natural inverse map from Type to Type x Type because most types are not two other types bundled together.</p>",
        "id": 188063063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581549529
    },
    {
        "content": "<p>BTW if you write <code> ```lean </code> instead of just <code> ``` </code> at the top of your quoted code then you get syntax highlighting :-)</p>",
        "id": 188063100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581549577
    },
    {
        "content": "<p>no argument there</p>",
        "id": 188063172,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581549613
    },
    {
        "content": "<blockquote>\n<p>In other words, I was thinking that if Type is sort of like a \"universe of sets\", and we thought that \"everything is a set\" then a pair of sets should itself be a set. </p>\n</blockquote>\n<p>This part is fine -- that's going from Type x Type to Type.</p>",
        "id": 188063212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581549661
    },
    {
        "content": "<p>This is called <code>sum</code> in Lean, with notation <code>⊕</code> (in VS Code it's <code>\\oplus</code>)</p>",
        "id": 188063297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581549735
    },
    {
        "content": "<p>I'm not sure it's fine in the sense that it was meant, there's some natural functions <code>Type x Type</code> to <code>Type</code>, but I can't just give Lean a pair of types when it expects a <code>Type</code>.</p>",
        "id": 188063429,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581549886
    },
    {
        "content": "<p>sums of Types are not pairs of Types.</p>",
        "id": 188063558,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581549976
    },
    {
        "content": "<p>Oh of course you're right.</p>",
        "id": 188063593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581550017
    },
    {
        "content": "<p>so it's hard to get <code>dummy</code> to typecheck because given a pair of types I can manufacture a type, but I can't go the other way, so I can't construct a functor Type -&gt; Type from a functor Type^2 -&gt; Type^2</p>",
        "id": 188063929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581550295
    },
    {
        "content": "<p>And even though in ZFC, a pair of sets is a set, this is a useless construction categorically, since it's always just a set with two elements I think.</p>",
        "id": 188064537,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581550803
    },
    {
        "content": "<p>Is there a simple way to obtain the truth value of a <code>Prop</code>? Here is what I mean: when doing <code>#reduce tt &amp;&amp; (0=0)</code>, output is <code>tt</code>. Obviously Lean evaluates the truth value of <code>(0=0) : Prop</code> and produces a <code>bool</code>. But if one tries <code>#reduce 0 = 0</code>, the output is not a <code>bool</code>. I can evaluate the <code>Prop</code> by something like <code>def is_tt : bool := 0 = 0</code> and then <code>#reduce is_tt</code>, but there should be a more straightforward way that Lean itself appears to use and I couldn't find.</p>",
        "id": 188329094,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581867221
    },
    {
        "content": "<p>There is <code>to_bool</code>. Is this what you're after?</p>",
        "id": 188329135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581867266
    },
    {
        "content": "<p>That is it! Somehow I couldn't find it, although I did find something like <code>to_bool_true_eq_tt</code> which didn't immediately help. Thanks!</p>",
        "id": 188329240,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581867540
    },
    {
        "content": "<p>Don't expect to learn your way around immediately. It took me years. Tools are getting better for you to solve many problems on your own nowadays, but sometimes asking is more effective.</p>",
        "id": 188329836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581868791
    },
    {
        "content": "<p>I've written:</p>\n<div class=\"codehilite\"><pre><span></span>inductive type_with (v : Type → Type)\n| mk (α : Type) : v α → α → with_\n\ndef f : list (type_with has_to_string) → string := ....\n</pre></div>\n\n\n<p>Is there a way to write something equivalent without having to use a \"helper\" type ?<br>\nIf it's not possible, does <code>type_with</code> already exists in lean standard library/mathlib ?</p>",
        "id": 188395198,
        "sender_full_name": "PolyB",
        "timestamp": 1581960550
    },
    {
        "content": "<p>If you write <code>lean</code> after opening a code block, then you get syntax highlighting. Are you looking for <code>Σ  α : Type, has_to_string α</code>?</p>",
        "id": 188398475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581964044
    },
    {
        "content": "<p>you might want to look at <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/rbmap/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/rbmap/basic.lean\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/data/rbmap/basic.lean</a> line 60</p>",
        "id": 188398640,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1581964226
    },
    {
        "content": "<p>that line defines a string representation for a red-black tree</p>",
        "id": 188398664,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1581964277
    },
    {
        "content": "<p>Thanks for the responses,<br>\nsigma looks almost equivalent to my <code>type_with</code> , but it looks like I loose instance inference</p>",
        "id": 188399450,
        "sender_full_name": "PolyB",
        "timestamp": 1581965111
    },
    {
        "content": "<p>I'm not sure what instance inference you have with <code>type_with</code>...?</p>",
        "id": 188401295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581967204
    },
    {
        "content": "<p>Hi everyone! I'm beginning my journey in Lean, and I'm following along the tutorial here: <br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html</a></p>\n<p>Why is it that when you input <code>#check Type</code> to lean's interpreter(?), you're returned <code>Type 1</code> instead of <code>Type 0</code>?</p>",
        "id": 188402025,
        "sender_full_name": "Gabriel Ruiz",
        "timestamp": 1581967992
    },
    {
        "content": "<p><code>Type 0</code> is the same as <code>Type</code>. If we had <code>Type : Type</code>, then the system would be logically inconsistent (you could encode Cantor's paradox or something).</p>",
        "id": 188402255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581968265
    },
    {
        "content": "<p><code>Type 1</code> is a \"bigger universe\" which can contain things like <code>Type = Type 0</code>, and <code>Type 1</code> is itself a type that lives in the next larger universe <code>Type 2</code>, and so on</p>",
        "id": 188402323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581968325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> You can write <code>def bundle_to_string (α : Type) [h : has_to_string α]  : Σ α : Type, has_to_string α := ⟨α, h⟩</code> (didn't test).</p>",
        "id": 188402719,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581968786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188402323\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188402323\">said</a>:</p>\n<blockquote>\n<p><code>Type 1</code> is a \"bigger universe\" which can contain things like <code>Type = Type 0</code>, and <code>Type 1</code> is itself a type that lives in the next larger universe <code>Type 2</code>, and so on</p>\n</blockquote>\n<p>I realize now I pretty much explained just the same thing it already says in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#types-as-objects\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#types-as-objects\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#types-as-objects</a></p>",
        "id": 188402851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581968958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I'm following, and now I'm starting to see my confusion. What then does <code>#check</code> do?</p>",
        "id": 188402929,
        "sender_full_name": "Gabriel Ruiz",
        "timestamp": 1581969043
    },
    {
        "content": "<p><code>#check</code> tells you the type of something</p>",
        "id": 188402938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581969061
    },
    {
        "content": "<p>e.g. <code>#check 3</code> will print something like <code>3 : nat</code></p>",
        "id": 188402950,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581969089
    },
    {
        "content": "<p>Right, which is why I'm perplexed that it doesn't actually return <code>Type 0</code>  when I put in <code>#check Type 0</code>. I understand that it's <em>also</em> of <code>Type 1</code>, but why does it tell me that instead of its actual type: <code>Type 0</code>?</p>",
        "id": 188403127,
        "sender_full_name": "Gabriel Ruiz",
        "timestamp": 1581969261
    },
    {
        "content": "<p>Because that is not its type</p>",
        "id": 188403141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581969296
    },
    {
        "content": "<p>You can't be your own type</p>",
        "id": 188403154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581969307
    },
    {
        "content": "<p>Ohhhhhhhhhhhhhhhh</p>",
        "id": 188403156,
        "sender_full_name": "Gabriel Ruiz",
        "timestamp": 1581969312
    },
    {
        "content": "<p>That clicked, thank you!</p>",
        "id": 188403170,
        "sender_full_name": "Gabriel Ruiz",
        "timestamp": 1581969340
    },
    {
        "content": "<p>Similarly, <code>Type 1</code> will have type <code>Type 2</code>, and <code>Type 2</code> will have type ...</p>",
        "id": 188403224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581969364
    },
    {
        "content": "<p>How would one do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lol</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>by ring</code> manages in <code>ℝ</code>, should I use some <code>coe</code> is injective?</p>",
        "id": 188404676,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581971100
    },
    {
        "content": "<p>The tactic <code>norm_cast</code> will help you with anything <code>coe</code>-related:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lol</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">3</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188407423,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581974512
    },
    {
        "content": "<p>Thanks!<br>\nI thought maybe the <code>real.sqrt 3</code> was confusing things, so I tried to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lol&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>first. I finally got this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lol&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(I was trying <code>exact absurd h dec_trivial</code>, which wasn't working, where there is now a <code>norm_cast</code>, thanks again! :)).<br>\nIs it really this hard? Why doesn't <code>dec_trivial</code> work here (it worked in very similar circumstances before)</p>",
        "id": 188409176,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581976708
    },
    {
        "content": "<p><code>dec_trivial</code> won't prove anything about the complexes, because the complexes don't have decidable equality.</p>",
        "id": 188409388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581977014
    },
    {
        "content": "<p><code>dec_trivial</code> works for naturals, integers and rationals, not for reals, complexes or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>-adics.</p>",
        "id": 188409434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581977044
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lol&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188409658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581977400
    },
    {
        "content": "<p><code>field_simp</code>!!!!!!</p>",
        "id": 188409754,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581977507
    },
    {
        "content": "<p><code>ring</code> doesn't always work when you have denominators, for obvious reasons. <code>field_simp</code> is, I think, some kind of denominator tactic. It's the first time I ever used it; I remembered people talking about it a month or two ago and I just looked it up in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md\">the tactic list</a>.</p>",
        "id": 188409824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581977589
    },
    {
        "content": "<p>Thanks for the <code>dec_trivial</code> explanation. I had <code>h : 2 = 0</code> but couldn't figure out in which ring 2 and 0 were. Is there a <code>#print</code> setting that will show me?</p>",
        "id": 188409899,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581977654
    },
    {
        "content": "<p>You can <code>set_option pp.all true</code> before your proof. Then you'll see what Lean is actually doing behind the scenes. Be warned though, it's not a pretty sight sometimes.</p>",
        "id": 188409926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581977696
    },
    {
        "content": "<p>:) Thanks!</p>",
        "id": 188409946,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1581977728
    },
    {
        "content": "<p>Maybe you could try <code>set_option pp.numerals false</code> instead but I'm not sure what will happen then.</p>",
        "id": 188410022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581977813
    },
    {
        "content": "<blockquote>\n<p><code>lemma lol' (x : ℂ) : x = 2 * x / 2</code></p>\n</blockquote>\n<p>This should be provable by <code>ring</code> alone -- notice it works if you change C to R. IIRC there's something in the C++ <code>norm_num</code> that looks for an order instance unnecessarily when it does denominator cancellation. Probably fixable in 3.5c.</p>",
        "id": 188410142,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581977995
    },
    {
        "content": "<p>I am defining a type of automata (DFA). Initially I had something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">DFA</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">Alphabet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">initialState</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">AcceptingStates</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">Alphabet</span> <span class=\"bp\">→</span> <span class=\"n\">State</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>this works ok for a while, I can define some enumerated type for an alphabet and so on. but then for some applications, it would be really useful to be able to <code>map</code> <code>δ</code> over all of the letters of the alphabet. So it has to be a list,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">structure</span> <span class=\"n\">DFA</span> <span class=\"o\">:=</span>\n <span class=\"o\">(</span><span class=\"n\">Alphabet</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">initialState</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">AcceptingStates</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">Alphabet</span> <span class=\"bp\">→</span> <span class=\"n\">State</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but of course now we have bad syntax at <code>δ</code> because <code>Alphabet</code> has become a term. I can change it to <code>δ : forall a \\in Alphabet, State → State)</code>, say, but then it seems like I have to provide proofs of membership all the time. Of course there is the basic solution <code>δ : Q → list β → Q</code>, but this is not a very expressive type since we do not want any old <code>list  β</code>. Is there another possibility I've missed?</p>",
        "id": 188414786,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581984884
    },
    {
        "content": "<p>the other possibility is my original structure is good and my desire to <code>map</code> is a hangover from other languages. Actually, maybe I can use <code>rec</code> on my alphabets qua enumerated types instead... will see if that can give the intended effect tomorrow.</p>",
        "id": 188415257,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1581985765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247064\">@Matt E</span> There's a thing called <code>fintype</code> in mathlib that might be what you want for the alphabet, or at least be a good jumping off point. It's sort of secretly a list (the hierarchy for its definition is fintype -&gt; finset -&gt; multiset -&gt; quotient of list A over list permutation). It looks like there are functions <code>fintype.to_finset</code> and then <code>finset.map</code>, or you might be able to use coercions to get what you want. For the membership stuff I would assume there are helpful lemmas in those modules. Someone more knowledgeable can probably give details.</p>",
        "id": 188417768,
        "sender_full_name": "Chris B",
        "timestamp": 1581990030
    },
    {
        "content": "<blockquote>\n<p>IIRC there's something in the C++ <code>norm_num</code> that looks for an order instance unnecessarily when it does denominator cancellation. </p>\n</blockquote>\n<p>The point being that the order instance guarantees injectivity of any ring hom from int, rat or real, so is a cheap way of checking nonzero denominators</p>",
        "id": 188438419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582020799
    },
    {
        "content": "<blockquote>\n<p>it would be really useful to be able to <code>map</code> <code>δ</code> over all of the letters of the alphabet. So it has to be a list</p>\n</blockquote>\n<p>Lean has all sorts of <code>map</code>s, as well as things like <code>set.image</code>. What exactly do you need? Lists are lists and if you feel like your mental model isn't a list then maybe you need something else.</p>",
        "id": 188438649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582021023
    },
    {
        "content": "<p>Maybe it's as simple as using <code>set.range</code>?</p>",
        "id": 188438678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582021065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> that is indeed probably what I want. so I can put <code>structure DFA (α : Type) [fintype α] := ...</code> so far so good. now let</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"n\">C</span>\n</pre></div>\n\n\n<p>now I need an instance of fintype, but I'm stuck at:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">α_fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188453690,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582035458
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">α_fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188453958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582035628
    },
    {
        "content": "<p><code>cases</code> is your friend here. Given <code>x : α</code> where <code>α</code> is any inductive type, <code>cases</code> will split into a case for each constructor.</p>",
        "id": 188454010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582035674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188438678\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188438678\">said</a>:</p>\n<blockquote>\n<p>Maybe it's as simple as using <code>set.range</code>?</p>\n</blockquote>\n<p>that might work once I have this fintype stuff working, the real block is having something that is finite, decidable etc.</p>",
        "id": 188454107,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582035735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188454010\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188454010\">said</a>:</p>\n<blockquote>\n<p><code>cases</code> is your friend here. Given <code>x : α</code> where <code>α</code> is any inductive type, <code>cases</code> will split into a case for each constructor.</p>\n</blockquote>\n<p>perfect, thanks!</p>",
        "id": 188454126,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582035761
    },
    {
        "content": "<p>Using tactic mode to define data is something I instinctively avoid doing. It is probably not an issue here, but my instinct would be <code>instance α_fin : fintype α := {elems := {α.A, α.B, α.C}, complete := λ x, by cases x; simp}</code>.</p>",
        "id": 188454176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582035811
    },
    {
        "content": "<p>The logic is that some tactics make terrifying terms which mean that it becomes hard to reason about the objects you've defined. I strongly suspect that <code>refine</code> is not one of them, but I am never sure. I do know that <code>rw</code> can really make things scary.</p>",
        "id": 188454288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582035877
    },
    {
        "content": "<blockquote>\n<p>that might work once I have this fintype stuff working, the real block is having something that is finite, decidable etc.</p>\n</blockquote>\n<p>Is your alphabet finite and decidable? You can just add these as assumptions of course.</p>",
        "id": 188454376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582035949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188454376\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188454376\">said</a>:</p>\n<blockquote>\n<p>Is your alphabet finite and decidable? You can just add these as assumptions of course.</p>\n</blockquote>\n<p>not exactly sure what you mean</p>",
        "id": 188459255,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582039171
    },
    {
        "content": "<p>that sounds like it would suffice to prove some things abstractly, but I am working with particular alphabets</p>",
        "id": 188459388,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582039252
    },
    {
        "content": "<p>I just meant <code>(Alphabet : Type) [decidable_eq Alphabet] [fintype Alphabet]</code></p>",
        "id": 188463924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582042218
    },
    {
        "content": "<p>if I have a quotient on type <code>X</code> and a <code>myset : set X</code>, is there a way to turn the latter into a <code>set X/~</code>? Is <code>quotient.lift myset ...</code> on the right track?</p>",
        "id": 188539816,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1582115530
    },
    {
        "content": "<p>You want to take the image of a set under a function. This is done with the notation <code>''</code>, which is a shortcut for <code>set.image</code>.</p>",
        "id": 188541491,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582117125
    },
    {
        "content": "<p>Is there a simple-ish answer for what Lean does internally with attributes? Also are there any community docs on how to define attributes? That part of the reference manual is blank. There's a one-liner in mathlib's <code>commands.md</code> doc that shows the literal syntax for defining a local attribute but that's about it.</p>",
        "id": 188783047,
        "sender_full_name": "Chris B",
        "timestamp": 1582326291
    },
    {
        "content": "<p>There aren't that many attributes. A <code>simp</code> tag means \"<code>simp</code> can use this\", I think <code>refl_lemna</code> means <code>dsimp</code> can use it, <code>ext</code> means <code>ext</code> can use it, <code>to_additive</code> means that lean will try and generate an additive version of this multiplicative definition, there are some <code>cast</code>y ones to do with <code>norm_cast</code> tactic and these are explained in the tactics doc, and I think that's most of the ones I know about</p>",
        "id": 188788972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582332359
    },
    {
        "content": "<p><code>refl</code> and<code>symm</code> and <code>trans</code>mean that the associated tactic can use them and they can also be used in <code>calc</code> proofs</p>",
        "id": 188789035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582332422
    },
    {
        "content": "<p>You can list all the attributes, there are a lot you don't know about</p>",
        "id": 188789128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582332538
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">attributes</span>\n</pre></div>",
        "id": 188789142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582332562
    },
    {
        "content": "<p>Are most of them not for human consumption though? It's not as if I see these all over mathlib</p>",
        "id": 188789220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582332648
    },
    {
        "content": "<p>I'm sure they are zipf distributed</p>",
        "id": 188789237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582332672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> 's <a href=\"https://github.com/leanprover-community/mathlib/pull/1963\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1963\">doc PR</a> will put all documentation for custom attributes into a new file. The header for that file is still WIP in the corresponding doc-gen PR <a href=\"https://github.com/leanprover-community/doc-gen/pull/11/files#diff-8b934aba0acb01944938f124f5c7a9c8R555\" target=\"_blank\" title=\"https://github.com/leanprover-community/doc-gen/pull/11/files#diff-8b934aba0acb01944938f124f5c7a9c8R555\">here</a>, and that would be a good spot to add info about how attributes work.</p>",
        "id": 188790998,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582335024
    },
    {
        "content": "<p>I meant more like \"what does Lean do internally when it encounters an attribute\" as opposed to what a particular attribute does, but looking closer at how they're defined in mathlib's tactics module it looks like it's pretty involved meta stuff, so I think therein lies my answer.</p>",
        "id": 188845582,
        "sender_full_name": "Chris B",
        "timestamp": 1582426841
    },
    {
        "content": "<p>Attributes are just ways of tagging a definition and <code>simp</code> is written in C++ so in some cases it can be C++ code not Lean code which is using those tags</p>",
        "id": 188857903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582445352
    },
    {
        "content": "<p>I keep getting these errors when I try to define a matrix. I have mathlib installed and working and already did <code>import data.matrix.basic</code> and <code>import data.matrix.pequiv</code>. I feel like I'm missing something obvious <a href=\"/user_uploads/3121/DWz5s-U1nM1EyKseZH0CKRwu/Screen-Shot-2020-02-23-at-11.14.34-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-23-at-11.14.34-PM.png\">Screen-Shot-2020-02-23-at-11.14.34-PM.png</a> <a href=\"/user_uploads/3121/NlA-v6zJheFsLg9m0ruJPiWn/Screen-Shot-2020-02-23-at-11.14.24-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-23-at-11.14.24-PM.png\">Screen-Shot-2020-02-23-at-11.14.24-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DWz5s-U1nM1EyKseZH0CKRwu/Screen-Shot-2020-02-23-at-11.14.34-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-23-at-11.14.34-PM.png\"><img src=\"/user_uploads/3121/DWz5s-U1nM1EyKseZH0CKRwu/Screen-Shot-2020-02-23-at-11.14.34-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NlA-v6zJheFsLg9m0ruJPiWn/Screen-Shot-2020-02-23-at-11.14.24-PM.png\" target=\"_blank\" title=\"Screen-Shot-2020-02-23-at-11.14.24-PM.png\"><img src=\"/user_uploads/3121/NlA-v6zJheFsLg9m0ruJPiWn/Screen-Shot-2020-02-23-at-11.14.24-PM.png\"></a></div><div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">{{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">},{</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}}</span>\n</pre></div>",
        "id": 188898048,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1582517877
    },
    {
        "content": "<p>Did you copy this from <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors\" title=\"#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors</a> ? I don't think this way of defining matrices is standard at all.</p>",
        "id": 188898243,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582518168
    },
    {
        "content": "<p>(I'd recommend not using screenshots: it's worth your effort, and everyone's here, to prepare minimum working examples of the problems you're having. Generally, at least half the time while I'm trying to prepare an example to post here for help, the process of minimising makes me realise what  I'm doing wrong.)</p>",
        "id": 188899263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582519983
    },
    {
        "content": "<p>Yeah, screenshots are much harder to view on mobile. Post code!</p>",
        "id": 188904859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582529009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188899263\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188899263\">said</a>:</p>\n<blockquote>\n<p>(I'd recommend not using screenshots: it's worth your effort, and everyone's here, to prepare minimum working examples of the problems you're having. Generally, at least half the time while I'm trying to prepare an example to post here for help, the process of minimising makes me realise what  I'm doing wrong.)</p>\n</blockquote>\n<p>I'll keep that in mind going forward. I did post the code below the screenshot as well, but maybe got hidden because it was only one line. I do think I've relied maybe a little too heavily on screenshots here so I will be more conscientious of that. Thank you!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188898243\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/188898243\">said</a>:</p>\n<blockquote>\n<p>Did you copy this from <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors\" title=\"#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20matrices.20and.20vectors</a> ? I don't think this way of defining matrices is standard at all.</p>\n</blockquote>\n<p>I did! Looking back at that post I'm realizing that initially I thought that notation was standard and the post was about defining new notation for other operations. I got it to work using functions, but am still wondering if there's a better way to define a matrix with arbitrary values than defining a function like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--Lambda definition. This seems ok if there&#39;s a functional relationship between the values x and y and the element at position (x,y)</span>\n<span class=\"n\">def</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--inconvenient function definition. I know I could condense this down to a single lambda statement, but it still doesn&#39;t seem great if I have a list of values I want to turn into a matrix. Is this a necessary consequence of functional programming? I&#39;m not seeing a more convenient &quot;constructor &quot; in mathlib/src/data/matrix</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r1</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span>\n  <span class=\"mi\">3</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r2</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)):</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">4</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">5</span> <span class=\"k\">else</span>\n  <span class=\"mi\">6</span>\n\n<span class=\"n\">def</span> <span class=\"n\">r3</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)):</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">7</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">8</span> <span class=\"k\">else</span>\n  <span class=\"mi\">9</span>\n\n<span class=\"n\">def</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">r1</span> <span class=\"k\">else</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"n\">r2</span> <span class=\"k\">else</span>\n<span class=\"n\">r3</span>\n\n<span class=\"n\">def</span> <span class=\"n\">myMatrix</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">--EDIT: somewhat better way of representing a matrix but this still doesn&#39;t seem great.</span>\n<span class=\"n\">def</span> <span class=\"n\">myMatrix2</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">2</span> <span class=\"k\">else</span>\n  <span class=\"mi\">3</span>\n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">4</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">5</span> <span class=\"k\">else</span>\n  <span class=\"mi\">6</span>\n<span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"mi\">7</span> <span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"mi\">8</span> <span class=\"k\">else</span>\n  <span class=\"mi\">9</span>\n</pre></div>",
        "id": 188949915,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1582567267
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#pattern-matching\">pattern-matching syntax</a>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">r1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n</pre></div>",
        "id": 188951206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582568204
    },
    {
        "content": "<p>You could define a little helper function like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list_of_list_to_mat</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">ll</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ll</span><span class=\"bp\">.</span><span class=\"n\">inth</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">inth</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list_of_list_to_mat</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">]]</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>  <span class=\"mi\">1</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 188953287,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582569760
    },
    {
        "content": "<p>Cool! This seems useful. Thank you!</p>",
        "id": 188962767,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1582576198
    },
    {
        "content": "<p>for the logic and proof tutorial, when i run the code in visual studios it sometimes doesn't run and instead  just says 'updating' indefinitely.  This has happened on a few examples. The current one is <br>\nvariables A B : Prop</p>\n<p>example : A ∧ ¬ B → ¬ B ∧ A :=<br>\nassume h : A ∧ ¬ B,<br>\nshow ¬ B ∧ A, from and.intro (and.right h) (and.left h)</p>\n<p>While on my RHS under 'Lean messages' it says 'Updating'</p>",
        "id": 189395405,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582992441
    },
    {
        "content": "<p>Pro tip:</p>\n<div class=\"codehilite\"><pre><span></span>```lean\ncode like this gets highlighted\n```\n</pre></div>",
        "id": 189395578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582992739
    },
    {
        "content": "<p>Concerning your question: how have you installed Lean?</p>",
        "id": 189395588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582992778
    },
    {
        "content": "<p>I followed the instructions from 'logical verification in lean' and then enabled the extension in VS studios. When doing that one of the steps I think didn't work (or, I messed it up, which is probably the case as I have never used vs studios before). Some of the code is running however. I can always use the online browser tool for the moment</p>",
        "id": 189396573,
        "sender_full_name": "Ethan Horsfall",
        "timestamp": 1582994685
    },
    {
        "content": "<p>NB it's supposed to say \"updating\" indefinitely. This just means \"if you press a button, I'll update\"</p>",
        "id": 189397010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582995536
    },
    {
        "content": "<p>We really <em>really</em> need to rephrase that \"Updating\". Every newbie gets confused by this message.</p>",
        "id": 189397072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582995618
    },
    {
        "content": "<p>How about \"ready\"?</p>",
        "id": 189397150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582995829
    },
    {
        "content": "<p>Maybe \"Active\" or \"Live\" makes more sense since Lean may or may not be busy processing stuff? </p>\n<p>The intention of that button is to be able to pause / unpause the updating of the info view. This is useful if you're making changes to a slow proof and you want to keep the info view from refreshing over and over while you refer to something in the context.</p>",
        "id": 189398804,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582999005
    },
    {
        "content": "<p>Maybe the clearest thing would be to name the button rather than describing state. For instance \"Freeze display\"/\"Unfreeze display\"</p>",
        "id": 189401737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583003720
    },
    {
        "content": "<p>The issue is not when expert users are editing a slow proof, the issue is when beginners think that Lean has hung because (a) it doesn't seem to be doing anything [because everything is working] and (b) it says \"updating\" in the top right [which makes it sound a lot like Lean is doing something]. This can happen in particular if a user has managed to click on the \"display messages\" button rather than the \"display goal\" button -- if all is well then \"display messages\" can be empty, so Lean just \"sits there updating\".</p>\n<p>If we're in the business of changing stuff like this, can we also change the \"Lean Messages\" title of the \"Display Goal\" view to \"Lean Goal\"?</p>",
        "id": 189402183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583004450
    },
    {
        "content": "<p>I agree completely. I'll make a PR later with some changes.</p>",
        "id": 189402410,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583004835
    },
    {
        "content": "<p>Would it actually even be better if we just removed the text next to the button altogether? The button already has a tooltip assigned to it that says \"Stop updating\" / \"Continue updating\", which I can change to \"Freeze display\" / \"Unfreeze display\".</p>",
        "id": 189403135,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583006091
    },
    {
        "content": "<p>Kids these days all speak some universal language of symbols, and that pause button symbol is certainly one of the standard symbols in this language, as is the green triangle which appears when you click it.</p>",
        "id": 189405092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583009720
    },
    {
        "content": "<p>Yes, maybe removing the words would be enough.</p>",
        "id": 189405098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583009755
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>PR: <a href=\"https://github.com/leanprover/vscode-lean/pull/145\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/pull/145\">https://github.com/leanprover/vscode-lean/pull/145</a></p>",
        "id": 189405453,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583010377
    },
    {
        "content": "<p>you don't press ctrl-S to freeze the info window, and ctrl-Q to unfreeze it?</p>",
        "id": 189408266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583015737
    },
    {
        "content": "<p>Kids these days</p>",
        "id": 189408270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583015742
    },
    {
        "content": "<p>Haha, you could bind both ctrl+S and ctrl+Q to <code>lean.infoView.toggleUpdating</code> for that old-school feel if you really wanted.</p>",
        "id": 189408384,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583015945
    },
    {
        "content": "<p>Hey guys, hoping I can contribute to this project. But having a hard time figuring out where (other than \"issues\" list in GitHub). E.g. this page of list of theorems that have been proved lead to 404 errors: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/theories.md</a>. Recommendations for good places to start?</p>",
        "id": 189460298,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583119267
    },
    {
        "content": "<p>Which area of mathematics do you prefer?</p>",
        "id": 189460398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583119444
    },
    {
        "content": "<p>There are plenty of holes in any area.</p>",
        "id": 189460403,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583119455
    },
    {
        "content": "<p>By \"holes\" I mean \"not yet formalized definitions/theorems\".</p>",
        "id": 189460420,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583119561
    },
    {
        "content": "<p>Probability, stats, or linear algebra. But not sure if all undergrad theorems/lemma have been implemented already... I only have a M.S. in math. I'd be happy to attempt to contribute elsewhere though if need be</p>",
        "id": 189460459,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583119570
    },
    {
        "content": "<p>We have some linear algebra and measure theory. There should be quite a few holes in our linear algebra library but I notice them only when I need them, so let's wait for someone who has better understanding of the current state of <code>src/linear_algebra</code>.</p>",
        "id": 189460641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583119942
    },
    {
        "content": "<p>Not sure what's up with the broken links. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> you were the last one to touch this file, where have the <code>functions.md</code> et al files gone?</p>",
        "id": 189460717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583120127
    },
    {
        "content": "<p>The topology one isn't broken <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 189460763,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583120212
    },
    {
        "content": "<p>Other than cross referencing linear algebra theorems/lemmas with those mentioned in textbooks, is there any better way to enumerate these holes? Better yet, an index of what has been proven would go a long way... perhaps this documentation is something I can help out with as well</p>",
        "id": 189460765,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583120213
    },
    {
        "content": "<p>The enumeration of holes is difficult because the set of holes in mathlib is cofinite</p>",
        "id": 189460780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583120241
    },
    {
        "content": "<p>As for what has been proven, there are of course the source files themselves, which take some getting used to but are not an unreasonable way to familiarize yourself with the contents. But the <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/basic.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/basic.html\">mathlib docs</a> are a less intimidating view on the source files</p>",
        "id": 189460886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583120404
    },
    {
        "content": "<p>If you see a theorem that has a name, then adding a docstring with this name is definitely worth a PR.</p>",
        "id": 189460942,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583120532
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , I'll check those docs out. And thanks <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> for the suggestion. I'll start combing through the linear_algebra module and cross-referencing its contents with theorems/lemmas in some textbooks I have, and try to fill in any documentation and missing theorems/lemmas along the way. Thanks guys :)</p>",
        "id": 189461125,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583120915
    },
    {
        "content": "<p>I'm trying to say the following lemma: Let A be a ring with the following properties: for all rings R, there exists a unique homomorphism A → R. Then A ≅ ℤ.</p>\n<p>I have a few attempts, but could someone help me formulate this? My first attempt looks like the following (It's basically how I would do this in haskell):</p>\n<div class=\"codehilite\"><pre><span></span>import algebra.ring\nimport logic.unique\n\nvariables (A : ring Type) (R : ring Type)\nlemma lemma03_v0 : A → (∀ R → unique (A → R)) → (A ≅ ℤ) := sorry\n</pre></div>\n\n\n<p>Things that I think are wrong: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span></span></span></span> should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span> and maybe there should only be one  → before A ≅ ℤ? I still get a lot of unexpected tokens or invalid expressions, though.</p>",
        "id": 189511138,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583168381
    },
    {
        "content": "<p>To say \"A is a ring\", you can write <code>variables (A : Type*) [ring A]</code>. In Haskell terms, <code>[ring A]</code> can be interpreted as the typeclass constraint <code>(Ring A) =&gt; ...</code></p>",
        "id": 189511383,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583168517
    },
    {
        "content": "<p>The next error is <code>∀ R → ...</code>: the <code>→</code> should be a <code>,</code> (something that I still mess up continually, coming from Agda)</p>",
        "id": 189511584,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1583168628
    },
    {
        "content": "<p>This kind of thing is easier using the bundled/category theory approach</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}),</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≅</span> <span class=\"n\">Ring</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 189511929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583168843
    },
    {
        "content": "<p>otherwise, I think it's</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 189512999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583169424
    },
    {
        "content": "<p>Why would you use the Pi notation instead of forall here? I know they are the same to Lean, I'm asking about psychology</p>",
        "id": 189513225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583169535
    },
    {
        "content": "<p>Well, <code>unique</code> is data. Really it should be <code>def</code> too, and not <code>lemma</code></p>",
        "id": 189513296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583169574
    },
    {
        "content": "<p>Oh. I would have never suspected <code>unique</code> to be data.</p>",
        "id": 189513392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583169609
    },
    {
        "content": "<p>Yeah, I should have called it <code>cunique</code>...</p>",
        "id": 189513458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583169655
    },
    {
        "content": "<p>But now you have a chance to PR <code>discrete_unique</code>. Doesn't that make you feel happy?</p>",
        "id": 189513488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583169673
    },
    {
        "content": "<p>cool!  thanks for all of this -- I'm running into some weird compilation stuff right now (probably need to clean up this experiment-repo).</p>",
        "id": 189513724,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583169811
    },
    {
        "content": "<p>The version without category stuff doesn't read nice, but I guess this is fair: the lemma is really category theoretic in flavor.</p>",
        "id": 189513824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583169855
    },
    {
        "content": "<p>Sam, do you understand what <code>exactI</code> is doing?</p>",
        "id": 189513857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583169874
    },
    {
        "content": "<p>not at the moment (I was going to wait for matlib to rebuild before examining in depth). I am also wondering what the longer arrow is in your unique (A --&gt; R) is.</p>",
        "id": 189514110,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170026
    },
    {
        "content": "<p>Why are you rebuilding mathlib?</p>",
        "id": 189514150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170051
    },
    {
        "content": "<p>Reid's longer arrow is Hom in the category library.</p>",
        "id": 189514227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170084
    },
    {
        "content": "<p>Oh! it's a tactic? I was about to start reading that chapter next.</p>",
        "id": 189514228,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170084
    },
    {
        "content": "<p>cool</p>",
        "id": 189514247,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170095
    },
    {
        "content": "<p>Yes, <code>exactI</code> is a tactic, and not the easiest one to understand.</p>",
        "id": 189514267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170109
    },
    {
        "content": "<p>But first we need to make sure you don't need to rebuild mathlib. Why do you think you need to do that?</p>",
        "id": 189514314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170135
    },
    {
        "content": "<p>ehh... it's a little silly -- I am using emacs for the first time (normally I use vim) and flycheck seems to be maxing out on errors. I think it's a caching issue since I was trying to use some certigrad files.</p>",
        "id": 189514564,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170260
    },
    {
        "content": "<p>Lean is already difficult, don't add emacs difficulty on top of it if you are not a emacs user.</p>",
        "id": 189514650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170309
    },
    {
        "content": "<p>Why don't you use VScode?</p>",
        "id": 189514735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170336
    },
    {
        "content": "<p>ah, it's working out fine, actually! that's not my main concern : )</p>",
        "id": 189514751,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170346
    },
    {
        "content": "<p>Yeah, so I've cleaned up the repo and rebuilt with <code>leanpkg build</code> -- the flycheck seems to be working perfectly fine now</p>",
        "id": 189514811,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170392
    },
    {
        "content": "<p>I'm at the point in my programming career where it's quite painful not to use vim and emacs has good support for this via spacemacs. It's self-inflicted pain, no need to worry about it!</p>",
        "id": 189514936,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170460
    },
    {
        "content": "<p>VScode has a vim plugin</p>",
        "id": 189514965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583170479
    },
    {
        "content": "<p>Both Patrick and I use it.</p>",
        "id": 189514976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583170484
    },
    {
        "content": "<p>It doesn't have <em>all</em> the goodies of regular vim, but it's quite close.</p>",
        "id": 189515031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583170515
    },
    {
        "content": "<p>okay! I'll check it out as well</p>",
        "id": 189515064,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170539
    },
    {
        "content": "<p>I still strongly advise you to use VScode. But let's go back to <code>exactI</code> because I have very little time before leaving my office (Paris time-zone). So the issue is <code>ring_hom A R</code> expects to find a (semi)-ring structure on <code>A</code> and <code>R</code> by type class search. The one on <code>A</code> will be found without problem, because it's there from the beginning. The one on <code>R</code> is mentioned too late in the game to be picked up if you don't ask Lean to search. That's what <code>exactI</code> is doing (asking Lean).</p>",
        "id": 189515143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170569
    },
    {
        "content": "<p>If you want to avoid that <code>exactI</code> you'll need to tell Lean to forget about how this semi-ring structure was meant to be found, and provide it yourself. This would be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0&#39;</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">hR</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>which also has a silly way of saying there exists a unique <code>φ</code> with type <code>@ring_hom A R _ hR.to_semiring</code>.</p>",
        "id": 189515288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170672
    },
    {
        "content": "<p>Now I need to go. Have fun!</p>",
        "id": 189515340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583170688
    },
    {
        "content": "<p>thank you!</p>",
        "id": 189515397,
        "sender_full_name": "Sam Stites",
        "timestamp": 1583170733
    },
    {
        "content": "<p>If you move the universal hypothesis before the colon, you don't need all this exactI stuff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0&#39;</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"bp\">∃!</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 189518730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583172647
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0&#39;</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"bp\">∃!</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- what&#39;s the map from ℤ to an arbitrary ring?</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Once I figure out the name of the canonical map from the integers to an arbitrary ring, I think we're nearly done (the ring hom A -&gt; A must be the identity by uniqueness).</p>",
        "id": 189520450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583173761
    },
    {
        "content": "<p>Oh -- I hadn't seen the <code>unique</code> trick, that makes it cleaner.</p>",
        "id": 189520662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583173888
    },
    {
        "content": "<p>I hadn't realized the \"left of the colon\" would work that way in this context, thanks.</p>",
        "id": 189520688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583173903
    },
    {
        "content": "<p>Funnily enough, I realised this myself just the other day when I was trying to formalise the assertion that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\times Y\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> was always closed then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> was compact.</p>",
        "id": 189520789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583173937
    },
    {
        "content": "<p>Another thing I noticed was that if I restricted to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in the same universe as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> then the result was actually stronger not weaker -- universe monomorphism FTW. The same is going on in here (possibly unintentionally)</p>",
        "id": 189520886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583173992
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0&#39;</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- what&#39;s the map from ℤ to an arbitrary ring?</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 189521038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174062
    },
    {
        "content": "<p>I don't think that it's stronger because you can't say \"for all <code>Y</code> from all universes\"</p>",
        "id": 189521070,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174076
    },
    {
        "content": "<p>Yes but this is an input, not an output, so if I know it for all Y in all universes, I can deduce it for all Y in the same universe as X, which is all I need.</p>",
        "id": 189521122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174110
    },
    {
        "content": "<p>So, if you use <code>(X : Type u) (Y : Type v)</code>, then it says \"if for all <code>Y</code> from some universe <code>v</code> (possibly not <code>u</code>), then ...\"</p>",
        "id": 189521133,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174119
    },
    {
        "content": "<p>Yes.</p>",
        "id": 189521298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174243
    },
    {
        "content": "<p>And this does not immediately imply \"for all <code>Y : Type u</code>\"</p>",
        "id": 189521335,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174268
    },
    {
        "content": "<p>Yes.</p>",
        "id": 189521347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174275
    },
    {
        "content": "<p>But u might equal v</p>",
        "id": 189521402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174290
    },
    {
        "content": "<p>so in this case, I win (and I agree that usually I lose)</p>",
        "id": 189521419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174302
    },
    {
        "content": "<p>So, the result with <code>(X : Type u) (Y : Type v)</code> is stronger.</p>",
        "id": 189521461,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174327
    },
    {
        "content": "<p>No</p>",
        "id": 189521471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174337
    },
    {
        "content": "<p>because I am demanding more from my input and only getting the same for my output</p>",
        "id": 189521485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174347
    },
    {
        "content": "<p>The point is exactly that this is not <code>def f (X : Type u) (Y : Type v) ...</code></p>",
        "id": 189521597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174405
    },
    {
        "content": "<p>I'm saying \"assume that something is true for all Y in the same universe as X. Then P(X)\", which is a better thing to do than saying \"assume that something is true for all Y in all universes, including X's and others. Then P(X)\"</p>",
        "id": 189521736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174500
    },
    {
        "content": "<p>Try this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">L1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">L1</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n</pre></div>",
        "id": 189521739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174501
    },
    {
        "content": "<p>Your examples are not a good mirror of what is going on here.</p>",
        "id": 189521755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174520
    },
    {
        "content": "<p>Read the statement of the lemma.</p>",
        "id": 189521831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174549
    },
    {
        "content": "<p>OK, which lemma are we talking about?</p>",
        "id": 189521883,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174586
    },
    {
        "content": "<p><code>lemma lemma03_v0' (A : Type) [ring A]  (huniv : ∀ (R : Type) [ring R], unique (ring_hom A R)) : (A ≃+* ℤ) := ...</code></p>",
        "id": 189521928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174627
    },
    {
        "content": "<p>If I let <code>R : Type u</code> then <code>huniv</code> is harder to verify, but the result is still the same.</p>",
        "id": 189522000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174652
    },
    {
        "content": "<p>So it seems to be a weird case where less polymorphism is better. I noticed this last week when I was proving that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>×</mo><mi>Y</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X\\times Y\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is closed for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is compact.</p>",
        "id": 189522076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174704
    },
    {
        "content": "<p>Ah, it should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">constant</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">L1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">L2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">L1</span> <span class=\"n\">X</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 189522090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583174713
    },
    {
        "content": "<p>I was trying to prove this for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in all universes, and then I ran into some issue with universes, so then I thought \"crap I am going to have to restrict to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in the same universe as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>\" and then I thought \"oh wait, that's a <em>stronger</em> result!\"</p>",
        "id": 189522261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174789
    },
    {
        "content": "<p>wait -- so you're still saying I'm wrong? :-/</p>",
        "id": 189522372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583174863
    },
    {
        "content": "<p>Actually <code>L1</code> is not one axiom but a series of axioms enumerated by <code>v</code> and <code>u</code>.</p>",
        "id": 189522952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583175196
    },
    {
        "content": "<p>I completely see that your code compiles. However what is wrong with the argument that says the following: I have X and I want to prove <code>q X</code>. Now <code>X</code> is in a universe <code>u</code>. Would I rather prove <code>H X Y</code> for all <code>Y</code> in all universes <code>v</code>, or would I rather prove <code>H X Y</code> in the easier case that <code>Y</code> is in universe <code>u</code> as well? Clearly I would rather stick to <code>Y</code> in universe <code>u</code>, so <code>L2</code> is a more useful lemma than <code>L1</code> because it applies more widely.</p>",
        "id": 189523336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175386
    },
    {
        "content": "<p>Kevin you're comparing <code>L2</code> with a hypothetical <code>L2'</code> that can't be expressed in Lean, but would look something like <code>(X : Type u) (H : forall v (Y : Type v), p X Y) -&gt; q X</code></p>",
        "id": 189523452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175462
    },
    {
        "content": "<p>And you're correct that <code>L2</code> is stronger than <code>L2'</code></p>",
        "id": 189523489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175480
    },
    {
        "content": "<p>Apparently in Lean it's not <code>forall v</code> but <code>exists v</code></p>",
        "id": 189523547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583175492
    },
    {
        "content": "<p>L1?</p>",
        "id": 189523553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175494
    },
    {
        "content": "<p>Yury's <code>L1</code> becomes <code>L2</code> when you specialize it to <code>v = u</code></p>",
        "id": 189523562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175503
    },
    {
        "content": "<p>Unless you require <code>v = u</code></p>",
        "id": 189523564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583175506
    },
    {
        "content": "<p>Probably <code>L1</code> is false in this setting if you allow <code>v &lt; u</code>. You would only be able to show compactness for <code>v</code>-sized filters, roughly</p>",
        "id": 189523623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175543
    },
    {
        "content": "<p>The other thing going on here is that in the implication in the other direction, you can state it for all <code>v</code> (because now <code>v</code> is at the outer level) and it is true.</p>",
        "id": 189523810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175636
    },
    {
        "content": "<p>So for <code>X : Top.{u}</code>, you have \"<code>X</code> is <code>u</code>-universally closed\" =&gt; \"<code>X</code> is compact\" =&gt; \"for any <code>v</code>, <code>X</code> is <code>v</code>-universally closed\"</p>",
        "id": 189523858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175666
    },
    {
        "content": "<p>and in that sense you've proved a stronger statement than you expected</p>",
        "id": 189523868,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583175675
    },
    {
        "content": "<p>No wonder I was having trouble proving it in the fully polymorphic setting! I wanted to let Y be this <code>option X</code> with a filter topology.</p>",
        "id": 189524363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583175962
    },
    {
        "content": "<p>To take a slightly silly extreme case, it's clearly not true if you only allow <code>Y</code> to range over <code>Prop</code>/subsingletons</p>",
        "id": 189524615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583176101
    },
    {
        "content": "<p>That was surprisingly interesting/insightful. So back to the original question -- if we make the construction fully universe polymorphic then it seems to me that things get a bit more tedious because I have to start using <code>ulift</code> to get the map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> to <code>A</code></p>",
        "id": 189524699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583176153
    },
    {
        "content": "<p>Yeah, I stuck to <code>Type 0</code> in order to avoid this <code>ulift</code> stuff. In the \"category theory\" version it will appear already in the statement, but even in the unbundled version it will appear in the proof.</p>",
        "id": 189524992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583176327
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">add_group</span> <span class=\"c1\">-- breakthrough</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lemma03_v0&#39;</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 189527214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583177510
    },
    {
        "content": "<p>Is this not a thing in mathlib?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">of_int</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">•</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gsmul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">zero_gsmul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">add_gsmul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 189527980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583177942
    },
    {
        "content": "<p>That's <code>int.cast</code></p>",
        "id": 189537884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583183857
    },
    {
        "content": "<p>not sure if it's been bundled yet</p>",
        "id": 189537902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583183869
    },
    {
        "content": "<p>Thanks. I was pretty sure I'd seen it before.</p>",
        "id": 189537986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583183905
    },
    {
        "content": "<p>also known as the coercion from int to a ring</p>",
        "id": 189538029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583183933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_int</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">coe</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_of_int</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">φ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span>\n   <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"bp\">_</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"o\">])</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_int_of_unique_hom</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">of_int</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniq</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniq</span> <span class=\"o\">((</span><span class=\"n\">of_int</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eq_of_int</span> <span class=\"o\">((</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">of_int</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 189542182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583186450
    },
    {
        "content": "<p>I hadn't found the coercion earlier because I didn't have the right import. Kind of annoying that I don't know how to say \"hey Lean, I want a coercion from int to a ring, go find me one in mathlib\". All I knew was that when I tried it, it didn't work.</p>",
        "id": 189542738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583186732
    },
    {
        "content": "<p>I thought data.equiv.algebra would give me everything ringy, but it was in data.int.basic. I guess this just shows that I don't understand the import tree well enough. I would have guessed integers were more fundamental than ring stuff (probably because I learnt them earlier in my mathematical education)</p>",
        "id": 189542889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583186806
    },
    {
        "content": "<p>How are we using Kolmogorov axioms for probability theorems? For example, what would lean code look like for P(empty set) = 0. Do we have to appeal to measury theory instead? Sorry, still trying to find my way around this project... but I'm trying to write all probability and stats theorems/lemmas in an undergrad textbook with lean.</p>",
        "id": 189549948,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583192912
    },
    {
        "content": "<p>As far as I understand, we don't plan to have a separate probability theory. Just deal with a measure space of total measure one.</p>",
        "id": 189550091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583193037
    },
    {
        "content": "<p>Would anyone think it'd be useful? I know I would have loved to have something like this while going through probability theory as a student - if anything just to exercise proof-solving skills. But many students who take probability theory don't go on to take measure theory (unless they're math majors).</p>",
        "id": 189550227,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583193149
    },
    {
        "content": "<p>We're not currently suffering from an overabundance of expository Lean files (to say the least), so yes, I think it'd be very useful!</p>",
        "id": 189550769,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583193615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> :) any suggestions for where to put it in the mathlib project? Like maybe src/probability_theory? Or should expository stuff go somewhere else</p>",
        "id": 189550938,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583193795
    },
    {
        "content": "<p>Well... it's not exactly clear what place there is for purely \"expository\" stuff at all.</p>",
        "id": 189551029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583193883
    },
    {
        "content": "<p>We do have the <code>docs/tutorial/</code> folder, which I think is a great place to show people how to do \"standard\" / \"undergraduate\" stuff using the highbrow API that Lean tends to provide.</p>",
        "id": 189551050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583193918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Cool, thanks for the suggestion. Now to figure out how to create all these axioms and whatnot...</p>",
        "id": 189551314,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583194246
    },
    {
        "content": "<p>It really depends what you end up formalizing. Stuff that will be useful for future developments shouldn't (only) be in <code>docs/tutorial</code> and should go in something like <code>src/probability_theory</code>. I wouldn't worry about it too much now though.</p>",
        "id": 189551548,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583194531
    },
    {
        "content": "<p>Sooo.. I might be out of my depth here. I'm trying to figure out how to define a sample space to start building Kolmogorov axioms but have no idea how to fit this into LEAN's type theory. I'm afraid I've bit off more than I can chew :( How did you experts bootstrap this learning curve?</p>",
        "id": 189553251,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583196601
    },
    {
        "content": "<p>I think it might help to focus your question a bit more. What did you try and how did you get stuck?</p>",
        "id": 189553690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583197008
    },
    {
        "content": "<p>Regarding probability theory, I think we have some things about <code>measure_space</code> and possibly <code>probability_space</code> if <span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> PR'd his stuff</p>",
        "id": 189553811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583197117
    },
    {
        "content": "<p>If you look at the definition of <code>outer_measure</code>, <code>measure</code> and <code>measure_space</code> you will get an idea how we do things like <code>P(empty set) = 0</code>. (hint: we write <code>P ∅ = 0</code>)</p>",
        "id": 189553927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583197245
    },
    {
        "content": "<p>You might also tell us your background: have you tried formalising anything simpler yet? Have you played the natural numbers game, and/or read some of Theorem Proving in Lean?</p>",
        "id": 189556943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583201027
    },
    {
        "content": "<p>Haven't formalized anything simple yet - currently working through the natural numbers game. Love it so far. I'm probably getting ahead of myself though which is why looking at formalizing Kolmogorov axioms seems so daunted to me atm :/.</p>",
        "id": 189557835,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583202250
    },
    {
        "content": "<p>How would I go about defining a probability space in LEAN? This would be some probability triple but what data type would a sample space belong to? I started trying to define the first axioms like <code>def prob_event_nonnegative (E: set ℝ) := { x : ℝ | x ≥ 0}</code> and <code>def prob_sample_space_is_one (Ω: ??) := </code> but I soon realized I don't have a probability space defined. Not sure if I'm on the right track or not, just trying to get to a point where I can start writing prob 101 theorems and solving them</p>",
        "id": 189596844,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583245628
    },
    {
        "content": "<p>I'm not a probability theorist, so I don't know the maths definitions. Is a probability space just a measure space such that the measure of the total space is 1?</p>",
        "id": 189598308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583246505
    },
    {
        "content": "<p>Yeah, that's right. I'd like to define it separately so as to assume no knowledge of measure theory though, but having a hard time as to how it should be typed.</p>",
        "id": 189599052,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583246953
    },
    {
        "content": "<p>Do you know about <code>structure</code>s in general?</p>",
        "id": 189599531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583247182
    },
    {
        "content": "<p>I do not. Just found it in the docs though :)</p>",
        "id": 189600415,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583247635
    },
    {
        "content": "<p>If the definitions of measure space and probability space have 90% overlap, then someone interested in probability spaces cannot really have no knowledge of measure theory</p>",
        "id": 189600475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583247675
    },
    {
        "content": "<p>quite aside from the practical advantages of reusing the existing formalization (no reinvention of wheels, near-duplication of proofs, etc)</p>",
        "id": 189600728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583247838
    },
    {
        "content": "<p>Of course if your goal is to reinvent wheels and reformalize proofs for learning purposes, that's another matter</p>",
        "id": 189601161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583248095
    },
    {
        "content": "<p>It's mostly for learning purposes. I'm taking the viewpoint of a student who takes probability theory, like an engineer, but does not go on to taking measure theory.</p>",
        "id": 189601613,
        "sender_full_name": "Bobby Lindsey",
        "timestamp": 1583248418
    },
    {
        "content": "<p>There is \"measure theory\" and then there is the definition of a measure space. A student who missed the lecture on the axiom \"the probability of the whole space is 1\" knows the definition of a measure space. (Okay, maybe not quite since a measure can also take the value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span>.)</p>",
        "id": 189603822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583249624
    },
    {
        "content": "<p>Maybe it would be interesting to formalize the proofs of the Markov and Chebyshev inequalities. As far as I can tell they don't exist in mathlib already.</p>",
        "id": 189605270,
        "sender_full_name": "Arjun Pitchanathan",
        "timestamp": 1583250608
    },
    {
        "content": "<p>I have the Markov+Chebyshev inequalities proven in another repository. I really should PR them. Feel free to build off of these, in any case. </p>\n<p><a href=\"https://github.com/jtristan/stump-learnable/blob/21358ffd6746d838f76b6d1a275d361d5ea66125/src/lib/attributed/to_mathlib.lean#L154\" target=\"_blank\" title=\"https://github.com/jtristan/stump-learnable/blob/21358ffd6746d838f76b6d1a275d361d5ea66125/src/lib/attributed/to_mathlib.lean#L154\">https://github.com/jtristan/stump-learnable/blob/21358ffd6746d838f76b6d1a275d361d5ea66125/src/lib/attributed/to_mathlib.lean#L154</a></p>",
        "id": 189655940,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583290052
    },
    {
        "content": "<p>Here's a stripped-down version of some proofs I need:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Xexplicit</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>While it's trivial to prove all the elements in the enumerated set satisfy the condition for <code>X</code>-membership, as shown for <code>1</code>, how does one put things like these together to obtain the result? Do I need to revert to something simpler, like <code>n ∈ X \\iff n = 0 \\or n = 1 \\or ...</code>?  In that case things can get a little ugly for larger sets.</p>",
        "id": 190448367,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584049060
    },
    {
        "content": "<p>I'm not sure this is true, because I think <code>⊂</code> means <code>⊆</code> but not <code>=</code></p>",
        "id": 190448507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584049164
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Xexplicit</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190448855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584049384
    },
    {
        "content": "<p>Actually I need that to prove equality, so I need inclusion both sides.</p>",
        "id": 190448857,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584049386
    },
    {
        "content": "<p>I edited to have <code>\\subseteq</code>.</p>",
        "id": 190448888,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584049424
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 190448972,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584049474
    },
    {
        "content": "<p>Confession: <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> suggested the first line, but then wanted to finish with <code>finish</code> and we couldn't get it to work, hence the hack</p>",
        "id": 190449011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584049509
    },
    {
        "content": "<p>Anyway much shorter than what I was contemplating.</p>",
        "id": 190449136,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584049611
    },
    {
        "content": "<p>BTW, what do you think about using subsetneq instead of subset?</p>",
        "id": 190458934,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584057881
    },
    {
        "content": "<p>This will make statements more readable</p>",
        "id": 190459014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584057963
    },
    {
        "content": "<p>I never use <code>⊂</code> (<code>\\ssub</code>) in my work or my lectures, because it is one of these ambiguous symbols used by some people to mean one thing, and used by others to mean something else. But then again I never use <code>\\nat</code> either, for the same reason. The counter-argument is that if mathlib decides to stick to a convention and advertises that in some sort of \"notation\" page, this would perhaps suffice. I don't think <code>→ₗ</code>, <code>⋙</code> etc are particularly readable either (but this is a little different because perhaps there is no standard notation for them?)</p>",
        "id": 190459331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584058372
    },
    {
        "content": "<p>I think you can do better than that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Xexplicit</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">insert_subset</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 190465744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584066891
    },
    {
        "content": "<p><code>insert_subset</code> should just be a simp lemma, I don't think there are any downsides to triggering it</p>",
        "id": 190465754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584066913
    },
    {
        "content": "<p>Trying some basic analysis stuff on my own:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">unbounded_above</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>then I want to prove, among others, <code>unbounded_above ℕ</code>. So I need to coerce the whole of <code>nat</code> as set of <code>real</code>. Can that be done?</p>",
        "id": 190613461,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584218519
    },
    {
        "content": "<p>I guess it would be something like <code>coe '' nat</code> and you'll need <code>import data.set.basic</code></p>",
        "id": 190613510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218562
    },
    {
        "content": "<p>wait that's not quite right</p>",
        "id": 190613514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218577
    },
    {
        "content": "<p><code>set.range (coe : nat -&gt; real)</code></p>",
        "id": 190613522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218593
    },
    {
        "content": "<p>Why not just <code>∀ x : ℝ,  ∃ a ∈ A, x &lt; a</code>?</p>",
        "id": 190613587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584218686
    },
    {
        "content": "<p>Yeap, this works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nats_unbounded_above</span> <span class=\"o\">:</span> <span class=\"n\">unbounded_above</span> <span class=\"o\">(</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Thank you! Agreed, I could get rid of the <code>x&gt;0</code> here; trying to show equivalence with a version of the Archimedes principle where that will be helpful though (keep 1/x in the nats instead of ints).</p>",
        "id": 190613912,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584219157
    },
    {
        "content": "<p>You could also use <code>{x : ℝ | ∃ n : ℕ, x = n}</code></p>",
        "id": 190613929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219222
    },
    {
        "content": "<p>the equality is between two terms of different types. Lean reads the left hand side first and decides this is an equality between reals, and then coerces the natural automatically</p>",
        "id": 190613988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219280
    },
    {
        "content": "<p>Oh wait! That's exactly the same thing, right?</p>",
        "id": 190613999,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584219289
    },
    {
        "content": "<p><code>{x : ℝ | ∃ n : ℕ, x = ↑n}</code> also works. They're the same sets in the sense that they have the same elements, and they might well be defeq</p>",
        "id": 190614008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219306
    },
    {
        "content": "<p>oh apparently they're not :-/</p>",
        "id": 190614026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219337
    },
    {
        "content": "<p>the range is defeq to <code>{x : ℝ | ∃ n : ℕ, (n : ℝ) = x}</code></p>",
        "id": 190614092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219431
    },
    {
        "content": "<p>Can someone help me at this stage? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">unboundedAbove</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">archimPrinciple</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nats_unboundedAbove</span> <span class=\"o\">:</span>\n    <span class=\"n\">unboundedAbove</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">archimPrinciple</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">unb</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">one_div_pos_of_pos</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">unb</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">nx</span> <span class=\"n\">hnx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hnx</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- existsi nx,  -- this won&#39;t work because nx is real, although it should be nat as well</span>\n    <span class=\"c1\">-- but I don&#39;t know how to get that from h1</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190623146,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584234640
    },
    {
        "content": "<p>You can use <code>ceil nx</code> to find the next natural number after <code>nx</code></p>",
        "id": 190624091,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584236576
    },
    {
        "content": "<p>I think that trivializes the statement though</p>",
        "id": 190624143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584236719
    },
    {
        "content": "<p>I think you want something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">unboundedAbove</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">archimPrinciple</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nats_unboundedAbove</span> <span class=\"o\">:</span>\n  <span class=\"n\">unboundedAbove</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">archimPrinciple</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">unb</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">one_div_pos_of_pos</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">unb</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">nx</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190624145,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584236729
    },
    {
        "content": "<p>you can use <code>rfl</code> instead of <code>hn</code></p>",
        "id": 190624194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584236831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  Right, I didn't know how to work with the set membership relation to get it.</p>",
        "id": 190624197,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584236853
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 190624238,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584236922
    },
    {
        "content": "<p>Another little bump in the other direction apparently. Does anyone see a nice way to go past that <code>existsi</code> line in a nice way that wouldn't need a proof for <code>h2n</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unboundedAbove</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">archimPrinciple</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">nats_unboundedAbove_eq_arc</span> <span class=\"o\">:</span>\n    <span class=\"n\">unboundedAbove</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"n\">archimPrinciple</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- left-right implication</span>\n    <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- this works</span>\n    <span class=\"o\">},</span>\n    <span class=\"c1\">-- right-left implication</span>\n    <span class=\"n\">intros</span> <span class=\"n\">arc</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">one_div_pos_of_pos</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">arc</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>      <span class=\"c1\">-- any nice solution from here?</span>\n    <span class=\"n\">set</span> <span class=\"n\">xn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">hxn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2n</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xn</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>    <span class=\"c1\">-- without a need for this h2n?</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_of_one_div_lt_one_div</span> <span class=\"n\">h2n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>    <span class=\"c1\">-- wants h2n with xn, not ↑n --??</span>\n    <span class=\"n\">done</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190651750,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584285731
    },
    {
        "content": "<p>I don't think the goal is solvable. n can be zero.</p>",
        "id": 190653250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584287963
    },
    {
        "content": "<p>1/0=0 in Lean</p>",
        "id": 190653252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584287969
    },
    {
        "content": "<p>You're right. I need to restrict my naturals to <code>&gt;=1</code> only, for this to work.</p>",
        "id": 190656234,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584291879
    },
    {
        "content": "<p>Aah, the good old British naturals.</p>",
        "id": 190656814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584292655
    },
    {
        "content": "<p>Also the ones I grew up with. Base case for proof by induction was <code>n=1</code> in my young years.</p>",
        "id": 190657660,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584293866
    },
    {
        "content": "<p>Hi everyone! I've worked through first 7 chapters of \"Theorem proving in lean\", but can't understand how pattern matching works, e.g. how to solve the first exercise in chapter 8. How do you pattern-match an expression like ∀ (b : β), ∃ (a : α), f a = b? Can I find some similar examples somewhere? In the chapter there are no examples with a universal quantifier.</p>",
        "id": 190688045,
        "sender_full_name": "Viktoriya Malyasova",
        "timestamp": 1584341522
    },
    {
        "content": "<p><code>bnot_bnot</code> is an example with a universal quantifier</p>",
        "id": 190688155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584341717
    },
    {
        "content": "<p>Is anybody familiar with first order login in LEAN?</p>",
        "id": 190713594,
        "sender_full_name": "jack",
        "timestamp": 1584361049
    },
    {
        "content": "<p>See Flypitch</p>",
        "id": 190713624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361069
    },
    {
        "content": "<p><a href=\"https://github.com/flypitch/flypitch\" target=\"_blank\" title=\"https://github.com/flypitch/flypitch\">https://github.com/flypitch/flypitch</a></p>",
        "id": 190713636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361079
    },
    {
        "content": "<p>Corollary: <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> are familiar with FOL in Lean</p>",
        "id": 190713684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361097
    },
    {
        "content": "<p>(There might be others <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 190713705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361110
    },
    {
        "content": "<p>Thanks Johan, but im doing my homework :(</p>",
        "id": 190713747,
        "sender_full_name": "jack",
        "timestamp": 1584361130
    },
    {
        "content": "<p>Aha... so what is your question?</p>",
        "id": 190713778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361151
    },
    {
        "content": "<p>How to prove ¬ (∀ x, P x) → (∃ y, ¬ P y) :=</p>",
        "id": 190713782,
        "sender_full_name": "jack",
        "timestamp": 1584361155
    },
    {
        "content": "<p>I'm stucking at how to deal with <code>\\not \\forall</code>.</p>",
        "id": 190713835,
        "sender_full_name": "jack",
        "timestamp": 1584361194
    },
    {
        "content": "<p>Do you have mathlib?</p>",
        "id": 190713841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361197
    },
    {
        "content": "<p>nope</p>",
        "id": 190713892,
        "sender_full_name": "jack",
        "timestamp": 1584361204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272189\">jack</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190713835\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190713835\">said</a>:</p>\n<blockquote>\n<p>I'm stucking at how to deal with <code>\\not \\forall</code>.</p>\n</blockquote>\n<p>Aha, there must be a lemma called just like that <code>not_forall</code>.</p>",
        "id": 190713940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361232
    },
    {
        "content": "<p>Does <code>#check classical.not_forall</code> give you output?</p>",
        "id": 190713971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361251
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open classical\n#check classical.not_forall\n</pre></div>\n\n\n<p>gives me unknown identifier 'classical.not_forall'</p>",
        "id": 190714139,
        "sender_full_name": "jack",
        "timestamp": 1584361332
    },
    {
        "content": "<p>Hmmm, that's probably already mathlib</p>",
        "id": 190714167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361358
    },
    {
        "content": "<p>I'm writing my homework at <code>https://leanprover.github.io/live/latest/</code></p>",
        "id": 190714219,
        "sender_full_name": "jack",
        "timestamp": 1584361389
    },
    {
        "content": "<p>Noob for LEAN.</p>",
        "id": 190714285,
        "sender_full_name": "jack",
        "timestamp": 1584361435
    },
    {
        "content": "<p>Have you tried to use <code>classical.by_contradiction</code>?</p>",
        "id": 190714700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361653
    },
    {
        "content": "<p>I'm supposed to use that, from the description of the question.</p>",
        "id": 190715221,
        "sender_full_name": "jack",
        "timestamp": 1584361910
    },
    {
        "content": "<p>Actually I have no idea how to use it.</p>",
        "id": 190715303,
        "sender_full_name": "jack",
        "timestamp": 1584361943
    },
    {
        "content": "<p>Are you allowed to use tactic mode?</p>",
        "id": 190715383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584361994
    },
    {
        "content": "<p><code>begin ... end</code> blocks?</p>",
        "id": 190715403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362001
    },
    {
        "content": "<p>Or are you forced to hand in term-mode proofs?</p>",
        "id": 190715452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362011
    },
    {
        "content": "<p>yes!</p>",
        "id": 190715467,
        "sender_full_name": "jack",
        "timestamp": 1584362020
    },
    {
        "content": "<p>Yes to what?</p>",
        "id": 190715560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362070
    },
    {
        "content": "<p>In the first saw I was thinking that such a LEAN is so stupid, because I have to write the proof by hand.</p>",
        "id": 190715575,
        "sender_full_name": "jack",
        "timestamp": 1584362088
    },
    {
        "content": "<p>yes with begin..end</p>",
        "id": 190715587,
        "sender_full_name": "jack",
        "timestamp": 1584362098
    },
    {
        "content": "<p>Ok, so</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">assume</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 190715650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362144
    },
    {
        "content": "<p>That should get you started.</p>",
        "id": 190715657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362151
    },
    {
        "content": "<p>Just follow your nose. If you get stuck, write</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 190715797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362236
    },
    {
        "content": "<p>If you have the feeling that you are going in circles, follow your other nose <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 190715854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362278
    },
    {
        "content": "<p>But I still have no idea how to use <code>apply ...</code>. I have never seen that before in the class.</p>",
        "id": 190716024,
        "sender_full_name": "jack",
        "timestamp": 1584362357
    },
    {
        "content": "<p>Actually the question is quite stupid..</p>",
        "id": 190716061,
        "sender_full_name": "jack",
        "timestamp": 1584362391
    },
    {
        "content": "<p>Aah, so maybe they don't use <code>begin ... end</code> in class?</p>",
        "id": 190716138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362406
    },
    {
        "content": "<p>Because after <code>assume/intro</code> I would think that <code>apply</code> is the next tactic that you learn.</p>",
        "id": 190716196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362459
    },
    {
        "content": "<p>Just begin a section and then end that.</p>",
        "id": 190716247,
        "sender_full_name": "jack",
        "timestamp": 1584362515
    },
    {
        "content": "<p>Ok, so no tactic mode.</p>",
        "id": 190716311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362551
    },
    {
        "content": "<p>I remember it's <code>section..end</code> not <code>begin..end</code>. Sorry my fault.</p>",
        "id": 190716312,
        "sender_full_name": "jack",
        "timestamp": 1584362553
    },
    {
        "content": "<p>In that case, start with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">assume</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 190716326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362573
    },
    {
        "content": "<p>Put your cursor on the <code>_</code> to see the updated goal state.</p>",
        "id": 190716358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362597
    },
    {
        "content": "<p>It always complains<br>\n ```<br>\ntype mismatch, term<br>\n  λ (s1 : ¬∀ (x : U), P x) (a : U) (s2 : ¬P a), by_contradiction ?m_2[s1, a, s2]<br>\nhas type<br>\n  Π (s1 : ¬∀ (x : U), P x) (a : U) (s2 : ¬P a), ?m_1[s1, a, s2]<br>\nbut is expected to have type<br>\n  (¬∀ (x : U), P x) → (∃ (y : U), ¬P y)</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 190716645,
        "sender_full_name": "jack",
        "timestamp": 1584362756
    },
    {
        "content": "<p>I guess the fist step must be <code>assume h : ¬ ∀ x, P x</code></p>",
        "id": 190716782,
        "sender_full_name": "jack",
        "timestamp": 1584362823
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span>\n<span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>Doesn't complain for me.</p>",
        "id": 190716791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584362827
    },
    {
        "content": "<p>Then I want assume <code>(¬∃ (y : U), ¬P y)</code> <span aria-label=\"anguished\" class=\"emoji emoji-1f627\" role=\"img\" title=\"anguished\">:anguished:</span> just next line ?</p>",
        "id": 190717267,
        "sender_full_name": "jack",
        "timestamp": 1584363099
    },
    {
        "content": "<p><code>assume h', _</code></p>",
        "id": 190717296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363122
    },
    {
        "content": "<p>type mismatch, term<br>\n  λ (h : ¬∀ (x : U), P x), by_contradiction<br>\nhas type<br>\n  Π (h : ¬∀ (x : U), P x), (¬?m_1[h] → false) → ?m_1[h]<br>\nbut is expected to have type<br>\n  (¬∀ (x : U), P x) → (∃ (y : U), ¬P y)</p>",
        "id": 190717447,
        "sender_full_name": "jack",
        "timestamp": 1584363195
    },
    {
        "content": "<p>Please post your code</p>",
        "id": 190717506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363236
    },
    {
        "content": "<p>You have a syntax error, but I can't guess it from here</p>",
        "id": 190717563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363250
    },
    {
        "content": "<p><code>by_contradiction</code> needs an argument. You can put <code>_</code> for now</p>",
        "id": 190717584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584363267
    },
    {
        "content": "<p>It gives out</p>",
        "id": 190718029,
        "sender_full_name": "jack",
        "timestamp": 1584363486
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>h : ¬∀ (x : X), P x\n⊢ (¬∃ (y : X), ¬P y) → false\n</pre></div>\n\n\n<p>So what's next <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 190718031,
        "sender_full_name": "jack",
        "timestamp": 1584363488
    },
    {
        "content": "<p>No</p>",
        "id": 190718099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363541
    },
    {
        "content": "<p>Post all your code</p>",
        "id": 190718109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363546
    },
    {
        "content": "<p>Not the goal state</p>",
        "id": 190718117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363552
    },
    {
        "content": "<p>I already told you what is next</p>",
        "id": 190718125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {X} (P : X → Prop) : ¬ (∀ x, P x) → (∃ y, ¬ P y) :=\nassume h, classical.by_contradiction $\n_\n</pre></div>",
        "id": 190718136,
        "sender_full_name": "jack",
        "timestamp": 1584363568
    },
    {
        "content": "<p>Replace the <code>_</code> with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">assume</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 190718173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363588
    },
    {
        "content": "<p>After that, put your cursor on the <code>_</code> and see what the goal state is.</p>",
        "id": 190718272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363624
    },
    {
        "content": "<p>(By the way, which course is this?)</p>",
        "id": 190718295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363641
    },
    {
        "content": "<p>OK I got you. One question please, what does <code>$</code> mean?</p>",
        "id": 190718310,
        "sender_full_name": "jack",
        "timestamp": 1584363657
    },
    {
        "content": "<p><code>foo $ bar x y z</code> is the same as <code>foo (bar x y z)</code></p>",
        "id": 190718356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363681
    },
    {
        "content": "<p>It saves you some parentheses</p>",
        "id": 190718362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363689
    },
    {
        "content": "<p>Logic and Computation</p>",
        "id": 190718367,
        "sender_full_name": "jack",
        "timestamp": 1584363696
    },
    {
        "content": "<p>Uni?</p>",
        "id": 190718383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363703
    },
    {
        "content": "<p>Birmingham</p>",
        "id": 190718393,
        "sender_full_name": "jack",
        "timestamp": 1584363709
    },
    {
        "content": "<p><del>Which?</del></p>",
        "id": 190718401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363713
    },
    {
        "content": "<p>So difficult to me :(, especially the LEAN part.</p>",
        "id": 190718539,
        "sender_full_name": "jack",
        "timestamp": 1584363800
    },
    {
        "content": "<p>So, what does the next goal state say?</p>",
        "id": 190718591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>h1 : ¬∀ (x : X), P x,\nh2 : ¬∃ (y : X), ¬P y\n⊢ false\n</pre></div>",
        "id": 190718657,
        "sender_full_name": "jack",
        "timestamp": 1584363856
    },
    {
        "content": "<p>Great, so what do you do?</p>",
        "id": 190718676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363873
    },
    {
        "content": "<p>assume t : X and specify h2?</p>",
        "id": 190718714,
        "sender_full_name": "jack",
        "timestamp": 1584363894
    },
    {
        "content": "<p>Nope, you can't assume at this point</p>",
        "id": 190718758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363916
    },
    {
        "content": "<p>You've got the <code>h2</code> by contradiction, so using that right now would undo all the hard work</p>",
        "id": 190718802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363941
    },
    {
        "content": "<p>~Why not?~</p>",
        "id": 190718813,
        "sender_full_name": "jack",
        "timestamp": 1584363947
    },
    {
        "content": "<p>Because <code>assume</code> only works if your goal is of the form <code>X -&gt; Y</code></p>",
        "id": 190718922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363986
    },
    {
        "content": "<p>But <code>false</code> isn't like that.</p>",
        "id": 190718943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584363994
    },
    {
        "content": "<p>Then what about <code>exists.intro</code>?</p>",
        "id": 190719022,
        "sender_full_name": "jack",
        "timestamp": 1584364036
    },
    {
        "content": "<p>No, that only works if your goal is of the form <code>\\exists x, ...</code></p>",
        "id": 190719074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364065
    },
    {
        "content": "<p>You need to build a term of type <code>false</code>.</p>",
        "id": 190719093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364077
    },
    {
        "content": "<p>So if you have a function of the form <code>h1 : foobar -&gt; false</code>, then you could use that.</p>",
        "id": 190719162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364093
    },
    {
        "content": "<p>You happen to have exactly such an <code>h1</code> in you list of assumptions, only the <code>-&gt; false</code> is hidden by notation.</p>",
        "id": 190719202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364120
    },
    {
        "content": "<p>Teacher says <code>¬ A is A → false</code></p>",
        "id": 190719248,
        "sender_full_name": "jack",
        "timestamp": 1584364143
    },
    {
        "content": "<p>So I suggest that you write <code>h1 $ _</code> in place of the final underscore.</p>",
        "id": 190719264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272189\">jack</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190719248\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190719248\">said</a>:</p>\n<blockquote>\n<p>Teacher says <code>¬ A is A → false</code></p>\n</blockquote>\n<p>Exactly!</p>",
        "id": 190719274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364158
    },
    {
        "content": "<p>The goal moves to <code>∀ (x : X), P x</code>. Does that mean I can assume <code>t : X</code> now?</p>",
        "id": 190719426,
        "sender_full_name": "jack",
        "timestamp": 1584364220
    },
    {
        "content": "<p>Yep, now you are in good shape!</p>",
        "id": 190719507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364282
    },
    {
        "content": "<p>Replace the final underscore by <code>assume x, _</code></p>",
        "id": 190719545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364308
    },
    {
        "content": "<p>After that, you'll need to build a term of type <code>P x</code>.</p>",
        "id": 190719605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364326
    },
    {
        "content": "<p>Or <code>P t</code>, if you wrote <code>assume t</code></p>",
        "id": 190719618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364336
    },
    {
        "content": "<p>Now I should elim exists..</p>",
        "id": 190719651,
        "sender_full_name": "jack",
        "timestamp": 1584364356
    },
    {
        "content": "<p>How?</p>",
        "id": 190719679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364373
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/NZS5MgdPpc_qVDxj4xgKbauT/image.png\" target=\"_blank\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NZS5MgdPpc_qVDxj4xgKbauT/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/NZS5MgdPpc_qVDxj4xgKbauT/image.png\"></a></div>",
        "id": 190719691,
        "sender_full_name": "jack",
        "timestamp": 1584364381
    },
    {
        "content": "<p>That only works if you have <code>h2' : \\exists y, ...</code> as an assumption. But you don't.</p>",
        "id": 190719737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364401
    },
    {
        "content": "<p>Your <code>h2</code> has a <code>\\not</code> in front of the exists.</p>",
        "id": 190719785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364433
    },
    {
        "content": "<p>I have <code>\\not \\exists ...</code>, just like <code>h1</code> in the example.</p>",
        "id": 190719796,
        "sender_full_name": "jack",
        "timestamp": 1584364441
    },
    {
        "content": "<p>Sure, but the example doesn't use <code>exists.elim</code> either.</p>",
        "id": 190719875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364473
    },
    {
        "content": "<p>Then it must be <code>exists.intro</code> <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 190719923,
        "sender_full_name": "jack",
        "timestamp": 1584364501
    },
    {
        "content": "<p>Well.... that works if the <em>goal</em> is of the form <code>\\exists y, ...</code>. Which it isn't.</p>",
        "id": 190720020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364551
    },
    {
        "content": "<p>To summarise... you're about as stuck as you were at the beginning of your proof.</p>",
        "id": 190720088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364575
    },
    {
        "content": "<p>What did you do to get unstuck?</p>",
        "id": 190720100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364584
    },
    {
        "content": "<p>by_contradiction!</p>",
        "id": 190720141,
        "sender_full_name": "jack",
        "timestamp": 1584364609
    },
    {
        "content": "<p>Then type error again...</p>",
        "id": 190720418,
        "sender_full_name": "jack",
        "timestamp": 1584364760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {X} (P : X → Prop) : ¬ (∀ x, P x) → (∃ y, ¬ P y) :=\nassume h1, classical.by_contradiction $\nassume h2,\nh1\n(\nassume x,\nassume h3, classical.by_contradiction $\n_\n)\n</pre></div>",
        "id": 190720426,
        "sender_full_name": "jack",
        "timestamp": 1584364765
    },
    {
        "content": "<p>Sure, <code>assume h3</code> gives the error</p>",
        "id": 190720537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364815
    },
    {
        "content": "<p>In the beginning of your proof you didn't get stuck at the 1st step. Only at the 2nd...</p>",
        "id": 190720586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364850
    },
    {
        "content": "<p>So you shouldn't copy the <code>assume ..</code> from the beginning of the proof. Only the <code>by_contra</code></p>",
        "id": 190720624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364875
    },
    {
        "content": "<p>If i remove the assume, it comes to <code>¬P x → false</code></p>",
        "id": 190720647,
        "sender_full_name": "jack",
        "timestamp": 1584364890
    },
    {
        "content": "<p>Progress!</p>",
        "id": 190720686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364915
    },
    {
        "content": "<p>Then write a h2 to make the form -&gt; false</p>",
        "id": 190720706,
        "sender_full_name": "jack",
        "timestamp": 1584364922
    },
    {
        "content": "<p>Not so fast</p>",
        "id": 190720756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364938
    },
    {
        "content": "<p><code>h2</code> only works if your goal is <code>false</code></p>",
        "id": 190720776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364954
    },
    {
        "content": "<p>But your goal is of the form <code>X -&gt; Y</code></p>",
        "id": 190720795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364971
    },
    {
        "content": "<p>Ok now we assume.</p>",
        "id": 190720811,
        "sender_full_name": "jack",
        "timestamp": 1584364980
    },
    {
        "content": "<p><code>assume hPx</code></p>",
        "id": 190720836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584364995
    },
    {
        "content": "<p>.. and write a h2</p>",
        "id": 190720987,
        "sender_full_name": "jack",
        "timestamp": 1584365054
    },
    {
        "content": "<p>..and then <code>exists.intro</code>Oh my god !</p>",
        "id": 190721239,
        "sender_full_name": "jack",
        "timestamp": 1584365199
    },
    {
        "content": "<p>Thank you very much !  Appreciate your help!</p>",
        "id": 190721294,
        "sender_full_name": "jack",
        "timestamp": 1584365232
    },
    {
        "content": "<p>Very kind of you!</p>",
        "id": 190721366,
        "sender_full_name": "jack",
        "timestamp": 1584365276
    },
    {
        "content": "<p>Are you the developer of LEAN?</p>",
        "id": 190721452,
        "sender_full_name": "jack",
        "timestamp": 1584365307
    },
    {
        "content": "<p>Nope, lol</p>",
        "id": 190721482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365326
    },
    {
        "content": "<p>Just a random user</p>",
        "id": 190721495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365333
    },
    {
        "content": "<p>I've no idea whether I can get the credit using such advanced grammar.</p>",
        "id": 190721755,
        "sender_full_name": "jack",
        "timestamp": 1584365444
    },
    {
        "content": "<p>But you didn't right?</p>",
        "id": 190721774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365459
    },
    {
        "content": "<p>Without <code>by_contra</code> you can't do this</p>",
        "id": 190721806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365475
    },
    {
        "content": "<p>Yes, thats why exactly it does not mention <code>intuitionistic logic</code> in this question.</p>",
        "id": 190721945,
        "sender_full_name": "jack",
        "timestamp": 1584365539
    },
    {
        "content": "<p>I'm sure there must be sth. wrong with my hand-made provement.</p>",
        "id": 190722082,
        "sender_full_name": "jack",
        "timestamp": 1584365624
    },
    {
        "content": "<p>One more question, is classical.by_contradiction equivalent to <code>A &lt;-&gt; ~~A</code>?</p>",
        "id": 190722229,
        "sender_full_name": "jack",
        "timestamp": 1584365691
    },
    {
        "content": "<p>Yup</p>",
        "id": 190722396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365764
    },
    {
        "content": "<p>Which results from <code>classical.*</code> were you allowed to use?</p>",
        "id": 190722435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365791
    },
    {
        "content": "<p>I have very very few examples in the class.</p>",
        "id": 190722525,
        "sender_full_name": "jack",
        "timestamp": 1584365832
    },
    {
        "content": "<p><a href=\"https://gist.github.com/benediktahrens/a52dc0137db2e845bb96b5f67645bad7\" target=\"_blank\" title=\"https://gist.github.com/benediktahrens/a52dc0137db2e845bb96b5f67645bad7\">https://gist.github.com/benediktahrens/a52dc0137db2e845bb96b5f67645bad7</a></p>",
        "id": 190722571,
        "sender_full_name": "jack",
        "timestamp": 1584365857
    },
    {
        "content": "<p><a href=\"https://gist.github.com/benediktahrens/a52dc0137db2e845bb96b5f67645bad7#file-lec9-lean-L250\" target=\"_blank\" title=\"https://gist.github.com/benediktahrens/a52dc0137db2e845bb96b5f67645bad7#file-lec9-lean-L250\">https://gist.github.com/benediktahrens/a52dc0137db2e845bb96b5f67645bad7#file-lec9-lean-L250</a></p>",
        "id": 190722718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365924
    },
    {
        "content": "<p>So i have no idea how to deal with \\not at all.</p>",
        "id": 190722723,
        "sender_full_name": "jack",
        "timestamp": 1584365927
    },
    {
        "content": "<p>uses <code>by_contradiction</code></p>",
        "id": 190722731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584365931
    },
    {
        "content": "<p>Yeah. But I still don't know how to use is ... until NOW.</p>",
        "id": 190722843,
        "sender_full_name": "jack",
        "timestamp": 1584365991
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span>\n<span class=\"c1\">-- classical.by_contradiction : (¬?M_1 → false) → ?M_1</span>\n</pre></div>",
        "id": 190722925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584366011
    },
    {
        "content": "<p>Does that help?</p>",
        "id": 190722943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584366016
    },
    {
        "content": "<p>Thanks again for your kindly help.</p>",
        "id": 190722950,
        "sender_full_name": "jack",
        "timestamp": 1584366019
    },
    {
        "content": "<p>So it is exactly: \"prove <code>A</code> by proving <code>\\not \\not A</code>\"</p>",
        "id": 190723041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584366063
    },
    {
        "content": "<p>Actually I ve no idea about the type signature, i.e. ?M_</p>",
        "id": 190723069,
        "sender_full_name": "jack",
        "timestamp": 1584366081
    },
    {
        "content": "<p>I thought it is just lambda calculus, that's all. The goal is really really helpful.</p>",
        "id": 190723210,
        "sender_full_name": "jack",
        "timestamp": 1584366145
    },
    {
        "content": "<p>But still, the error message is quite confusing, especially for beginners.</p>",
        "id": 190723242,
        "sender_full_name": "jack",
        "timestamp": 1584366169
    },
    {
        "content": "<p><code>?M_1</code> is just a weird way of writing <code>A</code> or <code>P</code></p>",
        "id": 190723254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584366173
    },
    {
        "content": "<p>It's a \"metavariable\"</p>",
        "id": 190723272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584366180
    },
    {
        "content": "<p>Are u a     mathematician <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 190723548,
        "sender_full_name": "jack",
        "timestamp": 1584366313
    },
    {
        "content": "<p>It looks nicer if you write <code>#check @classical.by_contradiction</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>The <code>@</code> tells Lean to make all arguments explicit. Along the way the metavariables get nicer names.</p>",
        "id": 190723605,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584366345
    },
    {
        "content": "<p>Thank u guys!</p>",
        "id": 190723723,
        "sender_full_name": "jack",
        "timestamp": 1584366382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272189\">jack</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190723548\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190723548\">said</a>:</p>\n<blockquote>\n<p>Are u a     mathematician <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> ?</p>\n</blockquote>\n<p>Yes - in fact, he is one of the three mathematicians (the other two being Kevin Buzzard and Patrick Massot) who formalized perfectoid spaces in Lean</p>\n<p>(Correct me if I am wrong)</p>",
        "id": 190725576,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1584367304
    },
    {
        "content": "<p>WOW My pleasure!</p>",
        "id": 190726623,
        "sender_full_name": "jack",
        "timestamp": 1584367822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190688155\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190688155\">said</a>:</p>\n<blockquote>\n<p><code>bnot_bnot</code> is an example with a universal quantifier</p>\n</blockquote>\n<p>Okay, okay, I'm wrong, still, can I see any other examples somewhere? I don't want to do case analysis on b like in the example, I want to do the analogue of intros b.</p>",
        "id": 190728883,
        "sender_full_name": "Viktoriya Malyasova",
        "timestamp": 1584368926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272035\">Виктория Малясова</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190728883\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190728883\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190688155\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/190688155\">said</a>:</p>\n<blockquote>\n<p><code>bnot_bnot</code> is an example with a universal quantifier</p>\n</blockquote>\n<p>Okay, okay, I'm wrong, still, can I see any other examples somewhere? I don't want to do case analysis on b like in the example, I want to do the analogue of intros b.</p>\n</blockquote>\n<p>Never mind, figured it out.</p>",
        "id": 190730465,
        "sender_full_name": "Viktoriya Malyasova",
        "timestamp": 1584369465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272035\">@Виктория Малясова</span> What exactly do you want to do: do you want to apply a hypothesis with a universal qualifier, or to prove a goal? BTW, if you'll transliterate your nickname, more people will be able to read it, and it'll be easier to tag you in a reply.</p>",
        "id": 190769612,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584387385
    },
    {
        "content": "<p>BTW, welcome to the club.</p>",
        "id": 190769635,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584387397
    },
    {
        "content": "<p>If you want to use <code>h : ∀ b, ∃ x, ...</code>, then you can use something like <code>let ⟨x, hx⟩ := h b in ...</code>.</p>",
        "id": 190769818,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584387496
    },
    {
        "content": "<p>If you want to prove <code>∀ b, ∃ x, P x</code>, then you can use something like <code>assume b, ⟨x, hx⟩</code></p>",
        "id": 190769874,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584387528
    },
    {
        "content": "<p>(or <code>λ b</code> instead of <code>assume b</code>)</p>",
        "id": 190769900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584387545
    },
    {
        "content": "<p>Can anyone please point me to where the (proof of the) division algorithm <code>a = b  * q + r </code> is hiding?</p>",
        "id": 190787548,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584397438
    },
    {
        "content": "<p>I guess that would be a combination of the definition of <code>nat.div</code> and <code>nat.mod</code>, and <code>nat.mod_add_div</code></p>",
        "id": 190787682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584397521
    },
    {
        "content": "<p>Thanks! OK, so we don't have a stand-alone proof of it? That explains why I was searching in vain.</p>",
        "id": 190787814,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584397600
    },
    {
        "content": "<p>Although <code>nat</code> is strange, since I expected it to be an <code>int</code> thing.</p>",
        "id": 190788526,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584398094
    },
    {
        "content": "<p>there is an int version too, but most int theorems reduce to nat counterparts</p>",
        "id": 190788672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398182
    },
    {
        "content": "<p>the int version is more complicated because the modulus can be negative and conventions differ on what to do about that</p>",
        "id": 190788722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398226
    },
    {
        "content": "<p>Hello, I'm struggling with getting rewrite to do what I want it to do, I have (extra goals removed)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">hn2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and I want to rewrite it to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But if I use <code>rw &lt;-hn2</code> it gives me</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>as it replaces <code>2</code> with <code>bit0 (n % 2)</code></p>\n<p>Thank you!</p>",
        "id": 190846317,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584451502
    },
    {
        "content": "<p>ha ha! This is happening because of the way numerals are internally stored (2 = bit0 1). There are ways around this.</p>",
        "id": 190846834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584451760
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">begin</span>\n    <span class=\"c1\">-- entering &quot;conv mode&quot; where we can pull terms off the goal</span>\n    <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- now we have the 1</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite succeeds</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- done</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190847094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584451884
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">here</a> is more information about <code>conv</code>.</p>",
        "id": 190847241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584451942
    },
    {
        "content": "<p>Here is a more direct approach:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hn2</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190847500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584452069
    },
    {
        "content": "<p>Yeah I see. So numerals are stored in binary in reverse order? That seems fascinating and I remember playing around with that in Haskell. Makes sense that Lean would use that. </p>\n<p>Anyways, this seemed to work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">hnm&#39;</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hn2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hnm&#39;</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Thanks a lot!</p>",
        "id": 190847536,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584452091
    },
    {
        "content": "<p>Yes, your approach should also work. Nice!</p>\n<p>Yes, Lean internally stores numerals as <code>bit0 (bit1 (bit1 (...)))</code>. You can see what's going on internally with the option <code>set_option pp.numerals false</code>.</p>",
        "id": 190847759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584452205
    },
    {
        "content": "<p>Alright, thanks a lot.</p>\n<p>Another question, is there a way to paste the highlighted value from <code>Ctrl-P #</code> to the location of the cursor? For example with a lemma that has a long name (such as <code>div_le_div_of_le_of_pos</code>), after finding it I press enter to go to the file and I copy the name from there. Is there a quicker way?</p>\n<p>Thanks!</p>",
        "id": 190871484,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584461439
    },
    {
        "content": "<p>Not at the moment, but that's an interesting feature request. Please open an issue <a href=\"https://github.com/leanprover/vscode-lean/issues\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/issues\">here</a>.</p>",
        "id": 190872744,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584461928
    },
    {
        "content": "<p>Alright thanks. Will do.</p>",
        "id": 190872803,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584461953
    },
    {
        "content": "<p>If you find the lemma by typing <code>div_le_div</code> and then pressing ctrl-space and scrolling down the options with the arrow keys then you can complete with tab and there it is</p>",
        "id": 190874844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584462720
    },
    {
        "content": "<p>Press ctrl-space a second time to see the full types</p>",
        "id": 190874936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584462739
    },
    {
        "content": "<p>Alright thanks. That doesn't work all the time for me though, but I think it's an issue with my VSCode installation rather than with the Lean extension.</p>",
        "id": 190941065,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584510498
    },
    {
        "content": "<p>Another question, how do I prove this?</p>\n<p>(<code>r</code> is a <code>nat</code>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>I've found a few things that are interesting in <code>int.</code>, but nothing came up when looking in <code>nat</code>, and searching for combinations of <code>add</code>, <code>mul</code> and <code>mod</code> didn't give anything. I guess what I'm looking for is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 190941216,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584510756
    },
    {
        "content": "<p>The VS Code extension queries Lean for autocomplete information and sadly Lean doesn't always provide anything useful at a given position in a file. If you have some specific examples we can take a look.</p>",
        "id": 190941217,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584510776
    },
    {
        "content": "<p>This is what I get after trying <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#suggest\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#suggest\">suggest</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">nat_mod_helper</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Surely there's a way to do this without pulling in something written for <code>norm_num</code> though.</p>",
        "id": 190941636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584511469
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 190943400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584514130
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 190943475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584514245
    },
    {
        "content": "<p>lol you're faster</p>",
        "id": 190943477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584514253
    },
    {
        "content": "<p>Thank you all!</p>",
        "id": 190943749,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584514661
    },
    {
        "content": "<p>Could someone please help with the last <code>sorry</code> in this proof? I expect I need <code>revert</code> or maybe <code>generalize</code>. I don't know how to move along with either, though!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_of_sets</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- this side works</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- now prove that (a+b) is the least upper bound</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">xab</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">xab</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"c1\">--cases h1A with ya hya,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1B</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">sum_of_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3a</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13A</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h13</span> <span class=\"o\">:=</span> <span class=\"n\">H13A</span> <span class=\"n\">H4</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h13</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H6</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span>  <span class=\"c1\">-- got stuck here</span>\n    <span class=\"c1\">--revert z,</span>\n    <span class=\"c1\">--does generalize work? How?</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191290025,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584731915
    },
    {
        "content": "<p>z is now a fixed real number in B. In particular you only know that t &lt;= S - a for one particular t in B, namely t = z. You can make progress in the proof with <code>intros t ht</code>, but that is basically your only next move. You can't use z to prove the goal.</p>",
        "id": 191291077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584732427
    },
    {
        "content": "<p>I thought I could move on by reverting z. So I'm wrong there?</p>",
        "id": 191292007,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584732911
    },
    {
        "content": "<p>I should be able to use the fact that the initial <code>z</code> was chosen arbitrarily. I also thought about starting with <code>forall z</code> at the very top, but am just trying to follow one of the standard proofs - and learn some more Lean in the process!</p>",
        "id": 191292506,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584733200
    },
    {
        "content": "<p>But z is not arbitrary, z is one specific element of B which is the witness to the non-emptiness of B.</p>",
        "id": 191293074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584733501
    },
    {
        "content": "<p><code>h1B</code> is like saying \"this specific constant real number z is an element of B\". It's no different to saying \"assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo>∈</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">\\pi\\in B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>\". You can prove whatever you like about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> now, but you won't be able to deduce anything about an arbitrary element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span>.</p>",
        "id": 191293294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584733592
    },
    {
        "content": "<p>OK. So I'm not supposed to be thinking about it as arbitrary? Then I need to rewrite from the start I guess.</p>",
        "id": 191293380,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584733640
    },
    {
        "content": "<p>Yes it's definitely not arbitrary, it's some fixed constant.</p>",
        "id": 191293406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584733658
    },
    {
        "content": "<p><code>hB</code> has, buried within it, a statement about an arbitrary element of B.</p>",
        "id": 191293776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584733835
    },
    {
        "content": "<p>I set this question in an undergraduate exam in 2018 and <span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> <a href=\"https://github.com/ImperialCollegeLondon/M1F-exam-may-2018\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1F-exam-may-2018\">formalised the solutions</a>. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> sat the exam and his written solution was constructive and could be basically cut and pasted into Lean. It was funny reading it. He kept writing <code>assume</code> :-)</p>",
        "id": 191294275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584734055
    },
    {
        "content": "<p>You need to be proving things like this:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 191294523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584734174
    },
    {
        "content": "<p>sorry for ugly proof, just got to run</p>",
        "id": 191294539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584734183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191294523\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191294523\">said</a>:</p>\n<blockquote>\n<p>You need to be proving things like this:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>\n\n\n</blockquote>\n<p>Right. This is what I meant by starting over. Thanks again for the help! Hopefully I get there in another day or so -:)</p>",
        "id": 191295511,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584734679
    },
    {
        "content": "<p><code>  have H2 : ∀ y ∈ A, ∀ z ∈ B, (y + z) ≤ S := λ y hy z hz, hS _ ⟨y, hy, z, hz, rfl⟩,</code></p>",
        "id": 191299357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584736771
    },
    {
        "content": "<p>Yes, I have changed all that and now I get stuck here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- now prove that (a+b) is the least upper bound</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">xab</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">xab</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"n\">at</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">sum_of_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3a</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h21B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h22B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h22B</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"c1\">--!</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H4a</span> <span class=\"o\">:=</span> <span class=\"n\">h22B</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H4b</span> <span class=\"o\">:=</span> <span class=\"n\">H3</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">),</span>   <span class=\"c1\">-- exact H4b doesn&#39;t do it</span>\n</pre></div>",
        "id": 191300274,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584737267
    },
    {
        "content": "<p>The <code>y : ℝ</code> is a constant. Your goal has a variable y in.</p>",
        "id": 191300576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584737408
    },
    {
        "content": "<p>Failing to see the same thing again, huh?</p>",
        "id": 191300652,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584737452
    },
    {
        "content": "<p>Your H4 has a superfluous y in</p>",
        "id": 191300705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584737486
    },
    {
        "content": "<p>the conclusion of H4 doesn't mention y, so you're still on track</p>",
        "id": 191300718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584737497
    },
    {
        "content": "<p>yeah this is fine, your H4 is just not correctly stated.</p>",
        "id": 191300878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584737576
    },
    {
        "content": "<p>OK, that helped. I'm past it now.</p>",
        "id": 191301302,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584737779
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">le_sub_right_of_add_le</span> <span class=\"err\">$</span> <span class=\"n\">hS</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Here's how I would skip H1 and H2 and prove H3 in term mode.</p>",
        "id": 191301984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584738126
    },
    {
        "content": "<p><code>have h21B := hB.right, have h22B := hB.left,</code> could just be <code>cases hB with h22B h21B,</code>, although note that the latter destroys <code>hB</code>.</p>",
        "id": 191302156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584738234
    },
    {
        "content": "<p>Try commenting out all the lines which mention <code>change</code>. Interesting, huh?</p>",
        "id": 191302372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584738330
    },
    {
        "content": "<p>Yes - it's still useful for me at this stage to see things explicitly. <br>\nYou were right, setting up your own problems teaches you a lot! If you also get some help...</p>\n<p>Now here's where I'm right now, I literally have it - but Lean doesn't think so!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">sum_of_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3a</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h21B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h22B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"c1\">--change ∀ z ∈ B, z ≤ b at h22B,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"c1\">--!</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H3</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13A</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13A</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H5a</span> <span class=\"o\">:=</span> <span class=\"n\">H4</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>   <span class=\"c1\">-- can&#39;t get to use H13A at all</span>\n</pre></div>",
        "id": 191303731,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584739056
    },
    {
        "content": "<p>Oh, wait</p>",
        "id": 191303844,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584739120
    },
    {
        "content": "<p>Done.</p>",
        "id": 191303894,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584739155
    },
    {
        "content": "<p>proof script or it didn't happen</p>",
        "id": 191303915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739169
    },
    {
        "content": "<p>What is this proving?</p>",
        "id": 191303954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584739192
    },
    {
        "content": "<p>sup S + sup T = sup (S+T)</p>",
        "id": 191304016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739206
    },
    {
        "content": "<p>I mean: what is the Lean statement?</p>",
        "id": 191304056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584739226
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sum_of_sets</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 191304089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739247
    },
    {
        "content": "<p>The proof can't possibly start with <code>intros S hS</code></p>",
        "id": 191304178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584739309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191303915\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191303915\">said</a>:</p>\n<blockquote>\n<p>proof script or it didn't happen</p>\n</blockquote>\n<p>I have <code>H5 : ∀ z ∈ B, a ≤ (S - z)</code>. Still a little ways to go.</p>",
        "id": 191304249,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584739324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- this side works</span>\n  <span class=\"o\">},</span>\n  <span class=\"c1\">-- now prove that (a+b) is the least upper bound</span>\n</pre></div>",
        "id": 191304259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259186\">Daniel Keys</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191304249\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191304249\">said</a>:</p>\n<blockquote>\n<p>I have <code>H5 : ∀ z ∈ B, a ≤ (S - z)</code>. Still a little ways to go.</p>\n</blockquote>\n<p>Oh! I'm rooting for you :-)</p>",
        "id": 191304296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739355
    },
    {
        "content": "<p>I'm making some other proofs</p>",
        "id": 191304324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739367
    },
    {
        "content": "<p>Patrick, we're just talking about this part:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 191304475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739454
    },
    {
        "content": "<p>How can it be that complicated?</p>",
        "id": 191304669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584739582
    },
    {
        "content": "<p>He's a beginner!</p>",
        "id": 191304790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739678
    },
    {
        "content": "<p>We're going to refactor after.</p>",
        "id": 191304837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584739690
    },
    {
        "content": "<p>Ok, I should go to the PR and issues lists.</p>",
        "id": 191304879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584739726
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191303915\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191303915\">said</a>:</p>\n<blockquote>\n<p>proof script or it didn't happen</p>\n</blockquote>\n<p>OK now, this is the finish. Uncountable thanks, Kevin!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13A</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13A</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H5a</span> <span class=\"o\">:=</span> <span class=\"n\">H4</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H13A</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">H5a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H6a</span> <span class=\"o\">:=</span> <span class=\"n\">H5</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H8</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13B</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H13B</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">H7</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">done</span>\n</pre></div>",
        "id": 191305463,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740059
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6&#39;&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">add_le_of_le_sub_left</span> <span class=\"err\">$</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">le_sub</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">le_sub_right_of_add_le</span> <span class=\"err\">$</span> <span class=\"n\">hS</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 191305486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740074
    },
    {
        "content": "<p>Still need to work on term mode. On my to do list.</p>",
        "id": 191305573,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740142
    },
    {
        "content": "<p>So do you want to refactor your proof to make it much shorter?</p>",
        "id": 191305595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740152
    },
    {
        "content": "<p>Meaning?</p>",
        "id": 191305672,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740185
    },
    {
        "content": "<p>do you want me to show you how to think about your proof so that the next time you have to write such a proof it will come out better, shorter, and will compile quicker?</p>",
        "id": 191305774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740233
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">sum_of_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3a</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h21B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h22B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"c1\">--change ∀ z ∈ B, z ≤ b at h22B,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"c1\">--!</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H3</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13A</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13A</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H5a</span> <span class=\"o\">:=</span> <span class=\"n\">H4</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H13A</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">H5a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H6a</span> <span class=\"o\">:=</span> <span class=\"n\">H5</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H8</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13B</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H13B</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">H7</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191305802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740255
    },
    {
        "content": "<p>Of course.</p>",
        "id": 191305848,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740279
    },
    {
        "content": "<p>That's your proof currently. I tidied up the beginning -- I removed the sorry and I did the intro and cases (I changed the goal a bit so hA and hB are now hypotheses and I changed the conclusion so it was just the goal you were working on)</p>",
        "id": 191305948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740332
    },
    {
        "content": "<p>Right, I did see that.</p>",
        "id": 191305991,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740356
    },
    {
        "content": "<p>So the thing I like least about your proof is the <code>linarith</code>s</p>",
        "id": 191306020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740372
    },
    {
        "content": "<p>I mean, it's great that <code>linarith</code> exists and can do all sorts of linear inequalities, but when you use it you're using a sledgehammer to crack a nut.</p>",
        "id": 191306119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740415
    },
    {
        "content": "<p>OK, I did those since I know how to deal with those goals.</p>",
        "id": 191306137,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740429
    },
    {
        "content": "<p>The first time you use it is about 11 lines into your proof.</p>",
        "id": 191306171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740448
    },
    {
        "content": "<p>But I agree with you.</p>",
        "id": 191306173,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740448
    },
    {
        "content": "<p>Your local context is</p>\n<div class=\"codehilite\"><pre><span></span>...\nH3a : y + z ≤ S\n⊢ y ≤ S - z\n</pre></div>",
        "id": 191306198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740470
    },
    {
        "content": "<p>and you solve this with <code>linarith</code></p>",
        "id": 191306209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740478
    },
    {
        "content": "<p>So I look at that and think \"that is a completely standard fact so it's going to be in the library\"</p>",
        "id": 191306245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740502
    },
    {
        "content": "<p>Yes, agreed. Just lazy, there were bigger fish...</p>",
        "id": 191306312,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740526
    },
    {
        "content": "<p>The problem is, I don't know whether it's going to be  <code>y + z ≤ S -&gt;  y ≤ S - z</code> or <code> y ≤ S - z &lt;-&gt;  y ≤ S - z</code> in the library, and I don't know the name of the lemma either.</p>",
        "id": 191306362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740559
    },
    {
        "content": "<p>But if you know the tricks, you can sort this out really easily.</p>",
        "id": 191306398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740583
    },
    {
        "content": "<p><code>library_search</code>? I also browse through files many times.</p>",
        "id": 191306440,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740613
    },
    {
        "content": "<p>You don't need anything like that</p>",
        "id": 191306457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740623
    },
    {
        "content": "<p>you can do this just with VS Code tricks. Your goal is y &lt;= S - z and so the Lean name for the theorem you want will start <code>le_sub</code></p>",
        "id": 191306538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740655
    },
    {
        "content": "<p>so you can replace that first <code>linarith</code> with <code>exact le_sub</code> but we're not finished yet</p>",
        "id": 191306564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740680
    },
    {
        "content": "<p><code>sub</code> for subtraction here?</p>",
        "id": 191306576,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740691
    },
    {
        "content": "<p>Right. There's a code which you eventually pick up. <code>≤</code> is <code>le</code>, <code>&lt;</code> is <code>lt</code> etc</p>",
        "id": 191306638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740719
    },
    {
        "content": "<p>I saw lots of these in NNG, but there was no <code>sub</code> there. So this one's new.</p>",
        "id": 191306682,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740756
    },
    {
        "content": "<p>If I delete that first <code>linarith</code> and replace it with <code>exact le_sub</code> then VS Code immediately gives me a list of possible completions. Does that work for you?</p>",
        "id": 191306732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740768
    },
    {
        "content": "<p>If it doesn't, try <code>exact le_sub</code> and then hit ctrl-space. This is a really important trick to learn.</p>",
        "id": 191306826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740824
    },
    {
        "content": "<p>Yes, five options. Thanks for the hint!</p>",
        "id": 191306831,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584740829
    },
    {
        "content": "<p>and you can scroll up and down with the arrow keys and see what all the suggestions are.</p>",
        "id": 191306885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740864
    },
    {
        "content": "<p>and <code>le_sub_right_of_add_le</code> is exactly what you want.</p>",
        "id": 191306963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740896
    },
    {
        "content": "<p>so you can hit <code>tab</code> and it will complete for you, and you can change that <code>linarith</code> to <code>    exact le_sub_right_of_add_le H3a,</code></p>",
        "id": 191307042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740947
    },
    {
        "content": "<p><code>library_search</code> would have been faster.</p>",
        "id": 191307067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584740961
    },
    {
        "content": "<p>You'd have to revert H3 or something.</p>",
        "id": 191307097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584740980
    },
    {
        "content": "<p>Why?</p>",
        "id": 191307111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584740990
    },
    {
        "content": "<p>Oh you don't have to?</p>",
        "id": 191307154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741003
    },
    {
        "content": "<p>Don't underestimate the power of <code>library_search</code></p>",
        "id": 191307178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741008
    },
    {
        "content": "<p>For the second one we have </p>\n<div class=\"codehilite\"><pre><span></span>H6a : a ≤ S - z\n⊢ z ≤ S - a\n</pre></div>\n\n\n<p>Let's try <code>library_search</code></p>",
        "id": 191307207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741027
    },
    {
        "content": "<p>Go back watching Gabriel's talk in Pittsburgh.</p>",
        "id": 191307227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741040
    },
    {
        "content": "<p>library_search doesn't give the optimal answer for the second one: <code>exact le_sub.mp (H5 z hz)</code></p>",
        "id": 191307280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191307227\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191307227\">said</a>:</p>\n<blockquote>\n<p>Go back watching Gabriel's talk in Pittsburgh.</p>\n</blockquote>\n<p>Is that a video you're talking about, Patrick?</p>",
        "id": 191307381,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741114
    },
    {
        "content": "<p>If I try <code>exact le_sub</code> I see that <code>le_sub</code> is pretty much nearly what we want, except that it's an if and only if</p>",
        "id": 191307493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741171
    },
    {
        "content": "<p>and you can pull out one way of an if and only if with a <code>.1</code>, so </p>\n<div class=\"codehilite\"><pre><span></span>    have H6a := H5 z hz, exact le_sub.1 H6a,\n</pre></div>",
        "id": 191307554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741221
    },
    {
        "content": "<p>The third one is on the last line of the script, and it's</p>\n<div class=\"codehilite\"><pre><span></span>H8 : b ≤ S - a\n⊢ a + b ≤ S\n</pre></div>",
        "id": 191307613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741245
    },
    {
        "content": "<p>and again <code>library_search</code> gives a terrifying answer</p>",
        "id": 191307655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741271
    },
    {
        "content": "<p>but I'm going to change it to <code>  exact add_le_of_le_sub_left H8,</code></p>",
        "id": 191307711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741304
    },
    {
        "content": "<p>so now we have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">sum_of_sets</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hS</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3a</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_sub_right_of_add_le</span> <span class=\"n\">H3a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h21B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h22B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"c1\">--change ∀ z ∈ B, z ≤ b at h22B,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"c1\">--!</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H3</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13A</span> <span class=\"o\">:=</span> <span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13A</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H5a</span> <span class=\"o\">:=</span> <span class=\"n\">H4</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H13A</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">H5a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H6</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H6a</span> <span class=\"o\">:=</span> <span class=\"n\">H5</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_sub</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H6a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H7</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H6</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H8</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">H13B</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"n\">at</span> <span class=\"n\">H13B</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H13B</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">H7</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_le_of_le_sub_left</span> <span class=\"n\">H8</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191307728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741321
    },
    {
        "content": "<p>and now our proof uses only really basic tactics so it's in a really good form to play with.</p>",
        "id": 191307748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741346
    },
    {
        "content": "<p>Next thing: did you know that <code>change</code> doesn't really do anything? It's necessary for rewrites, but not for stuff like apply and intro.</p>",
        "id": 191307820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741376
    },
    {
        "content": "<p>Thanks Kevin, for taking all this time! Yes, I know about <code>change</code>.</p>",
        "id": 191307844,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741400
    },
    {
        "content": "<p>actually let's leave these. Let me get to the bombshell.</p>",
        "id": 191307875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741434
    },
    {
        "content": "<p>These are supposed to be readable by students, once I get up standing myself.</p>",
        "id": 191307889,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741442
    },
    {
        "content": "<p>The bombshell is that your proof is twice as long as it needs to be, because you wrote it in a direction which a mathematician would call \"forwards\"</p>",
        "id": 191307912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741470
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=WydyJJYKyTs&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=16&amp;t=0s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=WydyJJYKyTs&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=16&amp;t=0s\">https://www.youtube.com/watch?v=WydyJJYKyTs&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=16&amp;t=0s</a> explains how powerfull is library_search</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"WydyJJYKyTs\" href=\"https://www.youtube.com/watch?v=WydyJJYKyTs&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=16&amp;t=0s\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=WydyJJYKyTs&amp;list=PLlF-CfQhukNkWwZt45vkNfWfuO-tBBqPN&amp;index=16&amp;t=0s\"><img src=\"https://i.ytimg.com/vi/WydyJJYKyTs/default.jpg\"></a></div>",
        "id": 191307919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741475
    },
    {
        "content": "<p>and which a computer scientist would call \"the wrong way around\"</p>",
        "id": 191307973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741492
    },
    {
        "content": "<p>You prove 8 sub-theorems H1 to H8 and then finished the job</p>",
        "id": 191308007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741514
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 191308014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741520
    },
    {
        "content": "<p>And each H(n+1) followed from Hn</p>",
        "id": 191308031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741536
    },
    {
        "content": "<p>and at the end of it your local context looks like this:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nA B : set ℝ,\nh1A : set.nonempty A,\nh1B : set.nonempty B,\nh2A : bdd_above A,\nh2B : bdd_above B,\na b : ℝ,\nhA : is_lub A a,\nhB : is_lub B b,\nS : ℝ,\nhS : S ∈ upper_bounds (sum_of_sets A B),\nH1 : ∀ (y : ℝ), y ∈ A → ∀ (z : ℝ), z ∈ B → y + z ∈ sum_of_sets A B,\nH2 : ∀ (y : ℝ), y ∈ A → ∀ (z : ℝ), z ∈ B → y + z ≤ S,\nH3 : ∀ (y : ℝ), y ∈ A → ∀ (z : ℝ), z ∈ B → y ≤ S - z,\nh21B : b ∈ lower_bounds (upper_bounds B),\nh22B : b ∈ upper_bounds B,\nH4 : ∀ (z : ℝ), z ∈ B → S - z ∈ upper_bounds A,\nH5 : ∀ (z : ℝ), z ∈ B → a ≤ S - z,\nH6 : ∀ (z : ℝ), z ∈ B → z ≤ S - a,\nH7 : S - a ∈ upper_bounds B,\nH8 : b ≤ S - a\n⊢ a + b ≤ S\n</pre></div>",
        "id": 191308066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741562
    },
    {
        "content": "<p>You proved H1 -&gt; H2 -&gt; H3 -&gt; H4 -&gt; H5 -&gt; H6 -&gt; H7 -&gt; H8</p>",
        "id": 191308110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741591
    },
    {
        "content": "<p>and H8 -&gt; goal</p>",
        "id": 191308122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741598
    },
    {
        "content": "<p>Let's now write exactly the same proof, but backwards.</p>",
        "id": 191308203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741615
    },
    {
        "content": "<p>You mean using <code>apply</code>?</p>",
        "id": 191308238,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741645
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The goal is <code>⊢ a + b ≤ S</code></p>",
        "id": 191308259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741660
    },
    {
        "content": "<p>and the last line of our current proof is <code>exact add_le_of_le_sub_left H8,</code> so let's make the first line of our new proof be <code>apply add_le_of_le_sub_left,</code></p>",
        "id": 191308429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741744
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">proposition_2_6&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1A</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2A</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">sum_of_sets</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_of_le_sub_left</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- goal is ⊢ b ≤ S - a</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191308438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741755
    },
    {
        "content": "<p>and now our goal is <code>H8</code></p>",
        "id": 191308456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741766
    },
    {
        "content": "<p>OK. Let me take it from here.</p>",
        "id": 191308467,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741774
    },
    {
        "content": "<p>Go for it! I did it, it's really good fun :-)</p>",
        "id": 191308487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741788
    },
    {
        "content": "<p>I have to go now, but will definitely try it later. Will haul back for help if needed.</p>",
        "id": 191308530,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741821
    },
    {
        "content": "<p>Note that H7 and H6 are exactly the same goal!</p>",
        "id": 191308533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741825
    },
    {
        "content": "<p>I don't think you need to do backwards to make it shorter.</p>",
        "id": 191308536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741830
    },
    {
        "content": "<p>so you can skip H7</p>",
        "id": 191308542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741838
    },
    {
        "content": "<p>Patrick did you see my one line term proof? I made that by turning Daniel's proof backwards and then termifying it</p>",
        "id": 191308608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191308536\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191308536\">said</a>:</p>\n<blockquote>\n<p>I don't think you need to do backwards to make it shorter.</p>\n</blockquote>\n<p>Either way is good practice for me.</p>",
        "id": 191308614,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584741872
    },
    {
        "content": "<p>No, I haven't seen your proof term.</p>",
        "id": 191308645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741895
    },
    {
        "content": "<p>But I guess it's hard to read.</p>",
        "id": 191308659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741906
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/191305486\" title=\"#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/191305486\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/noob.20question%28s%29/near/191305486</a></p>",
        "id": 191308672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741918
    },
    {
        "content": "<p>It's the same as <span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span> 's proof :-)</p>",
        "id": 191308696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741941
    },
    {
        "content": "<p>It looks has I expected...</p>",
        "id": 191308707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741952
    },
    {
        "content": "<p>My advice for Daniel is: try to get a clearer mathematical picture.</p>",
        "id": 191308780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584741976
    },
    {
        "content": "<p>It is super-satisfying to turn this proof backwards</p>",
        "id": 191308807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584741989
    },
    {
        "content": "<p>If you break that term mode proof into a couple <code>apply</code>s and <code>intro</code>s it should be plenty readable</p>",
        "id": 191308834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584742010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191308780\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191308780\">said</a>:</p>\n<blockquote>\n<p>My advice for Daniel is: try to get a clearer mathematical picture.</p>\n</blockquote>\n<p>Why exactly, Patrick?</p>",
        "id": 191308838,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584742016
    },
    {
        "content": "<p>I would start with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>where each sorry is at most three lines long.</p>",
        "id": 191309016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742134
    },
    {
        "content": "<p>I claim this is a readable outline of the proof.</p>",
        "id": 191309047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742159
    },
    {
        "content": "<p>I think it's interesting that I set this question to about 250 students and out of all of them, only one person proved it constructively.</p>",
        "id": 191309143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742207
    },
    {
        "content": "<p>And this does not come through Lean mastery, it's the mathematical understanding.</p>",
        "id": 191309170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742229
    },
    {
        "content": "<p>what's up with these unbracketed indented blocks after <code>have</code>? This isn't python</p>",
        "id": 191309221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584742274
    },
    {
        "content": "<p>Everyone said that if some upper bound was less than a+b then you could find some element of A which was within epsilon/2 of the upper bound for A etc.</p>",
        "id": 191309242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742311
    },
    {
        "content": "<p>indented blocks: I thought that TPIL said that this was OK. Doesn't it?</p>",
        "id": 191309288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742333
    },
    {
        "content": "<p>Mario, I can tell you very precisely where they come from.</p>",
        "id": 191309303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742343
    },
    {
        "content": "<p>they have the same problem as unbracketed blocks elsewhere</p>",
        "id": 191309339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584742369
    },
    {
        "content": "<p>tactics can end up doing too much and messing up other branches of the proof</p>",
        "id": 191309369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584742395
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=indent#basic-tactics\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=indent#basic-tactics\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=indent#basic-tactics</a></p>",
        "id": 191309385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742410
    },
    {
        "content": "<p>Last year I taught curly brackets to my undergrads. But they were unable to balance them properly. And then Lean stopped displaying anything, or wrote very confusing error messages (which means any error message for my students). This year I taught indented blocks, and Lean became easy.</p>",
        "id": 191309410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742431
    },
    {
        "content": "<p>unbalanced bracket = really really horrible errors. You either get <code>sync</code> or you just get literally nothing. No display at any point in your proof.</p>",
        "id": 191309500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742471
    },
    {
        "content": "<p>Really hard to debug</p>",
        "id": 191309514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742481
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191309385\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191309385\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=indent#basic-tactics\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=indent#basic-tactics\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html?highlight=indent#basic-tactics</a></p>\n</blockquote>\n<p>And Mario adds one line to his \"When he won't be my advisor anymore\" notebook.</p>",
        "id": 191309515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742482
    },
    {
        "content": "<p>Does anyone want to teach python to lean? I agree the error messages are terrible</p>",
        "id": 191309556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584742508
    },
    {
        "content": "<p>A lot of the kids know python anyway, at least mathematicians do, they are taught it at my university</p>",
        "id": 191309601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742549
    },
    {
        "content": "<p>I think coq uses some kind of markdown list thing</p>",
        "id": 191309607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584742557
    },
    {
        "content": "<p>I like Lean's <code>{</code>/<code>}</code>, but my teaching taught me bad habits.</p>",
        "id": 191309720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742620
    },
    {
        "content": "<p>I need to go, so I'll post spoilers for Daniel:<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.<br>\n.</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- by rwa le_sub_iff_add_le&#39;,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hS</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- by rwa le_sub,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hB</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hA</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H2</span><span class=\"o\">],</span> <span class=\"c1\">--exact le_sub_iff_add_le.mp (hA.2 H2),</span>\n</pre></div>\n\n\n<p>The commented our version are only for Kevin's pleasure. I don't see any point in learning those lemmas.</p>",
        "id": 191309866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584742702
    },
    {
        "content": "<p>I was going to see if I could take Daniel to the full term proof, and there they're important; we don't enter tactic mode at all there, so you can really see that the proof is just a function. This is kind of a startling revelation to a mathematician.</p>",
        "id": 191310436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584743089
    },
    {
        "content": "<blockquote>\n<p>I don't see any point in learning those lemmas.</p>\n</blockquote>\n<p>Another reason for showing the ctrl-space technique is that even though of course you're right that <code>linarith</code> will prove all of them, it is generally a very important technique, especially when you're in situations like trying to figure out how to prove <code>a \\in {a}</code>, where what I explained is exactly how a beginner should find that proof (<code>mem_singleton-ctrl-space</code>)</p>",
        "id": 191311932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584744221
    },
    {
        "content": "<p>How do I use e (as in Euler's number) in lean?</p>",
        "id": 191320510,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1584752274
    },
    {
        "content": "<p>I don't think <code>e</code> has been defined, but you can use <code>real.exp 1</code> if you import <code>data.complex.exponential</code></p>",
        "id": 191324041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584757741
    },
    {
        "content": "<p>The following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>fails at the <code>rw</code> because lean can't match <code>↑(2 * a)</code> with <code>2 * ↑a</code>. I can do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"n\">a2</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"n\">a2</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is there a better way? (I should probably ask: <em>what</em> is the better way <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> )</p>",
        "id": 191357401,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1584812517
    },
    {
        "content": "<p>One question might be: if you're interested in integers, why are you using naturals at all?</p>",
        "id": 191357487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812615
    },
    {
        "content": "<p>But there is a tactic which can help called <code>norm_cast</code> if you really want to mix your types like this</p>",
        "id": 191357550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812663
    },
    {
        "content": "<p>I would imagine that norm_cast will turn <code>\\u(2*a)</code> into <code>2*\\u a</code></p>",
        "id": 191357583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584812742
    },
    {
        "content": "<p>Ugh, I should have been able to do that myself. <code>norm_cast</code> works. Thanks!!<br>\nIs there an <code>int</code> version of <code>gcd_eq_gcd_ab</code>? Well, even <code>gcd_eq_gcd_ab</code> is in an <code>int</code> file. Oh, the more general statement is probably an <code>euclidean_domain</code> thing. I'll find it.</p>",
        "id": 191358465,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1584813637
    },
    {
        "content": "<p>I have this in my context:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h51</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">h6b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>but am not able to satisfy the goal; <code>linarith</code>, <code>dec_trivial</code>, <code>norm_num</code> and everything else I tried all fail. I suppose this may be due to a type conversion problem, as <code>m-1</code> may be seen as an integer by Lean. Any hint on how to proceed appreciated!</p>",
        "id": 191359591,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584815138
    },
    {
        "content": "<p>You can't solve that goal :-(</p>",
        "id": 191359642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815204
    },
    {
        "content": "<p>If <code>m = 0</code> then all the hypotheses are true</p>",
        "id": 191359647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815219
    },
    {
        "content": "<p><code>#eval (0 : ℕ) - 1 -- 0</code></p>",
        "id": 191359660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815247
    },
    {
        "content": "<p>It's Patrick's favourite Lean fact.</p>",
        "id": 191359666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815260
    },
    {
        "content": "<p>There's a good reason every introductory text I've ever seen to Peano arithmetic defines <code>-</code> with a superscript dot, because it's very much not the same as <code>-</code> :P really it's the Billion Dollar Mistake again, we (= the world) shouldn't pun between N and Maybe N in this way</p>",
        "id": 191359739,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584815348
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">has_sub</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[class]</span>\n<span class=\"cm\">structure has_sub : Type u → Type u</span>\n<span class=\"cm\">fields:</span>\n<span class=\"cm\">has_sub.sub : Π {α : Type u} [c : has_sub α], α → α → α</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>The subtraction typeclass in Lean is a notation typeclass, and subtraction itself has type <code>α → α → α</code> which means that whatever you're subtracting, the two inputs and the output <em>have</em> to have the same type. So there's no way around it, if you want subtraction on the naturals then it has to return a natural.</p>",
        "id": 191359750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815387
    },
    {
        "content": "<p>I have pushed in the past for <code>0 - 1</code> to be <code>37</code> but the idea never gained any traction.</p>",
        "id": 191359810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815446
    },
    {
        "content": "<p>But things would change if I switched to <code>int</code> instead, right?</p>",
        "id": 191359829,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584815507
    },
    {
        "content": "<p>Indeed</p>",
        "id": 191359870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815539
    },
    {
        "content": "<p>The Real Problem (tm) is that <code>-</code> just doesn't (morally) have type N -&gt; N -&gt; N; is there a good reason why it has that type in Lean?</p>",
        "id": 191359873,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584815548
    },
    {
        "content": "<p>I would not be arguing that the integer 0-1 should be 37</p>",
        "id": 191359875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815555
    },
    {
        "content": "<p>The answer used to be \"because it's in core and we can't change core\"</p>",
        "id": 191359885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815573
    },
    {
        "content": "<p>but even now it could be changed in theory, the CS people won't let you change it because they read the same books on Peano arithmetic that you did and they liked it</p>",
        "id": 191359895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815610
    },
    {
        "content": "<p>There are many places where I have strong opinions but recognise that reasonable people may reasonably differ; but this is not one of them</p>",
        "id": 191359962,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584815670
    },
    {
        "content": "<p>A subtraction of the form <code>A -&gt; A -&gt; B</code> would probably cause a lot more problems than it solved.</p>",
        "id": 191359964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815679
    },
    {
        "content": "<p>For example if you wanted to prove <code>a - b + b = a</code> then there are problems because suddenly <code>a -b</code> has type B (or int or whatever) so now when you add b (which has type nat) you will have to coerce, and now you end up with the integer a</p>",
        "id": 191359975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815729
    },
    {
        "content": "<p>i think that this is actually a pretty common theme in lean. requiring functions to be partial often results in needing lots of plumbing. instead we just define those functions to be some arbitrary value and demand some extra hypothesis in proofs to ensure that the case doesn't happen.</p>",
        "id": 191359984,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584815740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191359964\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191359964\">said</a>:</p>\n<blockquote>\n<p>A subtraction of the form <code>A -&gt; A -&gt; B</code> would probably cause a lot more problems than it solved.</p>\n</blockquote>\n<p>OK that makes sense - thanks a lot!</p>",
        "id": 191359985,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584815746
    },
    {
        "content": "<p>As a mathematician I want to believe that these coercions don't exist, but they are there and they cause problems for the CS people.</p>",
        "id": 191359987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191359964\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191359964\">said</a>:</p>\n<blockquote>\n<p>A subtraction of the form <code>A -&gt; A -&gt; B</code> would probably cause a lot more problems than it solved.</p>\n</blockquote>\n<p>To me, it's \"completely obvious\" that if you can prove a &lt; b, then you should be using something of type <code>(a b : N) -&gt; (a &lt;= b) -&gt; N</code>, and otherwise you should be using <code>(a b : N) -&gt; Maybe N</code></p>",
        "id": 191359989,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584815753
    },
    {
        "content": "<p>right -- that would be another approach, and when I started here I thought that this was manifestly the correct approach and all the CS people were crazy</p>",
        "id": 191360040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815783
    },
    {
        "content": "<p>but then I tried it in practice. When I started here there was no <code>real.sqrt</code> and I was teaching it in my class so I defined it in Lean and I my definition took as input a real number r and a proof that it was &gt;= 0, and then it defined the square root to be some sup</p>",
        "id": 191360055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815831
    },
    {
        "content": "<p>and then a passing computer scientist came along and said \"ha ha look at the silly mathematician, he is asking for an input to his function and then he never uses the input!\"</p>",
        "id": 191360062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815858
    },
    {
        "content": "<p>and indeed, you could just remove the hypothesis as an input and the definition compiled just fine</p>",
        "id": 191360072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815876
    },
    {
        "content": "<p>and when I started thinking about it that way, I started having doubts</p>",
        "id": 191360114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815891
    },
    {
        "content": "<p>But that's why God gave us the notion of irrelevance :P for when you need to tell things to the compiler which it would be annoying to express in any other way</p>",
        "id": 191360128,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584815934
    },
    {
        "content": "<p>and then when I started formalising all my problem sheet questions, and every time I even wrote the square root I had to prove that something was non-negative, so I would constantly be proving that 2&gt;=0 when working with sqrt(2)</p>",
        "id": 191360134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815938
    },
    {
        "content": "<p>and in the end I got so sick of proving 2&gt;=0 (this was before the days of <code>norm_num</code> so it wasn't even that easy) that I gave up and I dropped the hypothesis in the definition of sqrt, and instead I just put the hypothesis in the theorem statements</p>",
        "id": 191360162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584815989
    },
    {
        "content": "<p>because the square root of every negative integer was coming out to be 37 so I needed it in the theorem statements</p>",
        "id": 191360210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816007
    },
    {
        "content": "<p>(well OK, it was coming out to be 0)</p>",
        "id": 191360214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816014
    },
    {
        "content": "<p>but I was having to prove 2&gt;=0 an order of magnitude fewer times this way</p>",
        "id": 191360220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816032
    },
    {
        "content": "<p>Fair enough, though I weep to hear that things might simply have to be this way</p>",
        "id": 191360225,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584816044
    },
    {
        "content": "<p>and then I just realised that I had defined a square root with a dot on it</p>",
        "id": 191360227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816050
    },
    {
        "content": "<p>and somehow that made me feel a bit better</p>",
        "id": 191360230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584816067
    },
    {
        "content": "<p>It is interesting to see how these very simple textbook problems (in this case, I was trying to prove a positive real number has a floor and a ceiling in the naturals) lead to such discussions and insight.</p>",
        "id": 191360246,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584816121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191360225\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191360225\">said</a>:</p>\n<blockquote>\n<p>Fair enough, though I weep to hear that things might simply have to be this way</p>\n</blockquote>\n<p>it's a fun experiment to define something new and carry around some invariant together with data! i think that even something as simple as Maybe will quickly lead to headaches.<br>\nthat being said, there are cases where the invariant is carefully maintained by the library, and you won't have to deal with the pain if what you want is in the library.<br>\ne.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/finset.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/finset.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/finset.lean</a></p>",
        "id": 191360342,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584816243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> I know exactly how you feel. It's really quite crazy.</p>",
        "id": 191361648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584818212
    },
    {
        "content": "<p>In the end it boils, I've come to realise that it boils down to a pragmatic usability argument.<br>\nAnd like Kevin said. Just imagine that there is a little dot written above almost every function that you see...</p>",
        "id": 191361684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584818282
    },
    {
        "content": "<p><code>/</code>, and <code>^-1</code> (inversion) and <code>sqrt</code> etc... they are all cheating on inputs where mathematicians would say they are undefined.</p>",
        "id": 191361733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584818317
    },
    {
        "content": "<p>I don't reeeallly mind the cheating - I have aesthetic objections, but really the thing I actually care about is \"will this lead me to make mistakes\", and I'm liable to make lots of mistakes if the types don't constrain me :P</p>",
        "id": 191363334,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1584820997
    },
    {
        "content": "<p>Still having trouble even with <code>int</code>, shouldn't this goal follow from <code>h6</code> below?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>Where can a type mismatch arise from here? Trying <code>exact h6</code> I get:</p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  ↑(m - 1) ≤ x\nbut is expected to have type\n  ↑m - 1 ≤ x\n</pre></div>",
        "id": 191363534,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584821294
    },
    {
        "content": "<p>The problem is that it's not exactly h6 :-)</p>",
        "id": 191364539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584822939
    },
    {
        "content": "<p>The order of the subtraction and the coercion are different, right? The brackets are in different places</p>",
        "id": 191364590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584822996
    },
    {
        "content": "<p>Just do <code>convert h6</code>. That will probably change the goal to the assertion that the coercion commutes with subtraction</p>",
        "id": 191364604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584823053
    },
    {
        "content": "<p>Then you can probably use <code>norm_cast</code> to finish the job</p>",
        "id": 191364608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584823073
    },
    {
        "content": "<p>Or perhaps norm_cast will change either the goal into the hypothesis or vice versa</p>",
        "id": 191364656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584823107
    },
    {
        "content": "<p>It worked! I had tried some 20 other ways.</p>",
        "id": 191364692,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584823177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191363334\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191363334\">said</a>:</p>\n<blockquote>\n<p>I don't reeeallly mind the cheating - I have aesthetic objections, but really the thing I actually care about is \"will this lead me to make mistakes\", and I'm liable to make lots of mistakes if the types don't constrain me :P</p>\n</blockquote>\n<p>Well, the first thing that you do after your definition, is prove a lemma that under the assumption that the input makes sense, the definition behaves the way it should. Once you've proven that lemma, you can't really make mistakes.</p>",
        "id": 191366283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584825680
    },
    {
        "content": "<p>Even before that you  cannot really make a mistake in a sense. As worse you can state and prove something which is not what you have in mind.</p>",
        "id": 191366341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584825752
    },
    {
        "content": "<p>Well, that depends on what you mean with mistake...</p>",
        "id": 191366360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584825787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fermat_last_thm</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</pre></div>\n\n\n<p>is a mistake, in my book.</p>",
        "id": 191366373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584825816
    },
    {
        "content": "<p>This is completely independent from our discussion</p>",
        "id": 191366436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584825890
    },
    {
        "content": "<p>You can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>and call it a mistake or a misunderstanding of the statement, depending on your point of view.</p>",
        "id": 191366457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584825930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>This is an example which every mathematician would say was false, but there's a proof.</p>",
        "id": 191367952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584828625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191324041\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191324041\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>e</code> has been defined, but you can use <code>real.exp 1</code> if you import <code>data.complex.exponential</code></p>\n</blockquote>\n<p>I can't import either of those, as lean says \"not found in the LEAN_PATH\". Actually, I'm getting this issue for \"import standard\" and a lot of other common import statements. Would you know how to resolve this?</p>",
        "id": 191374044,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1584840318
    },
    {
        "content": "<p><code>import standard</code> doesn't exist AFAIK, but if <code>import data.complex.exponential</code> doesn't work then you most likely don't have mathlib installed. Could someone with <code>leanproject</code> experience give setup advice here?</p>",
        "id": 191374142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584840504
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/Inequality.20World/near/190568509\" title=\"#narrow/stream/113489-new-members/topic/Inequality.20World/near/190568509\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Inequality.20World/near/190568509</a></p>",
        "id": 191374152,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1584840537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> By the way, there is a function called <code>nat.psub : nat -&gt; nat -&gt; option nat</code> that actually returns <code>none</code> when it's not supposed to be defined. You have to write funny monadic code if you want to compose it with other operations though.</p>",
        "id": 191374216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584840641
    },
    {
        "content": "<p>I'm looking at the files defining submonoids, and I'm trying to understand some Lean notation. I see the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">instance</span> <span class=\"n\">has_mul</span> <span class=\"p\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">S</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"err\">⟨</span><span class=\"n\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"err\">⟨</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"mi\">2</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"err\">⟩⟩</span>\n</pre></div>\n\n\n<p>and I'm trying to understand what the <code>a.1</code> and <code>a.2</code> mean. When I try to evaluate to see what these mean here is what I see:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">variables</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"p\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"p\">:</span> <span class=\"n\">S</span><span class=\"p\">)</span>\n<span class=\"c1\">#check a     --- a : ↥S</span>\n<span class=\"c1\">#check a.1     --- a.val : M</span>\n<span class=\"c1\">#check a.2     --- a.property : (λ (x : M), x ∈ has_coe_t_aux.coe (set M) S) (a.val)</span>\n</pre></div>\n\n\n<p>so I take it it has to do with the coercion from S to M. But what is really happening here?</p>",
        "id": 191383881,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1584860419
    },
    {
        "content": "<p><code>a</code> has type <code>↥S</code>, which is actually <code>{x : M // x \\in S}</code>. So <code>a</code> is a pair of an element of <code>M</code> and a proof that that element is in <code>S</code></p>",
        "id": 191383981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584860628
    },
    {
        "content": "<p>You can also write <code>\\u a</code> instead of <code>a.1</code> to produce the element of <code>M</code></p>",
        "id": 191384044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584860707
    },
    {
        "content": "<p>or just <code>a</code>, since the coercion is implicitly inserted</p>",
        "id": 191384048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584860725
    },
    {
        "content": "<p>I see! Thanks.</p>",
        "id": 191384049,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1584860727
    },
    {
        "content": "<p>the idea with all the notations is to try to make this act as much like a subset as possible</p>",
        "id": 191384054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584860742
    },
    {
        "content": "<p>Does anyone know a short way to obtain a contradiction here, or should I dig further into where uniqueness of the supremum, <code>lub</code>, resides?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>",
        "id": 191417068,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584912488
    },
    {
        "content": "<p>Oh, I got it. It is in the same file, <code>bounds.lean</code>. Can easily use <code>eq_of_is_lub_of_is_lub</code>.</p>",
        "id": 191417185,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584912633
    },
    {
        "content": "<p>It looks to me like it would be worth proving the lemma that if A has two least upper bounds then they are equal, or (if your definition of <code>is_lub</code> is from the library and not home-rolled) using the result in mathlib (assuming it's there, which it surely will be). If you're using mathlib's <code>is_lub</code> (assuming it has one) then just take a look at the 100 lines of code after the definition.</p>",
        "id": 191417189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584912641
    },
    {
        "content": "<p>The rule is: if it's a standard result about a definition in the library, then it's proved in the library, probably not too far after the definition.</p>",
        "id": 191417204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584912685
    },
    {
        "content": "<p>Does lean support trig functions and power series?</p>",
        "id": 191513843,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1584986864
    },
    {
        "content": "<p>Trig functions: yes. Power series: to some extent.</p>",
        "id": 191514101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584986969
    },
    {
        "content": "<p>Note that the question is not quite right. Lean itself virtually supports any mathematics, and actually knows very little. Then formalizations written in Lean know some stuff. The big one is mathlib, which is meant to be the base for all other mathematics developments, and this is what Johan's answer refer to.</p>",
        "id": 191514375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584987084
    },
    {
        "content": "<p>What is the command for sin and cos?</p>",
        "id": 191515078,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1584987405
    },
    {
        "content": "<p>Do you have a working Lean project together with a compiled mathlib?</p>",
        "id": 191515191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584987460
    },
    {
        "content": "<p>Yes</p>",
        "id": 191515310,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1584987500
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sin</span>\n</pre></div>",
        "id": 191515472,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584987590
    },
    {
        "content": "<p>Hey all, stupid question: Does lean have some analog to agda's interactive holes?</p>",
        "id": 191519054,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1584989255
    },
    {
        "content": "<p>I don't  know agda, but from a quick google, it sounds like <code>_</code> is the replacement of agda's <code>?</code>, in that you can write terms with <code>_</code> to see what the type of <code>_</code> should be and then fill it in.</p>",
        "id": 191519595,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1584989487
    },
    {
        "content": "<p>Lean does support <a href=\"https://leanprover-community.github.io/mathlib_docs/hole_commands.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/hole_commands.html\">\"hole commands\"</a> but they're not as easy to use as Agda's. I don't think we have anything like Agda's Auto, for instance. (**Edit: on second thought <code>library_search</code> is kind of like Auto.)</p>",
        "id": 191519647,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584989511
    },
    {
        "content": "<p>Hmm, I tried that, and it looks like the typechecker got stuck</p>\n<div class=\"codehilite\"><pre><span></span> types.lean    42  95 error           type mismatch, term\n   congr_fun ?m_5 ?m_6\n has type\n   ?m_3 ?m_2 = ?m_4 ?m_2\n but is expected to have type\n   σ.app Y (F.map f x) = G.map f (σ.app X x) (lean-checker)\n</pre></div>",
        "id": 191519738,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1584989534
    },
    {
        "content": "<p>What were you trying to do?</p>",
        "id": 191519810,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1584989569
    },
    {
        "content": "<p>I'm just messing around with some existing proofs to try to get a better feel on how to use the system :)</p>\n<p>For context, the proof in question is</p>\n<div class=\"codehilite\"><pre><span></span>lemma naturality (f : X ⟶ Y) (x : F.obj X) : σ.app Y ((F.map f) x) = (G.map f) (σ.app X x) := congr_fun _ _\n</pre></div>\n\n\n<p>From mathlib's <code>category_theory/types.lean</code></p>",
        "id": 191520076,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1584989670
    },
    {
        "content": "<p>I guess there are too many implicit things in that example, if you just write<br>\n<code>lemma naturality (f : X ⟶ Y) (x : F.obj X) : σ.app Y ((F.map f) x) = (G.map f) (σ.app X x) := congr_fun _ x</code><br>\nyou get to see what the type of <code>_</code> should be</p>",
        "id": 191520765,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1584989999
    },
    {
        "content": "<p>Yeah, it barfs about not being able to synthesize a placeholder context, which isn't _super_ suprising, it's a pretty gnarly unification problem</p>",
        "id": 191520979,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1584990091
    },
    {
        "content": "<p>If you write @f instead of f you can fill in some of the unification holes yourself</p>",
        "id": 191530729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584994792
    },
    {
        "content": "<p>More silly questions: I'm trying to use the rewrite tactic, and it's complaining that it can't find an instance of the pattern, even though there obviously is one:</p>\n<div class=\"codehilite\"><pre><span></span> braided.lean    45   3 error           rewrite tactic failed, did not find instance of the pattern in the target expression\n   (λ_ (X ⊗ 𝟙_ C)).hom ≫ (braid X (𝟙_ C)).hom\n state:\n C : Type u,\n _inst_1 : category C,\n _inst_2 : monoidal_category C,\n 𝒞 : braided_category C,\n X : C\n ⊢ (((braid X (𝟙_ C)).hom ⊗ 𝟙 (𝟙_ C)) ≫ (α_ (𝟙_ C) X (𝟙_ C)).hom ≫ (λ_ (X ⊗ 𝟙_ C)).hom) ≫\n       (braid X (𝟙_ C)).hom =\n     ((ρ_ X).hom ⊗ 𝟙 (𝟙_ C)) ≫ (braid X (𝟙_ C)).hom (lean-checker)\n</pre></div>",
        "id": 191548005,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1585003982
    },
    {
        "content": "<p>Can you post full code? A minimal working example</p>",
        "id": 191548174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585004087
    },
    {
        "content": "<p>Of course! This is what I've got so far:</p>\n<div class=\"codehilite\"><pre><span></span>import category_theory.monoidal.category\nimport category_theory.natural_isomorphism\n\nopen category_theory\n\nuniverses v u\n\nnamespace category_theory\n\n\nclass braided_category (C : Type u) [category.{v} C] [𝒞 : monoidal_category.{v} C] :=\n(braid : Π X Y : C, (X ⊗ Y) ≅ (Y ⊗ X))\n(braid_naturality&#39; :\n  ∀ {X₁ X₂ Y₁ Y₂} (f₁ : X₁ ⟶ Y₁) (f₂ : X₂ ⟶ Y₂),\n  (f₁ ⊗ f₂) ≫ (braid Y₁ Y₂).hom = (braid X₁ X₂).hom ≫ (f₂ ⊗ f₁) . obviously)\n-- first hexagon identity:\n(hexagon&#39; : ∀ X Y Z : C,\n  (α_ X Y Z).hom ≫ (braid X (Y ⊗ Z)).hom ≫ (α_ Y Z X).hom\n  = ((braid X Y).hom ⊗ (𝟙 Z)) ≫ (α_ Y X Z).hom ≫ ((𝟙 Y) ⊗ (braid X Z).hom) . obviously)\n-- second hexagon identity:\n(hexagon_inv&#39; : ∀ X Y Z : C,\n  (α_ X Y Z).inv ≫ (braid (X ⊗ Y) Z).hom ≫ (α_ Z X Y).inv\n  = ((𝟙 X) ⊗ (braid Y Z).hom) ≫ (α_ X Z Y).inv ≫ ((braid X Z).hom ⊗ (𝟙 Y)) . obviously)\n\nrestate_axiom braided_category.braid_naturality&#39;\nrestate_axiom braided_category.hexagon&#39;\nrestate_axiom braided_category.hexagon_inv&#39;\n\nopen monoidal_category\nopen braided_category\n\nnamespace braided_category\n\nvariables {C : Type u} [category.{v} C] [monoidal_category.{v} C] [𝒞 : braided_category.{v} C]\ninclude 𝒞\n\nsection\n\nlemma braid_coherence {X : C} :\n  ((braid X (𝟙_ C)).hom ⊗ 𝟙 (𝟙_ C)) ≫ ((left_unitor X).hom ⊗ 𝟙 (𝟙_ C)) = ((right_unitor X).hom ⊗ 𝟙 (𝟙_ C)) :=\nbegin\n  apply (cancel_mono (braid X (𝟙_ C)).hom).1,\n  rw [←left_unitor_tensor, ←left_unitor_naturality C (braid X (𝟙_ C)).hom],\n  sorry\nend\n\nend\n\nend braided_category\n\nend category_theory\n</pre></div>",
        "id": 191548245,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1585004135
    },
    {
        "content": "<p>I suspect that it may have something to do with associativity actually, missed a pair of parens <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 191548519,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1585004306
    },
    {
        "content": "<p>Ah okay, does that fix it then?</p>",
        "id": 191548779,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585004435
    },
    {
        "content": "<p>In general if rw is having trouble you can use <code>simp only [your_eq]</code> or use <code>conv</code> to isolate the part you want to rewrite.</p>",
        "id": 191548853,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585004485
    },
    {
        "content": "<p>Mucking about to figure out how to get <code>assoc</code> into scope, but I suspect that will do it. Thanks for the help <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 191548928,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1585004522
    },
    {
        "content": "<p><code>\\gg</code> is right associative:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">≫</span>\n<span class=\"c1\">-- _ `≫`:80 _:79 := category_theory.category_struct.comp #1 #0</span>\n</pre></div>\n\n\n<p>80&gt;79</p>",
        "id": 191550020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585005283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266262\">@Reed Mullanix</span> if you post code with <code> ```lean </code> at the top then you get syntax highlighting.</p>",
        "id": 191550069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585005318
    },
    {
        "content": "<p>How are powers of elements (say elements in a monoid or group) defined in Lean? In this file  (<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/submonoid.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/submonoid.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/submonoid.lean</a>) where submonoids are defined, they use expressions like x^n but searching around I don't see where this notation is first implemented. When I try to type it into Lean myself it looks like it's notation for <code>has_pow M ℕ</code>, so were monoids at some point endowed with this <code>has_pow</code> attribute and I just don't see where?</p>",
        "id": 191692541,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585098883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/24b82c91583843597e8cfeb7928d446dec776456/src/algebra/group_power.lean#L20\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/24b82c91583843597e8cfeb7928d446dec776456/src/algebra/group_power.lean#L20\">https://github.com/leanprover-community/mathlib/blob/24b82c91583843597e8cfeb7928d446dec776456/src/algebra/group_power.lean#L20</a></p>\n<p>(the docs link below is probably better)</p>",
        "id": 191692672,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585099059
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_power.html#monoid.has_pow\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_power.html#monoid.has_pow\">https://leanprover-community.github.io/mathlib_docs/algebra/group_power.html#monoid.has_pow</a></p>",
        "id": 191692716,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585099085
    },
    {
        "content": "<p>Too quick for me ;)</p>",
        "id": 191692732,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585099120
    },
    {
        "content": "<p>I just <code>Ctrl-P</code> <code>monoid.pow</code> and I had <code>mathlib</code> open on GitHub already :) The docs link is probably the better one though.</p>",
        "id": 191692771,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585099186
    },
    {
        "content": "<p>Not sure how I missed that there's an entire file titled group_power! Thanks</p>",
        "id": 191692854,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585099294
    },
    {
        "content": "<p>Are you on VSCode?</p>",
        "id": 191692860,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585099308
    },
    {
        "content": "<p>Yeah I just run a search in vscode for <code>instance.*monoid.*has_pow</code></p>",
        "id": 191692913,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585099328
    },
    {
        "content": "<p>I am on VSCode, I had no idea I could do that</p>",
        "id": 191693437,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585099939
    },
    {
        "content": "<p>Or you can just press <code>Ctrl-P</code> then type in <code>#</code> in the search bar. It searches for whatever comes after the <code>#</code> in mathlib. So I just searched for <code>monoid.pow</code>. You could have also (probably a better idea) searched for <code>monoid.has_pow</code>.</p>",
        "id": 191693533,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585100082
    },
    {
        "content": "<p>This is definitely good information I was lacking. Thank you both!</p>",
        "id": 191693653,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585100248
    },
    {
        "content": "<p>Hey all, I screwed up the basic install on fedora and lean in VSCODE says <code>file topology/basic not found in teh LEAN_PATH</code></p>",
        "id": 191702054,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585113089
    },
    {
        "content": "<p>Any help?</p>",
        "id": 191702055,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585113095
    },
    {
        "content": "<p>Which instructions did you follow? Are you editing a file in <code>mathlib</code>, or using it as a dependency?</p>",
        "id": 191702180,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585113294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I tried the <code>pip3 install mathlibtools</code> for installing the <code>leanproject</code>, but it didn't seem to install.<br>\nI can use <code>lean</code> and <code>leanpkg</code> just fine, they've been updated to 3.7 no problem.</p>",
        "id": 191702787,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585114450
    },
    {
        "content": "<p>Not sure if this is the problem, since you haven't answered Yury's second question, but note that you should not open a single Lean file in VS Code, you need to open a directory containing a Lean project. Check the instructions <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">here</a> if you haven't already.</p>",
        "id": 191706395,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585120149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243947\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191702787\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191702787\">said</a>:</p>\n<blockquote>\n<p>I tried the <code>pip3 install mathlibtools</code> for installing the <code>leanproject</code>, but it didn't seem to install.</p>\n</blockquote>\n<p>There is no way anyone could help you based on such vague information.</p>",
        "id": 191773348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585153595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243947\">@Miguel Raz Guzmán Macedo</span> As user or as root? Maybe prepend <code>sudo</code> or use <code>pip3 install --user</code>.</p>",
        "id": 191774442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585153949
    },
    {
        "content": "<p>Johan, you are trying to guess too much. Maybe install worked but leanproject is not in the PATH. We can't know without further information;</p>",
        "id": 191775988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585154582
    },
    {
        "content": "<p>Thanks for the replies !<br>\n<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I tried both already. I found <code>leanproject.py</code> in my <code>/usr/local/lib/python3.7/site-packages-mathlibtools/leanproject.py</code>, but the Installation instructions didn't say anything about adding that manually to the path, so lemme try that.</p>",
        "id": 191784998,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158192
    },
    {
        "content": "<p>You should not add that to your path</p>",
        "id": 191785294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585158298
    },
    {
        "content": "<p>We are still keen to see the error message.</p>",
        "id": 191785382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585158332
    },
    {
        "content": "<p>and your answer to Yury's second question.</p>",
        "id": 191785566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585158389
    },
    {
        "content": "<p>I am not trying to edit a file in mathlib, I am just trying to run the tutorial <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">here</a> (the <code>topological_space</code> check)</p>",
        "id": 191785919,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158526
    },
    {
        "content": "<p>Thank you all for your time and patience by the way, it means a lot to help on-ramping beginners <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 191785973,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158553
    },
    {
        "content": "<p>How did you create a project?</p>",
        "id": 191786007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585158571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> if I run <code>sudo pip3 install mathlibtools</code>, it says all of the requirements for all the packages are satisfied.</p>",
        "id": 191786056,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I had used <code>leanpkg</code> instead of <code>leanproject</code>, I am trying to use <code>leanproject</code> now.</p>",
        "id": 191786160,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158637
    },
    {
        "content": "<p>Can you run leanproject now? (without adding weird things to your path)</p>",
        "id": 191786216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585158667
    },
    {
        "content": "<p>Hey, now that we have control over lean, we should REALLY remove that misleading error message that says \"add this to your LEAN_PATH\"</p>",
        "id": 191786234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585158675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191786216\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191786216\">said</a>:</p>\n<blockquote>\n<p>Can you run leanproject now? (without adding weird things to your path)</p>\n</blockquote>\n<p>No, in a new terminal <code>leanproject</code> does  says<br>\n<code>fish: leanproject command not found</code></p>",
        "id": 191786409,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158746
    },
    {
        "content": "<p>I am guessing <code>leanproject</code> should have been installed when I did <code>sudo pip3 install mathlibtools</code>?</p>",
        "id": 191786662,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585158872
    },
    {
        "content": "<p>Yes, it should be in <code>/usr/local/bin/leanproject</code> (at least assuming a Debian-like OS)</p>",
        "id": 191786909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585158968
    },
    {
        "content": "<p>Sorry, there's no <code>leanproject</code> there :(</p>",
        "id": 191787213,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159089
    },
    {
        "content": "<p>If I try to do <code>pip3 install --user mathlibtools</code> I get this error at the end - </p>\n<div class=\"codehilite\"><pre><span></span>PermissionError: [Errno 13] Permission denied: &#39;/usr/local/lib64/python3.7/site-packages/wrapt-1.12.1-py3.7.egg-info&#39;\n</pre></div>",
        "id": 191787572,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159244
    },
    {
        "content": "<p>And it is entirely possible I may have bungled up my entire environment, so suggestions are welcome.</p>",
        "id": 191787607,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159264
    },
    {
        "content": "<p>It very much looks like your python environment is destroyed. What is your OS/distrib?</p>",
        "id": 191787679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585159295
    },
    {
        "content": "<p>fedora latest.</p>",
        "id": 191787702,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159305
    },
    {
        "content": "<p>I tried to <code>chmod -R au+x ..../site-packages/</code> and now I get <br>\n<code>Permission denied: '/usr/local/lib/python3.7/site-packages/tqdm-4.43.0.dist-info'</code></p>",
        "id": 191788321,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159565
    },
    {
        "content": "<p>You shouldn't randomly change permissions in /usr/local</p>",
        "id": 191788793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585159814
    },
    {
        "content": "<p>Oh.</p>",
        "id": 191788844,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159847
    },
    {
        "content": "<p>:S</p>",
        "id": 191788900,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585159879
    },
    {
        "content": "<p>Well now <code>pip3 install --user mathlibtools</code> works, and all requirements are already satisfied :D</p>",
        "id": 191789423,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585160134
    },
    {
        "content": "<p>Aha, it seems I needed to add <code>~/.local/bin</code> to path, uninstalling and installing seems to have suggested that and <code>leanproject new leanjl</code> now works. Thank you all for the help on that.</p>",
        "id": 191792766,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585161660
    },
    {
        "content": "<p>Well, <code>import topology.basic</code> still says <code>file 'init' not found in the LEAN_PATH</code></p>",
        "id": 191793471,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585161891
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>test.lean:1:0: error\nfile &#39;init&#39; not found in the LEAN_PATH\ntest.lean:1:0: error\ninvalid import: init\ncould not resolve import: init\ntest.lean:1:0: error\ninvalid import: topology.basic\n/home/mrg/deps/lean/mathlib/src/topology/basic.lean:48:25: error: unexpected token\n</pre></div>",
        "id": 191793553,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585161939
    },
    {
        "content": "<p>So now you need to answer the question about whether you opened the project directory with the Open Folder command, or just a random file.</p>",
        "id": 191794872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585162491
    },
    {
        "content": "<p>Ah, sorry.</p>",
        "id": 191794896,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585162501
    },
    {
        "content": "<p>You need to open the root directory of the project in VS code. You're nearly there</p>",
        "id": 191795053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585162565
    },
    {
        "content": "<p>I did <code>leanproject new leanjl</code> to start a new project, opened it with VSCode via <code>code leanjl</code>, and added a file in <code>src</code></p>",
        "id": 191795070,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585162571
    },
    {
        "content": "<p>just called <code>test.lean</code>.</p>",
        "id": 191795106,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585162595
    },
    {
        "content": "<p>and that's where I put the </p>\n<div class=\"codehilite\"><pre><span></span>import topology.basic\n\n#check topological_space\n</pre></div>",
        "id": 191795490,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585162781
    },
    {
        "content": "<p>I can't reproduce. I just did exactly that and I get <code>topological_space : Type u_1 → Type u_1</code></p>",
        "id": 191799001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585164372
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/reAhsdi37YhVW7F0oHQKDoek/leanjl.png\" title=\"leanjl.png\">leanjl.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/reAhsdi37YhVW7F0oHQKDoek/leanjl.png\" title=\"leanjl.png\"><img src=\"/user_uploads/3121/reAhsdi37YhVW7F0oHQKDoek/leanjl.png\"></a></div>",
        "id": 191799152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585164442
    },
    {
        "content": "<p>VS Code <code>View</code> -&gt; <code>Terminal</code> followed by  <code>lean --version</code> gives me <code>Lean (version 3.7.2, commit 44fb9f994d0f, Release)</code> . My leanpkg.path is</p>\n<div class=\"codehilite\"><pre><span></span>builtin_path\npath _target/deps/mathlib/src\npath ./src\n</pre></div>\n\n\n<p>and my leanpkg.toml is</p>\n<div class=\"codehilite\"><pre><span></span>[package]\nname = &quot;leanjl&quot;\nversion = &quot;0.1&quot;\nlean_version = &quot;leanprover-community/lean:3.7.2&quot;\npath = &quot;src&quot;\n\n[dependencies]\nmathlib = {git = &quot;https://github.com/leanprover-community/mathlib&quot;, rev = &quot;24b82c91583843597e8cfeb7928d446dec776456&quot;}\n</pre></div>",
        "id": 191799478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585164585
    },
    {
        "content": "<p>Thanks a lot for the follow - through <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> .<br>\nI get the exact same configs down to the hashes for lean 3.7.2 and mathlib and both files are identical.</p>",
        "id": 191800737,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585165148
    },
    {
        "content": "<p>cool</p>",
        "id": 191801324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165439
    },
    {
        "content": "<p>you beat the system</p>",
        "id": 191801385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165453
    },
    {
        "content": "<p>If I had a penny...</p>",
        "id": 191801536,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585165533
    },
    {
        "content": "<p>Are you absolutely sure that your VS Code looks exactly the same as my screenshot?</p>",
        "id": 191801940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165733
    },
    {
        "content": "<p>VSCode is maybe picking up a previous install of lean:<br>\nI get this error there as well:</p>\n<div class=\"codehilite\"><pre><span></span>invalid import: topology.basic\n/home/mrg/deps/lean/mathlib/src/topology/basic.lean:48:25: error: unexpected token\n</pre></div>",
        "id": 191801956,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585165739
    },
    {
        "content": "<p>That is definitely not the mathlib you are looking for</p>",
        "id": 191802041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165777
    },
    {
        "content": "<p>imma nuke it brb.</p>",
        "id": 191802137,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585165806
    },
    {
        "content": "<p>the mathlib you're supposed to be using is in <code>_target</code> in your project folder</p>",
        "id": 191802189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165838
    },
    {
        "content": "<p>If you had posted that error much earlier then life would have been a bit easier. Can you post all the details of every error which you are currently experiencing?</p>",
        "id": 191802265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165895
    },
    {
        "content": "<p>Exit VS Code and start it again and post all errors which occur anywhere.</p>",
        "id": 191802300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243947\">Miguel Raz Guzmán Macedo</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191793553\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191793553\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>test.lean:1:0: error\nfile &#39;init&#39; not found in the LEAN_PATH\ntest.lean:1:0: error\ninvalid import: init\ncould not resolve import: init\ntest.lean:1:0: error\ninvalid import: topology.basic\n/home/mrg/deps/lean/mathlib/src/topology/basic.lean:48:25: error: unexpected token\n</pre></div>\n\n\n</blockquote>\n<p>I did post it earler - I should have read more closely.</p>",
        "id": 191802377,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585165940
    },
    {
        "content": "<p>Where are you seeing this error?</p>",
        "id": 191802396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165958
    },
    {
        "content": "<p>Do you have a LEAN_PATH variable set? If so, nuke it.</p>",
        "id": 191802437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585165984
    },
    {
        "content": "<p><code>unset LEAN_PATH</code></p>",
        "id": 191802537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166039
    },
    {
        "content": "<p>then restart VS Code and see if the error has changed</p>",
        "id": 191802600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166050
    },
    {
        "content": "<p>(from the same terminal where you nuked LEAN_PATH)</p>",
        "id": 191802643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166074
    },
    {
        "content": "<p>DING DING DING</p>",
        "id": 191802712,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585166112
    },
    {
        "content": "<p>I had monkey-patched an earlier version of LEAN_PATH in my configs and it was polluting the env.</p>",
        "id": 191802751,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585166137
    },
    {
        "content": "<p>I now get a very happy <code>topological_space : Type u_1 → Type u_1</code></p>",
        "id": 191802790,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585166156
    },
    {
        "content": "<p>That's great to know. That one was a real toughie. LEAN_PATH was something which you had to worry about in 2018.</p>",
        "id": 191802853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166169
    },
    {
        "content": "<p>Huh, yeah, I think that was my first install attempt or so.</p>",
        "id": 191802908,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585166200
    },
    {
        "content": "<p>So it will be rare that users run into this problem but perhaps not impossible. Assuming you rebooted your computer in the past few years you might want to try and figure out what is setting LEAN_PATH.</p>",
        "id": 191802963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166226
    },
    {
        "content": "<p>(unless you were setting it yourself)</p>",
        "id": 191802998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166240
    },
    {
        "content": "<p>Thank you all a lot <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , that was very attentive of all of you.</p>",
        "id": 191803031,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585166255
    },
    {
        "content": "<p>The perfectoid project team -- installing mathlib on a computer near you.</p>",
        "id": 191803079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191802963\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191802963\">said</a>:</p>\n<blockquote>\n<p>So it will be rare that users run into this problem but perhaps not impossible. Assuming you rebooted your computer in the past few years you might want to try and figure out what is setting LEAN_PATH.</p>\n</blockquote>\n<p>Nope, all me and my footguns.</p>",
        "id": 191803087,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1585166281
    },
    {
        "content": "<p>Wherever did you read about LEAN_PATH? We should nuke the reference</p>",
        "id": 191803319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166367
    },
    {
        "content": "<p>By the way I think you just accidentally created a new stream. Usually we talk in threads in the streams we already have.</p>",
        "id": 191803491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585166421
    },
    {
        "content": "<blockquote>\n<p>Wherever did you read about LEAN_PATH? </p>\n</blockquote>\n<p>Whenever Lean is unable to find an imported file, it says \"error: file 'does/not/exist' not found in the LEAN_PATH\". People might read this and think they need to set LEAN_PATH, when that's rarely the right thing to do.</p>",
        "id": 191808931,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585169318
    },
    {
        "content": "<p>It wouldn't be hard to change the message. Any suggestions?</p>",
        "id": 191809021,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585169368
    },
    {
        "content": "<p>\"error: file 'does/not/exist' not found\" would already be strictly better, given what we just went through.</p>",
        "id": 191809712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585169744
    },
    {
        "content": "<p>The moment you mention <code>leanpkg.path</code> we'll have people changing that.</p>",
        "id": 191809805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585169777
    },
    {
        "content": "<p>which is also rarely the right thing to do.</p>",
        "id": 191809829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585169789
    },
    {
        "content": "<p>How about \"lean file does.not.exist not found. We searched: &lt;print result of lean --path&gt;\"</p>",
        "id": 191809846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585169803
    },
    {
        "content": "<p>Now that might even be a helpful message!</p>",
        "id": 191809894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585169829
    },
    {
        "content": "<p>Actually on looking at the output</p>\n<div class=\"codehilite\"><pre><span></span>{\n  &quot;is_user_leanpkg_path&quot;: true,\n  &quot;leanpkg_path_file&quot;: &quot;/home/buzzard/.lean/leanpkg.path&quot;,\n  &quot;path&quot;: [\n    &quot;/home/buzzard/.elan/toolchains/stable/bin/../library&quot;,\n    &quot;/home/buzzard/.elan/toolchains/stable/bin/../lib/lean/library&quot;\n  ]\n}\n</pre></div>\n\n\n<p>I am suddenly less sure.</p>",
        "id": 191809972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585169877
    },
    {
        "content": "<p>Well, <code>lean --path</code> is json formatted for no good reason</p>",
        "id": 191810063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585169899
    },
    {
        "content": "<p>we can print the same info in a more human readable way</p>",
        "id": 191810097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585169916
    },
    {
        "content": "<p>It might be sufficient to just focus on (1) whether a <code>leanpkg.path</code> file could be found, and (2) what the location and contents of the path file are</p>",
        "id": 191810295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585170005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>{\n  &quot;is_user_leanpkg_path&quot;: false,\n  &quot;leanpkg_path_file&quot;: &quot;/home/buzzard/lean-projects/lean-perfectoid-spaces/leanpkg.path&quot;,\n  &quot;path&quot;: [\n    &quot;/home/buzzard/.elan/toolchains/leanprover-community-lean-3.5.1/bin/../library&quot;,\n    &quot;/home/buzzard/.elan/toolchains/leanprover-community-lean-3.5.1/bin/../lib/lean/library&quot;,\n    &quot;/home/buzzard/lean-projects/lean-perfectoid-spaces/_target/deps/mathlib/src&quot;,\n    &quot;/home/buzzard/lean-projects/lean-perfectoid-spaces/./src&quot;\n  ]\n}\n</pre></div>\n\n\n<p>Here's a more accurate representation (I ran <code>lean --path</code> in a project). I still think it's a risk mentioning <code>leanpkg.path</code> but perhaps that vector of paths is something worth printing out?</p>",
        "id": 191810361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585170035
    },
    {
        "content": "<p>the idea here is to get the low level information about where lean is looking</p>",
        "id": 191810412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585170062
    },
    {
        "content": "<p>why is it not a user leanpkg path?</p>",
        "id": 191810445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585170079
    },
    {
        "content": "<p>we can also include more suggestive comments about checking their toml file and so on</p>",
        "id": 191810467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585170093
    },
    {
        "content": "<p>When I tried not in a project I got <code>is_user_leanpkg_path true</code> and in a project I get that it's false?</p>",
        "id": 191810524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585170117
    },
    {
        "content": "<p>I think <code>is_user_leanpkg_path</code> means it is using the global <code>leanpkg.path</code> file in your home directory</p>",
        "id": 191810603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585170142
    },
    {
        "content": "<p>One wrinkle is that Lean currently spits out a separate message for each file it can't find, so we may need to change the error handling somehow so that we don't repeat the same helpful message over and over.</p>",
        "id": 191819616,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585175850
    },
    {
        "content": "<p>How does one use imaginary numbers in lean?</p>",
        "id": 191831114,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1585185594
    },
    {
        "content": "<p>Complex numbers are defined in <code>data.complex</code>. What do you want to prove about them?</p>",
        "id": 191836123,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585192069
    },
    {
        "content": "<p>Can anybody tell me the problem with some code? for the purposes of practicing some things I have defined subgroups in the \"bundled\" way and am trying to define the intersection of a family of subgroups (really just the underlying set at this point) but I'm getting a lot of unexpected error messages. My code looks like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">Inf</span> <span class=\"p\">{</span><span class=\"n\">ι</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">}</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"p\">:</span> <span class=\"n\">ι</span> <span class=\"err\">→</span> <span class=\"n\">subgrp</span> <span class=\"n\">G</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"n\">subgrp</span> <span class=\"n\">G</span> <span class=\"p\">:</span><span class=\"o\">=</span>\n<span class=\"p\">{</span><span class=\"n\">carrier</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"err\">∩</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"p\">),</span>\n<span class=\"n\">mult_mem</span><span class=\"s1\">&#39; := sorry,</span>\n<span class=\"n\">inv_mem</span><span class=\"s1\">&#39; := sorry</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>and the error messages that come up are:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">grps</span><span class=\"o\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"mi\">221</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"s1\">&#39;i&#39;</span>\n<span class=\"n\">grps</span><span class=\"o\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"mi\">221</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">invalid</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"err\">`</span><span class=\"p\">)</span><span class=\"err\">`</span> <span class=\"n\">expected</span>\n<span class=\"n\">grps</span><span class=\"o\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"mi\">221</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">invalid</span> <span class=\"n\">structure</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:=&#39;</span> <span class=\"n\">expected</span>\n<span class=\"n\">grps</span><span class=\"o\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"mi\">221</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">invalid</span> <span class=\"n\">structure</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"s1\">&#39;}&#39;</span> <span class=\"n\">expected</span>\n<span class=\"n\">grps</span><span class=\"o\">.</span><span class=\"n\">lean</span><span class=\"p\">:</span><span class=\"mi\">221</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">:</span> <span class=\"n\">error</span>\n<span class=\"n\">command</span> <span class=\"n\">expected</span>\n</pre></div>\n\n\n<p>edit: also as some extra comments, I'm basing the omission of any kind of explicit <code>i \\in \\io</code> off of what I've seen in mathlib, and adding it doesn't seem to change anything. And I have the coercion set up so that Lean understands it is really taking the intersection of the underlying \"carrier\" sets, so I don't think the issue is there.</p>",
        "id": 191849802,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585210252
    },
    {
        "content": "<p>I think you have the wrong intersection symbol</p>",
        "id": 191850771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585210890
    },
    {
        "content": "<p>Try <code>\\bigcap</code></p>",
        "id": 191850793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585210913
    },
    {
        "content": "<p>That fixed it. So is <code>\\cap</code> for two things and <code>\\bigcap</code> for arbitrary intersections?</p>",
        "id": 191850981,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585211032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191836123\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/191836123\">said</a>:</p>\n<blockquote>\n<p>Complex numbers are defined in <code>data.complex</code>. What do you want to prove about them?</p>\n</blockquote>\n<p>I'm trying to prove Euler's formula using polar coordinates, so I wanted to use i.</p>",
        "id": 191881355,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1585228299
    },
    {
        "content": "<p>Have you found it?</p>",
        "id": 191881488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585228344
    },
    {
        "content": "<p>Is that theorem already in Lean? You should check the docs.</p>",
        "id": 191881502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585228350
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 191881531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585228362
    },
    {
        "content": "<p>I found it -- it's <a href=\"https://leanprover-community.github.io/mathlib_docs/data/complex/exponential.html#complex.exp_mul_I\" title=\"https://leanprover-community.github.io/mathlib_docs/data/complex/exponential.html#complex.exp_mul_I\">here</a></p>\n<div class=\"codehilite\"><pre><span></span> theorem complex.exp_mul_I (x : ℂ) :\n(x * complex.I).exp = x.cos + x.sin * complex.I\n</pre></div>\n\n\n<p>I can live with <code>complex.I</code> but do we really want <code>x.cos</code> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\cos(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> in the docs? Can we have maths mode docs?</p>",
        "id": 191882029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585228579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> how does that work?</p>",
        "id": 191882109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585228617
    },
    {
        "content": "<p>And where does the <a href=\"https://en.wikipedia.org/wiki/Euler%27s_formula\" title=\"https://en.wikipedia.org/wiki/Euler%27s_formula\">Wikipedia link to Euler's formula</a> fit into the docs?</p>",
        "id": 191882239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585228671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ?</p>",
        "id": 191882259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585228679
    },
    {
        "content": "<p>presumably on the relevant formula...?</p>",
        "id": 191882439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585228750
    },
    {
        "content": "<p>there is no rule saying you can't put doc strings on theorems, that's just systematic laziness on our part</p>",
        "id": 191882528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585228802
    },
    {
        "content": "<p>Can a docstring have a URL?</p>",
        "id": 191883026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229025
    },
    {
        "content": "<p>Sure, just put it in angle brackets. <code>&lt;www.kevin.com&gt;</code></p>",
        "id": 191883197,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585229093
    },
    {
        "content": "<p>I just want the docstring to  say \"&lt;link&gt;Euler's formula&lt;/link&gt;. The statement that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>θ</mi></mrow></msup><mo>=</mo><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>i</mi><mi>sin</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e^{i\\theta}=\\cos(\\theta)+i\\sin(\\theta)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.02778em;\">θ</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span>\"</p>",
        "id": 191883205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229097
    },
    {
        "content": "<p>Or <code>[Euler's formula](www.kevin.com)</code></p>",
        "id": 191883242,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585229118
    },
    {
        "content": "<p>Can we get the docs to display maths mode somehow?</p>",
        "id": 191883275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229133
    },
    {
        "content": "<p>I want <span class=\"user-mention\" data-user-id=\"263862\">@Stephanie Zhou</span> to solve her problem herself by just going to the docs and typing \"Euler's formula\" into the search box.</p>",
        "id": 191883322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229156
    },
    {
        "content": "<p>Note that there are about ten Euler's formulas.</p>",
        "id": 191883370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229164
    },
    {
        "content": "<p>They do, you asked for this a while back. <code>$...$</code> inline, <code>$$...$$</code> block, but there are potential bad interactions with markdown so don't put anything in math mode that's also valid markdown.</p>",
        "id": 191883437,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585229212
    },
    {
        "content": "<p>But then I think <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> complained that he didn't want to see <code>$</code> signs cluttering up his docstrings when one could just as easily write <code>eⁱᶿ = cos(θ) + i sin (θ)</code> in unicode.</p>",
        "id": 191883646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229313
    },
    {
        "content": "<p>and I just look at that rendering and think \"OMG it's Microsoft Word all over again\"</p>",
        "id": 191883697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585229340
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Does this theorem have a name? library_search didn't succeed</p>",
        "id": 192126784,
        "sender_full_name": "David Wärn",
        "timestamp": 1585407290
    },
    {
        "content": "<p>I guess you can prove it with <code>nat.find</code> but I don't know the name.</p>",
        "id": 192126850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585407388
    },
    {
        "content": "<p>there's probably a one-liner with some clever application of a well-ordering principle</p>",
        "id": 192126863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585407423
    },
    {
        "content": "<p>Yes, it follows from well-foundedness of <code>f a &lt; f b</code> and the fact that a nonempty well-founded type has a minimal element. But I also couldn't find this latter fact...</p>",
        "id": 192127064,
        "sender_full_name": "David Wärn",
        "timestamp": 1585407732
    },
    {
        "content": "<p>I guess that's \"find\" for general well-orders</p>",
        "id": 192127097,
        "sender_full_name": "David Wärn",
        "timestamp": 1585407811
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/order/basic.html#well_founded.has_min\" title=\"https://leanprover-community.github.io/mathlib_docs/order/basic.html#well_founded.has_min\">this</a> and nearby stuff in <code>order.basic</code> are useful?</p>",
        "id": 192127748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585408828
    },
    {
        "content": "<p>what on earth is this mode? I keep learning new stuff about github</p>",
        "id": 192128164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585409432
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192128317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585409677
    },
    {
        "content": "<p>why is there no such instance</p>",
        "id": 192128318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585409680
    },
    {
        "content": "<p>oh because it doesn't have a top element</p>",
        "id": 192128340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585409688
    },
    {
        "content": "<p>lattice is confusing</p>",
        "id": 192128342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585409691
    },
    {
        "content": "<p>It's probably a semilattice_sup_bot or something</p>",
        "id": 192128427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585409858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">measure_wf</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">has_min</span> <span class=\"n\">this</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ_nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This seems to work</p>",
        "id": 192128479,
        "sender_full_name": "David Wärn",
        "timestamp": 1585409901
    },
    {
        "content": "<p>ooh they're not going to like that non-terminal simp</p>",
        "id": 192128487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585409925
    },
    {
        "content": "<p>Can you use <code>simpa</code> somehow?</p>",
        "id": 192128494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585409935
    },
    {
        "content": "<p>Better now?</p>",
        "id": 192128558,
        "sender_full_name": "David Wärn",
        "timestamp": 1585410008
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">measure_wf</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">has_min</span> <span class=\"n\">this</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ_nonempty</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192128559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585410010
    },
    {
        "content": "<p>you beat me to it :-)</p>",
        "id": 192128566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585410019
    },
    {
        "content": "<p>Is there any difference in practice between the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">unique_factorization_domain</span> <span class=\"p\">(</span><span class=\"n\">α</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"p\">]</span> <span class=\"p\">:</span><span class=\"o\">=</span>\n<span class=\"p\">(</span><span class=\"n\">factors</span> <span class=\"p\">:</span> <span class=\"n\">α</span> <span class=\"err\">→</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">factors_prod</span> <span class=\"p\">:</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">prime_factors</span> <span class=\"p\">:</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">unique_factorization_domain</span> <span class=\"p\">(</span><span class=\"n\">α</span> <span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">extends</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span> <span class=\"p\">:</span><span class=\"o\">=</span>\n<span class=\"p\">(</span><span class=\"n\">factors</span> <span class=\"p\">:</span> <span class=\"n\">α</span> <span class=\"err\">→</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">factors_prod</span> <span class=\"p\">:</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">prime_factors</span> <span class=\"p\">:</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Just curious because I saw the former in a mathlib file whereas I'm used to seeing things like the latter</p>",
        "id": 192213428,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585547079
    },
    {
        "content": "<p>Yes; while they basically perform the same function, there are a number of issues that come into play regarding which is better, mostly to do with how type class inference works</p>",
        "id": 192214503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585548505
    },
    {
        "content": "<p>The advice I usually give is to use <code>extends</code> unless the number of type arguments goes up (as in <code>module</code> which has two type arguments)</p>",
        "id": 192214535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585548560
    },
    {
        "content": "<p>Perfect, I'll blindly stick to this then</p>",
        "id": 192214863,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585549027
    },
    {
        "content": "<p>what's this mean? or more importantly I guess, how do I \"increase the setting option\" as described?</p>\n<div class=\"codehilite\"><pre><span></span>maximum class-instance resolution depth has been reached (the limit can be increased by setting option &#39;class.instance_max_depth&#39;) (the class-instance resolution trace can be visualized by setting option &#39;trace.class_instances&#39;)\n</pre></div>",
        "id": 192339796,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585621471
    },
    {
        "content": "<p>e.g. <code>set_option class.instance_max_depth 100</code></p>",
        "id": 192339809,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585621501
    },
    {
        "content": "<p>Sweet. Should I be concerned or is this a normal adjustment to have to make?</p>",
        "id": 192339876,
        "sender_full_name": "Alex Mathers",
        "timestamp": 1585621594
    },
    {
        "content": "<p>It depends. If you share your code, we can make suggestions.</p>",
        "id": 192339904,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585621677
    },
    {
        "content": "<p>In my experience, the bug sometimes means \"you have asked the type class inference system to do something super-complicated, which can be fixed with the set_option suggestion above\" or \"you have accidentally asked the type class inference system to do something impossible, your code is wrong and this error is a super-unhelpful way of informing you of this\". Earlier you were getting errors about Lean not being able to find instances; this one might mean \"you asked me to find an instance which is hard or impossible to find and I'm just getting confused\".</p>",
        "id": 192352254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585639098
    },
    {
        "content": "<p>Yes, this is probably the second least predictive error message, after <code>(deterministic) timeout</code></p>",
        "id": 192401647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585667073
    },
    {
        "content": "<p>I wanted to add some <code>show</code>s to my code, and I am getting an error. Why is the <code>show</code> tactic failing in the following example? I thought it should succeed when I just copy the goal.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192499871,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1585731656
    },
    {
        "content": "<p>It doesn't know what type of lists you want</p>",
        "id": 192499962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585731718
    },
    {
        "content": "<p>Try <code>show list.sum (list.nil : list int) ≥ 0</code></p>",
        "id": 192500017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585731735
    },
    {
        "content": "<p>In fact, it will see the <code>0</code> at the RHS, and by default assume that this is <code>(0 : nat)</code></p>",
        "id": 192500047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585731763
    },
    {
        "content": "<p>Unless you already convinced it that you were talking about a different type.</p>",
        "id": 192500067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585731778
    },
    {
        "content": "<p>Ah, the integers, thanks. <code>show [].sum ≥ (0:ℤ)</code> is working.</p>",
        "id": 192503340,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1585733891
    },
    {
        "content": "<p>Is there a tactic that would solve goals like this? I tried <code>hint</code>, but that suggested <code>ring</code>, which didn't simplify things much (or at all).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 192960665,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586094936
    },
    {
        "content": "<p>try <code>ring_exp</code></p>",
        "id": 192960823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586095141
    },
    {
        "content": "<p>Oh it's bloody nat subtraction again</p>",
        "id": 192960900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586095232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n\n<span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"o\">},</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ (t ^ 2 + 1) * (t ^ 2 - 1) = (t ^ 2) ^ 2 - 1</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 192960914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586095258
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"o\">},</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> the problem with a tactic is that you need to somehow insert the assertion that the subtraction doesn't give a junk answer. <code>omega</code> is good at this with very simple goals but this might be hard in general.</p>",
        "id": 192961080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586095488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_mul</span><span class=\"o\">},</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Note the coercion in the statement: it's now a theorem about integers.</p>",
        "id": 192961153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586095581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/192960900\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/192960900\">said</a>:</p>\n<blockquote>\n<p>Oh it's bloody nat subtraction again</p>\n</blockquote>\n<p>I know... Seems like everything I formalise I come across nat subtraction... Anyways, at least for this part (yes it's another random STEP question that I've come across), I think it's the same if I do it in the <code>nat</code>s versus the <code>int</code>s, so I guess I can just change it to <code>int</code>. Although I might need <code>data.nat.prime</code> later on, so there may be issues if I switch.</p>\n<p>I guess <code>2 ^ 2 ^ succ n &gt; 1</code> is something that is obvious to me, but not obvious to lean.</p>",
        "id": 192961772,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586096563
    },
    {
        "content": "<p>It's not hard to prove, maybe even the monotonicity tactic will prove 2^2^(succ n)&gt;2^2^0 or something</p>",
        "id": 192963902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586099660
    },
    {
        "content": "<p>At least in the \"Natural number game\" the \"ring\" tactic doesn't seem to be able to prove that</p>\n<div class=\"codehilite\"><pre><span></span>succ (a + b) = succ a + b\n</pre></div>\n\n\n<p>for <code>a b : mynat</code>.</p>\n<p>Why is this?</p>",
        "id": 193034240,
        "sender_full_name": "Asger Hautop Drewsen",
        "timestamp": 1586176507
    },
    {
        "content": "<p><code>ring</code> will only work once it knows that the structure is a semiring. Once it knows that, it will only work on terms which only involve functions which rings have, and <code>succ</code> isn't one of these. If Lean already knows the natural numbers are a semiring then you could rewrite <code>succ_eq_add_one</code> and it should work.</p>",
        "id": 193034461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586176620
    },
    {
        "content": "<p>proposal to add <code>succ_eq_add_one</code> into <code>ring</code></p>",
        "id": 193034498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586176641
    },
    {
        "content": "<p>what about <code>mynat.succ_eq_add_one</code>?</p>",
        "id": 193034544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586176667
    },
    {
        "content": "<p>because I suspect that's the one we're talking about here.</p>",
        "id": 193034602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586176682
    },
    {
        "content": "<p>fair enough</p>",
        "id": 193034641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586176704
    },
    {
        "content": "<p>Ah, that makes sense, this works:</p>\n<div class=\"codehilite\"><pre><span></span>repeat {rw succ_eq_add_one}, ring,\n</pre></div>",
        "id": 193034677,
        "sender_full_name": "Asger Hautop Drewsen",
        "timestamp": 1586176731
    },
    {
        "content": "<p>Perhaps related: the <code>omega</code> tactic (a tactic specific to the natural numbers / integers, based on a fragment of Peano arithmetic called Presburger arithmetic) should be able to solve this. You probably won't be able to use it in the NNG, but in an actual Lean development, you can require it with <code>import tactic</code> (given that you have installed mathlib)</p>",
        "id": 193034746,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586176780
    },
    {
        "content": "<p>I don't know if it's possible to make <code>omega</code> work on <code>mynat</code>. One should be able to give <code>omega</code> a term of type <code>X \\equiv+* nat</code> and then it would work on X by magic :-)</p>",
        "id": 193034932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586176897
    },
    {
        "content": "<p>How would I write out sin and cos as an infinite series? I can't seem to find infinite series in the docs</p>",
        "id": 193071626,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1586192847
    },
    {
        "content": "<p>Did you find the definition of <code>sin</code>?</p>",
        "id": 193071732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586192890
    },
    {
        "content": "<p>Ah, this?<br>\ndef sin (z : ℂ) : ℂ := ((exp (-z * I) - exp (z * I)) * I) / 2</p>",
        "id": 193072116,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1586193088
    },
    {
        "content": "<p>Right. And can you find the definition of <code>exp</code>?</p>",
        "id": 193072154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586193105
    },
    {
        "content": "<p>if you have mathlib open at <code>sin</code> then you might be able to right click on <code>exp</code> and jump to it.</p>",
        "id": 193072228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586193127
    },
    {
        "content": "<p>although having done this myself now, I see that you don't have to jump very far.</p>",
        "id": 193072564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586193265
    },
    {
        "content": "<p>Okay, would I define sin and cos in this way at the beginning to get lean to rewrite this way?</p>",
        "id": 193077012,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1586195320
    },
    {
        "content": "<p>I don't really understand the question. Mathlib has defined them that way, so if you want to use mathlib's sin and cos then you'll have to use their definitions. But <code>exp</code> is defined as a power series so you could mimic that if you wanted to define <code>sin</code> as a power series.</p>",
        "id": 193077293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195438
    },
    {
        "content": "<p>I'm trying to understand the difference between the theorem I wrote and the one that's in the Lean book to prove that, assuming <code>p</code>, one can prove <code>p or q</code> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span>      <span class=\"c1\">--mine</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">t2</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span>      <span class=\"c1\">--in the book</span>\n</pre></div>\n\n\n<p>I thought that a definition's (therefore theorem's) type should indicate the  theorem to be proved, which should be \"p -&gt; p v q\" not just \"p v q\" as in t2.</p>",
        "id": 193127997,
        "sender_full_name": "Brandon B",
        "timestamp": 1586229822
    },
    {
        "content": "<p>In <code>t2</code>, <code>hp : p</code> is already introduced as a hypothesis in the theorem statement so there's no need to add another <code>p →</code> in front of <code>p ∨ q</code></p>",
        "id": 193128273,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586230176
    },
    {
        "content": "<p>I see, thanks</p>",
        "id": 193128708,
        "sender_full_name": "Brandon B",
        "timestamp": 1586230686
    },
    {
        "content": "<p>Is there some way to <code>check</code> expressions inside a tactics block? I'd like to write something like</p>\n<div class=\"codehilite\"><pre><span></span>example (a b : Prop) : a ∨ b → b ∨ a :=\nbegin\n  intro H,\n  check H,\n  ...\n</pre></div>\n\n\n<p>but this is not allowed (<code>invalid tactic expression</code>).</p>",
        "id": 193195089,
        "sender_full_name": "Lynn",
        "timestamp": 1586269516
    },
    {
        "content": "<p>What would you like to happen?</p>",
        "id": 193195303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586269601
    },
    {
        "content": "<p>If you use an editor like VScode, you can open the \"Goal window\" and it will show you the type of <code>H</code></p>",
        "id": 193195369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586269625
    },
    {
        "content": "<p>In this case Johan is right, but I think we still need a tactic doing that. This was discussed recently, did we do anything in the end?</p>",
        "id": 193195575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586269703
    },
    {
        "content": "<p>I would like to see <code>H : a ∨ b</code> printed to the console. It would be useful to insert <code>check</code> lines into some of the proofs in <a href=\"https://leanprover.github.io/tutorial\" title=\"https://leanprover.github.io/tutorial\">https://leanprover.github.io/tutorial</a> so I can see what they're doing</p>",
        "id": 193195678,
        "sender_full_name": "Lynn",
        "timestamp": 1586269748
    },
    {
        "content": "<p>The intended usage is that you open the tutorial in VScode</p>",
        "id": 193195750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586269775
    },
    {
        "content": "<p>Arg, this is a very old tutorial!</p>",
        "id": 193195917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586269837
    },
    {
        "content": "<p>This is not even Lean 3.</p>",
        "id": 193195957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586269853
    },
    {
        "content": "<p>We really need to get rid of this trap.</p>",
        "id": 193195996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586269866
    },
    {
        "content": "<p>is it still linked somewhere or did you find it via google?</p>",
        "id": 193196020,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586269877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247532\">@Lynn</span> Thanks for finding this! Please tell us how you found it, so that we can help the internet to unfind it.</p>",
        "id": 193196106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586269913
    },
    {
        "content": "<p>I suppose a clunky alternative is commenting out some suffix of the proof, to inspect the hypotheses and subgoals at that point.<br>\nI found it via Google (I probably looked for <code>lean tutorial</code>)</p>",
        "id": 193196235,
        "sender_full_name": "Lynn",
        "timestamp": 1586269952
    },
    {
        "content": "<p>If you have Lean installed using VS Code then all this information is available for you in a window.</p>",
        "id": 193196316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586269982
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/O2xJPmnqejNWwPfifH2VQqXY/code.png\" title=\"code.png\">code.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O2xJPmnqejNWwPfifH2VQqXY/code.png\" title=\"code.png\"><img src=\"/user_uploads/3121/O2xJPmnqejNWwPfifH2VQqXY/code.png\"></a></div>",
        "id": 193196449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270042
    },
    {
        "content": "<p>The Lean 2 tutorial is the <a href=\"https://github.com/leanprover-community/mathlib/issues/1\" title=\"https://github.com/leanprover-community/mathlib/issues/1\">#1</a> hit on duckduckgo if you search for lean tutorial</p>",
        "id": 193196619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193196619\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193196619\">said</a>:</p>\n<blockquote>\n<p>The Lean 2 tutorial is the <a href=\"https://github.com/leanprover-community/mathlib/issues/1\" title=\"https://github.com/leanprover-community/mathlib/issues/1\">#1</a> hit on duckduckgo if you search for lean tutorial</p>\n</blockquote>\n<p>oh no</p>",
        "id": 193196665,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586270118
    },
    {
        "content": "<p>Yeah I just tried a number of variations on googling \"lean tutorial\" or just \"lean prover\" that page is listed very highly. Can we (<span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ) move that git repo to \"lean-2-tutorial\" perhaps, or should we have something to replace it first?</p>",
        "id": 193196710,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586270134
    },
    {
        "content": "<p>The Lean 2 links directly to a Lean 3 tutorial and there's also a warning</p>",
        "id": 193196824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270170
    },
    {
        "content": "<p>To be fair, the tutorial says about as explicitly as it can that it's out of date and links to the new one.</p>",
        "id": 193196835,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586270175
    },
    {
        "content": "<p>I will try VS Code! I was enjoying the in-browser Lean environment, and the way it lets me play around without needing to install anything yet. Though I see <a href=\"https://leanprover.github.io/live\" title=\"https://leanprover.github.io/live\">https://leanprover.github.io/live</a> offers the same functionality</p>",
        "id": 193196866,
        "sender_full_name": "Lynn",
        "timestamp": 1586270189
    },
    {
        "content": "<p>That's the old in-browser lean environment :-)</p>",
        "id": 193196921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270213
    },
    {
        "content": "<p>The Lean 3 tutorial it links too is also badly outdated, right?</p>",
        "id": 193196950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586270230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193196835\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193196835\">said</a>:</p>\n<blockquote>\n<p>To be fair, the tutorial says about as explicitly as it can that it's out of date and links to the new one.</p>\n</blockquote>\n<p>Sure, but its still weird that the old tutorial is coming up so highly on search engines.</p>",
        "id": 193196971,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586270239
    },
    {
        "content": "<p>leanprover is dead (actually, it's just resting), long live <a href=\"https://leanprover-community.github.io/\" title=\"https://leanprover-community.github.io/\">leanprover-community</a></p>",
        "id": 193196972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270240
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/\" title=\"https://leanprover-community.github.io/lean-web-editor/\">This</a> version of the web editor has an up to date Lean and an up to date mathlib.</p>",
        "id": 193197040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270269
    },
    {
        "content": "<p>My hasty reading of the warning:</p>\n<blockquote>\n<p>Please note that this is the tutorial for Lean 2, which allows the use of homotopy type theory (HoTT). It is not the tutorial for the current version of Lean.</p>\n</blockquote>\n<p>made me think the “current version of Lean” was _not yet_ Lean 2, and that this was an experimental tutorial for a new “Lean 2”.  (It doesn't mention that the current version is Lean 3, rather than Lean 1.)</p>",
        "id": 193197056,
        "sender_full_name": "Lynn",
        "timestamp": 1586270279
    },
    {
        "content": "<p>It would be really nice if <code>leanprover.github.io</code> would just show a message</p>\n<blockquote>\n<p>Hi! We're really busy developing Lean 4.</p>\n<p>In the mean time, please take a look at <a href=\"https://leanprover-community.github.io\" title=\"https://leanprover-community.github.io\">https://leanprover-community.github.io</a>.</p>\n</blockquote>",
        "id": 193197101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586270284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247532\">@Lynn</span> Thanks! These bug reports are helpful! (We tend to gloss over them as more experienced users...)</p>",
        "id": 193197234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586270342
    },
    {
        "content": "<p>I don't see any reason why a newcomer would know whether the current version of Lean is Lean 2 or Lean 4 or whatever. Thanks for this observation Lynn.</p>",
        "id": 193197236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586270343
    },
    {
        "content": "<p>Specifying “which allows the use of homotopy type theory (HoTT)” sounds like the “current version of Lean” doesn't allow that, so Lean 2 must be surely more featureful, so the “current version” must be &lt;2  <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193197284,
        "sender_full_name": "Lynn",
        "timestamp": 1586270365
    },
    {
        "content": "<p>Makes sense (when you don't know the story).</p>",
        "id": 193197329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586270385
    },
    {
        "content": "<p>i think the recommended ways to get into the current version of lean (lean 3) are either \"theorem proving in lean\" (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/index.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/index.html\">https://leanprover.github.io/theorem_proving_in_lean/index.html</a>) or kevin's natural number game (<a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a>).<br>\ntheorem proving in lean (TPIL) explains things from first principles and (optionally) uses the in-browser lean environment. if you've got experience with functional programming, cs in general or other theorem provers, this might be up your alley, either as a reference or a tutorial, depending on how much you already know.<br>\nthe natural number game (NNG) jumps right into proving things with tactics for natural numbers. people coming from mathematics seem to love it.</p>\n<p>lastly, there's the new hitchhiker's guide to logical verification (<a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\" title=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf</a>), which i haven't read yet, but i'm sure it's great.</p>",
        "id": 193197899,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586270625
    },
    {
        "content": "<p>I played through the “natural number game” a few months ago and really liked it <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> I should probably go through it again to jog my memory.</p>",
        "id": 193198326,
        "sender_full_name": "Lynn",
        "timestamp": 1586270770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193197329\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193197329\">said</a>:</p>\n<blockquote>\n<p>Makes sense (when you don't know the story).</p>\n</blockquote>\n<p>I'm interested in the story for removing HoTT, it was not useful enough? Or too difficult to keep it in the Lean codebase?</p>",
        "id": 193211188,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586275712
    },
    {
        "content": "<p>Leo just decided he wasn't going to support it. My guess is that he wasn't hearing any particular need to support it from the parts of the CS community which he listens to.</p>",
        "id": 193211472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586275825
    },
    {
        "content": "<p>What I've learnt from the HoTT chat is there are still a lot of foundational questions which one has to answer after deciding to have some kind of univalence principle, and I'm not sure you can please all of the people all of the time.</p>",
        "id": 193211640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586275882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193211640\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193211640\">said</a>:</p>\n<blockquote>\n<p>What I've learnt from the HoTT chat is there are still a lot of foundational questions which one has to answer after deciding to have some kind of univalence principle, and I'm not sure you can please all of the people all of the time.</p>\n</blockquote>\n<p>Makes sense</p>",
        "id": 193211733,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586275919
    },
    {
        "content": "<p>I'm a machine learning person who's been hearing a lot about theorem provers recently (like many other people just started trying out the natural numbers game). I think it might be neat to see if it's possible to use Lean to prove some simple theorems that might be of interest in an ML setting. For example, Markov's inequality for random variables, or bounds on the range of a Lipschitz function. These seem very simple and like they might be fun to prove -- would it be possible? Or is Lean still mainly meant to be used for much more foundational stuff than that?</p>",
        "id": 193218608,
        "sender_full_name": "Michael J. Curry",
        "timestamp": 1586279122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266106\">Michael J. Curry</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193218608\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193218608\">said</a>:</p>\n<blockquote>\n<p>I'm a machine learning person who's been hearing a lot about theorem provers recently (like many other people just started trying out the natural numbers game). I think it might be neat to see if it's possible to use Lean to prove some simple theorems that might be of interest in an ML setting. For example, Markov's inequality for random variables, or bounds on the range of a Lipschitz function. These seem very simple and like they might be fun to prove -- would it be possible? Or is Lean still mainly meant to be used for much more foundational stuff than that?</p>\n</blockquote>\n<p>It's definitely possible to prove both of what you mentioned.<br>\nIt is just that some stuff requires integrals / derivation which is currently being built in <code>mathlib</code></p>",
        "id": 193218748,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586279179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> will tell you about <a href=\"https://arxiv.org/abs/1911.00385\" title=\"https://arxiv.org/abs/1911.00385\">https://arxiv.org/abs/1911.00385</a></p>",
        "id": 193218944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586279266
    },
    {
        "content": "<p>There was also <span class=\"user-mention\" data-user-id=\"230999\">@Daniel Selsam</span> et al.'s <a href=\"http://proceedings.mlr.press/v70/selsam17a/selsam17a.pdf\" title=\"http://proceedings.mlr.press/v70/selsam17a/selsam17a.pdf\">http://proceedings.mlr.press/v70/selsam17a/selsam17a.pdf</a></p>",
        "id": 193219186,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586279383
    },
    {
        "content": "<p>it is possible, if you have the correct background. For me, as an engineer, the difficulty is in getting to grips with the formal definitions of everything; measure-theoretic probability is not taught at all in the standard curriculum so you kind of have to teach yourself all the background material before can even state results that you take for granted</p>",
        "id": 193219777,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586279681
    },
    {
        "content": "<p>thanks, those are both fantastic things to start looking at! the second paper in particular looks like it has some way of defining integrals and expectation operators that can be formally manipulated without actually having to worry about defining integration in a rigorous way.</p>",
        "id": 193219833,
        "sender_full_name": "Michael J. Curry",
        "timestamp": 1586279710
    },
    {
        "content": "<p>Markov's inequality and Chebyshev's Inequality were low hanging fruit since mathlib's measure theory library is very mature. So I proved those without too much hassle in a different repository.</p>",
        "id": 193244315,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1586291892
    },
    {
        "content": "<p>One version of Chebyshev's inequality is now in <code>mathlib</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/integration.html#measure_theory.mul_volume_ge_le_lintegral\" title=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/integration.html#measure_theory.mul_volume_ge_le_lintegral\">docs</a></p>",
        "id": 193244572,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586292045
    },
    {
        "content": "<p>I factored out its proof from the next lemma while refactoring Borel spaces</p>",
        "id": 193244614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586292074
    },
    {
        "content": "<p>But this features the weird <code> ∫⁻</code></p>",
        "id": 193245061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586292319
    },
    {
        "content": "<p>AFAIK, for a non-negative function Bochner integral equals <code>lintegral</code>.</p>",
        "id": 193245614,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586292451
    },
    {
        "content": "<p>And formalizing Chebyshev's inequality was not my goal.</p>",
        "id": 193245925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586292518
    },
    {
        "content": "<p>I'm not complaining, I'm pointing out it's still hard to recognize.</p>",
        "id": 193246022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586292556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116448\">Koundinya Vajjha</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193244315\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193244315\">said</a>:</p>\n<blockquote>\n<p>Markov's inequality and Chebyshev's Inequality were low hanging fruit since mathlib's measure theory library is very mature. So I proved those without too much hassle in a different repository.</p>\n</blockquote>\n<p>Please make a PR!</p>",
        "id": 193260974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586302224
    },
    {
        "content": "<p>Why can we create a pi type using the pi symbol \\Pi but \\Sigma doesn't work and instead we have to use <a href=\"http://sigma.mk\" title=\"http://sigma.mk\">sigma.mk</a>  or is there another command ?</p>",
        "id": 193262004,
        "sender_full_name": "Brandon B",
        "timestamp": 1586303110
    },
    {
        "content": "<p>When you <em>declare</em> a pi type, you use <code>Π i, α i</code>. When you <em>define a variable</em> of a pi type, you use <code>λ i, f i</code>.</p>",
        "id": 193262216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586303298
    },
    {
        "content": "<p>When you <em>declare</em> a sigma type, you can use <code>Σ i, α i</code>. When you <em>define a variable</em> of a sigma type, you use either <code>sigma.mk</code> or <code>⟨i, y⟩</code>.</p>",
        "id": 193262266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586303347
    },
    {
        "content": "<p>ahh; thank you</p>",
        "id": 193265703,
        "sender_full_name": "Brandon B",
        "timestamp": 1586306682
    },
    {
        "content": "<p>How can you rewrite the RHS of an equation? when I write <code>rw add_comm at h</code> for my equality h it always only rewrites the LHS. Thanks</p>",
        "id": 193310651,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586348585
    },
    {
        "content": "<p>It rewrites the first occurrence of a+b it runs into</p>",
        "id": 193310972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586348780
    },
    {
        "content": "<p>Try <code>rw add_comm X Y</code> if you want to change X+Y into Y+X</p>",
        "id": 193311040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586348822
    },
    {
        "content": "<p>Or just <code>rw add_comm X</code> if you want to change the first X+something</p>",
        "id": 193311084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586348845
    },
    {
        "content": "<p>That worked, thanks!</p>",
        "id": 193311507,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586349110
    },
    {
        "content": "<p>Also try <code>conv</code>.</p>",
        "id": 193315813,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586350970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283896\">@Niclas Kupper</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 193319563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586352606
    },
    {
        "content": "<p>Complete noob question. Working on the natural numbers game and I want to use <code>rw add_comm</code> on <code>t + t * b</code>  in <code>t * n + t * b + t = t * n + t + t * b</code> but I don't know how to apply it to <code>t * b</code> rather than just a naked variable</p>",
        "id": 193323042,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586354139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283846\">Matt Watson</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193323042\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193323042\">said</a>:</p>\n<blockquote>\n<p>Complete noob question. Working on the natural numbers game and I want to use <code>rw add_comm</code> on <code>t + t * b</code>  in <code>t * n + t * b + t = t * n + t + t * b</code> but I don't know how to apply it to <code>t * b</code> rather than just a naked variable</p>\n</blockquote>\n<p>Try enclosing t<em>b in parentheses like this: rw add_comm t  (t</em>b),</p>",
        "id": 193323330,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586354248
    },
    {
        "content": "<p>I'm currently also doing the natural number game and I am stuck on level 9 in advanced proposition world. Is it possible to solve the problem without using either of cc, tauto and exfalso? Exfalso is introduced in the next problem, hence my question.</p>",
        "id": 193323669,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586354379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282867\">Victor Ahlquist</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193323330\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193323330\">said</a>:</p>\n<div class=\"codehilite\"><pre><span></span>Try enclosing t*b in parentheses like this: rw add_comm t  (t*b),\n</pre></div>\n\n\n<p>It didn't work for t and  <code>t*b</code>, I think my problem was making assumptions about associativity. But knowing for sure that parenthesis worked helped solve it. Thankyou</p>",
        "id": 193324245,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586354626
    },
    {
        "content": "<p>Yes <code>a+b+c</code> in Lean means <code>(a+b)+c</code></p>",
        "id": 193324519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354737
    },
    {
        "content": "<p>you need <code>add_right_comm</code> here</p>",
        "id": 193324523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354740
    },
    {
        "content": "<p>I'm not sure we prove that at all</p>",
        "id": 193324637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354779
    },
    {
        "content": "<p>I can't remember, I think I just went for the stuff that made <code>simp</code> work</p>",
        "id": 193324682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354805
    },
    {
        "content": "<p><code>simp</code> only needs <code>add_left_comm</code> because it likes right associating addition</p>",
        "id": 193324773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354840
    },
    {
        "content": "<p>Advanced prop world level 9 I think someone else pointed out that they wanted to use exfalso. I'll take a look at this today</p>",
        "id": 193324810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354859
    },
    {
        "content": "<p>which is too bad since the pretty printer prefers left associated</p>",
        "id": 193324829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354865
    },
    {
        "content": "<p>You can look at my solutions in the repo</p>",
        "id": 193324841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354872
    },
    {
        "content": "<p>you could make <code>+</code> right associative...</p>",
        "id": 193324924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193324810\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193324810\">said</a>:</p>\n<blockquote>\n<p>Advanced prop world level 9 I think someone else pointed out that they wanted to use exfalso. I'll take a look at this today</p>\n</blockquote>\n<p>Very nice, thanks.</p>",
        "id": 193325080,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586354968
    },
    {
        "content": "<p>Does the page use local storage, or have I lost my entire game if I crashed the tab?</p>",
        "id": 193326519,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586355579
    },
    {
        "content": "<p>you can just go to any level at any time</p>",
        "id": 193326560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586355595
    },
    {
        "content": "<p>all you lose is the colouring in dots</p>",
        "id": 193326653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586355613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You should ask for some help with improving the machinery of the game on that reddit page</p>",
        "id": 193326709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586355641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326560\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326560\">said</a>:</p>\n<blockquote>\n<p>you can just go to any level at any time</p>\n</blockquote>\n<p>the levels are a lie</p>",
        "id": 193326741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586355659
    },
    {
        "content": "<p>Probably lots of people over there that would love to add a \"use local storage\" feature</p>",
        "id": 193326742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586355659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326741\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326741\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326560\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326560\">said</a>:</p>\n<blockquote>\n<p>you can just go to any level at any time</p>\n</blockquote>\n<p>the levels are a lie</p>\n</blockquote>\n<p>There are no levels... you only imagine them</p>",
        "id": 193326791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586355678
    },
    {
        "content": "<p>I think the progress is saved using cookies rather than local storage.</p>",
        "id": 193326818,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586355690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326742\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193326742\">said</a>:</p>\n<blockquote>\n<p>Probably lots of people over there that would love to add a \"use local storage\" feature</p>\n</blockquote>\n<p>like this game i enjoyed from many years ago: <a href=\"https://alf.nu/RegexGolf\" title=\"https://alf.nu/RegexGolf\">https://alf.nu/RegexGolf</a></p>",
        "id": 193326855,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586355704
    },
    {
        "content": "<p>wow i'm irrationally annoyed at the levels beyond classic</p>",
        "id": 193327116,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586355820
    },
    {
        "content": "<p>why?</p>",
        "id": 193327443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586355952
    },
    {
        "content": "<p>i'm remembering a specific set of exam questions in my compilers class that \"pure\" regex (dfas) cannot be used to count and quantify, and getting them to do it is a hack.  of course regular people use regex for this all the time, so maybe i was just insufficiently traumatized by my instructor</p>",
        "id": 193328069,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586356183
    },
    {
        "content": "<p>regexp with backtracking can also lead to exponential blowup iirc</p>",
        "id": 193328607,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586356420
    },
    {
        "content": "<p>so i think there are good reasons to restrict yourself to a regular subset when using regexes</p>",
        "id": 193328746,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586356479
    },
    {
        "content": "<p>ah, this site was down for a while, but this is the post that i read years ago: <a href=\"https://swtch.com/~rsc/regexp/regexp1.html\" title=\"https://swtch.com/~rsc/regexp/regexp1.html\">https://swtch.com/~rsc/regexp/regexp1.html</a></p>",
        "id": 193329657,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586356902
    },
    {
        "content": "<p>Not only that, but having to support a non-regular language makes a language slower when dealing with expressions that are regular.</p>",
        "id": 193330371,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586357233
    },
    {
        "content": "<p>That is an incredibly unfortunate story. :-(</p>",
        "id": 193332466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586358085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193328069\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193328069\">said</a>:</p>\n<blockquote>\n<p>of course regular people use regex for this all the time,</p>\n</blockquote>\n<p>Sure, <em>regular</em> people do... but what about <em>expressive</em> people?</p>",
        "id": 193333865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586358644
    },
    {
        "content": "<p>I'm currently on the first advanced multiplication world level in the natural number game and I used <code>cases</code> and my equation got a term <code>zero</code> instead of <code>0</code>, which I can not manipulate with the usual proofs. What can I do now?</p>",
        "id": 193334431,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586358878
    },
    {
        "content": "<p>It might be because I tried to define a lemma in the proof</p>",
        "id": 193334473,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586358894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Or push down automatons?</p>",
        "id": 193334581,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586358947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283896\">@Niclas Kupper</span> Trying to define a lemma in a proof seems like it cannot work...</p>",
        "id": 193334694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586358991
    },
    {
        "content": "<p>Can you copy paste all the code the entire code block (starting with <code>lemma ... until ... end</code></p>",
        "id": 193334754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586359026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>```lean\nput code here\n```\n</pre></div>",
        "id": 193334791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586359041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>intro p1,\nintro p2,\nintro k,\ninduction b with d hd,\nrw mul_zero a at k,\nexact p2 k,\nlemma pos_mul (a b : mynat) : a * b = 0 → a = 0 ∨ b = 0 :=\nbegin\n  intro k,\n  cases a with d,\n  ```\n</pre></div>",
        "id": 193334826,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586359064
    },
    {
        "content": "<p>This is where the problem appeared, I assume that normally I would put a lemma like that in its own file?</p>",
        "id": 193334969,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586359126
    },
    {
        "content": "<p>use the <code>have</code> keyword / tactic</p>",
        "id": 193336643,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586359855
    },
    {
        "content": "<p>if you want to do it inside a proof; normally such a fundamental fact would be broken out separately though, as you say</p>",
        "id": 193336703,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586359891
    },
    {
        "content": "<p>How do I want to use <code>have</code>?</p>",
        "id": 193336876,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586359958
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#introducing-auxiliary-subgoals\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#introducing-auxiliary-subgoals\">https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#introducing-auxiliary-subgoals</a></p>",
        "id": 193337049,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586360034
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 193337181,
        "sender_full_name": "Niclas Kupper",
        "timestamp": 1586360077
    },
    {
        "content": "<p>Will using cases with a mynat always separate into cases zero and successor?</p>",
        "id": 193338672,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586360642
    },
    {
        "content": "<p>Yes</p>",
        "id": 193338811,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586360695
    },
    {
        "content": "<p>Thanks</p>",
        "id": 193338886,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586360726
    },
    {
        "content": "<p>Using cases with any inductive type separates into the constructors for that type. For nat this is zero / succ, for <code>P \\or Q</code> this is a proof of P / a proof of Q etc.</p>",
        "id": 193340355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586361346
    },
    {
        "content": "<p>Thanks, googling some of those terms brought up a nice page. I'll be sure to read the entire \"Theorem proving in Lean\" once I'm done with the game.</p>",
        "id": 193340818,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586361561
    },
    {
        "content": "<p>Why are propositions distinct from inhabitation of types?</p>",
        "id": 193341488,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586361829
    },
    {
        "content": "<p>Or am I importing half-understood ideas from a different type theory?</p>",
        "id": 193341711,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586361939
    },
    {
        "content": "<p>The Prop universe is proof irrelevant which means that if P : Prop and a b : P then a = b definitionally.</p>",
        "id": 193341889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586362012
    },
    {
        "content": "<p>This makes some type theory people unhappy but it seems to make mathematicians happy</p>",
        "id": 193341966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586362056
    },
    {
        "content": "<p>Is there any reason why proof of contrapositive reasoning is not added to theorem list after advanced proposition world?</p>",
        "id": 193349680,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586365504
    },
    {
        "content": "<p>I guess I just randomly wrote a load of worlds and didn't particularly plan anything in some coherent way. What do you suggest I do? I'm going to make some minor updates later on today.</p>",
        "id": 193350455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586365863
    },
    {
        "content": "<p>Well I have no particular suggestion. Having to \"redo\" a proof backwards has been useful in learning how to use lean. I was just wondering if this was intended or not.</p>",
        "id": 193351361,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586366312
    },
    {
        "content": "<p>I really appreciate the work you have done with the game. This is a really exciting way to study mathematics.</p>",
        "id": 193351454,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586366362
    },
    {
        "content": "<p>Oh -- are you saying I failed to add it to some list which it should be on? Sorry, I misunderstood. Probably the answer is that the current version of the Lean game maker forces me to do some things twice -- once in Lean and once in a comment so that it's registered by the system to add to a list, and maybe I failed to do it here. This was what caused the pow_succ fail: the theorem list had an incorrect version of pow_succ because of a copy paste fail.</p>",
        "id": 193351745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586366503
    },
    {
        "content": "<p>Oh I see. I have been using the list of theorems to the right as a kind of \"Allowed theorems to use\" list(which is also handy because the list has the names), which is why I wondered.</p>",
        "id": 193352029,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586366632
    },
    {
        "content": "<p>Piece of feedback: I seem to alternate between feeling completely lost, and like the body text is spoiling the answer.<br>\nPerhaps the more direct instructions could be hidden behind a spoiler tag so we can struggle on our own a bit?</p>",
        "id": 193356893,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586369100
    },
    {
        "content": "<p>I absolutely agree. Firstly, I need a competent editor -- I waffle and waffle. Secondly, unfortunately, the infrastructure is not there yet for me to be able to implement the spoiler tag stuff, but I can add it as an issue to Mohammad's game maker -- I had independently thought of this recently.</p>",
        "id": 193357542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586369390
    },
    {
        "content": "<p>If you add something like this to editor.main.css</p>\n<div class=\"codehilite\"><pre><span></span>.hover-item {\n    color: #fff;\n}\n\n.hover-item:hover {\n    color: #000;\n}\n</pre></div>\n\n\n<p>and then wrap the spoiler in &lt;span class=\"hover-item\"&gt; it should work</p>",
        "id": 193363174,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372017
    },
    {
        "content": "<p>I can see about writing an extension to showdown to make it a little more erganomic</p>",
        "id": 193363210,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372040
    },
    {
        "content": "<p>Yeah but I don't know what a css file is -- you could maybe put some comment on <a href=\"https://github.com/mpedramfar/Lean-game-maker/issues/5\" title=\"https://github.com/mpedramfar/Lean-game-maker/issues/5\">the issue I opened</a> on Mohammad's repo (he is about to defend his thesis viva so we might not hear from him for a few days)</p>",
        "id": 193363418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586372152
    },
    {
        "content": "<p>(showdown doesn't touch the span tags, adding them to the js objects worked but I'm not sure if lean will eat them)</p>",
        "id": 193363422,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372155
    },
    {
        "content": "<p>If you want to make some PR and tell me how to change <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game\">my repo</a> I would be interested.</p>",
        "id": 193363602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586372239
    },
    {
        "content": "<p>It looks like you're pulling the relevant file in during the build/deploy process, so I can send the PR to Mohammad's repo.</p>",
        "id": 193363889,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372397
    },
    {
        "content": "<p>but then presumably I have to indicate which part of the Lean file should be folded, somehow?</p>",
        "id": 193364004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586372436
    },
    {
        "content": "<p>Yeah, the thing I proposed would be a fast/simple but not great way of doing it.</p>\n<p>More correct would be to write an extension for the markdown formatter (called showdown), then you'd just wrap the hidden section in something like &gt;! Text to hide &lt;</p>",
        "id": 193364125,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372504
    },
    {
        "content": "<p>That's one common syntax. Another is [spoiler]  [/spoiler]</p>",
        "id": 193364213,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372526
    },
    {
        "content": "<p>I'll look into doing it properly (if you don't hear from me in a couple of days it means I got sidetracked). In the interim, here is other formatting syntax that should work with what you're already running if you were not already aware of it <a href=\"http://demo.showdownjs.com/\" title=\"http://demo.showdownjs.com/\">http://demo.showdownjs.com/</a></p>",
        "id": 193364602,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586372702
    },
    {
        "content": "<p>How do I make rw happen on a hypothesis?<br>\nSpecifically I have</p>\n<div class=\"codehilite\"><pre><span></span>a b u : mynat,\nht : a + u = b + u → a = b,\nh : a + succ u = b + succ u\n⊢ a + u = b + u\n</pre></div>\n\n\n<p>and I'm trying to use <code>rw add_succ</code> on both sides of h, but I keep getting 'did not find instance of pattern'</p>",
        "id": 193370073,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586375390
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span><span class=\"n\">add</span><span class=\"o\">,</span><span class=\"n\">succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 193370437,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1586375578
    },
    {
        "content": "<p>Thanks</p>",
        "id": 193370500,
        "sender_full_name": "Matt Watson",
        "timestamp": 1586375625
    },
    {
        "content": "<p>What exactly is a tactic under the hood? Is it just syntactic sugar for function composition? Is it a macro?</p>",
        "id": 193394784,
        "sender_full_name": "Brandon B",
        "timestamp": 1586391593
    },
    {
        "content": "<p>They're functions / programs that manipulate the \"tactic state\". You can read more <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic_writing.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactic_writing.html\">in the tactic writing tutorial</a>.</p>",
        "id": 193395147,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586391910
    },
    {
        "content": "<p>I found <a href=\"https://doi.org/10.1145/3110278\" title=\"https://doi.org/10.1145/3110278\">https://doi.org/10.1145/3110278</a>  really helpful.</p>",
        "id": 193399406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586397155
    },
    {
        "content": "<p>The link from <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/WHATS_NEXT.md\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/WHATS_NEXT.md\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/WHATS_NEXT.md</a> to the lean web editor seems to be broken.</p>",
        "id": 193456429,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586442049
    },
    {
        "content": "<p>The correct link is <a href=\"https://github.com/kbuzzard/xena/tree/master/Maths_Challenges/README.md\" title=\"https://github.com/kbuzzard/xena/tree/master/Maths_Challenges/README.md\">https://github.com/kbuzzard/xena/tree/master/Maths_Challenges/README.md</a> . I'll open a PR if there isn't one already.</p>\n<p><strong>edit</strong>: <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/66\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/issues/66\">ImperialCollegeLondon/natural_number_game#66</a></p>",
        "id": 193457623,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586442576
    },
    {
        "content": "<p>Thanks, I haven't really used Github before so wasn't sure how to report it.</p>",
        "id": 193462044,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586444497
    },
    {
        "content": "<p>Going to read up on the lean documentation now at least. This seems like a productive thing to use my free time on.</p>",
        "id": 193462280,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586444595
    },
    {
        "content": "<p>Hi, thanks for all the work put into lean. I'm having a go at the natural numbers game and I got stuck at level 10 on the advanced addition.  I'm not sure exactly how to use  not equals during a proof.  My current attempt is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span> <span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">succ_ne_zero</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n\n<span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>I've got 0 /=0 but no way of making that false</p>",
        "id": 193463885,
        "sender_full_name": "Will P",
        "timestamp": 1586445241
    },
    {
        "content": "<p>hint: use the following code to enable syntax highlighting:</p>\n<div class=\"codehilite\"><pre><span></span>```lean\n[your code here]\n```\n</pre></div>",
        "id": 193464619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586445464
    },
    {
        "content": "<p>Also, please copy the tactic state after the final comma.</p>",
        "id": 193464753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586445510
    },
    {
        "content": "<p>Nothing seems to happen when I'm using the lean web editor. I pressed the first \"try it!\" button here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/introduction.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/introduction.html\">https://leanprover.github.io/theorem_proving_in_lean/introduction.html</a> , but I can't see the current goal only the block of code.</p>",
        "id": 193466089,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586446094
    },
    {
        "content": "<p>that proof is in term mode, so it won't have a goal view</p>",
        "id": 193466259,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586446167
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/\" title=\"https://leanprover-community.github.io/lean-web-editor/\">The community web editor</a> is better.</p>",
        "id": 193466429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586446227
    },
    {
        "content": "<p>chapter 5 introduces tactics, <a href=\"https://leanprover.github.io/live/3.4.1/#code=theorem%20test%20(p%20q%20:%20Prop)%20(hp%20:%20p)%20(hq%20:%20q)%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20p%20:=%0Abegin%0A%20%20apply%20and.intro,%0A%20%20exact%20hp,%0A%20%20apply%20and.intro,%0A%20%20exact%20hq,%0A%20%20exact%20hp%0Aend\" title=\"https://leanprover.github.io/live/3.4.1/#code=theorem%20test%20(p%20q%20:%20Prop)%20(hp%20:%20p)%20(hq%20:%20q)%20:%20p%20%E2%88%A7%20q%20%E2%88%A7%20p%20:=%0Abegin%0A%20%20apply%20and.intro,%0A%20%20exact%20hp,%0A%20%20apply%20and.intro,%0A%20%20exact%20hq,%0A%20%20exact%20hp%0Aend\">here's one example</a></p>",
        "id": 193466479,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586446248
    },
    {
        "content": "<p>Ah thanks</p>",
        "id": 193466692,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586446329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284434\">@Will P</span> change your last two lines to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">apply</span> <span class=\"n\">succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n<span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193466786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586446378
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193467092,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586446525
    },
    {
        "content": "<p>About Will P's question: I also had some times when doing the natural number game when it would have been great to get a \"trivial\" hypothesis such as 0=0. I tried the have command, but it did not work. Is there any other way to get an equality?</p>",
        "id": 193467236,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586446587
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193467309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586446641
    },
    {
        "content": "<p>If you have </p>\n<div class=\"codehilite\"><pre><span></span>q : 0 ≠ 0\n⊢ false\n</pre></div>\n\n\n<p>then you can <code>apply q</code> and then <code>refl</code> because <code>q</code> is <code>0 = 0 -&gt; false</code></p>",
        "id": 193467360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586446677
    },
    {
        "content": "<p>Ah, I tried have h := 0=0, which only gave me a h: Prop. Thanks for the answers</p>",
        "id": 193467751,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586446831
    },
    {
        "content": "<p><code>h := 0=0</code> means <code>h</code> is defined to be <code>0=0</code>, which is a <code>Prop</code></p>",
        "id": 193467837,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586446870
    },
    {
        "content": "<p>I see, hopefully all of this will make more sense after reading the book.</p>",
        "id": 193468166,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586447009
    },
    {
        "content": "<p>Be clear about the difference between a Proposition (a true/false statement) and its proof. In mathematics we are very vague about this, we have our own conventions which seem to work fine but don't stand up to scrutiny. When we say \"by theorem 10\" we mean \"by the fact that we proved theorem 10\"; theorem 10 is just a statement. A true/false statement, otherwise known as a Proposition in Lean, is <code>P : Prop</code>. It's proof is <code>h : P</code>. For example <code>injective f : Prop := \\forall x y, f x = f y -&gt; x = y</code> is the definition of injectivity. There is no proof here, it's a definition of a true/false statement, and its truth value depends on what f is. But <code>h : injective succ := &lt;proof that succ is injective&gt;</code> is a proof. The propositions are types, and the proofs are terms. Be clear about what level you are working at.</p>",
        "id": 193469189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586447440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193469189\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193469189\">said</a>:</p>\n<blockquote>\n<p>Be clear about the difference between a Proposition (a true/false statement) and its proof. In mathematics we are very vague about this, we have our own conventions which seem to work fine but don't stand up to scrutiny. When we say \"by theorem 10\" we mean \"by the fact that we proved theorem 10\"; theorem 10 is just a statement. A true/false statement, otherwise known as a Proposition in Lean, is <code>P : Prop</code>. It's proof is <code>h : P</code>. For example <code>injective f : Prop := \\forall x y, f x = f y -&gt; x = y</code> is the definition of injectivity. There is no proof here, it's a definition of a true/false statement, and its truth value depends on what f is. But <code>h : injective succ := &lt;proof that succ is injective&gt;</code> is a proof. The propositions are types, and the proofs are terms. Be clear about what level you are working at.</p>\n</blockquote>\n<p>Thanks for the elaborate reply, now it is very clear why h : 0=0 ,is used</p>",
        "id": 193478552,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586451417
    },
    {
        "content": "<p>By the way, a project of \"perfectoid spaces\" was mentioned after finishing the game. It said you needed a \"whole lot of commutative algebra\" to do that.  Does this mean PhD level?</p>",
        "id": 193491872,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586457472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282867\">Victor Ahlquist</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193491872\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193491872\">said</a>:</p>\n<blockquote>\n<p>By the way, a project of \"perfectoid spaces\" was mentioned after finishing the game. It said you needed a \"whole lot of commutative algebra\" to do that.  Does this mean PhD level?</p>\n</blockquote>\n<p><a href=\"https://arxiv.org/abs/1910.12320\" title=\"https://arxiv.org/abs/1910.12320\">https://arxiv.org/abs/1910.12320</a></p>",
        "id": 193492687,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586457856
    },
    {
        "content": "<p>Looks like a yes then.</p>",
        "id": 193493059,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586458046
    },
    {
        "content": "<p>Is there anything I can do when the Lean interpreter on the Natural Number Game gets stuck, besides refreshing the page and losing my progress?</p>",
        "id": 193515957,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586470237
    },
    {
        "content": "<p>no progress is kept. You can go to any level at any time.</p>",
        "id": 193516202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470419
    },
    {
        "content": "<p>What's causing the interpreter to get stuck? Is it something you can reproduce?</p>",
        "id": 193516316,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586470481
    },
    {
        "content": "<p>That's true. I appreciate seeing how far I've gotten, though</p>",
        "id": 193516328,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586470488
    },
    {
        "content": "<p>One time I got it stuck with <code>repeat { rw add_comm }</code>, and this time it was something else with repeat</p>",
        "id": 193516380,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586470516
    },
    {
        "content": "<p>You can get a tactic block which loops, but in VS Code this isn't a problem. Is it a problem in NNG?</p>",
        "id": 193516424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470549
    },
    {
        "content": "<p>Yeah, just on the NNG website</p>",
        "id": 193516483,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586470568
    },
    {
        "content": "<p>I wouldn't mind going through NNG in vscode, but it seems the website is the recommended way? Also vscode doesn't list the tactics and theorems</p>",
        "id": 193516543,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586470625
    },
    {
        "content": "<p>You're right, and I don't really know how to solve this.</p>",
        "id": 193516575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470654
    },
    {
        "content": "<p>I can't seem to get the web editor to loop. If you run into another loop, please paste the full code so I can take a look.</p>",
        "id": 193516671,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586470721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> try going to advanced addition world at <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> , level 5, and then try <code>repeat {rw add_comm}</code>. This loops. Unsurprisingly, you get \"Lean is busy...\". But it doesn't go away</p>",
        "id": 193516678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470727
    },
    {
        "content": "<p>Obviously, the interpreter can just keep going between <code>a+b</code> and <code>b+a</code> forever</p>",
        "id": 193516711,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586470755
    },
    {
        "content": "<p>Right. But in VS Code if you just delete the line <code>repeat {rw add_comm}</code> everything goes back to normal.</p>",
        "id": 193516758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470799
    },
    {
        "content": "<p>In NNG it seems that this breaks the game forever, you can go back to the overworld and then click on another world and any level and Lean is still busy</p>",
        "id": 193516827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586470828
    },
    {
        "content": "<p><a href=\"https://github.com/mpedramfar/Lean-game-maker/issues/6\" title=\"https://github.com/mpedramfar/Lean-game-maker/issues/6\">https://github.com/mpedramfar/Lean-game-maker/issues/6</a></p>",
        "id": 193517221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586471117
    },
    {
        "content": "<p>Interesting. my wild guess would be because the web editor runs single-threaded (?) and so nothing is able to interrupt the loop. For the NNG, maybe you could wrap <code>repeat</code> in <code>try_for 100000</code> to protect users from this.</p>",
        "id": 193517644,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586471381
    },
    {
        "content": "<p>Well, I'm not sure what numbers would be good to use in <code>try_for</code>, maybe 100000 is still too low.</p>",
        "id": 193517748,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586471436
    },
    {
        "content": "<p>I think the Lean interpreter is running in something like a web worker, otherwise I'd expect the whole tab to freeze up</p>",
        "id": 193518435,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586471905
    },
    {
        "content": "<p>My son did exactly this, and it really upset him when he lost his progress. :-) It was a good life lesson...</p>",
        "id": 193518515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586471986
    },
    {
        "content": "<p>Yep, there's one web worker for the Lean server and one worker for Monaco (the text editor).</p>",
        "id": 193520762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586473546
    },
    {
        "content": "<p>The link to \"2 add 2 isn't 5\" from here <a href=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/README.md\" title=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/README.md\">https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/README.md</a> is broken</p>",
        "id": 193567509,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586524481
    },
    {
        "content": "<p>Actually all of the links except the first two appears to be broken</p>",
        "id": 193567552,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586524540
    },
    {
        "content": "<p>Nobody ever does these challenges, I don't think I've ever got any feedback from them. Thanks for letting me know.</p>",
        "id": 193568037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586524919
    },
    {
        "content": "<p>Oh, the first two were nice to do after NNG. Guess I'll look for other things to do.</p>",
        "id": 193568162,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586524991
    },
    {
        "content": "<p>They'll all be fixed in 5 minutes :-)</p>",
        "id": 193568202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586525009
    },
    {
        "content": "<p>Nice, thanks :)</p>",
        "id": 193568217,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586525024
    },
    {
        "content": "<p>Links to questions should now all work, I'll check hints and solutions. Thanks again.</p>",
        "id": 193568687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586525386
    },
    {
        "content": "<p>Thanks, they're working now</p>",
        "id": 193569118,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586525680
    },
    {
        "content": "<p>By the way, I saw you mentioned in an old reddit thread that there still was some undergrad math that needed to be done in Lean. Is this still the case?</p>",
        "id": 193569379,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586525897
    },
    {
        "content": "<p>3rd year undergraduate maths there's lots.</p>",
        "id": 193569876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526213
    },
    {
        "content": "<p>1st and 2nd year we're basically covered apart from contour integrals</p>",
        "id": 193569911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526237
    },
    {
        "content": "<p>3rd year undergrad we have most of a basic number theory course but as far as I know we don't have any of: ideals in a number field factor uniquely into prime ideals, finiteness of class group, rank of unit group.</p>",
        "id": 193570002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526284
    },
    {
        "content": "<p>we have a bunch of commutative algebra but no homological algebra</p>",
        "id": 193570058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526324
    },
    {
        "content": "<p>Well... some people are working on combinatorics/probability theory/graph theory... but there are huge holes there.</p>",
        "id": 193570066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586526328
    },
    {
        "content": "<p>Oh here's a list of random things we don't have: <a href=\"https://github.com/kbuzzard/xena/blob/master/many_maths_challenges.txt\" title=\"https://github.com/kbuzzard/xena/blob/master/many_maths_challenges.txt\">https://github.com/kbuzzard/xena/blob/master/many_maths_challenges.txt</a></p>",
        "id": 193570171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526380
    },
    {
        "content": "<p>Oh, some of those topics definitely sound approachable. I'm a 2nd year undergrad, but in Swedish school system so not sure how things translate. I'll have a lot of free time this summer and some free time the weeks until then so I'll definitely start looking into this.</p>",
        "id": 193570288,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586526481
    },
    {
        "content": "<p>Thanks for the list!</p>",
        "id": 193570370,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586526519
    },
    {
        "content": "<p>homological algebra is coming, I've seen many PRs about this recently</p>",
        "id": 193570432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586526560
    },
    {
        "content": "<p>I'm working with a bunch of 2nd year undergraduates on stuff this summer, it was all going to happen at Imperial College but now it's probably going to happen online, you'd be welcome to join us -- most people will be beginners.</p>",
        "id": 193570435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526561
    },
    {
        "content": "<p>homological algebra has in some sense been coming for some time. Another way of looking at it is that a mathematician writes \"let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋯</mo><mo>→</mo><msub><mi>M</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>→</mo><msub><mi>M</mi><mi>n</mi></msub><mo>→</mo><msub><mi>M</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>→</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\cdots\\to M_{n-1}\\to M_n\\to M_{n+1}\\to \\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> be an exact sequence of abelian groups, and then we spend months trying to figure out how best to say that in Lean without getting caught up in type theory issues.</p>",
        "id": 193570548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526626
    },
    {
        "content": "<p>or category theory issues</p>",
        "id": 193570620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193570435\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193570435\">said</a>:</p>\n<blockquote>\n<p>I'm working with a bunch of 2nd year undergraduates on stuff this summer, it was all going to happen at Imperial College but now it's probably going to happen online, you'd be welcome to join us -- most people will be beginners.</p>\n</blockquote>\n<p>Wow that would be great. What would the mathematical prerequisites be?</p>",
        "id": 193570795,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586526766
    },
    {
        "content": "<p>2nd year undergrad?</p>",
        "id": 193570818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526782
    },
    {
        "content": "<p>Whatever you show up with, really.</p>",
        "id": 193570830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586526794
    },
    {
        "content": "<p>Neat, I'll just practice using lean until then in that case.</p>",
        "id": 193571296,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586527088
    },
    {
        "content": "<p>It is really impressing that there's already so much math formalized in lean.</p>",
        "id": 193571324,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586527115
    },
    {
        "content": "<p>In 2017 there was nothing.</p>",
        "id": 193571668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527260
    },
    {
        "content": "<p>Definitions of rings, groups, top spaces, basic stuff about compact spaces, hardly any theorems about anything else. Loads and loads and loads of theorems about lists finite sets though, which turn out to be really important.</p>",
        "id": 193571757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527309
    },
    {
        "content": "<p>I'm looking forward to seeing how this will influence mathematics</p>",
        "id": 193571828,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586527332
    },
    {
        "content": "<p>Most stuff written by Mario Carneiro and Johannes Hoelzl, who have a computer science background. Then mathematicians started to get involved and the focus of the library changed much more to undergraduate level mathematics</p>",
        "id": 193571857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527352
    },
    {
        "content": "<p>Ah I see. It is nice that there's some cooperation between different subjects going on.</p>",
        "id": 193571937,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586527401
    },
    {
        "content": "<p>I should say that Mario almost certainly would not say there was nothing -- there was a ton of stuff in late 2017 which was of foundational importance.</p>",
        "id": 193571945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527405
    },
    {
        "content": "<p>But if you look at what there was and compare with the things taught to maths undergraduates, there was very little.</p>",
        "id": 193571981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527424
    },
    {
        "content": "<p>Because we don't teach them that the union of two finite sets is finite, this doesn't need a proof as far as we are concerned :-) In Lean this sort of thing needs to be proved, and then you have to decide what the definition of a finite set is, and then suddenly you are wrestling with foundational type theory issues.</p>",
        "id": 193572122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527494
    },
    {
        "content": "<p>Even at that time there was much more general topology than what we teach undergrads.</p>",
        "id": 193572145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586527518
    },
    {
        "content": "<p>Yes that is true, it was some weird outlier.</p>",
        "id": 193572250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527574
    },
    {
        "content": "<p>Probably all the results in my 2nd year topology course were there.</p>",
        "id": 193572272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527588
    },
    {
        "content": "<p>But I am pretty sure there was no first isomorphism theorem for groups or rank-nullity for vector spaces in 2017.</p>",
        "id": 193572344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586527647
    },
    {
        "content": "<p>Note there was a lot of topology but no normed space.</p>",
        "id": 193572440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586527691
    },
    {
        "content": "<p>I guess some maths is easier to formalize than others?</p>",
        "id": 193572483,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586527719
    },
    {
        "content": "<p>Although that's a wild guess from my side.</p>",
        "id": 193572522,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586527743
    },
    {
        "content": "<p>What happens when I write <code>have foo := bar,</code> and there was already something with the name foo in scope?</p>",
        "id": 193572907,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586527993
    },
    {
        "content": "<p>You get two <code>foo</code>s in your context, and IIRC the latest <code>foo</code> shadows the earlier one (so later tactics referring to <code>foo</code> would only see the latest one)</p>",
        "id": 193573217,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586528167
    },
    {
        "content": "<p>Ok, that's fairly convenient. Thanks.</p>",
        "id": 193573236,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586528182
    },
    {
        "content": "<p>This is one of the things that sometimes gets me in Lean, but doesn't happen in Coq. Does anyone know the rationale behind this design decision?</p>",
        "id": 193573371,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586528247
    },
    {
        "content": "<p>Honestly I also wish Lean would rise at least a warning in this situation.</p>",
        "id": 193573454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586528287
    },
    {
        "content": "<p>Here Lean feels very pythonic we're-all-consenting-adults.</p>",
        "id": 193573512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586528325
    },
    {
        "content": "<p>I finally finished mul_left_cancel</p>",
        "id": 193576513,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586530053
    },
    {
        "content": "<p>I bet my proof is overcomplicated</p>",
        "id": 193576524,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586530062
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level4.lean\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level4.lean\">My proof looks pretty long</a></p>",
        "id": 193576657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586530123
    },
    {
        "content": "<p><a href=\"https://gist.github.com/FreeFull/01d57489ac996db3ea2f8e31254d466c\" title=\"https://gist.github.com/FreeFull/01d57489ac996db3ea2f8e31254d466c\">https://gist.github.com/FreeFull/01d57489ac996db3ea2f8e31254d466c</a> This is mine. I didn't use <code>assumption</code> because  I didn't know about it</p>",
        "id": 193576936,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586530264
    },
    {
        "content": "<p>Not too nicely formatted either</p>",
        "id": 193576971,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586530290
    },
    {
        "content": "<p>I tried downloading and installing leanprover and commands like #eval 1+1 work without trouble. However when I try importing things such as import data.finset algebra.big_operators tactic.ring, I get a file not found error. Any idea what could be causing this?</p>",
        "id": 193587263,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586535542
    },
    {
        "content": "<p>Did you follow all the instructions for your OS <a href=\"https://github.com/leanprover-community/mathlib#installation\" title=\"https://github.com/leanprover-community/mathlib#installation\">here</a> and then follow the instructions to create a project <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">here</a>?</p>",
        "id": 193591075,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586537648
    },
    {
        "content": "<blockquote>\n<p>Note however that you cannot use mathlib, and in particular any imports, in the file test.lean created above. To use mathlib you will need to set up or download a Lean project. You should now read instructions about creating and working on Lean projects.</p>\n</blockquote>\n<p>What is your OS? Does this comment (at the bottom of the install files) apply to you?</p>",
        "id": 193593572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586538933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193591075\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193591075\">said</a>:</p>\n<blockquote>\n<p>Did you follow all the instructions for your OS <a href=\"https://github.com/leanprover-community/mathlib#installation\" title=\"https://github.com/leanprover-community/mathlib#installation\">here</a> and then follow the instructions to create a project <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">here</a>?</p>\n</blockquote>\n<p>Ah no, I did not follow the instructions to create a project only the instructions on the install page. I'll try this</p>",
        "id": 193606575,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586546025
    },
    {
        "content": "<p>Great,  now it works perfectly! Thanks for the help</p>",
        "id": 193607833,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586546818
    },
    {
        "content": "<p>Not sure how I managed to miss that last message</p>",
        "id": 193608622,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586547276
    },
    {
        "content": "<p>I specially put it into the docs a couple of weeks ago because people keep asking this :-)</p>",
        "id": 193609473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586547771
    },
    {
        "content": "<p>Maybe I'll put it in flashing red letters :-)</p>",
        "id": 193609491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586547784
    },
    {
        "content": "<p>Haha, as you posted it I can recall reading it and then promptly forgetting about it.</p>",
        "id": 193609527,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586547821
    },
    {
        "content": "<p>Chapter 2 was an interesting but tough read, reminds me of my course in Java programming</p>",
        "id": 193611770,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586549115
    },
    {
        "content": "<p>Chapter 2 of the installation instructions?</p>",
        "id": 193611794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586549139
    },
    {
        "content": "<p>I have <code>hb : b = b + d + c</code> and I'm wondering if there's a more straightforward way to get to <code>0 = d + c</code> than going through ← add_zero, add_assoc and add_left_cancel</p>",
        "id": 193611904,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586549206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193611794\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193611794\">said</a>:</p>\n<blockquote>\n<p>Chapter 2 of the installation instructions?</p>\n</blockquote>\n<p>Haha no, chapter 2 of theorem proving in lean.</p>",
        "id": 193611942,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586549240
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284527\">Filip Szczepański</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193611904\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193611904\">said</a>:</p>\n<blockquote>\n<p>I have <code>hb : b = b + d + c</code> and I'm wondering if there's a more straightforward way to get to <code>0 = d + c</code> than going through ← add_zero, add_assoc and add_left_cancel</p>\n</blockquote>\n<p>I'm new to Lean so this is probably wrong, but perhaps you could leave out add_zero.</p>",
        "id": 193612673,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586549735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573217\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573217\">said</a>:</p>\n<blockquote>\n<p>You get two <code>foo</code>s in your context, and IIRC the latest <code>foo</code> shadows the earlier one (so later tactics referring to <code>foo</code> would only see the latest one)</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573454\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573454\">said</a>:</p>\n<blockquote>\n<p>Honestly I also wish Lean would rise at least a warning in this situation.</p>\n</blockquote>\n<p>Actually lean does raise a warning in this situation, at least in some cases, especially after a tactic fails; it will suggest that you run the <code>dedup</code> tactic</p>",
        "id": 193630117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586561780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573371\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573371\">said</a>:</p>\n<blockquote>\n<p>This is one of the things that sometimes gets me in Lean, but doesn't happen in Coq.</p>\n</blockquote>\n<p>What does Coq do in this situation? It seems to me that if we gave a warning on every name shadowing we would get a ridiculous number of false positives, especially because <code>have := ...</code> is deliberately reusing and shadowing the <code>this</code> variable</p>",
        "id": 193630451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586562129
    },
    {
        "content": "<p>Having some trouble figuring out how to get started on <code>le_total</code> in the natural number game. I'm guessing this is the next level that people tend to get stuck on, after <code>mul_left_cancel</code>?</p>",
        "id": 193642736,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586581151
    },
    {
        "content": "<p>I can't recall exactly how I did but I think I started with induction on b</p>",
        "id": 193644247,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586584281
    },
    {
        "content": "<p>I think you need to <code>revert a</code> first.</p>",
        "id": 193644372,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586584556
    },
    {
        "content": "<p>So my proof starts with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193644550,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586584852
    },
    {
        "content": "<p>Thanks, the revert certainly seems handy</p>",
        "id": 193645155,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586586152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193630451\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193630451\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573371\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193573371\">said</a>:</p>\n<blockquote>\n<p>This is one of the things that sometimes gets me in Lean, but doesn't happen in Coq.</p>\n</blockquote>\n<p>What does Coq do in this situation? It seems to me that if we gave a warning on every name shadowing we would get a ridiculous number of false positives, especially because <code>have := ...</code> is deliberately reusing and shadowing the <code>this</code> variable</p>\n</blockquote>\n<p>Coq simply prevents you from reusing hypothesis names by raising an error. On the other hand, if you don't explicitly name your hypotheses in Coq then Coq just auto-generates gibberish hypothesis names instead of (re-using) a nice name such as <code>this</code></p>",
        "id": 193645256,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586586435
    },
    {
        "content": "<p>One thing we could do is make <code>have</code> have the same behavior as <code>replace</code>, that is, if the name would collide then the old version is deleted</p>",
        "id": 193646177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586588291
    },
    {
        "content": "<p>however this could still break some proofs because you can refer to shadowed variables using <code>assumption</code> and other things that enumerate the local context</p>",
        "id": 193646202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586588346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193644372\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193644372\">said</a>:</p>\n<blockquote>\n<p>I think you need to <code>revert a</code> first.</p>\n</blockquote>\n<p>What's the purpose of revert in this case? Will it lead to a shorter proof?</p>",
        "id": 193646745,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586589421
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>induction b with b IH,\nright,\nexact zero_le a,\ncases IH with p q,\nleft,\nexact le_succ a b p,\ncases q with c,\ncases c,\nuse succ(0),\nrw q_h,\nrefl,\nright,\nuse c,\nrw q_h,\nrw succ_add,\nrw add_succ,\nrefl,\n</pre></div>\n\n\n<p>I redid it and got this.</p>",
        "id": 193646809,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586589534
    },
    {
        "content": "<p>Actually the second last line is redundant.</p>",
        "id": 193646859,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586589625
    },
    {
        "content": "<p>This is my proof with <code>revert a</code></p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">succ_le_succ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">right</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">succ_le_succ</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>So it's a bit shorter?</p>",
        "id": 193646864,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586589663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282867\">Victor Ahlquist</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193646745\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193646745\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193644372\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193644372\">said</a>:</p>\n<blockquote>\n<p>I think you need to <code>revert a</code> first.</p>\n</blockquote>\n<p>What's the purpose of revert in this case? Will it lead to a shorter proof?</p>\n</blockquote>\n<p>Notice the difference in your IH with and without <code>revert</code>.</p>",
        "id": 193646865,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586589680
    },
    {
        "content": "<p>But the main reason was to do with the induction hypothesis. The IH after using <code>revert a</code> is much easier to use than the one without.</p>",
        "id": 193646922,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586589785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284527\">Filip Szczepański</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193611904\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193611904\">said</a>:</p>\n<blockquote>\n<p>I have <code>hb : b = b + d + c</code> and I'm wondering if there's a more straightforward way to get to <code>0 = d + c</code> than going through ← add_zero, add_assoc and add_left_cancel</p>\n</blockquote>\n<p>If you're working with usual Lean naturals then the <code>omega</code> tactic will solve this for you:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span>\n</pre></div>\n\n\n<p>But if you're working with home-grown naturals like <code>mynat</code> then you might have to work harder.</p>",
        "id": 193646976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586589869
    },
    {
        "content": "<p>Ah I see, it does look like a more powerful hypothesis.</p>",
        "id": 193646981,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586589896
    },
    {
        "content": "<p>Guess I'm just scared of quantifiers in Lean</p>",
        "id": 193647041,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586590020
    },
    {
        "content": "<p>There's not much explanation of this in the book, but why does a list have Type u \\r Type u as it's type?</p>",
        "id": 193660769,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586611983
    },
    {
        "content": "<p>Given a type <code>\\a</code>, <code>list \\a</code> is a type</p>",
        "id": 193660832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586612051
    },
    {
        "content": "<p>So <code>list</code> itself sends types to types</p>",
        "id": 193660849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586612069
    },
    {
        "content": "<p>Ah right, that makes sense thanks.</p>",
        "id": 193660874,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586612156
    },
    {
        "content": "<p>Why don't interactive theorem provers (including Lean to my knowledge) provide a recursor for <code>Type</code>? Does it cause \"\"fun\"\" I'm not noticing in my few minutes' consideration?</p>",
        "id": 193670800,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1586626441
    },
    {
        "content": "<p>What would that look like?</p>",
        "id": 193670866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586626542
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">wacky</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">ulift</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>Something like this?</p>",
        "id": 193671144,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1586626892
    },
    {
        "content": "<p>Obviously a contrived example :)</p>",
        "id": 193671197,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1586626963
    },
    {
        "content": "<p><code>Type</code> is not inductive.</p>",
        "id": 193671213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586626998
    },
    {
        "content": "<p>you can use <code>if then else</code> instead.</p>",
        "id": 193671221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586627011
    },
    {
        "content": "<p>Oh, right. Of course, thanks.</p>",
        "id": 193671297,
        "sender_full_name": "Grayson Burton",
        "timestamp": 1586627141
    },
    {
        "content": "<p>Isn't <code>(ℕ → ℕ) ≠ (string → ℕ)</code> unprovable? If so you'd have little hope of being able to functions as above</p>",
        "id": 193674540,
        "sender_full_name": "David Wärn",
        "timestamp": 1586631804
    },
    {
        "content": "<p>For anything like this you'd actually want to do, you'd probably want to use classes instead.</p>",
        "id": 193675222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586632845
    },
    {
        "content": "<p>Assuming you want an actual recursor and not just pick off a few cases, it's not consistent. Because there are types you can construct using choice that are provably different from every \"constructable\" type (since there are countably many constructable types and so there is some aleph less than aleph_(aleph_1) that was missed)</p>",
        "id": 193683771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586645854
    },
    {
        "content": "<p>So I see one aim of Lean would be to implement as much of modern mathematics into it as possible, starting with all of undergrad math as Kevin Buzzard is doing so that research level math can eventually be done.  My question is, if we already have a bunch of theorems that have been proved with paper and pencil, why can't we just add them in as constants (basically assuming they're true w/o explicit construction of a proof) and build from there?</p>",
        "id": 193684464,
        "sender_full_name": "Brandon B",
        "timestamp": 1586647251
    },
    {
        "content": "<p>the exact formal statement of a mathematical theorem can be extremely subtle, at times</p>",
        "id": 193684527,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586647380
    },
    {
        "content": "<p>using them all over the place defeats the purpose of formalization, in terms of checking correctness of proofs</p>",
        "id": 193684593,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586647458
    },
    {
        "content": "<p>I think this is fine in limited quantities</p>",
        "id": 193684596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647476
    },
    {
        "content": "<p>FAbstracts is using essentially this method</p>",
        "id": 193684601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647490
    },
    {
        "content": "<p>i don't think there's any getting around using them here and there, especially for results that depend on a whole bunch of other material</p>",
        "id": 193684613,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586647525
    },
    {
        "content": "<p>Maybe I'm not looking at the right theorems, but it's not very often I see a theorem where the statement is tractable but the proof is not, that I want to assume for something else</p>",
        "id": 193684670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647582
    },
    {
        "content": "<p>most of the time the theorem would be some work but not unreasonably so</p>",
        "id": 193684674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647609
    },
    {
        "content": "<p>and I feel much better about the result afterwards</p>",
        "id": 193684681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647625
    },
    {
        "content": "<p>or else the statement of the theorem is already hopeless requiring some big library development that doesn't yet exist</p>",
        "id": 193684689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647663
    },
    {
        "content": "<p>after all, it's not enough just to state the theorem, you also have to be able to prove the basic consequences of all the definitions used in the theorem if you expect to build on top of an assumption with that statement</p>",
        "id": 193684734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586647727
    },
    {
        "content": "<p>Note in Mario's statement the all-important clause \"that I want to assume for something else\". FLT would be a great counterexample to his claim otherwise, but actually fits perfectly. :-) We are very far from being able to state the \"actual usable theorems\" associated to FLT.</p>",
        "id": 193685145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586648421
    },
    {
        "content": "<p>On another note - is there a way to compose functions left to right in Lean? e.g. it gets tiresome doing h(g(f(x))) when I'd rather do something like x&gt;f&gt;g&gt;h</p>",
        "id": 193685499,
        "sender_full_name": "Brandon B",
        "timestamp": 1586649119
    },
    {
        "content": "<p>I recall seeing isabelle using the <code>|&gt;</code> notation for this, although we will have to take that notation back from the useless <code>option.lhoare</code></p>",
        "id": 193685611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649246
    },
    {
        "content": "<p>You can use <code>h $ g $ f $ x</code> to make the chain more linear but that doesn't resolve the order</p>",
        "id": 193685625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649316
    },
    {
        "content": "<p>Oh wait, I just remembered that we already did this</p>",
        "id": 193685628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649327
    },
    {
        "content": "<p>it's <code>$&lt;</code></p>",
        "id": 193685631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649331
    },
    {
        "content": "<p>in one of the mathlib files</p>",
        "id": 193685633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649345
    },
    {
        "content": "<p>... I wish it was |&gt;, that's the pipeline operator in multiple fp languages, not just isabelle</p>",
        "id": 193685639,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586649357
    },
    {
        "content": "<p>now that we've taken over core we can delete those notations</p>",
        "id": 193685684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649391
    },
    {
        "content": "<p>which have been used literally zero times</p>",
        "id": 193685690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649411
    },
    {
        "content": "<p>even the functions they abbreviate  are never used</p>",
        "id": 193685698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586649436
    },
    {
        "content": "<p>how to prove this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on_sup</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>when i do a proof by induction like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">eq_bot_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">},</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>i get this goal state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span>\n<span class=\"err\">⊢</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>so i can't access <code>hn</code></p>",
        "id": 193688429,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1586654828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon B</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193684464\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193684464\">said</a>:</p>\n<blockquote>\n<p>starting with all of undergrad math as Kevin Buzzard is doing </p>\n</blockquote>\n<p>I might have been one of the people who thought it was a good idea to focus on undergraduate mathematics, but when it comes to <em>doing</em> it, much of the community is involved and I am only playing an extremely small part. For example the basic theory of multivariable calculus, manifolds etc is (a) undoubtedly undergraduate mathematics (b) <em>extremely</em> subtle to do in a theorem prover (c) something I have had absolutely nothing to do with and (d) currently making <em>huge</em> progress thanks to people like <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and others. I am the loud Lean public relations guy with access to a mathematical audience and this plays some role, but this is not \"my project\" in any way: it is the project I am passionate about, but that's something different.</p>",
        "id": 193699650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586677426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"272823\">Anas Himmi</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193688429\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193688429\">said</a>:</p>\n<blockquote>\n<p>how to prove this?</p>\n</blockquote>\n<p>I solved it by taking the cases of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i \\le n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> then doing an induction on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">i &lt; n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on_sup</span>\n<span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hle</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">},</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">hle</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">hr</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"err\">$</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">hle</span><span class=\"o\">)},</span>\n    <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193708751,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586690294
    },
    {
        "content": "<p>Woow thank you!</p>",
        "id": 193708928,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1586690581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193684670\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193684670\">said</a>:</p>\n<blockquote>\n<p>Maybe I'm not looking at the right theorems, but it's not very often I see a theorem where the statement is tractable but the proof is not, that I want to assume for something else</p>\n</blockquote>\n<p>So in more serious mathematics this phenomenon shows up a lot -- I would say it's more the rule than the exception. But the point remains that at the level I'm talking about we cannot currently state the results we are interested in because we don't have the definitions in mathlib. Cheating on a definition has far more serious consequences than cheating on a proof -- indeed IIRC someone once posted an example where if you cheated on a definition then you got a proof for free, which isn't ideal because then when someone fills in the actual definition, the proof breaks.</p>",
        "id": 193709072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586690859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon B</span> I am hoping that once we have a ton of meaty definitions, e.g. in algebraic geometry, then there will be a lot of scope for stating interesting theorems and skipping proofs (not in mathlib, but in another place where one is concentrating on e.g. making search for mathematicians)</p>",
        "id": 193709138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586690986
    },
    {
        "content": "<p>Unfortunately, there are a bunch of interesting theorems in mathematics about etale cohomology of Noetherian schemes, and it is going to take a whole bunch of category theory to even define etale cohomology. Maybe one cheap definition uses derived functors on an abelian category, but we don't even have abelian categories yet.</p>",
        "id": 193709206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691097
    },
    {
        "content": "<blockquote>\n<p>So in more serious mathematics this phenomenon shows up a lot -- I would say it's more the rule than the exception. But the point remains that at the level I'm talking about we cannot currently state the results we are interested in because we don't have the definitions in mathlib.</p>\n</blockquote>\n<p>Right, I certainly get the impression that deep theorems abound in higher mathematics, but most of these theorems are not in an accessible place from the point of view of definitions. You spent a bunch of time and effort on perfectoid spaces -- can we state the tilting lemma now? Can we prove basic (and I mean really basic) properties about perfectoid spaces?</p>",
        "id": 193709291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586691230
    },
    {
        "content": "<p>We can't state Scholze's tilting theorem yet because we still need a load more machinery.</p>",
        "id": 193709342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691290
    },
    {
        "content": "<p>Do you know any place where we would get a lot of mileage out of assuming a hard theorem that we can state today?</p>",
        "id": 193709357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586691343
    },
    {
        "content": "<p>This might sound like a stupid thing to say, but I'm not sure there are any basic theorems about perfectoid spaces. I know that in UG maths you make a new object e.g. a ring, and then all of a sudden you can ask if the product of rings is a ring or whatever, but life is not like that on the mountains.</p>",
        "id": 193709362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691353
    },
    {
        "content": "<p>I can imagine that something like that could unlock complex analysis</p>",
        "id": 193709401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586691369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193709357\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193709357\">said</a>:</p>\n<blockquote>\n<p>Do you know any place where we would get a lot of mileage out of assuming a hard theorem that we can state today?</p>\n</blockquote>\n<p>No. FLT is useless.</p>",
        "id": 193709405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691374
    },
    {
        "content": "<p>For complex analysis there is still the issue of figuring out what we're going to integrate around and I would imagine that we'd need a bunch of API for whatever it turns out to be before we can get going</p>",
        "id": 193709411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586691419
    },
    {
        "content": "<p><code>not_succ_le_self</code> in the NNG mentions <code>conv begin</code>, but I'm not sure how one would actually use it. My solution ended up just doing a simple induction on a and is only seven lines, and I don't see where conv could be slotted in</p>",
        "id": 193709804,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586692101
    },
    {
        "content": "<p>Oh that's great. I can quite believe that my solutions aren't optimal.</p>",
        "id": 193709823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586692187
    },
    {
        "content": "<p>The <code>conv</code> thing is just a very poorly-explained description of how to rewrite on only one side of an expression.</p>",
        "id": 193709870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586692224
    },
    {
        "content": "<p>It doesn't seem like either of the solutions for it in the NNG repo uses conv either</p>",
        "id": 193710773,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586693836
    },
    {
        "content": "<p>I thought I just checked that the \"official\" one (in src/game) did</p>",
        "id": 193710816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586693933
    },
    {
        "content": "<p>Ah, right, I was looking at the old ones</p>",
        "id": 193711140,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586694602
    },
    {
        "content": "<p>My solution ended up just being</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">succ_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_ne_succ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">succ_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">(</span><span class=\"n\">succ_inj</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 193711182,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586694634
    },
    {
        "content": "<p>I think my job just ended up being a lot easier because I did the <code>cases</code> before the <code>induction</code> instead of after?</p>",
        "id": 193711237,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586694748
    },
    {
        "content": "<p>Any idea why this doesn't work? </p>\n<div class=\"codehilite\"><pre><span></span>example : ((p ∨ q) → r) ↔ (p → r) ∧ (q → r) := iff.intro\n    (assume h : (p ∨ q) → r,\n\n        have f1 : p → r, from\n            assume h1 : p,\n            h (or.intro_left q h1),\n        have f2 : q → r, from\n            assume h1 : q,\n            h (or.intro_right p h1),\n        and.intro f1 f2,\n    )\n</pre></div>",
        "id": 193712258,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586696511
    },
    {
        "content": "<p>I get error message</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  prod.mk _\nterm\n  λ (h : p ∨ q → r),\n    have f1 : p → r, from λ (h1 : p), h (or.intro_left q h1),\n    have f2 : q → r, from λ (h1 : q), h (or.intro_right p h1),\n    ⟨f1, f2⟩\nhas type\n  (p ∨ q → r) → (p → r) ∧ (q → r) : Prop\nbut is expected to have type\n  ?m_1 : Type ?\nAdditional information:\nc:\\Users\\Victor\\Desktop\\LeanMath\\my_project\\src\\test.lean:139:4: context: switched to simple application elaboration procedure because failed to use expected type to elaborate it, error message\n  type mismatch, term\n    (?m_3, ?m_4)\n  has type\n    ?m_1 × ?m_2 : Type (max ? ?)\n  but is expected to have type\n    (p ∨ q → r) → (p → r) ∧ (q → r) : Prop\n</pre></div>",
        "id": 193712306,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586696546
    },
    {
        "content": "<p>Nvm just an extra comma.</p>",
        "id": 193712346,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586696594
    },
    {
        "content": "<p>Commas are a nightmare to track down in this verbose term mode.</p>",
        "id": 193712444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586696755
    },
    {
        "content": "<p>Start like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>\n\n\n<p>and go on from there, you're always in control then.</p>",
        "id": 193712493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586696811
    },
    {
        "content": "<p>I'm surprised you didn't get some kind of parse error</p>",
        "id": 193712497,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586696822
    },
    {
        "content": "<p>Is <code>(a, )</code> a tuple section (<code>prod.mk a</code>) or something?</p>",
        "id": 193712502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586696843
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">q</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>\n\n\n<p>etc</p>",
        "id": 193712609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586696961
    },
    {
        "content": "<p>Would it make sense to replace the solutions in the repo with simpler ones where viable?</p>",
        "id": 193712754,
        "sender_full_name": "Filip Szczepański",
        "timestamp": 1586697204
    },
    {
        "content": "<p>I don't really ever explicitly link to the repo but I guess there would be no harm in doing so in the future.</p>",
        "id": 193712859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586697372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193712493\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193712493\">said</a>:</p>\n<blockquote>\n<p>Start like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>\n\n\n<p>and go on from there, you're always in control then.</p>\n</blockquote>\n<p>Looks like a good way to do it. Starting from the bottom.</p>",
        "id": 193713175,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586698076
    },
    {
        "content": "<p>Any advice on how to complete:</p>\n<div class=\"codehilite\"><pre><span></span>example : ¬(p ↔ ¬p) :=\n</pre></div>\n\n\n<p>without law of the excluded middle?</p>",
        "id": 193716814,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586704130
    },
    {
        "content": "<p>congratulations on being the 1000th person to ask this question on the chat :-) Yeah, that's a great question! It's in TPIL right?</p>",
        "id": 193716829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586704171
    },
    {
        "content": "<p>It can be done :-)</p>",
        "id": 193716832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586704187
    },
    {
        "content": "<p>This was a tough one, I'll have to think a bit more then</p>",
        "id": 193716896,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586704300
    },
    {
        "content": "<p>And yes, it is in TPIL chapter 3</p>",
        "id": 193716941,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586704339
    },
    {
        "content": "<p>I once wrote a relatively detailed post on how to prove that one via \"chasing underscores\". <a href=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\" title=\"#narrow/stream/113489-new-members/topic/basics/near/185070320\">See here to get \"spoiled\"</a>, though it should be written in a way where you can stop and try things out for yourself at each step.</p>",
        "id": 193717151,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586704699
    },
    {
        "content": "<p>Might have an idea</p>",
        "id": 193717451,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586705221
    },
    {
        "content": "<p>Is it possible to use other examples you've proved?</p>",
        "id": 193717457,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586705239
    },
    {
        "content": "<p>The beginning of that post links to <a href=\"#narrow/stream/113489-new-members/topic/.60or.60.20implication/near/184439048\" title=\"#narrow/stream/113489-new-members/topic/.60or.60.20implication/near/184439048\">this example</a>. I also apparently did <a href=\"#narrow/stream/113489-new-members/topic/Logic.20in.20LEAN/near/136958565\" title=\"#narrow/stream/113489-new-members/topic/Logic.20in.20LEAN/near/136958565\">an exercise from Logic &amp; Proof</a> this way.</p>",
        "id": 193717633,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586705531
    },
    {
        "content": "<p>Well I don't want any spoilers. I just mean if it is possible in lean to reference a proof you have done earlier as an example.</p>",
        "id": 193717739,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586705759
    },
    {
        "content": "<p>The proof I wanted to reference was quite short so I just copied now, but would be good to know for future use.</p>",
        "id": 193717803,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586705844
    },
    {
        "content": "<p>Oh, sorry, I misinterpreted \"you\" in that reply. No, to reference a previous result it has to be a named <code>theorem</code> or <code>lemma</code> or <code>def</code>.</p>",
        "id": 193717884,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586705973
    },
    {
        "content": "<p>I see, I guess that's quite logical.</p>",
        "id": 193717940,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282867\">@Victor Ahlquist</span> there's a canonical hint, if you want it.</p>",
        "id": 193717941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586706048
    },
    {
        "content": "<p>I managed to solve it btw, posting here for anyone interested in my messy solution</p>",
        "id": 193717945,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706063
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example : ¬(p ↔ ¬p) :=\n    (assume h : p ↔ ¬p,\n        have h1 : p → ¬p, from iff.elim_left h,\n        have h2 : ¬p → p, from iff.elim_right h,\n        have h3 : p → false, from\n            (assume f : p,\n                h1 f f\n            ),\n        h3 (h2 h3)\n    )\n</pre></div>",
        "id": 193717948,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706077
    },
    {
        "content": "<p>Also, I <a href=\"https://www.youtube.com/watch?v=POHVMMG7pqE\" title=\"https://www.youtube.com/watch?v=POHVMMG7pqE\">made a video</a> about how I would prove your earlier question <code>((p ∨ q) → r) ↔ (p → r) ∧ (q → r)</code>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"POHVMMG7pqE\" href=\"https://www.youtube.com/watch?v=POHVMMG7pqE\" title=\"https://www.youtube.com/watch?v=POHVMMG7pqE\"><img src=\"https://i.ytimg.com/vi/POHVMMG7pqE/default.jpg\"></a></div>",
        "id": 193717951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586706097
    },
    {
        "content": "<p>Yeah, the hint is \"prove <code>not p</code>\"</p>",
        "id": 193717958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586706122
    },
    {
        "content": "<p>Now watch my video and learn how to prove stuff like this without all this assume have stuff :-)</p>",
        "id": 193718003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586706156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193718003\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193718003\">said</a>:</p>\n<blockquote>\n<p>Now watch my video and learn how to prove stuff like this without all this assume have stuff :-)</p>\n</blockquote>\n<p>I definitely will :)</p>",
        "id": 193718008,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706171
    },
    {
        "content": "<p>Just need a minute to wrap my mind around what I just did, felt like a bunch of symbol pushing</p>",
        "id": 193718022,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706193
    },
    {
        "content": "<p>Well, <code>assume</code> is just long-hand for <code> λ</code>. I wouldn't avoid using <code>have</code>, though I'm used to using \"<code>:=</code>\" instead of \"<code>, from</code>\".</p>",
        "id": 193718224,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586706552
    },
    {
        "content": "<p>Now that you say it, I remember that the notation in NNG was indeed := not from</p>",
        "id": 193718301,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706681
    },
    {
        "content": "<p>I'm going through TPIL so I'm copying the notation from there.</p>",
        "id": 193718314,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586706717
    },
    {
        "content": "<p>TPIL gets on to tactic mode in chapter 5 and for mathematicians tactic mode is far less painful than all this assume stuff.</p>",
        "id": 193718378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586706809
    },
    {
        "content": "<p>The natural number game is 100% tactic mode</p>",
        "id": 193718381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586706826
    },
    {
        "content": "<p>Hmm, for some reason I thought the syntax <code>have h, from blah</code> only worked in term mode, but apparently it can be used in tactic mode as well.</p>",
        "id": 193718610,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586707186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193718378\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193718378\">said</a>:</p>\n<blockquote>\n<p>TPIL gets on to tactic mode in chapter 5 and for mathematicians tactic mode is far less painful than all this assume stuff.</p>\n</blockquote>\n<p>Yeah tactic mode is nicer for getting an overview of the proof and what needs to be done. I'm still intimated by all the lambda notation in term mode as you might have noticed from my code.</p>",
        "id": 193718684,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586707300
    },
    {
        "content": "<p>For me writing all the \"assume\" makes the code more understandable, but I guess that will change as I get more familiar with Lean.</p>",
        "id": 193718969,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586707780
    },
    {
        "content": "<p>Now that you've solved it, did you have a look at the \"spoiler\" posts I linked? Presumably your thought process was not too different from what I described there.</p>\n<p>I think it's good that proving simple logical propositions like this feels like symbol pushing. To me it's like getting used to arithmetic or solving algebraic equations in school. Once you're at the stage where these calculations are \"just symbol pushing\", you can move on to letting a calculator or computer do it for you. In Lean, there are various clever tactics like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cc%20(congruence%20closure)\"><code>cc</code></a> which can solve goals like these automatically.</p>",
        "id": 193719243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586708229
    },
    {
        "content": "<p>Ah sorry forgot about the link. Will check it out after dinner.</p>",
        "id": 193719376,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586708495
    },
    {
        "content": "<p>Thanks for linking those posts.  It helped get a better feel for not being in tactic mode, but having the same strategy for building out the proof.</p>",
        "id": 193719457,
        "sender_full_name": "PV",
        "timestamp": 1586708610
    },
    {
        "content": "<p>Yeah, once I learned to read and use the error messages, term mode became a lot less intimidating. I think in principle we could hack Lean to show info in the goal window when putting your cursor in a term mode proof, but that's beyond my abilities. For example, a while back, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  showed a neat trick where you insert <code>by {}; exact</code> somewhere in a term mode proof and then putting your cursor inside <code>{}</code> shows the context.</p>",
        "id": 193719699,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586708997
    },
    {
        "content": "<p>That was a nice method with the underscores, will probably come in handy in the future. When I did the problem I noticed that p \\r p\\r false is the same as p \\and p \\r false which simplifies to p \\r false.</p>",
        "id": 193721002,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586711153
    },
    {
        "content": "<p>Hey, this thread is for noob members right? I've spent the last few days playing around with lean, I finished the Nat Num game, and yesterday I downloaded elan to my computer.  There's a lotta things I don't understand rn, but currently I'm just wondering how much the base version of Lean knows? It seems to have a \\nat type that works well, and an \\int type as well but I'm not sure if that one works. It just evaluated 5 - 7 to 0? I've heard there are libraries I could download, but I'd also like the practice of building up to the real numbers myself, if that's possible. Anyway, I'm mostly looking for a place to start, can anyone help me out?</p>",
        "id": 193721216,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586711480
    },
    {
        "content": "<p>Numbers 5 and 7 are interpreted as natural numbers by default, so Lean used nat subtraction which has type <code>nat -&gt; nat -&gt; nat</code>. Then read <a href=\"#narrow/stream/113489-new-members/topic/integer.20subtraction.20.2F.20rational.20division/near/192901989\" title=\"#narrow/stream/113489-new-members/topic/integer.20subtraction.20.2F.20rational.20division/near/192901989\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/integer.20subtraction.20.2F.20rational.20division/near/192901989</a></p>",
        "id": 193721344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586711704
    },
    {
        "content": "<p>Defining real numbers from core library only is way too ambitious as a beginner goal. But you can play with mathlib real numbers.</p>",
        "id": 193721354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586711740
    },
    {
        "content": "<p>What's your background <span class=\"user-mention\" data-user-id=\"284744\">@Alex Mira</span> ? Maths/CS/other?</p>",
        "id": 193721402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586711794
    },
    {
        "content": "<p>If you haven't already, follow the instructions <a href=\"https://github.com/leanprover-community/mathlib#installation\" title=\"https://github.com/leanprover-community/mathlib#installation\">here</a> for your OS to install <code>leanproject</code> and to set up a Lean project that depends on mathlib.</p>",
        "id": 193721427,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586711813
    },
    {
        "content": "<p>Took the words out of my mouth :-)</p>",
        "id": 193721437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586711832
    },
    {
        "content": "<p>Alright, I'll definitely do that then. My background is in math, I'm an undergrad at U of T</p>",
        "id": 193721489,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586711899
    },
    {
        "content": "<p>Core Lean knows basic definitions of e.g. a group. Lean's maths library <code>mathlib</code> knows e.g. the theorems a 1st year undergraduate math group theory course, I think it knows one but not all of Sylow's theorems?</p>",
        "id": 193721491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586711902
    },
    {
        "content": "<p>There are some nice resources under \"Learn Lean\" <a href=\"https://leanprover-community.github.io/links/\" title=\"https://leanprover-community.github.io/links/\">on the \"Lean Links\" page</a>.</p>",
        "id": 193721493,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586711918
    },
    {
        "content": "<p>Actually isn't there some link on the docs page where I summarised what mathlib knew last Dec?</p>",
        "id": 193721505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586711951
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/overview.html\" title=\"https://leanprover-community.github.io/mathlib_docs/overview.html\">https://leanprover-community.github.io/mathlib_docs/overview.html</a></p>",
        "id": 193721513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586711980
    },
    {
        "content": "<p>I'm interested though, what Lean calls a Group, it wouldn't technically be the same thing that I think of as a group right? Namely, I'm trying to figure out just how much I can treat Types like they're sets.</p>",
        "id": 193721515,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586711983
    },
    {
        "content": "<p>What Lean thinks a group is is <em>absolutely</em> the same as what you think a group is.</p>",
        "id": 193721521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712000
    },
    {
        "content": "<p>Here's a question for you. Let G be a group. Let g be an element of G. What is g? Is it a set?</p>",
        "id": 193721564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712019
    },
    {
        "content": "<p>For sure G is a set. But what is g?</p>",
        "id": 193721567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712027
    },
    {
        "content": "<p>This is a natural feeling. You simply need to unlearn the lie that people told you you are using set theory.</p>",
        "id": 193721568,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586712027
    },
    {
        "content": "<p>Heh, I figured the answer would be something like that.</p>",
        "id": 193721572,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712050
    },
    {
        "content": "<p>If you set up mathematics in ZFC set theory then <em>everything</em> is a set. This is great for G, which you really want to be a set, but it is not great for g, because you want g to be an \"atom\" of some kind.</p>",
        "id": 193721583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712084
    },
    {
        "content": "<p>Type theory is exactly maths the way you think about them, except that you are <em>very</em> good at inserting inclusion maps and isomorphisms, and computer are not quite there yet (but they try really hard).</p>",
        "id": 193721584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586712097
    },
    {
        "content": "<p>In Type theory, G is a Type, and g is a term. They're different things. g doesn't have elements or anything -- it doesn't even make sense to ask what is inside g. g is an atom.</p>",
        "id": 193721587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712109
    },
    {
        "content": "<p>I can imagine a parallel universe where one needs to instead unlearn the lie that we are using type theory; my question is, then what are we using that is somehow an abstracted version of type theory and set theory? or is the foundation separate from the maths?</p>",
        "id": 193721590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586712114
    },
    {
        "content": "<p>And now is dinner time, so I'll let the IC team continue this explanation.</p>",
        "id": 193721629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586712127
    },
    {
        "content": "<p>I think you're absolutely right Kenny -- I don't think Gauss was using either type theory or set theory</p>",
        "id": 193721633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712140
    },
    {
        "content": "<p>so all this nonsense about foundations and two solutions to Russell's Paradox -- what is the point?</p>",
        "id": 193721640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586712169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284744\">@Alex Mira</span> which U of T? There are several :-)</p>",
        "id": 193721641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712172
    },
    {
        "content": "<p>Toronto</p>",
        "id": 193721642,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712178
    },
    {
        "content": "<p>Russell's Paradox has a profound effect on foundations but a mathematician like Poincare will have heard about it and will have realised that it did not affect him in any way whatsoever</p>",
        "id": 193721650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712222
    },
    {
        "content": "<p>The problem with Lean's type theory, as far as mathematicians are concerned, is that if G and H are different types, then there can be no term x of type G and of type H: distinct types are disjoint by definition.</p>",
        "id": 193721703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712281
    },
    {
        "content": "<p>Alright, sounds like my goal rn is to set up a Lean Project, and from there...what are some good goals to set myself if I want to get familiar with the software?</p>",
        "id": 193721704,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712285
    },
    {
        "content": "<p>You could try working on some undergrad problems, that's how I learnt Lean</p>",
        "id": 193721709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712306
    },
    {
        "content": "<p>Try proving that the composite of two injective functions is injective.</p>",
        "id": 193721726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712345
    },
    {
        "content": "<p>just like how you would learn a natural language: you pick it up by using / reading it a lot</p>",
        "id": 193721793,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586712409
    },
    {
        "content": "<p>and asking us a lot of questions</p>",
        "id": 193721804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586712415
    },
    {
        "content": "<p>with MWEs (Minimal Working Examples)</p>",
        "id": 193721811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586712424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">injective_comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">injective</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193721812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712425
    },
    {
        "content": "<p>Note I write <code>a b : X</code> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>∈</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">a,b\\in X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> because I'm using the type theory conventions. <code>a : X</code> means \"a is a term of type X\" which is just the type theory way of saying \"a is an element of the set X\"</p>",
        "id": 193721830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712464
    },
    {
        "content": "<p>I think people often work through <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving in Lean</a> next. The <a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\" title=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">\"Hitchhiker's Guide\"</a> is a new book that I like too.</p>",
        "id": 193721872,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586712495
    },
    {
        "content": "<p>And now you can forget that you're doing type theory and just think of it all in set theory because at this sort of level they are the same theory.</p>",
        "id": 193721876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712508
    },
    {
        "content": "<p>TPIL is a great way to find out more about type theory in this context.</p>",
        "id": 193721879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712530
    },
    {
        "content": "<p>Heh, I already did that, and the surjective one. Those were the challenges that didn't require imports I think. Thanks so much!</p>",
        "id": 193721881,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712535
    },
    {
        "content": "<p>TPIL?</p>",
        "id": 193721883,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712539
    },
    {
        "content": "<p>Oh</p>",
        "id": 193721888,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712543
    },
    {
        "content": "<p>I am always in more of a hurry to recommend it to CS people than maths people.</p>",
        "id": 193721891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712552
    },
    {
        "content": "<p>Do you know Florian Herzig Alex?</p>",
        "id": 193721898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712568
    },
    {
        "content": "<p>I do! I'm in his Algebra class!</p>",
        "id": 193721903,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586712583
    },
    {
        "content": "<p>We're still waiting on Kevin to write his book on Lean for Generic Mathematicians... <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 193721906,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586712587
    },
    {
        "content": "<p>you might not be able to build the theory of real numbers completely; but you'll be sure to learn a lot on the way</p>",
        "id": 193721909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586712595
    },
    {
        "content": "<p>Yeah, I'm still working on it.</p>",
        "id": 193721926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712602
    },
    {
        "content": "<p>Books are so 20th century though :-/</p>",
        "id": 193721956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712611
    },
    {
        "content": "<p>Florian works in the same area as me.</p>",
        "id": 193721964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712628
    },
    {
        "content": "<p>Part of the reason he has tenure at UT is that I wrote him a nice reference letter :-)</p>",
        "id": 193721983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586712670
    },
    {
        "content": "<p>I think you can still call it a book even if it has a bunch of interactive bells and whistles.</p>",
        "id": 193721989,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586712683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284744\">@Alex Mira</span> if you have got leanproject working on your computer then you can clone the <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game\" title=\"https://github.com/ImperialCollegeLondon/group-theory-game\">group theory game</a> and open it in VS Code and then fill in the sorrys in src/group/level01.lean</p>",
        "id": 193722336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586713233
    },
    {
        "content": "<p>This is a work in progress</p>",
        "id": 193722338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586713240
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>leanproject get ImperialCollegeLondon/group-theory-game\n</pre></div>\n\n\n<p>and then in VS Code go to \"open folder\" and then open the <code>group-theory-game</code> folder which just appeared in the directory where you were when you ran <code>leanproject</code>.</p>",
        "id": 193722405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586713359
    },
    {
        "content": "<p>It's really hard to get started with the group theory game, because I only give you the minimal axioms needed for a group. Proving <code>mul_one</code> and <code>mul_right_inv</code> is a bit of a challenge. Then it gets much easier.</p>",
        "id": 193722467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586713446
    },
    {
        "content": "<p>Sounds fun! Ill definitely try it out.</p>",
        "id": 193722556,
        "sender_full_name": "Alex Mira",
        "timestamp": 1586713602
    },
    {
        "content": "<p>Is there a tactic that applies a function to both sides of an equality?</p>",
        "id": 193724631,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586716737
    },
    {
        "content": "<p><code>replace h := congr_arg f h</code></p>",
        "id": 193724745,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586716903
    },
    {
        "content": "<p>thanks</p>",
        "id": 193724875,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586717055
    },
    {
        "content": "<p>This is something which mathematicians frequently want to do -- did <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ever write a tactic to do this?</p>",
        "id": 193725045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586717307
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun</a></p>",
        "id": 193725070,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586717360
    },
    {
        "content": "<p><code>apply_fun f at h</code> is a better answer to this question nowadays. It feels more natural.</p>",
        "id": 193725131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586717436
    },
    {
        "content": "<p>We should have a tactic named <code>have_fun</code>.</p>",
        "id": 193725154,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586717502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193725131\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193725131\">said</a>:</p>\n<blockquote>\n<p><code>apply_fun f at h</code> is a better answer to this question nowadays. It feels more natural.</p>\n</blockquote>\n<p>Yeah it does. Now the second problem is: How do I make a function</p>",
        "id": 193725564,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718115
    },
    {
        "content": "<p>I guess I shouldn't start defining things carelessly. I just want a function that multiplies by an element from left/right in the group theory game.</p>",
        "id": 193725610,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718150
    },
    {
        "content": "<p>wait, what is the group theory game?</p>",
        "id": 193725612,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586718168
    },
    {
        "content": "<p>it doesn't exist yet</p>",
        "id": 193725614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718177
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/group-theory-game\" title=\"https://github.com/ImperialCollegeLondon/group-theory-game\">https://github.com/ImperialCollegeLondon/group-theory-game</a></p>",
        "id": 193725622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718195
    },
    {
        "content": "<p>multiplication on the left by <code>g</code> is <code>((*)g)</code></p>",
        "id": 193725678,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586718261
    },
    {
        "content": "<p><code>apply_fun (λ x, g * x) at h,</code></p>",
        "id": 193725679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718263
    },
    {
        "content": "<p>multiplication on the right by <code>g</code> is <code>(*g)</code></p>",
        "id": 193725681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586718267
    },
    {
        "content": "<p>the power of lambda.</p>",
        "id": 193725689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718283
    },
    {
        "content": "<p>Thanks, I'll try to learn to handle the lambdas</p>",
        "id": 193725767,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718390
    },
    {
        "content": "<p><code>λ x, y</code> just means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\mapsto y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span></p>",
        "id": 193725777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718420
    },
    {
        "content": "<p>It's a way of defining a function without giving it a name</p>",
        "id": 193725783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718441
    },
    {
        "content": "<p>Yeah I know, I'm just not used to the notation. Chapter 2 of TPIL had a lot of lambda functions</p>",
        "id": 193725789,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718458
    },
    {
        "content": "<p>Is it possible to use the apply_fun to a goal?</p>",
        "id": 193725849,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718506
    },
    {
        "content": "<p>no</p>",
        "id": 193725851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718512
    },
    {
        "content": "<p>If I had to prove x=y and I was allowed to multiply both sides by 0, I'd be in very good shape</p>",
        "id": 193725854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718530
    },
    {
        "content": "<p>Haha that's true.</p>",
        "id": 193725855,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718541
    },
    {
        "content": "<p>Hmm but wait that wouldn't work anyway.</p>",
        "id": 193725860,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718565
    },
    {
        "content": "<p>Your question is \"if f(x)=f(y) then does x=y?\"</p>",
        "id": 193725863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718584
    },
    {
        "content": "<p>and the answer is \"only if f is injective\"</p>",
        "id": 193725865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718592
    },
    {
        "content": "<p>applying it a hypothesis, the question is \"if x = y, does f(x)=f(y)\" which is a rather different question</p>",
        "id": 193725910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718614
    },
    {
        "content": "<p>Ah right.</p>",
        "id": 193725939,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718679
    },
    {
        "content": "<p>Changing the goal is working backwards.</p>",
        "id": 193726003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718805
    },
    {
        "content": "<p>But wait</p>",
        "id": 193726004,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718810
    },
    {
        "content": "<p>If your goal is <code>f x = f y</code> you can change it to <code>x = y</code> with <code>apply congr_arg</code></p>",
        "id": 193726050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718866
    },
    {
        "content": "<p>Say I had goal a *1 = a <em>1, and for some reason I do not use refl immediately. Then wouldn't it be possible to do something like apply apply_fun (\\lambda x. a</em>x), to get 1=1 instead</p>",
        "id": 193726052,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718873
    },
    {
        "content": "<p>Yeah that's what I want</p>",
        "id": 193726057,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718895
    },
    {
        "content": "<p>No, because <code>apply_fun</code> does not work on goals.</p>",
        "id": 193726064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718903
    },
    {
        "content": "<p>The fact that it is logically sometimes true doesn't mean that the tactic will ever work.</p>",
        "id": 193726069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718921
    },
    {
        "content": "<p>Yea happly_fun was a placeholder for another similar function</p>",
        "id": 193726070,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586718926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726050\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726050\">said</a>:</p>\n<blockquote>\n<p>If your goal is <code>f x = f y</code> you can change it to <code>x = y</code> with <code>apply congr_arg</code></p>\n</blockquote>\n<p><code>congr' 1</code></p>",
        "id": 193726073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586718931
    },
    {
        "content": "<p>Right</p>",
        "id": 193726074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718934
    },
    {
        "content": "<p>You have to write <code> `a * 1` </code> or else Zulip thinks you're trying to put something in italics.</p>",
        "id": 193726119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586718986
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 193726129,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586719019
    },
    {
        "content": "<p>You can't get from <code>a * x = a * y</code> to <code>x = y</code> because <code>a</code> could be 0.</p>",
        "id": 193726135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586719035
    },
    {
        "content": "<p>Not in a group</p>",
        "id": 193726146,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586719073
    },
    {
        "content": "<p>Sure</p>",
        "id": 193726180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586719082
    },
    {
        "content": "<p>Can you prove it in a group though?</p>",
        "id": 193726186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586719100
    },
    {
        "content": "<p>Do I specify the function after congr_arg?</p>",
        "id": 193726187,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586719100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726186\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726186\">said</a>:</p>\n<blockquote>\n<p>Can you prove it in a group though?</p>\n</blockquote>\n<p>Yep just did :)</p>",
        "id": 193726206,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586719112
    },
    {
        "content": "<p><code>#check @congr_arg</code> to see what you have to specify</p>",
        "id": 193726214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586719132
    },
    {
        "content": "<p>Doing the mul_one now, which is why I asked the above question. Then I realized I would need mul_one to use that tactic but still good to know the answer.</p>",
        "id": 193726225,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586719160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726214\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726214\">said</a>:</p>\n<blockquote>\n<p><code>#check @congr_arg</code> to see what you have to specify</p>\n</blockquote>\n<p>Thanks</p>",
        "id": 193726229,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586719168
    },
    {
        "content": "<p><code>apply</code> is a clever tactic. It unifies the conclusion of what you're applying with the goal and then solves the corresponding puzzle</p>",
        "id": 193726843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586720261
    },
    {
        "content": "<p>That was a short and sweet game :)</p>",
        "id": 193727902,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586721891
    },
    {
        "content": "<p>It's not finished yet :-)</p>",
        "id": 193727913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586721909
    },
    {
        "content": "<p>So here's something I don't know how to do</p>",
        "id": 193727919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586721921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726843\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193726843\">said</a>:</p>\n<blockquote>\n<p><code>apply</code> is a clever tactic. It unifies the conclusion of what you're applying with the goal and then solves the corresponding puzzle</p>\n</blockquote>\n<p>I usually like apply, but now I managed without using it a single time</p>",
        "id": 193727920,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586721921
    },
    {
        "content": "<p>In the natural number game, you prove <code>add_left_cancel</code> and <code>add_assoc</code> and <code>add_comm</code> and you tag them all with <code>simp</code> and then you can prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo>+</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>c</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a+(b+(c+d)))=(d+b)+(c+a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span> by <code>simp</code></p>",
        "id": 193727978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586721973
    },
    {
        "content": "<p>I am a bit unclear about what the analogous story is for groups</p>",
        "id": 193727983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586721994
    },
    {
        "content": "<p>and I am even more unclear about what the story is for proving implications</p>",
        "id": 193727991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722007
    },
    {
        "content": "<p>i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>h</mi><mo>=</mo><mi>g</mi><mi>k</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>h</mi><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">gh=gk\\implies h=k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span></p>",
        "id": 193727995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722018
    },
    {
        "content": "<p>My gut feeling is that you should prove a few of them and then let AI take over</p>",
        "id": 193728005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722045
    },
    {
        "content": "<p>but the analogous story for rings is the theory of Groebner bases</p>",
        "id": 193728016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722070
    },
    {
        "content": "<p>There was a discussion <a href=\"#narrow/stream/113488-general/topic/.60group.60.20tactic\" title=\"#narrow/stream/113488-general/topic/.60group.60.20tactic\">here</a></p>",
        "id": 193728077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722129
    },
    {
        "content": "<p>but I knew a bit less about confluent rewrites back then</p>",
        "id": 193728082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722142
    },
    {
        "content": "<p>Groebner bases are for commutative rings. For groups this is the word problem, and it is undecidable in general.</p>",
        "id": 193728106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586722172
    },
    {
        "content": "<p>For implications it's simpler than that</p>",
        "id": 193728167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722235
    },
    {
        "content": "<p><a href=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\" title=\"https://www3.nd.edu/~andyp/notes/OneRelator.pdf\">https://www3.nd.edu/~andyp/notes/OneRelator.pdf</a></p>",
        "id": 193728206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722310
    },
    {
        "content": "<p>The statement <code>forall G (a b c ... z : G), eqn1 -&gt; eqn2 -&gt; ... -&gt; eqnN</code> is the same as asking whether <code>eqnN</code> holds in the free group presented by the assumptions.</p>",
        "id": 193728255,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586722332
    },
    {
        "content": "<p>Okay yes, for a single assumption</p>",
        "id": 193728258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586722339
    },
    {
        "content": "<p>The non-obvious thing we ran into was <code>a * b * c * d = 1 -&gt; d * a * b * c = 1</code></p>",
        "id": 193728272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722376
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/.60group.60.20tactic/near/191541928\" title=\"#narrow/stream/113488-general/topic/.60group.60.20tactic/near/191541928\">Patrick's <code>group</code> tactic</a> seems to use a finite list of theorems</p>",
        "id": 193728349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586722491
    },
    {
        "content": "<p>can Section 3 (the solution to the word problem for one-relator groups) be formalized (easily)?</p>",
        "id": 193728364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586722529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193728272\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193728272\">said</a>:</p>\n<blockquote>\n<p>The non-obvious thing we ran into was <code>a * b * c * d = 1 -&gt; d * a * b * c = 1</code></p>\n</blockquote>\n<p>Non-trivial for a computer to solve?</p>",
        "id": 193728410,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586722563
    },
    {
        "content": "<blockquote>\n<p>can Section 3 (the solution to the word problem for one-relator groups) be formalized (easily)?</p>\n</blockquote>\n<p>How do we express \"the word problem is solvable\" in Lean? Theorem 2.1 looks like a good first target in any case.</p>",
        "id": 193728712,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586723091
    },
    {
        "content": "<p>decidable_eq</p>",
        "id": 193728903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586723410
    },
    {
        "content": "<p>what's the name of the obvious term of type <code>inhabited \\a \\to \\a</code> ?</p>",
        "id": 193733229,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1586730597
    },
    {
        "content": "<p>you should find it either by jump-to-definition to <code>inhabited</code> and look nearby, or <code>inhabited.&lt;completion&gt;</code></p>",
        "id": 193733308,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586730695
    },
    {
        "content": "<p>Thanks for the advice! I think the term is <code>default</code><br>\noh, more accurate is that if <code>q: inhabited \\a</code> then <code>q.default:\\a</code></p>",
        "id": 193733363,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1586730811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193718610\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193718610\">said</a>:</p>\n<blockquote>\n<p>Hmm, for some reason I thought the syntax <code>have h, from blah</code> only worked in term mode, but apparently it can be used in tactic mode as well.</p>\n</blockquote>\n<p>This is due to some clever tricks in tactic parsing. <code>have</code> allows you to omit any of its pieces and it makes a subgoal if you skip the proof of the <code>have</code>, so <code>have h : foo,</code> will make a subgoal proving <code>|- foo</code>, and <code>have h,</code> will make a subgoal proving <code>?m_1</code>. The comma splits this into two tactics, and the second part is <code>from blah</code>, so <code>from</code> needs to be a tactic. So I made it an alias for <code>exact</code>, and then <code>from blah</code> will make <code>blah</code> the proof of <code>?m_1</code> and then the type gets determined and everything else works out.</p>",
        "id": 193735377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586734501
    },
    {
        "content": "<p>That's great! Thanks for the explanation.</p>",
        "id": 193735662,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586735075
    },
    {
        "content": "<p>I try to only use <code>from</code> after <code>have</code>, but it's one character shorter and I sometimes see Kenny using it for code golfing :)</p>",
        "id": 193735680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586735121
    },
    {
        "content": "<p>In French you could save two more characters</p>",
        "id": 193735891,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586735559
    },
    {
        "content": "<p>Are we going to localize lean then?</p>",
        "id": 193736025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586735827
    },
    {
        "content": "<p>I never really understood why non-english programmers were content to just use english programming languages</p>",
        "id": 193736081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586735929
    },
    {
        "content": "<p>unicode support is still terrible in lots of mainstream languages</p>",
        "id": 193736302,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586736314
    },
    {
        "content": "<p>documentation tends to be written in english, it makes it easier to search stackoverflow if you use english terminology</p>",
        "id": 193736366,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586736389
    },
    {
        "content": "<p>for a lot of domain-specific software technology, there is no translation of the terminology</p>",
        "id": 193736383,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586736464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282867\">Victor Ahlquist</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193717945\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193717945\">said</a>:</p>\n<blockquote>\n<p>I managed to solve it btw, posting here for anyone interested in my messy solution</p>\n</blockquote>\n<p>Here's a cute proof, observing that <code>tidy</code> can follow the hint:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193737668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586739069
    },
    {
        "content": "<p>How do we do syntax highlighting for Lean in zulipchat? I've tried triple grave accent followed by <code>lean</code>, but it doesn't work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">forallx</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">x</span>\n</pre></div>\n\n\n<p>edit: ok it only didn't work in \"Drafts\"</p>",
        "id": 193748512,
        "sender_full_name": "Chris M",
        "timestamp": 1586759431
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 193782863,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586791443
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def prime (n : ℕ) : Prop :=  n &gt; 1 ∧ (∀ (k : ℕ), k ∣ n → (k = 1) ∨ (k = n))\n\ndef infinitely_many_primes : Prop := (∀ (n : ℕ), ∃ (prime p), p &gt; n))\n</pre></div>\n\n\n<p>I'm trying to define \"infinitely many primes\" but this gets a ton of errors. Not sure if any of it is right.</p>",
        "id": 193791289,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586795960
    },
    {
        "content": "<p>Errors at 2nd line, first is ok.</p>",
        "id": 193791312,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586795974
    },
    {
        "content": "<p>Would this work for you?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>  <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">infinitely_many_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193791655,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586796164
    },
    {
        "content": "<p>Thanks that looks much better. Now I understand what Lean meant by \"prime is not a type\"</p>",
        "id": 193791748,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586796229
    },
    {
        "content": "<p>Which of these ways of writing is preferable in Lean?</p>\n<div class=\"codehilite\"><pre><span></span>def goldbach_conjecture : Prop := ∀ (n : ℕ), even n ∧ n &gt; 2 →  ∃ (p1 p2 : ℕ), prime p1 ∧ prime p2 ∧ n = p1 + p2\ndef goldbach_conjecture : Prop := ∀ (n : ℕ),  ∃ (p1 p2 : ℕ), even n ∧ n &gt; 2 → prime p1 ∧ prime p2 ∧ n = p1 + p2\n</pre></div>",
        "id": 193794092,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586797586
    },
    {
        "content": "<p>The first one seems better but mostly because it's what one actually means to say</p>",
        "id": 193794793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586797980
    },
    {
        "content": "<p>Yes, the first one looks like it will play better with Lean too, but I don't think I've ever seen a statement written like that before.</p>",
        "id": 193795118,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586798141
    },
    {
        "content": "<p>Although I guess I haven't seen many formalizations.</p>",
        "id": 193795138,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586798152
    },
    {
        "content": "<p>I think I'd write the first one like this, removing all the <code>∧</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p2</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p1</span> <span class=\"bp\">+</span> <span class=\"n\">p2</span>\n</pre></div>",
        "id": 193795268,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586798203
    },
    {
        "content": "<p>That does look more Leany</p>",
        "id": 193795470,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586798290
    },
    {
        "content": "<p>compare <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/separation.lean#L344\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/separation.lean#L344\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/separation.lean#L344</a> for example</p>",
        "id": 193796715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586798839
    },
    {
        "content": "<p>Are you saying that <code>normal_space</code> could be easier to use if the ands are removed, or are you saying that the way it's done in mathlib is a good idea?</p>",
        "id": 193796932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586798938
    },
    {
        "content": "<p>what would you replace the ands with?</p>",
        "id": 193796994,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586798968
    },
    {
        "content": "<p>I'm just saying this is normal Lean code</p>",
        "id": 193797000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586798973
    },
    {
        "content": "<p><code>exists (u) (v) (hu : is_open u) (hv : is_open v) (hsu : s \\sub u) ...</code></p>",
        "id": 193797172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586799043
    },
    {
        "content": "<p>Also, it really doesn't make much difference whether you pass two hypotheses as an <code>and</code> or separately. This is just style.<br>\nThe main thing is to put the assumptions and the quantifiers in the right order</p>",
        "id": 193797180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586799047
    },
    {
        "content": "<p>Ah, well, this seems kind of worse but also not important</p>",
        "id": 193797219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586799069
    },
    {
        "content": "<p><code>..., true</code></p>",
        "id": 193797281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586799099
    },
    {
        "content": "<p>I guess we could get everything with <code>rcases</code> either way.</p>",
        "id": 193797292,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586799104
    },
    {
        "content": "<p>Or a <code>let</code>, and it will even be the same syntax</p>",
        "id": 193797456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586799183
    },
    {
        "content": "<p>On the other hand, if we have to prove a goal of the form <code>exists (u) (v) (hu : is_open u) ...</code>, then we can write <code>use [u, v, hu, ...]</code>, whereas if it's <code>exists (u) (v), is_open u ∧ ...</code> then it'd be <code>use [u, v, \\&lt;hu, ... \\&gt;]</code>. Slightly more annoying but not a big deal.</p>\n<p>In the case of <code>normal_space</code>, it's more important that it's consistent with all the other separation statements in the file that use ands.</p>",
        "id": 193798738,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586799920
    },
    {
        "content": "<p>Ah, I just always use <code>refine</code>, so it makes no difference there as well</p>",
        "id": 193798804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586799960
    },
    {
        "content": "<p>I've had issues getting various <code>assoc</code> tactics to cooperate. I think I'm misunderstanding something about the way they're supposed to be used. For example, in this proof of <code>zero_add</code> , I want to rewrite the LHS of my goal state so I can apply my inductive hypothesis, but I get an error that Lean couldn't find an instance of the pattern even though I clearly see that the pattern is there. Does it think the <code>k</code> I'm feeding <code>add_assoc</code> is different from the <code>k</code> that's in the goal state? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Edit: added the <code>import</code> and <code>open</code> statements before the theorem.<br>\n<a href=\"/user_uploads/3121/iXLtQKw_HjOGdRpZtgUnWlon/Screen-Shot-2020-04-13-at-3.41.15-PM.png\" title=\"Screen-Shot-2020-04-13-at-3.41.15-PM.png\">Screen-Shot-2020-04-13-at-3.41.15-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iXLtQKw_HjOGdRpZtgUnWlon/Screen-Shot-2020-04-13-at-3.41.15-PM.png\" title=\"Screen-Shot-2020-04-13-at-3.41.15-PM.png\"><img src=\"/user_uploads/3121/iXLtQKw_HjOGdRpZtgUnWlon/Screen-Shot-2020-04-13-at-3.41.15-PM.png\"></a></div>",
        "id": 193812904,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586807249
    },
    {
        "content": "<p>it works for me</p>",
        "id": 193813483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586807590
    },
    {
        "content": "<p>MWE?</p>",
        "id": 193813503,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586807597
    },
    {
        "content": "<p>Just try rw \\l add_assoc</p>",
        "id": 193813930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586807825
    },
    {
        "content": "<p>what I meant is, since this snippet doesn't even compile, that the following works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zero_add&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193813982,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586807865
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 193813989,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586807871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193813982\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193813982\">said</a>:</p>\n<blockquote>\n<p>what I meant is, since this snippet doesn't even compile, that the following works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zero_add&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>Sorry, I should have included the <code>import data.nat.basic</code> and <code>open nat</code> at the beginning. I just added those. This was part of a larger proof and I forgot about those dependencies.</p>",
        "id": 193820086,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586811270
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193820155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586811316
    },
    {
        "content": "<p>This works for me.</p>",
        "id": 193820291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586811392
    },
    {
        "content": "<p>Can you please post a fully working code snippet which shows your problem? So far you have not done this. PS don't edit, just post below.</p>",
        "id": 193820322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586811418
    },
    {
        "content": "<p>I restarted my computer for an unrelated reason and now the issue seems to be resolved. This has happened to me before in Lean and I don't completely understand why. </p>\n<p>Anyway here is a working code snippet. I'll repost instead of editing in the future. Thanks for all your help!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_add&#39;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193821691,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586812122
    },
    {
        "content": "<p>I have certainly seen weird errors in the past which have been fixed by just quitting VS Code and restarting it again.</p>",
        "id": 193821745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586812158
    },
    {
        "content": "<p>There are certain errors about memory overflows which really screw Lean up (and probably screw up any computer program). If you get one of those you should probably at the very least restart Lean (with ctrl-shift-P restart Lean)</p>",
        "id": 193821846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586812210
    },
    {
        "content": "<p>but it continues to function just about normally if you don't.</p>",
        "id": 193821887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586812230
    },
    {
        "content": "<p>These errors were happening in a file of ~500 lines. This file also had a few other unrelated unresolved errors. Could that be a factor?</p>",
        "id": 193822157,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586812399
    },
    {
        "content": "<p>Yes! Your actual problem is the first error in the file.</p>",
        "id": 193822184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586812417
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2020/03/24/no-errors/\" title=\"https://xenaproject.wordpress.com/2020/03/24/no-errors/\">https://xenaproject.wordpress.com/2020/03/24/no-errors/</a></p>",
        "id": 193822211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586812436
    },
    {
        "content": "<p>Good to know. I was leaving errors in place so that it would be easier to come back to them if I was working through a long set of problems, but I guess I should stop doing that.</p>",
        "id": 193822652,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586812685
    },
    {
        "content": "<blockquote>\n<p>Sometimes I see students whose file is absolutely full of errors. Their file is 400 lines long, getting really slow, and has 23 errors. They ask me why something doesn’t work, and I know from experience that the answer might be of the form “because something you wrote 100 lines up which caused an error and means that things aren’t the way you think they are”. Some people can get into a real state. </p>\n</blockquote>\n<p>LOL literally me.</p>",
        "id": 193822720,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1586812734
    },
    {
        "content": "<p>You are but one of many ;-)</p>",
        "id": 193822867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586812817
    },
    {
        "content": "<p>I was reading Kevin Buzzard's recent post \"Proofs are not programs\" &lt; <a href=\"https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/\" title=\"https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/\">https://xenaproject.wordpress.com/2019/06/15/proofs-are-not-programs/</a> &gt; which argues that only in constructive logic is the Curry-Howard correspondence held (proofs are programs) and that in general in ZFC with the axiom of choice and excluded middle etc that Curry-Howard does not apply; which is why is why in lean we label certain things as noncomputable. However, looking at <a href=\"https://en.wikipedia.org/wiki/Lambda-mu_calculus\" title=\"https://en.wikipedia.org/wiki/Lambda-mu_calculus\">https://en.wikipedia.org/wiki/Lambda-mu_calculus</a>  it seems to suggest that there are more sophisticated lambda calculi that can model \"classical logic\" with excluded middle etc and still maintain a form of the curry-howard correspondence.  Is lean's type system CoC just not rich enough to model classical deductions with computational content?</p>",
        "id": 193825071,
        "sender_full_name": "Brandon B",
        "timestamp": 1586814101
    },
    {
        "content": "<p>I bet they can't model the axiom of choice.</p>",
        "id": 193825528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586814404
    },
    {
        "content": "<p>Lean's system is rich enough to model that -- and that is why I'm still here.</p>",
        "id": 193825582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586814441
    },
    {
        "content": "<p>urgh, if you really want to go into gory detail, you could try chapter 8 of <a href=\"http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf\" title=\"http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf\">http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf</a></p>",
        "id": 193827361,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586815548
    },
    {
        "content": "<p>but this is written for computer scientists studying type theory</p>",
        "id": 193827557,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586815666
    },
    {
        "content": "<p>gaargh it's got those weird fractions in :-/</p>",
        "id": 193828306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586816091
    },
    {
        "content": "<p>that's why I prefixed my statement with \"urgh\", but maybe I should've added \"argh\" and \"oh no, warning: theoretical computer science\"</p>",
        "id": 193828690,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586816329
    },
    {
        "content": "<p>The basic idea behind computational semantics for EM (or more simply, double negation elimination) is that you put everything in continuation passing style, the logical equivalent being putting double negations on everything, and then all the classical theorems become intuitionistically provable, and the computational semantics are that of call/cc or exception handling.</p>\n<p>If you wanted to do something similar with full choice, I think you could do it like so: Suppose you want to produce an element of type <code>A</code> satisfying <code>p</code>. Save the current continuation, and then start enumerating well formed terms of type <code>A</code>. Return the first one you find (whether or not it satisfies <code>p</code>). Later, the program may later discover that you lied to it and will prove that the element does not in fact satisfy <code>p</code>, deriving a contradiction. When you call <code>false.elim</code> on this proof of <code>false</code>, the eliminator goes back to the original continuation, \"rewinding the universe\" to the original state, whereupon it tries the next term it finds.</p>\n<p>This should satisfy type correctness, but it is not strongly normalizing as you might be enumerating terms forever looking for one that satisfies <code>p</code>.</p>",
        "id": 193832862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819185
    },
    {
        "content": "<p>as far as i can tell, there's a catch to this lambda-mu-stuff. you won't get \"computational content\" in the traditional sense, otherwise every proposition would be decidable (in the sense that a TM can output yes/no correctly and halt). so i don't think kevin is wrong here, but you can stretch the definitions a bit to get something that you might call \"computational content\" again.</p>\n<p>as in the link by andrew, the trick is that you enter a special \"continuation world\" whenever you work with some classical proof that you'd write with LEM or peirce's law. i think mario has described this with time travel before somewhere in this chat, which is quite a cool analogy. the problem is that this \"continuation world\" does not behave like the normal world in which you program things. for instance, you can't just use LEM, print 0 in the first path and print 1 in the second path, because then you'd have a decider for every proposition.</p>\n<p>so now some stuff that i was wondering about, please correct me if it's nonsense.<br>\nso when you've got some proof that lives in this continuation world, you need to leave it again so that you can actually observe the results of your program. from what i understand, to do this, you eventually need to construct the object, and if you apply a continuation with your constructed object, the whole chain of continuations unfolds itself.<br>\nso in the end, this type of computational content turns these classical proofs into powerful control operators, but to do anything \"useful\" with them, you eventually need to perform the construction.</p>\n<p>i think that there's something similar for choice, but i can't find the paper right now and i didn't understand it well to begin with.</p>",
        "id": 193832869,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586819189
    },
    {
        "content": "<p>You can leave the continuation world fairly simply by applying the CPS converted program to the continuation <code>print</code></p>",
        "id": 193833137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819357
    },
    {
        "content": "<p>You can do so with a proof of <code>em p</code> and it will print <code>p is false</code></p>",
        "id": 193833172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819381
    },
    {
        "content": "<p>... which is not very helpful</p>",
        "id": 193833302,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586819449
    },
    {
        "content": "<p>It's sort of \"false until proven true\"</p>",
        "id": 193833320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819464
    },
    {
        "content": "<p>It's something like a maximal overestimate of soundness that is still type correct</p>",
        "id": 193833415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819525
    },
    {
        "content": "<p>which is to say, it's not sound</p>",
        "id": 193833433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819534
    },
    {
        "content": "<p>but it's also not inconsistent</p>",
        "id": 193833490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586819563
    },
    {
        "content": "<p>if you want to use the <code>not p</code> you get from em, you need a proof of <code>p</code>.  so you apply it to <code>not p</code> and then the program will happily continue on the path where <code>p</code> is true without continuations, right?</p>",
        "id": 193833720,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586819719
    },
    {
        "content": "<p>would this stuff help with automation in theorem provers?</p>",
        "id": 193835363,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586821063
    },
    {
        "content": "<p>I know that <code>Cont A</code> is a monad, and this is sometimes used for exception passing in haskell, but for the most part I just see this as a cute trick. It is generally best to say what you mean when programming and these techniques push somewhat in the wrong direction</p>",
        "id": 193835488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586821201
    },
    {
        "content": "<p>Are you able to do a \"use\" like tactic on a premise in this scenario to choose some value for c?<br>\ncase or.inr<br>\na h : mynat,<br>\nhdd : ∃ (c : mynat), a = h + c<br>\n⊢ a = h+c</p>",
        "id": 193841597,
        "sender_full_name": "PV",
        "timestamp": 1586826735
    },
    {
        "content": "<p>Where does the <code>c</code> in your goal come from? since it's not in your list of local hypotheses.</p>\n<p>Also is <code>hdd</code> is a proof that there is a <code>c</code> such that <code>a = h + c</code>, but you're required to prove that <code>a = h + c</code> for all <code>c</code></p>",
        "id": 193841863,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586827071
    },
    {
        "content": "<p>Also seeing that your goal is <code>mynat</code>, I presume this is the natural numbers game?</p>",
        "id": 193841917,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586827097
    },
    {
        "content": "<p>yea, i think i may have ended up in a name collision</p>",
        "id": 193841930,
        "sender_full_name": "PV",
        "timestamp": 1586827116
    },
    {
        "content": "<p>Is that the whole goal/tactic state? Even if there was a name collision <code>c</code> should still be there.</p>",
        "id": 193841956,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586827157
    },
    {
        "content": "<p>So I guess post your code (and which level it's for)?</p>",
        "id": 193841975,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586827188
    },
    {
        "content": "<p>code here:<br>\ninduction b with h hd,<br>\nright,<br>\napply zero_le,<br>\nleft,<br>\napply le_succ,<br>\ncases hd with hh hdd,<br>\nassumption,<br>\nrw le_iff_exists_add at hdd,<br>\nrw le_iff_exists_add,<br>\nuse 0,<br>\nsymmetry,<br>\nsimp,</p>\n<p>level 9 on inequality world.</p>",
        "id": 193842128,
        "sender_full_name": "PV",
        "timestamp": 1586827380
    },
    {
        "content": "<p>Level 9, so <code>le_total</code>?</p>\n<p>I just pasted your code into the Natural Numbers Game, and the tactic state is</p>\n<div class=\"codehilite\"><pre><span></span>a h : mynat,\nhdd : ∃ (c : mynat), a = h + c\n⊢ a = h\n</pre></div>\n\n\n<p>Which is different to what you posted... Also none of your hypotheses are useful here, so you've gone down the wrong path</p>",
        "id": 193842269,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586827564
    },
    {
        "content": "<p>Yeah you definitely have, going back up a bit your goal is </p>\n<div class=\"codehilite\"><pre><span></span>case or.inr\na h : mynat,\nhdd : h ≤ a\n⊢ a ≤ h\n</pre></div>",
        "id": 193842296,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586827644
    },
    {
        "content": "<p>ahh thanks</p>",
        "id": 193842355,
        "sender_full_name": "PV",
        "timestamp": 1586827746
    },
    {
        "content": "<p>What is the next step I could try to prove this? i'm reading page 63 of Hitchhiker's Guide but would like to do away with <code>simp</code>.</p>\n<div class=\"codehilite\"><pre><span></span>α : Type,\n_inst_1 : inhabited α,\nxs_hd : α,\nxs_tl : list α,\nxs_ih : map (λ (x : α), x) xs_tl = xs_tl\n⊢ map (λ (x : α), x) (xs_hd :: xs_tl) = xs_hd :: xs_tl\n</pre></div>",
        "id": 193849910,
        "sender_full_name": "Nam",
        "timestamp": 1586839273
    },
    {
        "content": "<p>I haven't read it, but try <code>unfold map</code> or <code>rw map</code>?</p>",
        "id": 193849973,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586839355
    },
    {
        "content": "<p>oh, nice! thank you. they both work. i didn't think of <code>rewrite</code>.</p>",
        "id": 193849999,
        "sender_full_name": "Nam",
        "timestamp": 1586839433
    },
    {
        "content": "<p><code>unfold</code> seems to be better</p>",
        "id": 193850187,
        "sender_full_name": "Nam",
        "timestamp": 1586839687
    },
    {
        "content": "<p>now i'm stuck at</p>",
        "id": 193850859,
        "sender_full_name": "Nam",
        "timestamp": 1586840657
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>case list.cons\nα β : Type,\nf : α → β,\nys : list α,\nxs_hd : α,\nxs_tl : list α,\nxs_ih : map f (xs_tl ++ ys) = map f xs_tl ++ map f ys\n⊢ map f (xs_hd :: xs_tl ++ ys) = map f (xs_hd :: xs_tl) ++ map f ys\n</pre></div>",
        "id": 193850862,
        "sender_full_name": "Nam",
        "timestamp": 1586840665
    },
    {
        "content": "<p><code>unfold</code> does not pop <code>xs_hd</code> out of <code>map</code></p>",
        "id": 193850868,
        "sender_full_name": "Nam",
        "timestamp": 1586840702
    },
    {
        "content": "<p><code>rw map_append</code>?</p>",
        "id": 193850882,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586840736
    },
    {
        "content": "<p><code>map_append</code> is what i want to prove ;)</p>",
        "id": 193850889,
        "sender_full_name": "Nam",
        "timestamp": 1586840761
    },
    {
        "content": "<p>Ahh.</p>",
        "id": 193850929,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586840783
    },
    {
        "content": "<p>i see. i need to make the input list (<code>xs_hd :: xs_tl ++ ys</code>) into the right form with <code>rewrite list.cons_append</code>, then the unfold works nicely.</p>",
        "id": 193851076,
        "sender_full_name": "Nam",
        "timestamp": 1586841049
    },
    {
        "content": "<p>yeah, I was gonna suggest you prove <code>cons_append</code> but I guess using the one provided is fine :)</p>",
        "id": 193851085,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586841078
    },
    {
        "content": "<p>Are von Neumann algebras (or C^* algebras) a long way from being defined (in terms of how much necessary prerequisite material is implemented, not interest), or could this be done with some concerted effort? I'm not sure whether or not the analysis done so far would is sufficient</p>",
        "id": 193855904,
        "sender_full_name": "Charley Hutchison",
        "timestamp": 1586847108
    },
    {
        "content": "<p>You could ask this in the \"is there code for X\" stream. Not all the experts read #new members and it's a perfectly respectable question. In general the nontrivial mathematical stuff seems to be stuff put there by mathematicians who work in that area. I don't even remember seeing Hilbert spaces in mathlib, although we have all the ingredients for that.</p>",
        "id": 193858688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586849353
    },
    {
        "content": "<p>My guess is that it would not be hard to define them, given what we have, but that nobody defined them yet</p>",
        "id": 193858741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586849388
    },
    {
        "content": "<p>I don't think we have anything serious on Hilbert spaces, notably no adjoint operator and no positive operator, so it would be some work (but not too much, I think) to give the usual constructions of concrete <code>C^*</code> algebras (Note that we already have the norm topology and topological stuff, so saying that a set is closed for the norm topology is already there). Doing the abstract theory (complex Banach algebra with a nice involution) would probably be easier, and rather quick.</p>",
        "id": 193859204,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586849700
    },
    {
        "content": "<p>I had a student last year do a lot of the basics (including adjoint operators, I think) on Hilbert spaces, but it never made it to a PR. I think this is all good juicy material for mathlib!</p>",
        "id": 193860361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586850438
    },
    {
        "content": "<p>I think this is a very good first project.</p>",
        "id": 193861461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586851142
    },
    {
        "content": "<p>If I do the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">E</span><span class=\"o\">)(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Did <code>*</code> refers to the operation on <code>G</code> or the operation on <code>H</code>?</p>",
        "id": 193874646,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1586858546
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">E</span><span class=\"o\">)(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span>\n<span class=\"c1\">-- @has_mul.mul.{0} E (@semigroup.to_has_mul.{0} E (@monoid.to_semigroup.{0} E (@group.to_monoid.{0} E H))) x y : E</span>\n</pre></div>",
        "id": 193874727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586858592
    },
    {
        "content": "<p>the answer is <code>H</code></p>",
        "id": 193874749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586858605
    },
    {
        "content": "<p>the real answer is don't ever do this</p>",
        "id": 193874762,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586858613
    },
    {
        "content": "<p>Thank you ! So what should I do if I want to consider two different groups (i.e. two different operations) on the same set ?</p>",
        "id": 193874904,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1586858698
    },
    {
        "content": "<p>Are you trying to do Eckmann--Hilton?</p>",
        "id": 193875137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586858833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Eckmann.E2.80.93Hilton/near/133496192\" title=\"#narrow/stream/113488-general/topic/Eckmann.E2.80.93Hilton/near/133496192\">said</a> on Sep 07, 2018:</p>\n<blockquote>\n<p>Today I thought it was a good idea to stretch the type class system a bit. In fact, I ended up not using it at all <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span><br>\n<a href=\"https://gist.github.com/jcommelin/2e031b5446ca54089576ea9f66f12abf\" title=\"https://gist.github.com/jcommelin/2e031b5446ca54089576ea9f66f12abf\">https://gist.github.com/jcommelin/2e031b5446ca54089576ea9f66f12abf</a><br>\nStatement: Two unital binary operations that distribute over each other are in fact one and the same. Also, they are commutative and associative, so in fact a monoid structure.<br>\nThis is used to prove that homotopy groups are abelian.</p>\n</blockquote>",
        "id": 193875243,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586858886
    },
    {
        "content": "<p>Not really, it was just a question because I have troubles to understand exactly how Lean links a group and its operation. I will look for your suggestion, thanks !</p>",
        "id": 193875491,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1586859012
    },
    {
        "content": "<p>The answer is: (1) if you want to consider a group operation on a type then in Lean you should use square brackets <code>[group E]</code> and not name the group structure at all; (2) 99% of the time you would never consider two different group operations on the same type (which is why <code>[group E]</code> does not say <code>[G : group E]</code>; indeed Lean's type class system (the <code>[]</code> system) is not set up to support more than one instance of a class, and (3) if you do want to do this then you either do it with <code>(G : group E) (H : group E)</code> and then explicitly write stuff like <code>G.mul</code> rather than <code>*</code>, or you define a new type <code>E' := E</code> and you put <code>[group E]</code> and <code>[group E']</code>.</p>",
        "id": 193877924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586860547
    },
    {
        "content": "<p>Is there a tactic for using lem in tactic mode to check cases?</p>",
        "id": 193945894,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586892461
    },
    {
        "content": "<p><code>by_cases h : P</code></p>",
        "id": 193946678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586892860
    },
    {
        "content": "<p>If you go to <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">the tactic docs</a> and click on \"filter by tag\" and then select \"logic\" you will see the sorts of tactic that do this sort of thing.</p>",
        "id": 193946796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586892945
    },
    {
        "content": "<p>Thanks</p>",
        "id": 193947419,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586893303
    },
    {
        "content": "<p>Is there any danger in using the following?</p>\n<div class=\"codehilite\"><pre><span></span>open_locale classical\n</pre></div>",
        "id": 193947895,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586893580
    },
    {
        "content": "<p>an army of intuitionistic logicians might send you hate mails</p>",
        "id": 193948087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586893685
    },
    {
        "content": "<p>Haha I can live with that. Although the command doesn't seem to work</p>",
        "id": 193948136,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586893727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282867\">Victor Ahlquist</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193948136\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193948136\">said</a>:</p>\n<blockquote>\n<p>Although the command doesn't seem to work</p>\n</blockquote>\n<p>-1 for vague complaint instead of MWE</p>",
        "id": 193948201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586893762
    },
    {
        "content": "<p>I think the problem is I'm not sure where to use it. At the top?</p>",
        "id": 193948458,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586893878
    },
    {
        "content": "<p>Well, not too near the top :-)</p>",
        "id": 193948476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586893889
    },
    {
        "content": "<p>There's currently a \"feature\" of Lean where you can't use it directly after an import. Try using it after any imports and also after a random command like \"universe u\"</p>",
        "id": 193948605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586893935
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open classical\nopen_locale classical\n</pre></div>\n\n\n<p>Gives error invalid namespace name</p>",
        "id": 193948608,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586893938
    },
    {
        "content": "<p>Just delete <code>open classical</code>?</p>",
        "id": 193948646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586893963
    },
    {
        "content": "<p>Works fine if I remove second row</p>",
        "id": 193948648,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586893964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</pre></div>\n\n\n<p>is a very mathematician-like way to start a file</p>",
        "id": 193948731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586894010
    },
    {
        "content": "<p>You need to import something from mathlib.</p>",
        "id": 193948771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586894030
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 193948785,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586894037
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! hello mum -/</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</pre></div>\n\n\n<p>is another way</p>",
        "id": 193948892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586894073
    },
    {
        "content": "<p>Thanks that solves it. I didn't realize I had to import it. I have all of the exercises in a chapter from TPIL in a giant lean file so I don't mess with the top of it very much.</p>",
        "id": 193949041,
        "sender_full_name": "Victor Ahlquist",
        "timestamp": 1586894160
    },
    {
        "content": "<p>what is the most basic way to prove <code>h: 1 = 0 |- false</code>? i'm looking for something like <code>refl</code>, not <code>simp</code> / <code>cc</code></p>",
        "id": 193967478,
        "sender_full_name": "Nam",
        "timestamp": 1586905408
    },
    {
        "content": "<p>The most basic way in tactic mode (as you've listed tactics) is probably <code>cases h</code>.</p>",
        "id": 193967691,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1586905584
    },
    {
        "content": "<p>what does it do? i understand that <code>cases</code> break down the term into its inductive constructors</p>",
        "id": 193968090,
        "sender_full_name": "Nam",
        "timestamp": 1586905961
    },
    {
        "content": "<p>how does it break down <code>h</code>?</p>",
        "id": 193968106,
        "sender_full_name": "Nam",
        "timestamp": 1586905995
    },
    {
        "content": "<p>Fundamentally the way to prove this is to define, by recursion, a function sending <code>0</code> to <code>true</code> and <code>succ _</code> to <code>false</code>, using the hypothesis <code>1 = 0</code> to conclude <code>false = true</code>, and using <code>trivial : true</code> to obtain a proof of <code>false</code></p>",
        "id": 193968130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586906040
    },
    {
        "content": "<p>there is something uneasy about that. the function is custom defined, right? it isn't one that comes from <code>inductive nat : Type</code>, is it?</p>",
        "id": 193968493,
        "sender_full_name": "Nam",
        "timestamp": 1586906411
    },
    {
        "content": "<p>or is it one of the axioms that we have to <code>admit</code>?</p>",
        "id": 193968518,
        "sender_full_name": "Nam",
        "timestamp": 1586906453
    },
    {
        "content": "<p>I don't understand. You can write it using <code>nat.rec</code>.</p>",
        "id": 193968600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586906544
    },
    {
        "content": "<p>if i \"write it\", that means the function is defined by me. and it can do anything. how then do we ensure it is logical?</p>",
        "id": 193968828,
        "sender_full_name": "Nam",
        "timestamp": 1586906814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193968106\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/193968106\">said</a>:</p>\n<blockquote>\n<p>how does it break down <code>h</code>?</p>\n</blockquote>\n<p>there are no constructors and so the proof is complete</p>",
        "id": 193968855,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1586906858
    },
    {
        "content": "<p>Why do you not have the same concern about every function you write?</p>",
        "id": 193968856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586906859
    },
    {
        "content": "<p>We're just talking about a perfectly ordinary function, namely</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193968968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586906985
    },
    {
        "content": "<p><code>nat.rec</code> is an axiom if you like, but if you are suddenly worried about <code>nat.rec</code>, then you should be worried about everything</p>",
        "id": 193969152,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586907163
    },
    {
        "content": "<p>no i'm not worry about <code>nat.rec</code>. but i have a bad feeling about <code>f</code>.</p>",
        "id": 193969245,
        "sender_full_name": "Nam",
        "timestamp": 1586907253
    },
    {
        "content": "<p>I don't know what to say. Forget all this <code>0 = 1</code> business. Do you agree that if someone hands you a natural number, you can inspect it and return one thing if it is 0, and another thing if it is the successor of something? And the first thing could be <code>true</code>, and the second thing <code>false</code>?</p>",
        "id": 193969375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586907386
    },
    {
        "content": "<p>yes, i can do that. at the same time, i can also return true for the first 10 numbers, and false for the rest.</p>",
        "id": 193969451,
        "sender_full_name": "Nam",
        "timestamp": 1586907478
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\" title=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 193969456,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586907481
    },
    {
        "content": "<p>this is the blog post you're looking for</p>",
        "id": 193969505,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586907489
    },
    {
        "content": "<p>Is the question, like, <em>why</em> did I choose this particular <code>f</code>?</p>",
        "id": 193969537,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586907528
    },
    {
        "content": "<p>yes. sorry i didn't make it clear.</p>",
        "id": 193970532,
        "sender_full_name": "Nam",
        "timestamp": 1586908512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> thanks for that link. i just finished reading it. there's a lot to take in for a noob like me. but it helped me understand better what <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> suggested.</p>",
        "id": 193970564,
        "sender_full_name": "Nam",
        "timestamp": 1586908560
    },
    {
        "content": "<p>True and false are terms of type Prop, but are themselves types? Unlike <code>1</code> which is only a term of type \\nat ? I guess I don't totally understand what a Prop is in comparison to types like Nat or list</p>",
        "id": 193986126,
        "sender_full_name": "Brandon B",
        "timestamp": 1586928230
    },
    {
        "content": "<p>Prop is a Sort, meaning that types of Prop are also types</p>",
        "id": 193986218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586928358
    },
    {
        "content": "<p><code>Type</code> is also a Sort</p>",
        "id": 193986260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586928366
    },
    {
        "content": "<p><code>Prop</code> and <code>Type</code> are universes, which means that the elements of these types are themselves types</p>",
        "id": 193987184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586929729
    },
    {
        "content": "<p>oh right, Prop is the lowest universe level and Type is + 1.  What's the point of this separation?</p>",
        "id": 193987308,
        "sender_full_name": "Brandon B",
        "timestamp": 1586929955
    },
    {
        "content": "<p><code>Prop</code> behaves differently from <code>Type u</code> in a number of respects</p>",
        "id": 193987721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586930564
    },
    {
        "content": "<p>The most important one is that elements of Prop are proof irrelevant, that is, if <code>p : Prop</code> and <code>h1 h2 : p</code> then <code>h1</code> and <code>h2</code> are definitionally equal</p>",
        "id": 193987757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586930639
    },
    {
        "content": "<p>If you want to talk about both Prop and Type, you can use <code>Sort u</code>, since <code>Prop = Sort 0</code> and <code>Type u = Sort (u+1)</code></p>",
        "id": 193987831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586930728
    },
    {
        "content": "<p>How do you know if you need to use the law of the excluded middle? In TPIL there are some basic logical theorems some of which are noted to require classical reasoning, but its not obvious to me how one would figure out what kind of axioms one would need to prove it without just trial and error</p>",
        "id": 194217052,
        "sender_full_name": "Brandon B",
        "timestamp": 1586979619
    },
    {
        "content": "<p>This sort of nonsense might be undecidable or something. But I'm only guessing</p>",
        "id": 194218412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586980302
    },
    {
        "content": "<p>Hey,<br>\nSo here is a quite noob question: in the category_theory package, all the definitions have those <code> . obviously</code>, as in here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">extends</span> <span class=\"n\">category_struct</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">id_comp&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X</span> <span class=\"err\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comp_id&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"mi\">𝟙</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">assoc&#39;</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">≫</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I just want to understand clearly what's going on with the syntax here: am I right to understand that this mean that, whenever I instanciate a category, it runs an \"obviously\" on the arguments I give, which I assume tries to kill off the goal if it's \"clear\" that the argument I'm giving is an identity/associativity/whatever, and leave it as a goal if there are more things to do?</p>",
        "id": 194218842,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586980528
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/a/136737/328173\" title=\"https://math.stackexchange.com/a/136737/328173\">intuitionistic 0-th order logic is decidable but not 1-st order logic</a></p>",
        "id": 194219878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586980984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"286014\">@Robin Carlier</span> yes</p>",
        "id": 194219969,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586981039
    },
    {
        "content": "<p>Okay, thank you, and so there the obviously tactic is defined to be simply the <code>tidy</code> tactic, the doc is a bit elusive about what it does exactly, is it like a <code>simp</code> but with less algebraic manipulations and more \"rewriting/unfolding definitions\" kind of moves?</p>",
        "id": 194220216,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586981156
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The propositional fields of `category` are annotated with the auto_param `obviously`,</span>\n<span class=\"cm\">which is defined here as a</span>\n<span class=\"cm\">[`replacer` tactic](https://leanprover-community.github.io/mathlib_docs/commands.html#def_replacer).</span>\n<span class=\"cm\">We then immediately set up `obviously` to call `tidy`. Later, this can be replaced with more</span>\n<span class=\"cm\">powerful tactics.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def_replacer</span> <span class=\"n\">obviously</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">obviously</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">obviously&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n</pre></div>",
        "id": 194220466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586981259
    },
    {
        "content": "<p>whenever you declare  an instance of category, it will try to use <code>by obviously</code> to prove <code>id_comp'</code>, and then change the name to <code>id_comp</code></p>",
        "id": 194220654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586981325
    },
    {
        "content": "<p>The dot here means \"if the user supplies the proof then great, but if they don't then try running the <code>obviously</code> tactic</p>",
        "id": 194220932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586981477
    },
    {
        "content": "<p>Thank you for your explanation!</p>",
        "id": 194221153,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586981577
    },
    {
        "content": "<p>[the dot notation in the reference manual] (<a href=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\" title=\"https://leanprover.github.io/reference/expressions.html#implicit-arguments\">https://leanprover.github.io/reference/expressions.html#implicit-arguments</a>)</p>",
        "id": 194221156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586981578
    },
    {
        "content": "<p>Damn I didn't know there was a reference manual!  I thought there was only Theorem proving in lean, well thank you for the link.</p>",
        "id": 194221300,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1586981644
    },
    {
        "content": "<p>These things are quite well hidden!</p>",
        "id": 194221352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586981679
    },
    {
        "content": "<p>Do we have an instance of a category where  <code> obviously </code> fail ?</p>",
        "id": 194221638,
        "sender_full_name": "orlando",
        "timestamp": 1586981816
    },
    {
        "content": "<p>Obviously often fails -- it just tries a bunch of obvious things. It will fail if you give it a proof which needs an idea, for example an existence proof</p>",
        "id": 194223436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586982760
    },
    {
        "content": "<p>Hi!<br>\nI would like to define a function that maps even and odd numbers differently. I thought to use <code>nat.mod_two_eq_zero_or_one n</code> but that doesn't seem to work. How should I go about defining this function?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat_func</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- I would like to map even n to n and odd n to 3 * n</span>\n  <span class=\"n\">cases</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_two_eq_zero_or_one</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">--induction tactic failed, recursor &#39;or.dcases_on&#39; can only eliminate into Prop</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194229520,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586985863
    },
    {
        "content": "<p>I would just use <code>if ... then ... else ...</code>, e.g.: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">collatz_fn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 194229816,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586986003
    },
    {
        "content": "<p>Right, that seems like a reasonable way of doing it!</p>",
        "id": 194230095,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586986127
    },
    {
        "content": "<p>I’m struggling to prove “not(p iff not(p))” one of the exercises in TPIL. So far I first assumed “p iff not(p)” with the goal to derive false. I tried using “iff.elim_left” on that assumption but everything I try is giving me an error. Any hints?</p>",
        "id": 194284921,
        "sender_full_name": "Brandon B",
        "timestamp": 1587033810
    },
    {
        "content": "<p>When I was a young man, I used to follow a USENET newsgroup called <code>rec.puzzles</code></p>",
        "id": 194285152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033956
    },
    {
        "content": "<p>And once a month or so, someone would show up and tell us that there were three words in the English language that ended in GRY.</p>",
        "id": 194285241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587033994
    },
    {
        "content": "<p>Two of them were hungry and angry, and the question was: what was the third one.</p>",
        "id": 194285263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034018
    },
    {
        "content": "<p>And for some reason this question would just repeatedly show up, again and again, despite there being extensive discussions about the question (and also about why it kept coming up!)</p>",
        "id": 194285325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cat /usr/share/dict/words <span class=\"p\">|</span> grep gry\nangry\nhungry\n</pre></div>",
        "id": 194285414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587034097
    },
    {
        "content": "<p>However one key difference here is that there is no other word in the English language that ends in GRY (or at least no common one)</p>",
        "id": 194285425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034105
    },
    {
        "content": "<p>whereas this question is just a darn good question :-)</p>",
        "id": 194285438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034115
    },
    {
        "content": "<p>but it has been answered many times before in #new members. However searching for it will just give you spoilers :-(</p>",
        "id": 194285492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034153
    },
    {
        "content": "<p>The hint is : prove \"not p\".</p>",
        "id": 194285516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034176
    },
    {
        "content": "<p>Either that or get with the program and use classical logic :P</p>",
        "id": 194285541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034195
    },
    {
        "content": "<p>I feel like we should give this question a name and refer to it by that name in TPIL and L&amp;P and wherever else it appears.</p>",
        "id": 194285602,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587034211
    },
    {
        "content": "<p>And in an answer here.</p>",
        "id": 194285606,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587034214
    },
    {
        "content": "<p>So it's easily found with a search.</p>",
        "id": 194285612,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587034218
    },
    {
        "content": "<p>The epilogue to the USENET story is that newcomers to rec.puzzles became known as nugrys.</p>",
        "id": 194285633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587034229
    },
    {
        "content": "<p><a href=\"https://tinyurl.com/not-piffnotp\" title=\"https://tinyurl.com/not-piffnotp\">https://tinyurl.com/not-piffnotp</a></p>",
        "id": 194287620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587035461
    },
    {
        "content": "<p>Also, <a href=\"https://www.definitions.net/definition/nugry\" title=\"https://www.definitions.net/definition/nugry\">https://www.definitions.net/definition/nugry</a></p>",
        "id": 194288156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587035769
    },
    {
        "content": "<p>Is there a way to fix the value of a variable within the same namespace? In <code>text limits.lean</code> there's this chunk of code :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">colim_functor</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_colimits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">colim</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>If I reopen this namespace and go <code>#check colim </code> it gives me <code>(?M_1 ⥤ ?M_3) ⥤ ?M_3</code>, <br>\nI added an instance <code>[has_colimits_of_shape I C]</code> for some I, but I can't manage to get <code>colim I : (I \\functor C) \\functor C</code> and <code>colim J: (J \\functor C) \\functor C</code> to work, any idea?</p>",
        "id": 194302146,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587043150
    },
    {
        "content": "<p>You need newlines for multiline blocks, and single backticks for inline code.</p>",
        "id": 194302324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587043212
    },
    {
        "content": "<p>Thank you</p>",
        "id": 194302384,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587043237
    },
    {
        "content": "<p>To answer your actual question, if you want the colimit functor for a fixed index category <code>I</code>, the easiest way is to write <code>colim : (I ⥤ C) ⥤ C</code>. The variable <code>I</code> is implicit (since normally you would want to infer it from the functor you're taking the colimit of).</p>",
        "id": 194302678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587043362
    },
    {
        "content": "<p>Yep, works like a charm, thank you!</p>",
        "id": 194302973,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587043467
    },
    {
        "content": "<p>To answer your original question: Fixing the value of a variable within a namespace doesn't make much sense; namespaces are just a way to organize names. Fixing the value of a variable in a <code>section</code> does make some sense, and that's what <code>parameters</code> does. However, I don't think you want to use it here.</p>",
        "id": 194303037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587043494
    },
    {
        "content": "<p>My original question was ill-formulated yeah, All I wanted to do is get that colim to have the right type, and I think I get the idea: if I want something to have \"X type\", just tell that to lean with the <code>:</code>and let it infer the rest :D</p>",
        "id": 194304137,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587043905
    },
    {
        "content": "<p>Another option is to write <code>@colim</code> which makes all the implicit arguments into explicit ones, but in this case there are a lot of them.</p>",
        "id": 194304287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587043958
    },
    {
        "content": "<p>Yeah I tried that initially but got lost in the number of arguments</p>",
        "id": 194304511,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587044046
    },
    {
        "content": "<p>Okay one more question: I'm looking around in the category_theory package, and I see the category Cat of all categories has been formalized, but I don't quite get the code nor how to use it. How should I do, for instance, to introduce the category of all u-Small categories for a fixed universe u? Just <code>Cat.{u u}</code>?</p>",
        "id": 194313962,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587047936
    },
    {
        "content": "<p><code>Cat.{u u}</code> type checks as <code>Type u+1</code> which is what I want I guess, but will lean recognize its objects as instances of <code>small-category</code> in the right context?</p>",
        "id": 194314389,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587048113
    },
    {
        "content": "<p>Also, I'm completely stuck on the following, which is quite related to my last question:  I have a some category C and D, defined as <code>variables {C : Type u} [𝒞 : category.{u} C]</code>, idem with D,  and I want to define some functor <code>(over C) ⥤ D</code> in wich I need to make use of the fact that the objects of <code>over C</code>should be functors <code>A ⥤ C</code> for some category <code>A</code>. Yet when I try to code that, I can get some morphism <code>A ⟶ C</code> and get <code>A</code>as well, but I can't get lean to be ok with the fact that <code>A</code> should be a category and that the morphism <code>A ⟶ C</code> should be a functor. I tried various stuff like <code>ulift</code>or <code>apply_instance</code> but nothing work. I guess that's because I'm being vague with the exact typing /instance of <code>over C</code>, and I should be able to tell lean that this over category should be taken in Cat, but despite sniffing around in the code I have no idea about how to do this kind of stuff. Any idea?</p>",
        "id": 194338596,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587057731
    },
    {
        "content": "<p>As far as I know, no one has ever used <code>Cat</code> for anything.</p>",
        "id": 194338656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587057765
    },
    {
        "content": "<p>I even defined it in a separate project (before it was in mathlib) and then proceeded to not use <em>that</em> for anything. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194338880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587057883
    },
    {
        "content": "<p>Ok so it's not possible in a \"neat\" way to do what I want using Cat then? If not, what could be possible options?</p>",
        "id": 194339280,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587058049
    },
    {
        "content": "<p>You want to use <code>Cat</code> indeed, but fix it to make the things you want to do neat.</p>",
        "id": 194339639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587058211
    },
    {
        "content": "<p>So I guess I'll ding into Cat and see what I can do with that then, thank you!</p>",
        "id": 194340198,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587058463
    },
    {
        "content": "<p>disclaimer: I am not a category theorist. I would imagine that Cat is not a category but rather some kind of 2-category. Presumably in Lean one would stick to the category of categories whose objects were in Type u and whose morphism types were all in Type v for some fixed u and v?  As for what you're stuck on, I would really encourage you to post some fully working code, because then people like me will just tinker a bit and try and be helpful. [in particular I don't know what <code>over C</code> is but if you give me a file with the right imports at the top I will just be able to look; whilst I am not a category theorist I do know what <code>apply_instance</code> does]</p>",
        "id": 194340377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587058559
    },
    {
        "content": "<p>This will mostly involve things like trying to define coercions, then getting frustrated when they don't work properly.</p>",
        "id": 194340748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587058715
    },
    {
        "content": "<p>But, for sure, in your <code>over</code> example, you would want to start with <code>C : Cat.{u u}</code> and not the unbundled form.</p>",
        "id": 194340810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587058742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yeah ideally Cat should be a 2-category, but tbh I don't think I'm up to implementing 2-categories and 2-functoriality and so on yet :D<br>\n(Also I'm not a category theorist as well)<br>\nI'll look around for defining coercions with cat.<br>\nAs for some code example, this looks like this so far, feel free to tinker: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Cat</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span><span class=\"bp\">.</span><span class=\"n\">bundled</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"n\">include</span> <span class=\"err\">𝒞</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">colim_functor</span>\n  <span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_colimits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">bundled</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">})</span>\n  <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> #check over (C : Cat.{u u}) : fails-/</span>\n  <span class=\"n\">def</span> <span class=\"n\">colimit_functor</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">over</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">morph</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n        <span class=\"n\">tidy</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"n\">forget</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">morph</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">test2</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>  <span class=\"c\">/-</span><span class=\"cm\"> Error here, can&#39;t get test to be a category -/</span>\n\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">colim_functor</span>\n</pre></div>\n\n\n<p>Anyway thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for the advice</p>",
        "id": 194345016,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587060536
    },
    {
        "content": "<p>I don't understand the maths at all, but <code>test</code> isn't typechecking. because <code>(over.forget).obj</code> is a function <code>over ? -&gt; ?</code> and you're giving it <code>morph</code> which has type <code>a.left -&gt; C</code>. You could give it <code>a</code> instead, which would make <code>test</code> a term of type <code>Type u</code>. What do you expect the type of <code>test</code> to be? At the moment it's not even defined.</p>",
        "id": 194347670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587061721
    },
    {
        "content": "<p>Yeah right that's bogus, I don't know why I changed with morph, but I had initially tried with <code>a</code>.<br>\nSo yeah with <code>a</code>it gives <code>Type u</code>, that much is expected, but I wanted lean to get that this <code>Type u</code> should actually be a <code>Type u</code> with a category instance. So that the functor notation on the line after work<br>\nAlso there it is <code>test</code> but really this could have been <code>a.left</code> (they're supposed to be the same), but the problem remains if I change test with <code>a.left</code></p>",
        "id": 194348521,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587062093
    },
    {
        "content": "<p>If you want <code>Type u</code> to be a category I think you will need an import</p>",
        "id": 194348614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587062143
    },
    {
        "content": "<p>\"hangry\": <a href=\"https://www.foxnews.com/food-drink/hangry-is-officially-a-word-in-the-oxford-english-dictionary\" title=\"https://www.foxnews.com/food-drink/hangry-is-officially-a-word-in-the-oxford-english-dictionary\">https://www.foxnews.com/food-drink/hangry-is-officially-a-word-in-the-oxford-english-dictionary</a></p>",
        "id": 194348710,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1587062179
    },
    {
        "content": "<p>rofl</p>",
        "id": 194348748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587062200
    },
    {
        "content": "<p>The import <code>category_theory.types</code> makes <code>Type u</code> into a category -- but it's a large category.</p>",
        "id": 194349005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587062307
    },
    {
        "content": "<p>Harry Potter fans will have no trouble coming up with a word that starts with GRY.</p>",
        "id": 194349233,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1587062408
    },
    {
        "content": "<p>My main issue there is that <code>morph</code> has type <code>a.left \\hom C</code> (and not just <code>\\l</code>), and that C is a category, so that the information that <code>a.left</code> is a category ought to be already there, otherwise that <code>\\hom</code> in the description of <code>a</code> would not type check, see what I mean?<br>\nThanks for the import suggestion tho, I'll try to see if I can get something within types.</p>",
        "id": 194349303,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587062445
    },
    {
        "content": "<p><code>morph</code> has type <code>a.left \\hom C</code> so <code>a.left</code> must be an object of some category. Looking at the type of <code>morph</code> with <code>set_option pp.all true</code> I can see <code>category_theory.types</code> so you must be importing it somewhere already.</p>",
        "id": 194350285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587062888
    },
    {
        "content": "<p>This morphism <code>morph</code> looks to me like it is a morphism in the category <code>Type u</code>.</p>",
        "id": 194350473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587062988
    },
    {
        "content": "<p>This makes sense -- <code>C : Type u</code> and <code>Type u</code> has a category structure, so <code>C</code> is an object of the category <code>Type u</code>.</p>",
        "id": 194350573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587063030
    },
    {
        "content": "<p>I see it yeah, this <code>set_option pp.all true</code> is quite handy, didn't know about it :P.</p>\n<p>Well, then it just confirms what Reid said: I definitely want to tinker with Cat since C should be an object of the category <code>Cat.{u u}</code>, rather that <code>Type u</code>thank you a lot for your help and your time!</p>",
        "id": 194350834,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587063143
    },
    {
        "content": "<p>You defined <code>{C : Type u}</code> so <code>C</code> is a term of type <code>Type u</code>. I have no idea how to work with <code>Cat</code> I'm afraid.</p>",
        "id": 194353094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587064152
    },
    {
        "content": "<p>Yeah I get that I should change C to something else to get that to work, or at least coerce it into something else. I'll play around with Cat . I think the object I want to work with is <code> ((bundled.of C) : Cat.{u u}) </code> but unfortunately over doesn't seem to like it</p>",
        "id": 194353825,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587064494
    },
    {
        "content": "<p>Is this an appropriate forum for asking about proof assistants in extremely broad terms? Like, I'm starting from the idea of \"technology to assist with proofs\" (mostly informal) and proof assistants  just don't even come close to exhausting that category. Nevertheless I imagine proof assistants form an important subset of that technology and in particular address the technical issues you would encounter when asking the broader question.</p>",
        "id": 194372997,
        "sender_full_name": "Robin Allison",
        "timestamp": 1587074497
    },
    {
        "content": "<p>People mostly stick to Lean-related stuff here, it is a very focussed chat in fact. But asking something in #general about general proof assistants isn't going to upset anyone I shouldn't think</p>",
        "id": 194373831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587074977
    },
    {
        "content": "<p>Gotcha. I'm probably want to go beyond the scope of just proof assistants, but I might as well test the water there. Thanks.</p>",
        "id": 194378620,
        "sender_full_name": "Robin Allison",
        "timestamp": 1587078269
    },
    {
        "content": "<p>I always like to read about more general topics in formal methods, and the people subscribed to this chat are not only lean people but also involved in other areas so it's not a bad place to ask these questions.</p>",
        "id": 194384918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587084035
    },
    {
        "content": "<p>I'm getting a <code>rewrite tactic failed, did not find instance of the pattern in the target expression</code> error on this code again. Not sure if I'm doing something wrong or if my compiler is just getting confused (this has happened in the past in large files with lots of errors, but that is not the case here). </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rearrange</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194393040,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587094585
    },
    {
        "content": "<p>What you're proving isn't necessarily true.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- a = 0, b = 2, c = 1</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- 1</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- 2</span>\n</pre></div>",
        "id": 194393133,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587094781
    },
    {
        "content": "<p>If you give the arguments explicitly to <code>add_sub_assoc</code>, so like this,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">add_sub_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>You get this error</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\na b c : ℕ\n⊢ add_group ℕ\n</pre></div>\n\n\n<p>Which is what I was referring to</p>",
        "id": 194393203,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587094894
    },
    {
        "content": "<p>Essentially what this boils down to is that in lean with the nats, <code>0 - x = 0</code>.</p>",
        "id": 194393268,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587094996
    },
    {
        "content": "<p>So you need either that <code>b ≥ c ∧ a ≥ c</code> as a hypothesis (but this <code>rw</code> still won't work, you could probably solve it with <code>omega</code>), or switch to <code>int</code>s.</p>",
        "id": 194393314,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587095047
    },
    {
        "content": "<p>So either</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n       <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rearrange</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>or </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">int</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rearrange</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">add_sub_assoc</span><span class=\"o\">,</span>\n<span class=\"c1\">-- etc...</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194393425,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587095217
    },
    {
        "content": "<p>I see, that makes sense. I guess I assumed that <code>add_sub_assoc</code> somehow checked that the values made sense on its own but in retrospect that seems unrealistic. I'll read more about how omega works. Is there a way to prove this by using the assumption <code>b ≥ c ∧  a ≥  c</code> directly without switching to <code>int</code>s?</p>",
        "id": 194393794,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587095847
    },
    {
        "content": "<p>Yes.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n       <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rearrange</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194393927,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587096032
    },
    {
        "content": "<p>There are two different <code>add_sub_assoc</code>s, the one that you want is <code>nat.add_sub_assoc</code>, not the one from <code>algebra.group</code></p>",
        "id": 194393964,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587096083
    },
    {
        "content": "<p>When you use <code>rw ←add_sub_assoc</code> Lean uses the one from <code>algebra.group</code> and not the one from <code>nat</code>. So in this case you have to tell Lean that you want the one from <code>nat</code>.</p>",
        "id": 194394043,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587096196
    },
    {
        "content": "<p>The one from <code>nat</code> has a different type signature, and that is where you provide the fact that <code>b ≥ c</code>.</p>",
        "id": 194394090,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587096265
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n       <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_sub_assoc</span>\n<span class=\"c1\">-- add_sub_assoc : ∀ (a b c : ?M_1), a + b - c = a + (b - c)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_assoc</span>\n<span class=\"c1\">-- nat.add_sub_assoc : ?M_2 ≤ ?M_1 → ∀ (n : ℕ), n + ?M_1 - ?M_2 = n + (?M_1 - ?M_2)</span>\n</pre></div>",
        "id": 194394176,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587096372
    },
    {
        "content": "<p>Interesting, I would have expected doing <code>open nat</code> would default to the <code>nat</code> version, but I guess the different type signature means it never actually looks for the one in <code>nat</code>?</p>",
        "id": 194394259,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587096535
    },
    {
        "content": "<p><code>open nat</code> does nothing for type inference</p>",
        "id": 194394273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587096574
    },
    {
        "content": "<p>actually in this case the issue is that <code>nat.add_sub_assoc</code> is <code>protected</code></p>",
        "id": 194394320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587096608
    },
    {
        "content": "<p>which means that the name has to be qualified even if you open the namespace</p>",
        "id": 194394326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587096632
    },
    {
        "content": "<p>Gotcha. This helps a lot. Thank you!</p>",
        "id": 194395919,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587099443
    },
    {
        "content": "<p>Unrelated question: I'm getting errors when I try to access certain namespaces even though I think I've imported them correctly. For example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">--https://observablehq.com/@bryangingechen/fibonacci-formalized-1-some-sums?collection=@bryangingechen/lean&amp;fbclid=IwAR1UQq-DS6CG403IjSkBQS5n_evm9soXWgq-NKDyuyxB1Myc0J4tXd8xHhc</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">list</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</pre></div>\n\n\n<p>This gives me an error on the <code>.sum</code>. Similar thing is happening on <code>le_iff_exists_add </code> and when I try to use a <code>use 0,</code> tactic to kill an inequality.  <a href=\"/user_uploads/3121/ypSI_o5KQoJiffwXOODtOcMN/Screen-Shot-2020-04-17-at-12.58.33-AM.png\" title=\"Screen-Shot-2020-04-17-at-12.58.33-AM.png\">Screen-Shot-2020-04-17-at-12.58.33-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ypSI_o5KQoJiffwXOODtOcMN/Screen-Shot-2020-04-17-at-12.58.33-AM.png\" title=\"Screen-Shot-2020-04-17-at-12.58.33-AM.png\"><img src=\"/user_uploads/3121/ypSI_o5KQoJiffwXOODtOcMN/Screen-Shot-2020-04-17-at-12.58.33-AM.png\"></a></div>",
        "id": 194395961,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587099595
    },
    {
        "content": "<p>Delete the <code>init</code>s.</p>\n<p>So</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">--https://observablehq.com/@bryangingechen/fibonacci-formalized-1-some-sums?collection=@bryangingechen/lean&amp;fbclid=IwAR1UQq-DS6CG403IjSkBQS5n_evm9soXWgq-NKDyuyxB1Myc0J4tXd8xHhc</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">list</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</pre></div>",
        "id": 194395984,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587099655
    },
    {
        "content": "<p>is there a series of proofs that i should start from in mathlib, the very foundational ones?</p>",
        "id": 194454770,
        "sender_full_name": "Nam",
        "timestamp": 1587136176
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 194455710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587136389
    },
    {
        "content": "<p>You might want to take a look at the core Lean library, which contains all the code which is imported into every Lean file by default. Start with the imports of <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/default.lean\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/default.lean\"><code>init.default</code></a> in order, e.g. <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean\"><code>init.core</code></a>, <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/logic.lean\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/logic.lean\"><code>init.logic</code></a>, until you get bored...</p>",
        "id": 194456375,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587136621
    },
    {
        "content": "<p>I've personally had more fun picking files or even specific <code>def</code>s / <code>theorem</code>s that contain math that I'm familiar with and then working backwards, e.g. looking up the definitions / proofs of unfamiliar declarations.</p>",
        "id": 194457026,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587136900
    },
    {
        "content": "<p>I suppose it could be worthwhile though to look at the definitions and basic facts about <code>and</code>, <code>or</code>, <code>Exists</code>, <code>sigma</code>, etc. though I don't know whether they're all in one place</p>",
        "id": 194457332,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587137035
    },
    {
        "content": "<p>Hi, I just installed Lean on Ubuntu following \"the fast way\" in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian.md</a>.<br>\nMy problem is: <code>import real.data.basics</code> gives me <code>file 'data/real/basics' not found in the LEAN_PATH</code>. How can I fix this?</p>",
        "id": 194458119,
        "sender_full_name": "Orlando Marigliano",
        "timestamp": 1587137360
    },
    {
        "content": "<p>Remove the extra s at the end</p>",
        "id": 194458175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137383
    },
    {
        "content": "<p>And use correct order of words</p>",
        "id": 194458219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137402
    },
    {
        "content": "<p><code>import data.real.basic</code></p>",
        "id": 194458260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137409
    },
    {
        "content": "<p><code>import data.real.basic</code> gives me the same error</p>",
        "id": 194458353,
        "sender_full_name": "Orlando Marigliano",
        "timestamp": 1587137450
    },
    {
        "content": "<p>Did you follow instructions all the way to the crucial last line?</p>",
        "id": 194458430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137486
    },
    {
        "content": "<p>Which is a link to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a></p>",
        "id": 194458490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137514
    },
    {
        "content": "<p>I did not, going through that page now</p>",
        "id": 194458643,
        "sender_full_name": "Orlando Marigliano",
        "timestamp": 1587137568
    },
    {
        "content": "<p>I think we really need to change all those installation help pages, inserting between every single line: \"At the end of this file, you'll need to follow <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">the link</a>\".</p>",
        "id": 194458924,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137686
    },
    {
        "content": "<p>It seems nobody is capable of clicking that link otherwise.</p>",
        "id": 194458974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587137711
    },
    {
        "content": "<p>Following that link indeed solved my problem. Thanks!</p>",
        "id": 194459286,
        "sender_full_name": "Orlando Marigliano",
        "timestamp": 1587137861
    },
    {
        "content": "<p>Hey Orlando <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194461779,
        "sender_full_name": "orlando",
        "timestamp": 1587138953
    },
    {
        "content": "<p>Hey other Orlando :))</p>",
        "id": 194462251,
        "sender_full_name": "Orlando Marigliano",
        "timestamp": 1587139135
    },
    {
        "content": "<p>Does the <code>injection</code> tactic and its derivative automatically recognize a function is injective once it has been proved with <code>function.injective</code>? <br>\nIn <code>category_theory/opposites.lean</code> there's stuff like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">has_hom</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">op_inj</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">has_hom</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"n\">has_hom</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">H</span>\n</pre></div>\n\n\n<p>and similar lemmas have no <code>@[simp]</code> attribute, will this kind of lemma be detected by <code>injection</code>?</p>",
        "id": 194472600,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587143825
    },
    {
        "content": "<p>No, this has nothing to do with <code>injection</code>.</p>",
        "id": 194472747,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587143889
    },
    {
        "content": "<p>This tactic has no real world analogue, it's very tightly coupled to the CIC foundations</p>",
        "id": 194472796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587143919
    },
    {
        "content": "<p>I don't think I ever used that injection tactic</p>",
        "id": 194472988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587144018
    },
    {
        "content": "<p>Me neither, that's why I'm trying to figure out what it does <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194473117,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587144084
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#injection\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#injection\">injection docs</a>. It proves things like <code>nat.zero ≠ nat.succ n</code> because zero and succ are distinct constructors for nat.</p>",
        "id": 194474133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587144566
    },
    {
        "content": "<p>I'm scared to see things like \"constructors of inductive data types are injections\", given that it's inconsistent with excluded middle in Agda (<a href=\"https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent\" title=\"https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent\">https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent</a>) - but my Lean is not good enough to attempt to show that that construction of False fails in Lean</p>",
        "id": 194484130,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1587149363
    },
    {
        "content": "<p><code>injection</code> proves that the <em>constructors</em> are injective. There are no constructors in the definition of <code>I</code> in that link, so the tactic says nothing in this case.</p>",
        "id": 194484572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587149576
    },
    {
        "content": "<p>I have some quite noob coercion question: I have the following code, which doesn't work : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Cat</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Cat</span>\n    <span class=\"kn\">instance</span> <span class=\"n\">cat_to_elem_of_Cat</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"err\">𝒞</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">C</span> <span class=\"err\">𝒞</span><span class=\"bp\">⟩</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒳</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> #check (X : Cat)</span>\n<span class=\"cm\">    #check (𝒳 : Cat)</span>\n<span class=\"cm\">    Both fail-/</span>\n<span class=\"kn\">end</span> <span class=\"n\">Cat</span>\n</pre></div>\n\n\n<p>I think that's because my instance of <code>has_coe</code> have <code>C</code> as an implicit argument, but I can't see how I can remove it? Basically I want to tell lean that whenever there's a type <code>C</code> with a category instance that is typed as `Cat, then it should coerce it with Cat.of, how should I do that? My problem is mainly that there's both the parameter of the type and the instance of category on that type, rather than just the type.</p>",
        "id": 194493898,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587154287
    },
    {
        "content": "<p>What happens if you change the v to a u? Lean 3 struggles with universe unification in situations like this</p>",
        "id": 194497239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587156228
    },
    {
        "content": "<p>If I change the v to a u in <code>(category.{v} C)</code>, then it doesn't type check. If I change it also in <code>Cat.{v u}</code>, then it type checks but the problem remains and it won't coerce <code>X</code></p>",
        "id": 194497726,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587156460
    },
    {
        "content": "<p>Also same if I try to use only one universe <code>u</code>and coerce with <code>(X : Cat.{u u})</code></p>",
        "id": 194498458,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587156812
    },
    {
        "content": "<p>I think that's because the type from which I want to coerce from is not the right one, what I really want would be the type of \"types equippend with  an instance of category on the first type\" but I don't know how to write it so that it will accept a coercion from <code>X</code> or <code>𝒳</code>. The type of \"types + a category on said type\" is basically already what the <code>Cat</code> type is so it's going in circles.</p>\n<p>Reid was right when he was talking about \"Trying to define coercions and then getting frustrated when they don't work\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194499448,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587157334
    },
    {
        "content": "<p>I don't really understand what you wrote but I would go the other way. Write <code>X : Cat</code>, then add <code>has_coe_to_sort</code> so that <code>X</code> can also be treated as a type and then add a <code>category</code> instance for this type.</p>",
        "id": 194501803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587158723
    },
    {
        "content": "<p>Yeah that much I already did. But I wanted to go able to go the other way, so that there wouldn't be <code>Cat.of ...</code> everywhere</p>",
        "id": 194501918,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587158780
    },
    {
        "content": "<p>I don't recommend that</p>",
        "id": 194501983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587158831
    },
    {
        "content": "<p>It sounds like you would have a loop</p>",
        "id": 194502006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587158844
    },
    {
        "content": "<p>I see, then I'll just keep the coe to sort for <code>X : Cat</code>and keep writing <code>Cat.of</code>whenever needed</p>",
        "id": 194502127,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587158912
    },
    {
        "content": "<p>You shouldn't have to write it very often once you get going, since probably there are not that many different ways you produce a category.</p>",
        "id": 194502365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587159047
    },
    {
        "content": "<p>I still wonder whether it would be better if the whole category theory library was written in bundled style (though, ironically, I'm not sure what happens with <code>Cat</code> itself then)</p>",
        "id": 194502443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587159087
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I'll just get used to however it is</p>",
        "id": 194503073,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587159436
    },
    {
        "content": "<p>It did start off bundled, and I was talked out of it. :-) People like their typeclasses.</p>",
        "id": 194515021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587168440
    },
    {
        "content": "<p>I think writing <code>C.hom X Y</code> would have been fine instead of <code>X ⟶ Y</code>. (Another notation that would work with fully bundled categories is <code>X ⟶[C] Y</code>.)</p>",
        "id": 194515151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587168557
    },
    {
        "content": "<p>You should be able to keep the existing notation, I think</p>",
        "id": 194516993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587170450
    },
    {
        "content": "<p>With <code>X Y : ↥C</code></p>",
        "id": 194517034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587170516
    },
    {
        "content": "<p>I didn't realize it was ever bundled (I assume you mean in your pre-mathlib library)</p>",
        "id": 194517559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587171062
    },
    {
        "content": "<p>People liked their <code>is_group_hom</code> typeclasses but ultimately changed their minds.</p>",
        "id": 194517884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587171480
    },
    {
        "content": "<p>Hmm... maybe it is still doable.</p>",
        "id": 194518583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587172275
    },
    {
        "content": "<p>You should be able to use the same arrow for functors, too</p>",
        "id": 194518655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587172341
    },
    {
        "content": "<p>There might be the usual problems with coercions though (do those happen for <code>has_coe_to_sort</code> also? I mainly encounter them with functions)</p>",
        "id": 194518764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587172475
    },
    {
        "content": "<p>Like <code>X : Over Z</code> might not work because <code>C</code> needs to be inferred (maybe not the greatest example as math writes <code>C</code> in the notation anyways)</p>",
        "id": 194518797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587172554
    },
    {
        "content": "<p>where is calc mode documented? (or maybe I just need to look at an example?)</p>",
        "id": 194524038,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587181382
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#calculational-proofs\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#calculational-proofs\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#calculational-proofs</a></p>",
        "id": 194524265,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587181847
    },
    {
        "content": "<p>advice on how to close<br>\n<code> lemma case_bash (a : ℕ) (ha : a ≤ 4) : a ∈ [0,1,2,3,4] := sorry </code><br>\n?</p>\n<p>Oh, it looks like the interval_cases is supposed to do this. I should remind myself how to update mathlib.</p>",
        "id": 194525393,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1587184107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194524038\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194524038\">said</a>:</p>\n<blockquote>\n<p>where is calc mode documented? (or maybe I just need to look at an example?)</p>\n</blockquote>\n<p>There is also <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/calc.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/calc.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/calc.md</a></p>",
        "id": 194526585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587186365
    },
    {
        "content": "<p>I'm trying to reforming the <code>r*</code> relation in Hitchhiker guide.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">star</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n</pre></div>\n\n\n<p>but it produces error \"don't know how to synthesize placeholder\".what did i not get right?</p>",
        "id": 194526941,
        "sender_full_name": "Nam",
        "timestamp": 1587187074
    },
    {
        "content": "<p>ahh, i think the left side before <code>:</code> must not have the inductive prop that is being defined.</p>",
        "id": 194527802,
        "sender_full_name": "Nam",
        "timestamp": 1587188750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194526585\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194526585\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194524038\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194524038\">said</a>:</p>\n<blockquote>\n<p>where is calc mode documented? (or maybe I just need to look at an example?)</p>\n</blockquote>\n<p>There is also <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/calc.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/calc.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/calc.md</a></p>\n</blockquote>\n<p>Seems like everything else in that folder is in the mathlib docs except the document about <code>calc</code>.</p>",
        "id": 194528651,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587190431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> I guess that folder could use some love now that we have the new docs system. (One for of love could be retirement <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 194530464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587193831
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/doc-gen/pull/18\" title=\"https://github.com/leanprover-community/doc-gen/pull/18\">https://github.com/leanprover-community/doc-gen/pull/18</a></p>",
        "id": 194531124,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587195083
    },
    {
        "content": "<p>Great! It's on the queue</p>",
        "id": 194531300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587195366
    },
    {
        "content": "<p>haha, bors doesn't run the <code>doc-gen</code> repo (yet?)</p>",
        "id": 194531312,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587195394
    },
    {
        "content": "<p>The <code>doc-gen</code> repo runs Gabriel, which is as almost as fast.</p>",
        "id": 194531934,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1587196542
    },
    {
        "content": "<p>Is there a way to \"rewrite along an equality\" purely in term mode? for instance in the following :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">section</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"kn\">variable</span> <span class=\"n\">P1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"n\">P1</span>\n    <span class=\"n\">def</span> <span class=\"n\">canonical</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">P1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I use by and tactic mode to get my <code>(a ⟶ b)</code>, is there a term mode way to tell lean \"take identity and a and replace one of the a by b since they're equal\"?</p>",
        "id": 194531995,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587196680
    },
    {
        "content": "<p>You can try to use <code>eq.subst</code> (infix notation <code>▸</code>), but it's often much more finicky than using <code>rw</code></p>",
        "id": 194532272,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587196960
    },
    {
        "content": "<p>Yeah I tried to mess around with it but it \"failed to compute the motive\"<br>\nThe question was because I have read that it's better to use term mode to define stuff and leave tactic mode for proving stuff, but now I see that for this particular example it's in tactic mode even in mathlib</p>",
        "id": 194532496,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587197354
    },
    {
        "content": "<p>You can always reverse-engineer a term mode proof if you really want:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">section</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"kn\">variable</span> <span class=\"n\">P1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">include</span> <span class=\"err\">𝒞</span> <span class=\"n\">P1</span>\n    <span class=\"n\">def</span> <span class=\"n\">canonical</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">P1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n\n    <span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n    <span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">canonical</span>\n    <span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">canonical</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">canonical&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"bp\">▸</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⟶</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⟶</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I guess <code>eq.subst</code> doesn't work directly here because <code>a ⟶ b</code> is not a <code>Prop</code>.</p>\n<p><strong>edit</strong>: golfed a little more</p>",
        "id": 194533237,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587198703
    },
    {
        "content": "<p>Two somewhat contradictory pieces of advice:</p>\n<ol>\n<li>You shouldn't use <code>rw</code> to construct data like this; it will cause a lot of headaches later.</li>\n<li>This <code>canonical</code> already exists in <code>category_theory.eq_to_hom</code>.</li>\n</ol>",
        "id": 194540873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587211234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194525393\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194525393\">said</a>:</p>\n<blockquote>\n<p>advice on how to close<br>\n<code> lemma case_bash (a : ℕ) (ha : a ≤ 4) : a ∈ [0,1,2,3,4] := sorry </code><br>\n?</p>\n<p>Oh, it looks like the interval_cases is supposed to do this. I should remind myself how to update mathlib.</p>\n</blockquote>\n<p>Indeed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">case_bash</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">interval_cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>\"Case bashing\" is a tactic tag at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">the docs</a>; this sort of thing comes up a lot and it is only relatively recently that Scott sorted it out. Thanks Scott <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n<p>Finally, if you have <code>leanproject</code> installed (the <a href=\"https://github.com/leanprover-community/mathlib#installation\" title=\"https://github.com/leanprover-community/mathlib#installation\">documentation</a> covers it; installing might be as simple as something like <code>sudo pip3 install mathlibtools</code> if you already have <code>elan</code>) then <code>leanproject up</code> will update your project if it is either (a) mathlib or (b) contains mathlib as a dependency. Nowadays it is as simple as that, thanks to the amazing new tooling.</p>",
        "id": 194541338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587211914
    },
    {
        "content": "<p>Yeah <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I saw that that canonical was in <code>eq_hom</code>... And is defined with a rw <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <br>\nSo I ended up using the one in <code>eq_hom</code> anyway, and it beign constructed with <code>rw</code>did cause a lot of headeaches</p>",
        "id": 194541590,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587212231
    },
    {
        "content": "<p>I have the following start to a file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">unique_factorization_domain</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">associates</span>\n<span class=\"kn\">open</span> <span class=\"n\">unique_factorization_domain</span> <span class=\"n\">associated</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normalization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">associated</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n<span class=\"c1\">-- local attribute [instance] to_gcd_domain</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"kn\">irreducible</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">associates</span>\n</pre></div>\n\n\n<p>But I want to use the fact that a unique factorization domain is a gcd domain, so I'd like to add the commented <code>local attribute [instance] to_gcd_domain</code>. But when I do that I get the <code>maximum class-instance resolution depth has been reached</code> error at the <code>variable p</code> line. Am I doing something wrong? Can I fix this somehow?</p>",
        "id": 194549962,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1587223618
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">596</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1789</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain</span><span class=\"bp\">.</span><span class=\"n\">to_normalization_domain</span> <span class=\"err\">?</span><span class=\"n\">x_1792</span> <span class=\"err\">?</span><span class=\"n\">x_1793</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">597</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1793</span> <span class=\"o\">:</span> <span class=\"n\">gcd_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_gcd_domain</span> <span class=\"err\">?</span><span class=\"n\">x_1794</span> <span class=\"err\">?</span><span class=\"n\">x_1795</span> <span class=\"err\">?</span><span class=\"n\">x_1796</span> <span class=\"err\">?</span><span class=\"n\">x_1797</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">598</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1795</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">598</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1795</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">normalization_domain</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">598</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1795</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain</span><span class=\"bp\">.</span><span class=\"n\">to_normalization_domain</span> <span class=\"err\">?</span><span class=\"n\">x_1798</span> <span class=\"err\">?</span><span class=\"n\">x_1799</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">599</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1799</span> <span class=\"o\">:</span> <span class=\"n\">gcd_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_gcd_domain</span> <span class=\"err\">?</span><span class=\"n\">x_1800</span> <span class=\"err\">?</span><span class=\"n\">x_1801</span> <span class=\"err\">?</span><span class=\"n\">x_1802</span> <span class=\"err\">?</span><span class=\"n\">x_1803</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">600</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1801</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">600</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1801</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">normalization_domain</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">600</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1801</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain</span><span class=\"bp\">.</span><span class=\"n\">to_normalization_domain</span> <span class=\"err\">?</span><span class=\"n\">x_1804</span> <span class=\"err\">?</span><span class=\"n\">x_1805</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">601</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1805</span> <span class=\"o\">:</span> <span class=\"n\">gcd_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_gcd_domain</span> <span class=\"err\">?</span><span class=\"n\">x_1806</span> <span class=\"err\">?</span><span class=\"n\">x_1807</span> <span class=\"err\">?</span><span class=\"n\">x_1808</span> <span class=\"err\">?</span><span class=\"n\">x_1809</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">602</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_1807</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"bp\">...</span>\n</pre></div>",
        "id": 194550152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587223821
    },
    {
        "content": "<p><code>gcd_domain</code> extends <code>normalization_domain</code> and <code>gcd_domain.to_normalization_domain</code> is an instance, so when you add your instance you make a loop. This is presumably why</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">unique_factorization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_gcd_domain</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normalization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">gcd_domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>is a def but not an instance in mathlib.</p>",
        "id": 194550258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587223976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255743\">Paul van Wamelen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194549962\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194549962\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normalization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">unique_factorization_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">associates</span> <span class=\"n\">α</span><span class=\"o\">)]</span>\n</pre></div>\n\n\n</blockquote>\n<p><code>normalization_domain</code> extends <code>integral_domain</code>, so you don't want both. That would give you two unrelated ring structures on the type.</p>",
        "id": 194550378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587224139
    },
    {
        "content": "<p>Now the loop is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">106</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_319</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">106</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_319</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">normalization_domain</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">106</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_319</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain</span><span class=\"bp\">.</span><span class=\"n\">to_normalization_domain</span> <span class=\"err\">?</span><span class=\"n\">x_322</span> <span class=\"err\">?</span><span class=\"n\">x_323</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">107</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_323</span> <span class=\"o\">:</span> <span class=\"n\">gcd_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_gcd_domain</span> <span class=\"err\">?</span><span class=\"n\">x_324</span> <span class=\"err\">?</span><span class=\"n\">x_325</span> <span class=\"err\">?</span><span class=\"n\">x_326</span> <span class=\"err\">?</span><span class=\"n\">x_327</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">108</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_325</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">108</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_325</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">normalization_domain</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">108</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_325</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain</span><span class=\"bp\">.</span><span class=\"n\">to_normalization_domain</span> <span class=\"err\">?</span><span class=\"n\">x_328</span> <span class=\"err\">?</span><span class=\"n\">x_329</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">109</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_329</span> <span class=\"o\">:</span> <span class=\"n\">gcd_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">to_gcd_domain</span> <span class=\"err\">?</span><span class=\"n\">x_330</span> <span class=\"err\">?</span><span class=\"n\">x_331</span> <span class=\"err\">?</span><span class=\"n\">x_332</span> <span class=\"err\">?</span><span class=\"n\">x_333</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">110</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_331</span> <span class=\"o\">:</span> <span class=\"n\">normalization_domain</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">associates</span> <span class=\"n\">α</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span> <span class=\"n\">α</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normalization_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"bp\">...</span>\n</pre></div>",
        "id": 194550464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587224244
    },
    {
        "content": "<p>It seems like you might as well just ask for a <code>gcd_domain</code></p>",
        "id": 194550513,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587224283
    },
    {
        "content": "<p>I always wondered what they were for, maybe Paul is about to tell us :-)</p>",
        "id": 194550634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587224419
    },
    {
        "content": "<p>that crackpot CS class :-)</p>",
        "id": 194550656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587224472
    },
    {
        "content": "<p>Didn't we once decide that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> were the only examples?</p>",
        "id": 194550717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587224559
    },
    {
        "content": "<p>and then there was a proposal to change it all to semrings so we could have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> as well :-)</p>",
        "id": 194550739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587224605
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/questions/2901858/are-there-any-non-orientable-integral-domains\" title=\"https://math.stackexchange.com/questions/2901858/are-there-any-non-orientable-integral-domains\">https://math.stackexchange.com/questions/2901858/are-there-any-non-orientable-integral-domains</a></p>",
        "id": 194550850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587224706
    },
    {
        "content": "<p>And here I am with yet another noob question arising while I'm trying to make something out of Cat <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <br>\nWhat should I usually do when unification blatantly fails, as in : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">isomorphism</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">Cat</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span>\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">section</span>\n    <span class=\"kn\">instance</span> <span class=\"n\">b_cat_to_sort</span><span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">α</span> <span class=\"o\">}</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"n\">def</span> <span class=\"n\">opfunctor</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">((</span><span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"err\">ᵒᵖ</span><span class=\"o\">),</span>\n      <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n    <span class=\"kn\">lemma</span> <span class=\"n\">op_is_involution</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">opfunctor</span> <span class=\"err\">⋙</span> <span class=\"n\">opfunctor</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟭</span> <span class=\"n\">Cat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here the proof should be straightforward: look at objects, look at morphisms, done, yet functor.ext won't apply despite the goal being precisely of the right form, I'm a bit lost.</p>",
        "id": 194551224,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587225203
    },
    {
        "content": "<p>You've fallen into a classic trap. Try jump-to-definition on functor.ext.</p>",
        "id": 194551293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587225286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"286014\">Robin Carlier</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194541590\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194541590\">said</a>:</p>\n<blockquote>\n<p>Yeah <span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> I saw that that canonical was in <code>eq_hom</code>... And is defined with a rw <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <br>\nSo I ended up using the one in <code>eq_hom</code> anyway, and it beign constructed with <code>rw</code>did cause a lot of headeaches</p>\n</blockquote>\n<p>I'm not familiar with the category theory library, but would it help if we replaced it with a term mode definition like the one I constructed above?</p>",
        "id": 194551385,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587225408
    },
    {
        "content": "<p>jump-to-definition?</p>",
        "id": 194551392,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587225426
    },
    {
        "content": "<p>If you're using VS code you can hit F12 when the cursor is in the name you're interested in to open an editor window at its definition, or you can right click and select \"Go to definition\".</p>",
        "id": 194551452,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587225484
    },
    {
        "content": "<p>Oh, thank you. well I end up in category rather than category_theory? IS that the \"classic trap\"?</p>",
        "id": 194551486,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587225582
    },
    {
        "content": "<p>Almost certainly</p>",
        "id": 194551616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587225728
    },
    {
        "content": "<p><code>category</code> is for computer scientists only</p>",
        "id": 194551618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587225746
    },
    {
        "content": "<p>Okay, and so how should I call the \"right\" functor.ext then? <code>category_theory.functor.ext</code> won't work.</p>",
        "id": 194551634,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587225796
    },
    {
        "content": "<p>Alright I found it, just had to rename when I opened the <code>category_theory</code> namespace, is there any other way than renaming?</p>",
        "id": 194551813,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226009
    },
    {
        "content": "<p>What did you rename?</p>",
        "id": 194551881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587226111
    },
    {
        "content": "<p>I renamed functor.ext to something else, so when I apply, I get the thing I want and not that stuff from <code>category</code></p>",
        "id": 194551892,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226157
    },
    {
        "content": "<p><code>open category_theory (renaming functor.ext → functor.extension)</code> And then <code>apply functor.extension</code> works like a charm</p>",
        "id": 194551904,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226184
    },
    {
        "content": "<p>But was simply wondering if there's another way</p>",
        "id": 194551972,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226284
    },
    {
        "content": "<p>I had almost forgotten that that was even possible. Are you sure that just using the full name doesn't work? It surely should</p>",
        "id": 194552105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587226485
    },
    {
        "content": "<p><code>category_theory.functor.ext</code>? yeah it works to, probably mistyped earlier then.</p>",
        "id": 194552223,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226672
    },
    {
        "content": "<p>By the way, in the category theory library we usually refrain from proving equalities of functors like this because it ends up committing you to the <code>eq_to_hom</code> world. However, I don't think it's necessarily a bad idea, and if you want to work in the 1-category <code>Cat</code> seriously, you have to do this.</p>",
        "id": 194552266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587226693
    },
    {
        "content": "<p>Yeah I tried to avoid that so far but in this particular case (proving the opposite is an auto-equivalence ) it looks like I have to do that</p>",
        "id": 194552287,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> regarding that definition with <code>rw</code> I seriously don't know, it's in <code>eq_to_hom</code> and as Reid said this is already quite a weird place</p>",
        "id": 194552349,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587226831
    },
    {
        "content": "<p>When you define data using <code>eq.subst</code>/<code>rw</code> it becomes quite painful to prove anything about it. <code>eq_to_hom</code> was an effort to systematize that pain.</p>",
        "id": 194552677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587227296
    },
    {
        "content": "<p>Yeah it saved my butt earlier in the day</p>",
        "id": 194552684,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587227320
    },
    {
        "content": "<p>Also, is there an intermediate step between the default verbosity and <code>set_option pp.all true</code>? My goal is showing some <code>_</code>terms that should be known (had the same stuff earlier), is there a way to make them display in full?</p>",
        "id": 194553054,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587227849
    },
    {
        "content": "<p><code>set_option pp.proofs true</code> might help.</p>",
        "id": 194553100,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587227912
    },
    {
        "content": "<p>Yes, it removes the underscores! Thank you! Also, I have stuff like <code>?m_1[X]</code> in my goal, which I assume is \"some term that depends on X\"? is there a way to make them explicit as well? They remain after <code>set_option pp.proofs true</code></p>",
        "id": 194553215,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1587228094
    },
    {
        "content": "<p>They are \"some term that depends (or rather, may depend) on X\" and Lean doesn't know more about them.</p>",
        "id": 194553529,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587228529
    },
    {
        "content": "<p>Frequently you get metavariables in goals because Lean was unable to infer some implicit arguments to a term that you used in <code>apply</code> or <code>refine</code>.</p>",
        "id": 194553608,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587228645
    },
    {
        "content": "<p>If you have multiple goals then you might find that the <code>?m_1</code> in one of them is the solution to another one.</p>",
        "id": 194553673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587228742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194395984\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194395984\">said</a>:</p>\n<blockquote>\n<p>Delete the <code>init</code>s.</p>\n<p>So</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">--https://observablehq.com/@bryangingechen/fibonacci-formalized-1-some-sums?collection=@bryangingechen/lean&amp;fbclid=IwAR1UQq-DS6CG403IjSkBQS5n_evm9soXWgq-NKDyuyxB1Myc0J4tXd8xHhc</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">list</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n</pre></div>\n\n\n</blockquote>\n<p>I tried doing that and got an error that mathlib wasn't in the lean path. Going back to my previous work it looks like I've always been using<code>import init.data.nat.basic</code> instead of <code>import data.nat.basic</code>. How do these two differ? How would one give me partial access to some <code>nat</code> stuff if mathlib wasn't in my lean path to begin with?</p>",
        "id": 194554905,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587230658
    },
    {
        "content": "<p>Some of the <code>nat</code> stuff is in the core library rather than mathlib, and it happens to be in a module named <code>init.data.nat.basic</code>. But you get this automatically even if you don't import it (that's a feature of core library stuff under <code>init.*</code>).</p>",
        "id": 194554932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587230717
    },
    {
        "content": "<p>I don't see how <code>import init.data.nat.basic</code> could do anything unless you have <code>prelude</code> at the very top of your file.</p>",
        "id": 194554996,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587230785
    },
    {
        "content": "<p>Oh, I see. Your file wasn't relying on mathlib at all before. So instead of just removing the <code>init</code>s from the imports, I would just delete the <code>import data.nat.basic</code> and <code>import data.list.basic</code> entirely. </p>\n<p>If you do want to use stuff from mathlib, then you'll need to fix the path issue, and the best way to do that is to look at the install docs again, specifically <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">the \"project\" doc</a> if you've gotten <code>leanproject</code> working.</p>",
        "id": 194555204,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587231092
    },
    {
        "content": "<p>i have this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>how do i <code>def</code> a function that takes a sorted list and returns a sorted list?</p>",
        "id": 194555675,
        "sender_full_name": "Nam",
        "timestamp": 1587231659
    },
    {
        "content": "<p><code>id</code>?</p>",
        "id": 194555691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587231698
    },
    {
        "content": "<p>Is there a typo?</p>",
        "id": 194555742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587231728
    },
    {
        "content": "<p>there are 3 Coq kata, all authored by <span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span>, asking us to <a href=\"https://www.codewars.com/collections/verified-sorting-algorithms\" title=\"https://www.codewars.com/collections/verified-sorting-algorithms\">verify his sorting algorithms</a></p>",
        "id": 194555764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587231767
    },
    {
        "content": "<p>ah, right. sorry. i missed it. i meant to ask for a function that takes an \\N, a sorted list, and returns another sorted list.</p>",
        "id": 194555765,
        "sender_full_name": "Nam",
        "timestamp": 1587231771
    },
    {
        "content": "<p>Well then you can throw away the natural and return the sorted list.</p>",
        "id": 194555778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587231788
    },
    {
        "content": "<p>(i.e. insertion sort)</p>",
        "id": 194555779,
        "sender_full_name": "Nam",
        "timestamp": 1587231788
    },
    {
        "content": "<p>Oh, this function has some hitherto undisclosed properties :-)</p>",
        "id": 194555786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587231808
    },
    {
        "content": "<p>I would imagine that defining this function isn't too hard using the equation compiler.</p>",
        "id": 194555831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587231851
    },
    {
        "content": "<p>(removed)</p>",
        "id": 194555833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587231853
    },
    {
        "content": "<p>For some reason people on Haskell channels like to ask questions like this, as though it's always obvious what any function would do from its type.</p>",
        "id": 194555845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587231870
    },
    {
        "content": "<p>Actually, you might end up having to ask Chris how to get your recursion to be well-founded.</p>",
        "id": 194555848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587231875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194555848\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194555848\">said</a>:</p>\n<blockquote>\n<p>Actually, you might end up having to ask Chris how to get your recursion to be well-founded.</p>\n</blockquote>\n<p>can't you just deconstruct the list one element by one element</p>",
        "id": 194555871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587231936
    },
    {
        "content": "<p>each time you only need to recurse on the normal thing</p>",
        "id": 194555873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587231944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> i assume your Coq resource was directed to me. how does that help me understand Lean syntax?</p>",
        "id": 194555915,
        "sender_full_name": "Nam",
        "timestamp": 1587231982
    },
    {
        "content": "<p>that was before you clarified that you want insertion sort</p>",
        "id": 194555919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232001
    },
    {
        "content": "<p>there was some resource in Software Foundations about insertion sort, where my inspiration comes</p>",
        "id": 194555956,
        "sender_full_name": "Nam",
        "timestamp": 1587232038
    },
    {
        "content": "<p>Why not post the Coq code and ask how to translate it?</p>",
        "id": 194555963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587232058
    },
    {
        "content": "<p>the problem i'm having is to find the right incantation</p>",
        "id": 194555965,
        "sender_full_name": "Nam",
        "timestamp": 1587232061
    },
    {
        "content": "<p>I don't think the mods will mind Coq code, as long as you don't do it too often.</p>",
        "id": 194556008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587232086
    },
    {
        "content": "<p>i prefer it to be as natural as possible. i'm trying to learn the intuition behind it, not the mechanical translation of Coq -&gt; Lean.</p>",
        "id": 194556027,
        "sender_full_name": "Nam",
        "timestamp": 1587232124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194555204\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194555204\">said</a>:</p>\n<blockquote>\n<p>Oh, I see. Your file wasn't relying on mathlib at all before. So instead of just removing the <code>init</code>s from the imports, I would just delete the <code>import data.nat.basic</code> and <code>import data.list.basic</code> entirely. </p>\n<p>If you do want to use stuff from mathlib, then you'll need to fix the path issue, and the best way to do that is to look at the install docs again, specifically <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">the \"project\" doc</a> if you've gotten <code>leanproject</code> working.</p>\n</blockquote>\n<p>This seems to be what my problem was - must have built my current project workspace incorrectly. I follow the directions to make a new workspace and now <code>import data.nat.basic</code> doesn't error anymore. Thank you!</p>",
        "id": 194556052,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587232168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> have you seen how to recurse on a list?</p>",
        "id": 194556111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232229
    },
    {
        "content": "<p>if not, recurse on a natural number?</p>",
        "id": 194556118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232235
    },
    {
        "content": "<p>(I'm too busy to type any Lean code)</p>",
        "id": 194556122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232241
    },
    {
        "content": "<p>no worries! any idea is welcome. yes i know the concepts. what i'm asking isn't the implementation of such function. i'm only asking for the signature of the <code>def</code>.</p>",
        "id": 194556142,
        "sender_full_name": "Nam",
        "timestamp": 1587232288
    },
    {
        "content": "<p>oh that I can write: <code>def insertion_sort : \\N \\to list \\N \\to list \\N</code></p>",
        "id": 194556184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232323
    },
    {
        "content": "<p>(my algorithm doesn't need the list to be sorted in the first place to work)</p>",
        "id": 194556187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232339
    },
    {
        "content": "<p>(but I can guarantee that if you input a sorted list you will get a sorted list)</p>",
        "id": 194556192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232353
    },
    {
        "content": "<p>here in Lean we prefer to totalize our functions</p>",
        "id": 194556193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232361
    },
    {
        "content": "<p>and then <code>theorem insertion_sort_correct: \\forall n L, sorted L \\to sorted (insertion_sort n L)</code></p>",
        "id": 194556205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232389
    },
    {
        "content": "<p>or some other properties that you want to verify</p>",
        "id": 194556206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232395
    },
    {
        "content": "<p>i don't quite understand your <code>insertion_sort</code>. does it sort a list, or does it insert a new element to a sorted list?</p>",
        "id": 194556288,
        "sender_full_name": "Nam",
        "timestamp": 1587232502
    },
    {
        "content": "<p>it insert a new element to a list in the appropriate place</p>",
        "id": 194556298,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232521
    },
    {
        "content": "<p>so then that list must be sorted.</p>",
        "id": 194556307,
        "sender_full_name": "Nam",
        "timestamp": 1587232531
    },
    {
        "content": "<p>such that if the list is sorted to begin with, the output list will be sorted</p>",
        "id": 194556308,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232531
    },
    {
        "content": "<p>we don't like partial functions</p>",
        "id": 194556316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232541
    },
    {
        "content": "<p>It should probably be called something more like <code>sorted_insert</code></p>",
        "id": 194556317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232542
    },
    {
        "content": "<p>Also, the alternative isn't really a \"partial function\", it's a function with a precondition</p>",
        "id": 194556366,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232573
    },
    {
        "content": "<p>I mean, the algorithm is basically: if the new element is smaller than the first element then put it before the first element; otherwise if it is smaller than the second element then put it before the second element, etc</p>",
        "id": 194556378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232593
    },
    {
        "content": "<p>none of the processes here requires the list to be sorted</p>",
        "id": 194556382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587232603
    },
    {
        "content": "<p>I know you're doing this as a learning exercise, but at some point you may find it interesting to compare with the sorting code in mathlib: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/list/sort.lean</a></p>",
        "id": 194556405,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587232631
    },
    {
        "content": "<p>Nam, how is it written in your Coq book?</p>",
        "id": 194556428,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232669
    },
    {
        "content": "<p><a href=\"https://softwarefoundations.cis.upenn.edu/vfa-current/Sort.html\" title=\"https://softwarefoundations.cis.upenn.edu/vfa-current/Sort.html\">https://softwarefoundations.cis.upenn.edu/vfa-current/Sort.html</a></p>",
        "id": 194556469,
        "sender_full_name": "Nam",
        "timestamp": 1587232691
    },
    {
        "content": "<p>Yes, it's just the same in Lean then.</p>",
        "id": 194556474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232718
    },
    {
        "content": "<p>yes, my <code>sorted</code> is very similar.</p>",
        "id": 194556483,
        "sender_full_name": "Nam",
        "timestamp": 1587232746
    },
    {
        "content": "<p>I mean the syntax is not literally the same, because of the way the equation compiler works.</p>",
        "id": 194556489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232764
    },
    {
        "content": "<p>but i don't like the idea of feeding my \"insert one element\" with any list.</p>",
        "id": 194556493,
        "sender_full_name": "Nam",
        "timestamp": 1587232776
    },
    {
        "content": "<p>But the separation of program from properties that Kenny is advocating is also in the original Coq version.</p>",
        "id": 194556550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232825
    },
    {
        "content": "<p>true. that's where i'd like to divert from the book. doing my own thing, if you will ;).</p>",
        "id": 194556558,
        "sender_full_name": "Nam",
        "timestamp": 1587232847
    },
    {
        "content": "<p>i think it's okay for the main sort function to take any list, but the insert one element function should only accept sorted list.</p>",
        "id": 194556581,
        "sender_full_name": "Nam",
        "timestamp": 1587232898
    },
    {
        "content": "<p>Okay, you can do that by writing <code>def insert : ℕ → Π (l : list ℕ), sorted l → list ℕ</code></p>",
        "id": 194556647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587232983
    },
    {
        "content": "<p>but if you implement this function, you'll find you never use the <code>sorted l</code> hypothesis</p>",
        "id": 194556658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233024
    },
    {
        "content": "<p>can i also qualify the output?</p>",
        "id": 194556663,
        "sender_full_name": "Nam",
        "timestamp": 1587233033
    },
    {
        "content": "<p>i think that's where this hypothesis will be used</p>",
        "id": 194556667,
        "sender_full_name": "Nam",
        "timestamp": 1587233041
    },
    {
        "content": "<p><code>def insert : ℕ → Π (l : list ℕ), sorted l → {l' : list ℕ // sorted l'}</code></p>",
        "id": 194556711,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233056
    },
    {
        "content": "<p>But if you do it like that then you'll have to do your work in the definition</p>",
        "id": 194556718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233077
    },
    {
        "content": "<p>Now you have completely abandoned \"separate program from properties\". Sometimes it's easier this way.</p>",
        "id": 194556721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233101
    },
    {
        "content": "<p>Why not factor things out into the definition everyone else is suggesting</p>",
        "id": 194556727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233107
    },
    {
        "content": "<p>And then prove the theorem</p>",
        "id": 194556734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233114
    },
    {
        "content": "<p>And <em>then</em> make your definition</p>",
        "id": 194556737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233124
    },
    {
        "content": "<p>Which by this point will be one line long</p>",
        "id": 194556749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233145
    },
    {
        "content": "<p>Well, sometimes you end up repeating work if you prove the properties separately</p>",
        "id": 194556750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233149
    },
    {
        "content": "<p>Like in this case it might well be easier to prove the property at the same time as making the definition</p>",
        "id": 194556806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233191
    },
    {
        "content": "<p>I see</p>",
        "id": 194556808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233205
    },
    {
        "content": "<p>Of course in this case, it's also easy either way</p>",
        "id": 194556830,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233222
    },
    {
        "content": "<p>Right</p>",
        "id": 194556835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233233
    },
    {
        "content": "<p>But I see the general principle</p>",
        "id": 194556842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233244
    },
    {
        "content": "<p>i'm a software engineer. this is the natural way i would approach insertion sort.</p>",
        "id": 194556858,
        "sender_full_name": "Nam",
        "timestamp": 1587233256
    },
    {
        "content": "<p>but i see your points about \"total function\" or something like that.</p>",
        "id": 194556866,
        "sender_full_name": "Nam",
        "timestamp": 1587233273
    },
    {
        "content": "<p>(of course i don't know what that means yet)</p>",
        "id": 194556904,
        "sender_full_name": "Nam",
        "timestamp": 1587233287
    },
    {
        "content": "<p>There are reasons you might prefer one over the other but I wouldn't exclude either approach a priori.</p>",
        "id": 194556906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587233293
    },
    {
        "content": "<p>It means define the function without assuming the import list is sorted -- define it on all lists</p>",
        "id": 194556910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233314
    },
    {
        "content": "<p>if you're a software engineer, then you don't prove any properties at all when you build your function, and you would build your function exactly how I suggested: without caring about whether the original list is sorted</p>",
        "id": 194556914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587233320
    },
    {
        "content": "<p>Like the square root function in mathlib is defined on all real numbers and just returns junk for negative ones</p>",
        "id": 194556924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233348
    },
    {
        "content": "<p>Lean offers you a way to prove that your code has no bugs</p>",
        "id": 194556937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233376
    },
    {
        "content": "<p>That would be the theorem you'd prove about your total function</p>",
        "id": 194556943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233396
    },
    {
        "content": "<p>You would accept the garbage in garbage out principle. Why check the list is sorted? It just wastes time</p>",
        "id": 194556999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233445
    },
    {
        "content": "<p>So in the definition you can take any list</p>",
        "id": 194557006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233465
    },
    {
        "content": "<p>And then the theorem you prove is that if the list is sorted your function isn't buggy</p>",
        "id": 194557016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233488
    },
    {
        "content": "<p>thanks! i'll need to adopt that thinking.</p>",
        "id": 194557066,
        "sender_full_name": "Nam",
        "timestamp": 1587233571
    },
    {
        "content": "<p>But you don't release the theorem to the customer, you just give them the super fast function and a warning that if they put garbage in they'll get garbage out</p>",
        "id": 194557068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233575
    },
    {
        "content": "<p>And if they want to check their input before they give it to your function that's their choice</p>",
        "id": 194557076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233614
    },
    {
        "content": "<p>They might instead choose to prove that their code which generates the list they will feed to your function is always sorted</p>",
        "id": 194557125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233658
    },
    {
        "content": "<p>And they can put that in the unit tests and not ship it</p>",
        "id": 194557128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587233676
    },
    {
        "content": "<p>my take of dependent type is it helps me ensure some properties at <em>compile</em> time. e.g. sqrt n, n &gt;= 0 ensures that clients cannot pass invalid input throughout the whole program. i like that very much.</p>",
        "id": 194557372,
        "sender_full_name": "Nam",
        "timestamp": 1587234107
    },
    {
        "content": "<p>Well you can offer both functions to the customer</p>",
        "id": 194557737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587234700
    },
    {
        "content": "<p>The one which demands a certificate that the list is sorted costs more to use but has the advantage that it outputs a guarantee that the output is also sorted</p>",
        "id": 194557797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587234792
    },
    {
        "content": "<p>You shouldn't be writing your own algorithms that check your customer's list is sorted, the customer's lists might have properties which only they know about which might make checking much easier for them than for you</p>",
        "id": 194557850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587234858
    },
    {
        "content": "<p>The compile time win is what you get when you define the more sophisticated function</p>",
        "id": 194557881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587234913
    },
    {
        "content": "<p>Question: Given <code>h : ∃ x : α, p x</code>, how do I pull out a term <code>x : α</code> and a term <code>hx : p x</code> where <code>p : α  → Prop</code>?</p>\n<p>Discussion: In <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">TPIL</a>, it says:</p>\n<p>\"The existential elimination rule, exists.elim, performs the opposite operation. It allows us to prove a proposition q from ∃ x : α, p x, by showing that q follows from p w for an arbitrary value w. Roughly speaking, since we know there is an x satisfying p x, we can give it a name, say, w. If q does not mention w, then showing that q follows from p w is tantamount to showing the q follows from the existence of any such x.\" </p>\n<p>What has q got to do with anything?</p>",
        "id": 194561736,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587240934
    },
    {
        "content": "<p>well when you say \"pull out a term ...\" you have a goal in mind, i.e. a proposition you want to prove, and that is <code>q</code></p>",
        "id": 194561792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587241027
    },
    {
        "content": "<p>but I would agree that \"if q does not mention w\" sounds a bit clumsy to me</p>",
        "id": 194561804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587241082
    },
    {
        "content": "<p>yeah, the proposition i want to prove is the stuff that is in the goal next to the turnstile, right?</p>\n<p>sorry, i'm not sure if i understand. I'm kind of expecting to be at a point where i can have <code>x : α</code> and <code>hx : p x</code> in my assumptions, and I don't know what <code>q</code> has got anything to do with me wanting that</p>",
        "id": 194561971,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587241329
    },
    {
        "content": "<p>If you're in tactic mode, then probably the answer you're looking for is <code>cases h with x hx</code>.</p>",
        "id": 194562051,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587241527
    },
    {
        "content": "<p>TPIL is explaining the theory behind the term that that tactic will generate.</p>",
        "id": 194562053,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587241548
    },
    {
        "content": "<p>yes, that tactic worked! I should probably at some point figure out the theory though</p>",
        "id": 194562110,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587241637
    },
    {
        "content": "<p>cheers</p>",
        "id": 194562113,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587241641
    },
    {
        "content": "<p>If <code>h : ∃ x : α, p x</code> is a hypothesis and your goal is <code>⊢ q</code> then what you are trying to do is to prove <code>(∃ x : α, p x) -&gt; q</code></p>",
        "id": 194562738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242705
    },
    {
        "content": "<p>I wouldn't worry about what TPIL says. The authors are thinking about how to explain what is going on to computer scientists who think about logic in some weird way involving gigantic fractions with sideways T's on the numerator and denominator. Mathematicians don't need to think about that because they only use one logic and they have completely internalised it.</p>",
        "id": 194562830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242855
    },
    {
        "content": "<p>You just need to know that clearly if we have proved there exists x such that p(x) then we can obviously just take such an x. Computer scientists might want to think very carefully about what just happened there, but I don't see any reason why mathematicians need to.</p>",
        "id": 194562892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587242921
    },
    {
        "content": "<p>i have <code>h1 : Prop := x ≤ head</code>, how do i turn that into <code>x ≤ head : Prop</code>?</p>",
        "id": 194563674,
        "sender_full_name": "Nam",
        "timestamp": 1587243999
    },
    {
        "content": "<p>sorry if that sounds silly</p>",
        "id": 194563675,
        "sender_full_name": "Nam",
        "timestamp": 1587244012
    },
    {
        "content": "<p>How did you make <code>h1</code> and are you in term mode or tactic mode?</p>",
        "id": 194563689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244037
    },
    {
        "content": "<p>i've been trying to make Reid's suggestion work.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tail_of_sorted_list_is_sorted</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"o\">{</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"o\">:</span> <span class=\"n\">tail_head</span> <span class=\"n\">tail_tail</span> <span class=\"n\">h_lte</span> <span class=\"n\">h_sorted</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h_sorted</span> <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ins_sort_insert</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">sorted</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">sorted</span> <span class=\"n\">l&#39;</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">head</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"k\">then</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h1</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n    <span class=\"k\">else</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ins_sort_insert</span> <span class=\"n\">x</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">tail_of_sorted_list_is_sorted</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 194563699,
        "sender_full_name": "Nam",
        "timestamp": 1587244069
    },
    {
        "content": "<p>h1 is created by the <code>let</code> clause</p>",
        "id": 194563740,
        "sender_full_name": "Nam",
        "timestamp": 1587244101
    },
    {
        "content": "<p>Can you post complete working code so I can just cut and paste?</p>",
        "id": 194563746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244113
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h1</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>",
        "id": 194563807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244204
    },
    {
        "content": "<p><code>h1</code> is a proposition; <code>h1 : Prop</code>.</p>",
        "id": 194563823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244217
    },
    {
        "content": "<p>But the first input to <code>sorted.other</code> isn't something of type <code>Prop</code>, it's a <em>proof</em></p>",
        "id": 194563830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244248
    },
    {
        "content": "<p>Don't confuse a theorem statement and a theorem proof.</p>",
        "id": 194563837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244271
    },
    {
        "content": "<p>so <code>by h1</code> then?</p>",
        "id": 194563839,
        "sender_full_name": "Nam",
        "timestamp": 1587244287
    },
    {
        "content": "<p><code>h1</code> is a type. You don't want to feed in h1, you want to feed in a term of type h1.</p>",
        "id": 194563841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244292
    },
    {
        "content": "<p>I don't see a proof of <code>h1</code> in your context, because you used <code>if</code> and not a dependent <code>if</code>.</p>",
        "id": 194563892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244344
    },
    {
        "content": "<p>You need to do this:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">let</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">head</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">h1proof</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"k\">then</span>\n</pre></div>",
        "id": 194563896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244373
    },
    {
        "content": "<p>This carries the proof of <code>h1</code> into the <code>then</code> clause</p>",
        "id": 194563905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244424
    },
    {
        "content": "<p>oh, thanks! that's another incantation for me to remember.</p>",
        "id": 194563947,
        "sender_full_name": "Nam",
        "timestamp": 1587244449
    },
    {
        "content": "<p>actually, i don't need <code>h1</code>, i need its proof.</p>",
        "id": 194563951,
        "sender_full_name": "Nam",
        "timestamp": 1587244468
    },
    {
        "content": "<p><code>if c then ... else</code> is syntax sugar for <code>ite</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ite</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>and the case split doesn't carry the proof along with it.</p>",
        "id": 194563961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244483
    },
    {
        "content": "<p>can i do <code>let h1 : (x &lt;= head : Prop) := x &lt;= head in</code>?</p>",
        "id": 194563965,
        "sender_full_name": "Nam",
        "timestamp": 1587244493
    },
    {
        "content": "<p><code>x &lt;= head</code> is a Proposition. It's a term of type Prop. <code>2+2=5</code> is a proposition. You can write <code>let h1 := 2 + 2 = 5 in ...</code> and that's fine. You've just defined <code>h1</code> to be a proposition which is always false.</p>",
        "id": 194564008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244563
    },
    {
        "content": "<p>No amount of shuffling syntax around is going to come up with a proof of 2+2=5 though.</p>",
        "id": 194564022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244586
    },
    {
        "content": "<p>Prop is the universe, <code>P : Prop</code> is the type and <code>h : P</code> is the term. <code>h</code> is a proof of <code>P</code>.</p>",
        "id": 194564028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244611
    },
    {
        "content": "<p>You can make as many <code>P</code>'s as you like, but making <code>h</code>'s is hard.</p>",
        "id": 194564033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244624
    },
    {
        "content": "<p>You can't just create a proof that x &lt;= head because it might not be true.</p>",
        "id": 194564040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244650
    },
    {
        "content": "<p>What you called <code>h1</code> is not the usual notation for this -- usually <code>h</code> is used for proofs and stuff like <code>p</code> or <code>P</code> is used for the propositions.</p>",
        "id": 194564084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244686
    },
    {
        "content": "<p>i see. that's why it's only available in the case split.</p>",
        "id": 194564085,
        "sender_full_name": "Nam",
        "timestamp": 1587244696
    },
    {
        "content": "<p>Right. In the dependent case split you split into either there being a proof of <code>h1</code> or a proof of <code>not h1</code></p>",
        "id": 194564089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244724
    },
    {
        "content": "<p><code>if h : P then ... else ...</code> is syntax sugar for <code>dite</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">dite</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p><code>dite</code> is better than <code>ite</code> because you get a proof of c or not c as appropriate when you're trying to construct your terms of type alpha which you need to fill in the inputs to the dite.</p>",
        "id": 194564104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244792
    },
    {
        "content": "<p>btw, does this look \"idiomatic\" other than the naming?</p>",
        "id": 194564105,
        "sender_full_name": "Nam",
        "timestamp": 1587244793
    },
    {
        "content": "<p>the <code>begin exact end</code> is superfluous</p>",
        "id": 194564152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587244809
    },
    {
        "content": "<p><code>begin exact h end</code> is the same as <code>h</code></p>",
        "id": 194564175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244834
    },
    {
        "content": "<p>ah well, i dno't know how many lines i would need, so <code>begin</code> and <code>end</code></p>",
        "id": 194564177,
        "sender_full_name": "Nam",
        "timestamp": 1587244840
    },
    {
        "content": "<p>the <code>let h1 := x &lt;= head</code> seems very odd but you may have fixed it by now</p>",
        "id": 194564184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587244854
    },
    {
        "content": "<p>i was just going to call it <code>p</code></p>",
        "id": 194564188,
        "sender_full_name": "Nam",
        "timestamp": 1587244867
    },
    {
        "content": "<p>maybe that's not enough?</p>",
        "id": 194564191,
        "sender_full_name": "Nam",
        "timestamp": 1587244874
    },
    {
        "content": "<p>you don't need the let at all</p>",
        "id": 194564192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587244875
    },
    {
        "content": "<p><code>if h : x &lt;= head then</code></p>",
        "id": 194564201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244899
    },
    {
        "content": "<p>just use <code>if h : x &lt;= head then ... else ...</code></p>",
        "id": 194564202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587244900
    },
    {
        "content": "<p>got it.</p>",
        "id": 194564205,
        "sender_full_name": "Nam",
        "timestamp": 1587244905
    },
    {
        "content": "<p>wooah you already have an h</p>",
        "id": 194564210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244921
    },
    {
        "content": "<p><code>if h2 : x &lt;= head then</code></p>",
        "id": 194564251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587244934
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ins_sort_insert</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">sorted</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">sorted</span> <span class=\"n\">l&#39;</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">head</span> <span class=\"k\">then</span>\n   <span class=\"k\">begin</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span> <span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h2</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n    <span class=\"k\">else</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ins_sort_insert</span> <span class=\"n\">x</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">tail_of_sorted_list_is_sorted</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span> <span class=\"c1\">-- you have some work to do</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 194564330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245126
    },
    {
        "content": "<p>You can also inline / simplify the proof of <code>tail_of_sorted_list_is_sorted</code> in <code>ins_sort_insert</code></p>",
        "id": 194564332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245139
    },
    {
        "content": "<p>i can't use <code>h2</code> in the else, can i?</p>",
        "id": 194564377,
        "sender_full_name": "Nam",
        "timestamp": 1587245165
    },
    {
        "content": "<p>you can</p>",
        "id": 194564378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245171
    },
    {
        "content": "<p>The missing proof (indicated with an <code>_</code>) is not <code>h</code></p>",
        "id": 194564381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245174
    },
    {
        "content": "<p><code>h2</code> is a proof of <code>¬x ≤ head</code> in the else branch</p>",
        "id": 194564385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245193
    },
    {
        "content": "<p>but <code>h2</code> won't be accepted by <code>sorted</code></p>",
        "id": 194564386,
        "sender_full_name": "Nam",
        "timestamp": 1587245197
    },
    {
        "content": "<p>The type of <code>h2</code> is currently <code>not (le x head)</code></p>",
        "id": 194564403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245227
    },
    {
        "content": "<p>and <code>sorted</code> doesn't seem to have any inputs of that type</p>",
        "id": 194564407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245248
    },
    {
        "content": "<p>should it?</p>",
        "id": 194564408,
        "sender_full_name": "Nam",
        "timestamp": 1587245259
    },
    {
        "content": "<p>no</p>",
        "id": 194564409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245264
    },
    {
        "content": "<p><code>sorted</code> seems to be complete. yeah.</p>",
        "id": 194564411,
        "sender_full_name": "Nam",
        "timestamp": 1587245268
    },
    {
        "content": "<p>what did you try?</p>",
        "id": 194564414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245281
    },
    {
        "content": "<p>i've only tried <code>sorted.other h2 h</code>, similar to the if clause.</p>",
        "id": 194564461,
        "sender_full_name": "Nam",
        "timestamp": 1587245306
    },
    {
        "content": "<p>code</p>",
        "id": 194564462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">else</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ins_sort_insert</span> <span class=\"n\">x</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">tail_of_sorted_list_is_sorted</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h_x_head</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 194564465,
        "sender_full_name": "Nam",
        "timestamp": 1587245325
    },
    {
        "content": "<p>complete code?</p>",
        "id": 194564468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245336
    },
    {
        "content": "<p>What is <code>h_x_head</code>? Please post complete code</p>",
        "id": 194564477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245346
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ins_sort_insert</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">sorted</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">sorted</span> <span class=\"n\">l&#39;</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h_x_head</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">head</span> <span class=\"k\">then</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">),</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h_x_head</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n  <span class=\"k\">else</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ins_sort_insert</span> <span class=\"n\">x</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">tail_of_sorted_list_is_sorted</span> <span class=\"n\">h</span><span class=\"o\">)),</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h_x_head</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 194564481,
        "sender_full_name": "Nam",
        "timestamp": 1587245356
    },
    {
        "content": "<p>it is what i call your <code>h2</code></p>",
        "id": 194564493,
        "sender_full_name": "Nam",
        "timestamp": 1587245379
    },
    {
        "content": "<p>i understand that current code won't work.</p>",
        "id": 194564559,
        "sender_full_name": "Nam",
        "timestamp": 1587245425
    },
    {
        "content": "<p>(as Kevin showed before)</p>",
        "id": 194564565,
        "sender_full_name": "Nam",
        "timestamp": 1587245432
    },
    {
        "content": "<p><code>sorted.other</code> needs a proof of <code>A &lt;= B</code> for some <code>A</code> and <code>B</code>, and <code>h_x_head</code> has type <code>not (something)</code> which is not the same as <code>le A B</code></p>",
        "id": 194564566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245433
    },
    {
        "content": "<p>You can see this in the error message. You have to prove a theorem here.</p>",
        "id": 194564570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245451
    },
    {
        "content": "<p>right, that's what i'm trying to reconcile.</p>",
        "id": 194564571,
        "sender_full_name": "Nam",
        "timestamp": 1587245452
    },
    {
        "content": "<p>You should use <code>\\not (x &lt;= head)</code> to prove <code>head &lt;= x</code>, using <code>le_of_not_ge</code>, but even then I think it will not work because <code>h</code> isn't the right second argument</p>",
        "id": 194564573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245460
    },
    {
        "content": "<p>But you can't just get this for free, it's not just a simple thing, this is where the work is.</p>",
        "id": 194564586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245478
    },
    {
        "content": "<p>indeed I would be surprised if you can finish the proof from here, because you don't know enough in the inductive hypothesis</p>",
        "id": 194564639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245543
    },
    {
        "content": "<p>In fact I am not even sure that your theorem is true</p>",
        "id": 194564645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245552
    },
    {
        "content": "<p>insert to a sorted list does not yield another sorted list?</p>",
        "id": 194564659,
        "sender_full_name": "Nam",
        "timestamp": 1587245592
    },
    {
        "content": "<p>All you know is head &lt; x, but you need  that head &lt;= (smallest element of tail) for your list to be sorted</p>",
        "id": 194564660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245593
    },
    {
        "content": "<p>smallest element of tail is its head</p>",
        "id": 194564667,
        "sender_full_name": "Nam",
        "timestamp": 1587245618
    },
    {
        "content": "<p>because tail of a sorted list is sorted</p>",
        "id": 194564674,
        "sender_full_name": "Nam",
        "timestamp": 1587245634
    },
    {
        "content": "<p>Right, but you don't know anything about the head of tail.</p>",
        "id": 194564675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245636
    },
    {
        "content": "<p>To clarify Kevin's assertion, of course the function is in fact going to sort the list, but you can't just prove that by induction, the induction hypothesis needs to be stronger than that</p>",
        "id": 194564676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245640
    },
    {
        "content": "<p>Actually I think we might be OK</p>",
        "id": 194564719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245680
    },
    {
        "content": "<p>ahhh</p>",
        "id": 194564720,
        "sender_full_name": "Nam",
        "timestamp": 1587245680
    },
    {
        "content": "<p>We have <code>h : sorted (head :: tail)</code></p>",
        "id": 194564728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245694
    },
    {
        "content": "<p>so head &lt;= head(tail)</p>",
        "id": 194564731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245700
    },
    {
        "content": "<p>wait</p>",
        "id": 194564737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245708
    },
    {
        "content": "<p>If you had a separate definition, this would be less of a problem because you would know what list is being returned, but here you only know you have <em>some</em> sorted list</p>",
        "id": 194564747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245717
    },
    {
        "content": "<p>so who knows if adding <code>head</code> to the front of it keeps it sorted</p>",
        "id": 194564752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245735
    },
    {
        "content": "<p>it has no relation to the input</p>",
        "id": 194564761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245746
    },
    {
        "content": "<p>the input is <code>x</code></p>",
        "id": 194564765,
        "sender_full_name": "Nam",
        "timestamp": 1587245753
    },
    {
        "content": "<p>and <code>x &gt; head</code></p>",
        "id": 194564806,
        "sender_full_name": "Nam",
        "timestamp": 1587245769
    },
    {
        "content": "<p>That is, you don't know that <code>ins_sort_insert x tail (tail_of_sorted_list_is_sorted h)</code> contains <code>x</code> or <code>tail</code> or has any relation to them. It might be the empty list</p>",
        "id": 194564815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245792
    },
    {
        "content": "<p>the only thing the type tells you is that it is a sorted list</p>",
        "id": 194564819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245810
    },
    {
        "content": "<p>The problem is that because of your choice of induction, all you know about <code>ins_sort_insert x tail _</code> is that it is a sorted list.</p>",
        "id": 194564825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245837
    },
    {
        "content": "<p>ahh. so i need a stronger condition? say, list.length &gt; 0?</p>",
        "id": 194564827,
        "sender_full_name": "Nam",
        "timestamp": 1587245840
    },
    {
        "content": "<p>that assumption won't help you prove the theorem</p>",
        "id": 194564836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245871
    },
    {
        "content": "<p>you need something that relates the output to the input</p>",
        "id": 194564873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245884
    },
    {
        "content": "<p>what have i got into. lol.</p>",
        "id": 194564875,
        "sender_full_name": "Nam",
        "timestamp": 1587245888
    },
    {
        "content": "<p>i thought this would be a walk in the park ;)</p>",
        "id": 194564877,
        "sender_full_name": "Nam",
        "timestamp": 1587245896
    },
    {
        "content": "<p>theorem proving :-)</p>",
        "id": 194564878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245897
    },
    {
        "content": "<p>Did you prove that the reverse of the reverse of a list was itself yet?</p>",
        "id": 194564880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245911
    },
    {
        "content": "<p>That was the point where I realised that lists were harder than they looked.</p>",
        "id": 194564884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245925
    },
    {
        "content": "<p>That theorem is delicate in the same way that this is delicate.</p>",
        "id": 194564890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245955
    },
    {
        "content": "<p>Mario can probably write some incomprehensible 5-line definition which works fine</p>",
        "id": 194564900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245971
    },
    {
        "content": "<p>lol</p>",
        "id": 194564904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587245982
    },
    {
        "content": "<p>but what I learnt very early on is that just because it can be done in 5 lines of code, doesn't mean at all that it is easy to do in 5 lines of code.</p>",
        "id": 194564909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587245996
    },
    {
        "content": "<p>not so sure if i've done that. i started with Hitchhiker's guide, and it solved that by <code>simp</code></p>",
        "id": 194564949,
        "sender_full_name": "Nam",
        "timestamp": 1587246010
    },
    {
        "content": "<p>I want to reiterate the suggestion to separate the definition and the theorem</p>",
        "id": 194564970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246037
    },
    {
        "content": "<p>Yeah, it was only Reid who suggested to do them both at once, and now he's gone</p>",
        "id": 194564978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587246061
    },
    {
        "content": "<p>this gives you a lot more freedom to inspect and case analyze the definition in the theorem, because the inductions aren't wrapped up into one</p>",
        "id": 194564981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246064
    },
    {
        "content": "<p>the downside is it doesn't give me any assurance about the inputs / outputs.</p>",
        "id": 194565036,
        "sender_full_name": "Nam",
        "timestamp": 1587246143
    },
    {
        "content": "<p>Of course it does</p>",
        "id": 194565038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246150
    },
    {
        "content": "<p>i'm used to \"contract\" kind of defensive programming</p>",
        "id": 194565040,
        "sender_full_name": "Nam",
        "timestamp": 1587246161
    },
    {
        "content": "<p>It gives you the assurance by its definition</p>",
        "id": 194565042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246166
    },
    {
        "content": "<p>it doesn't. my users can feed it any list.</p>",
        "id": 194565054,
        "sender_full_name": "Nam",
        "timestamp": 1587246193
    },
    {
        "content": "<p>The key thing that separates programming in lean from other functional languages you may be used to is that all defs are transparent; you know exactly what they evaluate to even after you are done with the definition itself</p>",
        "id": 194565058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246218
    },
    {
        "content": "<p>(even though it is an internal function for insertion sort and users shouldn't see it)</p>",
        "id": 194565060,
        "sender_full_name": "Nam",
        "timestamp": 1587246222
    },
    {
        "content": "<p>they can, and they will get what they get</p>",
        "id": 194565065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246237
    },
    {
        "content": "<p>and there are equations telling them what they will get</p>",
        "id": 194565106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246251
    },
    {
        "content": "<p>but the point that I want to make here is that even your \"improved\" function, saying that it returns a sorted list, isn't good enough because you will want to know more than that</p>",
        "id": 194565115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246286
    },
    {
        "content": "<p>what good is an insertion sort function that always returns <code>[]</code>? or <code>[0]</code>?</p>",
        "id": 194565124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246305
    },
    {
        "content": "<p>yes, that's a fair critique.</p>",
        "id": 194565127,
        "sender_full_name": "Nam",
        "timestamp": 1587246306
    },
    {
        "content": "<p>but in lean, you can also look at the definition later and see what it does, and prove more theorems about the definition</p>",
        "id": 194565146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246352
    },
    {
        "content": "<p>and for this it is best if the definition is as simple and nondependent as possible</p>",
        "id": 194565188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246379
    },
    {
        "content": "<p>are you saying that \"dependent types\" should be used more in proving than, erm, for the lack of better words, coding?</p>",
        "id": 194565212,
        "sender_full_name": "Nam",
        "timestamp": 1587246454
    },
    {
        "content": "<p>So you can write a function containing the \"logical core\" of insertion sort, with no sorted requirements, and then prove a theorem saying that this function produces sorted output from sorted input. You can also prove that it produces a permutation of <code>x::xs</code> (which you didn't put in the original definition), or even more precisely you can prove that there exist <code>l1 l2</code> such that <code>xs = l1 ++ l2</code> and the output is <code>l1 ++ x :: l2</code></p>",
        "id": 194565263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246514
    },
    {
        "content": "<p>That's right</p>",
        "id": 194565267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246525
    },
    {
        "content": "<p>i see. apparently i was hoping for something like <a href=\"https://en.wikipedia.org/wiki/Design_by_contract\" title=\"https://en.wikipedia.org/wiki/Design_by_contract\">https://en.wikipedia.org/wiki/Design_by_contract</a> but at compile time.</p>",
        "id": 194565285,
        "sender_full_name": "Nam",
        "timestamp": 1587246581
    },
    {
        "content": "<p>Oh, I'm not done. Once you've done all that, it is now trivial to write <code>insertion_sort : A -&gt; {l : list A // sorted l} -&gt; {l : list A // sorted l}</code></p>",
        "id": 194565344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246633
    },
    {
        "content": "<p>and this will give you all the contracts you want</p>",
        "id": 194565368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246651
    },
    {
        "content": "<p>But the core of the program involves assumptions only rarely. The main place you see assumptions showing up in the \"coding\" part is to avoid unreachable branches, for example in <code>list.nth_le (l : list A) (n : nat) : n &lt;= length l -&gt; A</code></p>",
        "id": 194565435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246752
    },
    {
        "content": "<p>i see. is that the same list <code>l</code> in both output and input?</p>",
        "id": 194565443,
        "sender_full_name": "Nam",
        "timestamp": 1587246762
    },
    {
        "content": "<p>no</p>",
        "id": 194565445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246770
    },
    {
        "content": "<p>there are two separate binders</p>",
        "id": 194565450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246777
    },
    {
        "content": "<p>then it won't solve the argument you mentioned before, that the output isn't related to the input.</p>",
        "id": 194565468,
        "sender_full_name": "Nam",
        "timestamp": 1587246806
    },
    {
        "content": "<p>you are right</p>",
        "id": 194565473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246812
    },
    {
        "content": "<p>but you can also have an improved insertion sort contract like <code>insertion_sort (x : A) (l : list A) : sorted l -&gt; {l' : list A // sorted l' /\\ x::l ~ l'}</code></p>",
        "id": 194565484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246840
    },
    {
        "content": "<p>where now the postcondition is relating the output to the input</p>",
        "id": 194565526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246858
    },
    {
        "content": "<p>i see. i assume that this separation would be easier to prove (via composition etc.)</p>",
        "id": 194565550,
        "sender_full_name": "Nam",
        "timestamp": 1587246910
    },
    {
        "content": "<p>and <em>hint hint</em> this kind of style can also be used for a direct induction proof</p>",
        "id": 194565551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587246911
    },
    {
        "content": "<p>yeah, so i was going to ask, what if i strengthen the postcondition of <code>ins_sort_insert</code>...</p>",
        "id": 194565597,
        "sender_full_name": "Nam",
        "timestamp": 1587246963
    },
    {
        "content": "<p>yes, there is a way to strengthen the postcondition such that you can prove the theorem. If you try proving the theorem as is you will eventually get stuck and the place where you get stuck will give you the hint for what to put in the postcondition</p>",
        "id": 194565628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587247033
    },
    {
        "content": "<p>sounds good! thank you, folks. this practice has yielded much more insights than i hoped for.</p>",
        "id": 194565717,
        "sender_full_name": "Nam",
        "timestamp": 1587247176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194551618\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194551618\">said</a>:</p>\n<blockquote>\n<p><code>category</code> is for computer scientists only</p>\n</blockquote>\n<p>I'd like to rename <code>category</code> to <code>control</code>, and <code>category_theory</code> to <code>category</code>. How would people feel about this? (Possibly some alternatives to <code>control</code>?) I could update the docs explaining the connection between the two.</p>",
        "id": 194568637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587251922
    },
    {
        "content": "<p>what is <code>control</code> about? Z-transform? you know, there's control theory too ;)</p>",
        "id": 194570031,
        "sender_full_name": "Nam",
        "timestamp": 1587254271
    },
    {
        "content": "<p>The root problem (so to speak) is that <code>functor</code> and all that stuff is not in any namespace.</p>",
        "id": 194570083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587254334
    },
    {
        "content": "<p>I was going to suggest moving it into <code>category</code> but we could also change the name.</p>",
        "id": 194570094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587254375
    },
    {
        "content": "<p>If we commit to a name, I could move <code>functor</code> and friends in core into that namespace, and then make the rename in mathlib once that lands. (I guess in 3.10 or beyond!)</p>",
        "id": 194570402,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587254796
    },
    {
        "content": "<p>I assume the name <code>control</code> comes from the <a href=\"https://hackage.haskell.org/package/base-4.12.0.0\" title=\"https://hackage.haskell.org/package/base-4.12.0.0\">Haskell library</a> though I don't know specifically how <em>that</em> name was chosen</p>",
        "id": 194570417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587254862
    },
    {
        "content": "<p>I just remember <code>control</code> being suggested as an alternative last time we talked about this.</p>",
        "id": 194570460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587254904
    },
    {
        "content": "<p>I do sort of like the Haskell connotation: \"you'll feel at home in this directory if you learnt category theory from Haskell\".</p>",
        "id": 194570469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587254937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> your <code>star</code> syntax is a bit off. Try <code>(hab : star r a b)</code> and similarly for <code>star r b c</code>. I don't know why Lean forces you to specify names here.</p>",
        "id": 194585258,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1587283553
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sorted_tail_of_sorted</span> <span class=\"o\">{</span><span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">HL</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">tl</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">HL</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">insertion_sort_core</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">hd</span> <span class=\"k\">then</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">insertion_sort_core</span> <span class=\"n\">x</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">insertion_sort_aux</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">HL</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">insertion_sort_core</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">insertion_sort_core</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">hx</span> <span class=\"n\">HL</span> <span class=\"o\">},</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">sorted_tail_of_sorted</span> <span class=\"n\">HL</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">tl</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">tl</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">insertion_sort_core</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"err\">⊢</span> <span class=\"k\">with</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">HL</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"err\">‹</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"err\">›</span> <span class=\"n\">ih</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">insertion_core</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HL</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">sorted</span> <span class=\"n\">L&#39;</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">insertion_sort_core</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">insertion_sort_aux</span> <span class=\"n\">HL</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 194586877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587286362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> separate definition from theorems</p>",
        "id": 194586883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587286378
    },
    {
        "content": "<p>Ok so it was ten lines not five</p>",
        "id": 194586939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587286454
    },
    {
        "content": "<p>maybe I should include more assertions</p>",
        "id": 194586945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587286486
    },
    {
        "content": "<p>I think you can skip <code>sorted_tail_of_sorted</code> if you <code>cases HL</code> instead of <code>cases tl</code> in <code>insertion_sort_aux</code></p>",
        "id": 194587268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587287006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">insertion_sort_core</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">hd</span> <span class=\"k\">then</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span> <span class=\"k\">else</span> <span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">insertion_sort_core</span> <span class=\"n\">x</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">insertion_sort_aux</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">HL</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">insertion_sort_core</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">insertion_sort_core</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">hx</span> <span class=\"n\">HL</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">HL</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">y</span> <span class=\"n\">tl</span> <span class=\"n\">hxy</span> <span class=\"n\">htl</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">},</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">insertion_sort_core</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"err\">⊢</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">ih</span> <span class=\"err\">⊢</span> <span class=\"k\">with</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">htl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">hxy</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">htl</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">insertion_core</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HL</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">sorted</span> <span class=\"n\">L&#39;</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">insertion_sort_core</span> <span class=\"n\">n</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">insertion_sort_aux</span> <span class=\"n\">HL</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 194587385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587287261
    },
    {
        "content": "<p>did you want to call the final function <code>insertion_sort</code> instead of <code>insertion_core</code>?</p>",
        "id": 194587602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587287624
    },
    {
        "content": "<p>also we would normally call the theorem <code>insertion_sort_core_sorted</code></p>",
        "id": 194587643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587287654
    },
    {
        "content": "<p>yeah I meant <code>insertion_sort</code></p>",
        "id": 194587731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587287819
    },
    {
        "content": "<p>how do i use a stronger induction principle that usual? so i want something like <br>\nproperty holds for 0 and 1, and if property holds for n and n+1, then property holds for n+2</p>",
        "id": 194588796,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587289491
    },
    {
        "content": "<p>Deleted</p>",
        "id": 194588819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289524
    },
    {
        "content": "<p>You can often get the equation compiler to prove these for you</p>",
        "id": 194588823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587289529
    },
    {
        "content": "<p>(typo fixed)</p>",
        "id": 194588833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289557
    },
    {
        "content": "<p>Luca I have a good exercise for you</p>",
        "id": 194588872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289567
    },
    {
        "content": "<p>Why not formalise the <em>statement</em> of the theorem you want?</p>",
        "id": 194588877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289588
    },
    {
        "content": "<p>consider the property \"n &lt;= 2\"</p>",
        "id": 194588882,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587289602
    },
    {
        "content": "<p>ok i'll try that</p>",
        "id": 194588897,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587289659
    },
    {
        "content": "<p>also whats an equation compiler, how do I use it</p>",
        "id": 194588901,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587289677
    },
    {
        "content": "<p>Ie theorem luca_induction which takes P: nat -&gt; Prop and the assumptions that P 0 and P 1 and the inductive hyp and the conclusion is for all n, P n</p>",
        "id": 194588943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289696
    },
    {
        "content": "<p>Forget about the equation compiler for now</p>",
        "id": 194588945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289704
    },
    {
        "content": "<p>That only works in toy examples</p>",
        "id": 194588949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289715
    },
    {
        "content": "<p>You can't do it in the middle of a tactic proof</p>",
        "id": 194588956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289725
    },
    {
        "content": "<p>That's the CS approach</p>",
        "id": 194588961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194588956\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194588956\">said</a>:</p>\n<blockquote>\n<p>You can't do it in the middle of a tactic proof</p>\n</blockquote>\n<p>factor it out</p>",
        "id": 194588963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587289739
    },
    {
        "content": "<p>you can use the equation compiler to prove luca_induction though</p>",
        "id": 194588970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587289744
    },
    {
        "content": "<p>Forget about the equation compiler</p>",
        "id": 194588976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289757
    },
    {
        "content": "<p>It's a great trick once you know what you're doing</p>",
        "id": 194588982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289774
    },
    {
        "content": "<p>Let's start by formalising the statement</p>",
        "id": 194588983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289783
    },
    {
        "content": "<p>what will you do in the middle of a tactic proof</p>",
        "id": 194588985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587289790
    },
    {
        "content": "<p>And then let's formalise the proof</p>",
        "id": 194588988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289793
    },
    {
        "content": "<p>And then let's use the equation compiler after</p>",
        "id": 194589028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289803
    },
    {
        "content": "<p>The equation compiler is term mode trickery. There is a more basic principle at stake here which can be entirely dealt with in tactic mode</p>",
        "id": 194589066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587289872
    },
    {
        "content": "<p>ok</p>\n<p><code>p</code> is our predicate on the naturals, and we're supposing that <code>p</code> holds for some <code>n₀</code> and <code>n₀+1</code>, and we're also supposing that if <code>p</code> holds for some <code>n</code> and <code>n+1</code> then it holds for <code>n+2</code>. From that we want to prove that <code>p</code> holds for any <code>n</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194589195,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290066
    },
    {
        "content": "<p>i'll have a stab at proving it now</p>",
        "id": 194589221,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290133
    },
    {
        "content": "<p>consider <code>p n = (n &lt;= 2)</code>, <code>n0 = 0</code>, <code>n = 37</code></p>",
        "id": 194589234,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290160
    },
    {
        "content": "<p>You have to get the statement right first</p>",
        "id": 194589275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290171
    },
    {
        "content": "<p>This is a really good exercise</p>",
        "id": 194589281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290178
    },
    {
        "content": "<p>It's all about getting the quantifiers in the right order</p>",
        "id": 194589290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290204
    },
    {
        "content": "<p>ah right yes</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194589312,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290272
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">bad_induction_1</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)),</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">37</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 194589369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290334
    },
    {
        "content": "<p>the new one doesn't even compile</p>",
        "id": 194589381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290357
    },
    {
        "content": "<p>oh gosh yes</p>",
        "id": 194589393,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290382
    },
    {
        "content": "<p>but still:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">bad_induction_2</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 194589396,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I discovered the golf by accident lol</p>",
        "id": 194589440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290408
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194589448,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290427
    },
    {
        "content": "<p>oh right</p>\n<p>hmmm</p>",
        "id": 194589450,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290433
    },
    {
        "content": "<p>ill have another little think</p>",
        "id": 194589453,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587290439
    },
    {
        "content": "<p>If you want a hint Luca you could try <code>#check nat.induction_on</code> or something, to see the statement of usual induction written as a function in Lean</p>",
        "id": 194589557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290602
    },
    {
        "content": "<p>I'm not sure what the actual term is called, I'm not at a computer right now</p>",
        "id": 194589565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290619
    },
    {
        "content": "<p><code>nat.rec_on</code></p>",
        "id": 194589630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290675
    },
    {
        "content": "<p>For every attempt of yours which compiles there's a little game which is to either formally prove it or formally disprove it</p>",
        "id": 194589633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290678
    },
    {
        "content": "<p>Kenny I don't want something which mentions Sort ideally</p>",
        "id": 194589639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290702
    },
    {
        "content": "<p>Luca is an UG mathematician like you</p>",
        "id": 194589646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290710
    },
    {
        "content": "<p>there's nothing that doesn't mention Sort</p>",
        "id": 194589666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587290752
    },
    {
        "content": "<p>Oh rotten luck</p>",
        "id": 194589684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290762
    },
    {
        "content": "<p>Well we'll just have to remember that Prop is Sort 0</p>",
        "id": 194589720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587290790
    },
    {
        "content": "<p>Ah, I see where my mistake is!</p>",
        "id": 194589923,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291120
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194589962,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291133
    },
    {
        "content": "<p>that should have fixed it</p>",
        "id": 194589967,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291150
    },
    {
        "content": "<p>except it doesn't compile again</p>",
        "id": 194589969,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587291158
    },
    {
        "content": "<p>you're right, i ignored the red squiggly line</p>",
        "id": 194589973,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291178
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n₀</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n₀</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">n₀</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>this one doesn't have any red squiggly lines, sorry about that</p>",
        "id": 194589985,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291228
    },
    {
        "content": "<p>that looks correct</p>",
        "id": 194590035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587291286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what's the next step</p>",
        "id": 194590045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587291337
    },
    {
        "content": "<p>i guess i'll start proving it, my first guess is to try</p>\n<p><code>cases classical.em (n = n₀ ∨ n = n₀+1),</code></p>",
        "id": 194590105,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291404
    },
    {
        "content": "<p>maybe Kevin will tell you to write down the proof in maths first</p>",
        "id": 194590172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587291589
    },
    {
        "content": "<p>good point</p>",
        "id": 194590248,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587291680
    },
    {
        "content": "<p>Sorry, was dealing with reality</p>",
        "id": 194590504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292185
    },
    {
        "content": "<p>Now let's prove it in tactic mode by induction!</p>",
        "id": 194590506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292199
    },
    {
        "content": "<p>The question now is precisely which statement we're going to prove by induction</p>",
        "id": 194590584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292275
    },
    {
        "content": "<p>We need some <em>other</em> statement Q(n) such that Q(n_0) is true, and Q(m)-&gt;Q(m+1), and Q(m)-&gt;P(m)</p>",
        "id": 194590633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292335
    },
    {
        "content": "<p>We're doing two things at once. Can we start with n_0=0?</p>",
        "id": 194590636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction_aux</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194590648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292386
    },
    {
        "content": "<p>I reckon that level is solvable</p>",
        "id": 194590651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292397
    },
    {
        "content": "<p>ok, i'll give it a go</p>",
        "id": 194590667,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587292434
    },
    {
        "content": "<p>but when Lean defines <code>nat</code> you get the two constructors <code>zero</code> and <code>succ</code>, and just the one eliminator, which is proof by normal induction</p>",
        "id": 194590706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292444
    },
    {
        "content": "<p>So you need to find Q which is provable by normal induction and which implies P</p>",
        "id": 194590712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292458
    },
    {
        "content": "<p>Q(m) = P(m-1) and P(m)</p>",
        "id": 194590724,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587292509
    },
    {
        "content": "<p>Subtraction is always bad</p>",
        "id": 194590728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292519
    },
    {
        "content": "<p>this is nat</p>",
        "id": 194590729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292523
    },
    {
        "content": "<p>You won't be able to prove m-1+1=m because it's not true</p>",
        "id": 194590731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292536
    },
    {
        "content": "<p>right ok I see</p>\n<p>i might have also got my Qs and Ps mixed up</p>",
        "id": 194590737,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587292559
    },
    {
        "content": "<p>yes ok i think i've got it</p>\n<p>Q(m) = P(m) and P(m+1)</p>",
        "id": 194590846,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587292715
    },
    {
        "content": "<p>Q(0) = P(0) and P(1) which are both true so Q(0) is true</p>\n<p>if Q(m) is true, then P(m) and P(m+1) are true, but then we also have that P(m+2) is true, so we have that Q(m+1) is true</p>",
        "id": 194590870,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587292789
    },
    {
        "content": "<p>Right</p>",
        "id": 194590913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292826
    },
    {
        "content": "<p>So the first line of your proof is <code>have Q : forall n, P n and P n+1,</code></p>",
        "id": 194590927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292872
    },
    {
        "content": "<p>And then <code>{  }</code> because we're starting a new goal</p>",
        "id": 194590947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292899
    },
    {
        "content": "<p>And in the bracket intro m, induction m with d hd</p>",
        "id": 194590980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292922
    },
    {
        "content": "<p>And we're on the way</p>",
        "id": 194590995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587292928
    },
    {
        "content": "<p>cool! thanks for this!</p>",
        "id": 194591005,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587292950
    },
    {
        "content": "<p>are there any style issues with this code?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span>  <span class=\"n\">H</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194591211,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293390
    },
    {
        "content": "<p>Do you need induction at the end?</p>",
        "id": 194591262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293471
    },
    {
        "content": "<p>I mean can't you just prove p n from q n?</p>",
        "id": 194591288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293501
    },
    {
        "content": "<p>no, youre right, i dont. I just need <code>exact (q n).left</code></p>",
        "id": 194591331,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293540
    },
    {
        "content": "<p>You committed a cardinal sin in your base case, you used a non terminal simp</p>",
        "id": 194591332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194591334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587293555
    },
    {
        "content": "<p>Kenny is sin free</p>",
        "id": 194591336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293568
    },
    {
        "content": "<p>He's also written the proof backwards</p>",
        "id": 194591345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293587
    },
    {
        "content": "<p>He deduced p from q first</p>",
        "id": 194591350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293599
    },
    {
        "content": "<p>yes, i don't need that simp either</p>\n<p>I just kind of assumed i needed to simp <code>0+1</code> to <code>1</code> or whatever</p>",
        "id": 194591352,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293610
    },
    {
        "content": "<p>You know 0+1=1 is true by definition?</p>",
        "id": 194591359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293639
    },
    {
        "content": "<p>Try removing the simp completely</p>",
        "id": 194591398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293653
    },
    {
        "content": "<p>what is a non terminal simp? I assume it's a simp that doesn't terminate, but how do you tell (without going into the halting problem) beforehand</p>",
        "id": 194591399,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293655
    },
    {
        "content": "<p>terminal = final = at the end</p>",
        "id": 194591406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587293669
    },
    {
        "content": "<p>if it didn't terminate your proof wouldn't have compiled</p>",
        "id": 194591409,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587293682
    },
    {
        "content": "<p>ohhh right</p>",
        "id": 194591412,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293687
    },
    {
        "content": "<p>You should never use simp to make a goal simpler</p>",
        "id": 194591416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293694
    },
    {
        "content": "<p>You should only use it to kill a goal completely</p>",
        "id": 194591427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293707
    },
    {
        "content": "<p>What happens if you remove the simp?</p>",
        "id": 194591432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293720
    },
    {
        "content": "<p>ah ok</p>\n<p>everything works without the simp</p>",
        "id": 194591437,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293730
    },
    {
        "content": "<p>at this point we're getting into:</p>\n<ol>\n<li>definitional equality</li>\n<li>mechanism of <code>simp</code></li>\n</ol>",
        "id": 194591464,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587293762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194591359\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194591359\">said</a>:</p>\n<blockquote>\n<p>You know 0+1=1 is true by definition?</p>\n</blockquote>\n<p>I see, so lean will just know because it'll unfold the definitions or something?</p>",
        "id": 194591487,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293771
    },
    {
        "content": "<p>I'm not sure if Luca is comfortable with discussing these two concepts</p>",
        "id": 194591492,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587293781
    },
    {
        "content": "<p>haha probably not</p>",
        "id": 194591517,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293824
    },
    {
        "content": "<p>In the natural number game there is zero_add and add_zero</p>",
        "id": 194591523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293844
    },
    {
        "content": "<p>\"equality is just equality, right?\"</p>",
        "id": 194591524,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293844
    },
    {
        "content": "<p>And one of them is true by definition</p>",
        "id": 194591529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293852
    },
    {
        "content": "<p>Because x+0 is defined to be x</p>",
        "id": 194591531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293859
    },
    {
        "content": "<p>But the other one is true because of a theorem</p>",
        "id": 194591536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293874
    },
    {
        "content": "<p>ah yes i remember this now</p>",
        "id": 194591573,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293883
    },
    {
        "content": "<p>Which is proved by induction on x</p>",
        "id": 194591579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293889
    },
    {
        "content": "<p>but once you've proved the theorem, surely it doesn't matter whether its true by definition or by theorem, it's just true?</p>",
        "id": 194591588,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587293915
    },
    {
        "content": "<p>So 0+1 is by definition 0+succ(0)</p>",
        "id": 194591589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293917
    },
    {
        "content": "<p>Which is by definition succ(0+0)</p>",
        "id": 194591594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293938
    },
    {
        "content": "<p>Which is by definition succ (0)</p>",
        "id": 194591603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293951
    },
    {
        "content": "<p>Which is by definition 1</p>",
        "id": 194591605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587293956
    },
    {
        "content": "<p><code>0+1 → nat.add 0 1 → nat.add 0 (nat.succ 0) → nat.succ (nat.add 0 0) → nat.succ 0</code><br>\n<code>1 → nat.succ 0</code></p>",
        "id": 194591608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587293963
    },
    {
        "content": "<p>The <code>rw</code> tactic really needs to see things being exactly equal, the same buttons on your keyboard equal, before it will work</p>",
        "id": 194591666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294004
    },
    {
        "content": "<p>But the exact tactic will work up to definitional equality</p>",
        "id": 194591674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294014
    },
    {
        "content": "<p>I can't get Lean to show me this (using <code>set_option trace.type_context.is_def_eq_detail true</code>) only tells me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">process_assignment</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">[</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">assign</span><span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 194591677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294022
    },
    {
        "content": "<p>Ok lemme get to a computer</p>",
        "id": 194591684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194591666\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194591666\">said</a>:</p>\n<blockquote>\n<p>The <code>rw</code> tactic really needs to see things being exactly equal, the same buttons on your keyboard equal, before it will work</p>\n</blockquote>\n<p>this is a rule with 37 exceptions</p>",
        "id": 194591704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294078
    },
    {
        "content": "<p>Ok so now let's use <code>luca_induction_aux</code></p>",
        "id": 194591774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> anyway this is how <code>simp</code> works: we have a database of \"<code>simp</code> lemmas\" (i.e. theorems we have tagged with <code>@[simp]</code>), and then <code>simp</code> tries to simplify the goal using each of them, until it reaches <code>true</code></p>",
        "id": 194591777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294155
    },
    {
        "content": "<p>ah I see</p>",
        "id": 194591781,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294173
    },
    {
        "content": "<p>so the reason you shouldn't use non-terminal simp is because you can't predict the outcome of <code>simp</code></p>",
        "id": 194591783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294176
    },
    {
        "content": "<p>because anyone can add <code>simp</code> lemmas</p>",
        "id": 194591790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294182
    },
    {
        "content": "<p>then your proof might not compile, because the rest of the proof after <code>simp</code> relied on the exact form of the goal after using <code>simp</code></p>",
        "id": 194591805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_zero</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_one</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 194591852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294253
    },
    {
        "content": "<p>but I've always been advocating not to use <code>simp</code> at <em>all</em>, because it's an expensive tactic</p>",
        "id": 194591857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294272
    },
    {
        "content": "<p>i.e. it's slow</p>",
        "id": 194591858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194591862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294289
    },
    {
        "content": "<p>There's a theorem which you can't prove by usual induction.</p>",
        "id": 194591866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294302
    },
    {
        "content": "<p>If you try proving it by induction, then the inductive case is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>≥</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">F_n\\geq0\\implies F_{n+1}\\geq0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>",
        "id": 194591878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294322
    },
    {
        "content": "<p>and you can't prove it because maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">F_{n-1}&lt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. You know in your heart that this is not going to be the case in practice, but induction is brutal and won't let you cheat like that</p>",
        "id": 194591885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294351
    },
    {
        "content": "<p>But we can prove it with <code>luca_induction</code></p>",
        "id": 194591946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294442
    },
    {
        "content": "<p>right yes, I see. The fibonacci numbers was something I had in mind when doing this double induction thing</p>",
        "id": 194591953,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294459
    },
    {
        "content": "<p>So we start the proof of <code>fib_nonneg</code> with <code>intro n</code></p>",
        "id": 194591996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294495
    },
    {
        "content": "<p>and then we want to <code>apply luca_induction</code> somehow, but we need to give it some inputs</p>",
        "id": 194592004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294529
    },
    {
        "content": "<p>Well, we could give it <code>p</code>, but given that we know that <code>p n</code> is supposed to be <code>0 &lt;= fib(n)</code> Lean will be able to work out <code>p</code></p>",
        "id": 194592015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294557
    },
    {
        "content": "<p>ah thats quite cool</p>",
        "id": 194592019,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294569
    },
    {
        "content": "<p>but we will have to tell it that we're doing induction on n rather than some other random integer variable like n^2</p>",
        "id": 194592023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294581
    },
    {
        "content": "<p>so I'm hoping <code>apply luca_induction _ n</code> will work for the next line</p>",
        "id": 194592027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294596
    },
    {
        "content": "<p>and it does :-)</p>",
        "id": 194592068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294612
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- always handy</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span>  <span class=\"n\">H</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n            <span class=\"n\">exact</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_zero</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_one</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">luca_induction</span> <span class=\"bp\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194592081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294651
    },
    {
        "content": "<p>don't you have to tell lean about <code>fib_zero</code> and <code>fib_one</code>?</p>",
        "id": 194592082,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294654
    },
    {
        "content": "<p>Note new line 1</p>",
        "id": 194592083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294657
    },
    {
        "content": "<p>obviously you don't i guess it figures it out</p>",
        "id": 194592093,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294666
    },
    {
        "content": "<p>yeah ok I see</p>",
        "id": 194592098,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294688
    },
    {
        "content": "<p>When we apply your induction theorem, a bunch of new goals appear!</p>",
        "id": 194592099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294692
    },
    {
        "content": "<p>the correct tactic is <code>induction n using luca_induction,</code></p>",
        "id": 194592100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294697
    },
    {
        "content": "<p>Your way might be the \"correct\" way but look at the mess it causes</p>",
        "id": 194592172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294747
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">h</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">case</span> <span class=\"n\">H</span>\n<span class=\"n\">n_n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">n_a</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"n\">n_n</span><span class=\"o\">,</span>\n<span class=\"n\">n_a_1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n_n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194592176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294756
    },
    {
        "content": "<p>do I always have to put the underscore before any variable that I specify myself?</p>",
        "id": 194592178,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294767
    },
    {
        "content": "<p>what's the rules regarding these underscores?</p>",
        "id": 194592182,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294778
    },
    {
        "content": "<p>My way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194592184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294779
    },
    {
        "content": "<p>underscore just means \"I don't want to tell you this right now\"</p>",
        "id": 194592194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294795
    },
    {
        "content": "<p>\"either work it out for yourself or leave it to me as a new goal\"</p>",
        "id": 194592197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294806
    },
    {
        "content": "<p>ah ok</p>",
        "id": 194592199,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587294812
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">luca_induction</span> <span class=\"bp\">_</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194592202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why does <code>induction _ using _</code> create un-beta-reduced goals?</p>",
        "id": 194592206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294825
    },
    {
        "content": "<p>\"I don't want to tell you p, and I don't want to tell you the proof of p0 and p1, and I don't want to tell you the proof of the inductive step\"</p>",
        "id": 194592251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294846
    },
    {
        "content": "<p><code>refine</code> is better than <code>apply</code> if you want to specify all the underscores anyway</p>",
        "id": 194592256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294872
    },
    {
        "content": "<p>This is a secret code. <code>induction ... using ...</code> is a coded way to tell Lean you want to suffer.</p>",
        "id": 194592260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587294880
    },
    {
        "content": "<p>and Lean replies \"well, for this apply tactic to work at all, I'd better make sure that p n equals 0 &lt;= fib(n), so I can figure out that p must be \"forall n, 0 &lt;= fib(n)\", but I can't figure out the proofs of the base case and the inductive step so I'll just leave them to you as new goals\"</p>",
        "id": 194592269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587294905
    },
    {
        "content": "<p>p is \"fun n, 0 &lt; fib n\"</p>",
        "id": 194592277,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587294931
    },
    {
        "content": "<p><code>apply</code> is a clever tactic, when we <code>apply luca_induction _ n</code> it says \"hey wait a minute, <code>luca_induction</code> is a function with four inputs, I'll just add in two underscores\"</p>",
        "id": 194592344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295007
    },
    {
        "content": "<p><code>refine luca_induction _ n _ _</code> also works, but <code>refine luca_induction _ n</code> doesn't, because <code>refine</code> is more fussy, it wants the exact number of holes</p>",
        "id": 194592360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295036
    },
    {
        "content": "<p>i see</p>",
        "id": 194592431,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587295109
    },
    {
        "content": "<p>So now can you finish the proof?</p>",
        "id": 194592436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295119
    },
    {
        "content": "<p>so when would one use <code>refine</code> instead of <code>apply</code></p>",
        "id": 194592437,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587295121
    },
    {
        "content": "<p>when you run into the <code>apply</code> bug :-)</p>",
        "id": 194592445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295132
    },
    {
        "content": "<p>when you're me</p>",
        "id": 194592447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295136
    },
    {
        "content": "<p>yes I can</p>",
        "id": 194592450,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587295139
    },
    {
        "content": "<p>cheers!!</p>",
        "id": 194592461,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587295147
    },
    {
        "content": "<p>hahahaah, I'll keep an eye out</p>",
        "id": 194592469,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587295157
    },
    {
        "content": "<p>So this is a general principle. If you want a fancier induction, you can typically make it yourself.</p>",
        "id": 194592477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295168
    },
    {
        "content": "<p>Shing and I made a new induction principle for multivariable polynomials just a couple of weeks ago</p>",
        "id": 194592496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295193
    },
    {
        "content": "<p>we wanted to prove something about partial differentiation on multivariable polynomials and we couldn't find the principle we wanted so we just proved a new one like this</p>",
        "id": 194592553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295224
    },
    {
        "content": "<p>I never use <code>induction using</code></p>",
        "id": 194592556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587295231
    },
    {
        "content": "<p><code>refine</code> does more or less the same thing</p>",
        "id": 194592564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587295248
    },
    {
        "content": "<p>then what's the point of <code>induction using</code></p>",
        "id": 194592578,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295272
    },
    {
        "content": "<p>I mean, <code>induction</code> doesn't give you un-beta-reduced goals</p>",
        "id": 194592587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295283
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 194592590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587295286
    },
    {
        "content": "<p>It's meant to try harder to elaborate</p>",
        "id": 194592591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587295287
    },
    {
        "content": "<p>Note that you have to mark your custom induction principle with <code>@[elab_as_eliminator]</code> for unification to work properly</p>",
        "id": 194592691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587295358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> for homework you can try and figure out how to start at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> :-)</p>",
        "id": 194592696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295374
    },
    {
        "content": "<p>I tried that, it still don't beta reduce</p>",
        "id": 194592698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295378
    },
    {
        "content": "<p>also it worked without that</p>",
        "id": 194592706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295389
    },
    {
        "content": "<p>You might have to get your hands dirty with natural number subtraction though :-(</p>",
        "id": 194592708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295390
    },
    {
        "content": "<p>breaking news: Mario doesn't understand Lean :P</p>",
        "id": 194592710,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295408
    },
    {
        "content": "<p>What did you try it on?</p>",
        "id": 194592711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587295419
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">luca_induction</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_zero</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_one</span> <span class=\"o\">:</span> <span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fib_ss</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">luca_induction</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 194592751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295453
    },
    {
        "content": "<p>works perfectly</p>",
        "id": 194592754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295457
    },
    {
        "content": "<p>PS <span class=\"user-mention\" data-user-id=\"221895\">@Luca Seemungal</span> I defined Fibonacci numbers using the equation compiler. As you can see, to prove that this even is a valid definition there must be somewhere some form of your induction principle going on in the background.</p>",
        "id": 194592757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194592708\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194592708\">said</a>:</p>\n<blockquote>\n<p>You might have to get your hands dirty with natural number subtraction though :-(</p>\n</blockquote>\n<p>no you don't</p>",
        "id": 194592758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295470
    },
    {
        "content": "<p>The equation compiler is those funny <code>|</code>s in definitions. It's a very cool little tool for playing around with basic stuff like this and the CS people are sometimes super-excited about how clever it can be, but because you can only use it in a definition rather than in the middle of things it's often a bit limited in mathematics.</p>",
        "id": 194592784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295554
    },
    {
        "content": "<p>is this an \"inductive type\" that I've seen in TPIL</p>",
        "id": 194592843,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587295665
    },
    {
        "content": "<p>an inductive type is what allows you to use the equation compiler</p>",
        "id": 194592883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295698
    },
    {
        "content": "<p>Here's a proof of <code>fib_nonneg</code> which uses the equation compiler:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">fib_zero</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">fib_one</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">fib_ss</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">fib_nonneg</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hn2</span> <span class=\"o\">:=</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p><del>Yes, <code>fib</code> is an inductive type.</del></p>",
        "id": 194592885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295707
    },
    {
        "content": "<p>Note that we do not need your inductive principle at all. It's somehow inbuilt into the equation compiler. As I say, it's cool but limited.</p>",
        "id": 194592903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295746
    },
    {
        "content": "<p><code>fib</code> is not an inductive type</p>",
        "id": 194592956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587295820
    },
    {
        "content": "<p>rotten luck</p>",
        "id": 194592961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295831
    },
    {
        "content": "<p>I still don't understand the basics</p>",
        "id": 194592970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295861
    },
    {
        "content": "<p>What I know is that you don't need to :-)</p>",
        "id": 194592976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295869
    },
    {
        "content": "<p>It's a function so it's a pi type I guess</p>",
        "id": 194592978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295876
    },
    {
        "content": "<p><code>nat</code> is the inductive type</p>",
        "id": 194592984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295891
    },
    {
        "content": "<p>so that's why I can use the equation compiler</p>",
        "id": 194592986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295900
    },
    {
        "content": "<p>You can't prove that partial differentation is additive using the equation compiler because polynomials are not an inductive type. You have to make your own induction principles for them.</p>",
        "id": 194593055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587295973
    },
    {
        "content": "<p>I tried to make polynomials an inductive type very early on in my Lean experience</p>",
        "id": 194593073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587296025
    },
    {
        "content": "<p>it failed miserably</p>",
        "id": 194593075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587296035
    },
    {
        "content": "<p>You will have problems with uniqueness</p>",
        "id": 194593080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587296039
    },
    {
        "content": "<p>well you can require the first coefficient to not be zero</p>",
        "id": 194593146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587296062
    },
    {
        "content": "<p>Although you can make them a quotient of an inductive type and then use quotient.induction but then you can't use the equation compiler because you're in the middle of something.</p>",
        "id": 194593149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587296070
    },
    {
        "content": "<p>I see, you can define a polynomial to be either 0 or c*X^n+a polynomial with c non-zero</p>",
        "id": 194593163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587296114
    },
    {
        "content": "<p>It would be hell to work with though, making the basic interface would be a real pain</p>",
        "id": 194593168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587296129
    },
    {
        "content": "<p>exactly</p>",
        "id": 194593171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587296135
    },
    {
        "content": "<p>In HoTT you would be able to use the equation compiler for a quotient.</p>",
        "id": 194593172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587296136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194592754\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194592754\">said</a>:</p>\n<blockquote>\n<p>works perfectly</p>\n</blockquote>\n<p>Or does it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">fib_nonneg</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">fib</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">luca_induction</span> <span class=\"n\">n</span> <span class=\"n\">h1</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 194593173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587296137
    },
    {
        "content": "<blockquote>\n<p>maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</p>\n</blockquote>",
        "id": 194593223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587296166
    },
    {
        "content": "<p>If I try</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prime_ideal</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">prime_ideal</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_ring</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">prime_ideal</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prime_ideal_is_maximal</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_ring</span>\n</pre></div>\n\n\n<p>then I get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</pre></div>\n\n\n<p>I'm sure I'm misunderstanding something basic here. How can I write down the proposition which just states that in <code>discrete_valuation_ring</code> the ideal <code>prime_ideal</code> is maximal?</p>",
        "id": 194603694,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587311006
    },
    {
        "content": "<p>alpha cannot be inferred</p>",
        "id": 194603850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587311201
    },
    {
        "content": "<p>how about (prime_ideal \\a).is_maximal</p>",
        "id": 194603857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587311218
    },
    {
        "content": "<p>then I get </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">prime_ideal</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">submodule</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"err\">⁇</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>",
        "id": 194603928,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587311303
    },
    {
        "content": "<p>the <code>#check</code> part actually works, it's the lemma where it fails</p>",
        "id": 194603942,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587311332
    },
    {
        "content": "<p>then <code>(@prime_ideal \\a).is_maximal</code></p>",
        "id": 194604281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587311754
    },
    {
        "content": "<p>hmm then i get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kn\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kn\">constant</span>\n  <span class=\"n\">prime_ideal</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 194604435,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587311890
    },
    {
        "content": "<p><code>(prime_ideal : ideal \\a).is_maximal</code>?</p>",
        "id": 194604483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587311991
    },
    {
        "content": "<p>oh that works! do you know why? naively i would think that it shouldn't be necessary to specify that prime_ideal is an ideal in <code>\\alpha</code>, but i must be misunderstanding something</p>",
        "id": 194604650,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587312155
    },
    {
        "content": "<p>Well, it could be, like, <code>\\beta</code> instead. Why not?</p>",
        "id": 194605068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587312623
    },
    {
        "content": "<p>I don't really know how to explain this.</p>",
        "id": 194605075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587312631
    },
    {
        "content": "<p>There's no reason for it to know you mean <code>\\alpha</code>, so it doesn't know.</p>",
        "id": 194605222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587312785
    },
    {
        "content": "<p>I guess my confusion is that writing <code>variable [discrete_valuation_ring \\alpha]</code> doesn't make lean automatically guess that prime_ideal should be an ideal in <code>\\alpha</code>?</p>",
        "id": 194606512,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587314173
    },
    {
        "content": "<p>No, instances don't work that way (this is a common confusion). It just means that Lean can use the fact that <code>\\alpha</code> is a DVR if it needs it.<br>\nImagine you had a second</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">beta</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">beta</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>and this should probably be clearer.</p>",
        "id": 194606970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587314650
    },
    {
        "content": "<p>ohh ok that makes more sense. thanks</p>",
        "id": 194607391,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587315185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121058\">Jasmin Blanchette</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194585258\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194585258\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> your <code>star</code> syntax is a bit off. Try <code>(hab : star r a b)</code> and similarly for <code>star r b c</code>. I don't know why Lean forces you to specify names here.</p>\n</blockquote>\n<p>Yes. I tried to formulate it again after reading your doc. I think I have a shorter and more syntactically consistent. I was going to send your a PR then I found out that you have not published the text yet (only PDF is availabe).</p>",
        "id": 194608127,
        "sender_full_name": "Nam",
        "timestamp": 1587316050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194586883\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194586883\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> separate definition from theorems</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 194608211,
        "sender_full_name": "Nam",
        "timestamp": 1587316163
    },
    {
        "content": "<p>I'm trying to use the <code>use</code> tactic from the \"natural numbers game\", but it appears this tactic is not available in lean by default. What do I need to import to make it available?</p>",
        "id": 194608692,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587316838
    },
    {
        "content": "<p><code>import tactic</code> should do it</p>",
        "id": 194609083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587317492
    },
    {
        "content": "<p>It's part of mathlib</p>",
        "id": 194609085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587317500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span> To see all the mathlib tactics and which <code>import</code> incantation you need, check <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">the index</a>.</p>",
        "id": 194610019,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1587318867
    },
    {
        "content": "<p>This really is a noob question, but how do I close a proof if my goal is \"true\"?</p>",
        "id": 194619486,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587332787
    },
    {
        "content": "<p><code>trivial</code></p>",
        "id": 194619507,
        "sender_full_name": "Jason KY.",
        "timestamp": 1587332843
    },
    {
        "content": "<p><code>example : true := trivial</code></p>",
        "id": 194619509,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587332846
    },
    {
        "content": "<p>Is it possible to just use these tactics to close <code>true</code>:</p>\n<p>intro<br>\napply (or, better, refine)<br>\nleft, right, cases, split<br>\nassumption (or, better, exact)<br>\nhave,<br>\nsimp<br>\ncontradiction (or, better, false.elim)</p>",
        "id": 194619560,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587332900
    },
    {
        "content": "<p>You can use <code>exact trivial</code> then.</p>",
        "id": 194619565,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587332916
    },
    {
        "content": "<p>Ah, is <code>trivial</code> both a tactic and a \"term\"?</p>",
        "id": 194619588,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587332966
    },
    {
        "content": "<p>Does <code>simp</code> not do it??</p>",
        "id": 194619638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333016
    },
    {
        "content": "<p>That looks like a fine list of tactics, by the way.</p>",
        "id": 194619640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333028
    },
    {
        "content": "<p>Nope, <code>simp</code> doesn't do it unfortunately</p>",
        "id": 194619646,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587333050
    },
    {
        "content": "<p>rofl</p>",
        "id": 194619979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333604
    },
    {
        "content": "<p><code>tauto!</code> will presumably do it</p>",
        "id": 194619982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333617
    },
    {
        "content": "<p>It does all logic proofs</p>",
        "id": 194619984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333621
    },
    {
        "content": "<p>and <code>finish</code> will presumably do it too</p>",
        "id": 194619990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333640
    },
    {
        "content": "<p>and maybe <code>cc</code></p>",
        "id": 194619991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333643
    },
    {
        "content": "<p>and it's always worth trying <code>norm_num</code> even though it wasn't designed to do it</p>",
        "id": 194620013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333670
    },
    {
        "content": "<p>because it does random things it wasn't designed to do</p>",
        "id": 194620022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587333680
    },
    {
        "content": "<p>I've had <code>simp</code> reduce my goal to <code>true</code> before, it's a bit puzzling that it can't finish the job from there</p>",
        "id": 194620073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587333753
    },
    {
        "content": "<p>Maybe we should add <code>true \\iff (true \\iff true)</code> as a simp lemma :-)</p>",
        "id": 194620387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587334418
    },
    {
        "content": "<p>I don't understand this example in TPIL</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">1</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>It's as if the proposition <code>1 &gt; 0</code> is being applied to the argument <code>1</code> but this proposition doesn't have any variables</p>",
        "id": 194640369,
        "sender_full_name": "Brandon B",
        "timestamp": 1587367552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon B</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194640369\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194640369\">said</a>:</p>\n<blockquote>\n<p>I don't understand this example in TPIL</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">1</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>It's as if the proposition <code>1 &gt; 0</code> is being applied to the argument <code>1</code> but this proposition doesn't have any variables</p>\n</blockquote>\n<p>Which part has you applying <code>1 &gt; 0</code> to the argument <code>1</code>? Line 1 is a type signature of the example; line 2 is the manifestation of a term of type <code>1 &gt; 0</code>; line 3 is the construction of an object of type <code>∃ x : ℕ, x &gt; 0</code> from the two pieces of data <code>1</code> and <code>h</code> that comprise an existential statement.</p>",
        "id": 194640877,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1587367928
    },
    {
        "content": "<p>I guess i dont understand line 3. Why would it need both <code>1</code> and <code>1 &gt; 0</code>. Shouldn't <code>1 &gt; 0</code> suffice?</p>",
        "id": 194640948,
        "sender_full_name": "Brandon B",
        "timestamp": 1587368003
    },
    {
        "content": "<p>Nevermind - reading on I think I get it now</p>",
        "id": 194641207,
        "sender_full_name": "Brandon B",
        "timestamp": 1587368176
    },
    {
        "content": "<p>what tactic do I use to solve the following example? <code>norm_num</code> doesn't do it, and i've no idea what else to use and I don't feel like expanding the brackets etc. Do I have to expand the brackets etc?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- norm_num failed to simplify</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194646936,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587372059
    },
    {
        "content": "<p>try <code>ring</code>? Then <code>norm_num</code>?</p>",
        "id": 194647051,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587372123
    },
    {
        "content": "<p>hmmm<br>\nlean is taking a long time to check that; it hasn't finished after half a minute</p>",
        "id": 194647290,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587372291
    },
    {
        "content": "<p>Yeah, that doesn't seem to work. <code>ring</code> did expand the brackets though.</p>",
        "id": 194647342,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587372324
    },
    {
        "content": "<p>yes it did</p>",
        "id": 194647359,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587372333
    },
    {
        "content": "<p><code>norm_num</code> doesn't know about <code>real.sqrt</code>. If you view it as an atom <code>x</code>, then you will have to give it a hint that <code>x^2 = 2</code> (as well as the hint of how to use that to finish the proof)</p>",
        "id": 194647810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587372637
    },
    {
        "content": "<p>But <code>simp</code> does know about <code>real.sqrt</code>. Does that help?</p>",
        "id": 194647969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587372748
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqr_sqrt</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 194648418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ (1 / 3 * real.sqrt 2 + 2 / 3) * real.sqrt 2 + 1 / 3 = 2 / 3 * real.sqrt 2 + 1</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ (3⁻¹ * real.sqrt 2 + 2 / 3) * real.sqrt 2 + 3⁻¹ = 2 / 3 * real.sqrt 2 + 1</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194648431,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587373079
    },
    {
        "content": "<p><code>simp</code> doesn't solve the goal, and I've been told not to use a non terminal simp</p>",
        "id": 194648495,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587373102
    },
    {
        "content": "<p>actually <code>simp</code> doesn't really do much of anything on that goal</p>",
        "id": 194648521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373125
    },
    {
        "content": "<p>oh, cool</p>\n<p>cheers!</p>",
        "id": 194648524,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587373127
    },
    {
        "content": "<p>the antidote to non-terminal simp is saying what you want your intermediate goal to look like</p>",
        "id": 194648567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194647969\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194647969\">said</a>:</p>\n<blockquote>\n<p>But <code>simp</code> does know about <code>real.sqrt</code>. Does that help?</p>\n</blockquote>\n<p>There are a few simp lemmas, but this doesn't work...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194648691,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587373212
    },
    {
        "content": "<p>you can also use <code>simp only</code>, but i think stating the intermediate goal is much nicer</p>",
        "id": 194648757,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587373240
    },
    {
        "content": "<p>there is a side condition, isn't there? There was in the theorem I used</p>",
        "id": 194648785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 194648880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373319
    },
    {
        "content": "<p>Ah. So that's how you provide that condition.</p>",
        "id": 194648950,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587373350
    },
    {
        "content": "<p>you could also have it as a hypothesis</p>",
        "id": 194648971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373366
    },
    {
        "content": "<p>i managed to solve it this way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul&#39;</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_mul_self</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but presumably Mario's way is better</p>",
        "id": 194649008,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1587373398
    },
    {
        "content": "<p>It's hard to say which approach I would use when golfing. Writing the type is often more verbose than tactic based proofs</p>",
        "id": 194649109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373454
    },
    {
        "content": "<p>I don't usually use non-terminal <code>ring</code> either, although it does leave the goal in a fairly clean state</p>",
        "id": 194649175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373515
    },
    {
        "content": "<p>In this case <code>ring SOP</code> puts you in a much better state</p>",
        "id": 194649216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"n\">SOP</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqr_sqrt</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 194649290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587373591
    },
    {
        "content": "<p>Hmmm... I think there is room for a little hammer here</p>",
        "id": 194649895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587373992
    },
    {
        "content": "<p><code>ring_with_sqrt</code>?</p>",
        "id": 194649916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587374009
    },
    {
        "content": "<p>I mean it all fits into the Grobner basis tactic of the future, but I'm in no hurry to write it</p>",
        "id": 194649958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587374042
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Uchide_no_kozuchi\" title=\"https://en.wikipedia.org/wiki/Uchide_no_kozuchi\">https://en.wikipedia.org/wiki/Uchide_no_kozuchi</a></p>",
        "id": 194650046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587374079
    },
    {
        "content": "<p>Notice that this is a proof in rings modulo equalities, that is, <code>x^2 = 2 -&gt; (1 + x) ^ 2 / 3 = (2*x) / 3 + 1</code></p>",
        "id": 194650191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587374162
    },
    {
        "content": "<p>This is really embarrassing but how do I prove some even number is even?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 194662515,
        "sender_full_name": "Brandon B",
        "timestamp": 1587382496
    },
    {
        "content": "<p><code>\\&lt;3, rfl\\&gt;</code> should work</p>",
        "id": 194662540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587382516
    },
    {
        "content": "<p>Indeed it does., thanks!</p>",
        "id": 194662570,
        "sender_full_name": "Brandon B",
        "timestamp": 1587382552
    },
    {
        "content": "<p>Hey! sorry, I was just trying what I thought was going to be a trivial example and I can't seem to make lean like my answer:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic State</span>\n<span class=\"cm\">1 goal</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">B C : α → Prop,</span>\n<span class=\"cm\">y : α,</span>\n<span class=\"cm\">h1 : ∀ (x : α), B x → C x,</span>\n<span class=\"cm\">h2 : B y,</span>\n<span class=\"cm\">y : α</span>\n<span class=\"cm\">⊢ B y-/</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"> getting error:</span>\n<span class=\"cm\">assumption tactic failed</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">B C : α → Prop,</span>\n<span class=\"cm\">y : α,</span>\n<span class=\"cm\">h1 : ∀ (x : α), B x → C x,</span>\n<span class=\"cm\">h2 : B y,</span>\n<span class=\"cm\">y : α</span>\n<span class=\"cm\">⊢ B y</span>\n\n<span class=\"cm\">If I do &#39;exact h2&#39; I get:</span>\n<span class=\"cm\">invalid type ascription, term has type</span>\n<span class=\"cm\">  B y</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  B y</span>\n<span class=\"cm\">types contain aliased name(s): y</span>\n<span class=\"cm\">remark: the tactic `dedup` can be used to rename aliases</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type,</span>\n<span class=\"cm\">B C : α → Prop,</span>\n<span class=\"cm\">y : α,</span>\n<span class=\"cm\">h1 : ∀ (x : α), B x → C x,</span>\n<span class=\"cm\">h2 : B y,</span>\n<span class=\"cm\">y : α</span>\n<span class=\"cm\">⊢ B y</span>\n<span class=\"cm\">but then dedup doesn&#39;t seem to help progressing the proof very much</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194669985,
        "sender_full_name": "AMM",
        "timestamp": 1587387137
    },
    {
        "content": "<p>the theorem is false</p>",
        "id": 194670153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387231
    },
    {
        "content": "<p>you have two variables named <code>y</code> (you can see them in your context) and this is getting you confused</p>",
        "id": 194670220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387258
    },
    {
        "content": "<p>To make it clearer, your theorem is the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>which should be more obviously false</p>",
        "id": 194670306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387310
    },
    {
        "content": "<p>I see my bad, that makes sense actually, I need B to not have free occurrences  of the variable</p>",
        "id": 194670388,
        "sender_full_name": "AMM",
        "timestamp": 1587387362
    },
    {
        "content": "<p>In which case you can write <code>B</code> instead of <code>B y</code></p>",
        "id": 194670449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387377
    },
    {
        "content": "<p>right, but then \" type expected at<br>\n  B<br>\nterm has type<br>\n  α → Prop\"<br>\n and it's used with B x before</p>",
        "id": 194670621,
        "sender_full_name": "AMM",
        "timestamp": 1587387477
    },
    {
        "content": "<p>make it <code>B</code> there too and change the type of B to Prop</p>",
        "id": 194670778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387545
    },
    {
        "content": "<p>I think actually what I want is  $(∀ x_i)(B → C) → (B → (∀ x_i)C)$ if $B$ has no free occurrences of $x_i$, so not what I wrote probably</p>",
        "id": 194670783,
        "sender_full_name": "AMM",
        "timestamp": 1587387548
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 194670800,
        "sender_full_name": "AMM",
        "timestamp": 1587387559
    },
    {
        "content": "<p>this amounts to exactly your not free condition since you can substitute any expression for <code>B</code> but it can't mention <code>x</code> because it is out of scope</p>",
        "id": 194671013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387659
    },
    {
        "content": "<p>I'd just used (∀ x_i)B(x_i) so forgot to get rid of variables and make a new section for this one</p>",
        "id": 194671024,
        "sender_full_name": "AMM",
        "timestamp": 1587387663
    },
    {
        "content": "<p>you could also use a different letter if you don't want to change your variables</p>",
        "id": 194671088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587387687
    },
    {
        "content": "<p>ofc, that would be good too<br>\nall good with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 194671309,
        "sender_full_name": "AMM",
        "timestamp": 1587387802
    },
    {
        "content": "<p>stuff works as expected, thank you mario</p>",
        "id": 194671331,
        "sender_full_name": "AMM",
        "timestamp": 1587387814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"285266\">@AMM</span> Actually, that's gone too far the other way, now. Because <code>C</code> doesn't depend on <code>x</code>, the binder over <code>x</code> is vacuous; that is, <code>C</code> is also being constrained to not mention <code>x</code> just as <code>B</code> is. As a result, this theorem is true but less applicable than it should be. You want <code>(∀ x : α , B → C x) → (B → (∀ x : α , C x))</code> here</p>",
        "id": 194677466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587390722
    },
    {
        "content": "<p>right ofc, i have fixed that now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194678290,
        "sender_full_name": "AMM",
        "timestamp": 1587391098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194691285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587396460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon B</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_even</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ∃ (b : ℕ), 6 = 2 * b</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 6 = 2 * 3</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194691480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587396537
    },
    {
        "content": "<p>Hi, can someone please let me know what I'm doing wrong here? I just want to say that an element of a ring is contained in the ideal generated by it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"o\">{</span><span class=\"n\">π</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194694412,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587397693
    },
    {
        "content": "<p><code>have h : \\pi \\in ideal.span {\\pi},</code> should also work...</p>",
        "id": 194695010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587397938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> could you be more explicit about what you want to see? Do you not like the statement, or is there something else?</p>",
        "id": 194695076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587397975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">π</span><span class=\"o\">})</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<ol>\n<li>the argument to <code>ideal.subset_span</code> is implicit, so it should not be supplied</li>\n<li>always specify that <code>{π}</code> is a set</li>\n<li><code>ideal.span {π}</code> is an ideal, so you need to coerce it to a set</li>\n</ol>",
        "id": 194695369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587398107
    },
    {
        "content": "<p>ahh ok great thanks.</p>",
        "id": 194696421,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587398499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  shorter : <br>\n<code> def axiom_5: (∀ x : α , B → C x) → (B → (∀ x : α , C x)) :=  λ φ  η , λ ζ , φ ζ  η  </code></p>",
        "id": 194702148,
        "sender_full_name": "orlando",
        "timestamp": 1587401026
    },
    {
        "content": "<p>Kevin could have written</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>\n\n\n<p>or even</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</pre></div>\n\n\n<p>but he chose the longer form with <code>begin ... end</code> just for pedagogical reasons.</p>",
        "id": 194707366,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587403588
    },
    {
        "content": "<p><code>def axiom_5: (∀ x : α , B → C x) → (B → (∀ x : α , C x)) :=λφ η ζ,φ ζ η</code></p>",
        "id": 194707705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587403761
    },
    {
        "content": "<p><code>def axiom_5: (∀ x : α , B → C x) → (B → (∀ x : α , C x)) :=forall_swap.1</code></p>",
        "id": 194707855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587403824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">def</span> <span class=\"n\">axiom_5</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">swap</span>\n</pre></div>",
        "id": 194707925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587403864
    },
    {
        "content": "<p>Hey, you opened <code>function</code>, this is cheating.</p>",
        "id": 194708120,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587403969
    },
    {
        "content": "<p>aah but I didn't import tactic</p>",
        "id": 194708166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587403992
    },
    {
        "content": "<p>Importing <code>tactic</code> is not cheating :)</p>",
        "id": 194708728,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587404309
    },
    {
        "content": "<p>Indeed, it should be made mandatory!</p>",
        "id": 194711775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587405836
    },
    {
        "content": "<p>what is this error <code>induction tactic failed, recursor 'sorted.dcases_on' can only eliminate into Prop</code> about?</p>",
        "id": 194740486,
        "sender_full_name": "Nam",
        "timestamp": 1587421097
    },
    {
        "content": "<p>It probably means that you were in tactic mode, your goal was <code>T</code> with <code>T : Type</code> rather than <code>P</code> with <code>P : Prop</code>, and then you tried the <code>cases</code> tactic.</p>",
        "id": 194740516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421134
    },
    {
        "content": "<p><del>Maybe you were trying to get <code>a : A</code> from some statement of the form <code>exists a : A</code></del> (you weren't)</p>",
        "id": 194740559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">what_is_this</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194740585,
        "sender_full_name": "Nam",
        "timestamp": 1587421199
    },
    {
        "content": "<p>Your goal is <code>Prop</code> and <code>Prop : Type</code></p>",
        "id": 194740662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421227
    },
    {
        "content": "<p>You can solve your goal with <code>exact 2 + 2 = 37</code></p>",
        "id": 194740678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421239
    },
    {
        "content": "<p>You probably want your goal to be <code>P : Prop</code> for some proposition P</p>",
        "id": 194740707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421264
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span>\n    <span class=\"n\">C</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">sorted</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 194740745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421299
    },
    {
        "content": "<p>That's the recursor which Lean has generated for <code>sorted</code>, and the motive <code>C</code> is a map <code>list nat -&gt; Prop</code> so it will only work if your goal has type <code>Prop</code>. You have (probably unintentionally) made your goal <em>equal</em> to <code>Prop</code>, so in particular it has type <code>Type</code></p>",
        "id": 194740845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421350
    },
    {
        "content": "<p>if i change the declaration of the lemma to <code>lemma what_is_this {l} (h : sorted l) : sorted l :=</code>, then i can <code>cases h</code>.</p>",
        "id": 194741015,
        "sender_full_name": "Nam",
        "timestamp": 1587421469
    },
    {
        "content": "<p>That's because now your goal is <code>sorted l</code> and <code>sorted l : Prop</code></p>",
        "id": 194741046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421488
    },
    {
        "content": "<p><code>cases</code> will work if the type of your goal is Prop. If you are in tactic mode, the type of your goal should always be Prop.</p>",
        "id": 194741080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421516
    },
    {
        "content": "<p>Tactic mode is for proving theorems, and theorem statements are terms of type Prop.</p>",
        "id": 194741103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421536
    },
    {
        "content": "<p>what is the equivalence in a <code>def</code>?</p>",
        "id": 194741196,
        "sender_full_name": "Nam",
        "timestamp": 1587421575
    },
    {
        "content": "<p>I don't understand the question.</p>",
        "id": 194741224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421591
    },
    {
        "content": "<p>Oh -- you mean the equivalent story?</p>",
        "id": 194741234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421603
    },
    {
        "content": "<p>i mean the equivalent \"statement(?)\"</p>",
        "id": 194741264,
        "sender_full_name": "Nam",
        "timestamp": 1587421626
    },
    {
        "content": "<p>With a def, you are usually either making <code>T</code> with <code>T : Type</code> or <code>t</code> with <code>t : T</code></p>",
        "id": 194741267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421629
    },
    {
        "content": "<p>and you almost never do the entire thing in tactic mode</p>",
        "id": 194741280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421641
    },
    {
        "content": "<p>Sometimes, making a definition involves doing some proofs along the way, and it's fine to go into tactic mode then</p>",
        "id": 194741305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421664
    },
    {
        "content": "<p>so how do you \"cases\" a hypothesis, or to extract the terms from that hypothesis?</p>",
        "id": 194741364,
        "sender_full_name": "Nam",
        "timestamp": 1587421686
    },
    {
        "content": "<p>This question is too vague to admit an answer</p>",
        "id": 194741385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421704
    },
    {
        "content": "<p>A lot will depend on the form of the recursor for the head term of the hypothesis</p>",
        "id": 194741436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421747
    },
    {
        "content": "<p>say, the signature <code>def what_is_this {l} (h : sorted l) : N</code>, how do i yield values depending on what form h is?</p>",
        "id": 194741460,
        "sender_full_name": "Nam",
        "timestamp": 1587421773
    },
    {
        "content": "<p>If you are in tactic mode, then <code>cases</code> is almost always the right answer.</p>",
        "id": 194741465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421774
    },
    {
        "content": "<p>oh, i think \"match ... with\" is what i might be looking for. is it right?</p>",
        "id": 194741488,
        "sender_full_name": "Nam",
        "timestamp": 1587421788
    },
    {
        "content": "<p>What is <code>N</code>? I think I am going to need a more precise question before I can help you.</p>",
        "id": 194741561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421806
    },
    {
        "content": "<p><code>h</code> is a proof so it can't really help you with making a definition. It can only help you making other proofs.</p>",
        "id": 194741590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421837
    },
    {
        "content": "<p>i don't know how to type the math font for natural numbers</p>",
        "id": 194741594,
        "sender_full_name": "Nam",
        "timestamp": 1587421838
    },
    {
        "content": "<p>Oh, just call them <code>nat</code>, that's their ASCII name</p>",
        "id": 194741608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421856
    },
    {
        "content": "<p>How is the fact that you know a theorem about <code>l</code> going to help you define a natural number?</p>",
        "id": 194741622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421876
    },
    {
        "content": "<p>i was thinking of enums</p>",
        "id": 194741636,
        "sender_full_name": "Nam",
        "timestamp": 1587421895
    },
    {
        "content": "<p>I don't know what they are.</p>",
        "id": 194741645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421903
    },
    {
        "content": "<p>converting sorted.nil / sorted.one / sorted.other into 0, 1 or 2</p>",
        "id": 194741657,
        "sender_full_name": "Nam",
        "timestamp": 1587421916
    },
    {
        "content": "<p>But that can just be read off from the length of <code>l</code></p>",
        "id": 194741708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421933
    },
    {
        "content": "<p>that's true.</p>",
        "id": 194741759,
        "sender_full_name": "Nam",
        "timestamp": 1587421964
    },
    {
        "content": "<p>but it won't be as natural</p>",
        "id": 194741766,
        "sender_full_name": "Nam",
        "timestamp": 1587421975
    },
    {
        "content": "<p>Lean has a proof-irrelevant <code>Prop</code>. This means that <code>h</code> has no idea how it was proved.</p>",
        "id": 194741792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422004
    },
    {
        "content": "<p>I might be wrong about this, I don't know much about all this core logic stuff.</p>",
        "id": 194741826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422028
    },
    {
        "content": "<p>how does <code>cases</code> work though? it knows how <code>h</code> was constructed.</p>",
        "id": 194741883,
        "sender_full_name": "Nam",
        "timestamp": 1587422049
    },
    {
        "content": "<p>No it doesn't, it just splits into cases: \"if h was constructed in this way, do this, if it was constucted in this other way, do that,...\"</p>",
        "id": 194741918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422083
    },
    {
        "content": "<p>and you can only do that whilst in the middle of another proof, because your recursor is only eliminating into Prop.</p>",
        "id": 194741943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422112
    },
    {
        "content": "<p>I have no idea whether you can make a recursor which eliminates into Type</p>",
        "id": 194741955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422129
    },
    {
        "content": "<p>that's exactly what i want. if h was constructed in this way, return 0, etc.</p>",
        "id": 194741963,
        "sender_full_name": "Nam",
        "timestamp": 1587422139
    },
    {
        "content": "<p>For all I know, this sort of functionality would make Lean inconsistent.</p>",
        "id": 194741992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422159
    },
    {
        "content": "<p>Yes, it would</p>",
        "id": 194742046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587422174
    },
    {
        "content": "<p>It might be what you want, but it's a fact that Lean has a proof-irrelevant Prop.</p>",
        "id": 194742052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422180
    },
    {
        "content": "<p>In general this sort of thing could be quite problematic. For example if you had a proof <code>h</code> of <code>A or B</code>, and you wanted to define a function which was 1 if the thing you actually proved was A, and was 2 if the thing you actually proved was B, then imagine what happens if you have proofs of both?</p>",
        "id": 194742209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422312
    },
    {
        "content": "<p>Any two proofs of <code>A or B</code> are equal by definition. Lean cannot tell <code>or.inl hA</code> and <code>or.inr hB</code> apart, they are both represented as a little tick by the statement <code>A or B</code>, representing the fact that it is proved.</p>",
        "id": 194742250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422370
    },
    {
        "content": "<p>And that's why <code>or</code> only eliminates to Prop.</p>",
        "id": 194742263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422392
    },
    {
        "content": "<p>i see. thanks for all the explanations!</p>",
        "id": 194742315,
        "sender_full_name": "Nam",
        "timestamp": 1587422417
    },
    {
        "content": "<p>Since you are already thinking about programming: A Prop is not represented by any data at runtime. That's why you can't do case analysis on <code>h : p</code> if <code>p</code> is a Prop in order to construct data, because the data you would need to decide what to do does not exist. You can do case analysis on <code>h</code> to prove another Prop though, since that doesn't require constructing any data.</p>",
        "id": 194742321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587422423
    },
    {
        "content": "<p>And the reason that <code>h</code> is not represented by data is that any two proofs of a Prop are equal anyways, so there is no sense in it.</p>",
        "id": 194742355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587422453
    },
    {
        "content": "<p>My understanding is that other proof systems do not have this spectacularly good idea inbuilt into them, because some people who do type theory are uncomfortable with this set-up.</p>",
        "id": 194742367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422465
    },
    {
        "content": "<p>If you don't want this behavior, no problem: don't use Prop.</p>",
        "id": 194742381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587422480
    },
    {
        "content": "<p>So then they have the joy of being able to worry about whether two proofs of something are equal, a concept which basically makes no sense to most mathematicians.</p>",
        "id": 194742425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422508
    },
    {
        "content": "<p>You could redefine <code>sorted</code> to be some kind of a data-carrying witness of the fact that your list is sorted. If your list is long then the data-carrying witness might be quite large.</p>",
        "id": 194742633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422642
    },
    {
        "content": "<p>got it.</p>",
        "id": 194742674,
        "sender_full_name": "Nam",
        "timestamp": 1587422675
    },
    {
        "content": "<p>Perhaps I should not say any more though because this really is at the edge of my understanding; I am not entirely clear on how this would work.</p>",
        "id": 194742689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422690
    },
    {
        "content": "<p>Oh it might be as easy as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194742797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422773
    },
    {
        "content": "<p>Now <code>sorted l</code> has type Type, the recursor (<code>#check @sorted.rec</code>) can be checked to have a motive <code>C : Π (a : list ℕ), sorted a → Sort u_1</code> which is what you want, and the <code>cases</code> command will probably work.</p>",
        "id": 194742884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422855
    },
    {
        "content": "<p>it does seem to work.</p>",
        "id": 194742959,
        "sender_full_name": "Nam",
        "timestamp": 1587422898
    },
    {
        "content": "<p>But now later on if you have two terms <code>a</code> and <code>b</code> of type <code>sorted l</code> you will have to work to prove that they are equal.</p>",
        "id": 194742963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422905
    },
    {
        "content": "<p>You can recover your Prop-valued function by defining <code>def is_sorted (l : list ℕ) := nonempty (sorted l)</code></p>",
        "id": 194743021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587422962
    },
    {
        "content": "<p>Because in your case the constructors work in disjoint cases (one only works when the list is empty, one only works when it has size 1 and the last one only works if the size is 2 or more) you should be able to prove <code>subsingleton (sorted l)</code>, i.e. any two terms of type <code>sorted l</code> are equal.</p>",
        "id": 194743154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587423083
    },
    {
        "content": "<p>(NB <code>Sort 0 = Prop</code>, <code>Sort 1 = Type</code>, <code>Sort 2 = Type 1</code> etc)</p>",
        "id": 194743179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587423110
    },
    {
        "content": "<p>these are pretty advanced tips ;). i think i get them, but not confident enough to explain them back to someone else. hah.</p>",
        "id": 194743303,
        "sender_full_name": "Nam",
        "timestamp": 1587423193
    },
    {
        "content": "<p>But this is a design decision which will come with consequences later; some of Lean's unification algorithms will not know that <code>sorted l</code> is a subsingleton and you might start getting weird errors. It also seems a bit strange to want to carry all this data around when you can instantly reconstruct it from the length of the list.</p>",
        "id": 194743309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587423198
    },
    {
        "content": "<p>i don't have any specific need. i was just playing with the syntax to familiarize myself.</p>",
        "id": 194743389,
        "sender_full_name": "Nam",
        "timestamp": 1587423261
    },
    {
        "content": "<p>there are still so much to learn.</p>",
        "id": 194743394,
        "sender_full_name": "Nam",
        "timestamp": 1587423266
    },
    {
        "content": "<p>With the Type-valued <code>sorted l</code> all you have is another data structure, of the same size as <code>l</code>, which basically tells you nothing more than the fact that you checked a bunch of inequalities and they were all true, and it took time O(n) to do it, with n=length(l). With the Prop-valued <code>sorted l</code> you just have a tick in a box saying \"I checked this, and it was fine\". It costs you nothing extra and is free to carry around.</p>",
        "id": 194743425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587423307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194556052\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194556052\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194555204\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194555204\">said</a>:</p>\n<blockquote>\n<p>Oh, I see. Your file wasn't relying on mathlib at all before. So instead of just removing the <code>init</code>s from the imports, I would just delete the <code>import data.nat.basic</code> and <code>import data.list.basic</code> entirely. </p>\n<p>If you do want to use stuff from mathlib, then you'll need to fix the path issue, and the best way to do that is to look at the install docs again, specifically <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">the \"project\" doc</a> if you've gotten <code>leanproject</code> working.</p>\n</blockquote>\n<p>This seems to be what my problem was - must have built my current project workspace incorrectly. I follow the directions to make a new workspace and now <code>import data.nat.basic</code> doesn't error anymore. Thank you!</p>\n</blockquote>\n<p>UPDATE: I suspect my issue was that I wasn't re-opening my entire workspace folder when I was opening new VSCode windows. This would explain why I had lost the mathlib dependency despite having installed mathlib when I created my workspace. Making a new workspace did this for me in my new VSCode window.</p>",
        "id": 194751375,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587430813
    },
    {
        "content": "<p>what is the syntax to return 2 lists, with some properties? e.g. <code>def split (input : list nat) -&gt; {(prefix suffix : list nat) // prefix ++ suffix = input}</code> (this obviously doesn't work)</p>",
        "id": 194760150,
        "sender_full_name": "Nam",
        "timestamp": 1587443779
    },
    {
        "content": "<p>You could return a pair, or you could use <code>\\Sigma prefix, {suffix // P prefix suffix}</code></p>",
        "id": 194760156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443817
    },
    {
        "content": "<p>with a pair it would be something like <code>{p : list nat \\times list nat // p.1 ++ p.2 = input}</code></p>",
        "id": 194760189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587443882
    },
    {
        "content": "<p>i also tried <code>{(pre : list ℕ) × (suf : list ℕ) // pre++suf = input}</code></p>",
        "id": 194760220,
        "sender_full_name": "Nam",
        "timestamp": 1587443893
    },
    {
        "content": "<p>ahh, i see.</p>",
        "id": 194760226,
        "sender_full_name": "Nam",
        "timestamp": 1587443913
    },
    {
        "content": "<p>my understanding of pair is completely off.</p>",
        "id": 194760227,
        "sender_full_name": "Nam",
        "timestamp": 1587443923
    },
    {
        "content": "<p>thanks Mario</p>",
        "id": 194760242,
        "sender_full_name": "Nam",
        "timestamp": 1587443981
    },
    {
        "content": "<p>If you don't like the asymmetry of the first version, you can also use <code>\\Sigma'</code> which is a generalization of <code>\\Sigma</code> and <code>{x // p x}</code>, as in <code>\\Sigma' prefix suffix, prefix ++ suffix = input</code></p>",
        "id": 194760291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587444019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194760220\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194760220\">said</a>:</p>\n<blockquote>\n<p>i also tried <code>{(pre : list ℕ) × (suf : list ℕ) // pre++suf = input}</code></p>\n</blockquote>\n<p><code>×</code> is for putting the types together, not the terms.</p>",
        "id": 194772911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587457461
    },
    {
        "content": "<p>in <code>data/set.lean</code> there is this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">subset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s₂</span>\n</pre></div>\n\n\n<p>what does <code>⦃⦄</code> mean?</p>",
        "id": 194840336,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1587492345
    },
    {
        "content": "<p>I forget what these are officially called, but see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments</a></p>",
        "id": 194840793,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587492559
    },
    {
        "content": "<p>thank you!</p>",
        "id": 194840974,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1587492634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> insertion sort with design contract at the <code>insert</code> helper.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">sorted</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_i</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tail_of_sorted</span> <span class=\"o\">{</span><span class=\"n\">hd</span> <span class=\"n\">tl</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_i</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"n\">tl</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h_i</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">head</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">pre</span> <span class=\"n\">suf</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"bp\">::</span><span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"bp\">++</span><span class=\"n\">suf</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">pre</span><span class=\"bp\">++</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">suf</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">head</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"bp\">::</span><span class=\"n\">pre</span><span class=\"bp\">++</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">suf</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">pre</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h3</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">head_lte_pre_hd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">head_lte_pre_hd</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">sorted</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">++</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">/\\</span> <span class=\"n\">sorted</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">++</span> <span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)}</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">h_i</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">([],</span> <span class=\"o\">[]),</span> <span class=\"k\">begin</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"bp\">::</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"n\">h_i</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h_n</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">head</span> <span class=\"k\">then</span>\n    <span class=\"bp\">⟨</span><span class=\"o\">([],</span> <span class=\"n\">head</span><span class=\"bp\">::</span><span class=\"n\">tail</span><span class=\"o\">),</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">other</span> <span class=\"n\">h_n</span> <span class=\"n\">h_i</span>\n      <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">o_rec</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">tail_of_sorted</span> <span class=\"n\">h_i</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"o\">([</span><span class=\"n\">head</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">o_rec</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">o_rec</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">o_rec</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">simp</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rewrite</span> <span class=\"err\">←</span> <span class=\"n\">o_rec</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">at</span> <span class=\"n\">h_i</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">})</span> <span class=\"n\">o_rec</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_le</span> <span class=\"n\">h_n</span><span class=\"o\">)}</span>\n      <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sort</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">sorted</span> <span class=\"n\">o</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[],</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"n\">sorted</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">head</span><span class=\"bp\">::</span><span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">sorted_tail</span> <span class=\"o\">:=</span> <span class=\"n\">sort</span> <span class=\"n\">tail</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">pre_suf</span> <span class=\"o\">:=</span> <span class=\"n\">insert</span> <span class=\"n\">head</span> <span class=\"n\">sorted_tail</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">sorted_tail</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"k\">in</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">pre_suf</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">++</span> <span class=\"n\">head</span> <span class=\"bp\">::</span> <span class=\"n\">pre_suf</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">pre_suf</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"c1\">-- [1, 1, 2, 3, 4, 5]</span>\n</pre></div>",
        "id": 194872376,
        "sender_full_name": "Nam",
        "timestamp": 1587510142
    },
    {
        "content": "<p>reviews are much appreciated ;)</p>",
        "id": 194873100,
        "sender_full_name": "Nam",
        "timestamp": 1587510767
    },
    {
        "content": "<p>Well done :-)</p>",
        "id": 194873439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587511106
    },
    {
        "content": "<p>double the amount of code than the other approach. i don't understand why though. i suspect the other approach could cases the <code>insert</code> function, while this approach cannot because it is being defined.</p>",
        "id": 194873716,
        "sender_full_name": "Nam",
        "timestamp": 1587511409
    },
    {
        "content": "<p>(i.e. it cannot introspect its own incomplete definition)</p>",
        "id": 194873846,
        "sender_full_name": "Nam",
        "timestamp": 1587511530
    },
    {
        "content": "<p>Hello, I have a hypothesis of the form <code>n : \\N</code> and <code>h : n &lt; 0</code>. What's a way I can extract false from this?</p>",
        "id": 194910755,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587550076
    },
    {
        "content": "<p><code>nat.not_lt_zero _ h</code></p>",
        "id": 194910845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587550131
    },
    {
        "content": "<p><code>cases h</code></p>",
        "id": 194910883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587550166
    },
    {
        "content": "<p>Is there a way to rename the hypothesis introduced by <code>interval_cases</code>? When I use it it creates a hypothesis called <code>h_1</code> and I'd like to name it something else.</p>",
        "id": 194919699,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587556981
    },
    {
        "content": "<p>Maybe now's the time to learn some basic metaprogramming Shing :-)</p>",
        "id": 194920049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587557203
    },
    {
        "content": "<p>Perhaps, digging into it I think I know where the automatically generated name is coming from, which is a call to <code>note_anon</code>. Since I had a hypothesis <code>h</code> already, it uses <code>h_1</code>. So I don't think I can do much without significant changes :(</p>\n<p>and the way that renaming hypothesis is done for other tactics (<code>with ...</code>) means changing the parser as well. So I definitely don't know enough. My knowledge of parsers ends at the very basic BNF from A Level CS.</p>",
        "id": 194920788,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587557615
    },
    {
        "content": "<p>I guess <code>rename</code> exists if I cared enough.</p>",
        "id": 194920897,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587557668
    },
    {
        "content": "<p>You don't need to do any parser implementation. The allowed syntax for a tactic is encoded into its type in a neat way.</p>",
        "id": 194922747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587558806
    },
    {
        "content": "<p>I see. Looking at it now it does seem to be that way. I would have to figure out how <code>parse</code> worked. It does seem fairly straightforward (at least for something basic) from what I can tell, and there are plenty of other tactics that I could take a look at. Although I don't have much time right now to dig into this further at the moment.</p>",
        "id": 194923665,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587559371
    },
    {
        "content": "<p>how do I set up a proof in lean that takes  (first assumes) Σ∪{α}  proves β (with a sorry maybe), then show Σ proves (α→β) (as a second proof)? (yes, proving the deduction theorem).</p>",
        "id": 194941591,
        "sender_full_name": "AMM",
        "timestamp": 1587566545
    },
    {
        "content": "<p>first define \"proves\"</p>",
        "id": 194942313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587566843
    },
    {
        "content": "<p><code>\\lam</code>, or <code>intro</code></p>",
        "id": 194942884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587567093
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- |- β</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194943308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587567279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194942313\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194942313\">said</a>:</p>\n<blockquote>\n<p>first define \"proves\"</p>\n</blockquote>\n<p>Just the usual first order def that it's the  formula that  is either an axiom or is obtained from applying rules of inference to previous formulae</p>",
        "id": 194943452,
        "sender_full_name": "AMM",
        "timestamp": 1587567350
    },
    {
        "content": "<p>define it in Lean</p>",
        "id": 194943556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587567379
    },
    {
        "content": "<p>not define it here</p>",
        "id": 194943560,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587567382
    },
    {
        "content": "<p>haha yes okay</p>",
        "id": 194943583,
        "sender_full_name": "AMM",
        "timestamp": 1587567390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194942884\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194942884\">said</a>:</p>\n<blockquote>\n<p><code>\\lam</code>, or <code>intro</code></p>\n</blockquote>\n<p>okay cool!</p>",
        "id": 194943621,
        "sender_full_name": "AMM",
        "timestamp": 1587567408
    },
    {
        "content": "<p>what does {Sigma α β} notation mean sorry? and then s is of type sigma?</p>",
        "id": 194943707,
        "sender_full_name": "AMM",
        "timestamp": 1587567448
    },
    {
        "content": "<p>I assume by Sigma you mean you have some additional assumptions. For the example it doesn't really matter what they are</p>",
        "id": 194943950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587567543
    },
    {
        "content": "<p><code>{Sigma α β}</code> is the same as <code>{Sigma : Sort*} {α : Sort*} {β : Sort*}</code>, it's a bunch of type variables</p>",
        "id": 194944044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587567585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't think that's what they mean...</p>",
        "id": 194944461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587567742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"285266\">@AMM</span> are you trying to formalize the theory of first order logic?</p>",
        "id": 194944548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587567790
    },
    {
        "content": "<p>I think it probably <em>is</em> what they mean but it's worth being explicit about what we are doing here.</p>",
        "id": 194944611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587567819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194943950\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194943950\">said</a>:</p>\n<blockquote>\n<p>I assume by Sigma you mean you have some additional assumptions. For the example it doesn't really matter what they are</p>\n</blockquote>\n<p>yes, a set of formulae (assumptions)</p>",
        "id": 194945861,
        "sender_full_name": "AMM",
        "timestamp": 1587568310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194944044\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194944044\">said</a>:</p>\n<blockquote>\n<p><code>{Sigma α β}</code> is the same as <code>{Sigma : Sort*} {α : Sort*} {β : Sort*}</code>, it's a bunch of type variables</p>\n</blockquote>\n<p>okay that's useful to know</p>",
        "id": 194946018,
        "sender_full_name": "AMM",
        "timestamp": 1587568335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194944548\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194944548\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"285266\">AMM</span> are you trying to formalize the theory of first order logic?</p>\n</blockquote>\n<p>I was wanting, as a smaller exercise, to give a brief lean argument as to why the deduction theorem holds, and yes this would be in that context of first order logic.</p>\n<p>[Im sure mathlib already has this (any pointers to finding the deduction theorem in mathlib?), and if not other project have for sure used all these first order results, like for flypitch]</p>",
        "id": 194946379,
        "sender_full_name": "AMM",
        "timestamp": 1587568490
    },
    {
        "content": "<p>Feels appropriate to be posting this in the noob thread because I'm sure the syntax is horrible, hope I'm not making people lose their patience. How do I fix my definition that I could later use it on the part:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">proof_of_β</span> <span class=\"o\">{</span><span class=\"n\">Sigma</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Sigma</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--something that captures s has type sigma union alpha not just sigma [probably not possible in type theory?]</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 194948763,
        "sender_full_name": "AMM",
        "timestamp": 1587569546
    },
    {
        "content": "<p>mathlib doesn't have a formalization of first-order logic, so it doesn't have the deduction theorem.</p>",
        "id": 194949382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587569785
    },
    {
        "content": "<p>similarly flypitch's version of FOL uses natural deduction, so there is no deduction theorem, it is just a given rule namely implication introduction (just as in Lean's logical framework, or as in simply typed lambda calculus where it corresponds to lambda abstraction)<br>\ncf. <a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L818\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L818\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L818</a></p>",
        "id": 194949524,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1587569834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247064\">Matt Earnshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194949524\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194949524\">said</a>:</p>\n<blockquote>\n<p>similarly flypitch's version of FOL uses natural deduction, so there is no deduction theorem, it is just a given rule namely implication introduction (just as in Lean's logical framework, or as in simply typed lambda calculus where it corresponds to lambda abstraction)<br>\ncf. <a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L818\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L818\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L818</a></p>\n</blockquote>\n<p>interesting!</p>",
        "id": 194949580,
        "sender_full_name": "AMM",
        "timestamp": 1587569863
    },
    {
        "content": "<p>even if Lean used first order logic, the deduction theorem is a meta theorem, so you wouldn't be table to prove it (or even formalize it) in Lean</p>",
        "id": 194949689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587569894
    },
    {
        "content": "<p>so if you want to \"prove deduction theorem in Lean\", you first need to create a subsystem inside Lean, i.e. formalize first order logic inside Lean</p>",
        "id": 194949751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587569923
    },
    {
        "content": "<p>and then the deduction theorem will be a meta-theorem in the sub-system, i.e. a theorem</p>",
        "id": 194949800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587569949
    },
    {
        "content": "<p>And, it would be a theorem about whatever specific logical system you formalized.</p>",
        "id": 194950097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587570072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194949800\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/194949800\">said</a>:</p>\n<blockquote>\n<p>and then the deduction theorem will be a meta-theorem in the sub-system, i.e. a theorem</p>\n</blockquote>\n<p>I see, this is a fair point about the metatheorem.<br>\nyet the idea that if you take any two things that prove a third thing and, then, only had the first thing and used the previous result to get the conditional involving the second and third would seem very much in the spirit of the deduction theorem.</p>",
        "id": 194950491,
        "sender_full_name": "AMM",
        "timestamp": 1587570250
    },
    {
        "content": "<p>Also this other thing pseudo deduction theorem seems like it should be almost trivial in lean without first formalising first order logic. Is my reasoning wrong?</p>",
        "id": 194950608,
        "sender_full_name": "AMM",
        "timestamp": 1587570305
    },
    {
        "content": "<p>Do you consider what Mario posted earlier to be an answer?</p>",
        "id": 194951297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587570612
    },
    {
        "content": "<p>Namely, before <code>intro</code> the goal ends with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span>\n<span class=\"err\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n</pre></div>\n\n\n<p>and after <code>intro</code> the goal ends with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Sigma</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">β</span>\n</pre></div>\n\n\n<p>which means if we have a proof of β from Sigma and α, we could stick <code>intro</code> before it to get a proof of α → β from Sigma.</p>",
        "id": 194951766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587570824
    },
    {
        "content": "<p>yes I think for my informal purposes Mario's comment would be an answer!</p>",
        "id": 194953500,
        "sender_full_name": "AMM",
        "timestamp": 1587571490
    },
    {
        "content": "<p>is there any way of writing in lean ' we have a proof of β from Sigma and α' in a def before that with a sorry? Otherwise, I guess I can just use English</p>",
        "id": 194953808,
        "sender_full_name": "AMM",
        "timestamp": 1587571560
    },
    {
        "content": "<p>Hi:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(this is a bit contrived, but illustrates my confusion) Gives me the error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kn\">lemma</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"n\">equality</span> <span class=\"n\">nor</span> <span class=\"n\">a</span> <span class=\"n\">iff</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nonzero_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"err\">⊢</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span>\n</pre></div>\n\n\n<p>Am I incorrect in assuming that h1 is definitionally equivalent to the hypothesis <code>s = 0 </code>?</p>",
        "id": 194955707,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587572415
    },
    {
        "content": "<p>Sorry i mean <code>r=0</code></p>",
        "id": 194955773,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587572449
    },
    {
        "content": "<p><code>rw (show r = 0, from h1)</code></p>",
        "id": 194955881,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587572513
    },
    {
        "content": "<p>You are not wrong about this, however <code>rw</code> wants to see something that's <em>syntactically</em> an equality or iff.</p>",
        "id": 194955941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587572526
    },
    {
        "content": "<p>Oh ok. Is there another, better tactic to use besides rw? Or is <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>'s solution the best one?</p>",
        "id": 194956103,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587572620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194963505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587575945
    },
    {
        "content": "<p><code>rw</code> only works up to syntactic equality, whereas many other things (e.g. term mode) work up to definitional equality.</p>",
        "id": 194963573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587575978
    },
    {
        "content": "<p>(and you don't want the h_i in square brackets)</p>",
        "id": 194964323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"c1\">-- h2 has type eq _ _ so h2.symm means eq.symm h2</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194964583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">S</span> <span class=\"n\">set_of</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194964754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576485
    },
    {
        "content": "<p>(you can see what to unfold if you write <code>set_option pp.notation false</code>)</p>",
        "id": 194964788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576507
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">-- h1 : set.mem r S</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">-- h1 : S r</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">S</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">-- h1 : set_of (λ (r : R), eq r 0) r</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set_of</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"c1\">-- h1 : eq r 0</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194965041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576616
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>",
        "id": 194965102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587576646
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194965159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587576669
    },
    {
        "content": "<p>also it's a <code>theorem</code> not a <code>def</code></p>",
        "id": 194965179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587576677
    },
    {
        "content": "<p>how do i get a \"decidable\" version of <code>{a : Type} [has_le a]</code>? it looks like <code>has_decidable_le</code> is only for <code>list</code>.</p>",
        "id": 195005121,
        "sender_full_name": "Nam",
        "timestamp": 1587599623
    },
    {
        "content": "<p><code>[decidable_rel ((≤):a-&gt;a-&gt;Prop)]</code></p>",
        "id": 195006050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587600453
    },
    {
        "content": "<p>i tried with <code>a.has_le.le</code> :'(</p>",
        "id": 195006160,
        "sender_full_name": "Nam",
        "timestamp": 1587600542
    },
    {
        "content": "<p><code>{α : Type} [has_le α] [decidable_rel α.has_le.le]</code></p>",
        "id": 195006193,
        "sender_full_name": "Nam",
        "timestamp": 1587600579
    },
    {
        "content": "<p>why does that not work?</p>",
        "id": 195006203,
        "sender_full_name": "Nam",
        "timestamp": 1587600595
    },
    {
        "content": "<p>this notation <code>α.has_le.le</code> doesn't work</p>",
        "id": 195006608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587600970
    },
    {
        "content": "<p>you can write <code>@has_le.le α _</code> if you don't like the type ascription way (which is I think more readable)</p>",
        "id": 195006623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587600999
    },
    {
        "content": "<p><code>{α : Type} [has_le α] [decidable_rel (@has_le.le α _)]</code> is certainly more readable. thank you!</p>",
        "id": 195008497,
        "sender_full_name": "Nam",
        "timestamp": 1587602792
    },
    {
        "content": "<p>What's wrong with using <code>[decidable_rel ((≤):a-&gt;a-&gt;Prop)]</code> instead? (this is the one I was saying was more readable)</p>",
        "id": 195008542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587602855
    },
    {
        "content": "<p>too many symbols.</p>",
        "id": 195008601,
        "sender_full_name": "Nam",
        "timestamp": 1587602883
    },
    {
        "content": "<p>(I think Mario's is much more readable, for what it's worth.)</p>",
        "id": 195009716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587604115
    },
    {
        "content": "<p>i can see why that style is more prevalent in the repo now :-D</p>",
        "id": 195009800,
        "sender_full_name": "Nam",
        "timestamp": 1587604220
    },
    {
        "content": "<p>How should I pattern match on <code>ℕ+</code>? since the  way I'd expect doesn't work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ+</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- error</span>\n</pre></div>",
        "id": 195009954,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587604405
    },
    {
        "content": "<p>My instinct would be to do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ+</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ+</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n1</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n2</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195012569,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587608108
    },
    {
        "content": "<p>Ok thank you. I'll give that a shot.</p>",
        "id": 195012578,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587608149
    },
    {
        "content": "<p>Hello everyone! How would you say Lean compares to other theorem provers? In particular, what would you say are its main virtues?</p>",
        "id": 195213681,
        "sender_full_name": "AMM",
        "timestamp": 1587746261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"285266\">@AMM</span> <a href=\"https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/\" title=\"https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/\">https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/</a></p>",
        "id": 195222050,
        "sender_full_name": "Nam",
        "timestamp": 1587750138
    },
    {
        "content": "<p>2018 though.</p>",
        "id": 195222064,
        "sender_full_name": "Nam",
        "timestamp": 1587750148
    },
    {
        "content": "<p>It only got better...</p>",
        "id": 195222459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587750361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"285266\">@AMM</span> What are you looking for? A comparison can be really long. Is there some specific thing you care about?</p>",
        "id": 195222534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587750386
    },
    {
        "content": "<p>Do you care about some kind of maths? Or more about software verification? Or something else?</p>",
        "id": 195222566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587750404
    },
    {
        "content": "<p>Do you care about type theory, or not at all?</p>",
        "id": 195222593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587750417
    },
    {
        "content": "<p>i care mainly about software verification. what other languages should i look into?</p>",
        "id": 195223341,
        "sender_full_name": "Nam",
        "timestamp": 1587750836
    },
    {
        "content": "<p>Coq has a lot on that. And then there are others that I know very little about, like TLA+ and such</p>",
        "id": 195225923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587752266
    },
    {
        "content": "<p>I was trying the nat.below and nat.brec_on things. I am having some trouble prooving a few things not sure how to go about doing these</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fib1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib1</span> <span class=\"n\">n</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">fib2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n        <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n        <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">brec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n        <span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n            <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n            <span class=\"o\">(</span>\n                <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n                    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span>\n                        <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                        <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">below</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n                        <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n                    <span class=\"o\">))</span> <span class=\"n\">h</span>\n                <span class=\"o\">))</span> <span class=\"n\">h</span>\n            <span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n        <span class=\"o\">)</span>\n\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">4</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">5</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib1</span> <span class=\"mi\">7</span>\n\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">4</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">5</span>\n    <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">fib2</span> <span class=\"mi\">7</span>\n\n    <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fib1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib1</span><span class=\"o\">,</span> <span class=\"n\">fib2</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 195226946,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587752847
    },
    {
        "content": "<p>The last part <code>(n + 2) := sorry</code> case</p>",
        "id": 195227050,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587752887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195222534\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195222534\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"285266\">AMM</span> What are you looking for? A comparison can be really long. Is there some specific thing you care about?</p>\n</blockquote>\n<p>Ill have a look at that review, also just the system description was quite helpful. I just wanted some thoughts, this is great!</p>",
        "id": 195228717,
        "sender_full_name": "AMM",
        "timestamp": 1587753783
    },
    {
        "content": "<p>What's the difference between bundled x and unbundled x in mathlib?</p>",
        "id": 195241647,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1587760587
    },
    {
        "content": "<p>This is explained in Section 4.1.1 of <a href=\"https://arxiv.org/abs/1910.09336\" title=\"https://arxiv.org/abs/1910.09336\">https://arxiv.org/abs/1910.09336</a></p>",
        "id": 195241874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587760752
    },
    {
        "content": "<p>@AMM I think <a href=\"https://artagnon.com/articles/leancoq\" title=\"https://artagnon.com/articles/leancoq\">https://artagnon.com/articles/leancoq</a> does a good job of comparing Lean and Coq. In particular, I learnt from this article that Lean breaks \"good type theoretic properties like strong normalization, subject reduction, and canonicity\", and I have heard from Coq people that this is a big deal for some, but as a mathematician this breakage has never bothered me in the slightest. Another big difference is that \"generic mathematicians\" use Lean (people who do not specialise in type theory or higher categories or whatever -- they are just number theorists or analysts or geometers or topologists) -- and for me this is another of the main attractions.</p>",
        "id": 195242508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587761235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"285266\">@AMM</span> (sorry, didn't work first time)</p>",
        "id": 195242535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587761254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214077\">@Sayantan Majumdar</span></p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fib1</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fib2</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n     <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fib1</span><span class=\"o\">,</span> <span class=\"n\">fib2</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">example</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">example</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)],</span>\n     <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 195243147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587761608
    },
    {
        "content": "<p>I'm trying to learn lean at the moment by formalizing a few statements about lattices to get a feel for proving things. I was having two difficulties. </p>\n<p>At the moment, I have a list of easy theorems about lattices with a closure operator I'd like to try writing up in Lean. From the source code in order.lattice, I decided to define `class closed_lattice (P : Type u) extends lattice P' to be a structure obeying four properties (has a closure function + 3 axioms of closure). </p>\n<p>With the very first theorem on my list, I encountered a difficulty: If I want to prove a result about <em>finite</em> lattices with closure operator, how do I add finiteness as a hypothesis to a theorem?</p>",
        "id": 195243284,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587761677
    },
    {
        "content": "<p>Probably by adding <code>[fintype P]</code> in the list of arguments somewhere</p>",
        "id": 195243356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587761722
    },
    {
        "content": "<p>Close code quoting with <code> ` </code> (the same character as opening it). And post full working code if you want more precise answers.</p>",
        "id": 195243520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587761802
    },
    {
        "content": "<p>Thank you Reid, that seems to have worked! Sorry about the lack of code--Reid's answer seems to be enough to work at the moment, though I'll be sure to include actual code snippets if I have future questions.</p>",
        "id": 195243967,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587762018
    },
    {
        "content": "<p>Hi, I'm new to Lean and wanted to get my feet wet proving some basic things in ZFC, but I'm struggling to actually make use of set_theory.ZFC. Could someone give me guidance on how I would formalize even the statement of something like \"If S is a singleton and A is any set, then |S x A| = |A|\"?</p>",
        "id": 195250101,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587766001
    },
    {
        "content": "<p>You know that you could just prove that in type theory and not worry about the ZFC stuff?</p>",
        "id": 195250144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766032
    },
    {
        "content": "<p>i.e. if S is a singleton and A is any type, then |S x A| = |A|</p>",
        "id": 195250174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766058
    },
    {
        "content": "<p>Where |A| is <code>cardinal.mk A</code>, from <code>set_theory.cardinal</code>; unrelated to <code>set_theory.zfc</code>.</p>",
        "id": 195250443,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587766234
    },
    {
        "content": "<p>It says <code>localized \"notation </code>#<code> := cardinal.mk\" in cardinal</code> in that file.</p>",
        "id": 195250463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766253
    },
    {
        "content": "<p>What does that mean?</p>",
        "id": 195250471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766260
    },
    {
        "content": "<p>I'm taking a set theory course right now which works in ZFC, so I would like to actually formalize it in Lean's model of ZFC if possible. However, I guess this is also something I'm a little unclear on: what exactly would it look like to phrase this just in type theory versus in ZFC?</p>",
        "id": 195250475,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587766262
    },
    {
        "content": "<p>Because a type is just a beefed-up set, you would never notice the difference if you proved it in type theory.</p>",
        "id": 195250530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766298
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I guess that's the type theory version</p>",
        "id": 195250627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766355
    },
    {
        "content": "<p>Even if you formalize it as a theorem about the model of ZFC in mathlib, if you <em>prove</em> it, you are not using the axioms of ZFC but rather the \"metatheory\" (Lean).</p>",
        "id": 195250633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587766360
    },
    {
        "content": "<p>And in particular you wouldn't know whether it holds in other models of ZFC.</p>",
        "id": 195250778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587766473
    },
    {
        "content": "<p>Thank you, that makes sense. If I want to prove theorems about any model of ZFC then, is there a way to actually do this in Lean, or should I just stick to proving the analogous statements with types?</p>",
        "id": 195250926,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587766604
    },
    {
        "content": "<p>You can check out <a href=\"https://github.com/flypitch/flypitch/\" title=\"https://github.com/flypitch/flypitch/\">https://github.com/flypitch/flypitch/</a>, but maybe it would be more ergonomic to use a theorem prover based on ZFC.</p>",
        "id": 195250966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587766640
    },
    {
        "content": "<p>If there's a bijection between two sets then they have the same cardinality.</p>",
        "id": 195251113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766724
    },
    {
        "content": "<p>So it would suffice to prove that there's a bijection between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>×</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">S\\times A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>, and that would be a rather pleasant beginner exercise in Lean, and the proof would be exactly the same as the set theory proof.</p>",
        "id": 195251159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766771
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"c1\">-- theory of bijections</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"n\">include</span> <span class=\"n\">hs</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one_way</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">other_way</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">they_biject</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"err\">≃</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">one_way</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">other_way</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 195251446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587766970
    },
    {
        "content": "<p>Got it, it's clear now. I definitely have a lot to learn about Lean, thank you for being so willing to help new users!</p>",
        "id": 195251752,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587767166
    },
    {
        "content": "<p>Hello again! I have one more question about finiteness. Reid's <code>[fintype P]</code> solution has worked well for me to use finiteness as a hypothesis in a theorem, although I've encountered difficulties with a related problem. Below is some code trying to express the idea that \"any two suitable sets M and N have the same number of elements\" (in the code, <code>lattice</code> is just the standard mathlib <code>order.lattice</code>)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_totally_ordered</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">is_maximal</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">is_chain</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_totally_ordered</span> <span class=\"n\">P</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">is_maximal</span> <span class=\"n\">P</span> <span class=\"n\">M</span>\n\n\n<span class=\"n\">class</span> <span class=\"n\">chain_condition</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">lattice</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finite_chains</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_totally_ordered</span> <span class=\"n\">P</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">chains_equal_length</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">is_chain</span> <span class=\"n\">P</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">is_chain</span> <span class=\"n\">P</span> <span class=\"n\">N</span> <span class=\"bp\">∧</span> <span class=\"n\">fintype</span> <span class=\"n\">M</span> <span class=\"bp\">∧</span> <span class=\"n\">fintype</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">elems</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">elems</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">max_elm</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">min_elm</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>The main issue I'm having is with the second axiom--what I wrote errors in Lean (specifically at the last <code>\\and</code> in the condition, with a somewhat long error message I could reproduce if needed), and I suspect because while <code>[fintype M]</code> is the right way of asserting <code>M</code> is finite in a hypothesis of a theorem, what I'm doing is the wrong way of asserting the finiteness of M in this implication.</p>",
        "id": 195251806,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767216
    },
    {
        "content": "<p>What imports do I need?</p>",
        "id": 195251827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767242
    },
    {
        "content": "<p><code>import order.lattice</code></p>",
        "id": 195251836,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767249
    },
    {
        "content": "<p><code>import data.fintype.basic</code> too, sorry!</p>",
        "id": 195251855,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767261
    },
    {
        "content": "<p>Why not edit the code to make it work out of the box?</p>",
        "id": 195251869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767276
    },
    {
        "content": "<p>Oh, sure</p>",
        "id": 195251931,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767301
    },
    {
        "content": "<p>It's edited with imports now, sorry about that!</p>",
        "id": 195251956,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767322
    },
    {
        "content": "<p>(Although note that for any \"content-ful\" edits, people usually prefer if you just post a new copy of the MWE, so it doesn't screw up the conversation history.)</p>",
        "id": 195251979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587767345
    },
    {
        "content": "<p><code>fintype M</code> is probably not what you want. It's data, not a proposition.</p>",
        "id": 195251998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767364
    },
    {
        "content": "<p>Because <code>M : set P</code> you might want to instead use <code>M : finset P</code>, the type of finite subsets of P. This would solve your problems immediately.</p>",
        "id": 195252027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767398
    },
    {
        "content": "<p>Then you could just drop <code>fintype M</code> completely.</p>",
        "id": 195252083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767412
    },
    {
        "content": "<p>Oh, thank you!<br>\nFor future reference though, how would I get a proposition asserting that <code>M</code> is a <code>fintype</code>?</p>",
        "id": 195252124,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767452
    },
    {
        "content": "<p>For <code>M : set P</code>, if you want to conclude \"M is finite\" then <code>set.finite M</code> is the way to go.</p>",
        "id": 195252158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767490
    },
    {
        "content": "<p>(<code>import data.set.finite</code>)</p>",
        "id": 195252169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767499
    },
    {
        "content": "<p>Thank you!</p>\n<p>I think I will end up going with the <code>set.finite M</code> route, since implementing the <code>M : finset P</code> approach errors that <code>is_chain</code> is defined on types <code>M : set P</code>, not for <code>M : finset P</code></p>",
        "id": 195252253,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767533
    },
    {
        "content": "<p>I am not immediately sure how to start making assertions about the cardinality of a finite set though :-/</p>",
        "id": 195252369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587767641
    },
    {
        "content": "<p>Ah, I do not either. However, I figured out that changing the <code>is_chain</code> to work on <code>\\u M</code> instead of <code>M</code> has lean recognize that finsets are still sets, and so the <code>is_chain</code> definition and <code>M.card</code> both work</p>",
        "id": 195252544,
        "sender_full_name": "Michael Barz",
        "timestamp": 1587767772
    },
    {
        "content": "<p>I think there's a <code>nat</code>-valued cardinality function somewhere that returns 0 for infinite sets</p>",
        "id": 195252552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587767776
    },
    {
        "content": "<p>Hello again, I had a few more questions about working with sets. As discussed a bit ago, I see how statements analogous to \"If S is a singleton and A is a set, then |S x A| = |A|\" can be formalized by letting S A : Type, but I don't see how to extend this to more complicated statements. </p>\n<p>Namely, say I wanted to prove \"For any sets X and Y, there is some set Z with |X| = |Z| and Z ∩ Y = ∅.\" Unless I missed something, it seems like types in Lean don't support intersection, so I don't know how to specify the disjointness part. The statement also isn't true in general if I assume X Y : set U for some fixed type U, say because U could be finite with Y containing every element of U. Any advice?</p>",
        "id": 195255144,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587770052
    },
    {
        "content": "<p>This is the sort of question which you have to deal with in set theory but which typically you don't ever need to worry about in type theory.</p>",
        "id": 195255955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587770859
    },
    {
        "content": "<p>This is some sort of fiddly foundational thing which sometimes comes up in set theory. Why would you ever need that in practice?</p>",
        "id": 195256020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587770923
    },
    {
        "content": "<p>Type theory is different to set theory. It's more powerful. A \"bare type\" is just like a set, but if T is a type then a term <code>t : T</code> of type T isn't like a set -- t is more like an \"atom\". This is a good thing, because if G is a group then in set theory the elements of G are also sets, but they are sets whose elements are irrelevant and never talked about by mathematicians. So letting G be a type is actually a better model for groups. However, if S and T are two distinct types and you have terms <code>s : S</code> and <code>t : T</code> then <em>it does not even make sense</em> to ask if <code>s = t</code>. This is much more disconcerting for someone used to set-theoretic mathematics.</p>",
        "id": 195256157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771103
    },
    {
        "content": "<p>Ah, I had a hunch I was generally barking up the wrong tree trying to do this type of thing. Eventually, I wanted to formalize Tarksi's proof that choice is equivalent over ZF to the statement \"For all infinite A, |A x A| = |A|\", and it's needed for a line in that, so this is indeed a fiddly foundation thing.</p>",
        "id": 195256538,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587771465
    },
    {
        "content": "<p>In Lean, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\times A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> will automatically be \"disjoint\", if that helps.</p>",
        "id": 195256753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587771667
    },
    {
        "content": "<p>I need disjointness between some set and it's Hartogs number, but since those are different types it seems I get that for free. Thank you again.</p>",
        "id": 195256843,
        "sender_full_name": "Scott Guest",
        "timestamp": 1587771779
    },
    {
        "content": "<p>does anyone know of a sample big-O analysis in Lean?</p>",
        "id": 195259326,
        "sender_full_name": "Nam",
        "timestamp": 1587774881
    },
    {
        "content": "<p>Of an algorithm?</p>",
        "id": 195260555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587776646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294354\">@Scott Guest</span> The statement  \"For all infinite A, |A x A| = |A|\" is perfectly reasonable in type theory, and you can prove it without having to assume ZFC foundations. However, proving an equivalence with choice is going to be tough because lean assumes choice all over the place, so proofs in \"ZF\" are not at all nice.</p>",
        "id": 195260742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587776978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195260555\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195260555\">said</a>:</p>\n<blockquote>\n<p>Of an algorithm?</p>\n</blockquote>\n<p>yes, of an algorithm, preferably some well-known one.</p>",
        "id": 195262222,
        "sender_full_name": "Nam",
        "timestamp": 1587779410
    },
    {
        "content": "<p>There is the big-O symbol, but runtime analysis of algorithms is not lean's strong suit. The usual way we represent algorithms, as functions, precludes the ability to measure the time complexity of the algorithm, so you need some other mechanism like a step counting monad</p>",
        "id": 195262231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587779501
    },
    {
        "content": "<p>I guess there's this? Might be more to do with Rust not Lean though. I'm not sure tbh.</p>\n<p><a href=\"https://github.com/Kha/electrolysis\" title=\"https://github.com/Kha/electrolysis\">https://github.com/Kha/electrolysis</a></p>\n<p>(Last section of the linked thesis)</p>",
        "id": 195262300,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587779610
    },
    {
        "content": "<p>Let me plug Verified Functional Algorithms here: <a href=\"https://softwarefoundations.cis.upenn.edu/current/vfa-current/index.html\" title=\"https://softwarefoundations.cis.upenn.edu/current/vfa-current/index.html\">https://softwarefoundations.cis.upenn.edu/current/vfa-current/index.html</a></p>",
        "id": 195262467,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587779978
    },
    {
        "content": "<p>The author says this about runtime calculations:</p>\n<p>\"3. There's no notion of \"run time\" in Coq. That is, we can't say what it means that a Coq function \"takes N steps to evaluate.\" Therefore, we can't prove that binary search trees are efficient. - SOLUTION 1: Don't prove (in Coq) that they're efficient; just prove that they are correct. Prove things about their efficiency the old-fashioned way, on pencil and paper. - SOLUTION 2: Prove in Coq some facts about the height of the trees, which have direct bearing on their efficiency. We'll explore that in later chapters.\"</p>",
        "id": 195262671,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587780287
    },
    {
        "content": "<p>and here's a stackexchange post on the topic: <a href=\"https://cstheory.stackexchange.com/questions/38818/proving-running-time-upper-bounds-for-algorithms-in-dependent-type-theory\" title=\"https://cstheory.stackexchange.com/questions/38818/proving-running-time-upper-bounds-for-algorithms-in-dependent-type-theory\">https://cstheory.stackexchange.com/questions/38818/proving-running-time-upper-bounds-for-algorithms-in-dependent-type-theory</a></p>",
        "id": 195262740,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587780424
    },
    {
        "content": "<p>Is there a preferred way to express divisibility? Looking through mathlib/other posts I'm seeing it expressed in many different equivalent forms depending on the context. Mathematically this doesn't bother me, but it seems like having multiple definitions for things is discouraged in computer science land?</p>",
        "id": 195262876,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587780658
    },
    {
        "content": "<p>can't users (we) guide Lean / Coq with some assumptions / hints?</p>",
        "id": 195262952,
        "sender_full_name": "Nam",
        "timestamp": 1587780769
    },
    {
        "content": "<p>e.g. this part / line takes one instruction</p>",
        "id": 195262976,
        "sender_full_name": "Nam",
        "timestamp": 1587780811
    },
    {
        "content": "<p>i guess that's what Mario referred to as steps monad/</p>",
        "id": 195263025,
        "sender_full_name": "Nam",
        "timestamp": 1587780892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span>  First you have to define what it means for something to take time</p>",
        "id": 195263027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587780896
    },
    {
        "content": "<p>Ideally, we would want <code>(\\lam x, e1) e2 ~&gt; [e2/x] e1</code> to take some time, it is a complicated operation after all, but to lean they are <em>equal</em> and so no function can distinguish them</p>",
        "id": 195263081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587780978
    },
    {
        "content": "<p>Here's an example of using a step counting monad to prove time bounds:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">time</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">step</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">delay</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">((),</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tick</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">delay</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">addM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mulM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sumM</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">step</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sumM</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">addM</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_correct</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">sumM</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">sum</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_time</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">sumM</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">time</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">size</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195263368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587781467
    },
    {
        "content": "<p>thanks! that's very useful.</p>",
        "id": 195263902,
        "sender_full_name": "Nam",
        "timestamp": 1587782493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294354\">@Scott Guest</span> you can formalize what it means to be a model of ZFC, then you can work in a general model of ZFC if you want</p>",
        "id": 195266553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587787360
    },
    {
        "content": "<p>remember to show that the \"standard\" model in mathlib is indeed a model of ZFC</p>",
        "id": 195266556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587787376
    },
    {
        "content": "<p>This is actually something I want to do once I have more time</p>",
        "id": 195266566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587787415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195262876\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195262876\">said</a>:</p>\n<blockquote>\n<p>Is there a preferred way to express divisibility? Looking through mathlib/other posts I'm seeing it expressed in many different equivalent forms depending on the context. Mathematically this doesn't bother me, but it seems like having multiple definitions for things is discouraged in computer science land?</p>\n</blockquote>\n<p>In which type?</p>",
        "id": 195275523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587804847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195275523\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195275523\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195262876\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195262876\">said</a>:</p>\n<blockquote>\n<p>Is there a preferred way to express divisibility? Looking through mathlib/other posts I'm seeing it expressed in many different equivalent forms depending on the context. Mathematically this doesn't bother me, but it seems like having multiple definitions for things is discouraged in computer science land?</p>\n</blockquote>\n<p>In which type?</p>\n</blockquote>\n<p>Either <code>nat</code> or <code>int</code>.</p>",
        "id": 195297565,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587840492
    },
    {
        "content": "<p><code>a \\| b</code> is what is used for both of those types.</p>",
        "id": 195297769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587840952
    },
    {
        "content": "<p>I have a hypothesis of the form <code>h : f = g</code>, how can I get a hypothesis of the form <code>hx : f x = g x</code>?</p>",
        "id": 195298057,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587841368
    },
    {
        "content": "<p><code>have hx : f x = g x, rw h</code></p>",
        "id": 195298074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587841401
    },
    {
        "content": "<p><code>have</code> is a very useful way to make new hypothesis. It creates a new goal, but if the proof is easy then this is no problem.</p>",
        "id": 195298088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587841433
    },
    {
        "content": "<p>is there a way to do it without copying f and g (they're both really long)?</p>",
        "id": 195298129,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587841452
    },
    {
        "content": "<p>The term-mode variant is <code>have hx := congr_fun h x</code></p>",
        "id": 195298134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587841459
    },
    {
        "content": "<p>And it doesn't require copying <code>f</code> and <code>g</code></p>",
        "id": 195298139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587841476
    },
    {
        "content": "<p>If I wanted to prove results about graphs in lean, is there a graph type of some kind?</p>",
        "id": 195298165,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587841533
    },
    {
        "content": "<p>I prefer <code>ap</code> but I guess that's okay :P</p>",
        "id": 195298169,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587841541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294527\">Sam Raleigh</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195298165\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195298165\">said</a>:</p>\n<blockquote>\n<p>If I wanted to prove results about graphs in lean, is there a graph type of some kind?</p>\n</blockquote>\n<p>See the <code>hedetniemi</code> branch</p>",
        "id": 195298339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587841777
    },
    {
        "content": "<p>It's very much work in progress</p>",
        "id": 195298341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587841785
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/191947028\" title=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/191947028\">the associated Zulip thread</a>.</p>",
        "id": 195298388,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587841810
    },
    {
        "content": "<p>Does Lean have a floor/ceiling function to get from non-negative reals to nats? Looking through mathlib I'm not seeing anything, but my intuition for mathlib's organization and naming conventions still isn't great.</p>",
        "id": 195299817,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587844069
    },
    {
        "content": "<p>They are in <code>algebra.archimedean</code></p>",
        "id": 195299894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587844143
    },
    {
        "content": "<p>grepping for <code>floor</code> also helps</p>",
        "id": 195299910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587844195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195299894\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195299894\">said</a>:</p>\n<blockquote>\n<p>They are in <code>algebra.archimedean</code></p>\n</blockquote>\n<p>Looks like <code>exists_nat_gt</code> coupled with a <code>cases</code> does the job. A little clunky though. I'll keep looking to see if there's a direct function.</p>",
        "id": 195300338,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1587844801
    },
    {
        "content": "<p><code>ceil</code> gives you an <code>int</code></p>",
        "id": 195301267,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587846091
    },
    {
        "content": "<p>I suspect that the precise functions you're asking about aren't there Rocky, you might want to write it yourself. It could take as input a real x and output a natural <code>real.natfloor x</code>, which is 0 if x is negative and the floor otherwise. You'd then have to make a little API for the function so it was usable</p>",
        "id": 195301800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587846934
    },
    {
        "content": "<p>You could always use <code>int.to_nat (floor x)</code></p>",
        "id": 195302026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587847265
    },
    {
        "content": "<p>but if <code>cases exists_nat_gt</code> does the job for you, I would actually suggest using that instead, since the floor function is more complicated than that</p>",
        "id": 195302068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587847323
    },
    {
        "content": "<p>Given <code>a b c : nat</code>, how do I rewrite a hypothesis of the form <code>a &lt; b</code> as <code> a*c &lt; b*c</code>?</p>",
        "id": 195312196,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587866352
    },
    {
        "content": "<p>Assuming <code>c &gt; 0</code> ofc</p>",
        "id": 195312204,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587866396
    },
    {
        "content": "<p>Here's one way to find lemmas like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: exact mul_lt_mul_of_pos_right h hc</span>\n</pre></div>",
        "id": 195312277,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587866505
    },
    {
        "content": "<p>Haha you answered my next question before I could even ask it: how do I find lemmas like this in general?</p>",
        "id": 195312318,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587866546
    },
    {
        "content": "<p>thanks!</p>",
        "id": 195312320,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587866560
    },
    {
        "content": "<p>Say I have some hypothesis <code>h : 2^a * (2^(1-b) * c) &lt; 2^1 * 1</code> and my goal looks like<code>2^(a - b) * c * 2 &lt; 2^a</code>. On paper all you need to do to get from the goal to the hypothesis is rearrange things, but this is proving to be tedious to implement in lean. Is there some automating tactic like <code>ring</code> that would close the goal given <code>h</code>?</p>",
        "id": 195314618,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587870985
    },
    {
        "content": "<p>I don't suppose there's <code>by library_search</code> for tactics, eh <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ?</p>",
        "id": 195314627,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587871047
    },
    {
        "content": "<p><code>hint</code></p>",
        "id": 195314629,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587871058
    },
    {
        "content": "<p>there's no way that theorem is in the library</p>",
        "id": 195314631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587871059
    },
    {
        "content": "<p>are your variables all <code>int</code>?</p>",
        "id": 195314633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587871060
    },
    {
        "content": "<p>oh sorry, I should have specified they are all <code>nat</code></p>",
        "id": 195314674,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587871097
    },
    {
        "content": "<p>(Shing is saying that the closest thing for <code>library_search</code> for tactics is <code>hint</code>. But it is very primitive, and will get you nowhere here.)</p>",
        "id": 195314675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587871098
    },
    {
        "content": "<p>nat subtraction will cause a lot of problems here</p>",
        "id": 195314680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587871110
    },
    {
        "content": "<p>Your first step should probably be to work with <code>int</code>. :-)</p>",
        "id": 195314681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587871124
    },
    {
        "content": "<p>hopefully you know that b is at most 1?</p>",
        "id": 195314683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587871128
    },
    {
        "content": "<p>and b &lt;= a</p>",
        "id": 195314692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587871158
    },
    {
        "content": "<p>you could also \"rearrange things\" in lean using <code>calc</code></p>",
        "id": 195314739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587871209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks, I completely forgot about nats and subtraction.</p>",
        "id": 195314899,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587871556
    },
    {
        "content": "<p>Now supposing that <code>a b c : int</code> how would I use <code>calc</code> given <code>h</code>? I tried searching the mathlib and core library documentation, but there doesn't appear to be anything on <code>calc</code> in either.</p>",
        "id": 195315145,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587871981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/calc.html\" title=\"https://leanprover-community.github.io/mathlib_docs/calc.html\">https://leanprover-community.github.io/mathlib_docs/calc.html</a></p>",
        "id": 195315189,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587872043
    },
    {
        "content": "<p>Ah thank you <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> , I made the mistake of looking only under tactics</p>",
        "id": 195315241,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587872139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195315189\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195315189\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/calc.html\" title=\"https://leanprover-community.github.io/mathlib_docs/calc.html\">https://leanprover-community.github.io/mathlib_docs/calc.html</a></p>\n</blockquote>\n<p>Why don't we get syntax highlighting in these docs?</p>",
        "id": 195315349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587872323
    },
    {
        "content": "<p>I'm planning to look into adding it after the next pygments release which should have the updated Lean syntax highlighting.</p>",
        "id": 195315460,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587872574
    },
    {
        "content": "<p>No idea when that will be though...</p>",
        "id": 195315467,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587872602
    },
    {
        "content": "<p>How do see the fully unpacked version of this term I'm trying to check?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ex_unique</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span> <span class=\"err\">$</span> <span class=\"bp\">|</span><span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">φ</span><span class=\"o\">}</span><span class=\"bp\">|</span> <span class=\"err\">≃</span> <span class=\"bp\">|</span><span class=\"o\">{</span><span class=\"n\">var</span> <span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">}</span><span class=\"bp\">|</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ex_unique</span> <span class=\"mi\">𝟙</span> <span class=\"err\">⊤</span>\n</pre></div>",
        "id": 195317138,
        "sender_full_name": "Billy Price",
        "timestamp": 1587876027
    },
    {
        "content": "<p>How do I compute with <code>snd</code> on dependent pairs? Slightly more generally, how do I see what the computation rules for <code>foo_thing</code> are?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo_thing</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo_map_is_id</span> <span class=\"o\">:</span> <span class=\"n\">foo_thing</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195317365,
        "sender_full_name": "Frank Dai",
        "timestamp": 1587876584
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo_thing</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">foo_thing</span>\n<span class=\"c1\">-- foo_thing.equations._eqn_1 : foo_thing = ⟨ℕ, id ℕ⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo_map_is_id</span> <span class=\"o\">:</span> <span class=\"n\">foo_thing</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 195317961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587877809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span> <code>set_option pp.all true</code></p>",
        "id": 195317965,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587877827
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">num_2_cols_Kn_with_monochromatic_Kk_lt_num_2_cols_Kn</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n    <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n</pre></div>\n\n\n<p>I'm getting an error on the last line that says</p>\n<p>failed to synthesize type class instance for<br>\nn k : ℕ,<br>\nh : 2 ^ (1 - nat.choose k 2) * nat.choose n k &lt; 1<br>\n⊢ has_neg ℕ</p>\n<p>Now I know this is likely happening because nat and subtraction aren't playing nicely together and I should switch to <code>k n : int</code>.<br>\nMy only concern is that <code>int</code> doesn't contain a <code>choose</code> function the way <code>nat</code> does. Should I define my own binomial coefficient that accepts integers? If so, I'd greatly appreciate it if someone could point me towards resources on defining your own functions. Or is there a way I could still use <code>nat.choose</code> with <code>k n : int</code>?</p>",
        "id": 195321375,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587884773
    },
    {
        "content": "<p>how about don't write <code>2^-k.choose 2</code></p>",
        "id": 195321433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587884889
    },
    {
        "content": "<p>because in all interpretations it is just 0</p>",
        "id": 195321452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587884900
    },
    {
        "content": "<p>instead <code>2^(nC2-kC2) = 2^(nC2) / 2^(kC2)</code> makes more sense</p>",
        "id": 195321466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587884922
    },
    {
        "content": "<p>also <code>2^(1 - k.choose(2)) * n.choose(k) &lt; 1</code> probably doesn't mean what you think it means</p>",
        "id": 195321476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587884969
    },
    {
        "content": "<p>Maybe lift everything to Q</p>",
        "id": 195321479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587884986
    },
    {
        "content": "<p>right, you can coerce <code>n.choose (k)</code> to <code>\\Q</code></p>",
        "id": 195321523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885024
    },
    {
        "content": "<p>without having to define <code>rat.choose</code></p>",
        "id": 195321528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885035
    },
    {
        "content": "<p>Thanks for your answers. What do you mean by coerce?</p>",
        "id": 195321848,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587885643
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">num_2_cols_Kn_with_monochromatic_Kk_lt_num_2_cols_Kn</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 195321954,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885878
    },
    {
        "content": "<p>remember to import <code>data.rat.basic</code></p>",
        "id": 195321956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885891
    },
    {
        "content": "<p>oh and you need to coerce the exponents to <code>\\Z</code></p>",
        "id": 195321960,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885910
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">num_2_cols_Kn_with_monochromatic_Kk_lt_num_2_cols_Kn</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 195321966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885936
    },
    {
        "content": "<p>coercion is basically an injection, in this case the injection <code>\\N -&gt; \\Z</code></p>",
        "id": 195322008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587885982
    },
    {
        "content": "<p>Oh wow I was hoping it was possible to do something just like this. Thanks a bunch : D</p>",
        "id": 195322147,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587886218
    },
    {
        "content": "<p>What would be a good method to define \"a monoidal category which is also a groupoid\"?</p>",
        "id": 195341440,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1587918201
    },
    {
        "content": "<p>how to show this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">=</span><span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span><span class=\"bp\">=</span><span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195342397,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1587919640
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"err\">∅</span><span class=\"o\">}</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_singleton</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">singleton_eq_singleton_iff</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 195342773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587920212
    },
    {
        "content": "<p>thank you!!</p>",
        "id": 195342853,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1587920347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195341440\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195341440\">said</a>:</p>\n<blockquote>\n<p>What would be a good method to define \"a monoidal category which is also a groupoid\"?</p>\n</blockquote>\n<p><code>variables {C : Type u} [𝒞 : groupoid.{v} C] [monoidal_category C]</code> should do it.</p>",
        "id": 195343650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587921386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195343650\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195343650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195341440\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195341440\">said</a>:</p>\n<blockquote>\n<p>What would be a good method to define \"a monoidal category which is also a groupoid\"?</p>\n</blockquote>\n<p><code>variables {C : Type u} [𝒞 : groupoid.{v} C] [monoidal_category C]</code> should do it.</p>\n</blockquote>\n<p>Thanks a lot!</p>",
        "id": 195345704,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1587924369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I added the coercions:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">num_2_cols_Kn_with_mono_Kk_lt_num_2_cols_Kn</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n    <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>But I'm still getting this issue:</p>\n<p>failed to synthesize type class instance for<br>\nn k : ℕ<br>\n⊢ has_pow ℚ ℤ</p>",
        "id": 195351866,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587933837
    },
    {
        "content": "<p>you need to <code>import algebra.field_power</code></p>",
        "id": 195351910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587933873
    },
    {
        "content": "<p>Aha! I was wondering why exponentiation didn't seem to be defined for <code>int</code>, thanks</p>",
        "id": 195351926,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587933930
    },
    {
        "content": "<p>Why do I still get a similar issue for this?<br>\n<code>example (a b : ℤ) : 2^(a - b) = 2^a / 2^b := </code></p>",
        "id": 195352127,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587934253
    },
    {
        "content": "<p>failed to synthesize type class instance for<br>\na b : ℤ<br>\n⊢ has_pow ℕ ℤ</p>",
        "id": 195352139,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587934317
    },
    {
        "content": "<p>Is there another import I'm missing?</p>",
        "id": 195352178,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587934327
    },
    {
        "content": "<p>Lean thinks the <code>2</code>s are <code>nat</code>s. You might just have to include the coercions explicitly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p><strong>edit</strong>: sorry, you'll want <code>ℚ</code>, not <code>ℤ</code> for the <code>2</code>s.</p>",
        "id": 195352188,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587934358
    },
    {
        "content": "<p>Thanks! How come I didn't get this issue earlier with the exponents involving binomial coefficients?</p>",
        "id": 195352239,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587934443
    },
    {
        "content": "<p>I guess it's because Lean was able to correctly infer the <code>rat</code>s from the LHS: <code>(2^(n.choose(2) - k.choose(2) : ℤ) * 2 * n.choose(k) : ℚ)</code></p>",
        "id": 195352260,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587934499
    },
    {
        "content": "<p>neat, thank you</p>",
        "id": 195352323,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587934637
    },
    {
        "content": "<p>I'm surprised <code>example (a b : ℤ) : (2 : ℚ)^(a - b) = (2 : ℚ)^a / (2 : ℚ)^b := by library_search</code> turned up nothing. Is there really no theorem for this?</p>",
        "id": 195352501,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587934911
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">fpow_sub</span>\n<span class=\"c\">/-</span><span class=\"cm\"> fpow_sub :</span>\n<span class=\"cm\">  ∀ {G₀ : Type u_1} [_inst_1 : group_with_zero G₀] {a : G₀},</span>\n<span class=\"cm\">    a ≠ 0 → ∀ (z1 z2 : ℤ), a ^ (z1 - z2) = a ^ z1 / a ^ z2</span>\n<span class=\"cm\"> -/</span>\n</pre></div>",
        "id": 195352573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587935031
    },
    {
        "content": "<p>How come <code>by library_search</code>didn't turn this up? How did you find this?</p>",
        "id": 195352632,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587935113
    },
    {
        "content": "<p>Also what does the ampersand do? Sorry I'm extremely new to this</p>",
        "id": 195352691,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587935194
    },
    {
        "content": "<p>the <code>@</code> shows all the parameters instead of just the explicit parameters (i.e. the ones you need to specify)</p>",
        "id": 195352705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587935238
    },
    {
        "content": "<p>I guess it doesn't show up in <del><code>by library_suggest</code></del> <code>by library_search</code> because you need to convince Lean that <code>2 ≠ 0</code>. It's the 3rd thing that comes up in <code>by suggest</code>.</p>",
        "id": 195352716,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587935275
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">fpow_sub</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- this also works:</span>\n<span class=\"c1\">-- fpow_sub two_ne_zero a b</span>\n</pre></div>",
        "id": 195352757,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587935291
    },
    {
        "content": "<p>What are the differences between <code>by library_search</code>, <code>by library_suggest </code> and <code>by suggest</code>? I was unaware that the last two existed until now.</p>",
        "id": 195352909,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587935542
    },
    {
        "content": "<p>Whoops, <code>library_suggest</code> doesn't exist. That was a typo on my part. You can read more about them in the tactic docs: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest\">https://leanprover-community.github.io/mathlib_docs/tactics.html#suggest</a></p>",
        "id": 195352917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587935586
    },
    {
        "content": "<p>thank you!</p>",
        "id": 195352920,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587935605
    },
    {
        "content": "<p><code>library_search</code> finds the exact lemma which will solve your goal. It doesn't know that 2 isn't 0 so it won't be able to solve it. I suspect <code>0^{a-b}=0^a/0^b</code> is false in general. <code>suggest</code>just looks for lemmas that look like they might make progress, and doesn't claim to solve the goal in general (indeed you'd be left with the goal 2 \\ne 0 if you applied fpow_sub directly). </p>\n<p>There is another method though, and although it is a lot harder to master, it is in some sense the most powerful. The method is to learn the conventions used in naming lemmas in the library, and then start to guess what the name of the lemma you are looking for is. For example <code>pow</code> means raising something to a natural power, and <code>fpow</code> means raising something to an integer power. <code>add</code> is addition, <code>sub</code> is subtraction, not to be confused with <code>neg</code> which is unary negation. <code>div</code> is division, not to be confused with <code>dvd</code>, which means \"divides\" (like 3 divides 6), and so on and so on. After a while you can start predicting theorem names, and then typing a guess and hitting ctrl-space might bring up a list of possibilities, which (possibly after pressing ctrl-space again) you can start to scroll through until you hit the one you want.</p>",
        "id": 195353123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587935992
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\">This mathlib doc</a> might help re: the naming conventions.</p>",
        "id": 195353206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587936106
    },
    {
        "content": "<p>Looks for some hints for this one.<br>\n<code>example : (∃ x, p x) ↔ ¬ (∀ x, ¬ p x) := sorry</code><br>\nMy guess is its a longer proof, so just looking for some general guidance. I find proofs involving <code>\\not</code> challenging for some reason.<br>\nHere's my starting point:</p>\n<div class=\"codehilite\"><pre><span></span>        <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n            <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n            <span class=\"o\">(</span>\n                <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n                <span class=\"k\">match</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p1</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n                    <span class=\"n\">by_contradiction</span>\n                    <span class=\"o\">(</span>\n                        <span class=\"bp\">_</span>\n                    <span class=\"o\">)</span>\n                <span class=\"kn\">end</span>\n            <span class=\"o\">)</span>\n            <span class=\"o\">(</span>\n                <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n                <span class=\"bp\">_</span>\n            <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Which gives me a first goal of <br>\n<code>⊢ (¬¬∀ (x : α), ¬p x) → false</code><br>\nand second goal of <br>\n<code>⊢  ∃ (x : α), p x</code></p>",
        "id": 195356815,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587941611
    },
    {
        "content": "<p>hint: the first direction does not require classical reasoning</p>",
        "id": 195357852,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587943109
    },
    {
        "content": "<p>Does <code>finish</code> or <code>tauto!</code> do it?</p>",
        "id": 195358403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587943729
    },
    {
        "content": "<p>You mean like <code>by finish</code>  ? Doesn't seem to work</p>",
        "id": 195358802,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587944264
    },
    {
        "content": "<p><code>not P</code> is by definition <code>P -&gt; false</code>, if this helps</p>",
        "id": 195358858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587944356
    },
    {
        "content": "<p>But these super-verbose term mode proofs are hard to steer</p>",
        "id": 195358866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587944399
    },
    {
        "content": "<p>What does \"maximum class-instance resolution depth has been reached\" mean?</p>",
        "id": 195360975,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587947487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon Brown</span> <code>by finish</code> (or even <code>by simp</code>) works after you <code>import tactic</code>. Here are some hints towards an \"honest\" (or \"tedious\" depending on your tastes) term proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n        <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h1</span> <span class=\"bp\">_</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n        <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n</pre></div>",
        "id": 195361219,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587947761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294527\">@Sam Raleigh</span> It can mean different things, depending on the state of your code. Sometimes it means you have a bad instance. Sometimes it means that there's some other issue with your code. Can you post a MWE (minimum working example)?</p>",
        "id": 195361268,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587947832
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>",
        "id": 195361535,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587948360
    },
    {
        "content": "<p>Actually I think I figured it out, thank you Bryan</p>",
        "id": 195361866,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587949040
    },
    {
        "content": "<p>I am curious as to what you meant by \"bad instance\" though</p>",
        "id": 195361875,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587949073
    },
    {
        "content": "<p>If you're not careful about the instances you declare, Lean's type class search can get into an infinite loop. I can't come up with an example off the top of my head, but searching Zulip for \"type class loop\" will pull up a bunch of conversations where these sorts of things get debugged. (If by chance you haven't learned about Lean's type classes yet, <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#type-classes-and-instances\">here's the relevant section of TPiL</a>).</p>",
        "id": 195362061,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587949434
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">strict_ineq</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fpow_sub</span> <span class=\"n\">two_ne_zero</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"c1\">--other stuff</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I don't understand how I am getting the following type mismatch error:</p>\n<p>type mismatch at application<br>\n  fpow_sub two_ne_zero<br>\nterm<br>\n  two_ne_zero<br>\nhas type<br>\n  2 ≠ 0<br>\nbut is expected to have type<br>\n  ?m_2 ≠ 0</p>\n<p>How are <code>2 \\neq 0</code> and <code>?m_2 ≠ 0</code> a mismatch?</p>",
        "id": 195362228,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1587949768
    },
    {
        "content": "<p>Hmm, looks like there's something funky going on with the zero instances:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">strict_ineq</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fpow_sub</span> <span class=\"o\">(</span><span class=\"k\">begin</span>\n      <span class=\"n\">convert</span> <span class=\"n\">two_ne_zero</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Tactic State:</span>\n<span class=\"cm\">4 goals</span>\n<span class=\"cm\">a b c : ℤ,</span>\n<span class=\"cm\">h : 2 ^ (1 - b) * ↑c &lt; 1</span>\n<span class=\"cm\">⊢ no_zero_divisors.to_has_zero ?m_1 = mul_zero_class.to_has_zero ?m_1</span>\n\n<span class=\"cm\">a b c : ℤ,</span>\n<span class=\"cm\">h : 2 ^ (1 - b) * ↑c &lt; 1</span>\n<span class=\"cm\">⊢ group_with_zero ?m_1</span>\n\n<span class=\"cm\">a b c : ℤ,</span>\n<span class=\"cm\">h : 2 ^ (1 - b) * ↑c &lt; 1</span>\n<span class=\"cm\">⊢ Type ?</span>\n\n<span class=\"cm\">a b c : ℤ,</span>\n<span class=\"cm\">h : 2 ^ (1 - b) * ↑c &lt; 1</span>\n<span class=\"cm\">⊢ linear_ordered_semiring ?m_1</span>\n\n<span class=\"cm\">-/</span>\n    <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n    <span class=\"c1\">--other stuff</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195362743,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587950340
    },
    {
        "content": "<p>This works, but this issue deserves more attention from someone who understands what's going on above:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">strict_ineq</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fpow_sub</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- other stuff</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195363537,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587951267
    },
    {
        "content": "<p><code>rw @fpow_sub ℚ _ _ two_ne_zero a b</code> also works. Think about what the elaborator has to do here. The error happens at <code>fpow_sub two_ne_zero</code>, where</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">fpow_sub</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">G₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group_with_zero</span> <span class=\"n\">G₀</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G₀</span><span class=\"o\">},</span>\n    <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">-</span> <span class=\"n\">z2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">z1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">z2</span>\n<span class=\"n\">two_ne_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>Since the term <code>fpow_sub two_ne_zero a b</code> has no expected type (because it is in a <code>rw</code>), lean has to just elaborate it to find out what type it has. The <code>a</code> and <code>b</code> are no help to find the target type since they are always of type <code>int</code> in the lemma, so we just have a general variable <code>α</code>, which is apparently a <code>linear_ordered_semiring</code> and also a <code>group_with_zero</code> in order to make the applications make sense. But wait: we have an application here of one theorem to the other, and so <code>2 ≠ 0</code> in one theorem needs to match <code>a ≠ 0</code> in the other, where the <code>0</code>'s are being provided by <em>different</em> typeclasses (recall that at this point we know only that <code>α</code> has two unrelated typeclasses, <code>linear_ordered_semiring</code> and <code>group_with_zero</code>, on it). At this point lean fails, because asking it to solve a commutative diagram in typeclass inference is too much. (It needs a type which has both typeclasses, such that the zero projections out of them are defeq.)</p>",
        "id": 195364149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587952289
    },
    {
        "content": "<p>Thanks, that makes sense! It's surprising to me that <code>rw</code> can't find <code>ℚ</code> from the goal somehow.</p>",
        "id": 195364436,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587952686
    },
    {
        "content": "<p>It first elaborates the term, then matches the target type against the subterms</p>",
        "id": 195364447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587952723
    },
    {
        "content": "<p>Otherwise it would have to re-elaborate the term many times</p>",
        "id": 195364450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587952738
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 195372626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587963765
    },
    {
        "content": "<p>to write term mode proofs you just need to use a lot of underscores</p>",
        "id": 195372633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587963782
    },
    {
        "content": "<p>and think backwards from the goal</p>",
        "id": 195373873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587965220
    },
    {
        "content": "<p>I'm not familiar with the $ operator, and I don't see it used in TPIL</p>",
        "id": 195379385,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587971226
    },
    {
        "content": "<p>it just means open parenthesis</p>",
        "id": 195379538,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587971344
    },
    {
        "content": "<p>so it's the same as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">he</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">))</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 195379559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587971369
    },
    {
        "content": "<p>ah it just saves a bunch of parentheses I see</p>",
        "id": 195379938,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1587971640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195242508\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195242508\">said</a>:</p>\n<blockquote>\n<p>@AMM I think <a href=\"https://artagnon.com/articles/leancoq\" title=\"https://artagnon.com/articles/leancoq\">https://artagnon.com/articles/leancoq</a> does a good job of comparing Lean and Coq. In particular, I learnt from this article that Lean breaks \"good type theoretic properties like strong normalization, subject reduction, and canonicity\", and I have heard from Coq people that this is a big deal for some, but as a mathematician this breakage has never bothered me in the slightest. Another big difference is that \"generic mathematicians\" use Lean (people who do not specialise in type theory or higher categories or whatever -- they are just number theorists or analysts or geometers or topologists) -- and for me this is another of the main attractions.</p>\n</blockquote>\n<p>Thank you very much!! This is really helpful. I also found your Newsletter of LMS article really useful when thinking about what the future looks like for interactive theorem proving!!</p>",
        "id": 195401056,
        "sender_full_name": "AMM",
        "timestamp": 1587985224
    },
    {
        "content": "<p>I have a function defined like this: <code>(X Y : set ℝ) (f : X → Y)</code> and would like to use <code>image_subset_range</code> to get <code>f(X) ⊆ Y</code>but not sure how to handle the set type casts that are involved. Can someone please help?</p>",
        "id": 195431287,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588000274
    },
    {
        "content": "<p>don't use partial functions</p>",
        "id": 195431887,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588000520
    },
    {
        "content": "<p>If <code>f : X -&gt; Y</code> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>, will be written in Lean as <code>set.range f</code>. This is because when you write <code>f : X -&gt; Y</code>, then <code>X</code> is being treated as a type rather than a set.</p>",
        "id": 195432059,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588000581
    },
    {
        "content": "<p>There's a coercion that turns sets into types</p>",
        "id": 195432102,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588000597
    },
    {
        "content": "<p><code>set.range f</code> has type <code>set Y</code>, so it doesn't actually make sense in Lean straight away to say <code>set.range f \\subseteq Y</code> since they have different types.</p>",
        "id": 195432231,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588000655
    },
    {
        "content": "<p>So if I have my function like this I can't get that result? Because I saw that I could use <code>f : \\real \\to \\real</code> instead.</p>",
        "id": 195432265,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588000672
    },
    {
        "content": "<p>It might be more sensible to use <code>f : real -&gt; real</code></p>",
        "id": 195432357,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588000693
    },
    {
        "content": "<p>And then I guess you'll need the assumption that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>⊆</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f(X) \\subseteq Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span></p>",
        "id": 195432451,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588000730
    },
    {
        "content": "<p>OK, thanks! Unfortunately that will make the result I'm eventually after quite a bit more difficult.</p>",
        "id": 195432919,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588000934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259857\">@Dan Stanescu</span> do you have more context?</p>",
        "id": 195432943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588000947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"259857\">Dan Stanescu</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195432919\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195432919\">said</a>:</p>\n<blockquote>\n<p>OK, thanks! Unfortunately that will make the result I'm eventually after quite a bit more difficult.</p>\n</blockquote>\n<p>This is a very natural belief, but almost surely wrong.</p>",
        "id": 195433379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588001046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  The larger context is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">countable_inj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">countable</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">countable</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195433706,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588001217
    },
    {
        "content": "<p>it has nothing to do with R so might as well let X and Y be arbitrary types</p>",
        "id": 195433748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588001242
    },
    {
        "content": "<p>I agree. Never mind that.</p>",
        "id": 195433789,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588001263
    },
    {
        "content": "<p>also <code>countable</code> isn't defined</p>",
        "id": 195433965,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588001339
    },
    {
        "content": "<p>I get it with my imports.</p>",
        "id": 195434004,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588001362
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/countable.html\" title=\"https://leanprover-community.github.io/mathlib_docs/data/set/countable.html\">https://leanprover-community.github.io/mathlib_docs/data/set/countable.html</a></p>",
        "id": 195434027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588001380
    },
    {
        "content": "<p>I never understood <code>set.countable</code>, <code>set.finite</code>, <code>set.infinite</code> etc. Shouldn't all of these things be about types?</p>",
        "id": 195434244,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588001473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">countable_inj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">countable</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">countable</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">countable_iff_exists_injective</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hY</span> <span class=\"k\">in</span>\n<span class=\"n\">countable_iff_exists_injective</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">injective_comp</span> <span class=\"n\">hg</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 195434271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588001491
    },
    {
        "content": "<p>We need both, and the set version covers the type use through <code>univ</code>. But maybe we need more API around that.</p>",
        "id": 195434306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588001508
    },
    {
        "content": "<p>But the type version covers sets by coercion.</p>",
        "id": 195434434,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588001555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195434271\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195434271\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">countable_inj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">countable</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">countable</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">countable_iff_exists_injective</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hY</span> <span class=\"k\">in</span>\n<span class=\"n\">countable_iff_exists_injective</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">injective_comp</span> <span class=\"n\">hg</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n</blockquote>\n<p>Thanks Kenny!  I think this will actually do.</p>",
        "id": 195434502,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1588001591
    },
    {
        "content": "<p>Coercions can be nasty, so basing everything on them is dangerous</p>",
        "id": 195434508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588001594
    },
    {
        "content": "<p>Is there a way to have implicit arguments for \\Sigma with the \\&lt; and \\&gt; syntax?</p>",
        "id": 195453275,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588010166
    },
    {
        "content": "<p>Just use <code>_</code>?</p>",
        "id": 195453368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588010215
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">num_mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Getting the following error:<br>\n\"<br>\ntype mismatch at application<br>\n  2 ^ (choose n 2 - choose k 2) * ⇑(choose n k) ?m_1<br>\nterm<br>\n  ⇑(choose n k) ?m_1<br>\nhas type<br>\n  ℝ<br>\nbut is expected to have type<br>\n  ℚ<br>\n\"</p>\n<p>Why is <code>choose n k</code> being coerced to <code>\\R</code>? How can I fix this?</p>",
        "id": 195521133,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588052567
    },
    {
        "content": "<p>What's even more bizarre to me is that if I remove the coercion from  <code> (card (mono_sub_colorings n k) : ℚ)</code>, then I get <code>n.choose(k)</code> is of type <code>\\Q</code>.</p>",
        "id": 195521282,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588052770
    },
    {
        "content": "<p><code>⇑(choose n k) ?m_1</code> this looks like <code>choose</code> is getting more arguments than it should</p>",
        "id": 195522385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588054373
    },
    {
        "content": "<p>You are missing a punctuation between the <code>n.choose(k)</code> and <code>begin</code> on the next line</p>",
        "id": 195522408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588054405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">num_mono_sub_colorings</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195522419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588054418
    },
    {
        "content": "<p>It is a bit surprising that <code>nat</code> has a <code>has_coe_to_fun</code> involving <code>real</code> though</p>",
        "id": 195522480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588054486
    },
    {
        "content": "<p>what are your imports?</p>",
        "id": 195522494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588054508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195352716\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195352716\">said</a>:</p>\n<blockquote>\n<p>I guess it doesn't show up in <del><code>by library_suggest</code></del> <code>by library_search</code> because you need to convince Lean that <code>2 ≠ 0</code>. It's the 3rd thing that comes up in <code>by suggest</code>.</p>\n</blockquote>\n<p>Thanks to <span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span>'s recent PR improving <code>library_search</code>, you can now do things like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"o\">{</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]}</span>\n</code></pre></div>\n\n\n<p>which works, reporting <code>fpow_sub (of_as_true trivial) a b</code>.</p>",
        "id": 195528155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588059437
    },
    {
        "content": "<p>Another variant of <code>library_search</code> now available is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"o\">[</span><span class=\"n\">two_ne_zero</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 195528558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588059702
    },
    {
        "content": "<p>which finds <code>fpow_sub two_ne_zero a b</code>.</p>",
        "id": 195528623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588059725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209436\">@Lucas Allen</span> Thank you very very much!</p>",
        "id": 195530612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588061151
    },
    {
        "content": "<p>does <code>by library_search {discharger := `[sorry]}</code> work as expected?</p>",
        "id": 195532234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062220
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"o\">{</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">sorry</span><span class=\"o\">]}</span>\n</code></pre></div>\n\n\n<p>should hopefully return <code>exact sorry</code>... I guess</p>",
        "id": 195532352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062289
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\"><pre><span></span><code>Try this: exact sorry\n</code></pre></div>",
        "id": 195532396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062318
    },
    {
        "content": "<p>no, the discharger should only be called on the subgoals of the theorem that was found</p>",
        "id": 195532401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062322
    },
    {
        "content": "<p>So you want to find <code>id sorry</code>?</p>",
        "id": 195532460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062352
    },
    {
        "content": "<p>Or <code>absurd true sorry</code>?</p>",
        "id": 195532510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062367
    },
    {
        "content": "<p>I'm worried that this is what would happen</p>",
        "id": 195532517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062371
    },
    {
        "content": "<p>Why are you worried?</p>",
        "id": 195532540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062403
    },
    {
        "content": "<p>because that's a useless answer</p>",
        "id": 195532553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062413
    },
    {
        "content": "<p>It sounds like you are looking for <code>suggest</code>, which works reasonably well.</p>",
        "id": 195532574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062428
    },
    {
        "content": "<p>what I <em>want</em> is <code>fpow_sub sorry a b</code>.</p>",
        "id": 195532575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062429
    },
    {
        "content": "<p>That is probably what <code>suggest</code> would suggest</p>",
        "id": 195532586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588062440
    },
    {
        "content": "<p><code>fpow_sub _ a b</code> is the fifth of so result for me from suggest.</p>",
        "id": 195533488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063034
    },
    {
        "content": "<p>You're not going to do better than that with <code>discharger := `[sorry]</code>.</p>",
        "id": 195533516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063063
    },
    {
        "content": "<p>(i.e. in order to get <code>fpow_sub sorry a b</code> back from <code>library_search</code>, it's going to have to be the first result in <code>suggest</code>.)</p>",
        "id": 195533585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063094
    },
    {
        "content": "<p>Actually, I think there must be a bug, because <code>fpow_sub _ a b</code> should come before everything that <code>suggest</code> puts ahead of it, on account of using more hypotheses.</p>",
        "id": 195533691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063176
    },
    {
        "content": "<p>I'll look into it.</p>",
        "id": 195533703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063185
    },
    {
        "content": "<p>cf. the corresponding Coq tactic:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">Require</span> <span class=\"kn\">Import</span> <span class=\"n\">Arith</span><span class=\"o\">.</span>\n\n<span class=\"kn\">Search</span> <span class=\"o\">(_</span> <span class=\"o\">/</span> <span class=\"o\">_</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">).</span>\n\n<span class=\"c\">(*</span>\n<span class=\"c\">Nat.div_small: forall a b : nat, a &lt; b -&gt; a / b = 0</span>\n<span class=\"c\">Nat.div_0_l: forall a : nat, a &lt;&gt; 0 -&gt; 0 / a = 0</span>\n<span class=\"c\">Nat.div_1_l: forall a : nat, 1 &lt; a -&gt; 1 / a = 0</span>\n<span class=\"c\">Nat.b2n_div2: forall a0 : bool, Nat.b2n a0 / 2 = 0</span>\n<span class=\"c\">Nat.div_small_iff: forall a b : nat, b &lt;&gt; 0 -&gt; a / b = 0 &lt;-&gt; a &lt; b</span>\n<span class=\"c\">*)</span>\n</code></pre></div>",
        "id": 195533935,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063345
    },
    {
        "content": "<p>I think <code>suggest</code> should also score matches based on how \"deep\" the match is, i.e. the number of constructor-equal-constructor unification subproblems. I'm not sure how best to phrase this in terms of the available information</p>",
        "id": 195533977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588063380
    },
    {
        "content": "<p>Oh, no, the problem is that I count \"hypotheses used\" just by checking if they appear in the partial result, and appearances in implicit arguments count too, so <code>eq.symm _</code> gets counted as using <code>a</code> and <code>b</code> just as much as <code>fpow_sub _ a b</code>.</p>",
        "id": 195533984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063386
    },
    {
        "content": "<p>Which is dumb...</p>",
        "id": 195533992,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063391
    },
    {
        "content": "<p>there are some easy improvements to make, at least</p>",
        "id": 195534008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588063403
    },
    {
        "content": "<p>It's possible that simply weighting larger theorems as better (provided that they still have few remaining hypotheses) will do the trick</p>",
        "id": 195534088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588063451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294527\">Sam Raleigh</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195521133\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195521133\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>There are so many parentheses here that it's hard to notice that the parentheses are not even balanced. You can simply write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">mono_sub_colorings</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span>\n</code></pre></div>\n\n\n<p>All I did was remove parentheses and it's already much easier to read, but now you could notice that some of the <code>: ℚ</code>s are redundant, as well.</p>",
        "id": 195543685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588069450
    },
    {
        "content": "<p><code>(2 : ℚ)</code> is redundant</p>",
        "id": 195544447,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588069915
    },
    {
        "content": "<p>Is there any reason why by_library search would not work anymore? About halfway through my proof, Lean just doesn't seem to recognize the command anymore.</p>",
        "id": 195556525,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588077380
    },
    {
        "content": "<p>What is the first error in your file?</p>",
        "id": 195556991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588077622
    },
    {
        "content": "<p>Are you actually writing <code>by_library search</code>, or <code>by library_search</code>?</p>",
        "id": 195557108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588077678
    },
    {
        "content": "<p>It's at the very end, which is just \"tactic failed, there are unsolved goals\"</p>",
        "id": 195557231,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588077735
    },
    {
        "content": "<p>And yeah, I misspelled, I was writing the latter <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 195557267,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588077757
    },
    {
        "content": "<p>you should be writing the latter</p>",
        "id": 195557284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588077770
    },
    {
        "content": "<p>what error do you get when you write it?</p>",
        "id": 195557368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588077812
    },
    {
        "content": "<p>Unknown identifier \"library_search\"</p>",
        "id": 195557680,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588077962
    },
    {
        "content": "<p>Are you in tactic mode? Can you just post code instead of making us play this guessing game?</p>",
        "id": 195557773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588077996
    },
    {
        "content": "<p>Post fully working code so we can all see the error</p>",
        "id": 195557799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078008
    },
    {
        "content": "<p>Okay, should I post the whole thing or a screenshot? How should I do it?</p>",
        "id": 195558037,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">paste</span> <span class=\"n\">code</span> <span class=\"n\">here</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 195558086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">archimedean</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">calculus</span><span class=\"bp\">.</span><span class=\"n\">deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">cau_seq</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_cau_abs_cos</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_cau_seq</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">abs</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span>\n      <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_cau_abs_sin</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_cau_seq</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">abs</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span>\n      <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">let ⟨n, hn⟩ := exists_nat_gt (abs z) in</span>\n<span class=\"cm\">have hn0 : (0 : ℝ) &lt; n, from lt_of_le_of_lt (abs_nonneg _) hn,</span>\n<span class=\"cm\">series_ratio_test n (complex.abs z / n)</span>\n<span class=\"cm\">(div_nonneg_of_nonneg_of_pos (complex.abs_nonneg _) hn0)</span>\n<span class=\"cm\">  (by rwa [div_lt_iff hn0, one_mul])</span>\n<span class=\"cm\">  (λ m hm,</span>\n<span class=\"cm\">    by rw [abs_abs, abs_abs, nat.fact_succ, pow_succ,</span>\n<span class=\"cm\">      mul_comm m.succ, nat.cast_mul, ← div_div_eq_div_mul, mul_div_assoc,</span>\n<span class=\"cm\">      mul_div_right_comm, abs_mul, abs_div, abs_cast_nat];</span>\n<span class=\"cm\">    exact mul_le_mul_of_nonneg_right</span>\n<span class=\"cm\">      (div_le_div_of_le_left (abs_nonneg _) hn0</span>\n<span class=\"cm\">        (nat.cast_le.2 (le_trans hm (nat.le_succ _)))) (abs_nonneg _))</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_cau_sin</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">is_cau_seq</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_cau_series_of_abv_cau</span> <span class=\"o\">(</span><span class=\"n\">is_cau_abs_sin</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_cau_cos</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">is_cau_seq</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_cau_series_of_abv_cau</span> <span class=\"o\">(</span><span class=\"n\">is_cau_abs_cos</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sin&#39;</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:=</span>\n <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n <span class=\"n\">is_cau_sin</span> <span class=\"n\">z</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">sin1</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">sin&#39;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cos&#39;</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs</span> <span class=\"o\">:=</span>\n <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)),</span>\n <span class=\"n\">is_cau_cos</span> <span class=\"n\">z</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">cos1</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">cos&#39;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">euler</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cos1</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">sin1</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">partials</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">exp&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n     <span class=\"o\">(</span><span class=\"n\">cos&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">sin&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">exp&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">cos&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">sin&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n        <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n0</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"c1\">-- case n0=0</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"c1\">-- induction on n0</span>\n            <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- takes out last term in cos</span>\n            <span class=\"k\">have</span> <span class=\"n\">lastSin</span> <span class=\"o\">:</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span>\n            <span class=\"bp\">=</span>\n            <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n0</span><span class=\"o\">))</span>\n            <span class=\"bp\">+</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span>\n            <span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"k\">have</span> <span class=\"n\">sinFactorial</span> <span class=\"o\">:</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))))</span>\n            <span class=\"bp\">=</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))),</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">sorry</span><span class=\"o\">,</span>\n              <span class=\"c1\">--lean should fucking know this!</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">rw</span> <span class=\"n\">sinFactorial</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">lastSin</span><span class=\"o\">,</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">twoFromExp</span><span class=\"o\">:</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n            <span class=\"bp\">=</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span><span class=\"bp\">+</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n            <span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span> <span class=\"bp\">_</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">),</span>\n            <span class=\"o\">},</span>\n            <span class=\"k\">have</span> <span class=\"n\">twoFromExpv1</span> <span class=\"o\">:</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n            <span class=\"bp\">=</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">x_1</span><span class=\"o\">)),</span>\n             <span class=\"o\">{</span>\n               <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">twoFromExp</span><span class=\"o\">,</span>\n             <span class=\"o\">},</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">twoNP1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span>\n            <span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">),</span>\n            <span class=\"o\">},</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">twoNP1v1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span>\n              <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">twoNP1</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n\n            <span class=\"c1\">--rw twoNP1v1,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">twoFromExpv1</span><span class=\"o\">,</span>\n\n            <span class=\"k\">have</span> <span class=\"n\">oneFromExp</span><span class=\"o\">:</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n            <span class=\"bp\">=</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n0</span><span class=\"o\">))</span>\n            <span class=\"bp\">+</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">x_1</span><span class=\"o\">))</span>\n            <span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n              <span class=\"k\">have</span> <span class=\"n\">stupid</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">),</span>\n              <span class=\"o\">{</span>\n                <span class=\"k\">have</span> <span class=\"n\">RRS</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">rw</span> <span class=\"n\">RRS</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">realSt</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                  <span class=\"n\">simp</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">rw</span> <span class=\"n\">realSt</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">2</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n              <span class=\"o\">},</span>\n              <span class=\"n\">rw</span> <span class=\"n\">stupid</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">sum_range_succ</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n0</span><span class=\"o\">),</span>\n            <span class=\"o\">},</span>\n            <span class=\"c1\">--rw oneFromExp,</span>\n            <span class=\"c1\">--rw hn,</span>\n            <span class=\"c1\">--simp,</span>\n\n            <span class=\"c1\">--  need (x*I)^(2 n0 )= x^(2n0) (-1)^n0 etc, commutativity</span>\n\n            <span class=\"n\">sorry</span><span class=\"o\">,</span>\n            <span class=\"c1\">--ring,</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">partialExp</span> <span class=\"o\">:</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">exp&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">I</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">partialExp</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- Now: need to take limits on both sides, they&#39;re same,</span>\n    <span class=\"c1\">-- but need to convince Lean that limit of exp&#39; (2n+1) is same as</span>\n    <span class=\"c1\">-- limit of exp&#39; (n) which is what exp is defined to be</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">complex</span>\n</code></pre></div>",
        "id": 195558148,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078193
    },
    {
        "content": "<p>I get an error on line 96 but it's not about library_search</p>",
        "id": 195558313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078277
    },
    {
        "content": "<p>How do I make the error <code>Unknown identifier \"library_search\"</code> appear on my screen?</p>",
        "id": 195558444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078337
    },
    {
        "content": "<p>Funny, I sent this code to my professor and he got a different error on a different line, which I didn't see on my computer</p>",
        "id": 195558602,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078419
    },
    {
        "content": "<p>:-)</p>",
        "id": 195558620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078428
    },
    {
        "content": "<p>I believe after line 88, Lean stops recognizing \"by library_search\"</p>",
        "id": 195558628,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078435
    },
    {
        "content": "<p>If people use different versions of Lean or mathlib they'll see different errors. Which version of Lean and mathlib are you using? [neither Lean nor mathlib are backwards compatible].</p>",
        "id": 195558689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078454
    },
    {
        "content": "<p>For lean, it's 0.15.8</p>",
        "id": 195558905,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078567
    },
    {
        "content": "<p>No, this is the VS code extension version.</p>",
        "id": 195558918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078581
    },
    {
        "content": "<p>??</p>",
        "id": 195558919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588078581
    },
    {
        "content": "<p>You can click on <code>terminal</code> in the bottom window and type <code>lean --version</code></p>",
        "id": 195558970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078613
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Gijf-Z924-TqAarfNUxl4q5z/terminal.png\" title=\"terminal.png\">terminal.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Gijf-Z924-TqAarfNUxl4q5z/terminal.png\" title=\"terminal.png\"><img src=\"/user_uploads/3121/Gijf-Z924-TqAarfNUxl4q5z/terminal.png\"></a></div>",
        "id": 195559026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078651
    },
    {
        "content": "<p>Presumably if we know the mathlib version, we can work out the Lean version.</p>",
        "id": 195559046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588078659
    },
    {
        "content": "<p>You can \"pull up\" on the blue bar at the bottom if you don't have this little window</p>",
        "id": 195559087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078681
    },
    {
        "content": "<p><code>#print lean.version</code> will also do it</p>",
        "id": 195559183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078718
    },
    {
        "content": "<p>Hm, #print lean.version just gives this</p>",
        "id": 195559709,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078912
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/OgPqz-dfjGwN7WYyhp7LN4Xv/Capture.PNG\" title=\"Capture.PNG\">Capture.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OgPqz-dfjGwN7WYyhp7LN4Xv/Capture.PNG\" title=\"Capture.PNG\"><img src=\"/user_uploads/3121/OgPqz-dfjGwN7WYyhp7LN4Xv/Capture.PNG\"></a></div>",
        "id": 195559716,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588078917
    },
    {
        "content": "<p>Seems like <code>3.7.2</code>, which isn't too old.</p>",
        "id": 195559882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588078968
    },
    {
        "content": "<p>Your code is taking a very long time to compile though. library_search might just be running out of memory.</p>",
        "id": 195559931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078988
    },
    {
        "content": "<p>Hang on, isn't</p>\n<div class=\"codehilite\"><pre><span></span><code>euler.lean:88:8: error\ninvalid expression, unexpected token\n</code></pre></div>\n\n\n<p>an error which occurs earlier than the end of your file, and not \"tactic failed, there are unsolved goals\"?</p>",
        "id": 195559982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079008
    },
    {
        "content": "<p>Right, that line compiles fine on my end, so I thought something was weird</p>",
        "id": 195560110,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079053
    },
    {
        "content": "<p>but you took the screenshot?</p>",
        "id": 195560161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588079080
    },
    {
        "content": "<p>I'm confused, aren't you showing screenshots of your own screen?</p>",
        "id": 195560167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079082
    },
    {
        "content": "<p>Yes, I am</p>",
        "id": 195560192,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079101
    },
    {
        "content": "<p>Oh sorry, I see what yo mean now</p>",
        "id": 195560235,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079124
    },
    {
        "content": "<p>She's written <code>#print</code> in the tactic proof</p>",
        "id": 195560260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079138
    },
    {
        "content": "<p>And how does Lean should know all those <code>sum</code> are <code>finset</code> sums? Did you <code>open finset</code> somewhere?</p>",
        "id": 195560281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079149
    },
    {
        "content": "<p>Right, #print lean.version seems to give a compile error</p>",
        "id": 195560282,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079149
    },
    {
        "content": "<p>this works, but causes an error as well.</p>",
        "id": 195560292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079152
    },
    {
        "content": "<p>Ohhh haha okay. I see.</p>",
        "id": 195560293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079152
    },
    {
        "content": "<p>Yeah, you can get rid of #print now.</p>",
        "id": 195560363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079170
    },
    {
        "content": "<p>Right -- in 3.9.0 the first problem is on line 96, with Lean not knowing about the sum</p>",
        "id": 195560425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079211
    },
    {
        "content": "<p><code>open finset</code> is on line 11 (if I counted correctly).</p>",
        "id": 195560624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what's the easiest way to get Lean 3.7.2 running with e.g. the last mathlib commit for 3.7.2?</p>",
        "id": 195560742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195522494\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195522494\">said</a>:</p>\n<blockquote>\n<p>what are your imports?</p>\n</blockquote>\n<p>Thanks! my imports are:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n</code></pre></div>",
        "id": 195560834,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588079402
    },
    {
        "content": "<p>I've made a new project, I can edit the toml to change 3.9.0 to 3.7.2 but now what?</p>",
        "id": 195560854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079406
    },
    {
        "content": "<p>Ah, if I go into terminal I get this</p>",
        "id": 195560913,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079441
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/YjSILAz0r_GhKrwq4TXcpRob/Capture.PNG\" title=\"Capture.PNG\">Capture.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/YjSILAz0r_GhKrwq4TXcpRob/Capture.PNG\" title=\"Capture.PNG\"><img src=\"/user_uploads/3121/YjSILAz0r_GhKrwq4TXcpRob/Capture.PNG\"></a></div>",
        "id": 195560922,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079446
    },
    {
        "content": "<p>Hmm, that doesn't mean too much</p>",
        "id": 195560967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588079471
    },
    {
        "content": "<p>I'm not sure who to trust</p>",
        "id": 195560981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079478
    },
    {
        "content": "<p>Right, so <code>lean --version</code> was actually not a useful question.</p>",
        "id": 195560993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079486
    },
    {
        "content": "<p>Because if you installed <code>elan</code> than the version of Lean depends on which directory you are in.</p>",
        "id": 195560994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588079486
    },
    {
        "content": "<p>the terminal or the #print output</p>",
        "id": 195560996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079487
    },
    {
        "content": "<p>All that matters is the mathlib version.</p>",
        "id": 195561007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079492
    },
    {
        "content": "<p>Kevin, this use case is not supported by our tooling, you'll need to do it by hand (going to _target/deps/mathlib/ checkout the lean-3.7.2  branch, then leanproject get-matghlib-cache)</p>",
        "id": 195561042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079512
    },
    {
        "content": "<p>(I mean assuming the user has elan installed and working correctly, but otherwise we'd have more obvious problems.)</p>",
        "id": 195561103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079523
    },
    {
        "content": "<p>Are you working in a project <span class=\"user-mention\" data-user-id=\"263862\">@Stephanie Zhou</span> ? Can you send the leanpkg.toml of the project?</p>",
        "id": 195561126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079534
    },
    {
        "content": "<p>She ran this terminal thing from a random folder so it doesn't mean anything relevant</p>",
        "id": 195561131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294527\">@Sam Raleigh</span> I'm still missing something. Do you have an MWE for the first example?</p>",
        "id": 195561194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588079562
    },
    {
        "content": "<p>But this whole discussion is a bit pointless. There is clearly a syntax error somewhere that confuses Lean. The problem will disappear simply by cleaning things up</p>",
        "id": 195561270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079602
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Bo6JjDD1Gi-8Xu864e1ebk68/leanpkg.toml\" title=\"leanpkg.toml\">leanpkg.toml</a></p>",
        "id": 195561307,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588079612
    },
    {
        "content": "<p>Mario, did you actually wanted to ping Sam here?</p>",
        "id": 195561334,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079628
    },
    {
        "content": "<p>If yes then we really need to get rid of this \"noob question(s)\" topic</p>",
        "id": 195561460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079677
    },
    {
        "content": "<p>The whole stream is for noob questions, and putting all of them in the same topic is losing the organization by topic</p>",
        "id": 195561542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079710
    },
    {
        "content": "<p>So Patrick I want to see if there's a syntax error with Stephanie's mathlib commit. If I change directory to _target/deps/mathlib and checkout the commit in her toml, I can just use <code> leanproject get-mathlib-cache</code>?</p>",
        "id": 195561566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079721
    },
    {
        "content": "<p>I think that this topic is better than (no topic) for people who choose not to use topics, but we need a protocol for branching out a conversation to a real topic</p>",
        "id": 195561639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588079751
    },
    {
        "content": "<p>yes</p>",
        "id": 195561642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588079752
    },
    {
        "content": "<p>Yes there are two questions going on at once here</p>",
        "id": 195561722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079770
    },
    {
        "content": "<p>I could shift my questions over to a different topic if that would help</p>",
        "id": 195561738,
        "sender_full_name": "Sam Raleigh",
        "timestamp": 1588079778
    },
    {
        "content": "<p>Now there are 3 <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195561742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588079780
    },
    {
        "content": "<p>OK so with Stephanie's mathlib commit, there are no errors before line 198</p>",
        "id": 195562177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588079958
    },
    {
        "content": "<p>Right, that's what I get too</p>",
        "id": 195562384,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588080036
    },
    {
        "content": "<p>but <code>library_search</code> works for me on line 194, it returns <code>failed</code> because the result you want isn't in the library</p>",
        "id": 195562491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080090
    },
    {
        "content": "<p>In general I would recommend not making such long proofs though, especially long proofs with the occasional sorry in. Lean gets slow in long proofs.</p>",
        "id": 195562703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080172
    },
    {
        "content": "<p>For example, your super-long proof on line 73 starts immediately with a <code>have partials: ...</code> . Why not make that its own lemma? Its proof is over 100 lines long which is still way too long.</p>",
        "id": 195563023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080292
    },
    {
        "content": "<p><code>--lean should fucking know this!</code> rofl</p>",
        "id": 195563085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080317
    },
    {
        "content": "<p>Our library still needs some work :-)</p>",
        "id": 195563122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080332
    },
    {
        "content": "<p>We've all been there.</p>",
        "id": 195563126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588080334
    },
    {
        "content": "<p>Hm okay I see, Lean just doesn't return anything for by library_search, so I guess it timed out</p>",
        "id": 195563166,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588080352
    },
    {
        "content": "<p>Oh, I might have default timeout set to higher</p>",
        "id": 195563251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080370
    },
    {
        "content": "<p>I am an optimist</p>",
        "id": 195563272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080379
    },
    {
        "content": "<p>Okay, how do I tinker with the default timeout setting?</p>",
        "id": 195563564,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588080488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))))</span>\n            <span class=\"bp\">=</span>\n            <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))),</span>\n</code></pre></div>\n\n\n<p>Lean shouldn't know this, it will follow from (1) commutativity of addition (2) nat.fact_succ (3) some statement about coercions commuting with equality. All three facts are known to Lean but it's too stupid to put everything together in the right order.</p>",
        "id": 195563611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080513
    },
    {
        "content": "<p>Or maybe it should know this -- but we haven't managed to put together a tactic which does everything obvious at once.</p>",
        "id": 195563662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080535
    },
    {
        "content": "<p>I agree that any maths student should know this!</p>",
        "id": 195563705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080549
    },
    {
        "content": "<p>You can probably use <code>congr'</code> here to extract things from this mess.</p>",
        "id": 195564091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588080706
    },
    {
        "content": "<p>It won't make <code>library_search</code> work :-) I went to File -&gt; Preferences -&gt; Settings and then searched for Lean Time Limit and changed the number to 900000. All that happens then is that library_search takes longer to fail. You should fix the cause of the problem though.</p>",
        "id": 195564636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588080916
    },
    {
        "content": "<p>You are writing like a mathematician, with all this forward reasoning.</p>",
        "id": 195564833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081006
    },
    {
        "content": "<p>You make hypothesis after hypothesis, proving them all with relatively simple rewrites or <code>sorry</code></p>",
        "id": 195564879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081035
    },
    {
        "content": "<p>and then you rewrite each hypothesis to change your goal a bit.</p>",
        "id": 195564906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081050
    },
    {
        "content": "<p>It might be easier to use <code>suffices</code> a lot; that way your local context won't become clogged up with all these intermediate lemmas.</p>",
        "id": 195565040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081107
    },
    {
        "content": "<p>or prove more lemmas!</p>",
        "id": 195565123,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588081159
    },
    {
        "content": "<p>Do you mean replace all the sorrys with suffices?</p>",
        "id": 195565448,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588081308
    },
    {
        "content": "<p>Stuff like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>              <span class=\"k\">have</span> <span class=\"n\">stupid</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">),</span>\n              <span class=\"o\">{</span>\n                <span class=\"k\">have</span> <span class=\"n\">RRS</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">rw</span> <span class=\"n\">RRS</span><span class=\"o\">,</span>\n\n                <span class=\"k\">have</span> <span class=\"n\">realSt</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n0</span><span class=\"o\">,</span>\n                <span class=\"o\">{</span>\n                  <span class=\"n\">simp</span><span class=\"o\">,</span>\n                <span class=\"o\">},</span>\n                <span class=\"n\">rw</span> <span class=\"n\">realSt</span><span class=\"o\">,</span>\n                <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">2</span> <span class=\"n\">n0</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n              <span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>just clogs up the local context. The <code>ring</code> tactic will solve all goals of this form, as long as you <code>rw nat.succ_eq_add_one</code> first to change the succs to +1's. But why make <code>stupid</code> a new hypothesis at all? The bigger you make your local context, the more difficult it is to see where you're going.</p>",
        "id": 195565548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081350
    },
    {
        "content": "<p>But isn't <code>sorry</code> just a placeholder?</p>",
        "id": 195565584,
        "sender_full_name": "Steffan",
        "timestamp": 1588081381
    },
    {
        "content": "<p>I mean that instead of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">proof</span> <span class=\"n\">of</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"n\">rw</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">proof</span> <span class=\"n\">of</span> <span class=\"n\">B</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>you could do other things (which won't leave A,B,C lying around as long hypotheses you'll never use again</p>",
        "id": 195565638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081419
    },
    {
        "content": "<p>Seeing all those <code>nat.succ</code> don't look good either. This function is really an implementation detail of natural numbers, it shouldn't show up outside of <code>data.nat.basic</code></p>",
        "id": 195565658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588081427
    },
    {
        "content": "<p>They are there because it's a complicated induction proof.</p>",
        "id": 195565737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081447
    },
    {
        "content": "<p>After the <code>induction</code> tactic in one of the <code>have</code> goals, the goal is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n      <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n0</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"o\">))))</span> <span class=\"bp\">*</span>\n        <span class=\"n\">I</span>\n</code></pre></div>",
        "id": 195565813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081493
    },
    {
        "content": "<p><code>open nat</code>, that's what I do</p>",
        "id": 195565848,
        "sender_full_name": "Steffan",
        "timestamp": 1588081513
    },
    {
        "content": "<p>that will get rid of the <code>nat</code> but not the <code>succ</code></p>",
        "id": 195565888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081533
    },
    {
        "content": "<p>I know<br>\nBut it looks cleaner to me.</p>",
        "id": 195565911,
        "sender_full_name": "Steffan",
        "timestamp": 1588081548
    },
    {
        "content": "<p>You could <code>rw nat.succ_eq_add_one</code> right now and you'll hopefully never see them again</p>",
        "id": 195565918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081553
    },
    {
        "content": "<p>and then all of this <code>lastSin</code> -- you only make that proof so you can rewrite it, and you prove it with a rewrite, so you could just rewrite in your goal directly and never make lastSin at all.</p>",
        "id": 195566456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081762
    },
    {
        "content": "<p>Just work directly on the goal instead of making all these new hypotheses</p>",
        "id": 195566502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588081783
    },
    {
        "content": "<blockquote>\n<p>The ring tactic will solve all goals of this form</p>\n</blockquote>\n<p>Turns out <code>omega</code> can solve that one too</p>",
        "id": 195566975,
        "sender_full_name": "Steffan",
        "timestamp": 1588082010
    },
    {
        "content": "<p>question - I have a proof <code>p : f x = f y</code> for an injective function <code>f</code>.  What tactics would I use to conclude that <code>x = y</code>?<br>\nfor reference, here's what I wrote for injectivity:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n</code></pre></div>",
        "id": 195578628,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588086779
    },
    {
        "content": "<p><code>injective f x y p</code> is a proof of <code>x = y</code>.</p>",
        "id": 195578980,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588086946
    },
    {
        "content": "<p>(In your tactic proof, you would write <code>exact injective f x y p</code>)</p>",
        "id": 195579093,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588086980
    },
    {
        "content": "<p><code>injective f</code> is a function which eats two variables <code>x₁</code> and <code>x₂</code> and a proof that <code>f x₁ = f x₂</code>, and spits out a proof that <code>x₁ = x₂</code></p>",
        "id": 195579263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087062
    },
    {
        "content": "<p>Can someone elucidate how the recursor is working for addition on the natural numbers? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- nat.rec : ?M_1 0 → (Π (n : ℕ), ?M_1 n → ?M_1 (nat.succ n)) → Π (n : ℕ), ?M_1 n</span>\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195579426,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588087127
    },
    {
        "content": "<p>ah makes sense.  so then I have <code>p2 : f x = f y -&gt; x = y</code> and <code>p : f x = f y</code>.  What would be the syntax to get the proposition that <code>x = y</code>?</p>",
        "id": 195579586,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">nat.rec_on : Π {C : ℕ → Sort u_1} (n : ℕ), C 0 → (Π (n : ℕ), C n → C (nat.succ n)) → C n</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 195579635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087204
    },
    {
        "content": "<p><code>p2</code> is also a function</p>",
        "id": 195579660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087215
    },
    {
        "content": "<p>What do you think <code>p2</code> takes as an input and what do you think it gives as an output?</p>",
        "id": 195579689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087233
    },
    {
        "content": "<p>proof that <code>f x = f y</code>?</p>",
        "id": 195579743,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087259
    },
    {
        "content": "<p>Right, that's the input</p>",
        "id": 195579770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087268
    },
    {
        "content": "<p>Now <code>f x = f y</code> is a type in Lean's type theory, and <code>p : f x = f y</code> is a term of that type. Do you know what that means?</p>",
        "id": 195579832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087310
    },
    {
        "content": "<p>Yes, at least I believe I do?</p>",
        "id": 195579950,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087360
    },
    {
        "content": "<p>So what is <code>p</code>?</p>",
        "id": 195579981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087369
    },
    {
        "content": "<p>in normal language?</p>",
        "id": 195580000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087375
    },
    {
        "content": "<p><code>p</code> is a proposition of type <code>f x = f y</code></p>",
        "id": 195580014,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087380
    },
    {
        "content": "<p>no, p is not a proposition.</p>",
        "id": 195580040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087389
    },
    {
        "content": "<p><code>f x = f y</code> is a proposition.</p>",
        "id": 195580060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087396
    },
    {
        "content": "<p><code>p : f x = f y</code> doesn't mean that <code>p</code> is equal to <code>f x = f y</code></p>",
        "id": 195580099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon Brown</span> Are you already looking at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#defining-the-natural-numbers\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#defining-the-natural-numbers\">the relevant section of Theorem Proving in Lean</a>? If so, can you say more about what you'd like elucidated?</p>",
        "id": 195580146,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588087440
    },
    {
        "content": "<p>Lean needs to figure out the motive <code>C</code>, as you can see from the <code>#check</code> output with <code>@</code> turned on.</p>",
        "id": 195580256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087475
    },
    {
        "content": "<p>Yes I am - I thought I understood everything up until that point in TPIL. Maybe I just need to stare at it longer</p>",
        "id": 195580261,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588087477
    },
    {
        "content": "<p>is it more that <code>p</code> is of type <code>f x = f y</code>?</p>",
        "id": 195580298,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087493
    },
    {
        "content": "<p>It knows that <code>m : C 0</code></p>",
        "id": 195580341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087512
    },
    {
        "content": "<p>so <code>C 0 = ℕ</code></p>",
        "id": 195580380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087531
    },
    {
        "content": "<p>and we know that <code>(λ n z, nat.succ z)</code> has type <code>(Π (n : ℕ), C n → C (nat.succ n))</code></p>",
        "id": 195580499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087574
    },
    {
        "content": "<p>oh, so now I have that <code>x  =  y</code>.  Here, <code>x</code> and <code>y</code> are dependent pairs <code>(x1, x2)</code> and <code>(y1, y2)</code>.  How would I conclude that <code>x1 = y1</code>?</p>",
        "id": 195581009,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087789
    },
    {
        "content": "<p>Well the problem is that you might not have names for x1 and y1 yet</p>",
        "id": 195581177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283719\">@Adeeb K</span> That's the exactly what using <code>:</code> in the statement <code>p : f x = f  y</code> means. So now the question is \"what is the data that inhabits the type <code>f x = f y</code>, which is a proposition\" - i.e. what \"is\" <code>p</code>? In lean we don't actually have to define that, but it makes sense to call it a \"proof\" (of that proposition).</p>",
        "id": 195581183,
        "sender_full_name": "Billy Price",
        "timestamp": 1588087834
    },
    {
        "content": "<p>so you might want to do <code>cases x with x1 x2</code> and <code>cases y with y1 y2</code> first</p>",
        "id": 195581264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087869
    },
    {
        "content": "<p>But it looks like the first argument going to nat.rec_on is <code>n</code> which corresponds to <code>Π {C : ℕ → Sort u_1}, C 0</code></p>",
        "id": 195581338,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588087904
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span> , that makes sense!<br>\nand <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'll try that out now</p>",
        "id": 195581348,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588087909
    },
    {
        "content": "<p>In fact, what you will want to do next depends on your exact goal</p>",
        "id": 195581355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588087911
    },
    {
        "content": "<p>and then the next step will depend on exactly what the type of x and y was. If they're subtypes then <code>rw subtype.ext</code> will do it, or perhaps <code>ext</code></p>",
        "id": 195581365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087914
    },
    {
        "content": "<p>And if you think about, deciding that the inhabitants of a proposition are proofs, gives you the correspondence between implication <code>A==&gt;B</code> and functions <code>A -&gt; B</code></p>",
        "id": 195581443,
        "sender_full_name": "Billy Price",
        "timestamp": 1588087932
    },
    {
        "content": "<p>The squiggly brackets means \"don't fill this in at all, Lean will fill it in for you\"</p>",
        "id": 195581471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087943
    },
    {
        "content": "<p>so <code>n</code> in <code>add</code> is the same as <code>n</code> in <code>nat.rec_on</code></p>",
        "id": 195581528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588087967
    },
    {
        "content": "<p>and because <code>nat.succ z</code> has type <code>ℕ</code>, Lean can figure out that <code>C (nat.succ _) = ℕ</code></p>",
        "id": 195581655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088026
    },
    {
        "content": "<p>so Lean can figure out from the information given that <code>C</code> is the constant function sending every natural to <code>ℕ</code></p>",
        "id": 195581747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088048
    },
    {
        "content": "<p>hmm ok, thanks - I need to chew on this a bit longer</p>",
        "id": 195581847,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588088091
    },
    {
        "content": "<p>Okay I used <code>cases</code> to introduce <code>x1</code> and <code>x2</code>, and I do have names for <code>y1</code> and <code>y2</code>.  How would I conclude that <code>x1 = y1</code>?</p>",
        "id": 195581889,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088108
    },
    {
        "content": "<p>which is a roundabout way of saying that the function we're defining by induction is a function from the naturals to the naturals</p>",
        "id": 195581914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195581889\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195581889\">said</a>:</p>\n<blockquote>\n<p>Okay I used <code>cases</code> to introduce <code>x1</code> and <code>x2</code>, and I do have names for <code>y1</code> and <code>y2</code>.  How would I conclude that <code>x1 = y1</code>?</p>\n</blockquote>\n<p>That depends on the type of <code>x</code></p>",
        "id": 195581935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088126
    },
    {
        "content": "<p>it's a pair <code>(k, k &lt; m)</code>.  So <code>x1</code> is a natural</p>",
        "id": 195582060,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088174
    },
    {
        "content": "<p>Probably <code>cc</code> will do it, if you want a black-box answer.</p>",
        "id": 195582063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088176
    },
    {
        "content": "<p>So now we have to figure out what this function is. We can think of the function as a sequence of naturals. The first one is <code>m</code>, and then the inductive step (or rather the recursive step) sends z to succ(z), so the sequence is <code>m, succ m, succ succ m, ...</code></p>",
        "id": 195582130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088214
    },
    {
        "content": "<p>(Also, if you used <code>cases</code> on <code>x</code> and <code>y</code>, then presumably they were variables before and it would likely have been easier to <code>subst</code> the equality instead.)</p>",
        "id": 195582136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088216
    },
    {
        "content": "<p>for context, I am trying to get x1 = y1 because I have a proof that x1 &lt; y1, which is a contradiction</p>",
        "id": 195582186,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088244
    },
    {
        "content": "<p>How can you have <code>x1</code>, though?</p>",
        "id": 195582203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088256
    },
    {
        "content": "<p>Do you mean you have a proof of <code>x.1 &lt; y.1</code>?</p>",
        "id": 195582226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088265
    },
    {
        "content": "<p>so <code>add n m</code> is the n'th term in that sequence</p>",
        "id": 195582298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088293
    },
    {
        "content": "<p>I have a proof that x.1 &lt; y.1</p>",
        "id": 195582480,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088378
    },
    {
        "content": "<p>well if x just disappeared then you might have to <code>dsimp</code> that proof now</p>",
        "id": 195582621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088421
    },
    {
        "content": "<p>Great, I am with you then. These might seem like terribly nitpicky questions but it's only because the correct tactics to use depend on details like this.</p>",
        "id": 195582637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195582060\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195582060\">said</a>:</p>\n<blockquote>\n<p>it's a pair <code>(k, k &lt; m)</code>.  So <code>x1</code> is a natural</p>\n</blockquote>\n<p>The question is not what the type of x1 is, it's what the type of x is.</p>",
        "id": 195582671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088443
    },
    {
        "content": "<p>Did you roll your own pair, or use <code>fin m</code>?</p>",
        "id": 195582706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088464
    },
    {
        "content": "<p>so about a week ago I started a topic about pigeonhole, since I was writing it in lean for a seminar project.  For the most part, it's done (the proof of pigeonhole itself is done), but I need to squash out some of the sorries from my helper functions</p>",
        "id": 195582725,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088470
    },
    {
        "content": "<p>I used my own pair</p>",
        "id": 195582744,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088481
    },
    {
        "content": "<p>did you prove the extensionality lemma for your pair?</p>",
        "id": 195582780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088501
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 195582791,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088506
    },
    {
        "content": "<p>not sure what that is exactly</p>",
        "id": 195582890,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088530
    },
    {
        "content": "<p>This isn't the direction for an extensionality lemma.</p>",
        "id": 195582914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088537
    },
    {
        "content": "<p>it's an ext_iff, right?</p>",
        "id": 195582955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088553
    },
    {
        "content": "<p>You say you have <code>p : x = y</code>, and you want <code>x.1 = y.1</code>. There are several ways to do this, such as rewriting using <code>p</code>, or using <code>congr_arg</code>.</p>",
        "id": 195583074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088605
    },
    {
        "content": "<p>so the outline of my plan is this:</p>",
        "id": 195583076,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088607
    },
    {
        "content": "<p>Another thing you could do is <code>subst p</code>, which will replace one of the variables (probably <code>y</code>) everywhere it occurs by <code>x</code>, leaving you with <code>x.1 &lt; x.1</code>.</p>",
        "id": 195583192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088651
    },
    {
        "content": "<p>eventually it came down to showing there is no injection from <code>[m + 2] = {0, 1, ..., m + 1}</code> to <code>[m + 1]</code>, where I had an inductive hypothesis that there is no injection from <code>[m + 1]</code> to <code>[m]</code>.</p>",
        "id": 195583279,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088693
    },
    {
        "content": "<p>Maybe it will replace <code>x</code>, I'm not sure.</p>",
        "id": 195583286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588088696
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195583357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088731
    },
    {
        "content": "<p>okay, I'll try those now!</p>",
        "id": 195583413,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088761
    },
    {
        "content": "<p>wait, I'm not sure how to use ext_iff in tactics<br>\nI tried <code>let p4 := ext_iff p3</code> where <code>p3 : x = y</code></p>",
        "id": 195583821,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088915
    },
    {
        "content": "<p><code>rw</code></p>",
        "id": 195583847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088927
    },
    {
        "content": "<p>I'm sorry, it feels like I'm asking the same question over and over again..</p>",
        "id": 195583859,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088932
    },
    {
        "content": "<p>I think we're there now though</p>",
        "id": 195583899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088947
    },
    {
        "content": "<p>rw failed I think?</p>",
        "id": 195583936,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088966
    },
    {
        "content": "<p><code>rw ext_iff at p3</code></p>",
        "id": 195583939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088967
    },
    {
        "content": "<p>I used <code>rw ext_iff</code></p>",
        "id": 195583978,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088976
    },
    {
        "content": "<p>that rewrites the goal</p>",
        "id": 195584001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588088985
    },
    {
        "content": "<p>ah right my bad</p>",
        "id": 195584015,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588088992
    },
    {
        "content": "<p>Alternatively <code>have p4 := (ext_iff m x y).1 p3</code> will probably work</p>",
        "id": 195584180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588089046
    },
    {
        "content": "<p>so I have that x.1 and y.1 are the same.  Here's the sketch of my proof:</p>",
        "id": 195584394,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089136
    },
    {
        "content": "<p>I wish to show that for an injective function <code>f : [m + 2] -&gt; [m + 1]</code>, the restriction of <code>f</code> to <code>[m + 1]</code>in the domain means that that there is no <code>j</code> in <code>[m + 1]</code> exists such that <code>f (j, j &lt; m + 2) = f (m + 1, m + 1 &lt; m + 2)</code></p>",
        "id": 195584710,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089278
    },
    {
        "content": "<p>a human proof would go like the following: suppose not.  Then we have by injectivity of <code>f</code> that <code>(j, j &lt; m + 2) = (m + 1, m + 1 &lt; m + 2)</code>, which means <code>j = m + 1</code>, but we know that <code>j &lt; m + 1</code>.  Contradiction</p>",
        "id": 195584973,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089382
    },
    {
        "content": "<p>Here is the relevant code:</p>",
        "id": 195585070,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lift_one</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">miss_proof</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">introv</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span> <span class=\"n\">p2</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195585161,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089457
    },
    {
        "content": "<p>(I know I have to clean it up a bit)</p>",
        "id": 195585289,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089498
    },
    {
        "content": "<p>So the issue is that I have in the goal window that <code>p3 : ⟨x1, x2⟩.fst = ⟨m + 1, pf⟩.fst</code>, but how do I relate both sides to <code>j</code> and <code>m + 1</code> respectively?</p>",
        "id": 195585453,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089568
    },
    {
        "content": "<p>So, Kevin gave you bad advice to use <code>cases</code> because you said you had a proof of <code>x = y</code>, suggesting <code>x</code> and <code>y</code> are variables, but actually you have a proof of <code>lift_one (m + 1) j = ⟨m + 1, pf⟩</code>.</p>",
        "id": 195586007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588089769
    },
    {
        "content": "<p>it was actually probably my bad for not sharing this in the first place, though</p>",
        "id": 195586138,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089827
    },
    {
        "content": "<p>either way, it doesn't seem <code>linarith</code> is seeing a contradiction after <code>rw ext_iff at p3</code></p>",
        "id": 195586391,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588089926
    },
    {
        "content": "<p>You should delete the <code>cases</code> line if you haven't already.</p>",
        "id": 195586543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588089977
    },
    {
        "content": "<p>yeah, that's done</p>",
        "id": 195586688,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090025
    },
    {
        "content": "<p>I now have <code>p3 : (lift_one (m + 1) j).fst = ⟨m + 1, pf⟩.fst</code></p>",
        "id": 195586796,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090046
    },
    {
        "content": "<p><code>linarith</code>isn't helping me here still</p>",
        "id": 195587318,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090215
    },
    {
        "content": "<p>Well, <code>linarith</code> doesn't know what to make of <code>(lift_one (m + 1) j).fst</code> of course.</p>",
        "id": 195587376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090242
    },
    {
        "content": "<p>First you need to turn it into <code>j.fst</code> or whatever it should be.</p>",
        "id": 195587667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090360
    },
    {
        "content": "<p>I see</p>",
        "id": 195587708,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090385
    },
    {
        "content": "<p>I'm not sure how to start with that</p>",
        "id": 195587727,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090397
    },
    {
        "content": "<p>Well, starting is the easy part:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lift_one_fst</span> <span class=\"bp\">.....</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 195587893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090461
    },
    {
        "content": "<p>You haven't actually given us the definition of <code>lift_one</code>, I think.</p>",
        "id": 195587919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090474
    },
    {
        "content": "<p>lemme do so</p>",
        "id": 195588109,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090555
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Type of pairs (k,p) where k</span>\n<span class=\"cm\">is a natural number and p is a witness to the proof that k &lt; n.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">Σ&#39;</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Every pair that lives in finite_subest m lives in finite_subset n</span>\n<span class=\"cm\">where m &lt; n</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Application of lift_finite from m to m + 1</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_one</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 195588271,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588090614
    },
    {
        "content": "<p>In that case, proving the lemma will be quite easy: it's true \"by definition\".</p>",
        "id": 195588621,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588090763
    },
    {
        "content": "<p>oh? just refl?</p>",
        "id": 195589152,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091029
    },
    {
        "content": "<p>one moment</p>",
        "id": 195589250,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091064
    },
    {
        "content": "<p>okay, I have the lemma typed out</p>",
        "id": 195590177,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091507
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lift_one_fst</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195590278,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091529
    },
    {
        "content": "<p>so now, I would:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">lift_one_fst</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p3</span>\n</code></pre></div>",
        "id": 195590404,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091576
    },
    {
        "content": "<p>or would I not?</p>",
        "id": 195590426,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091583
    },
    {
        "content": "<p>oh I got it</p>",
        "id": 195591004,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">equal</span> <span class=\"o\">:=</span> <span class=\"n\">lift_one_fst</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">equal</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 195591027,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091824
    },
    {
        "content": "<p>okay cool, looks like this theorem is done with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">equal</span> <span class=\"o\">:=</span> <span class=\"n\">lift_one_fst</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">equal</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p4</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 195591217,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588091889
    },
    {
        "content": "<p>You can just write <code>rw lift_one_fst at p3</code>. <code>rw</code> will figure out what arguments to insert for you.</p>",
        "id": 195591221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588091893
    },
    {
        "content": "<p>ah I see</p>",
        "id": 195591627,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588092069
    },
    {
        "content": "<p>okay cool, that worked for this theorem!  I'll likely be back with some more questions as I encounter problems in the main lemma</p>",
        "id": 195591698,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588092099
    },
    {
        "content": "<p>can anyone help me prove this lemma for the IVT? I'm very new and don't yet understand much.</p>\n<p>def continuous2 (f:ℝ → ℝ ) :=<br>\n∀ x : ℝ, ∀ ε &gt;0, ∃ δ &gt; 0, ∀ y, abs (x-y) &lt;δ → abs (f x - f y) &lt; ε</p>\n<p>lemma continuous_implies {f : ℝ → ℝ} (Hf : continuous2 f)<br>\n{a b : ℝ} (Hab : a &lt; b) (K := {x : ℝ | x&gt;a ∧ x&lt;b ∧ f x &lt; 0})<br>\n(c:= Sup K):<br>\nf c = 0<br>\n:=<br>\nby_contradiction</p>",
        "id": 195596526,
        "sender_full_name": "adriana",
        "timestamp": 1588094038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280374\">@adriana</span> did you meant to post this twice? Using a dedicated topic was the right idea.</p>",
        "id": 195597250,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588094354
    },
    {
        "content": "<p>hi small question</p>",
        "id": 195603685,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097122
    },
    {
        "content": "<p>suppose I have a variable named <code>x_2</code> and just want to rename it <code>y</code>.  How would I do so?</p>",
        "id": 195603747,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097158
    },
    {
        "content": "<p>I assume there is a rename tactic or something, but normally one would arrange for the variable to have the correct name in the first place; how did you get <code>x_2</code>?</p>",
        "id": 195605159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588097791
    },
    {
        "content": "<p>I used the <code>intros</code> tactic</p>",
        "id": 195605225,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097825
    },
    {
        "content": "<p>err</p>",
        "id": 195605355,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097894
    },
    {
        "content": "<p>the <code>introv</code> tactic</p>",
        "id": 195605372,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097905
    },
    {
        "content": "<p>but more than that, I have this:</p>",
        "id": 195605422,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097936
    },
    {
        "content": "<p><code> intros y, </code> ?</p>",
        "id": 195605433,
        "sender_full_name": "orlando",
        "timestamp": 1588097942
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">)),</span>\n<span class=\"k\">let</span> <span class=\"n\">x_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"n\">y_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 195605506,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588097980
    },
    {
        "content": "<p>How would I be able to then get the statement:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x_l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y_l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195605689,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098058
    },
    {
        "content": "<p>I should add that I have <code>p</code> from my tactic state window</p>",
        "id": 195605744,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098090
    },
    {
        "content": "<p><code>p</code></p>",
        "id": 195605746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588098091
    },
    {
        "content": "<p><code>p</code>?</p>",
        "id": 195605783,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098109
    },
    {
        "content": "<p><code>p</code> already equals what you wrote</p>",
        "id": 195605884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588098146
    },
    {
        "content": "<p>if you have a proof of <code>p</code> and you really need a proof of <code>relabel (m + 1) k pf (f x_l) = relabel (m + 1) k pf (f y_l)</code> in particular then you can use <code>change</code></p>",
        "id": 195606180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588098266
    },
    {
        "content": "<p>but most other tactics will not notice the difference anyways</p>",
        "id": 195606197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588098273
    },
    {
        "content": "<p><code>let</code> is a tricky thing and it would be better to understand everything else first. But in general you can pretend something defined with <code>let</code> is the same as its definition.</p>",
        "id": 195606304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588098319
    },
    {
        "content": "<p>ah, I see.</p>",
        "id": 195606373,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098352
    },
    {
        "content": "<p>thanks!</p>",
        "id": 195606577,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098444
    },
    {
        "content": "<p>Okay, so new question:</p>",
        "id": 195606784,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098525
    },
    {
        "content": "<p>I have a definition for a function using if-then-else</p>",
        "id": 195606842,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098548
    },
    {
        "content": "<p>particularly:</p>",
        "id": 195606870,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098560
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">relabel</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">my_le_trans</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"n\">H</span> <span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">inequality_fact</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 195606899,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098572
    },
    {
        "content": "<p>the function you helped me with earlier tells me that with an injective function <code>f</code>, there is no <code>j</code> in <code>{0, 1, ..., m}</code> such that <code>f(j) = f(m + 1)</code></p>",
        "id": 195607095,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098668
    },
    {
        "content": "<p>With that, I want to show that the composition <code>(relabel (m + 1) k pf) ∘ f ∘ lift_one (m + 1)</code> is injective.  I have already have that <code>f</code> is injective, and I have a lemma that any lifting is injective as well</p>",
        "id": 195607270,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098742
    },
    {
        "content": "<p>this is what I have so far:</p>",
        "id": 195607283,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098752
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span><span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">miss</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n  <span class=\"n\">introv</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">y_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">),</span>\n  <span class=\"n\">change</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x_l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y_l</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195607334,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098779
    },
    {
        "content": "<p>at this step, I want to be able to break this up into cases</p>",
        "id": 195607431,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098824
    },
    {
        "content": "<p>where relabel (f x_l) &lt;= k and and when relabel (f x_l) &gt; k</p>",
        "id": 195607547,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098863
    },
    {
        "content": "<p>and then apply my proof that f x_l != k to show we only have the cases for &lt; and &gt;</p>",
        "id": 195607601,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098889
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 195607613,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098893
    },
    {
        "content": "<p>would <code>cases</code> help me here in any way?</p>",
        "id": 195607725,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098944
    },
    {
        "content": "<p>or <code>refine</code>?</p>",
        "id": 195607751,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588098957
    },
    {
        "content": "<p>Is this a better question as a new topic?</p>",
        "id": 195609237,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588099656
    },
    {
        "content": "<p>Yes, pretty much all questions that require &gt; 1 reply would work better in their own topics.</p>",
        "id": 195609577,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588099804
    },
    {
        "content": "<p>gotcha, gonna make it now.</p>",
        "id": 195609616,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588099830
    },
    {
        "content": "<p>I have version 3.7.2, but is it possible to downgrade to version 3.4.2? Will downloading v3.4.2 from github automatically overwrite the version I have?</p>",
        "id": 195617133,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588103599
    },
    {
        "content": "<p>Why would you want to downgrade? But you can -- it's not hard (I did it today when I created a 3.7.2 project to look at your code). It's just not documented :-)</p>",
        "id": 195620625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588104924
    },
    {
        "content": "<p>Do you know which commit of mathlib you want? As Reid said, this is the real question</p>",
        "id": 195620676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588104945
    },
    {
        "content": "<p>In my goal, I have a bunch of terms that look like this, after using <code>simp</code></p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ar1</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">ar2</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">ar1</span>\n</code></pre></div>\n\n\n<p>Is there a way to get simp to unfold that to q?</p>",
        "id": 195635732,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588112531
    },
    {
        "content": "<p><code>dsimp</code></p>",
        "id": 195636582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588113012
    },
    {
        "content": "<p>if I have <code>x ≤ k</code> and want to split into cases where <code>x &lt; k</code> and <code>x = k</code>, how would I do so?</p>",
        "id": 195637996,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588113962
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>if <code>h</code> is the name of your inequality.</p>",
        "id": 195638275,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588114102
    },
    {
        "content": "<p>got it, thanks!</p>",
        "id": 195638367,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588114169
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>is one way to answer questions like this yourself.</p>",
        "id": 195638453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114225
    },
    {
        "content": "<p>And another way is to learn the <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\">conventions for theorem naming</a>. <code>of</code> means \"is implied by\", so you want to deduce something is less than, or equal to, given that it's lessthanorequalto, and the convention for less than is lt, and the convention for equals is eq, and the one for &lt;= is le, so actually if you know these tricks then you can even guess the name of the theorem without using library_search.</p>",
        "id": 195638733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114357
    },
    {
        "content": "<p>It's not a perfect system -- for example it could have been eq_or_lt_of_le -- but it's a good start.</p>",
        "id": 195638793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114381
    },
    {
        "content": "<p>I guess after a while you've seen so many of them that you just start to learn them</p>",
        "id": 195638812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114398
    },
    {
        "content": "<p>that makes sense.  I've been going back and forth between the documentation, library search, and the natural number game.</p>",
        "id": 195638835,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588114411
    },
    {
        "content": "<p>Yeah, learning the names of all the 1000000 lemmas which you need to do anything at all is a tough part of the learning curve</p>",
        "id": 195638880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114434
    },
    {
        "content": "<p>in nng I only work with one very basic type and build most things from scratch</p>",
        "id": 195638940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114457
    },
    {
        "content": "<p>but you are working on a far harder problem so you need to know all sorts of things right from square 1, this is why it's so slow going</p>",
        "id": 195638964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114481
    },
    {
        "content": "<p>yeah, it's definitely been an odyssey navigating through lean<br>\nthat being said I've been having a lot of fun with this</p>",
        "id": 195639103,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588114580
    },
    {
        "content": "<p>I underestimated how much work it would take to follow through even stating pigeonhole correctly - much less proving it all the way through</p>",
        "id": 195639196,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588114628
    },
    {
        "content": "<p>Feel free to suggest any improvements to docs here or on github!</p>",
        "id": 195639252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588114668
    },
    {
        "content": "<p>Do you think it would be ok to add a bunch of examples to the (say core) docs? There is an art here</p>",
        "id": 195639568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114857
    },
    {
        "content": "<p>You don't want to say too much, but on the other hand I think that basic examples of usage of tactics would be helpful. In nng I tried to give an example of usage for every tactic I documented</p>",
        "id": 195639640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114913
    },
    {
        "content": "<p>I think that would be very helpful. More module docs that help \"section\" some of our giant files would be good too.</p>",
        "id": 195639709,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588114934
    },
    {
        "content": "<p>I pointed Adeeb to the <code>unfold</code> docs earlier and then Reid pointed out that they were not ideal for a beginner</p>",
        "id": 195639745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588114958
    },
    {
        "content": "<p>A couple of basic examples would have been very handy there</p>",
        "id": 195639854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588115017
    },
    {
        "content": "<p>I think 1 - 2 good \"vertical slice\" examples (ie, one example using a tactic in its simplest form and another similar to how I wanted to use unfold) would be really nice</p>",
        "id": 195639929,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588115053
    },
    {
        "content": "<p>Question: I have equality between dependent pairs <code>&lt;x.fst, _&gt; = &lt;y.fst - 1, _&gt;</code> and an inequality <code>k - 1 &lt; y.fst - 1</code>.  How would I be able to rewrite the inequality as <code>k - 1 &lt; x.fst</code>?  The <code>change</code> tactic is saying a simple match fails.</p>",
        "id": 195640894,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588115750
    },
    {
        "content": "<p>Would the extensionality theorem <code>ext_iff</code>work here?</p>",
        "id": 195641036,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588115880
    },
    {
        "content": "<p>update - it didn't work</p>",
        "id": 195641135,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588115950
    },
    {
        "content": "<p>I used extensionality to say <code> &lt;x.fst, _&gt;.fst = &lt;y.fst - 1, _&gt;.fst</code>, but then <code>change k - 1 &lt; x.fst</code> failed.</p>",
        "id": 195641248,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588116020
    },
    {
        "content": "<p><code>change</code> only works with things that are definitionally equal.</p>",
        "id": 195641435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588116202
    },
    {
        "content": "<p>ah, would there be another tactic for propositional equality?</p>",
        "id": 195641504,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588116248
    },
    {
        "content": "<p>You already know how to rewrite things.</p>",
        "id": 195641620,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588116363
    },
    {
        "content": "<p>I see</p>",
        "id": 195641770,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588116496
    },
    {
        "content": "<p>that being said, I still got an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"bp\">_⟩.</span><span class=\"n\">fst</span>\n</code></pre></div>",
        "id": 195641779,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588116511
    },
    {
        "content": "<p>This was when I used <code>rw p2 at h4</code>, where <code>p2 : ⟨x.fst, _⟩.fst = ⟨y.fst - 1, _⟩.fst</code> and <code>h4 : k - 1 &lt; y.fst - 1</code></p>",
        "id": 195641824,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588116563
    },
    {
        "content": "<p>is there anything I'm missing?  Any extra things I need to verify are equal?</p>",
        "id": 195642421,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588117126
    },
    {
        "content": "<p>do I have to show that <code>⟨y.fst - 1, _⟩.fst = y.fst - 1</code>?</p>",
        "id": 195642443,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588117160
    },
    {
        "content": "<p><code>rfl</code></p>",
        "id": 195642511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117208
    },
    {
        "content": "<p>You can <code>change</code> <code>p2</code> into the required form for <code>rw</code>.</p>",
        "id": 195642637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588117323
    },
    {
        "content": "<p>okay, I'll try the latter suggestion first since that makes more immediate sense to me</p>",
        "id": 195642707,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588117403
    },
    {
        "content": "<p>however, out of curiosity, how would I use <code>rfl</code> in this case <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 195642724,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588117431
    },
    {
        "content": "<p><code>have: ⟨y.fst - 1, _⟩.fst = y.fst - 1 := rfl</code>, more or less</p>",
        "id": 195642793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117459
    },
    {
        "content": "<p>or <code>rw show ⟨y.fst - 1, _⟩.fst = y.fst - 1, from rfl</code></p>",
        "id": 195642821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117497
    },
    {
        "content": "<p>change is probably easier to use in your situation</p>",
        "id": 195642909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588117564
    },
    {
        "content": "<p>I see.</p>",
        "id": 195643719,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118081
    },
    {
        "content": "<p>So, I have<code>h : x.fst ≤ k</code> and <code>h_4 : nat.sub k 0 &lt; x.fst</code> but <code>linearith</code> is not giving me a contradiction.</p>",
        "id": 195643768,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118155
    },
    {
        "content": "<p><code>linarith</code> does not know about this silly <code>nat.sub</code>. How did you even get it?</p>",
        "id": 195643956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588118265
    },
    {
        "content": "<p>How do you use the <code>let</code> tactic?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"c\">/-</span><span class=\"cm\"> long proof here -/</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"c1\">-- how do you a term of the form a = &lt;long expression&gt;?</span>\n</code></pre></div>",
        "id": 195644027,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588118283
    },
    {
        "content": "<p>on the other hand I suppose <code>linarith</code> does not know about <code>-</code> on <code>nat</code> either. Just get rid of it</p>",
        "id": 195644093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588118344
    },
    {
        "content": "<p>I used <code>nat.le_of_pred_lt h4</code> (where <code>h4 : k - 1 &lt; x.fst</code>) to get <code> k  ≤ x.fst</code></p>",
        "id": 195644259,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118459
    },
    {
        "content": "<p>except I didn't get <code>k ≤ x.fst</code></p>",
        "id": 195644278,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118475
    },
    {
        "content": "<p>I got <code>nat.sub k 0 ≤ x.fst</code></p>",
        "id": 195644296,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118489
    },
    {
        "content": "<p>Before you said <code>nat.sub k 0 &lt; x.fst</code></p>",
        "id": 195644342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588118512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130425\">@Frank Dai</span> <code>a</code> is definitionally equal to <code>&lt;long expression&gt;</code>, so you can use <code>rfl</code>.</p>",
        "id": 195644408,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588118530
    },
    {
        "content": "<p>oh yeah, this line is then after I split into cases where <code>nat.sub k 0 &lt; x.fst</code> or <code>nat.sub k 0 = x.fst</code></p>",
        "id": 195644428,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118551
    },
    {
        "content": "<p>I can do that but that requires me to copy the giant machine-generated expression that is a</p>",
        "id": 195644473,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588118573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283719\">@Adeeb K</span> I suggest moving your questions to a new topic.</p>",
        "id": 195644514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588118607
    },
    {
        "content": "<p>sure thing, thanks</p>",
        "id": 195644615,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588118673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130425\">@Frank Dai</span>  what do you need a term of the form <code>a = long exp</code> for?</p>",
        "id": 195644937,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588118939
    },
    {
        "content": "<p>inside a proof, I am defining a function by a induction, and trying to prove something about that function</p>",
        "id": 195644968,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588118984
    },
    {
        "content": "<p>I'm defining the function by </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"bp\">&lt;</span><span class=\"n\">long</span> <span class=\"n\">induction</span> <span class=\"k\">proof</span><span class=\"bp\">&gt;</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>and I want to prove later <code>f x = f y</code> or something.</p>",
        "id": 195645044,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119018
    },
    {
        "content": "<p>I don't know how to get the goal from <code>f x = f y</code> to <code>&lt;long expression&gt; x = &lt;long expression&gt; y</code></p>",
        "id": 195645112,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119089
    },
    {
        "content": "<p>my advice from experience is to never use the <code>let</code> tactic</p>",
        "id": 195645317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119252
    },
    {
        "content": "<p><code>unfold f</code>, or similar</p>",
        "id": 195645327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588119268
    },
    {
        "content": "<p>how do I make a local definition without let?</p>",
        "id": 195645342,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119297
    },
    {
        "content": "<p>I can't unfold f beacuse it's a local definition, not a global one</p>",
        "id": 195645354,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119308
    },
    {
        "content": "<p>don't make local definitions</p>",
        "id": 195645361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119312
    },
    {
        "content": "<p>Try anyways?</p>",
        "id": 195645363,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588119315
    },
    {
        "content": "<p>Local definitions are fine, but you should definitely think twice about whether you want to make a big one</p>",
        "id": 195645382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588119359
    },
    {
        "content": "<p>I'm a little confused  you are using let for a proof? Use have if it is a term of type Prop.<br>\nThat said</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- this is irrelevant I just wanted a goal like you have</span>\n<span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195645477,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588119453
    },
    {
        "content": "<p>that works if the goal is trivial, the problem is that I don't know how to easily rewrite <code>f</code> into <code>\\lam n, n + 2</code></p>",
        "id": 195645547,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119518
    },
    {
        "content": "<p>which you need to do for a non-trivial proof</p>",
        "id": 195645559,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119531
    },
    {
        "content": "<p>the answer is <code>dsimp only [f]</code></p>",
        "id": 195645562,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119538
    },
    {
        "content": "<p>but my answer is make it a global definition</p>",
        "id": 195645573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119554
    },
    {
        "content": "<p>more trivial question: how do you apply a tactic to all goals simultaneously</p>",
        "id": 195645695,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119687
    },
    {
        "content": "<p><code>all_goals { tactic }</code></p>",
        "id": 195645705,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588119706
    },
    {
        "content": "<p>if the goals are produced by a single tactic then you can use <code>;</code> instead of <code>,</code></p>",
        "id": 195645753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119734
    },
    {
        "content": "<p>You should not use tactics to define functions if you can help it</p>",
        "id": 195645774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588119784
    },
    {
        "content": "<p>your inductive definition should be a separate auxiliary</p>",
        "id": 195645794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588119814
    },
    {
        "content": "<p>is the reason for this that there's more magic for global definitions?</p>",
        "id": 195645861,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588119866
    },
    {
        "content": "<p>basically</p>",
        "id": 195645999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120067
    },
    {
        "content": "<p>Most of the time when you do this local definition thing lean is making an auxiliary anyway</p>",
        "id": 195646051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120087
    },
    {
        "content": "<p>when you write a recursive definition with the equation compiler, you get nice equations that don't require you to look at giant machine generated definitions</p>",
        "id": 195646090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120139
    },
    {
        "content": "<p>after reaching a 250 line-long goal buffer, I see your point</p>",
        "id": 195646313,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588120377
    },
    {
        "content": "<p>and it's more than visual overload; that term is much harder to work with using the normal tactics</p>",
        "id": 195646411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588120459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  how did you downgrade lean this morning?</p>",
        "id": 195646959,
        "sender_full_name": "Stephanie Zhou",
        "timestamp": 1588121096
    },
    {
        "content": "<p>I want a collection data type where I can define a function out of it which folds it into a proposition based on the index of each element in the collection. Which collection should I use and where should I look for examples of how to use it?</p>",
        "id": 195647257,
        "sender_full_name": "Billy Price",
        "timestamp": 1588121293
    },
    {
        "content": "<p>maybe <code>\\forall i, a i</code>?</p>",
        "id": 195648520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588122290
    },
    {
        "content": "<p>If you are thinking about the context data type for your type theory project, I would suggest sticking to lists</p>",
        "id": 195648625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588122378
    },
    {
        "content": "<p>there are ways to talk about the nth item of a list</p>",
        "id": 195648669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588122406
    },
    {
        "content": "<p>When do you use <code>simp</code> vs <code>dsimp</code> in general? They seem to have subtly different behavior. Are there general heuristics on when to use which one?</p>",
        "id": 195650830,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588124669
    },
    {
        "content": "<p><code>dsimp</code> only simplifies using definitional equalities (lemmas proved by <code>rfl</code>)</p>",
        "id": 195650958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588124811
    },
    {
        "content": "<p>(but my answer is to avoid them and always append <code>only</code> if you have to use them)</p>",
        "id": 195650978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588124836
    },
    {
        "content": "<p>What are the alternatives?</p>",
        "id": 195651247,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588125113
    },
    {
        "content": "<p><code>rw</code></p>",
        "id": 195651324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125161
    },
    {
        "content": "<p>like for instance I have <code>(lam x, &lt;something&gt;) x</code>I want to rewrite to &lt;something&gt;</p>",
        "id": 195651525,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588125383
    },
    {
        "content": "<p><code>dsimp only,</code></p>",
        "id": 195651594,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125440
    },
    {
        "content": "<p>Question - if I have a function defined with the <code>if-then-else</code> pattern, and I have a proof that an input falls into the <code>if</code> case, how can I then conclude that I have an exact form for my function?</p>",
        "id": 195653366,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588127619
    },
    {
        "content": "<p>that is, suppose I have the function </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"k\">else</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>Now suppose I have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span>\n</code></pre></div>\n\n\n<p>How can I conclude that <code>f z = z</code>?</p>",
        "id": 195653470,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588127734
    },
    {
        "content": "<p><code>simp [function]</code> would be the easiest way</p>",
        "id": 195653516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588127778
    },
    {
        "content": "<p>So in the above, I would say </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">z</span>\n</code></pre></div>\n\n\n<p>and then <br>\n<code>simp g</code><br>\n?</p>",
        "id": 195653533,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588127836
    },
    {
        "content": "<p>that gave me an error</p>",
        "id": 195653539,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588127879
    },
    {
        "content": "<p>I'm not sure how to use simp here then</p>",
        "id": 195653604,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588127992
    },
    {
        "content": "<p><code>rw [function, if_pos p]</code></p>",
        "id": 195653855,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588128324
    },
    {
        "content": "<p>Right, you need to include <code>p</code> too of course.</p>",
        "id": 195653905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588128366
    },
    {
        "content": "<p>would <code>function</code> here be <code>g</code> or <code>f</code>?</p>",
        "id": 195654079,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588128484
    },
    {
        "content": "<p>you shouldn't use <code>let</code></p>",
        "id": 195654097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588128513
    },
    {
        "content": "<p>]</p>",
        "id": 195654099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588128514
    },
    {
        "content": "<p>what should I use?</p>",
        "id": 195654107,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588128529
    },
    {
        "content": "<p><code>have : function z = z, rw [function, if_pos p]</code></p>",
        "id": 195654165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588128609
    },
    {
        "content": "<p>It's not working</p>",
        "id": 195654299,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588128770
    },
    {
        "content": "<p>MWE</p>",
        "id": 195654324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588128791
    },
    {
        "content": "<p>should I send you a MWE?</p>",
        "id": 195654325,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588128792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_one</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_one_fst</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">miss_proof</span>\n<span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n\n<span class=\"n\">introv</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p3</span> <span class=\"o\">:=</span> <span class=\"n\">p2</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">lift_one_fst</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">p4</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span> <span class=\"n\">hxk</span> <span class=\"n\">hyk</span> <span class=\"n\">hyk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n\n\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n\n\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hxk</span> <span class=\"k\">with</span> <span class=\"n\">hxlk</span> <span class=\"n\">hxek</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">hxlk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">hxlk</span><span class=\"o\">)</span> <span class=\"n\">hyk</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">hxek</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hyk</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hxk</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hyk</span> <span class=\"k\">with</span> <span class=\"n\">hylk</span> <span class=\"n\">hyek</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">hylk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">hylk</span><span class=\"o\">)</span> <span class=\"n\">hxk</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">hyek</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_ge</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span><span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">miss</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span>  <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n\n\n  <span class=\"n\">introv</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">miss_x</span> <span class=\"o\">:=</span> <span class=\"n\">miss</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">miss_y</span> <span class=\"o\">:=</span> <span class=\"n\">miss</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">y_l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x₂</span><span class=\"o\">),</span>\n  <span class=\"n\">change</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x_l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y_l</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">r_x_l</span> <span class=\"o\">:=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x_l</span><span class=\"o\">),</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">r_y_l</span> <span class=\"o\">:=</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y_l</span><span class=\"o\">),</span>\n\n\n\n  <span class=\"c1\">--split_ifs at a,</span>\n  <span class=\"c1\">--change r_x_l = r_y_l at a,</span>\n\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195654576,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588129060
    },
    {
        "content": "<p>The issue I'm having is towards the bottom of <code>relabel_inj</code>  after the last <code>change</code></p>",
        "id": 195654655,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588129093
    },
    {
        "content": "<p>what's the point of <code>let miss_x := miss x,</code>?</p>",
        "id": 195655320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588129790
    },
    {
        "content": "<p>that will let me conclude that x.1 &lt; k or x.1 &gt; k</p>",
        "id": 195655375,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588129856
    },
    {
        "content": "<p>I don't see the point of any of your <code>let</code>s</p>",
        "id": 195655381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588129873
    },
    {
        "content": "<p>I started writing <code>let</code>'s to make the statement simpler, but then the others here suggested I write lemmas to help out.</p>",
        "id": 195655436,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588129945
    },
    {
        "content": "<p><code>relabel_behavior</code> being one and <code>miss_proof</code> being another</p>",
        "id": 195655440,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588129959
    },
    {
        "content": "<p>You should write a better lemma maybe.</p>",
        "id": 195655444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588129977
    },
    {
        "content": "<p>(<code>miss</code> is supposed to be a consequence of <code>miss_proof</code>)</p>",
        "id": 195655445,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588129978
    },
    {
        "content": "<p>as in a better lemma than <code>relabel_inj</code>?</p>",
        "id": 195655453,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130004
    },
    {
        "content": "<p>your lemma is fine</p>",
        "id": 195655457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588130015
    },
    {
        "content": "<p>No, I assume you already have a purpose for <code>relabel_inj</code>.</p>",
        "id": 195655458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130019
    },
    {
        "content": "<p>I mean a lemma that you can use to prove <code>relabel_inj</code></p>",
        "id": 195655460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130026
    },
    {
        "content": "<p>but my suggestion didn't work because it's supposed to be <code>dif_pos</code></p>",
        "id": 195655463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588130028
    },
    {
        "content": "<p>I'm not exactly sure what that means or where to go from there</p>",
        "id": 195655514,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130068
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">pf</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">pf</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">relabel_behavior</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩;</span> <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195655558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588130155
    },
    {
        "content": "<p>start with this</p>",
        "id": 195655561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588130158
    },
    {
        "content": "<p>learn to work with long expressions</p>",
        "id": 195655599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588130166
    },
    {
        "content": "<p>okay, give me a second</p>",
        "id": 195655616,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130227
    },
    {
        "content": "<p>thanks again</p>",
        "id": 195655617,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130232
    },
    {
        "content": "<p>I'm getting an error within the parentheses on the bottom </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">solve1</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">focused</span> <span class=\"n\">goal</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">solved</span>\n</code></pre></div>",
        "id": 195655703,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130394
    },
    {
        "content": "<p>I think that is because the goal has not been solved.</p>",
        "id": 195655751,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130411
    },
    {
        "content": "<p>oh..I need to fill in the stuff there. right right, my bad</p>",
        "id": 195655753,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130422
    },
    {
        "content": "<p>wait question about this</p>",
        "id": 195655767,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130466
    },
    {
        "content": "<p>This gives me </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 195655774,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"283719\">Adeeb K</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195655767\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195655767\">said</a>:</p>\n<blockquote>\n<p>wait question about this</p>\n</blockquote>\n<p>what's the question?</p>",
        "id": 195655843,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588130639
    },
    {
        "content": "<p>how would I conclude that </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>  <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 195655887,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130661
    },
    {
        "content": "<p>Adeeb likes to warn us when a question is coming, so we are not too surprised.</p>",
        "id": 195655894,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130678
    },
    {
        "content": "<p>Weren't you planning to write a lemma for this?</p>",
        "id": 195655927,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130725
    },
    {
        "content": "<p>I was, but then Kenny mentioned it was only a single line, but he seemed to use what he told me to give me another code snippet?</p>",
        "id": 195655971,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130769
    },
    {
        "content": "<p>Everything is a single line to Kenny</p>",
        "id": 195655977,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130817
    },
    {
        "content": "<p>just because something is a single line doesn't mean it's a bad lemma</p>",
        "id": 195655983,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588130833
    },
    {
        "content": "<p>anyways, you need to use <code>dif_pos</code></p>",
        "id": 195655990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588130846
    },
    {
        "content": "<p>there are a lot of lemmas in mathlib whose proof is just rfl</p>",
        "id": 195655995,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588130855
    },
    {
        "content": "<p>alright, I'll give it a shot.  I'll post the statement in a second</p>",
        "id": 195655997,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588130860
    },
    {
        "content": "<p>there are a lot of lemmas that are one line, possibly the majority</p>",
        "id": 195655999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588130874
    },
    {
        "content": "<p>but if you think like a mathematician a lot of those one-liners are longer than one line</p>",
        "id": 195656051,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588130949
    },
    {
        "content": "<p>yeah, they correspond to mathematician proofs of about 1 - 5 lines</p>",
        "id": 195656066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588130999
    },
    {
        "content": "<p>some easy ones are just <code>by ring</code>/<code>by omega</code> or something in Lean</p>",
        "id": 195656109,
        "sender_full_name": "Steffan",
        "timestamp": 1588131011
    },
    {
        "content": "<p>of course many of them have the one line proof \"Trivial.\"</p>",
        "id": 195656114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131022
    },
    {
        "content": "<p>I think it's pretty rare to see lemmas that are literally <code>by heavy_tactic</code></p>",
        "id": 195656127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131070
    },
    {
        "content": "<p>except possibly all the <code>by obviously</code> proofs in category theory</p>",
        "id": 195656132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131087
    },
    {
        "content": "<p>okay, here we are:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p3</span> <span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195656134,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131094
    },
    {
        "content": "<p>Actually I'll make this an MWE</p>",
        "id": 195656173,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131123
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p3</span> <span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195656195,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131202
    },
    {
        "content": "<p>I'm not sure how to proceed with <code>dif_pos</code>.</p>",
        "id": 195656201,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131217
    },
    {
        "content": "<blockquote>\n<p>I think it's pretty rare to see lemmas that are literally by heavy_tactic</p>\n</blockquote>\n<p>yeah, it seems kind of crazy to do this heavy <code>ring</code> to prove <code>n + 1 + 1 = n + 2</code></p>\n<p>but I don't terribly care about performance in theorem proving</p>",
        "id": 195656282,
        "sender_full_name": "Steffan",
        "timestamp": 1588131310
    },
    {
        "content": "<p>It starts to matter when you have a big library with many dependent files like mathlib</p>",
        "id": 195656361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131383
    },
    {
        "content": "<p>yeah, but that != me atm :D</p>",
        "id": 195656369,
        "sender_full_name": "Steffan",
        "timestamp": 1588131413
    },
    {
        "content": "<p>but it's not (just) about performance; it's often the case that the reason this is a lemma is because it isn't easily killed by one tactic</p>",
        "id": 195656378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131426
    },
    {
        "content": "<p>Or it is used by the implementation of the tactic that would kill it.</p>",
        "id": 195656384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588131448
    },
    {
        "content": "<p>I'm also not seeing any entry for <code>dif_pos</code> in the mathlib tactics documentation?</p>",
        "id": 195656386,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131448
    },
    {
        "content": "<p>it might be <code>by induction n; heavy_tactic</code> or <code>by simpa using nonobvious term</code></p>",
        "id": 195656391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195656439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588131485
    },
    {
        "content": "<p><code>by nonobviously</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195656446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588131494
    },
    {
        "content": "<p>you're right, it's kinda pointless to prove trivial stuff anyway</p>",
        "id": 195656447,
        "sender_full_name": "Steffan",
        "timestamp": 1588131495
    },
    {
        "content": "<p>but <code>rfl</code> is also a common way to prove nontrivial theorems trivially</p>",
        "id": 195656458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131519
    },
    {
        "content": "<p>oh.  thanks again Kenny</p>",
        "id": 195656466,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283719\">@Adeeb K</span> You don't often have to refer to <code>dif_pos</code> since <code>simp</code> knows about it</p>",
        "id": 195656532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131608
    },
    {
        "content": "<p>oh wait, so when I try and do the other case</p>",
        "id": 195656533,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131615
    },
    {
        "content": "<p>I get an error</p>",
        "id": 195656536,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131619
    },
    {
        "content": "<p>unless you are avoiding <code>simp</code> like kenny</p>",
        "id": 195656537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131620
    },
    {
        "content": "<p>like literally, <code>rfl</code> will solve <code>6 * finset.sum (range (0 + 1)) (λ (n : ℕ), n ^ 2) = 0 * (0 + 1) * (2 * 0 + 1)</code></p>",
        "id": 195656540,
        "sender_full_name": "Steffan",
        "timestamp": 1588131624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I tried using what you wrote for the case when <code>z &gt; k</code>.  Here it is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195656568,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131700
    },
    {
        "content": "<p>The asymptotic complexity of checking that a proof by <code>rfl</code> is correct is gargantuan</p>",
        "id": 195656570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131702
    },
    {
        "content": "<p>I'm getting an error on the last line <code>rw dif_pos h2</code></p>",
        "id": 195656624,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195656625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588131752
    },
    {
        "content": "<p>Adeeb, you should read the error and look at the type of <code>dif_pos</code>.</p>",
        "id": 195656634,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588131794
    },
    {
        "content": "<p><code>dif_pos</code> says that a dependent if-then-else  expression is equal to the then case when the condition is true</p>",
        "id": 195656635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131795
    },
    {
        "content": "<p>if the condition is false of course you shouldn't try to prove it is true</p>",
        "id": 195656639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131820
    },
    {
        "content": "<p>this gives me </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 195656640,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588131823
    },
    {
        "content": "<p>if you see a false conclusion it's time to review your statement</p>",
        "id": 195656674,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588131843
    },
    {
        "content": "<p><code>relabel</code> has sorry in it</p>",
        "id": 195656691,
        "sender_full_name": "Steffan",
        "timestamp": 1588131900
    },
    {
        "content": "<p>that doesn't matter</p>",
        "id": 195656703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588131921
    },
    {
        "content": "<p>actually it won't matter because of proof irrelevance</p>",
        "id": 195656722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131931
    },
    {
        "content": "<p>but you should probably fix that sorry</p>",
        "id": 195656729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588131953
    },
    {
        "content": "<p>vscode is bugging me about it</p>",
        "id": 195656780,
        "sender_full_name": "Steffan",
        "timestamp": 1588131985
    },
    {
        "content": "<p>oh shoot right, I forgot to use a  -1 when modifying</p>",
        "id": 195656865,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588132042
    },
    {
        "content": "<p>so this is correct: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195656966,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588132086
    },
    {
        "content": "<p>if VSCode doesn't complain about it then it's correct</p>",
        "id": 195657081,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588132216
    },
    {
        "content": "<p>but I mean... it looks like you're proving that <code>sorry = h3</code>.</p>",
        "id": 195657280,
        "sender_full_name": "Steffan",
        "timestamp": 1588132415
    },
    {
        "content": "<p>this is true because <code>sorry</code> is a proof of <code>z.1 - 1 &lt; m - 1</code> and so is <code>h3</code> so they are defeq by proof irrelevance</p>",
        "id": 195657337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132449
    },
    {
        "content": "<p>because <code>z.1 - 1 &lt; m - 1 : Prop</code></p>",
        "id": 195657351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> you said that I shouldn't use <code>let</code>.  Then if I have <code>h1 : (f (lift_one (m + 1) x)).val ≤ k</code>, how would I extract a statement that <code>relabel m k hkm (f (lift_one (m + 1) x)) = ⟨ (f (lift_one (m + 1) x).val , (f (lift_one (m + 1) x) &lt; m ⟩</code> using <code>apply_relabel_gt</code>?</p>",
        "id": 195657389,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588132543
    },
    {
        "content": "<p>what is <code>f</code>? Is it a <code>let</code>?</p>",
        "id": 195657454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132594
    },
    {
        "content": "<p>If you don't use <code>let</code> then it just has the full expression in there already</p>",
        "id": 195657487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132614
    },
    {
        "content": "<p><code>f</code> is an argument to the theorem</p>",
        "id": 195657507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132630
    },
    {
        "content": "<p>a variable</p>",
        "id": 195657514,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132642
    },
    {
        "content": "<p><code>f : finite_subset (m + 2) → finite_subset (m + 1)</code> is given as an argument</p>",
        "id": 195657516,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588132644
    },
    {
        "content": "<p>in that case I don't understand the question, what does <code>let</code> have to do with anything</p>",
        "id": 195657568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132679
    },
    {
        "content": "<p>Anyways you just apply <code>apply_relabel_gt</code> to the right things. Have you done the natural number game?</p>",
        "id": 195657577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132682
    },
    {
        "content": "<p><code>relabel</code> is a <code>def</code> and it has theorems about it, and you use those theorems and that's all there is to it</p>",
        "id": 195657622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132702
    },
    {
        "content": "<p>I mean, I have <code>h : (f (lift_one (m + 1) x)).val = (f (lift_one (m + 1) y)).val</code></p>",
        "id": 195657646,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588132738
    },
    {
        "content": "<p>I think Adeeb means: instead of naming <code>f (lift_one (m+1) x)</code> or something with a let. How to do it without any let.</p>",
        "id": 195657649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132744
    },
    {
        "content": "<p>Not that the let would help of course.</p>",
        "id": 195657654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132751
    },
    {
        "content": "<p><code>sorry</code> was a macro for a placeholder, I thought? and Lean threw errors about it? I guess I don't even  know what <code>sorry</code> is. ;)</p>",
        "id": 195657733,
        "sender_full_name": "Steffan",
        "timestamp": 1588132851
    },
    {
        "content": "<p>You can imagine that there is <code>axiom sorry : \\forall {A : Sort*}, A</code> and whenever you use <code>sorry</code> it magically has whatever type it needs to have. It's not quite implemented like that but that's the idea</p>",
        "id": 195657860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132927
    },
    {
        "content": "<p><code>sorry</code> is yet another of those things nobody really understands. That's why you shouldn't use it in your proofs <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 195657867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132936
    },
    {
        "content": "<p>Like what even is a macro?</p>",
        "id": 195657897,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588132966
    },
    {
        "content": "<p>a deeply mysterious thing</p>",
        "id": 195657913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588132977
    },
    {
        "content": "<p>that's why I don't like it <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span><br>\nlike, VSCode says a warning, yet it compiles...</p>\n<blockquote>\n<p>Like what even is a macro?</p>\n</blockquote>\n<p>Umm, I don't know, but in a github issue it said <code>sorry</code> was a macro.</p>",
        "id": 195657938,
        "sender_full_name": "Steffan",
        "timestamp": 1588132994
    },
    {
        "content": "<p>If you look at the <code>expr</code> type you will see that one of the options for an expr is a macro</p>",
        "id": 195657963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588133024
    },
    {
        "content": "<p>this is a kind of suspended computation, a promise that there is an expr here</p>",
        "id": 195658003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588133047
    },
    {
        "content": "<p>and some of them are lies like <code>sorry</code></p>",
        "id": 195658010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588133060
    },
    {
        "content": "<p>so my proof is as follows: since <code>(f (lift_one (m + 1) x)).val ≤ k</code> and <code>(f (lift_one (m + 1) y)).val ≤ k</code>, by <code>apply_relabel_lt</code> we have <code>relabel m k p (f (lift_one (m + 1) x)) = ⟨ (f (lift_one (m + 1) x)).val , (f (lift_one (m + 1) x)).val &lt; m  ⟩</code> and <code>relabel m k p (f (lift_one (m + 1) y)) = ⟨ (f (lift_one (m + 1) x)).val , (f (lift_one (m + 1) y)).val &lt; m  ⟩</code>.  Since <code>relabel m k p (f (lift_one (m + 1) x)) = relabel m k p (f (lift_one (m + 1) y))``.  From this I would get something like </code>(f (lift_one (m + 1) x)) = (f (lift_one (m + 1) y))```</p>",
        "id": 195658016,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588133077
    },
    {
        "content": "<p>and then I could unpack using the injectivity of <code>f</code> and <code>lift_one</code></p>",
        "id": 195658038,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588133125
    },
    {
        "content": "<p>I suggest you modify the statement of <code>apply_relabel_lt</code> so that it says <code>(relabel m k p x).1 = ...</code> instead</p>",
        "id": 195658115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588133175
    },
    {
        "content": "<p>that way you don't have to worry about that proof component, that doesn't matter anyway</p>",
        "id": 195658140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588133197
    },
    {
        "content": "<p>okay, one second then</p>",
        "id": 195658187,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588133222
    },
    {
        "content": "<p>alright, that's done.</p>",
        "id": 195658307,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588133292
    },
    {
        "content": "<p>I proved that <code>1 = 2</code> with the help of <code>sorry</code>. Really.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">oet</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">oett</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">oet</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195658384,
        "sender_full_name": "Steffan",
        "timestamp": 1588133456
    },
    {
        "content": "<p>question</p>",
        "id": 195658803,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134063
    },
    {
        "content": "<p>suppose I have <code>h : (f (lift_one (m + 1) x)).val = (f (lift_one (m + 1) y)).val</code></p>",
        "id": 195658808,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134075
    },
    {
        "content": "<p>how can I conclude that <code>(f (lift_one (m + 1) x)) = (f (lift_one (m + 1) y))</code> knowing that the second part of the pair is that their values are bounded by <code>m</code>?</p>",
        "id": 195658821,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134108
    },
    {
        "content": "<p>Maybe Kevin wrote a lemma that can help you?</p>",
        "id": 195658870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588134163
    },
    {
        "content": "<p>oh, extensionality?</p>",
        "id": 195658881,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134182
    },
    {
        "content": "<p>wait, I thought that was the opposite</p>",
        "id": 195658886,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134192
    },
    {
        "content": "<p>...wait it was an iff</p>",
        "id": 195658888,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134199
    },
    {
        "content": "<p>I'm still getting an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n</code></pre></div>",
        "id": 195658972,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134315
    },
    {
        "content": "<p>when I used <code>rw ext_iff at h,</code></p>",
        "id": 195658977,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134330
    },
    {
        "content": "<p>and <code>h : (f (lift_one (m + 1) x)).val = (f (lift_one (m + 1) y)).val</code></p>",
        "id": 195658981,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134342
    },
    {
        "content": "<p>I'm not sure how to apply <code>ext_iff</code> in syntax here</p>",
        "id": 195659331,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134853
    },
    {
        "content": "<p>since <code>rw ext_iff at h</code> isn't working</p>",
        "id": 195659335,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588134864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- subtype.ext : ∀ {α : Sort u_1} {p : α → Prop} {a1 a2 : {x // p x}}, a1 = a2 ↔ a1.val = a2.val</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span>\n</code></pre></div>",
        "id": 195659602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588135275
    },
    {
        "content": "<p>I'm getting the same error using subtype.ext</p>",
        "id": 195659874,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588135492
    },
    {
        "content": "<p>namely</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n</code></pre></div>",
        "id": 195659878,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588135499
    },
    {
        "content": "<p>you need to use <code>\\l</code></p>",
        "id": 195659899,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588135545
    },
    {
        "content": "<p><code>rw \\l suubtype.ext</code></p>",
        "id": 195659903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588135549
    },
    {
        "content": "<p>that's a lowercase L</p>",
        "id": 195659906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588135555
    },
    {
        "content": "<p>okay, that worked</p>",
        "id": 195660439,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588135971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I'm not sure how to start the second part of the proof where </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"n\">dite</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">dite</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I remember that in the first part, you used this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>I'm wondering how I could adapt that for this case where <code>(f (lift_one (m + 1) y)).val ≥ k</code>.</p>",
        "id": 195661573,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588137216
    },
    {
        "content": "<p>I'm not sure how to match this with <code>dif_neg</code></p>",
        "id": 195661657,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588137336
    },
    {
        "content": "<p>well you need to prove strict inequality</p>",
        "id": 195662205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138144
    },
    {
        "content": "<p>I think I have that with <code>miss</code> right?</p>",
        "id": 195662210,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138172
    },
    {
        "content": "<p>you still need to prove it</p>",
        "id": 195662215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138186
    },
    {
        "content": "<p><code>miss : ∀ j : finite_subset (m + 1), (f ∘ lift_one (m + 1)) j ≠ ⟨k, pf⟩</code></p>",
        "id": 195662218,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138197
    },
    {
        "content": "<p>because <code>dite</code> says \"if p is true then ...; else ...\"</p>",
        "id": 195662221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138201
    },
    {
        "content": "<p>if you want to trigger the \"else\" clause then you need a proof of \"not p\"</p>",
        "id": 195662264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138211
    },
    {
        "content": "<p>okay so then <code>miss x</code> is a proof that <code>(f ∘ lift_one (m + 1)) x ≠ ⟨k, pf⟩</code> yes?</p>",
        "id": 195662294,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138288
    },
    {
        "content": "<p>so then <code>subtype.ext (miss x)</code> should be <code>((f ∘ lift_one (m + 1)) x).val ≠ ⟨k, pf⟩.val</code> yes?</p>",
        "id": 195662355,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138353
    },
    {
        "content": "<p>sure</p>",
        "id": 195662361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138363
    },
    {
        "content": "<p>now prove <code>not (k \\le _)</code></p>",
        "id": 195662366,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138377
    },
    {
        "content": "<p>I'm not sure what to do there</p>",
        "id": 195662382,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138411
    },
    {
        "content": "<p>do I break into cases using <code>lt_or_eq_of_le</code>?</p>",
        "id": 195662441,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138449
    },
    {
        "content": "<p>should I provide an MWE to show where I'm stuck?</p>",
        "id": 195662463,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138521
    },
    {
        "content": "<p>the problem I'm having is that I'm just not sure what syntax to use here..</p>",
        "id": 195662471,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138539
    },
    {
        "content": "<p><code>have hnk : \\not k \\le ...,</code></p>",
        "id": 195662516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138574
    },
    {
        "content": "<p>and after you prove it, <code>rw dif_neg hnk</code></p>",
        "id": 195662522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588138585
    },
    {
        "content": "<p>one sec then</p>",
        "id": 195662563,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138633
    },
    {
        "content": "<p>wait, question about <code>have</code>.</p>",
        "id": 195662735,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138830
    },
    {
        "content": "<p>...what does it exactly do for me, and what would be the form to prove it?</p>",
        "id": 195662761,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588138876
    },
    {
        "content": "<p>actually here's a related question</p>",
        "id": 195663366,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588139502
    },
    {
        "content": "<p>how do I know that <code>x ≠ y</code> is<code>~(x = y)</code>.</p>",
        "id": 195663462,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588139554
    },
    {
        "content": "<p><code>have</code> lets you prove something that you want to use later and add it to the context. You may want to review some of the early chapters of TPiL, specifically <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#structuring-tactic-proofs\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#structuring-tactic-proofs\">this section</a>.</p>",
        "id": 195663590,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588139663
    },
    {
        "content": "<p>ah, so the basic pattern here is <code>have &lt;fact&gt; from &lt;proof&gt;</code>?</p>",
        "id": 195663641,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588139734
    },
    {
        "content": "<p>Not quite. <code>have var_name : p, from &lt;proof&gt;</code> or <code>have var_name : p := &lt;proof&gt;</code> where <code>p : Prop</code>.</p>",
        "id": 195663773,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588139839
    },
    {
        "content": "<p>I see.  One second</p>",
        "id": 195663901,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588139908
    },
    {
        "content": "<blockquote>\n<p>how do I know that <code>x ≠ y</code> is <code>~(x = y)</code>.</p>\n</blockquote>\n<p>This is the definition of <code>ne</code>: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/logic.lean#L97\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/logic.lean#L97\">https://github.com/leanprover-community/lean/blob/master/library/init/logic.lean#L97</a></p>",
        "id": 195663908,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588139915
    },
    {
        "content": "<p>Then question:  I have <code>(f ∘ lift_one (m + 1)) x ≠ ⟨k, pf⟩</code>.  How do I conclude that <code>((f ∘ lift_one (m + 1)) x).1 ≠ ⟨k, pf⟩.1</code></p>",
        "id": 195664245,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588140219
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 195664472,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588140454
    },
    {
        "content": "<p>Both sides are subtypes, right? I bet you can use something from <code>data.subtype</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/0fc4e6a8e19449312d943d5376df9d4e55e9d022/src/data/subtype.lean#L35\" title=\"https://github.com/leanprover-community/mathlib/blob/0fc4e6a8e19449312d943d5376df9d4e55e9d022/src/data/subtype.lean#L35\">https://github.com/leanprover-community/mathlib/blob/0fc4e6a8e19449312d943d5376df9d4e55e9d022/src/data/subtype.lean#L35</a></p>",
        "id": 195664747,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588140787
    },
    {
        "content": "<p>Oh, I see that Kenny already suggested <code>subtype.ext</code> to you.</p>",
        "id": 195664910,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588140999
    },
    {
        "content": "<p>Maybe this helps:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- exact h1 (subtype.eq h2)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195665064,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588141172
    },
    {
        "content": "<p>oh sorry, I just saw this now</p>",
        "id": 195666181,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588142379
    },
    {
        "content": "<p>I think I'm in homestretch right now, with the last case for <code>relabel_inj</code></p>",
        "id": 195666250,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588142425
    },
    {
        "content": "<p>I'm gonna read this over real quick</p>",
        "id": 195666259,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588142434
    },
    {
        "content": "<p>wait, so <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I have <code>m_x : (f ∘ lift_one (m + 1)) x ≠ f ⟨m + 1, _⟩</code> and tried using <code>`apply subtype.eq at m_x </code>, but it failed.</p>",
        "id": 195666661,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588142811
    },
    {
        "content": "<p>Is there a version of <code>rewrite</code> that works with heq? Alternatively, how can I prove manually that if <code>a == b</code> then <code>f a == f b</code>?</p>",
        "id": 195667247,
        "sender_full_name": "Frank Dai",
        "timestamp": 1588143211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"283719\">@Adeeb K</span> Well that's different from what you said above, so copying a random line from my example isn't likely to work. You will have to do something with <code>f</code>. I can't really help further since I can't reproduce the state of your proof.</p>",
        "id": 195668711,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588144241
    },
    {
        "content": "<p>okay</p>",
        "id": 195669036,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144489
    },
    {
        "content": "<p>should I provide an MWE?</p>",
        "id": 195669042,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144499
    },
    {
        "content": "<p>the answer to that question is always yes</p>",
        "id": 195669059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588144513
    },
    {
        "content": "<p>(not to say I'm not gonna try and adapt what you wrote further)</p>",
        "id": 195669065,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144518
    },
    {
        "content": "<p>okay I'll post it in a sec</p>",
        "id": 195669074,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144526
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_inj_is_inj</span>\n<span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">x</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₂</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p3</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">lift_one</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_one_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">lift_finite_injective</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"o\">(</span><span class=\"n\">not_le_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span> <span class=\"k\">with</span> <span class=\"n\">hxk</span> <span class=\"n\">hyk</span> <span class=\"n\">hyk</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">left</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hxk</span> <span class=\"k\">with</span> <span class=\"n\">hxlk</span> <span class=\"n\">hxek</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">hxlk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">hxlk</span><span class=\"o\">)</span> <span class=\"n\">hyk</span>\n      <span class=\"o\">},</span>\n\n      <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">hxek</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hyk</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">hxk</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"n\">hyk</span> <span class=\"k\">with</span> <span class=\"n\">hylk</span> <span class=\"n\">hyek</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">hylk</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_pred_lt</span> <span class=\"n\">hylk</span><span class=\"o\">)</span> <span class=\"n\">hxk</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ge_of_eq</span> <span class=\"n\">hyek</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span>\n    <span class=\"n\">right</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_of_not_ge</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">relabel_behavior</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩;</span> <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">comp_inj</span> <span class=\"o\">:=</span> <span class=\"n\">comp_inj_is_inj</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">inj</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">y</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">comp_inj</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">m_x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">at</span> <span class=\"n\">m_x</span><span class=\"o\">,</span>\n\n\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195669424,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130425\">@Frank Dai</span> feel free to start a new topic, topics are cheap and having several questions in one thread is confusing. I would happily see this noob questions topic locked. I thought that == was for terms that didn't have the same type, but if f a and f b make sense then a and b must have the same type. Can you upgrade your == to an =? When I see an == I have usually done something wrong, I try and avoid them</p>",
        "id": 195669425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588144801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I've posted an MWE above</p>",
        "id": 195669515,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144841
    },
    {
        "content": "<p>You need to work on the \"M\" in MWE</p>",
        "id": 195669543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588144859
    },
    {
        "content": "<p>The major part of this is <code>relabel_inj</code> but I put in above it the bare minimum to get no errors</p>",
        "id": 195669588,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144899
    },
    {
        "content": "<p>sorry out everything that doesn't matter for your question</p>",
        "id": 195669592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588144901
    },
    {
        "content": "<p>okay one sec then</p>",
        "id": 195669607,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588144912
    },
    {
        "content": "<p>I am looking at your code on a phone and it's impossible to understand because it's got too long. Isolate the problem, make a new file and copy the minimum amount over until you can reproduce your question. A good question takes work</p>",
        "id": 195669687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588144957
    },
    {
        "content": "<p>okay</p>",
        "id": 195669756,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145003
    },
    {
        "content": "<p>after <code>sorry</code>ing everything out, I got ~100 in the MWE, which is probably still way too long</p>",
        "id": 195669791,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145029
    },
    {
        "content": "<p>deleting unnecessary newlines would be a good start</p>",
        "id": 195669854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145049
    },
    {
        "content": "<p>ah sure, on it</p>",
        "id": 195669871,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145062
    },
    {
        "content": "<p>one thing you can do to \"skip to the good part\" is to take your tactic state and copy it into a new theorem statement so that you don't have to run through the first 50 lines of proof to get there</p>",
        "id": 195669985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145156
    },
    {
        "content": "<p>you can also sorry out sub-branches of the proof that are complete and not under discussion</p>",
        "id": 195670082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145207
    },
    {
        "content": "<p>ah, so like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">state</span> <span class=\"o\">:</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">everything</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">tactics</span> <span class=\"n\">window</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195670126,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145242
    },
    {
        "content": "<p>yes</p>",
        "id": 195670145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145262
    },
    {
        "content": "<p>you have to edit it slightly so it matches the syntax of a theorem statement</p>",
        "id": 195670207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145284
    },
    {
        "content": "<p>I'll do that going forward then</p>",
        "id": 195670227,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145297
    },
    {
        "content": "<p><code>extract_goal</code> might help here</p>",
        "id": 195670235,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588145301
    },
    {
        "content": "<p>oh right I recall someone made a tactic to do this</p>",
        "id": 195670256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145316
    },
    {
        "content": "<p>Put <code>extract_goal</code> before the last sorry. Then you can just copy out the <code>example</code> from the window on the right.</p>",
        "id": 195670307,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588145346
    },
    {
        "content": "<p>my current block is 48 lines</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">comp_inj_is_inj</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)(</span><span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">):=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_one_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">relabel_behavior</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩;</span> <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">m_x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">at</span> <span class=\"n\">m_x</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195670411,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> can I copy the <code>example</code> as is into my code as a theorem, or do I need to modify it?</p>",
        "id": 195670510,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588145519
    },
    {
        "content": "<p>Well it should be a top level statement, so it'd be like having a new lemma, which you can either copy the solution into your current lemma or use it as `exact.</p>\n<p>In your current scenario however, I don't think it's a good idea. <code>h</code> is massive when extracted, and the result of <code>extract_goal</code> isn't valid (is this a bug?).</p>",
        "id": 195670914,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588145822
    },
    {
        "content": "<p>That's a big improvement. Here it is again, a bit more compressed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_finite</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ_greater_than_nat</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">lift_finite_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_finite</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_one_injective</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">apply_relabel_gt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">hkm</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_behavior</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">relabel</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">relabel_inj</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hkm</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"n\">succ_greater_than_nat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"o\">((</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">relabel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"n\">pf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">relabel_behavior</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩;</span> <span class=\"n\">unfold</span> <span class=\"n\">relabel</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">m_x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">at</span> <span class=\"n\">m_x</span><span class=\"o\">,</span> <span class=\"c1\">-- invalid &#39;begin-end&#39; expression, &#39;,&#39; expected</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Note the comment indicating where people should be looking</p>",
        "id": 195671044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145900
    },
    {
        "content": "<p>Ah, I see<br>\nI should comment then the specific errors</p>",
        "id": 195671319,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146060
    },
    {
        "content": "<p>Anyway, the error here is simple: <code>apply e at h</code> is not valid syntax. Given that you are applying <code>subtype.eq</code> to <code>m_x : (f ∘ lift_one (m + 1)) x ≠ f ⟨m + 1, _⟩</code> I'm not sure exactly what you are trying to accomplish</p>",
        "id": 195671351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146088
    },
    {
        "content": "<p>I want to get <code>((f ∘ lift_one (m + 1)) x).1 ≠ (f ⟨m + 1, _⟩).1</code></p>",
        "id": 195671440,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146140
    },
    {
        "content": "<p>ultimately I want to change  <code>h1 : (f (lift_one (m + 1) x)).val ≥ k</code> into <code>h1 : (f (lift_one (m + 1) x)).val &gt; k</code></p>",
        "id": 195671495,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146193
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">m_x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">miss</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">replace</span> <span class=\"n\">m_x</span> <span class=\"o\">:=</span> <span class=\"n\">mt</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">m_x</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 195671592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146269
    },
    {
        "content": "<p>I think there is a mathlib tactic for <code>apply at</code> but I'm not finding it atm</p>",
        "id": 195671617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146287
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\"><code>apply_fun</code></a>?</p>",
        "id": 195671888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588146458
    },
    {
        "content": "<p>By the way, I think <code>unfold relabel</code> was a bad move. It puts a giant assumption in your context and there is no need since you have <code>apply_relabel_lt</code> and <code>apply_relabel_gt</code> to tell you what <code>relabel</code> does</p>",
        "id": 195671892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146458
    },
    {
        "content": "<p>alright, lemme see where that gets me</p>",
        "id": 195671894,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146460
    },
    {
        "content": "<p><code>apply_fun f at h</code> is very confusingly named (I always look for a tactic named <code>congr</code>-something) but it's really <code>apply congr_arg f at h</code></p>",
        "id": 195672036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146514
    },
    {
        "content": "<p>that is, it changes an assumption <code>h : x = y</code> to <code>h : f x = f y</code>, while I want to change <code>h : P</code> to <code>h : Q</code> given <code>f : P -&gt; Q</code></p>",
        "id": 195672131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146565
    },
    {
        "content": "<p>I see, but it was Kenny that gave me this general skeleton to work with, so I was working off that.</p>",
        "id": 195672133,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195672036\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195672036\">said</a>:</p>\n<blockquote>\n<p><code>apply_fun f at h</code> is very confusingly named (I always look for a tactic named <code>congr</code>-something) but it's really <code>apply congr_arg f at h</code></p>\n</blockquote>\n<p>I guess it's only confusing for experts that now about \"congr\"-yadda... <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 195672200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588146602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263862\">@Stephanie Zhou</span> this \"noob questions\" stream is hard to follow right now, feel free to start your own topic in #new members. The answer is that I edited my <code>leanpkg.toml</code> file so that it looked like a 3.4.2 file and then I typed <code>leanproject get-mathlib-cache</code>. So this reduces the problem to figuring out what a good Lean 3.4.2 toml looks like</p>",
        "id": 195672246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588146631
    },
    {
        "content": "<p>to me applying a function is what I wrote as the second thing</p>",
        "id": 195672262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146641
    },
    {
        "content": "<p>that is, what <code>apply at</code> should do if it existed</p>",
        "id": 195672273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146653
    },
    {
        "content": "<p>But what about <code>congr_fun</code>?</p>",
        "id": 195672336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588146694
    },
    {
        "content": "<p>Why not <code>congr at</code></p>",
        "id": 195672441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146723
    },
    {
        "content": "<p>actually <code>congr at</code> doesn't work so well because the arguments are different</p>",
        "id": 195672689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146845
    },
    {
        "content": "<p>Hmm, maybe. Doesnt read that natural either</p>",
        "id": 195672696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588146851
    },
    {
        "content": "<p><code>apply h to x</code> ?? meh...</p>",
        "id": 195672718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588146872
    },
    {
        "content": "<p><code>congr_fun</code> works for me</p>",
        "id": 195672745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146892
    },
    {
        "content": "<p>okay so question</p>",
        "id": 195672797,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146927
    },
    {
        "content": "<p>it's only slightly confusing that this is actually sugar for <code>congr_arg</code>, while <code>congr_fun</code> also exists and proves <code>f = g -&gt; f x = g x</code></p>",
        "id": 195672802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588146929
    },
    {
        "content": "<p>But it's a weird word... you never see it in a normal proof. I would like a verb</p>",
        "id": 195672804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588146930
    },
    {
        "content": "<p>I have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>\n\n\n<p>and I have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>\n\n\n<p>how can I conclude the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>",
        "id": 195672878,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588146964
    },
    {
        "content": "<p>Did you mean to have that <code>\\not</code> on the last line?</p>",
        "id": 195672939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588147003
    },
    {
        "content": "<p><code>lt_of_le_of_ne</code></p>",
        "id": 195672968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588147013
    },
    {
        "content": "<p>no I didn't.  I'll edit that out.</p>",
        "id": 195672976,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147016
    },
    {
        "content": "<p>Sounds like what you want</p>",
        "id": 195672992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588147021
    },
    {
        "content": "<p>do you mean <code>lt_or_le_of_ne</code>?</p>",
        "id": 195673024,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147044
    },
    {
        "content": "<p>no</p>",
        "id": 195673092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588147074
    },
    {
        "content": "<p>Nope</p>",
        "id": 195673099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588147076
    },
    {
        "content": "<p>...oh no, it's actually of.</p>",
        "id": 195673107,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263862\">@Stephanie Zhou</span> I think that if your leanpkg.toml looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;your_project_name&quot;</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;0.1&quot;</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;leanprover-community/lean:3.4.2&quot;</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;src&quot;</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;https://github.com/leanprover-community/mathlib&quot;</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;dd8da5165bd00b07408dbb87173e96908c6926a4&quot;</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and you type <code>leanproject get-mathlib-cache</code> you will downgrade your project to 3.4.2 (and of course it might break if you do this, and if you can't fix it then you'll have to change your toml back to what it was before you started this change, so perhaps keep a local copy)</p>",
        "id": 195673192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588147104
    },
    {
        "content": "<p>You should read it as \"You get <code>lt</code> <em>of</em> a proof of <code>le</code> and <em>of</em> a proof of <code>ne</code>\"</p>",
        "id": 195673239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588147131
    },
    {
        "content": "<p>The correct preposition is \"from\", but when clearly character count is more important than grammar</p>",
        "id": 195673415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588147225
    },
    {
        "content": "<p>Oh wait, there might be additional problems because various files and directories might have appeared in mathlib and might cause confusion. You should probably change directory into _target/deps/mathlib and type <code>git checkout dd8da5165bd00b07408dbb87173e96908c6926a4</code> before you type <code>leanproject get-mathlib-cache</code>. I don't know enough about the set-up to know whether this will work. Downgrading projects is not really supported and this is just a manual hack, don't be surprised if this causes problems. I would save your work elsewhere before starting on this.</p>",
        "id": 195673426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588147230
    },
    {
        "content": "<p>I did it yesterday with a completely new repo with no files in</p>",
        "id": 195673470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588147255
    },
    {
        "content": "<p>I see.  I'm getting an error from the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">h1_strict</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h1</span> <span class=\"n\">m_x</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>which is giving me the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">h1</span> <span class=\"n\">m_x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">m_x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">lift_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>",
        "id": 195673481,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147263
    },
    {
        "content": "<p>Adeeb, could you perhaps continue this on another thread? It's generating a lot of back and forth</p>",
        "id": 195673655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588147335
    },
    {
        "content": "<p>Oh, sure.  I'll be on the 'showing injectivity' thread then.</p>",
        "id": 195673710,
        "sender_full_name": "Adeeb K",
        "timestamp": 1588147361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195648669\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195648669\">said</a>:</p>\n<blockquote>\n<p>there are ways to talk about the nth item of a list</p>\n</blockquote>\n<p>I had a look in data.list.basic, and all I can see is a bunch of theorems and lemma about lists. How does one go about understanding the basic usage of a data type in lean? I haven't had the best experience so far so I'm wondering if you have any tips.</p>",
        "id": 195699284,
        "sender_full_name": "Billy Price",
        "timestamp": 1588162745
    },
    {
        "content": "<p>I just read all the theorems and lemmas nowadays. In fact that's a slightly silly thing to say. I read the <em>definitions</em>, and then I guess which theorems will be in the library, and then either find them in there or PR them if they're not. But with lists it's a bit tricky because part of the theory is developed in core Lean and part in mathlib.</p>",
        "id": 195700019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588163142
    },
    {
        "content": "<p>Where can I find the defs/documentation for lists?</p>",
        "id": 195700975,
        "sender_full_name": "Billy Price",
        "timestamp": 1588163644
    },
    {
        "content": "<p>I don't see any in data.list.basic</p>",
        "id": 195701012,
        "sender_full_name": "Billy Price",
        "timestamp": 1588163668
    },
    {
        "content": "<p>You've found a hole in our docs...</p>",
        "id": 195701034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588163689
    },
    {
        "content": "<p>The mathlib ones are in data.list.defs</p>",
        "id": 195701201,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588163775
    },
    {
        "content": "<p>Billy, I don't have a really satisfying answer, but there is a clear workaround for lists. This is a super standard data type for functional programming languages. You can read doc about lists in Haskell or CaML, and you should be good to go.</p>",
        "id": 195702481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588164418
    },
    {
        "content": "<p>I am familiar with lists, I was just looking for the syntax and available definitions in Lean.</p>",
        "id": 195704278,
        "sender_full_name": "Billy Price",
        "timestamp": 1588165251
    },
    {
        "content": "<p>Just read through the source of <code>data.list.defs</code> and you will pick it up, then.</p>",
        "id": 195705016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588165549
    },
    {
        "content": "<p>Yep I'm picking it up now :)</p>",
        "id": 195705096,
        "sender_full_name": "Billy Price",
        "timestamp": 1588165580
    },
    {
        "content": "<p>Here's an even more basic question. I want to use <code>nth_le : Π (l : list α) (n), n &lt; l.length → α</code> to produce a proposition that <code>A</code> is equal to the nth element of my list, but I just want to keep the <code>n &lt; l.length </code> as a hypothesis.</p>\n<p>Here's my attempt, which isn't synthesising properly (but I'm guessing there's a more direct way)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">type</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195705734,
        "sender_full_name": "Billy Price",
        "timestamp": 1588165858
    },
    {
        "content": "<p>well it wouldn't compile because <code>A</code> is not a type (despite what you might think)</p>",
        "id": 195705889,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588165897
    },
    {
        "content": "<p>so <code>list A</code> is not defined</p>",
        "id": 195705922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588165921
    },
    {
        "content": "<p>ah sorry I copied it over wrong, will edit</p>",
        "id": 195706017,
        "sender_full_name": "Billy Price",
        "timestamp": 1588165952
    },
    {
        "content": "<p>Okay, what is the error? Did you read it?</p>",
        "id": 195706678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588166239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">),</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">Γ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">Γ</span>\n</code></pre></div>",
        "id": 195706921,
        "sender_full_name": "Billy Price",
        "timestamp": 1588166373
    },
    {
        "content": "<p>(context is <code>list type</code>)</p>",
        "id": 195707084,
        "sender_full_name": "Billy Price",
        "timestamp": 1588166444
    },
    {
        "content": "<p>then supply <code>a</code> to the underscore</p>",
        "id": 195707098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588166451
    },
    {
        "content": "<p>Yeah I tried doing it like this but clearly this isn't the correct syntax</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">Γ</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Γ</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195707237,
        "sender_full_name": "Billy Price",
        "timestamp": 1588166516
    },
    {
        "content": "<p>you need <code>\\forall</code></p>",
        "id": 195707319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588166539
    },
    {
        "content": "<p><code>\\forall a : _, _ n a = A</code></p>",
        "id": 195707359,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588166560
    },
    {
        "content": "<p>Also, you should think about whether this is actually what you mean</p>",
        "id": 195707362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588166561
    },
    {
        "content": "<p>Cool that worked. Is there a way I can say it more directly? Like just \"inject\" the <code>=A</code> into <code>Γ.nth_le</code>?</p>",
        "id": 195708021,
        "sender_full_name": "Billy Price",
        "timestamp": 1588166841
    },
    {
        "content": "<p>define the proposition inductively</p>",
        "id": 195708064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588166864
    },
    {
        "content": "<p>This will probably also have the side effect of changing the definition into the one you likely intended.</p>",
        "id": 195708213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588166916
    },
    {
        "content": "<p>Inductively on the list?</p>",
        "id": 195708232,
        "sender_full_name": "Billy Price",
        "timestamp": 1588166925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> What is the issue you are referring to?</p>",
        "id": 195708446,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167015
    },
    {
        "content": "<p>What is <code>WF</code> supposed to mean exactly?</p>",
        "id": 195708475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588167027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">WF</span> <span class=\"o\">:</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"n\">some_name</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">WF</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">Gamma</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 195708477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167027
    },
    {
        "content": "<p>In the case you have so far</p>",
        "id": 195708534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588167047
    },
    {
        "content": "<p>I've just discovered accidentally that you don't need the closing triple backticks</p>",
        "id": 195708571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span> also, start a new thread</p>",
        "id": 195708631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588167087
    },
    {
        "content": "<p>I guess I'll go back to Type Theory? I came here just because I had some more basic lean questions.</p>",
        "id": 195708802,
        "sender_full_name": "Billy Price",
        "timestamp": 1588167158
    },
    {
        "content": "<p>Feel free to start a new thread in #new members -- noob questions is getting really crowded</p>",
        "id": 195719352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588171191
    },
    {
        "content": "<blockquote>\n<p>unless you are avoiding simp like kenny</p>\n</blockquote>\n<p>He broke it! XD <a href=\"https://www.codewars.com/kata/reviews/5eaa45ea72511e00016538ad/groups/5eaad1c97c30340001e5bbb7\" title=\"https://www.codewars.com/kata/reviews/5eaa45ea72511e00016538ad/groups/5eaad1c97c30340001e5bbb7\">https://www.codewars.com/kata/reviews/5eaa45ea72511e00016538ad/groups/5eaad1c97c30340001e5bbb7</a></p>",
        "id": 195869256,
        "sender_full_name": "Steffan",
        "timestamp": 1588265750
    },
    {
        "content": "<p>that's a <code>simp only</code></p>",
        "id": 195881509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588271278
    },
    {
        "content": "<p>I just solved the kata to see what all the fuss was about! I thought he'd broken the kata, not some vow to use simp (and as he said, he didn't use it)</p>",
        "id": 195888154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588274269
    },
    {
        "content": "<p>Oh, then I misunderstood that, as <code>simp only</code> still is the <code>simp</code> tactic.</p>",
        "id": 195894112,
        "sender_full_name": "Steffan",
        "timestamp": 1588277151
    },
    {
        "content": "<p>Kenny doesn't like <code>simp</code> because it can take a very long time looking through all the tactics tagged <code>simp</code> and his computer is slow. But <code>simp only</code> is ok because it only looks through the list you give it</p>",
        "id": 195894585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588277387
    },
    {
        "content": "<p>Can every proof that uses <code>calc ... </code> be simplified to a sequence of rewrites?</p>",
        "id": 195909585,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588285284
    },
    {
        "content": "<p>I ask because I proved</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">append_nil</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">::</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">::</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">calc</span>\n        <span class=\"n\">e</span> <span class=\"bp\">::</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">ha</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>But I don't think I can prove the same by using <code>by rw [ ... ]</code> instead of the <code>calc</code> block as I would need auxiliary theorems</p>",
        "id": 195909884,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588285448
    },
    {
        "content": "<p>Every proof which uses <code>calc ...</code> can be \"simplified\" to a sequence of applications of lemmas tagged <code>[trans]</code> (such as <code>lt_of_le_of_lt</code>, if you're proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a&lt;e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi><mo>&lt;</mo><mi>c</mi><mo>=</mo><mi>d</mi><mo>&lt;</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b&lt;c=d&lt;e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span>) followed by whatever happened after the colon in your calc proof, but after the colon you can have arbitrary Lean code.</p>",
        "id": 195913080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588287767
    },
    {
        "content": "<p>How do I do a <code>calc</code> style proof but where I can manipulate both the LHS and RHS? Looks like you can only rewrite the RHS with calc</p>",
        "id": 195935831,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588314674
    },
    {
        "content": "<p>You can't do it all in one <code>calc</code> block. But you could do it in several, using e.g. the <code>symmetry</code> tactic in between to swap LHS and RHS.</p>",
        "id": 195936056,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588315071
    },
    {
        "content": "<p>ohh neat</p>",
        "id": 195936099,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588315109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon Brown</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195935831\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/195935831\">said</a>:</p>\n<blockquote>\n<p>How do I do a <code>calc</code> style proof but where I can manipulate both the LHS and RHS? Looks like you can only rewrite the RHS with calc</p>\n</blockquote>\n<p>No, this is an illusion. There is nothing special when proving a calc block step. If you post a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> then we'll help understand your rewriting problem.</p>",
        "id": 195941101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588321966
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">LHS</span> <span class=\"bp\">=</span> <span class=\"n\">newLHS</span> <span class=\"o\">:</span> <span class=\"k\">proof</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">newRHS</span> <span class=\"o\">:</span> <span class=\"k\">proof</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">RHS</span>    <span class=\"o\">:</span> <span class=\"k\">proof</span>\n</code></pre></div>",
        "id": 195941299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588322237
    },
    {
        "content": "<p>Usually when I'm trying to make a calc proof I start with boilerplate like what johan said, and then I work both forward and backwards until i meet in the middle</p>",
        "id": 195954732,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588334974
    },
    {
        "content": "<p>If I have a ring injection <code>R →+* S</code>, and a <code>polynomial S</code>, but I want to think about it as a <code>polynomial R</code> (I know that the coefficients are in R) how might I go about doing that?</p>",
        "id": 195960794,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588339863
    },
    {
        "content": "<p>We do not have very good machinery for that, at the moment )-;</p>",
        "id": 195960830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588339903
    },
    {
        "content": "<p>Ideally, the <code>lift</code> tactic would help here.</p>",
        "id": 195960969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588340021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297832\">@Jack J Garzella</span> Would you like to prove the lemma? It would make a nice first PR.</p>",
        "id": 195961099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588340113
    },
    {
        "content": "<p>I thought there was a way to do this somewhere in <code>ring_theory</code></p>",
        "id": 195962764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588341229
    },
    {
        "content": "<p>How can I substitute a sub-expression that is definitionally equal to a sub-expression in the goal using tactics?  For <code>rw</code> I need to have an expression term in my context to substitute. This is easy to do using the <code>calc...</code> block but I'm trying to do it all in <code> begin ... end </code> block</p>",
        "id": 195993183,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588357789
    },
    {
        "content": "<p>Nevermind I got it, I used  <code>have ... by</code></p>",
        "id": 195993349,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588357879
    },
    {
        "content": "<p>I found the lemma <code>to_subring</code> in polynomial.lean that does this <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 195993539,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1588357983
    },
    {
        "content": "<p>Brandon :  </p>\n<p>Perhaps <code> change a with b </code> ? Do you have an example ?</p>",
        "id": 195993558,
        "sender_full_name": "orlando",
        "timestamp": 1588357995
    },
    {
        "content": "<p>I'm trying to prove <code>length (s ++ t) = length s + length t</code> where length operates on the list type and returns the number of elements of the list; <code>x::y</code> represents <code>list.cons x y</code> (head element and tail list) and  <code>++</code> is list concatenation.<br>\nOne of my goals is <code>length (x :: y ++ t) = length (x :: y) + length t</code>  and I know definitionally from the definition of <code>length</code> function that <code>length (x::y) = length(y) + 1</code>  so I'm trying to substitute that in my goal.</p>",
        "id": 195993806,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588358147
    },
    {
        "content": "<p>do you have an <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>? (e.g. if you post your solution with <code>have</code>, someone may be able to rewrite it in the more clever way that you were asking about)</p>",
        "id": 195993948,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588358238
    },
    {
        "content": "<p>Hum try : <br>\n<code> change length (x::y)  with  length(y) + 1 </code> <br>\nOr </p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">change</span>  <span class=\"bp\">_</span>  <span class=\"bp\">=</span>   <span class=\"n\">length</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"bp\">+</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 195994151,
        "sender_full_name": "orlando",
        "timestamp": 1588358328
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n<span class=\"kn\">notation</span> <span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span>  <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span>\n<span class=\"n\">def</span> <span class=\"n\">append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">l1</span> <span class=\"o\">:=</span> <span class=\"n\">l1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">l2</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">t</span> <span class=\"n\">l2</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`++`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">append</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"c1\">-- or just + 1</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n<span class=\"o\">(</span>\n    <span class=\"c1\">-- length t = length [] + length t</span>\n    <span class=\"c1\">-- length [] = 0 by definition</span>\n    <span class=\"c1\">-- 0 + x = x by definition</span>\n    <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">([]</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- z : length (y ++ t) = length y + length t</span>\n    <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n        <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">length</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">length</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- unfinished</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 195994340,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588358427
    },
    {
        "content": "<p>You may need<br>\n<code>notation </code>[]<code> := list.nil</code></p>",
        "id": 195994388,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588358463
    },
    {
        "content": "<p>But I'm not using mathlib yet, I'm just using whatever is in the base library and described in TPIL</p>",
        "id": 195994561,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588358556
    },
    {
        "content": "<p>Your example is not yet a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> -- it doesn't compile for me. If you could make it work for me, I'll try to help you.</p>",
        "id": 195994633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588358598
    },
    {
        "content": "<p>Updated with MWE</p>",
        "id": 195995815,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588359224
    },
    {
        "content": "<p>I think <code>x :: y ++ t</code> means <code>(x :: y) ++ t</code></p>",
        "id": 195996099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"bp\">::</span> <span class=\"c1\">-- 67</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"bp\">++</span> <span class=\"c1\">-- 65</span>\n</code></pre></div>",
        "id": 195996129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359397
    },
    {
        "content": "<p>oh I see, this is not relevant</p>",
        "id": 195996175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243102\">@Brandon Brown</span> I think the proof might become easier if you perform induction on <code>t</code></p>",
        "id": 195996186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588359445
    },
    {
        "content": "<p>Yes it left associates - I think I'm more asking if what I'm doing is widely inefficient. I think I can end up getting it right shortly</p>",
        "id": 195996206,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588359462
    },
    {
        "content": "<p>Reason: see the definition of addition on <code>nat</code>.</p>",
        "id": 195996208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588359463
    },
    {
        "content": "<p>I don't understand what the question is</p>",
        "id": 195996216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359469
    },
    {
        "content": "<p>Your question seemed to be \"how to substitute <code>length (x :: y) = length(y) + 1</code> into <code>length (x :: y ++ t) = length (x :: y) + length t</code> but in the MWE you have done this with the <code>show</code> command.</p>",
        "id": 195996429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359584
    },
    {
        "content": "<p>I don't understand  nothing :  but <code> goals accomplished </code> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n<span class=\"o\">(</span>\n    <span class=\"c1\">-- length t = length [] + length t</span>\n    <span class=\"c1\">-- length [] = 0 by definition</span>\n    <span class=\"c1\">-- 0 + x = x by definition</span>\n    <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">([]</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">[]</span> <span class=\"bp\">++</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- z : length (y ++ t) = length y + length t</span>\n    <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">change</span>  <span class=\"bp\">_</span>  <span class=\"bp\">=</span>   <span class=\"n\">length</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>  <span class=\"bp\">+</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195996565,
        "sender_full_name": "orlando",
        "timestamp": 1588359641
    },
    {
        "content": "<p>At the beginning of your <code>begin/end</code> block the goal is <code>⊢ length (x :: y ++ t) = length (x :: y) + length t</code> but one line later it is <code>length (x :: y ++ t) = length y + 1 + length t</code> so you have achieved what you wanted to achieve, right?</p>",
        "id": 195996573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359646
    },
    {
        "content": "<p>Yes - sorry. I ended up figuring it out using the <code>have ... from</code> tactic.  But Jalex Stark suggested I give my code in case someone had a more clever way.</p>",
        "id": 195996576,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588359648
    },
    {
        "content": "<p>By \"more clever\" do you mean a shorter tactic mode proof, a term mode proof, or what? There are lots of ways to prove this.</p>",
        "id": 195996753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359733
    },
    {
        "content": "<p>Well for example I just learned about the <code>change</code> tactic from what orlando just posted above completing the proof. I'll also try re-proving inducting on <code>t</code> to see if that's easier.</p>",
        "id": 195997044,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588359884
    },
    {
        "content": "<p>I think s is OK. I'll construct a tactic mode proof. Tactic mode is my favourite mode.</p>",
        "id": 195997111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588359932
    },
    {
        "content": "<p>You have made some really inconvenient definitions here!</p>",
        "id": 195997289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360011
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">L</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">)],</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195997438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360087
    },
    {
        "content": "<p>Maybe there is no way to make the definitions convenient. The goal ends up being <code>⊢ length L + length t + 1 = length L + 1 + length t</code>, actually, isn't this in the library?</p>",
        "id": 195997581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">L</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_right_comm</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195997663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360216
    },
    {
        "content": "<p>wow that's way shorter than mine. I will study this, thanks.   And I dont know about add_right_comm but I wrote my own proof of the commutativity of addition earlier in TPIL as one of the exercies</p>",
        "id": 195997745,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588360281
    },
    {
        "content": "<p>The base case, you write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">([]</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>but now you might want to think about what this equals, by definition.</p>",
        "id": 195997875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360348
    },
    {
        "content": "<p>I'm glad to have learned about the <code>induction</code> tactic from your example, having to use <code>.rec_on</code> for everything didn't seem elegant</p>",
        "id": 195997930,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588360389
    },
    {
        "content": "<p>By definition, <code>[] ++ t</code> is <code>t</code>. By definition, <code>length []</code> is <code>0</code>. So the goal by definition is <code>length t = 0 + length t</code></p>",
        "id": 195997939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360395
    },
    {
        "content": "<p>I do a lot of stuff in tactic mode, because I'm a mathematician so I don't really understand term mode</p>",
        "id": 195997982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360420
    },
    {
        "content": "<p>And <code>zero_add X</code> is the theorem that <code>0 + X = X</code>, so <code>(zero_add X).symm</code> is the theorem that <code>X = 0 + X</code> which is exactly what we want. I was too lazy to type <code>length t</code> because I knew Lean would be able to work it out.</p>",
        "id": 195998087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360472
    },
    {
        "content": "<p>I was focusing on term mode proofs at first because tactics didnt make sense to me but now I'm starting to see how powerful they are</p>",
        "id": 195998109,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588360489
    },
    {
        "content": "<p>You can't get away with <code>rw zero_add</code> immediately though, because <code>rw</code> works with syntactic equality, i.e. literally the same keypress kind of equality, so <code>rw zero_add</code> won't work on a goal of the form <code>length [] + X = ...</code></p>",
        "id": 195998211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360557
    },
    {
        "content": "<p>But <code>exact</code> is less fussy, it works with definitional equality</p>",
        "id": 195998280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360576
    },
    {
        "content": "<p>Can't you make the definitions in such a way that they match up nicely with the definition of <code>nat.add</code>?</p>",
        "id": 195998336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588360614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n<span class=\"o\">(</span>\n    <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n<span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">add_right_comm</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>There's the proof written in that hybrid mode you were using</p>",
        "id": 195998826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360872
    },
    {
        "content": "<p>I used <code>show</code> to do more of the definitional rewriting</p>",
        "id": 195998857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Why don't you induct on <code>t</code>?</p>",
        "id": 195998953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588360934
    },
    {
        "content": "<p>because I don't know what to do with <code>s ++ (x :: L)</code></p>",
        "id": 195998990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588360968
    },
    {
        "content": "<p>Aah, I see.</p>",
        "id": 195999020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588360989
    },
    {
        "content": "<p>Here's a term mode proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">s</span>\n<span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">add_right_comm</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 195999409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588361210
    },
    {
        "content": "<p>Impressive. Thanks for all the examples, I have definitely expanded my proof-writing horizons</p>",
        "id": 196000117,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588361576
    },
    {
        "content": "<p>The proof in core Lean is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">length_append</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">++</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">s</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 196000905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362001
    },
    {
        "content": "<p>So <code>add_comm</code> and <code>add_left_comm</code> don't have the <code>@[simp]</code> attribute otherwise you should be able to just use <code>... simp [*]</code> right</p>",
        "id": 196001817,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588362465
    },
    {
        "content": "<p>If you gave <code>add_comm</code> the <code>@[simp]</code> attribute then <code>simp</code> would start timing out because when it got stuck it would rewrite a+b to b+a to a+b to b+a to ... :-)</p>",
        "id": 196001967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362541
    },
    {
        "content": "<p>Mathematicians are amazing people, we see how to use stuff like commutativity in ways that are not completely moronic</p>",
        "id": 196002002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362569
    },
    {
        "content": "<p>actually it doesn't, because lean is smart enough to notice commutativity lemmas</p>",
        "id": 196025518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588381609
    },
    {
        "content": "<p>What tool / format should I use to write documents in <code>.lean</code> files?</p>",
        "id": 196029468,
        "sender_full_name": "Nam",
        "timestamp": 1588388384
    },
    {
        "content": "<p>is <code>definition</code> the same as <code>def</code>? if yes, why two keywords?</p>",
        "id": 196029509,
        "sender_full_name": "Nam",
        "timestamp": 1588388404
    },
    {
        "content": "<p>What do you mean by documents?</p>",
        "id": 196029525,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588388479
    },
    {
        "content": "<p>literate programming, like RMarkdown?</p>",
        "id": 196029567,
        "sender_full_name": "Nam",
        "timestamp": 1588388533
    },
    {
        "content": "<p>There are lots of duplicate keywords. Pretend <code>definition</code> doesn't exist</p>",
        "id": 196029578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588388609
    },
    {
        "content": "<p>You can use <code>leandoc</code> to create HTML pages like the mathlib docs; you write section comments in <code>/-! ... -/</code></p>",
        "id": 196029636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588388684
    },
    {
        "content": "<p>somehow <code>def</code> is not highlighted in my Sphinx doc (with Pygments 2.6.1)</p>",
        "id": 196029646,
        "sender_full_name": "Nam",
        "timestamp": 1588388711
    },
    {
        "content": "<p>pygments lags behind in syntax highlighting; I think that there are some open PRs to the pygments repo</p>",
        "id": 196029692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588388812
    },
    {
        "content": "<p>The updated Lean syntax highlighting has been merged into pygments master. I hope they'll release a new version soon...</p>",
        "id": 196029701,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588388826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kn\">definition</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 196029704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588388833
    },
    {
        "content": "<p>even here it doesn't work yet</p>",
        "id": 196029710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588388866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196029701\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196029701\">said</a>:</p>\n<blockquote>\n<p>The updated Lean syntax highlighting has been merged into pygments master. I hope they'll release a new version soon...</p>\n</blockquote>\n<p>ah, yes, i saw the new commit to Lean 3 in master.</p>",
        "id": 196029711,
        "sender_full_name": "Nam",
        "timestamp": 1588388868
    },
    {
        "content": "<p>2.6.1 does not have any <code>def</code> in <code>LeanLexer</code>.</p>",
        "id": 196029717,
        "sender_full_name": "Nam",
        "timestamp": 1588388881
    },
    {
        "content": "<p><code>pip3 install --user --upgrade 'git+https://github.com/pygments/pygments.git@master#egg=Pygments'</code> solved it. thanks for the code, Bryan!</p>",
        "id": 196030032,
        "sender_full_name": "Nam",
        "timestamp": 1588389384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196029636\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196029636\">said</a>:</p>\n<blockquote>\n<p>You can use <code>leandoc</code> to create HTML pages like the mathlib docs; you write section comments in <code>/-! ... -/</code></p>\n</blockquote>\n<p>i can't find <code>leandoc</code> anywhere in my system. i installed Lean with <code>elan</code>.</p>",
        "id": 196030058,
        "sender_full_name": "Nam",
        "timestamp": 1588389459
    },
    {
        "content": "<p>I am not the expert at this, but I think it is in <a href=\"https://github.com/leanprover-community/mathlib-tools\" title=\"https://github.com/leanprover-community/mathlib-tools\">https://github.com/leanprover-community/mathlib-tools</a> ?</p>",
        "id": 196030432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588390044
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/format_lean\" title=\"https://github.com/leanprover-community/format_lean\">https://github.com/leanprover-community/format_lean</a> also looks relevant</p>",
        "id": 196030487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588390120
    },
    {
        "content": "<p>aha, <a href=\"https://github.com/leanprover-community/doc-gen\" title=\"https://github.com/leanprover-community/doc-gen\">https://github.com/leanprover-community/doc-gen</a> is the tool responsible for making the mathlib docs</p>",
        "id": 196030584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588390313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> will know if this is suitable for other projects than mathlib</p>",
        "id": 196030637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588390389
    },
    {
        "content": "<p>thanks. it looks like lean formatter produces Pandoc. great.</p>",
        "id": 196030819,
        "sender_full_name": "Nam",
        "timestamp": 1588390704
    },
    {
        "content": "<p>I just made the PR, I think the code changes were all by Sebastian, Gabriel and Reid.</p>",
        "id": 196031186,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588391466
    },
    {
        "content": "<p><code>doc-gen</code> is hard coded to mathlib + core right now, but it wouldn't take very much work to generalize that.</p>",
        "id": 196040936,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588408713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284601\">Nam</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196030819\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196030819\">said</a>:</p>\n<blockquote>\n<p>thanks. it looks like lean formatter produces Pandoc. great.</p>\n</blockquote>\n<p>I have idea what it means. Assuming you mean <code>format_lean</code> then this is mostly backward. It consumes markdown in comments. In principle it could output anything (including LaTeX for instance) but currently it outputs HTML.</p>",
        "id": 196041613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588409865
    },
    {
        "content": "<p>Where is <code>%</code> defined?  I'd like to rewrite <code>n%2=0</code> as an algebraic expression but  am only finding <code>modeq</code> stuff in mathlib. Is it defined in the kernel?</p>",
        "id": 196065756,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588446855
    },
    {
        "content": "<p><code>#print notation %</code><br>\n( redirected to <a href=\"#narrow/stream/113489-new-members/topic/where.20is.20.25.20defined.3F\" title=\"#narrow/stream/113489-new-members/topic/where.20is.20.25.20defined.3F\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/where.20is.20.25.20defined.3F</a> )</p>",
        "id": 196065861,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588447052
    },
    {
        "content": "<p>Hoping someone help me understand the <code>vector α n</code> type . It's supposed to be a kind of list of type <code>α</code> of length <code>n</code> but I don't see how this type enforces the length to be <code>n</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span>                              <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I'm not really sure how to use this type.</p>",
        "id": 196068544,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588450929
    },
    {
        "content": "<p>redirected <a href=\"#narrow/stream/113489-new-members/topic/vector.20type\" title=\"#narrow/stream/113489-new-members/topic/vector.20type\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/vector.20type</a></p>",
        "id": 196068620,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588451045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243102\">Brandon Brown</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196068544\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196068544\">said</a>:</p>\n<blockquote>\n<p>Hoping someone help me understand the <code>vector α n</code> type . It's supposed to be a kind of list of type <code>α</code> of length <code>n</code> but I don't see how this type enforces the length to be <code>n</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span>                              <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I'm not really sure how to use this type.</p>\n</blockquote>\n<p>I think the idea is that every vector is either the trivial vector of length zero, or a cons with a vector of length one smaller. This way we get a stack of vectors with increasing index, and that ensures that the length is correct. I was confused by this at first because I was used to thinking of vectors the way they're defined in languages like C where there are some key differences in memory allocation, but that's not happening here AFAIK.</p>",
        "id": 196070524,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588454354
    },
    {
        "content": "<p>I also found it useful to copy the vector definition into a lean file and play around with a lot of <code>#check</code> statements to get a better picture of what's going on here. You might need to rename it to avoid a naming conflict. For example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">my_vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span>                              <span class=\"o\">:</span> <span class=\"n\">my_vec</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">my_vec</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my_vec</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">my_vec</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">my_vec</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">my_vec</span> <span class=\"kt\">Prop</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">my_vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">my_vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">tt</span> <span class=\"n\">my_vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">my_vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">my_vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">tt</span> <span class=\"n\">my_vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196072599,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588457914
    },
    {
        "content": "<p>I f i have <code>(f:α → β)</code> and <code>(hf: function.bijective f)</code> how do i get the inverse function of f?</p>",
        "id": 196707138,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588804641
    },
    {
        "content": "<p>I would do it by applying the theorem that says given an injective function, there exists a left inverse</p>",
        "id": 196707204,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588804693
    },
    {
        "content": "<p>I think <code>hf.left : function.injective f</code></p>",
        "id": 196707237,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588804741
    },
    {
        "content": "<p>Not every injective function has a left inverse.</p>",
        "id": 196707265,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588804764
    },
    {
        "content": "<p>You can use <code>function.surj_inv</code>,but there might be better.</p>",
        "id": 196707289,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588804792
    },
    {
        "content": "<p>okay thank you!</p>",
        "id": 196707388,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588804886
    },
    {
        "content": "<p>Don't expect it to be computable though ;-)</p>",
        "id": 196709380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588806637
    },
    {
        "content": "<p>hmm if you knew that your bijection was <em>efficiently</em> computable then you would know that the inverse is computable</p>",
        "id": 196709554,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588806818
    },
    {
        "content": "<p>not that we have the right notion of efficiency written down in mathlib, yet, just an idle thought</p>",
        "id": 196709570,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588806833
    },
    {
        "content": "<p>Even if the sets were infinite?</p>",
        "id": 196709681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588806913
    },
    {
        "content": "<p>yeah</p>",
        "id": 196709704,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588806927
    },
    {
        "content": "<p>to even talk about \"efficiently computable\" you need to express your infinite set as an increasing chain of finite sets</p>",
        "id": 196709719,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588806945
    },
    {
        "content": "<p>think of the nth one \"the stuff that's representable in n bits\"</p>",
        "id": 196709729,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588806959
    },
    {
        "content": "<p>hmm maybe I'm talking nonsense. The intuition that got me here was \"if the forward direction is in P then the reverse direction is in NP, which you can compute in exptime\"</p>",
        "id": 196709802,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588806998
    },
    {
        "content": "<p>And you need decidable equality on the sets as well I guess</p>",
        "id": 196709804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588806999
    },
    {
        "content": "<p>I don't think this is right. There are definitely examples of computable bijections with no computable inverse</p>",
        "id": 196709856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807066
    },
    {
        "content": "<p>examples of bijections computable in polynomial time with no computable inverse?</p>",
        "id": 196709962,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588807119
    },
    {
        "content": "<p>If the sets are (computably) countable and equality is decidable then it's possible</p>",
        "id": 196709982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807153
    },
    {
        "content": "<p>you can exhaustively search a countable set if you know the answer is in there</p>",
        "id": 196710005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807179
    },
    {
        "content": "<p>that's <code>nat.find</code></p>",
        "id": 196710013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807193
    },
    {
        "content": "<p>yeah, I guess my comment really means \"if your function is computable in the sense that you have an implementation running on a computer, then you probably have a computable enumeration and decidable equality lying around\"</p>",
        "id": 196710129,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588807291
    },
    {
        "content": "<p>Here's an example: Let <code>A := bool</code> and let <code>B</code> be the collection of all turing machines quotient by \"one halts iff the other does\". There is a computable map <code>A -&gt; B</code> which sends <code>tt</code> to a halting TM and <code>ff</code> to a non-halting machine, and this is a bijection with no computable inverse</p>",
        "id": 196710249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807388
    },
    {
        "content": "<p>This fails because although both sets are computably countable, <code>B</code> does not have decidable equality</p>",
        "id": 196710286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807431
    },
    {
        "content": "<p>It's only a bijection if you assume LEM though, right?</p>",
        "id": 196710336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588807458
    },
    {
        "content": "<p>sure</p>",
        "id": 196710341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807463
    },
    {
        "content": "<p>I'm not doing intuitionistic maths here</p>",
        "id": 196710350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807478
    },
    {
        "content": "<p>By computable bijection, I mean a computable function that is classically a bijection</p>",
        "id": 196710375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807510
    },
    {
        "content": "<p>which is what <code>function.bijection</code> gives you</p>",
        "id": 196710378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588807523
    },
    {
        "content": "<p>I am having trouble showing that <code>@surj_inv id _ = id</code> ...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_inv_id</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">surj_inv</span> <span class=\"o\">(</span><span class=\"n\">surjective_id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 196831570,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588886342
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> ? What is <code>surjective_id</code> and I can't seem to find <code>surj_inv</code>?</p>",
        "id": 196850357,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588901797
    },
    {
        "content": "<p>Oh sorry i forgot to put <code>open function</code> before the lemma</p>",
        "id": 196850373,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588901846
    },
    {
        "content": "<p>Ok cool. There's also a missing import for <code>logic.function</code>.</p>",
        "id": 196850770,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588902478
    },
    {
        "content": "<p>Do you know what <code>ext</code> does?</p>",
        "id": 196850811,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588902487
    },
    {
        "content": "<p>It says that two function are equal if each for each x the image of both functions are equal</p>",
        "id": 196850833,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588902545
    },
    {
        "content": "<p>Yup. Are you doing this in term mode or tactic mode?</p>",
        "id": 196850841,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588902564
    },
    {
        "content": "<p>Both are fine</p>",
        "id": 196850848,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588902584
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_inv_id</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">surj_inv</span> <span class=\"o\">(</span><span class=\"n\">surjective_id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196850852,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588902595
    },
    {
        "content": "<p>And you also have the fact that the <code>surj_inv</code> is a right inverse (<code>right_inverse_surj_inv</code>)</p>",
        "id": 196850924,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588902668
    },
    {
        "content": "<p>Which you can use to get <code>id (surj_inv surjective_id x) = x</code>, which is pretty much the goal.</p>",
        "id": 196851143,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588902993
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_inv_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}:</span> <span class=\"n\">surj_inv</span> <span class=\"o\">(</span><span class=\"n\">surjective_id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">→</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">ext1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:=</span><span class=\"n\">right_inverse_surj_inv</span> <span class=\"o\">(</span><span class=\"n\">surjective_id</span><span class=\"o\">:</span><span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>this works! thank you</p>",
        "id": 196851488,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588903539
    },
    {
        "content": "<p>:) Also I found the same issue with copying the definition from the <code>have</code> and it not working. You can fix that by using <code>show</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_inv_id</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">surj_inv</span> <span class=\"o\">(</span><span class=\"n\">surjective_id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">surj_inv</span> <span class=\"n\">surjective_id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n         <span class=\"k\">from</span> <span class=\"n\">right_inverse_surj_inv</span> <span class=\"n\">surjective_id</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and if all you're using is <code>ext</code> and <code>exact</code>, there isn't much point to tactic mode</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_inv_id&#39;</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">surj_inv</span> <span class=\"o\">(</span><span class=\"n\">surjective_id</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">surj_inv</span> <span class=\"n\">surjective_id</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"k\">from</span> <span class=\"n\">right_inverse_surj_inv</span> <span class=\"n\">surjective_id</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196851563,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588903632
    },
    {
        "content": "<p>also i have another question,  when i have to prove such lemmas for other functions i need to prove that they are surjective when stating the lemma and not when actually proving it, isn't it possible avoid doing so?</p>",
        "id": 196851571,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588903656
    },
    {
        "content": "<p>I'm not too sure what you're asking? I thought the only function where the inverse is itself is <code>id</code>. So I'm not sure what you mean by that?</p>",
        "id": 196851702,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588903811
    },
    {
        "content": "<p>like here for example, i need to fill in the third underscore when stating the lemma (the left side), while it would seem more natural to do somehow do it when proving the lemme (the right side)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_inv_add_one</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">surj_inv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 196851804,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588904010
    },
    {
        "content": "<p>I see what you mean. Like what <code>refine</code> does with underscores. I don't know if such a thing exists (or can even exist, intuition says no).</p>\n<p>Sorry :(</p>",
        "id": 196852560,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588905076
    },
    {
        "content": "<p>okay, thank you for your help!</p>",
        "id": 196852644,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588905230
    },
    {
        "content": "<p>How do I simplify <code>factors 6</code> in the following example?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">factors</span> <span class=\"mi\">6</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n\n<p>The <code>simp</code> tactic fails, although <code>#eval factors 6</code> evaluates to <code>[2, 3]</code>. I have heard lean has multiple reduction engines, I think this may play a role here.</p>",
        "id": 196853011,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588905805
    },
    {
        "content": "<p><code>norm_num [factors]</code> may work</p>",
        "id": 196853166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588906019
    },
    {
        "content": "<p><code>rfl</code> may also work</p>",
        "id": 196853174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588906046
    },
    {
        "content": "<p><code>by norm_num [factors]</code> works, but <code>rfl</code> doesn't. I was hoping <code>dec_trivial</code> would work, since we can <code>#eval factors 6</code>, but it doesn't.</p>",
        "id": 196853232,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588906146
    },
    {
        "content": "<p>it's those darn pesky well founded recursions</p>",
        "id": 196853330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588906319
    },
    {
        "content": "<p>I wonder if it is possible to make some proofs reducible and get it to compute</p>",
        "id": 196853379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588906345
    },
    {
        "content": "<p>Aha, I figured out how to investigate this properly.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">c</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_recursor</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n      <span class=\"k\">match</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">exceptional</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n        <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_app_args</span><span class=\"bp\">.</span><span class=\"n\">inth</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pi_arity</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"kn\">end</span>\n    <span class=\"k\">else</span> <span class=\"k\">match</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">is_projection</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">environment</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">get_app_args</span><span class=\"bp\">.</span><span class=\"n\">inth</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nparams</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n    <span class=\"kn\">end</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_env</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">whnf</span> <span class=\"n\">e</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">all</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"mi\">6</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">),</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">head_position</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span>\n<span class=\"c1\">-- propext</span>\n<span class=\"c1\">--   (lt_iff_not_ge ((nat.add 3 (nat.add 1 0) + 2) / nat.min_fac (nat.add 3 (nat.add 1 0) + 2))</span>\n<span class=\"c1\">--      (nat.add 3 (nat.add 1 0) + 2))</span>\n</code></pre></div>\n\n\n<p>The <code>head_position</code> function finds the location where reduction takes place in a term. In a stuck term, the reason the term is stuck is because there is a stuck term in the head position. For example, <code>nat.rec_on (choice nat) bla bla</code> is stuck because <code>choice nat</code> is stuck. It turns out that even if you unfold lemmas (using <code>set_option type_context.unfold_lemmas true</code>), the computation of <code>factors</code> is stuck because it uses a well founded recursion and if you reduce the proof of well foundedness you eventually hit <code>propext</code>, which is stuck because it is an axiom.</p>",
        "id": 196855763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588910400
    },
    {
        "content": "<p>You can try removing some of the <code>env.head_position</code> lines to see it work its way through the stuck proof terms, unfolding one and getting stuck on the next</p>",
        "id": 196855834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588910462
    },
    {
        "content": "<p>The problem is in this proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">div_lt_iff_lt_mul</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_not_ge</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_iff_not_of_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_div_iff_mul_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">Hk</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The <code>simp</code> call rewrites the two sides using <code>propext lt_iff_not_ge</code> (when it could use <code>iff.trans</code> instead, which does not block computation). It's a similar issue to what happens when you use <code>rw</code> to prove a decidability theorem.</p>",
        "id": 196856701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588911749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you very much! <code>norm_num [factors]</code> indeed works. Where can I read about normalization in Lean, it seems quite nuanced compared to most proof assistants due to its multiple reduction engines.</p>",
        "id": 196936331,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588964302
    },
    {
        "content": "<p>Is there a way to mark a definition for automatic unfolding? Ideally, I would like to omit <code>unfold perfect</code> in the following proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">list</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">id</span> <span class=\"n\">s</span>\n\n<span class=\"c1\">-- This definition is wrong, by the way.</span>\n<span class=\"n\">def</span> <span class=\"n\">perfect</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">to_finset</span> <span class=\"o\">(</span><span class=\"n\">factors</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">perfect</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">perfect</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">factors</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196936922,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1588964600
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/2589\" title=\"https://github.com/leanprover-community/mathlib/issues/2589\">#2589</a> is a overhaul of <code>norm_num</code>. But I'm not sure if you are looking for code (-;</p>",
        "id": 196937339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588964791
    },
    {
        "content": "<p>I'm not aware of docs on <code>norm_num</code> though</p>",
        "id": 196937388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588964816
    },
    {
        "content": "<p>Other than what's in the mathlib docs of course</p>",
        "id": 196937420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588964839
    },
    {
        "content": "<p>I have a nonempty metric space A (it satisfies <code>h : nonempty A</code>), and I am trying to extract an element of it.  How can I do this?  I tried <code>set.nonempty.some h</code>, but it seems that <code>set.nonempty.some</code> requires argument of type <code>set.nonempty ?m_1</code>, and <code>nonempty A</code> is not coerced to that.</p>",
        "id": 196969211,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588991636
    },
    {
        "content": "<p><code>set.nonempty</code> is a different thing, I think.</p>",
        "id": 196969461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588992007
    },
    {
        "content": "<p><code>classical.choice h</code> will get you an element of type <code>A</code>.</p>",
        "id": 196969483,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588992118
    },
    {
        "content": "<p>The normal thing would be to use <code>cases</code> on <code>h</code>, or <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 196969523,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588992137
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 196969594,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1588992260
    },
    {
        "content": "<p>It's a little embarrassing, but I had to look it up using <code>library_search</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n\n\n<p>(I couldn't remember if <code>default</code> worked for <code>nonempty</code> -- it doesn't, it requires <code>inhabited</code>.)</p>",
        "id": 196969689,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588992455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <code>nonempty A</code> is a typeclass, so you can write <code>[nonempty A]</code>. If you do that, there is a tactic <code>inhabit A</code>, it will give you an element of <code>A</code>.</p>",
        "id": 196970025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588993021
    },
    {
        "content": "<p>But doing <code>cases</code> also works.</p>",
        "id": 196970032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588993061
    },
    {
        "content": "<p>Re Bryan: <code>default</code> indeed requires <code>inhabited</code>. The <code>inhabit</code> tactic lifts a <code>nonempty A</code> to <code>inhabited A</code>.</p>",
        "id": 196970078,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588993103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196936331\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196936331\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Thank you very much! <code>norm_num [factors]</code> indeed works. Where can I read about normalization in Lean, it seems quite nuanced compared to most proof assistants due to its multiple reduction engines.</p>\n<p>Is there a way to mark a definition for automatic unfolding? Ideally, I would like to omit unfold perfect in the following proof:</p>\n</blockquote>\n<p>If you mark <code>factors</code> and <code>perfect</code> with <code>@[simp]</code> or <code>local attribute [simp]</code>, then <code>by norm_num</code> alone will work. You can also write <code>norm_num [factors, perfect]</code>.</p>\n<p>What is happening is this: the core <code>norm_num</code> tactic (which can be called using <code>norm_num1</code>) itself doesn't know anything about evaluating functions other than <code>2 + 2</code>, <code>2 * 2</code>, as well as <code>prime 2</code> and <code>min_fac 2</code>, which are the key to evaluating <code>factors</code>. The actual tactic <code>norm_num [factors]</code> is equivalent to <code>norm_num1, simp [factors], norm_num1, simp [factors], ...</code> repeated until the goal stops changing. So it is bouncing back and forth between <code>simp</code> to do general reduction of functions \"in the wild\" like <code>perfect</code>, <code>to_finset</code>, and <code>factors</code>, and <code>norm_num</code> for evaluating things once all the arguments are numerals.</p>",
        "id": 196973896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589000282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> if your goal is data then you have to use <code>some</code> because computer scientists think that moving from <code>Prop</code> to <code>Type</code> is the axiom of choice <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 196978082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008780
    },
    {
        "content": "<p>But if you just want the element to prove another <code>Prop</code> then<code>cases</code> is fine</p>",
        "id": 196978127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> you probably need a bit more of the global context here. You're hitting one of the few places where constructivism managed to intrude into mathlib to try preventing people from doing mathematics (if you were still using Coq that would be <em>everywhere</em>). Because it's highly relevant to software programming and verification, there is a distinction between assuming something is not empty and happily giving you en element of that something. The first one is <code>[nonempty X]</code> and the second one is <code>[inhabited X]</code>. Fortunately there are tricks to go from one to the other, but it means you need to learn something which seems completely artificial. From our point of view, this is a bug, but we need to keep in mind that proof assistants are very flexible tools that have a wide range of applications. And without the other applications we wouldn't have these tools at all, since applications to math bring almost no money or academic positions (yet).</p>",
        "id": 196982041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589015702
    },
    {
        "content": "<p>deleted</p>",
        "id": 196992434,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1589032056
    },
    {
        "content": "<p>Hi, I have a problem with vscode right now where the output panel keeps appearing when i'm typing something, how to solve this?</p>",
        "id": 196993958,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1589034201
    },
    {
        "content": "<p>it says <code>LEAN ASSERTION VIOLATION</code></p>",
        "id": 196993963,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1589034220
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 196994059,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589034331
    },
    {
        "content": "<p>nevermind, i just closed and reopened the file and now it works</p>",
        "id": 196994062,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1589034333
    },
    {
        "content": "<p>I'm pleasantly surprised by how cheap it is to restart VSCode and how many problems can be solved by it</p>",
        "id": 196994108,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589034368
    },
    {
        "content": "<p>classic microsoft</p>",
        "id": 196994119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589034381
    },
    {
        "content": "<p>deleted</p>",
        "id": 196994146,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1589034450
    },
    {
        "content": "<p>This is a syntax question. Let's say <code>P</code> and <code>Q</code> are some propositions, and I'm in the situation</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"err\">???</span>\n</code></pre></div>\n\n\n<p>Let's say I want to prove <code>P</code> and I know how to prove <code>¬Q</code> in tactic mode. What's the cleanest way of proving P?</p>",
        "id": 197051207,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1589111940
    },
    {
        "content": "<p>I can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">T</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197051275,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1589112056
    },
    {
        "content": "<p>But somehow it seems there should be a more elegant way</p>",
        "id": 197051290,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1589112080
    },
    {
        "content": "<p><code>refine or.resolve_left _</code> or <code>refine or.resolve_right _</code> depending on which way round the or is</p>",
        "id": 197051451,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1589112285
    },
    {
        "content": "<p>Ok so If I want to do this without entering tactic mode until I need to prove <code>\\not Q</code> then I do </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"n\">T</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 197053112,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1589114188
    },
    {
        "content": "<p>You can delete <code>by refine</code> here</p>",
        "id": 197053227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589114297
    },
    {
        "content": "<p>(<code>by</code> is tactic mode, so if your goal is to avoid entering tactic mode then you <em>have</em> to delete it)</p>",
        "id": 197053259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589114322
    },
    {
        "content": "<p>Ok thanks.</p>",
        "id": 197053452,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1589114547
    },
    {
        "content": "<p>Where can I find the actual lean library with already formalized mathematics?</p>",
        "id": 197069593,
        "sender_full_name": "Golol",
        "timestamp": 1589134501
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib\" title=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a></p>",
        "id": 197069681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589134623
    },
    {
        "content": "<p>See also the documentation at <a href=\"https://leanprover-community.github.io/mathlib_docs/\" title=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a></p>",
        "id": 197069688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589134644
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories.md\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/theories.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/theories.md</a></p>",
        "id": 197069778,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589134698
    },
    {
        "content": "<p>So, I checked this out a bit and it makes me wonder: Is there a guideline to the question which level of generality a piece of mathematics should be formalized? Should the divergence theorem be written down and proven in the way it is normally done in an analysis course, or should the most super general form of stokes theorem be formalized and then the divergence theorem is noted as a corollary of the more general theorem?</p>",
        "id": 197070562,
        "sender_full_name": "Golol",
        "timestamp": 1589135378
    },
    {
        "content": "<p>The mathlib philosophy is that the super-general form should be formalised first. This is why we had Bochner integrals before any integral taught to maths undergraduates.</p>",
        "id": 197070643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135432
    },
    {
        "content": "<p>We might have had multivariable calculus before single-variable calculus but I am less sure about this. We definitely had multivariable polynomial rings before single-variable polynomial rings.</p>",
        "id": 197070666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135486
    },
    {
        "content": "<p>And if someone comes up with an even new generalization \"above\" the current \"top level\" one, would it be optimal to adjust the database and prove the new even more general concept first?</p>",
        "id": 197070670,
        "sender_full_name": "Golol",
        "timestamp": 1589135494
    },
    {
        "content": "<p>You might well ask! But you'll have to ask those wacky computer scientists, not me :-)</p>",
        "id": 197070674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135513
    },
    {
        "content": "<p>Or is that exponentially complicated</p>",
        "id": 197070675,
        "sender_full_name": "Golol",
        "timestamp": 1589135520
    },
    {
        "content": "<p>Seems a bit like a strange situation, like building sth inside out but I cant pin it down. I also dont deeply understand lean yet ofc</p>",
        "id": 197070730,
        "sender_full_name": "Golol",
        "timestamp": 1589135569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> can tell you about the design decisions for analysis in mathlib; they understand the situation very well.</p>",
        "id": 197070734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589135573
    },
    {
        "content": "<p>These are good questions.</p>",
        "id": 197070737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589135576
    },
    {
        "content": "<p>We are very far from doing things optimally. The best thing to do is just try – try proving something, ask questions here if you get stuck, then try PRing it to mathlib and address the feedback that you'll get in response to that, etc. etc.</p>",
        "id": 197070774,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589135614
    },
    {
        "content": "<p>It's reasonable to imagine that there is an infinite chain (or more complicated graph!) of generalizations, so there is no \"most general\" thing to formalize, yet you have to pick a point somewhere anyways.</p>",
        "id": 197070797,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589135637
    },
    {
        "content": "<p>Also if you proved your theorem in some super duper ultra generalized setting, it might take some work to turn it back into the theorem in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> or whatever.</p>",
        "id": 197070866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589135674
    },
    {
        "content": "<p>yea, that makes sense, I suppose.</p>",
        "id": 197071007,
        "sender_full_name": "Golol",
        "timestamp": 1589135779
    },
    {
        "content": "<p>In mathlib the design decision appears to be to aim high.</p>",
        "id": 197071269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136000
    },
    {
        "content": "<p>I would say aim for the tasks that you expect to accomplish</p>",
        "id": 197071351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136055
    },
    {
        "content": "<p>Right because usually if X is a special case of Y, and you expect to want both X and Y, then it's less effort in total to prove Y and conclude X</p>",
        "id": 197071357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589136077
    },
    {
        "content": "<p>but the infinite regress eventually stops because Y is a special case of Z, but you don't care about Z or it's impractical to formalize it or you don't expect to get around to it any time soon</p>",
        "id": 197071412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589136146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197071351\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197071351\">said</a>:</p>\n<blockquote>\n<p>I would say aim for the tasks that you expect to accomplish</p>\n</blockquote>\n<p>Yea, I was just thinking about the \"ultimate goal\" where formalizing n lines of informal mathematics takes C * n lines in lean, where C is a constant. I hope this situation doesnt impact that</p>",
        "id": 197071435,
        "sender_full_name": "Golol",
        "timestamp": 1589136238
    },
    {
        "content": "<p>Also, keep in mind that in some sense the \"limiting case\" of generalization is tautology, i.e. theorem X is true in all the cases when the prerequisites for X being true are satisfied</p>",
        "id": 197071476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136256
    },
    {
        "content": "<p>So there is a tapering off of usefulness as you tend to more and more generality</p>",
        "id": 197071479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136281
    },
    {
        "content": "<p>One interesting feature of formalization is that for certain types of generalisation it can sometimes be far easier to generalise a result than it is on paper. Once a result is formalized you can start deleting assumptions and lean will tell you exactly what breaks and where, you can then fix that part and move on. It happens pretty often that once a result is formalized people realise  some assumptions aren't necessary at all, they just helped us mentally when writing the initial proof. You won't get from one integration theory to another this way but if you have some hypothesis on a mathematical object that don't need to be there  you can have an easier time proceeding this way.</p>",
        "id": 197071506,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589136360
    },
    {
        "content": "<p>That is true, from a practical view this is not really an issue</p>",
        "id": 197071545,
        "sender_full_name": "Golol",
        "timestamp": 1589136365
    },
    {
        "content": "<blockquote>\n<p>Yea, I was just thinking about the \"ultimate goal\" where formalizing n lines of informal mathematics takes C * n lines in lean, where C is a constant. I hope this situation doesnt impact that</p>\n</blockquote>\n<p>The thing is, you have to have a goal first, and that goal has to have boundaries. Given such a goal, there is an appropriate value of C, but if you later change or extend the goal then C will change (not necessarily up or down because both the informal and the formal versions grow)</p>",
        "id": 197071553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136391
    },
    {
        "content": "<p>In practice it took forever to define differentiation of functions from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> even though we had limits, so there was an example where C was huge and could have been much smaller, but does it matter?</p>",
        "id": 197071570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136442
    },
    {
        "content": "<p>This question of whether to treat the special case or to treat the general case and derive the special case also exists on the informal mathematics side.</p>",
        "id": 197071571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589136443
    },
    {
        "content": "<p>On the informal side there is the third even more powerful approach of course</p>",
        "id": 197071588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136476
    },
    {
        "content": "<p>I mean in general the \"cost model\" for informal mathematics is a lot different</p>",
        "id": 197071633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589136500
    },
    {
        "content": "<p>I think the issue with differentiation was that we could have done one variable derivatives at any time, but we held out for the more general case because there are people who need it now</p>",
        "id": 197071634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136505
    },
    {
        "content": "<p>Treat the special case and remark that the general case follows in a similar manner</p>",
        "id": 197071636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136505
    },
    {
        "content": "<p>Doing derivatives the undergraduate way is not hard, but it would have been a decent chunk of work that would later be superceded</p>",
        "id": 197071688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136559
    },
    {
        "content": "<p>considering how long we went without it as a result of holding out for the general version, that might have been worth it</p>",
        "id": 197071707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136589
    },
    {
        "content": "<p>Suppose I open an analysis book and start going at it. In formalize derivatives in 1 dimension. Then a few chapters later the total derivative is defined. Could it be possible to prove a theorem \"the derivative is a special case of the total derivative\" and make lean automatically replace all statements about the derivative with.. statements about the total derivative in 1 dimension. And replace the proofs with references to more general theorems. So the tower \"rebuilds itself\" adjusting for the new goal</p>",
        "id": 197071709,
        "sender_full_name": "Golol",
        "timestamp": 1589136592
    },
    {
        "content": "<p>Right. So I waited patiently even though there were students at Xena who wanted the chain rule</p>",
        "id": 197071710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136592
    },
    {
        "content": "<p>Golol, maybe, but you still spent the time formalizing all the one-variable stuff.</p>",
        "id": 197071776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589136638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243838\">Golol</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197071709\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197071709\">said</a>:</p>\n<blockquote>\n<p>make lean automatically replace</p>\n</blockquote>\n<p>no</p>",
        "id": 197071785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136647
    },
    {
        "content": "<p>these things are never as automatic as you would hope</p>",
        "id": 197071801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136666
    },
    {
        "content": "<p>aah a shame :D</p>",
        "id": 197071805,
        "sender_full_name": "Golol",
        "timestamp": 1589136679
    },
    {
        "content": "<p>Thanks for the answers, very interesting.</p>",
        "id": 197071864,
        "sender_full_name": "Golol",
        "timestamp": 1589136733
    },
    {
        "content": "<p>However, <em>you</em> can do that, write a PR making the necessary changes and so on, and it is probably not <em>that</em> expensive, maybe a day's work for a month or more worth of material</p>",
        "id": 197071870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136761
    },
    {
        "content": "<p>But if I were in that position, I would have kicked myself for not reading ahead in the book and realizing I was going to to this eventually</p>",
        "id": 197071899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136817
    },
    {
        "content": "<p>We occasionally change definitions, for example the definition of a normal subgroup will change at some point in the future to something mathematically equivalent, and then one will have to go and redo all the proofs</p>",
        "id": 197071907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136833
    },
    {
        "content": "<p>not all the proofs, just the foundational ones</p>",
        "id": 197071948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589136854
    },
    {
        "content": "<p>Getting it right the first time is not always easy</p>",
        "id": 197071954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589136864
    },
    {
        "content": "<p>Given an element <code>x : ideal.quotient I</code> for some <code>I : ideal R</code> how does one prove that there exists a lift in <code>R</code>? I can't seem to find it anywhere. Is <code>quot.ind</code> the right thing?</p>",
        "id": 197073336,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1589138524
    },
    {
        "content": "<p><code>exists_rep</code></p>",
        "id": 197073415,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589138616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197071588\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197071588\">said</a>:</p>\n<blockquote>\n<p>On the informal side there is the third even more powerful approach of course</p>\n</blockquote>\n<p>And I guessed right!</p>",
        "id": 197075916,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589141810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243838\">Golol</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197070562\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197070562\">said</a>:</p>\n<blockquote>\n<p>So, I checked this out a bit and it makes me wonder: Is there a guideline to the question which level of generality a piece of mathematics should be formalized? Should the divergence theorem be written down and proven in the way it is normally done in an analysis course, or should the most super general form of stokes theorem be formalized and then the divergence theorem is noted as a corollary of the more general theorem?</p>\n</blockquote>\n<p>Others already explained the general issue pretty well, but I can comment on the specific question of Stokes. In this case the theorem is complicated enough that optimization is welcome. And here the optimization is clearly to prove the general version first. Actually I've never seen a satisfying account of the special case. Without the proper geometric setup this theorem is very hard to prove rigorously. With the proper geometric setup you prove the general case.</p>",
        "id": 197076821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589142657
    },
    {
        "content": "<p>Given <code>a ≤ b</code>, with <code>a b: R</code>, how can I have <code>\\exists ϵ &gt; 0, a = b - ϵ</code> ? I tried <code>cases</code>, but it didn't work (bonus question with <code>&lt;</code>)</p>",
        "id": 197084033,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589151806
    },
    {
        "content": "<p>you can't</p>",
        "id": 197084079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589151856
    },
    {
        "content": "<p>good news</p>",
        "id": 197084115,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589151955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> but why? like, obviously, ϵ = b - a works, right?</p>",
        "id": 197084158,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589151981
    },
    {
        "content": "<p>reread your question</p>",
        "id": 197084161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589151999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084161\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084161\">said</a>:</p>\n<blockquote>\n<p>reread your question</p>\n</blockquote>\n<p>fixed</p>",
        "id": 197084172,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152024
    },
    {
        "content": "<p>still not true</p>",
        "id": 197084177,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589152062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084177\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084177\">said</a>:</p>\n<blockquote>\n<p>still not true</p>\n</blockquote>\n<p><code>a - b ≤ 0</code>, thus: <code>b - a ≥ 0</code>, taking <code>e = b - a</code>, <code>a = b - e = b - (b - a) = a</code>, right?<br>\nIs there any counterexample, it's a bit late so I might sound completely stupid</p>",
        "id": 197084285,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152221
    },
    {
        "content": "<p><code>ϵ &gt; 0</code>?</p>",
        "id": 197084369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589152412
    },
    {
        "content": "<p>Indeed, ≥</p>",
        "id": 197084373,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084369\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084369\">said</a>:</p>\n<blockquote>\n<p><code>ϵ &gt; 0</code>?</p>\n</blockquote>\n<p>Fixed, but even assuming the fix, is there a way?</p>",
        "id": 197084417,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152469
    },
    {
        "content": "<p><code>use b-a</code></p>",
        "id": 197084438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589152535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084438\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084438\">said</a>:</p>\n<blockquote>\n<p><code>use b-a</code></p>\n</blockquote>\n<p>I was more thinking of a lemma which takes a <code>a ≤ b</code> and outputs an hypothesis <code>h: a = b + ϵ</code> and <code>h2: ϵ ≥ 0</code> and <code>ϵ: R</code></p>",
        "id": 197084487,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152592
    },
    {
        "content": "<p>which I could do using <code>obtain &lt; ϵ, hϵ, h &gt; := this_lemma</code></p>",
        "id": 197084506,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152649
    },
    {
        "content": "<p>why not just take <code>b-a</code></p>",
        "id": 197084654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589152780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084654\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197084654\">said</a>:</p>\n<blockquote>\n<p>why not just take <code>b-a</code></p>\n</blockquote>\n<p>Maybe I'm wrong but it looks simple rather than having to pause in the proof and show that I have this b - a, which verifies hϵ and h, but maybe there is simpler things to do?</p>",
        "id": 197084753,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589152899
    },
    {
        "content": "<p>not really, it sort of gets rolled up into later parts of the proof</p>",
        "id": 197085037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589153128
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 197085090,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589153179
    },
    {
        "content": "<p>But doesn't it become too repetitive; is there any example of how it's done in mathlib <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 197085172,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589153295
    },
    {
        "content": "<p>do you have a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>?</p>",
        "id": 197085189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589153310
    },
    {
        "content": "<p>I can demonstrate with an example</p>",
        "id": 197085200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589153323
    },
    {
        "content": "<p>If you really want, you can just state and prove a lemma yourself</p>",
        "id": 197085238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589153358
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_ge_of_seq_ge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">Hineq</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"c1\">-- obtain ⟨ ε, hε, h ⟩ := eq_of_lt hla,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197085343,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589153452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197085238\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197085238\">said</a>:</p>\n<blockquote>\n<p>If you really want, you can just state and prove a lemma yourself</p>\n</blockquote>\n<p>this is what I'm doing, but really curious of the proper way</p>",
        "id": 197085351,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589153484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ^</p>",
        "id": 197085365,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589153520
    },
    {
        "content": "<p>You missed the part about \"working\" I think. what are your imports? what is <code>d</code>?</p>",
        "id": 197085468,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589153606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197085468\" title=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197085468\">said</a>:</p>\n<blockquote>\n<p>You missed the part about \"working\" I think. what are your imports? what is <code>d</code>?</p>\n</blockquote>\n<p>Fixed, sorry for that</p>",
        "id": 197085626,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589153717
    },
    {
        "content": "<p>Here's my full proof up to the famous lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_of_lt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">limit_ge_of_seq_ge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">Hineq</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">eq_of_lt</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hcv</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hcv_N</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">abs_sub</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">hcv</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hineq_N</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Hineq</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Don't know if that could be trivially done, note that I didn't really think through the mathematical content, so maybe a direct proof would look better</p>",
        "id": 197086528,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589154903
    },
    {
        "content": "<p>Here's a really simple modification that avoids the lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_ge_of_seq_ge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">Hineq</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n<span class=\"n\">set</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hcv</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hcv_N</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">abs_sub</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">hcv</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hineq_N</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">calc</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Hineq</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197087287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589155947
    },
    {
        "content": "<p>and here's a more radical simplification making use of <code>linarith</code> for all the hard work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">converge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">limit_ge_of_seq_ge</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">converge</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Hineq</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hla</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">hcv</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">Hineq</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">abs_lt</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hcv</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197087459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589156208
    },
    {
        "content": "<p>That was super clear, many thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 197087734,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589156472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> you should probably do the tutorials exercises anyway. You're mostly beyond what is taught here, but this kind of lemma is totally covered there. Also you should stop using that \"noob question(s)\" thread.</p>",
        "id": 197108162,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589181506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197108162\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> you should probably do the tutorials exercises anyway. You're mostly beyond what is taught here, but this kind of lemma is totally covered there. Also you should stop using that \"noob question(s)\" thread.</p>\n</blockquote>\n<p>Sorry for that, I thought that sounded like a noob question, where are tutorials exercises?</p>",
        "id": 197131962,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589196874
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/tutorials\">#tutorials</a> ?</p>",
        "id": 197132025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589196901
    },
    {
        "content": "<p>oh no way, it worked :D</p>",
        "id": 197132046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589196913
    },
    {
        "content": "<p>sure it's a noob question, but we'd rather that the noob question thread did not exist. new questions get new threads.</p>",
        "id": 197135974,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589199154
    },
    {
        "content": "<p>Is the following a valid way to state \"If R is a commie ring, x is a nilpotent of R and 1 is the mult. identity of R, then 1 + x is a unit.\":</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">one_add_nilpotent</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 197728321,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589565217
    },
    {
        "content": "<p>We might want to add <code>is_nilpotent</code></p>",
        "id": 197728563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565323
    },
    {
        "content": "<p>But your statement looks fine to me.</p>",
        "id": 197728598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565342
    },
    {
        "content": "<p>The name would be <code>is_unit_add_one_of_is_nilpotent</code></p>",
        "id": 197728714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565371
    },
    {
        "content": "<p>I wasn't sure if lean would automatically apply the homomorphism Z -&gt; R for me or not</p>",
        "id": 197728742,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589565382
    },
    {
        "content": "<p>well, <code>one_add</code> with this version</p>",
        "id": 197728810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565397
    },
    {
        "content": "<p>Doesn't nilpotent include that n &gt; 0? I'm pretty sure your result would still be true but anyway</p>",
        "id": 197728812,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589565398
    },
    {
        "content": "<p>If <code>n = 0</code>, then <code>1 = 0</code> and therefore <code>r ^ 1 = 0</code> too</p>",
        "id": 197728914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197728914\">said</a>:</p>\n<blockquote>\n<p>If <code>n = 0</code>, then <code>1 = 0</code> and therefore <code>r ^ 1 = 0</code> too</p>\n</blockquote>\n<p>Yeah but nilpotent elements are defined to be non-zero if I remember right</p>",
        "id": 197729096,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589565511
    },
    {
        "content": "<p>As in, the result should still be provable but it's not exactly the statement desired</p>",
        "id": 197729265,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589565584
    },
    {
        "content": "<p>hm, I would leave that out of the definition</p>",
        "id": 197729347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565605
    },
    {
        "content": "<p>I'm not sure, I think you want statements like \"the set of nilpotents is the intersection of all prime ideals\" rather than \"the set of nilpotents and zero is the intersection of all primes\" but maybe thats just me</p>",
        "id": 197729368,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589565612
    },
    {
        "content": "<p>that doesn't sound like the kind of constraint that would be useful for theorem proving</p>",
        "id": 197729394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589565624
    },
    {
        "content": "<p>Well, I would like <code>{ x | is_nilpotent x }</code> to be an ideal</p>",
        "id": 197729400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565626
    },
    {
        "content": "<p>I think I'm not being clear! I absolutely don't mean to say that OP is wrong or insist on any definition of nilpotent, but just to say that OP's question was whether or not they'd stated the maths theorem in lean correctly - going by the definition of nilpotent on wikipedia and mathworld, they would need <code>n &gt; 0</code> for it to match perfectly</p>",
        "id": 197729604,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589565718
    },
    {
        "content": "<p>btw I added an epsilon of things on nilpotents in <a href=\"https://github.com/leanprover-community/mathlib/pull/1822/files\">https://github.com/leanprover-community/mathlib/pull/1822/files</a> if you want to extract them (hopefully I'll clean it up this branch one day soon)</p>",
        "id": 197729798,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589565799
    },
    {
        "content": "<p>Huh. nlab helpfully says \"natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>\"</p>",
        "id": 197729843,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565818
    },
    {
        "content": "<p>(obviously, it doesn't make a real difference for reasons already given above)</p>",
        "id": 197729874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565838
    },
    {
        "content": "<p>stacks project says \"for some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">n \\in \\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span>\"</p>",
        "id": 197730030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565904
    },
    {
        "content": "<p>of course the stacks project probably defines <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">N</span></span></span></span></span>... somewhere</p>",
        "id": 197730070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589565920
    },
    {
        "content": "<p>But they define <code>N</code></p>",
        "id": 197730088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565927
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/055X\">https://stacks.math.columbia.edu/tag/055X</a></p>",
        "id": 197730201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565970
    },
    {
        "content": "<p>No <code>0</code></p>",
        "id": 197730209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565974
    },
    {
        "content": "<p>It's not even a semiring...</p>",
        "id": 197730248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589565991
    },
    {
        "content": "<blockquote>\n<p>Comments (2)</p>\n<p>Comment <a href=\"https://github.com/leanprover-community/mathlib/issues/3544\">#3544</a> by Laurent Moret-Bailly on August 27, 2018 at 14:12<br>\n    Do you really mean that 0∉N?</p>\n<p>Comment <a href=\"https://github.com/leanprover-community/mathlib/issues/3676\">#3676</a> by Johan on October 22, 2018 at 10:26<br>\n    Yes, I do. Also, I think it would be too late to change it now. Sorry if this isn't the standard convention.</p>\n</blockquote>",
        "id": 197730355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589566044
    },
    {
        "content": "<p>Also, can someone show me how to define the jacobson radical (intersection of all maximal ideals) of a commutative ring in Lean? I don't think this is defined in mathlib</p>",
        "id": 197730509,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589566109
    },
    {
        "content": "<p>I think it's the last PR in the list</p>",
        "id": 197730570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589566142
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/768\">#768</a></p>",
        "id": 197730616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589566174
    },
    {
        "content": "<p><code>please-adopt</code></p>",
        "id": 197730624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589566179
    },
    {
        "content": "<p>Hey, I just wanted to check I'm parsing the following definition (from the tutorials) correctly:</p>",
        "id": 197743506,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589571609
    },
    {
        "content": "<p><code>def is_seq_sup (M : ℝ) (u : ℕ → ℝ) :=\n(∀ n, u n ≤ M) ∧ ∀ ε &gt; 0, ∃ n₀, u n₀ ≥ M - ε</code></p>\n<p>Does this mean that for each <code>n</code> with ```u n \\le</p>",
        "id": 197743549,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589571637
    },
    {
        "content": "<p>Ugh, sorry. I keep sending the message before I've finished. Let me try that again.</p>",
        "id": 197743578,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589571657
    },
    {
        "content": "<p>Uncheck \"Press Enter to send\"</p>",
        "id": 197743603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571675
    },
    {
        "content": "<p>Then you can send with <code>Ctrl-Enter</code></p>",
        "id": 197743621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571685
    },
    {
        "content": "<p>\"M is a sup of sequence u\" is defined to be \"all members of u are less than or equal to M, and u gets arbitrarily close to M\"</p>",
        "id": 197743633,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589571699
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197743633\">said</a>:</p>\n<blockquote>\n<p>\"M is a sup of sequence u\" is defined to be \"all members of u are less than or equal to M, and u gets arbitrarily close to M\"</p>\n</blockquote>\n<p>Great, thanks. For some reason I was reading that as for all <code>n`` such that </code>u n \\le M```, which would obviously not be the right definition.</p>",
        "id": 197743760,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589571765
    },
    {
        "content": "<p>You can quote things inline using single backticks - triple backticks mark out a multi-line block</p>",
        "id": 197743830,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589571812
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 197743850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589571827
    },
    {
        "content": "<p>Thank you. That helps.</p>",
        "id": 197743873,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589571842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197743633\">said</a>:</p>\n<blockquote>\n<p>\"M is a sup of sequence u\" is defined to be \"all members of u are less than or equal to M, and u gets arbitrarily close to M\"</p>\n</blockquote>\n<p>So this is not quite a standard definition, no? Or am I confused? For instance, the sequence {1/n}, I would typically think of the sup of that sequence as 1, but that does not satisfy the definition I stated.</p>",
        "id": 197744178,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589571968
    },
    {
        "content": "<p>Here n is in {1,2,3,...}.</p>",
        "id": 197744302,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589572055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300537\">Carlo Cabrera</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197744178\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197743633\">said</a>:</p>\n<blockquote>\n<p>\"M is a sup of sequence u\" is defined to be \"all members of u are less than or equal to M, and u gets arbitrarily close to M\"</p>\n</blockquote>\n<p>So this is not quite a standard definition, no? Or am I confused? For instance, the sequence {1/n}, I would typically think of the sup of that sequence as 1, but that does not satisfy the definition I stated.</p>\n</blockquote>\n<p>yes, <code>1/n</code> gets arbitrarily close to <code>1</code><br>\nfor any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\varepsilon&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">ε</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> there is an element of the sequence within <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ε</span></span></span></span> of <code>1</code><br>\n(namely, it's <code>1</code>)</p>",
        "id": 197744319,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589572067
    },
    {
        "content": "<p>Right, of course, I am just confused. Thank you!</p>",
        "id": 197744455,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589572136
    },
    {
        "content": "<p>Specifically, <code>1</code> is that element, for all epsilon</p>",
        "id": 197744459,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589572136
    },
    {
        "content": "<p>Ah, yes. I see it now. I was mentally inserting parentheses in the wrong place. Silly me. Thanks for assist, everyone.</p>",
        "id": 197744956,
        "sender_full_name": "Carlo Cabrera",
        "timestamp": 1589572458
    },
    {
        "content": "<p>Does <code>leanpkg build</code> always do a full build, or does it only compile the files that were changed (and their dependents) since the last build?</p>",
        "id": 197745653,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589572872
    },
    {
        "content": "<p>The last one</p>",
        "id": 197745687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572897
    },
    {
        "content": "<p>You need to manually remove all <code>.olean</code> files if you want a full build</p>",
        "id": 197745702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572909
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2691\">https://github.com/leanprover-community/mathlib/pull/2691</a></p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I believe this addresses the issues with <a href=\"https://github.com/leanprover-community/mathlib/issues/768\">#768</a>?</p>",
        "id": 197753074,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589577143
    },
    {
        "content": "<p><del>But you don't add the Jacobson ring stuff?</del></p>",
        "id": 197753259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577246
    },
    {
        "content": "<p>Oh is there a list of stuff that needs to be added?</p>",
        "id": 197753300,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589577272
    },
    {
        "content": "<p>It's a PR into Kenny's branch.</p>",
        "id": 197753301,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589577273
    },
    {
        "content": "<p>I just addressed <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>'s comments on the PR</p>",
        "id": 197753341,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589577303
    },
    {
        "content": "<p>I missed that it was a PR to the branch. <em>Many</em> thanks!</p>",
        "id": 197753376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577325
    },
    {
        "content": "<p>Github could have made that more obvious</p>",
        "id": 197753407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589577356
    },
    {
        "content": "<p>thanks!</p>",
        "id": 197753505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577408
    },
    {
        "content": "<p>Actually I would be interested in formalizing some stuff about Jacobson rings. I could start by looking at what the stacks project has on the subject and try to formalize that?</p>",
        "id": 197753530,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589577423
    },
    {
        "content": "<p>Np, it was really easy and I don't really understand what I did tbh</p>",
        "id": 197753573,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589577447
    },
    {
        "content": "<p>That's a great idea. For any new concept, such as Jacobson rings, it's good to make a decent API.</p>",
        "id": 197753601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589577466
    },
    {
        "content": "<p>I edited the PR comment. I suggest discussing this PR and related matters in a separate thread.</p>",
        "id": 197753606,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589577469
    },
    {
        "content": "<p>I merged it, but it seems like there are unresolved conflicts with master</p>",
        "id": 197753712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577516
    },
    {
        "content": "<p>Imagine that!</p>",
        "id": 197753726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589577522
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">primary</span><span class=\"bp\">-</span><span class=\"n\">ideal</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">{</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"o\">:=</span>\n<span class=\"bp\">=======</span>\n<span class=\"kn\">instance</span> <span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"o\">:=</span>\n<span class=\"bp\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">master</span>\n</code></pre></div>",
        "id": 197753886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577613
    },
    {
        "content": "<p>I don't know what to do with this. Advice?</p>",
        "id": 197753933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577652
    },
    {
        "content": "<p>the change is in accordance with one of Chris' comments</p>",
        "id": 197753952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577665
    },
    {
        "content": "<p>When in doubt don't make it an instance</p>",
        "id": 197754853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589578222
    },
    {
        "content": "<p>When simp tactic solves a goal, is it possible to make Lean print out all the steps it had taken internally to reach the goal?</p>",
        "id": 197757800,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1589580361
    },
    {
        "content": "<p>Yes, add this before your code: <code>set_option trace.simplify.rewrite true</code></p>\n<p>See <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a> for more tricks.</p>",
        "id": 197757898,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589580427
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197758061,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1589580532
    },
    {
        "content": "<p>hi Apurva! an intermediate step between naked <code>simp</code> and printing everything is to use <code>squeeze_simp</code>, which just tells you which lemmas <code>simp</code> used, and also lets you replace your slow <code>simp</code> with a fast <code>simp only [list, of, lemmas]</code></p>",
        "id": 197758215,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589580649
    },
    {
        "content": "<p>Hey Jalex! :D </p>\n<p>Thanks, this is really cool.</p>",
        "id": 197758497,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1589580859
    },
    {
        "content": "<p>it's possible you came here from this link, but if not you should check out our \"community webpage\"<br>\n<a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a></p>",
        "id": 197758818,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589581151
    },
    {
        "content": "<p>Yeah, or at least I think so. Looks like the website has gotten updated!</p>",
        "id": 197762405,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1589584226
    },
    {
        "content": "<p>yes, it's definitely still in development, so if there's any information you think should be more or less obvious there, let us know :)</p>",
        "id": 197762451,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589584309
    },
    {
        "content": "<p>How do I ask Lean to unroll definitions?</p>",
        "id": 197762715,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589584550
    },
    {
        "content": "<p><code>unfold &lt;name&gt;</code> often works</p>",
        "id": 197762820,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589584611
    },
    {
        "content": "<p>if you post <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> showing the place you want a definition unfolded, then I could play with it and give a more useful answer</p>",
        "id": 197762910,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589584674
    },
    {
        "content": "<p><code>rw &lt;name&gt;</code>, <code>simp [&lt;name&gt;]</code>, <code>dsimp [&lt;name&gt;]</code>, <code>unfold &lt;name&gt;</code>, <code>dunfold &lt;name&gt;</code>, and <code>delta &lt;name&gt;</code> can all be used to unfold definitions</p>",
        "id": 197763110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589584815
    },
    {
        "content": "<p>if you aren't sure which is appropriate, <code>unfold</code> and <code>rw</code> are good choices</p>",
        "id": 197763146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589584881
    },
    {
        "content": "<p>I was looking for unfold, thank you!</p>",
        "id": 197763408,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589585143
    },
    {
        "content": "<p>I'm getting tons of errors when compiling mathlib locally...is that a problem?</p>",
        "id": 197766993,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589589412
    },
    {
        "content": "<p><code>leanproject up</code> should be doing all of this for you.</p>",
        "id": 197767023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589450
    },
    {
        "content": "<p>The errors might mean that you're e.g. using the wrong version of Lean to compile. <code>leanproject</code> will get it right.</p>",
        "id": 197767092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589488
    },
    {
        "content": "<p>I simply ran <code>leanpkg build</code>. Looks like it was related to some changes I made (I simply added an extra import to one file, and that caused an explosion of errors). Reverting to master seems to have fixed it</p>",
        "id": 197767135,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589589555
    },
    {
        "content": "<p>Don't use <code>leanpkg</code> any more. It doesn't work with modern Lean I don't think. It's a deprecated tool, completely replaced by <code>leanproject</code>.</p>",
        "id": 197767204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589637
    },
    {
        "content": "<p>No it's completely fine still</p>",
        "id": 197767209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589589648
    },
    {
        "content": "<p>I know leanproject still uses it under the hood but I'm telling the party line aren't I? It might still work but it's also deprecated.</p>",
        "id": 197767226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589685
    },
    {
        "content": "<p>I thought something didn't work with Leans which weren't &lt;= 3.4.2</p>",
        "id": 197767235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589696
    },
    {
        "content": "<p>Oh if this is for propaganda purposes, then okay</p>",
        "id": 197767306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589589767
    },
    {
        "content": "<p>I still use leanproject</p>",
        "id": 197767310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589589770
    },
    {
        "content": "<p>I mean leanpkg</p>",
        "id": 197767315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589589773
    },
    {
        "content": "<p>Is <code>leanproject up</code> a drop-in replacement for <code>leanpkg build</code>?</p>",
        "id": 197767413,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589589881
    },
    {
        "content": "<p>Oh...looks like it just downloads compiled lean files whenever it can</p>",
        "id": 197767434,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589589919
    },
    {
        "content": "<p>/me feels sad for having made my poor laptop compile the entire mathlib many, many times</p>",
        "id": 197767443,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589589944
    },
    {
        "content": "<p>Actually <code>leanproject up</code> doesn't seem to work when I edit files</p>",
        "id": 197767569,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589590099
    },
    {
        "content": "<p>And \"whenever it can\" includes all branches of mathlib, but obviously it can't download oleans from a cloud storage if you have just edited a lean file on your machine and the olean file does not yet exit</p>",
        "id": 197767587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589590154
    },
    {
        "content": "<p>I was hoping that it would detect the edited files and dependents, and just recompile those</p>",
        "id": 197767596,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589590185
    },
    {
        "content": "<p>Yeah, <code>leanproject up</code> only downloads files, if you want to compile stuff you still have to run <code>leanpkg build</code> (which just runs <code>lean --make src/</code> I think).</p>",
        "id": 197767597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589590186
    },
    {
        "content": "<p>Lean already does its best to not compile stuff it doesn't have to. The problem is that any file that (transitively) imports a changed file has to be recompiled.</p>",
        "id": 197767658,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589590228
    },
    {
        "content": "<p>Ok, I'm trying to state that ordered abelian groups are torsion-free. I figured something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>would do it, but Lean doesn't like the <code>n * a</code> expression (it wants <code>a</code> to be a natural). Any advice on how to proceed?</p>",
        "id": 197767968,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589590679
    },
    {
        "content": "<p>do it with a multiplicative group and write <code>a^n</code>?</p>",
        "id": 197768035,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589590757
    },
    {
        "content": "<p>Instead of <code>*</code>, I think you want to use whatever symbol is used for <code>smul</code> (scalar multiplication).</p>",
        "id": 197768040,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589590770
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/group_action.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/group_action.lean</a></p>",
        "id": 197768099,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589590831
    },
    {
        "content": "<p>Oof, importing group.theory.group_action in algebra.ordered_group is causing a cyclical import error</p>",
        "id": 197768396,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589591211
    },
    {
        "content": "<p><code>\\bub</code> is the notation for the nat action on an additive group</p>",
        "id": 197768667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589591552
    },
    {
        "content": "<p><code>*</code> has type <code>X-&gt; X-&gt; X</code> so can't be used here. This explains your error</p>",
        "id": 197768685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589591601
    },
    {
        "content": "<p>I think I need to include group_theory.group_action to be able to use \\bub</p>",
        "id": 197768771,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589591687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294709\">Aniruddh Agarwal</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/197768396\">said</a>:</p>\n<blockquote>\n<p>Oof, importing group.theory.group_action in algebra.ordered_group is causing a cyclical import error</p>\n</blockquote>\n<p>uh, I think what you want to be doing is making a new file that imports both of these<br>\nunless you're contributing to mathlib and have some very strong reason that your theorems need to go into that file</p>",
        "id": 197768780,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589591698
    },
    {
        "content": "<p>If when writing a math paper, you needed to make a definition in section 5 that required notions from sections 2 and 3, this is fine</p>",
        "id": 197768854,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589591779
    },
    {
        "content": "<p>but you would try not to put that notion into section 2</p>",
        "id": 197768858,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589591786
    },
    {
        "content": "<p>Lean instead forces this good practice on you</p>",
        "id": 197768865,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589591807
    },
    {
        "content": "<p>Huh I guess it would be nice to be able to contribute this to mathlib eventually. I'm working towards some results about valuation rings</p>",
        "id": 197768937,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589591912
    },
    {
        "content": "<p>sure, regardless of what you're going to do, you should not currently be doing your work <em>in</em> the ordered_ring file in the library. that is sure to cause you all sorts of problems.</p>",
        "id": 197769480,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589592763
    },
    {
        "content": "<p>you should have a project that \"depends on mathlib\" in the sense that it comes out of <code>leanproject new &lt;project-name&gt;</code></p>",
        "id": 197769491,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589592794
    },
    {
        "content": "<p>and then you can write new files in the <code>src/</code> directory of that project</p>",
        "id": 197769497,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589592812
    },
    {
        "content": "<p>Well, if the work is likely to be contributed to mathlib then it could also make sense to work directly on the mathlib files in a branch. The question of which file(s) new material should go into can get tricky, but you could always create a new file somewhere arbitrary and move things after you get feedback.</p>",
        "id": 197769646,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589593079
    },
    {
        "content": "<p>This is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ordered_add_comm_group</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">torsion_free</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>and I'm getting this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">configuring</span> <span class=\"n\">mathlib</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--make src</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">anrddh</span><span class=\"bp\">/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">ring_theory</span><span class=\"bp\">/</span><span class=\"n\">valuation_rings</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">30</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_scalar</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span>\n<span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">status</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 197769836,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589593330
    },
    {
        "content": "<p>I'm not at Lean right now, but what if you try integer n instead of natural n?</p>",
        "id": 197770369,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589594277
    },
    {
        "content": "<p>It works if you replace your imports with <code>import algebra.module</code>.</p>",
        "id": 197770415,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589594301
    },
    {
        "content": "<p>Makes sense, ty!</p>",
        "id": 197770429,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589594351
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/module.html#add_comm_monoid.nat_semimodule\">this</a> might be the relevant instance.</p>",
        "id": 197770432,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589594359
    },
    {
        "content": "<p>Yep, and here's how I confirmed this guess:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ordered_add_comm_group</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- At first I tried using:</span>\n<span class=\"c1\">-- set_option trace.class_instances true</span>\n<span class=\"c1\">-- but that spits out hundreds of lines of output which is hard to parse.</span>\n\n<span class=\"c1\">-- So I opted for a more manual way</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c1\">-- What did `apply_instance` find?</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">blah</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem blah : Π {α : Type u} [_inst_1 : ordered_add_comm_group α], has_scalar ℕ α :=</span>\n<span class=\"cm\">λ {α : Type u} [_inst_1 : ordered_add_comm_group α], mul_action.to_has_scalar</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- So now I want to know where the `mul_action` comes from</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">blah2</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">blah2</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem blah2 : Π {α : Type u} [_inst_1 : ordered_add_comm_group α], mul_action ℕ α :=</span>\n<span class=\"cm\">λ {α : Type u} [_inst_1 : ordered_add_comm_group α], distrib_mul_action.to_mul_action</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- And where does `distrib_mul_action` come from?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">blah3</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">blah3</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem blah3 : Π {α : Type u} [_inst_1 : ordered_add_comm_group α], distrib_mul_action ℕ α :=</span>\n<span class=\"cm\">λ {α : Type u} [_inst_1 : ordered_add_comm_group α], semimodule.to_distrib_mul_action</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- Aha, now we know a `semimodule` instance is in play</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">blah4</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"bp\">ℕ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">blah4</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem blah4 : Π {α : Type u} [_inst_1 : ordered_add_comm_group α], semimodule ℕ α :=</span>\n<span class=\"cm\">λ {α : Type u} [_inst_1 : ordered_add_comm_group α], add_comm_monoid.nat_semimodule</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- and there it is.</span>\n</code></pre></div>",
        "id": 197771596,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589596001
    },
    {
        "content": "<p>What's the difference between:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">comap_ne_top</span> <span class=\"bp\">_</span> <span class=\"n\">hK</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_comap</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hK</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">{</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">comap_ne_top</span> <span class=\"bp\">_</span> <span class=\"n\">hK</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_comap</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">hK</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 197815621,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589663834
    },
    {
        "content": "<p>In the former, you're saying that whenever <code>is_prime.comap</code> is called, the type class resolution system will try to find an instance of <code>is_prime K</code> somewhere in the ambient world - which may involve \"looking arbitrarily far away\" from the call site. (Analogy: once you've proved that Z is a ring, Lean's type class resolution system will be able to supply this fact wherever it's required later.) In the latter, you're asking the caller of <code>is_prime.comap</code> to provide an instance of <code>is_prime K</code> at every call, but you're also kind of promising that local type inference will be able to find an appropriate instance locally each time without the programmer having to specify it manually.</p>",
        "id": 197815954,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589664381
    },
    {
        "content": "<p>Here, the second version is doomed</p>",
        "id": 197816035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589664523
    },
    {
        "content": "<p>You need to read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments</a> and maybe <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments</a></p>",
        "id": 197816054,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589664563
    },
    {
        "content": "<p>Hmm, why would I ever prefer the second version to the first version?</p>",
        "id": 197816056,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589664577
    },
    {
        "content": "<p>In this case the second version will fail</p>",
        "id": 197816068,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589664599
    },
    {
        "content": "<p>But in general this mechanism is very useful, and much cheaper than the square bracket one</p>",
        "id": 197816117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589664642
    },
    {
        "content": "<p>These are extremely delicate issues for a new Lean user</p>",
        "id": 197816546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589665281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span> here is the way I explain it to beginners. Lean is all about making functions, and functions have inputs. Lean function inputs are basically of three kinds, and you can tell them apart by the brackets they use: <code>(x)</code>, <code>{x}</code> and <code>[x]</code>. The first kind of bracket means \"the user will supply this input when they are writing the code\". The second of bracket means \"an algorithm called unification, written in C++ and which you don't need to know too much about right now, will supply this input\" and the third means \"an algorithm called type class inference, written in C++ and which you don't need to know too much about right now, will supply this input\". That's the place to start.</p>",
        "id": 197816679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589665529
    },
    {
        "content": "<p>I wrote a lot of functions with <code>()</code> inputs initially, because they were the only ones I understood. Then I got into <code>{}</code> a bit because actually it's not too hard. It took me a long time to understand <code>[]</code> and in some sense only very few people here understand it well. But for the longest time I just did was I was told -- people would advise me on which brackets to use and I would use them as directed.</p>",
        "id": 197816737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589665613
    },
    {
        "content": "<p><code>{}</code> just means \"if you think about, you can actually guess this input yourself\". <code>[]</code> means \"if you put enough information into a system called the type class system, Lean will be able to figure this one out\".</p>",
        "id": 197816751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589665667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span>, make new topics for new questions please! This topic is a hot mess, and you're generating questions for which it would be nice to have easily-findable answers later :)</p>",
        "id": 197818674,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589668896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span>, I think you can actually go back to your first question, and edit the topic there. There's a checkbox for \"change for later messages in this topic\", too.</p>",
        "id": 197830007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589690161
    },
    {
        "content": "<p>How does one work with an <code>ite</code> expression in a tactic proof?</p>",
        "id": 198400536,
        "sender_full_name": "Billy Price",
        "timestamp": 1590114260
    },
    {
        "content": "<p><code>split_ifs</code></p>",
        "id": 198400822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590114649
    },
    {
        "content": "<p>(or <code>rw if_pos</code>)</p>",
        "id": 198400836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590114668
    },
    {
        "content": "<p>I am trying to run this code: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_cast_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and am getting this error: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>It looks like LEAN is unable to coerce but I am not able to figure out how to do that explicitly. </p>\n<p>This is the output of : <code>#check char_p.int_cast_eq_zero_iff</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">int_cast_eq_zero_iff</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"err\">↑</span><span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 198587242,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1590333340
    },
    {
        "content": "<p>I think you need <code>char_p.cast_eq_zero_iff</code> as your <code>a</code> is a nat not an int.</p>",
        "id": 198587370,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590333485
    },
    {
        "content": "<p>I'd recommend you change <code>a</code> to be an int instead however to prove this.</p>",
        "id": 198587513,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590333734
    },
    {
        "content": "<p>Thanks a lot !! That worked.</p>\n<p>It is a bit annoying though that there are different set of theorems for <code>nat</code> and <code>int</code> and lean cannot coerce automatically between the two. <br>\nThe nomenclature is also a bit inconsistent. I spent a lot of time searching for a <code>nat_cast_eq_zero_iff</code> :-/</p>",
        "id": 198587588,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1590333891
    },
    {
        "content": "<p>It turns out dealing with the difference between <code>nat</code> and <code>int</code> is hard... :-)</p>",
        "id": 198587609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590333936
    },
    {
        "content": "<p>You definitely want to learn about <code>norm_cast</code>, <code>push_cast</code>, and their friends.</p>",
        "id": 198587620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590333961
    },
    {
        "content": "<p>But it is still a struggle.</p>",
        "id": 198587658,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590333965
    },
    {
        "content": "<p>Haha, will do! </p>\n<p>Wonder if it is possible/worthwhile to create meta-theorems that can pick the appropriate nat or int versions based on the input, some kind of a Sigma-type perhaps...</p>",
        "id": 198587880,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1590334331
    },
    {
        "content": "<p>If you are not a masochist then my advice is to use integers from the start if you are doing arithmetic. Or even rationals, if you have division.</p>",
        "id": 198587948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590334467
    },
    {
        "content": "<p>You (hopefully) don't need to know any of the names of the lemmas if you learn how to use <code>norm_cast</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now this is a question about integers</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But if this is the first line of your proof, then why didn't you just let a be an integer from the start?</p>",
        "id": 198588033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590334637
    },
    {
        "content": "<p>Yes, I will switch to integers. I was just playing around and couldn't figure out why coercion wasn't working. <br>\nThanks!</p>",
        "id": 198588347,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1590335117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/198587588\">said</a>:</p>\n<blockquote>\n<p>It is a bit annoying though that there are different set of theorems for <code>nat</code> and <code>int</code> and lean cannot coerce automatically between the two. </p>\n</blockquote>\n<p>Spoken like a true mathematician -- we all know <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>⊆</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\subseteq\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.82486em;vertical-align:-0.13597em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. The <code>norm_cast</code> tactic was written at least partially as a response to all the pain mathematicians were going through with this sort of nonsense.</p>",
        "id": 198588628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590335577
    },
    {
        "content": "<p>Hi, first time posting! I'm doing the quantifier exercises (chapter 4 of proving in lean) and hit a road block on something I know how to do informally:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n            <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">pw</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n                <span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">pw</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n            <span class=\"kn\">end</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n            <span class=\"c1\">-- for some arbitrary b : α</span>\n            <span class=\"c1\">-- if it were the case that ¬ p b, then that means ∀ x, ¬ p x (which is absurd by h)</span>\n            <span class=\"c1\">-- so p b (via excluded middle), and therefore ∃ x, p x</span>\n            <span class=\"bp\">_</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>But I cannot define an arbitrary b, at this point in the code, since this requires \"assume b : α, ...\"  and the current type I am constructing is '∃ (x : α), p x' which takes no args. Is there another way to think about this?</p>",
        "id": 198591129,
        "sender_full_name": "Kris Brown",
        "timestamp": 1590339563
    },
    {
        "content": "<p>I see examples like this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- should say: `exact h.left`</span>\n</code></pre></div>\n\n\n<p>But in my fresh install of Lean, viewing in vscode I get the error that \"library_search\" is an unknown identifier. (#library_search doesn't work as a command either, which I also saw someone do in Zulip). Is there any special setup needed for library search?</p>",
        "id": 198592220,
        "sender_full_name": "Kris Brown",
        "timestamp": 1590341378
    },
    {
        "content": "<p>Do <code>import tactic</code> at the top of your file</p>",
        "id": 198592282,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590341487
    },
    {
        "content": "<p><code>import tactic</code></p>",
        "id": 198592283,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590341487
    },
    {
        "content": "<p>thanks, does this need to be installed like mathlib? (I get error \"file 'tactic' not found in the LEAN_PATH\")</p>",
        "id": 198592486,
        "sender_full_name": "Kris Brown",
        "timestamp": 1590341876
    },
    {
        "content": "<p>You need to do this in a project that has mathlib as dependency (or in mathlib itself)</p>",
        "id": 198592543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590341923
    },
    {
        "content": "<p>And you need to \"open project\" in vscode, instead of \"open file\"</p>",
        "id": 198592553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590341943
    },
    {
        "content": "<p>Thanks, that worked!</p>",
        "id": 198593012,
        "sender_full_name": "Kris Brown",
        "timestamp": 1590342796
    },
    {
        "content": "<p>I tried searching for a standard library function like this <code>def const(α : Type*) (β : Type*) (a:α): β -&gt; α := λ _, a</code> but did not find any (I'm used to it from, Haskell prelude for example) - is there no such thing? My library_search also failed to find exact h.left in the example above, so I'm not sure whether to trust it</p>",
        "id": 198593285,
        "sender_full_name": "Kris Brown",
        "timestamp": 1590343281
    },
    {
        "content": "<p>I'm not sure we have that... I think we just always write the lambda, when we need it.</p>",
        "id": 198593736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590344131
    },
    {
        "content": "<p><code>library_search</code> is usually used to search for theorem proofs rather than definitions</p>",
        "id": 198593937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590344419
    },
    {
        "content": "<p>It's <code>function.const</code></p>",
        "id": 198600235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590354481
    },
    {
        "content": "<p>is there a way to shorten the following using normal functional programming pattern matching?</p>\n<p>example (p q : Prop) : p ∧ q → q ∧ p<br>\n| (and.intro h₁ h₂) := and.intro h₂ h₁</p>\n<p>to something like </p>\n<p>example (p q : Prop) :  p ∧ q → q ∧ p<br>\n| (h₁, h₂) = (h₂, h₁)</p>",
        "id": 198607346,
        "sender_full_name": "Jake",
        "timestamp": 1590367308
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198607391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590367388
    },
    {
        "content": "<p>thats great, but out of curiosity is there a way of doing that with pattern matching though without lambdas?</p>",
        "id": 198607466,
        "sender_full_name": "Jake",
        "timestamp": 1590367525
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198607572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590367747
    },
    {
        "content": "<p>awesome thank you</p>",
        "id": 198607636,
        "sender_full_name": "Jake",
        "timestamp": 1590367891
    },
    {
        "content": "<p>are there any code generation tools like Idris where the cases are auto generated (if you hold down ctrl-alt-c)?</p>",
        "id": 198607798,
        "sender_full_name": "Jake",
        "timestamp": 1590368173
    },
    {
        "content": "<p><em>shrug</em></p>",
        "id": 198607821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590368263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245155\">Jake</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/198607798\">said</a>:</p>\n<blockquote>\n<p>are there any code generation tools like Idris where the cases are auto generated (if you hold down ctrl-alt-c)?</p>\n</blockquote>\n<p>Put <code>{!!}</code> after your statement, click on the lightbulb, select \"Generate a list of equations for a recursive definition\"</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">!!</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Then you get this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"c1\">-- do not forget to erase `:=`!!</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">left</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>Delete the <code>:=</code> on the first line like suggested</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">left</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>Although it uses <code>and.intro left right</code> instead of <code>⟨left, right⟩</code></p>",
        "id": 198608196,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590369035
    },
    {
        "content": "<p>I was in the middle of typing that up too <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> . The only thing I'd add is that you can avoid having to delete the extra <code>:=</code> by not typing it in the first place (and you can do that by writing <code>{! p ∧ q → q ∧ p !}</code> instead of <code>p ∧ q → q ∧ p := {! !}</code>). Here are the docs on <a href=\"https://leanprover-community.github.io/mathlib_docs/hole_commands.html#Equations%20Stub\">that hole command</a>. Note that you have to <code>import tactic</code> to use it.</p>",
        "id": 198608243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590369128
    },
    {
        "content": "<p>Can we make ctrl-alt-c do this?</p>",
        "id": 198608315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590369331
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/vscode.20snippets/near/179122991\">this post</a> for how you can bind whatever you like to adding <code>{! !}</code> around selected text.</p>",
        "id": 198608359,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590369413
    },
    {
        "content": "<p>and after you add that command, you can use <code>Ctrl-.</code> to bring up the drop down menu.</p>\n<p>So it's <code>Ctrl-'</code>, <code>Ctrl-.</code>, <code>down</code>*6, <code>Enter</code>.</p>",
        "id": 198608510,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590369775
    },
    {
        "content": "<p>is there a way to make binds for one of the specific dropdown menu items like \"generate a list of equations for a recursive definition\"?</p>",
        "id": 198627972,
        "sender_full_name": "Jake",
        "timestamp": 1590371842
    },
    {
        "content": "<p>Not at the moment, but I think it's feasible. Please open an issue: <a href=\"https://github.com/leanprover/vscode-lean/issues\">https://github.com/leanprover/vscode-lean/issues</a></p>",
        "id": 198628200,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590372271
    },
    {
        "content": "<p>you got it. its just very nice in Idris, where you just keep using commands to expand cases and fill holes, so we basically almost have that here</p>",
        "id": 198628308,
        "sender_full_name": "Jake",
        "timestamp": 1590372491
    },
    {
        "content": "<p>Now if we can just make Ctrl-C Ctrl-C do the same thing as agda-mode… ;)</p>",
        "id": 198635634,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590385824
    },
    {
        "content": "<p>Yeah, I think we'd have to write a nice case-split hole command first.</p>",
        "id": 198635947,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590386383
    },
    {
        "content": "<p>how do you pattern match on a term like p ↔ q?</p>",
        "id": 198680949,
        "sender_full_name": "Jake",
        "timestamp": 1590421129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>Basically the same way you'd pattern match on <code>and</code></p>",
        "id": 198681328,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1590421420
    },
    {
        "content": "<p><code>↔</code> like <code>and</code> is an inductive type with one constructor which takes two inputs</p>",
        "id": 198681492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590421519
    },
    {
        "content": "<p>i'm trying to define the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">{</mo><msup><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>i</mi></mrow></msup><msup><mi>s</mi><mrow><mn>1</mn><mo>+</mo><mi>i</mi></mrow></msup><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo fence=\"true\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\left\\{ r^{n-1-i}s^{1+i} \\ | \\ 0 \\leq i \\leq n-1\\right\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">{</span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord\">∣</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">}</span></span></span></span></span></span>, for input <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">n \\in \\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r,s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> a ring. I tried the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_set</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>this isn't the correct syntax, i'm getting <code>invalid '{' expression, ',', '}', '..', </code>//<code> or </code>|<code> expected</code> and <code>command expected</code>. What's the correct way to define sets like this? Thanks!</p>",
        "id": 198801691,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590517519
    },
    {
        "content": "<p>You need to have just a variable name left of the | for leans set builder notation, so <code>def my_set (r : R) (s : R) (n : ℕ) := \n{ x | ∃ (i:ℕ ) (h : 0≤ i) (h2 :0≤ n-1), x = r^(n-1-i) *s^(i+1) }</code></p>",
        "id": 198803451,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590518411
    },
    {
        "content": "<p>You could alternatively define it as a range of a function taking the set <code>[0, ..., n-1]</code> to <code>R</code>, which is more like your original. <code>set.image (λ i : fin n, r^(n-1-↑i) * s^(↑i + 1))</code></p>",
        "id": 198803741,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590518550
    },
    {
        "content": "<p>ooo yes, i like that one! what is that upwards-pointing arrow next to the <code>i</code>? is that some sort of typeclass promotion?</p>",
        "id": 198804289,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590518797
    },
    {
        "content": "<p>Yeah its a coercion, as I let <code>i : fin n</code> which is the type whose elements are naturals which are less than <code>n</code>, lean sometimes needs a reminder that I want to just treat it as a natural number and not a [natural number, proof that the number is less than n]</p>",
        "id": 198804636,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590518953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/198804636\">said</a>:</p>\n<blockquote>\n<p>Yeah its a coercion, as I let <code>i : fin n</code> which is the type whose elements are naturals which are less than <code>n</code>, lean sometimes needs a reminder that I want to just treat it as a natural number and not a [natural number, proof that the number is less than n]</p>\n</blockquote>\n<p>ok, thanks for the explanation!</p>",
        "id": 198804857,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590519059
    },
    {
        "content": "<p>In fact the one on the left <code>(n-1-↑i) </code> isn't needed, as lean realises that if I want to subtract <code>i</code> from <code>n</code> I must really want to interpret <code>i</code> as a nat, but the right one is as there are no such hints for lean.</p>",
        "id": 198804901,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590519076
    },
    {
        "content": "<p>Explicitly using this up arrow is almost always a bad idea though. Adding a type ascription is much better.</p>",
        "id": 198806722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590519815
    },
    {
        "content": "<p>Is there a simple lemma to solve <code>a * c ≤ b</code> given <code>a ≤ b / c</code> as a hypothesis?</p>",
        "id": 198815909,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590524193
    },
    {
        "content": "<p>I guess you need <code>c ≠ 0</code> for that</p>",
        "id": 198816104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590524287
    },
    {
        "content": "<p>Must be something about <code>linear_ordered_field</code></p>",
        "id": 198816125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590524299
    },
    {
        "content": "<p>This will be a lemma in the library.</p>",
        "id": 198816354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524408
    },
    {
        "content": "<p>You need c positive</p>",
        "id": 198816381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524427
    },
    {
        "content": "<p>Otherwise it's not true</p>",
        "id": 198816390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524433
    },
    {
        "content": "<p>Yes, I have <code>c &gt; 0</code>.</p>",
        "id": 198816405,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590524445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- Try this: refine (le_div_iff H).mp h</span>\n</code></pre></div>",
        "id": 198816419,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590524452
    },
    {
        "content": "<p>Then you can probably find it with library_search</p>",
        "id": 198816440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524464
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>!</p>",
        "id": 198816495,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590524494
    },
    {
        "content": "<p>For results like this you'll find it's quicker to find the lemma with library_search than asking</p>",
        "id": 198816529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524506
    },
    {
        "content": "<p>Basic results like this are guaranteed to be in the library</p>",
        "id": 198816608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524525
    },
    {
        "content": "<p><code>library_search</code> was failing my particular situation, I should have created a lemma to specify exactly what I wanted.</p>",
        "id": 198816626,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590524536
    },
    {
        "content": "<p>Right</p>",
        "id": 198816644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524546
    },
    {
        "content": "<p>For whatever reason <code>library_search</code> returns a proof using an <code>iff</code> plus <code>.mp</code>, the more direct proof term is <code>mul_le_of_le_div H h</code>.</p>",
        "id": 198816931,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590524690
    },
    {
        "content": "<p>This is in principle guessable if you're comfortable with the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions: the result desired is a <code>mul_le</code>, so we start typing <code>mul_le_of</code>, then <code>mul_le_of_le_div</code> should be in the first few auto-complete suggestions.</p>",
        "id": 198817261,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590524839
    },
    {
        "content": "<p>It's worth looking at and around the theorem that library_search finds I guess</p>",
        "id": 198818837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590525718
    },
    {
        "content": "<p>Hi, I'm very new at this, and I don't really understand how have works. I'm trying to use it to introduce a supplementary proposition (call this p), and then show the goal is true when p is true, and also when p is false. I thought this would be cases p, but the error message given is that cases is not applicable to given hypothesis (p). Where have I gone wrong?</p>",
        "id": 199061803,
        "sender_full_name": "Susan Rutter",
        "timestamp": 1590690238
    },
    {
        "content": "<p>I think you want <code>by_cases p</code>? <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases</a></p>",
        "id": 199062126,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590690331
    },
    {
        "content": "<p>It's confusing, but <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#cases\">cases</a> is quite different.</p>",
        "id": 199062218,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590690362
    },
    {
        "content": "<p>Ah yes, thanks</p>",
        "id": 199062445,
        "sender_full_name": "Susan Rutter",
        "timestamp": 1590690451
    },
    {
        "content": "<p>There is a link though, you can write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">em</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">em</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>where em stands for \"excluded middle\". But writing <code>by_cases h : P</code> is simply more convenient.</p>",
        "id": 199066384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590692235
    },
    {
        "content": "<p>Oh great, that actually really helps me understand how LEAN works</p>",
        "id": 199067142,
        "sender_full_name": "Susan Rutter",
        "timestamp": 1590692608
    },
    {
        "content": "<p>Good. People normally write Lean, with lower case after the initial, unless you use the logo which has quantifiers in the middle</p>",
        "id": 199068084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590693080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199062126\">said</a>:</p>\n<blockquote>\n<p>I think you want <code>by_cases p</code>? <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases</a></p>\n</blockquote>\n<p>Did you know you can type <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> to generate the same link?</p>",
        "id": 199108812,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590720377
    },
    {
        "content": "<p>What would be a nice way to prove that a function defined on a subtype, applied to elements with same \"value\", yield the same result? As in this : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">py</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">py</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If I try to just <code>rw h</code> I get an error, I guess it's because they're part of <code>px</code> and <code>py</code>. I guess it has to do with stuff like <code>subtype.ext</code>, but I can't get anything to work.<br>\nAlso I would rather avoid proving directly that <code>⟨x, px⟩ = ⟨y, py⟩</code>, the example above is a reduction from a situation where I basically can't know px and py (they're proofs generated by lean that displays as <code>_</code> in my goal.</p>",
        "id": 199273329,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590868404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">px</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">py</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199273388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590868508
    },
    {
        "content": "<p>As you spotted, you can't rewrite directly, because <code>f ⟨y, px⟩</code> isn't a valid term. But the simplifier knows some basic tricks, and if you regard it as rewrite on steroids then this is what you're naturally led to. <del>You can see what actually happened by using <code>squeeze_simp</code> instead.</del> (oh, it just says <code>simp only [h]</code> :-) )</p>",
        "id": 199273452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590868586
    },
    {
        "content": "<p>Mmmh, this works in the MWE, but not directly in the \"big situation\" sadly :(</p>",
        "id": 199273471,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590868639
    },
    {
        "content": "<p><code>congr, apply subtype.ext, exact h</code>?</p>",
        "id": 199273482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590868663
    },
    {
        "content": "<p>I'll try to turn this as a little lemma in my case and see if It can be applied this way tho.</p>",
        "id": 199273483,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590868665
    },
    {
        "content": "<p>Would that work better?</p>",
        "id": 199273487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590868669
    },
    {
        "content": "<p>yay congr worked!</p>",
        "id": 199273529,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590868687
    },
    {
        "content": "<p>So what does congr do basically?</p>",
        "id": 199273533,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590868695
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">tactic#congr</a></p>",
        "id": 199273539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590868714
    },
    {
        "content": "<p>tl;dr: It strips away stuff that is similar on both sides of an equality</p>",
        "id": 199273553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590868744
    },
    {
        "content": "<p>Perfect! thank you a lot</p>",
        "id": 199273568,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590868768
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">tactic#congr</a>', when you need more control over how much stuff it strips away.</p>",
        "id": 199275497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590871947
    },
    {
        "content": "<p>How would one prove the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Induction is taking down a weird path.</p>",
        "id": 199276085,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1590872995
    },
    {
        "content": "<p>don't use <code>\\ge</code></p>",
        "id": 199276129,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590873035
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interval_cases</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">interval_cases</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199276147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590873107
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199276207,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590873208
    },
    {
        "content": "<p>induct on the inequality instead of the natural number</p>",
        "id": 199276209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590873217
    },
    {
        "content": "<p>Oh! Thanks thanks! </p>\n<p>I did not know this was even possible. Will read about <code>interval_cases</code></p>",
        "id": 199276257,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1590873261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199275497\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">tactic#congr</a>', when you need more control over how much stuff it strips away.</p>\n</blockquote>\n<p>The linkifier failed for that</p>",
        "id": 199276971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590874546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199276257\">said</a>:</p>\n<blockquote>\n<p>Oh! Thanks thanks! </p>\n<p>I did not know this was even possible. Will read about <code>interval_cases</code></p>\n</blockquote>\n<p>You can case on any inductive type, and a lot of things are inductive types.</p>",
        "id": 199277019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590874590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199276971\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199275497\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr\">tactic#congr</a>', when you need more control over how much stuff it strips away.</p>\n</blockquote>\n<p>The linkifier failed for that</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 199288989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590897785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199288989\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199276971\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199275497\">said</a>:</p>\n<blockquote>\n<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#congr'\">tactic#congr'</a>, when you need more control over how much stuff it strips away.</p>\n</blockquote>\n<p>The linkifier failed for that</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>\n</blockquote>",
        "id": 199289766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590899326
    },
    {
        "content": "<p>The link will fail for things like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#elide\">tactic#elide</a>, because the header does not match the name of the tactic</p>",
        "id": 199289814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590899419
    },
    {
        "content": "<p>Is it possible to insert extra anchors in mathlib docs?</p>",
        "id": 199289833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590899470
    },
    {
        "content": "<p>Kind of a vague question, but is there a tactic/syntax trick to add both sides of a given equality to the context? <br>\nLike, for instance, my goal is <code>a = b</code>, I'd like to have something that does <code>let u := a</code>and <code>let v := b</code> but automatically (since <code>a</code> and <code>b</code> are quite complicated in my case),  is there a way?</p>",
        "id": 199298128,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590916528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">u : ℕ := 1,</span>\n<span class=\"cm\">v : ℕ := 2</span>\n<span class=\"cm\">⊢ u = v</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199298370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590916951
    },
    {
        "content": "<p>Ok, so basically here u and v are \"anonymous\" at first, and then when you do the \"change\" thing it automatically gets what u and v should be? Very nice!<br>\nWell thank you!</p>",
        "id": 199298434,
        "sender_full_name": "Robin Carlier",
        "timestamp": 1590917143
    },
    {
        "content": "<p>More precisely, the uninferrable <code>_</code>s in the definitions of <code>u</code> and <code>v</code> become metavariables, then these metavariables get assigned as a result of unifying <code>u = v</code> with the goal.</p>",
        "id": 199298697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590917678
    },
    {
        "content": "<p>there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a></p>",
        "id": 199314834,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590947743
    },
    {
        "content": "<p>hey, when I try doing <code>import tactic</code> it's saying  <code>file 'tactic' not found in the LEAN_PATH</code>. Any ideas how to fix this? Did i mess something up setting up the project?</p>",
        "id": 199427693,
        "sender_full_name": "Jake",
        "timestamp": 1591047698
    },
    {
        "content": "<p>Newer versions of Lean give a link to this URL in the error message, maybe one of the suggestions there will help: <a href=\"https://leanprover-community.github.io/file-not-found.html\">https://leanprover-community.github.io/file-not-found.html</a></p>",
        "id": 199427812,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591047754
    },
    {
        "content": "<p>kk fixed it thank you!</p>",
        "id": 199428984,
        "sender_full_name": "Jake",
        "timestamp": 1591048594
    },
    {
        "content": "<p>Forgive me for this dumb question, but can you compile a \"Hello World\" program in lean?</p>",
        "id": 199514162,
        "sender_full_name": "Jake",
        "timestamp": 1591113612
    },
    {
        "content": "<p>Compile, in the sense of producing a standalone binary: no.</p>",
        "id": 199514236,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591113642
    },
    {
        "content": "<p>So it's 15 mb no matter what?</p>",
        "id": 199514274,
        "sender_full_name": "Jake",
        "timestamp": 1591113662
    },
    {
        "content": "<p>In Lean 4 you can.</p>",
        "id": 199514319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591113679
    },
    {
        "content": "<p>I guess so.</p>",
        "id": 199514340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591113689
    },
    {
        "content": "<p>When's lean 4 expected to release?</p>",
        "id": 199514361,
        "sender_full_name": "Jake",
        "timestamp": 1591113698
    },
    {
        "content": "<p>I don't think anyone knows, but for hello world purposes it should be usable already</p>",
        "id": 199514535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591113764
    },
    {
        "content": "<p>Kk thank you!</p>",
        "id": 199515709,
        "sender_full_name": "Jake",
        "timestamp": 1591114262
    },
    {
        "content": "<p>I'm trying to prove two setoids are equal, is using <code>apply setoid.ext</code> the right starting point?</p>",
        "id": 199566292,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1591141223
    },
    {
        "content": "<p>yes?</p>",
        "id": 199567144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591142168
    },
    {
        "content": "<p>does it make progress toward the goal you want to prove? If so then yes</p>",
        "id": 199567155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591142204
    },
    {
        "content": "<p>I guess more generally how does one prove two structures are equal in lean? I assume you have to prove each field is equal but I'm not sure how to do this for some custom made structure type</p>",
        "id": 199569997,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1591145348
    },
    {
        "content": "<p>This is usually a theorem called <code>T.ext</code>. It is proven by <code>cases</code> on each argument, followed by <code>congr</code></p>",
        "id": 199570071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591145416
    },
    {
        "content": "<p>I've never seen <code>fin n</code> before but I understand it's used sort of like a cardinality. How would I explicitly define a vector doing this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fn</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199656616,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591208321
    },
    {
        "content": "<p>I'd like to map 0, 1, and 2 to just any real number I'd like</p>",
        "id": 199656688,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591208370
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html\">https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html</a><br>\nDoes this help?</p>",
        "id": 199656946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591208486
    },
    {
        "content": "<p>It does, thank you</p>",
        "id": 199657822,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591208910
    },
    {
        "content": "<p>although... does this have to be done inductively?</p>",
        "id": 199657848,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591208921
    },
    {
        "content": "<p>or, rather, recursively</p>",
        "id": 199657887,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591208942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218940\">@Charlie Conneen</span> What do you mean?</p>",
        "id": 199658090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591209050
    },
    {
        "content": "<p>Oh, I just didn't see the bit about the notation of how to construct a vector all in one go</p>",
        "id": 199658292,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591209140
    },
    {
        "content": "<p>I thought I would have to make 3 vectors to make one of length 3, and was concerned for a second</p>",
        "id": 199658353,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591209168
    },
    {
        "content": "<p>but <code>![...]</code> solves that readily</p>",
        "id": 199658415,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1591209208
    },
    {
        "content": "<p>Hi, </p>\n<p>My name is Bassem and this is my first post here :)</p>\n<p>I hope to get skilled enough with Lean to formalize quantum Shannon theory, among other things I work on.</p>\n<p>But first I would be grateful if someone could give me some pointers on how to start proving this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>As a lazy solution, I have tried <code>finish</code>, <code>hint</code>, <code>suggest</code> but none worked for me.</p>\n<p>If I were proving this to a person in the traditional way I might say: \"by our assumptions, all the numbers in the list are positive integers. And the product of positive integers must be positive.\" <br>\nI don't know how to tell Lean that.</p>\n<p>Thanks!</p>",
        "id": 199663404,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1591211689
    },
    {
        "content": "<p>Maybe induction on the list?</p>",
        "id": 199663513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591211755
    },
    {
        "content": "<p>I think the proof you gave can be translated into some gentle applications of things in the <code>big_operators</code> file</p>",
        "id": 199663946,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591211947
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html#finset.prod_le_prod\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html#finset.prod_le_prod</a></p>",
        "id": 199664677,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591212354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"err\">∉</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- assume 0 ∉ L</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- let&#39;s do induction on the list</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- in the case where the list is empty it&#39;s true because 0&lt;1</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- now say the list is n :: tl</span>\n    <span class=\"c1\">-- suffices to prove 0 &lt; n * prod(tl),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">prod_cons</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- the product of two positive things is positive</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- 0 &lt; n is easy to check</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- finally need to know the product over the tail is positive.</span>\n      <span class=\"c1\">-- Use the inductive hypothesis</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- and now it all follows by logic</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199664995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591212500
    },
    {
        "content": "<p>or <code>prod_pos</code>, but the hypotheses do not apply to <code>nat</code></p>",
        "id": 199665073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591212532
    },
    {
        "content": "<p>Here is the lemma that a product of positive things is positive:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html#finset.prod_pos\">https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html#finset.prod_pos</a><br>\nah, yes reid points out that it's a theorem about rings, not semirings. This could prove it for the integers, and then one could lift to the nats to finish</p>",
        "id": 199665081,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591212535
    },
    {
        "content": "<p>Oh man we still have those horrible underlines in the docs changing all &lt; to &lt;= ?</p>",
        "id": 199665320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591212623
    },
    {
        "content": "<p>I will try out these suggestions. Thanks a lot!</p>",
        "id": 199665708,
        "sender_full_name": "Bassem Safieldeen",
        "timestamp": 1591212796
    },
    {
        "content": "<p>Is there something we could replace <code>linear_ordered_comm_ring</code> with that includes <code>nat</code>?</p>",
        "id": 199665988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591212937
    },
    {
        "content": "<p><code>+</code> doesn't even appear in the statement, let alone <code>-</code>.</p>",
        "id": 199666243,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591213051
    },
    {
        "content": "<p>a totally ordered monoid_with_zero</p>",
        "id": 199666339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591213084
    },
    {
        "content": "<p>It doesn't even really have to be totally ordered</p>",
        "id": 199666379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591213108
    },
    {
        "content": "<p>But it must be commutative!</p>",
        "id": 199666403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591213120
    },
    {
        "content": "<p>Yes</p>",
        "id": 199666442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591213138
    },
    {
        "content": "<p><code>decidable_linear_ordered_(add_)comm_monoid</code> is a thing</p>",
        "id": 199666626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591213211
    },
    {
        "content": "<p>there are comments in the source saying</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> this is also true for a ordered commutative multiplicative monoid -/</span>\n</code></pre></div>",
        "id": 199666717,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213264
    },
    {
        "content": "<p>there are three lemmas that want to be updated in this way</p>",
        "id": 199666800,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213277
    },
    {
        "content": "<p>right, why doesn't Lean just use that comment! haha</p>",
        "id": 199666831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591213290
    },
    {
        "content": "<p>we need a <code>remark</code> top-level command</p>",
        "id": 199666848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591213305
    },
    {
        "content": "<p>The example which the OP posted needs there to be a 0 which is the smallest element. I'm not sure that a general ordered comm mult monoid has a 0 (it has a 1, but that's another matter)</p>",
        "id": 199666976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591213354
    },
    {
        "content": "<p>Isn't the reals an ordered comm monoid?</p>",
        "id": 199667021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591213375
    },
    {
        "content": "<p>What about <code>canonically_ordered_comm_semiring</code>?</p>",
        "id": 199667149,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591213432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199666976\">said</a>:</p>\n<blockquote>\n<p>The example which the OP posted needs there to be a 0 which is the smallest element. I'm not sure that a general ordered comm mult monoid has a 0 (it has a 1, but that's another matter)</p>\n</blockquote>\n<p>I think <code>prod_pos</code> is the right generalization<br>\nif you want, you can pass to the nonnegative cone of the monoid and then the version originally posted is true</p>",
        "id": 199667313,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213505
    },
    {
        "content": "<p>Yeah, you'd need to patch up the statement slightly to relate \"nonzero\" with \"greater than zero\". Another approach is <code>prod_ne_zero_iff</code>.</p>",
        "id": 199667365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591213541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199667149\">said</a>:</p>\n<blockquote>\n<p>What about <code>canonically_ordered_comm_semiring</code>?</p>\n</blockquote>\n<p>Do these have <code>0&lt;1</code>?</p>",
        "id": 199667871,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213778
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">canonically_ordered_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span>\n  <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199667886,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213792
    },
    {
        "content": "<p>it looks like no?</p>",
        "id": 199667981,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213818
    },
    {
        "content": "<p>That's from an old mathlib, I guess</p>",
        "id": 199667983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591213818
    },
    {
        "content": "<p>oh okay</p>",
        "id": 199668005,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591213826
    },
    {
        "content": "<p>Kenny refactored <code>zero_ne_one_class</code></p>",
        "id": 199668016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591213832
    },
    {
        "content": "<p>But it shouldn't matter for this discussion</p>",
        "id": 199668035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591213842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/199665320\">said</a>:</p>\n<blockquote>\n<p>Oh man we still have those horrible underlines in the docs changing all &lt; to &lt;= ?</p>\n</blockquote>\n<p>Could someone fix this in the next two Hours? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 199668894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591214234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> has a PR in progress at <a href=\"https://github.com/leanprover-community/doc-gen/issues/20\">doc-gen#20</a>, but it's not ready in the current form.</p>",
        "id": 199669922,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591214663
    },
    {
        "content": "<p>I commented on the PR there, but really I think almost any change that gets rid of the underlines is an improvement</p>",
        "id": 199671176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591215348
    },
    {
        "content": "<p>I might have to check again, but I thought that what's currently there only removes some of the underlines.</p>",
        "id": 199671554,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591215570
    },
    {
        "content": "<p>The underlines all seem to be gone when I make the change in my browser, at least in the file I'm looking at.<br>\nMaybe the issue is what to do about this <code>decl_args</code> color? I actually never noticed the arguments weren't black until I changed the link color to blue and then noticed that links in arguments were missing...</p>",
        "id": 199672057,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591215858
    },
    {
        "content": "<p>Oh I understand your comment now Bryan. I was looking at the original diff, which is the same as what I did in my browser, but the revised diff does look like it wouldn't apply to all links.</p>",
        "id": 199673052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591216409
    },
    {
        "content": "<p>Er, I didn't do exactly the same thing, but something approximately the same.</p>",
        "id": 199673112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591216442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I'm not sure if you realized that what was in my screenshot was much different than the current state of the PR.</p>",
        "id": 199677336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591218707
    },
    {
        "content": "<p>Yeah, the change only removes the underlines (showing them on hover).  This is also in the PR description.  As I've said already, please submit follow-up PRs if you don't like it.</p>",
        "id": 199677600,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591218878
    },
    {
        "content": "<p>I'm trying to put together something along the lines of Reid's suggestion in the comments right now.</p>",
        "id": 199677667,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591218932
    },
    {
        "content": "<p>It also doesn't do that consistently though.</p>",
        "id": 199677676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591218935
    },
    {
        "content": "<p>I'll make another PR.</p>",
        "id": 199677873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591219038
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/doc-gen/issues/26\">doc-gen#26</a> (will this work)</p>",
        "id": 199678306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591219275
    },
    {
        "content": "<p>Amazing</p>",
        "id": 199678314,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591219280
    },
    {
        "content": "<p>I'm not sure I like the blue, but it's almost midnight so I'm gonna merge it.  Complaints are accepted after tomorrow morning.</p>",
        "id": 199678983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591219643
    },
    {
        "content": "<p>I don't really like the blue either, but it's at least functional.</p>",
        "id": 199679026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591219673
    },
    {
        "content": "<p>I've restarted the ci on master. The docs should be live soon.  Good luck!</p>",
        "id": 199679492,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591219901
    },
    {
        "content": "<p>I am trying to define Discrete Valuation Rings, and in particular uniformizers:</p>\n<p>import ring_theory.ideals</p>\n<p>import ring_theory.principal_ideal_domain</p>\n<p>import ring_theory.localization</p>\n<p>universe u</p>\n<p>class discrete_valuation_ring (R : Type u) extends principal_ideal_domain R :=<br>\n(max_ideal : ideal R)<br>\n(maximal : max_ideal.is_maximal)<br>\n(unique_prime_ideal : ∀ M : ideal R, M.is_prime → M = ⊥ ∨ M = max_ideal)</p>\n<p>variable {R : Type u}</p>\n<p>structure discrete_valuation_ring.discrete_valuation (R : Type u) [discrete_valuation_ring R] extends localization.fraction_ring R →* ℤ :=</p>\n<p>(map_top' : to_fun 0 = 1)</p>\n<p>(map_add_leq' : ∀ x y, to_fun (x + y) ≤ max (to_fun x) (to_fun y))</p>\n<p>def uniformizers : set R := { π | ideal.span {π} = max_ideal R }</p>\n<p>I end up getting the following errors:</p>\n<ol>\n<li>\n<p>don't know how to synthesize placeholder<br>\ncontext:<br>\nR : Type u,<br>\nπ : R<br>\n⊢ Type ?</p>\n</li>\n<li>\n<p>unknown identifier 'max_ideal'</p>\n</li>\n</ol>\n<p>Any help is appreciated!</p>",
        "id": 199927434,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1591387455
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> will make the code easier to read</p>",
        "id": 199927496,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591387497
    },
    {
        "content": "<p>Hi I have a question regarding Theorem proving in Lean ,chapter 8, at the very end of 8.6.  \"The map function is even more tedious to define by hand than the tail function. We encourage you to try it, using rec_on, cases_on and no_confusion.\"  I have gotten this far </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>   <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">β</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">γ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">vector</span> <span class=\"n\">γ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">vector</span> <span class=\"n\">γ</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">vector</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">ih</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">f</span>\n        <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">a</span>\n            <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n1</span> <span class=\"n\">itm</span> <span class=\"n\">vec</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">itm</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">))</span>\n    <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I receive the following error <code>\"eliminator\" elaberator failed to compute the motive</code> for  <code> vector.rec_on a</code>.  How should I interpret this error message?  I am not so concerned with solving the problem as I am understanding what this error means.  To the best of my knowledge the eliminator refers to the process of deriving a proof from a rec_on or similair induction expression.  Thanks for your help, I am still new at this.</p>",
        "id": 199942365,
        "sender_full_name": "Ender Doe",
        "timestamp": 1591397347
    },
    {
        "content": "<p>If I understand correctly, your first sorry should be a contradiction because that path indicates that there are no more elements of <code>a</code> to get.</p>",
        "id": 199944036,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591398900
    },
    {
        "content": "<p>I'm trying to do epsilon delta definition of a limit in lean (if this is actually possible?!). Here is my code thus far, but I kind of feel I am missing something</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`|`</span><span class=\"n\">x</span><span class=\"bp\">`|`</span> <span class=\"o\">:=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">δ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"bp\">|&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">fε</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_lt</span><span class=\"o\">,</span>\n <span class=\"c1\">-- I got stuck here</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Here is my tactic state thus far aswell:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">L</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">ε_pos</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">fε</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">-</span><span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>",
        "id": 200032591,
        "sender_full_name": "James Arthur",
        "timestamp": 1591549334
    },
    {
        "content": "<p>What are you trying to do?</p>",
        "id": 200032733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591549542
    },
    {
        "content": "<p>You've stated that every function converges to every value at every point--of course you're not going to be able to prove this.</p>",
        "id": 200032786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591549585
    },
    {
        "content": "<p>The epsilon delta definition of a limit is definitely possible in Lean and you can even prove that the definition coincides with the fancy filter one</p>",
        "id": 200032866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591549751
    },
    {
        "content": "<p>I'm trying to tell lean about limits. The end goal is to prove existence and uniqueness of ODE solutions, so I thought putting limits in was a good starting point.</p>",
        "id": 200032943,
        "sender_full_name": "James Arthur",
        "timestamp": 1591549811
    },
    {
        "content": "<p>The <code>intro</code> tactic takes a \"forall x\" in the goal to an x in the hypotheses and the <code>revert</code> tactic puts it back</p>",
        "id": 200032980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591549894
    },
    {
        "content": "<p>I think you want to start with something more like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">δ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"bp\">|&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>",
        "id": 200033027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591549926
    },
    {
        "content": "<p>So, putting all the variables to the right of the colon, your goal says \"for all L and for all c and for all x and for all functions, ...\"</p>",
        "id": 200033034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591549944
    },
    {
        "content": "<p>I don't think you should be proving a lemma. I think you should be making a definition</p>",
        "id": 200033041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591549964
    },
    {
        "content": "<p>Like what Reid did when I was struggling to type that into my phone</p>",
        "id": 200033051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591549987
    },
    {
        "content": "<p>OK, I got myself confused then. I thought it was something I'd have to prove, not just type in.</p>",
        "id": 200033059,
        "sender_full_name": "James Arthur",
        "timestamp": 1591550018
    },
    {
        "content": "<p>What's your academic background?</p>",
        "id": 200033107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550044
    },
    {
        "content": "<p>Mathematicians use the word \"proof\" in quite a vague way</p>",
        "id": 200033114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550071
    },
    {
        "content": "<p>I'm a Mathematics student at Exeter.</p>",
        "id": 200033125,
        "sender_full_name": "James Arthur",
        "timestamp": 1591550101
    },
    {
        "content": "<p>Sometimes this is half the problem. They think they want to prove something but actually they want to define a function</p>",
        "id": 200033130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550104
    },
    {
        "content": "<p>In Lean there are these two universes, Prop and Type</p>",
        "id": 200033144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550123
    },
    {
        "content": "<p>And after a while you start sorting mathematical objects into these two universes</p>",
        "id": 200033166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550153
    },
    {
        "content": "<p>And then you understand types and terms</p>",
        "id": 200033220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550192
    },
    {
        "content": "<p>And then you realise that every mathematical object fits into this square -- types or terms, theorem statements or proofs</p>",
        "id": 200033230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550240
    },
    {
        "content": "<p>And there are rules for when you use <code>def</code> and when you use <code>lemma</code> but in maths departments they don't always do this correctly</p>",
        "id": 200033280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550286
    },
    {
        "content": "<p>Eg the correspondence theorem in group theory isn't a theorem</p>",
        "id": 200033286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591550317
    },
    {
        "content": "<p>I've got to be really careful with what the difference between def and lemma / theorem are. Thanks!</p>",
        "id": 200033439,
        "sender_full_name": "James Arthur",
        "timestamp": 1591550530
    },
    {
        "content": "<p>James, proving easy stuff is actually simpler to learn than writing definitions. You should probably start with tutorials where the definitions are already there.</p>",
        "id": 200033446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591550536
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> or, especially since you want to work with limits, the <a href=\"https://github.com/leanprover-community/tutorials\">tutorials project</a></p>",
        "id": 200033459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591550574
    },
    {
        "content": "<p>Thankyou, I had recently completed the tutorial project and I had totally forgot that limits were in there, I shall go back and redo some bits of it. Thankyou Patrick.</p>",
        "id": 200034196,
        "sender_full_name": "James Arthur",
        "timestamp": 1591551588
    },
    {
        "content": "<p>I think it would be a good exercise to define the predicate <code>is_limit f a L</code> for f a function from the reals to the reals and a and L real numbers, saying that the limit of f(x) is L as x tends to a. This is a definition. Give the epsilon delta definition. Then figure out how to prove the theorem that says that for a given f, a and L, some fancy thing involving filters holds if and only if your predicate holds</p>",
        "id": 200036000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591554332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"304228\">@James Arthur</span></p>",
        "id": 200036054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591554375
    },
    {
        "content": "<p>How do you reopen the Lean goals window on VSCode?</p>",
        "id": 200040574,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591561389
    },
    {
        "content": "<p>You can hit ctrl+shift+enter, or click one of the icons at the top right of the editor panel.</p>",
        "id": 200040792,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591561698
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 200041001,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591562014
    },
    {
        "content": "<p>Is there a way to reduce a type to basic elements? For example, if I have a goal type of <code>transitive r</code> for some relation <code>r</code> how can I get lean to show that this really means <code>r a b -&gt; r b c -&gt; r a c</code> ?  In this specific case I can use <code>intro</code> to expose this but in other cases perhaps not.</p>",
        "id": 200048366,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1591573484
    },
    {
        "content": "<p><code>unfold transitive</code>?</p>",
        "id": 200048496,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1591573755
    },
    {
        "content": "<p>oh nice, thanks!</p>",
        "id": 200048541,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1591573815
    },
    {
        "content": "<p>But be aware that <code>unfold</code> is typically not actually a useful step in a proof. It can be helpful when you're getting started to understand what a goal is saying, but thinking you want to use it in a proof is often either a sign you're doing it wrong, or things are badly set up (e.g. that there are missing <code>@[simp]</code> lemmas for the definitions you're working with).</p>",
        "id": 200058603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591592409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/196710249\">said</a>:</p>\n<blockquote>\n<p>Here's an example: Let <code>A := bool</code> and let <code>B</code> be the collection of all turing machines quotient by \"one halts iff the other does\". There is a computable map <code>A -&gt; B</code> which sends <code>tt</code> to a halting TM and <code>ff</code> to a non-halting machine, and this is a bijection with no computable inverse</p>\n</blockquote>\n<p>How are you not quotienting out by all TM's? They are determined by where they halt. this would be quotienting all of them by all of them. It is not clelar you are doing anything.</p>",
        "id": 200381978,
        "sender_full_name": "Dave",
        "timestamp": 1591770137
    },
    {
        "content": "<p>Also, on the argument presented here:</p>",
        "id": 200382094,
        "sender_full_name": "Dave",
        "timestamp": 1591770311
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/\">https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/</a></p>",
        "id": 200382100,
        "sender_full_name": "Dave",
        "timestamp": 1591770316
    },
    {
        "content": "<p>if you were to encode these sequences as natural numbers clearly there would be a bijection. If, as usual, you reject the possibility of infinite inputs, no such problem occurs. I'm fairly certain computable bijections have computable inverses. Kind of the point.</p>",
        "id": 200382150,
        "sender_full_name": "Dave",
        "timestamp": 1591770370
    },
    {
        "content": "<p>What do you mean by \"they are determined by where they halt\"? When I say \"the collection of all turing machines\" this is a discrete countable set of turing machine descriptions, which is then quotiented by some relation. In particular, two turing machines are considered distinct if they have different representations even if they are extensionally equivalent, so the base set before the quotient is perfectly well computable - it's isomorphic to <code>nat</code></p>",
        "id": 200382180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770435
    },
    {
        "content": "<p>I only saw the one other example, but the wording made it seem as though nothing was being done since you quotient by everything. I would like to see some justification for this idea that computable bijections don't have computable inverses. Seems confusing to me</p>",
        "id": 200382183,
        "sender_full_name": "Dave",
        "timestamp": 1591770441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200382180\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"they are determined by where they halt\"? When I say \"the collection of all turing machines\" this is a discrete countable set of turing machine descriptions, which is then quotiented by some relation. In particular, two turing machines are considered distinct if they have different representations even if they are extensionally equivalent, so the base set before the quotient is perfectly well computable - it's isomorphic to <code>nat</code></p>\n</blockquote>\n<p>never said it wasn't computable. I think of tm's as just partial computable functions. you can enumerate with a universal TM. Clearly gunna be iso to nat regardless, that adds no info. I do disagree on the distinction in definition despite being extensionally equivalent though. Odd choice. Probably pragmatically motivated</p>",
        "id": 200382288,
        "sender_full_name": "Dave",
        "timestamp": 1591770574
    },
    {
        "content": "<p>I'm constructing a counterexample here. Go with my definitions for a bit</p>",
        "id": 200382350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770616
    },
    {
        "content": "<p>Ok</p>",
        "id": 200382354,
        "sender_full_name": "Dave",
        "timestamp": 1591770622
    },
    {
        "content": "<p>A TM is given by a string, and these are obviously countable</p>",
        "id": 200382365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770644
    },
    {
        "content": "<p>and computable discrete etc</p>",
        "id": 200382368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770650
    },
    {
        "content": "<p>why do you emphasize discrete?</p>",
        "id": 200382388,
        "sender_full_name": "Dave",
        "timestamp": 1591770673
    },
    {
        "content": "<p>That is, equality is decidable</p>",
        "id": 200382394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770685
    },
    {
        "content": "<p>ok, fair</p>",
        "id": 200382396,
        "sender_full_name": "Dave",
        "timestamp": 1591770694
    },
    {
        "content": "<p>I emphasize it because this property will fail to hold after the quotient</p>",
        "id": 200382401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770708
    },
    {
        "content": "<p>of decidability of equality as a predicate (or relation, whatever you want to say)</p>",
        "id": 200382457,
        "sender_full_name": "Dave",
        "timestamp": 1591770739
    },
    {
        "content": "<p>?</p>",
        "id": 200382460,
        "sender_full_name": "Dave",
        "timestamp": 1591770742
    },
    {
        "content": "<p>You can construct a computable function that will determine in finite time for any two TMs whether they are textually identical</p>",
        "id": 200382485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770787
    },
    {
        "content": "<p>Now, the relation \"TM A halts iff TM B halts on input 0\" is an equivalence relation, and so we can form a new type which is this set of TMs quotiented by the relation. This type is classically equivalent to bool because either a TM halts or it doesn't</p>",
        "id": 200382549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770853
    },
    {
        "content": "<p>We can also map bool to this quotient set by mapping <code>true</code> to the equivalence class of <code>halt</code> and <code>false</code> to the equivalence class of <code>loop {}</code></p>",
        "id": 200382567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770909
    },
    {
        "content": "<p>This function is also computable</p>",
        "id": 200382578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770947
    },
    {
        "content": "<p>And we can prove it is a bijection <em>using classical axioms</em></p>",
        "id": 200382622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770968
    },
    {
        "content": "<p>specifically LEM</p>",
        "id": 200382627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591770980
    },
    {
        "content": "<p>because if <code>A</code> halts on input 0 then <code>[[A]] = [[halt]]</code>, and if <code>A</code> doesn't halt on input 0 then <code>[[A]] = [[loop {}]]</code></p>",
        "id": 200382665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771037
    },
    {
        "content": "<p>I imagine you'll say it  can't have computable bij or you compute the halting set</p>",
        "id": 200382726,
        "sender_full_name": "Dave",
        "timestamp": 1591771097
    },
    {
        "content": "<p>Now suppose there was a computable inverse to this function. This would be a function from the quotient to <code>bool</code>, which by definition means it is a function on the set of TM strings which respects the equivalence relation</p>",
        "id": 200382742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771127
    },
    {
        "content": "<p>And indeed, this function is a halting oracle</p>",
        "id": 200382747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771137
    },
    {
        "content": "<p>aha</p>",
        "id": 200382750,
        "sender_full_name": "Dave",
        "timestamp": 1591771140
    },
    {
        "content": "<p>where, in the arithmetical hierarchy, does the halting set { s | s halts } lie?</p>",
        "id": 200382764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591771159
    },
    {
        "content": "<p>sigma 0 1</p>",
        "id": 200382770,
        "sender_full_name": "Dave",
        "timestamp": 1591771168
    },
    {
        "content": "<p>above delta 0 1</p>",
        "id": 200382772,
        "sender_full_name": "Dave",
        "timestamp": 1591771176
    },
    {
        "content": "<p>which is the complexity of {0 , 1}</p>",
        "id": 200382781,
        "sender_full_name": "Dave",
        "timestamp": 1591771186
    },
    {
        "content": "<p>the other set is sigma 0 1</p>",
        "id": 200382783,
        "sender_full_name": "Dave",
        "timestamp": 1591771192
    },
    {
        "content": "<p>like we just agreed to</p>",
        "id": 200382785,
        "sender_full_name": "Dave",
        "timestamp": 1591771195
    },
    {
        "content": "<p>by Myhill Isomorphism this isn't a computable bij</p>",
        "id": 200382833,
        "sender_full_name": "Dave",
        "timestamp": 1591771209
    },
    {
        "content": "<p>compelling argument though</p>",
        "id": 200382837,
        "sender_full_name": "Dave",
        "timestamp": 1591771214
    },
    {
        "content": "<blockquote>\n<p>I think of tm's as just partial computable functions. you can enumerate with a universal TM. Clearly gunna be iso to nat regardless, that adds no info. </p>\n</blockquote>\n<p>By the way, when I say isomorphic to <code>nat</code> I mean constructively/computably isomorphic. It is not true that the set of partial computable functions is isomorphic to <code>nat</code> in this sense</p>",
        "id": 200383050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771516
    },
    {
        "content": "<p>because equality of partial computable functions is not decidable</p>",
        "id": 200383056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771534
    },
    {
        "content": "<p>and equality on <code>nat</code> is</p>",
        "id": 200383059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771542
    },
    {
        "content": "<p>I think we are talking about different uses of \"computable\" because otherwise this makes little sense</p>",
        "id": 200383065,
        "sender_full_name": "Dave",
        "timestamp": 1591771558
    },
    {
        "content": "<p>how so?</p>",
        "id": 200383105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771566
    },
    {
        "content": "<p>they are enummerable, they have codes. they are certainly isomorphic to nat</p>",
        "id": 200383110,
        "sender_full_name": "Dave",
        "timestamp": 1591771574
    },
    {
        "content": "<p>They are enumerable, but only with repeats</p>",
        "id": 200383115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771594
    },
    {
        "content": "<p>right, yes</p>",
        "id": 200383117,
        "sender_full_name": "Dave",
        "timestamp": 1591771601
    },
    {
        "content": "<p>and you can't tell when a repeat has occurred</p>",
        "id": 200383120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771609
    },
    {
        "content": "<p>so you can't construct a computable bijection</p>",
        "id": 200383125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771624
    },
    {
        "content": "<p>er, equiv</p>",
        "id": 200383126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771635
    },
    {
        "content": "<p>(= computable bijection with computable inverse)</p>",
        "id": 200383136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771661
    },
    {
        "content": "<p>Actually I'm not even sure there is a computable bijection from PCF to nat, in either direction</p>",
        "id": 200383289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771822
    },
    {
        "content": "<p>I don't understand? why would the repeat matter? you just check the code of the repeat, it goes back to another number and that'[s it</p>",
        "id": 200383292,
        "sender_full_name": "Dave",
        "timestamp": 1591771827
    },
    {
        "content": "<p>You don't know when you have repeated or what you are repeating so you can't remove the repeats</p>",
        "id": 200383309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591771862
    },
    {
        "content": "<p>idk why you wanna remove them though</p>",
        "id": 200383341,
        "sender_full_name": "Dave",
        "timestamp": 1591771917
    },
    {
        "content": "<p>You start enumerating: PCF 0, let's call that 0. PCF 1, well this might be equal to PCF 0 in which case we should skip it, or maybe not and we should allocate 1. If you make the former choice when you shouldn't you get a repeat (it's not injective), and if you make the latter choice when you shouldn't then it's not a function at all (it assigns two values to the same input)</p>",
        "id": 200383416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772010
    },
    {
        "content": "<p>So you have to determine whether PCF 0 = PCF 1, which is equivalent to the non-halting of a certain turing machine</p>",
        "id": 200383490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772070
    },
    {
        "content": "<p>ah I see. if we give up extensional equality and just go by how they are written though we don't have to worry about this though</p>",
        "id": 200383530,
        "sender_full_name": "Dave",
        "timestamp": 1591772137
    },
    {
        "content": "<p>right</p>",
        "id": 200383534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772142
    },
    {
        "content": "<p>but then you'd have a bijection?</p>",
        "id": 200383590,
        "sender_full_name": "Dave",
        "timestamp": 1591772181
    },
    {
        "content": "<p>Sure, you can set it up so that codes for partial recursive functions are computably isomorphic to nat</p>",
        "id": 200383625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772232
    },
    {
        "content": "<p>In fact I think this is proved in mathlib</p>",
        "id": 200383629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772238
    },
    {
        "content": "<p>oh ok perfect well then we agree on this. that's good</p>",
        "id": 200383636,
        "sender_full_name": "Dave",
        "timestamp": 1591772257
    },
    {
        "content": "<p>and probably proven by you?</p>",
        "id": 200383703,
        "sender_full_name": "Dave",
        "timestamp": 1591772289
    },
    {
        "content": "<p>:)</p>",
        "id": 200383706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772296
    },
    {
        "content": "<p>hehehe</p>",
        "id": 200383708,
        "sender_full_name": "Dave",
        "timestamp": 1591772302
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.partrec.code.denumerable/src\">src#nat.partrec.code.denumerable</a></p>",
        "id": 200383712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591772306
    },
    {
        "content": "<p>ayy, nice</p>",
        "id": 200383724,
        "sender_full_name": "Dave",
        "timestamp": 1591772327
    },
    {
        "content": "<p>Say I have <code>f : α → ℝ</code>, is it possible to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=0}^{\\infty} f(i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span> if <code>α = ℕ</code>?</p>",
        "id": 200490116,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591830984
    },
    {
        "content": "<p>I ended up settling for <code>finset.sum univ f</code> where <code>[fintype α]</code>, but that looks horribly ugly...</p>",
        "id": 200493563,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591833779
    },
    {
        "content": "<p>Is there notation for that? I think <code>algebra.big_operators</code> should be it, but I haven't managed to get them working.</p>",
        "id": 200493596,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591833822
    },
    {
        "content": "<p>Anyone have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for <code>algebra.big_operators</code>? The following <em>doesn't</em> work for me:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">-- Should be \\sum not \\S</span>\n</code></pre></div>",
        "id": 200493947,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591834154
    },
    {
        "content": "<p>Wait, nevermind, <code>\\sum</code> and <code>\\S</code> are different... okay <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 200494010,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591834205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200494010\">said</a>:</p>\n<blockquote>\n<p>Wait, nevermind, <code>\\sum</code> and <code>\\S</code> are different... okay <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n</blockquote>\n<p>Yup, this is unfortunate...</p>",
        "id": 200496605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591837049
    },
    {
        "content": "<p>What is the definition in the library for the set of integers from 0 to n?</p>",
        "id": 200497493,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591838194
    },
    {
        "content": "<p>i think you want <code>finset.range</code></p>",
        "id": 200497687,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591838471
    },
    {
        "content": "<p>thanks!</p>",
        "id": 200497916,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591838820
    },
    {
        "content": "<p>There's also <code>fin n</code> which is the finite type consisting of terms <code>0</code>, <code>1</code>, ..., <code>n-1</code>.</p>",
        "id": 200498101,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591839075
    },
    {
        "content": "<p>How can I lift a <code>(a : set (finset.range n))</code> to a<code>finset</code>?</p>",
        "id": 200499372,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591840961
    },
    {
        "content": "<p>have you poked through the finset files?</p>",
        "id": 200499385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591841024
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a> work</p>",
        "id": 200499389,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591841030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236553\">@Lucas Viana</span> I think you want <code>fin n</code> instead of <code>finset.range n</code>.</p>",
        "id": 200499438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591841074
    },
    {
        "content": "<p>The former is a type, the latter a finset. So <code>fin n</code> is an \"ambient set\" and <code>finset.range n</code> is a \"subset\".</p>",
        "id": 200499451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591841111
    },
    {
        "content": "<p>Thanks. But can I turn a <code>a:set (fin n)</code> into a <code>finset</code>? The point is that I want to do <code>card a</code>. I am trying to define a measure on a finite set.</p>",
        "id": 200499599,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591841346
    },
    {
        "content": "<p>How did you get <code>a</code>?</p>",
        "id": 200499660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591841417
    },
    {
        "content": "<p>The direct answer is (hopefully)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">lift</span> <span class=\"n\">a</span> <span class=\"n\">to</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 200499671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591841448
    },
    {
        "content": "<p>It will ask you to prove <code>finite a</code>, which you can get from something that is hopefully called <code>fintype.finite</code> or something like that.</p>",
        "id": 200499684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591841489
    },
    {
        "content": "<p>This is how I am trying to do it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">measure_theory</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">finite_measurable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_measurable</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_empty</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_compl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">is_measurable_Union</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">finite_measure</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨⟨λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">card</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_⟩⟩</span> <span class=\"c1\">-- a is a set(fin n)</span>\n</code></pre></div>",
        "id": 200499962,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591841948
    },
    {
        "content": "<p>Note that mathlib has counting measures. You might want to reuse those.</p>",
        "id": 200500140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591842191
    },
    {
        "content": "<p>Hmm, good! The measure_space file is too big and I didn't notice it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 200500201,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591842273
    },
    {
        "content": "<p>src/data/set/finite.lean:<code>theorem finite.of_fintype [fintype α] (s : set α) : finite s :=</code></p>",
        "id": 200500202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591842276
    },
    {
        "content": "<p>I found this using <code>git grep \"fintype.*finite\"</code> on the command line</p>",
        "id": 200500220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591842307
    },
    {
        "content": "<p>I am trying to formalize my probability theory class. Thanks.</p>",
        "id": 200500283,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591842371
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html#measure_theory.measure.count\">https://leanprover-community.github.io/mathlib_docs/measure_theory/measure_space.html#measure_theory.measure.count</a></p>",
        "id": 200500299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591842400
    },
    {
        "content": "<p>Probability is a sore spot... we don't have anything in mathlib <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 200500313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591842426
    },
    {
        "content": "<p>Does mathlib has something like the fact that measures form a cone in a vector space?  Like, I want the measure to be a probability, so I would multiply the counting measure by <code>1/n</code></p>",
        "id": 200500807,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591843178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200500313\">said</a>:</p>\n<blockquote>\n<p>Probability is a sore spot... we don't have anything in mathlib <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>If I ever figure out how to do it maybe I can contribute something during the Xena summer projects then <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 200500913,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591843308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236553\">Lucas Viana</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200500807\">said</a>:</p>\n<blockquote>\n<p>Does mathlib has something like the fact that measures form a cone in a vector space?  Like, I want the measure to be a probability, so I would multiply the counting measure by <code>1/n</code></p>\n</blockquote>\n<p>Or, could I define a new measure by multiplying one by a measurable function?</p>",
        "id": 200501055,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591843554
    },
    {
        "content": "<p>I think you're going to resolve your questions a lot more efficiently by reading the measure_theory files and coming back with specific questions</p>",
        "id": 200501125,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591843665
    },
    {
        "content": "<p>especially if your questions are <code>sorry</code>s</p>",
        "id": 200501172,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591843684
    },
    {
        "content": "<p>I see. Thanks</p>",
        "id": 200532639,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591875617
    },
    {
        "content": "<p>Is there a more elegant way of proving the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">omega</span> <span class=\"o\">:=</span> <span class=\"n\">mul_lt_omega</span> <span class=\"o\">(</span><span class=\"n\">not_le</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_le</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200615577,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591914646
    },
    {
        "content": "<p><code>mul_eq_max</code></p>",
        "id": 200615603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591914665
    },
    {
        "content": "<p>If there is one tactic from Coq I would love to have on Lean is <code>auto</code>.</p>",
        "id": 200615643,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591914695
    },
    {
        "content": "<p>Is there something similar, that would allow me to write:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">by_cases</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">auto</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">auto</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 200615704,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591914724
    },
    {
        "content": "<p><code>cc</code> doesn't close <code>a \\or b</code> if you have one of them as a hypothesis.</p>",
        "id": 200615745,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591914754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't see how I could use <code>mul_eq_max</code>.</p>",
        "id": 200615980,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591914940
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">even</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">is_true</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">is_false</span>\n</code></pre></div>\n\n\n<p>Is there a better way to convince Lean that <code>even</code> is decidable?</p>",
        "id": 200616308,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591915185
    },
    {
        "content": "<p>In general, if I want to prove something about code that uses, say, <code>array.to_list</code>, ...do I probably have to prove a bunch of theorems about <code>array.to_list</code> first? And won't those break if any definitions change?</p>",
        "id": 200617507,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591916067
    },
    {
        "content": "<p>(that's unrelated to my question about <code>even</code>)</p>",
        "id": 200617540,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591916094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306644\">Jason Orendorff</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200616308\">said</a>:</p>\n<blockquote>\n<p>Is there a better way to convince Lean that <code>even</code> is decidable?</p>\n</blockquote>\n<p>I just found this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">even</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">decidable</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">even</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200618256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591916583
    },
    {
        "content": "<p>Filling in the underscores (which are unified), this would be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">even</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 200618388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591916700
    },
    {
        "content": "<p>A few days ago <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> noted that non-terminal <code>simp</code>s should be avoided.</p>",
        "id": 200618712,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917001
    },
    {
        "content": "<p>I just found a funny situation where <code>squeeze_simp</code> suggests <code>simp only []</code>.</p>",
        "id": 200618773,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917022
    },
    {
        "content": "<p>In this case, using <code>dsimp</code>, should be fine, right?</p>",
        "id": 200618791,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917045
    },
    {
        "content": "<p>From what I've gathered, using non-terminal <code>dsimp</code>s shouldn't be problematic. Is that correct?</p>",
        "id": 200618807,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> Ah, I see now that the assumptions to <code>mul_eq_max</code> are not appropriate.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_omega</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200619020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917269
    },
    {
        "content": "<p>there isn't really much to the proof besides contraposition on <code>mul_lt_omega</code></p>",
        "id": 200619035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917289
    },
    {
        "content": "<p>I believe that non-terminal dsimps are also problematic but I don't really understand why. I guess the behaviour of dsimp can change over time, like simp.</p>",
        "id": 200619070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591917323
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_imp_not</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_lt_omega</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200619158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917418
    },
    {
        "content": "<p>Nonterminal <code>dsimp only</code> is fine</p>",
        "id": 200619200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306644\">@Jason Orendorff</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_pred</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">k</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 200619279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917539
    },
    {
        "content": "<p>I just noticed <code>dsimp</code> (or <code>simp only []</code>) makes no difference in my situation.</p>",
        "id": 200619301,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917573
    },
    {
        "content": "<p>It was pretty much behaving like <code>unfold</code>, just changing how the goal looks.</p>",
        "id": 200619304,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917594
    },
    {
        "content": "<p><code>simp only []</code> can do some things that <code>dsimp only []</code> doesn't</p>",
        "id": 200619365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917617
    },
    {
        "content": "<p>I guess that is the case for <code>simp only []</code>. Still, I am a bit surprised it does something. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 200619372,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591917622
    },
    {
        "content": "<p><code>dsimp only</code> will unfold beta redexes and other things like that</p>",
        "id": 200619392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917645
    },
    {
        "content": "<p><code>simp only</code> will also expand constructor equalities like <code>a :: l = b :: l2 ~&gt; a = b /\\ l = l2</code></p>",
        "id": 200619414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591917684
    },
    {
        "content": "<p>I see, interesting.</p>",
        "id": 200619723,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591918025
    },
    {
        "content": "<p>Where can I read on <code>simp</code> options, like <code>{ contextual := tt }</code> used above?</p>",
        "id": 200619747,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591918050
    },
    {
        "content": "<p>I don't have a very good source, but you can at least look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.simp_config/src\">src#tactic.simp_config</a> to get a sense of what there is</p>",
        "id": 200620721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591918928
    },
    {
        "content": "<p>the only options I have ever had occasion to use are <code>contextual</code> and <code>single_pass</code></p>",
        "id": 200620797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591919030
    },
    {
        "content": "<p>also <code>discharger</code>, which is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.simp_config_ext/src\">src#tactic.simp_config_ext</a></p>",
        "id": 200620852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591919061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">omega</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_lt_omega</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200639294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591944915
    },
    {
        "content": "<p>How exactly does <code>@[to_additive]</code> work?</p>",
        "id": 200683539,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591975145
    },
    {
        "content": "<p>It knows about </p>\n<ol>\n<li>a list of strings (<code>one</code>, <code>mul</code>, etc) and translates them to <code>zero</code>, <code>add</code>, etc...</li>\n<li>a database of names of lemmas and definitions <code>mul_one</code> etc... and matching additive versions <code>add_zero</code>, etc...</li>\n</ol>\n<p>It uses (1) to build the additive version of the lemma it is working on, and uses (2) to reconstruct an additive proof from the given multiplicative proof.</p>\n<p>Finally, it adds this new lemma to the database mentioned in (2).</p>",
        "id": 200685200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591975954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 200685217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591975969
    },
    {
        "content": "<p>We should add tactic docs for the <code>to_additive</code> attribute.</p>",
        "id": 200686733,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591976755
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html\">https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html</a></p>",
        "id": 200687835,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1591977295
    },
    {
        "content": "<p>Yes, I mean we need to port some of that text to a <a href=\"https://leanprover-community.github.io/contribute/doc.html#tactic-doc-entries\">tactic doc</a> so that <code>to_additive</code> shows up with the other attributes <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html\">here</a>.</p>",
        "id": 200687966,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591977360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I see, thank you!</p>",
        "id": 200698809,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591982607
    },
    {
        "content": "<p>Is there a way to <code>#print</code> an instance? I know that <code>∣</code> amounts to <code>has_dvd.dvd</code>, but don't know where the instance comes from.</p>",
        "id": 200740469,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592008665
    },
    {
        "content": "<p>I've been doing a lot of grepping in <code>lean/library/init</code>, it's tiring</p>",
        "id": 200740526,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592008714
    },
    {
        "content": "<p>What expression <code>∣</code> appears in?</p>",
        "id": 200740922,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592009198
    },
    {
        "content": "<p>I usually find class instances by \"reverse engineering\" the expressions where they appear.</p>",
        "id": 200740942,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592009228
    },
    {
        "content": "<p>It means \"divides\". So for example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">divides_self</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">one_divides</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 200740946,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592009244
    },
    {
        "content": "<p>In this case its the <code>ℕ</code> instance of <code>has_dvd</code>. On VSCode pressing <code>F12</code> with the cursor on <code>nat.has_dvd</code> opens the definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_dvd</span>\n</code></pre></div>",
        "id": 200741107,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592009413
    },
    {
        "content": "<p>Not sure if exactly what you wanted.</p>",
        "id": 200741130,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592009437
    },
    {
        "content": "<p>Here's a short idiom for looking up how a typeclass instance is solved, assuming you know the name of the typeclass already (here <code>has_dvd</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dvd</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n<span class=\"c1\">-- comm_semiring_has_dvd : has_dvd ℤ</span>\n</code></pre></div>",
        "id": 200741152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592009476
    },
    {
        "content": "<p>neat</p>",
        "id": 200741254,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592009590
    },
    {
        "content": "<p>thanks</p>",
        "id": 200741259,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1592009594
    },
    {
        "content": "<p>Say I have <code>f : ℕ → ℝ</code>, is it possible to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi mathvariant=\"normal\">∞</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=0}^{\\infty} f(i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 200742342,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592011053
    },
    {
        "content": "<p>It should be certainly possible if <code>f : ℕ → ennreal</code>, because then I have a value even if the sequence diverges.</p>",
        "id": 200742386,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592011090
    },
    {
        "content": "<p>You can use <code>has_sum</code> from <code>topology.algebra.infinite_sum</code></p>",
        "id": 200743841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592013690
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.summable/src\">src#ennreal.summable</a> proves that every <code>ennreal</code> sum converges</p>",
        "id": 200743913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592013789
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 200744915,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1592015417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks!</p>",
        "id": 200747055,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592019379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200686733\">said</a>:</p>\n<blockquote>\n<p>We should add tactic docs for the <code>to_additive</code> attribute.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3055\">#3055</a></p>",
        "id": 200748757,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592022651
    },
    {
        "content": "<p>I get this error when I try to apply <code>mul_mul_le_of_le_div</code> to the hypothesis <code>h: 0 &lt; 2</code>. Not sure how to fix?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">2</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n  <span class=\"c1\">--error happens here:</span>\n  <span class=\"c1\">--apply mul_le_of_le_div h,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Here's the error message</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_le_of_le_div</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 200780231,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592074872
    },
    {
        "content": "<p>If you hover over <code>mul_le_of_le_div</code> you'll see which kind of objects it applies to, and I conjecture that the objects you're applying it to aren't that kind of object.</p>",
        "id": 200780249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mul_le_of_le_div</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>so I conjecture that the 0 and 2 in h are not elements of a linearly ordered field.</p>",
        "id": 200780310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592074965
    },
    {
        "content": "<p>I'm doing this in the real numbers</p>",
        "id": 200780317,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592074980
    },
    {
        "content": "<p>oh they are definitely a linearly ordered field. So now I conjecture that you have accidentally made <code>h</code> a statement about the natural numbers.</p>",
        "id": 200780334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075013
    },
    {
        "content": "<p>But you would get better answers here, from me and others, if you were to post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 200780344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075038
    },
    {
        "content": "<p>Okay, edited</p>",
        "id": 200780573,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592075385
    },
    {
        "content": "<p>How do I get <code>to_additive</code> to ignore some definitions?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mk_group_eq_mk_quotient_mul_mk_subgroup</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_def</span><span class=\"o\">,</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">group_equiv_quotient_times_subgroup</span> <span class=\"bp\">_⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200780747,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592075639
    },
    {
        "content": "<p>So when you write <code>have h : 0 &lt; 2, {sorry},</code>, you didn't say which 0 and 2 you meant, so Lean assumed you meant the natural number 0.</p>",
        "id": 200780787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075643
    },
    {
        "content": "<p>Reposting</p>\n<p>I get this error when I try to apply <code>mul_mul_le_of_le_div</code> to the hypothesis <code>h: 0 &lt; 2</code>. Not sure how to fix?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"mi\">2</span><span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n  <span class=\"c1\">--error happens here:</span>\n  <span class=\"c1\">--apply mul_le_of_le_div h,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Here's the error message</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_le_of_le_div</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 200780792,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592075658
    },
    {
        "content": "<p>THIS IS REALLY ANNOYING WHEN LOTS OF PEOPLE USE THIS STUPID NOOB QUESTIONS THREAD AT THE SAME TIME. MAKE YOUR OWN THREADS!</p>",
        "id": 200780797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298376\">@Pedro Minicz</span> please start a new thread</p>",
        "id": 200780798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592075672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span>  idem dito</p>",
        "id": 200780800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592075678
    },
    {
        "content": "<p>I want to delete this thread</p>",
        "id": 200780802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075682
    },
    {
        "content": "<p>Sorryyyy lol. Maybe it should be a stream?</p>",
        "id": 200780810,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592075705
    },
    {
        "content": "<p>Well, it is already in the \"new members\" stream...</p>",
        "id": 200780820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592075728
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> what you want to do is <code>have h : (0 : \\R) &lt; 2 := by linarith,</code>, and then you should be back on track.</p>",
        "id": 200780821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075731
    },
    {
        "content": "<p>Seriously, can we somehow kill this topic? Anyone can ask any question, however basic, in #new members, they are mostly noob questions and this is fine. But when two people talk over each other it's like gitter.</p>",
        "id": 200780878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075801
    },
    {
        "content": "<p>I think the most effective way to kill this thread is if all people that regularly answer questions click the mute button... on this particular thread (not the stream). I'm doing that now.</p>",
        "id": 200780882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592075809
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 200780891,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1592075836
    },
    {
        "content": "<p>(I know Alena from discord and I know Pedro from here, I'm not annoyed at them, I'm annoyed at this topic :-) )</p>",
        "id": 200780952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075886
    },
    {
        "content": "<p>OK I am going to follow Johan's advice and mute this topic.</p>",
        "id": 200780963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592075919
    },
    {
        "content": "<p>If everyone does this, won't this just result in new users asking questions here and not getting answers?</p>",
        "id": 200786400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592083647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I think we've decided not to use this thread anymore. Please make a new thread.</p>",
        "id": 200788665,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592087519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200788665\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> I think we've decided not to use this thread anymore. Please make a new thread.</p>\n</blockquote>\n<p>apologies, it was a reply to an old message in this thread so it defaulted, should be changed now</p>",
        "id": 200788708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592087553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/noob.20question(s)/near/200786400\">said</a>:</p>\n<blockquote>\n<p>If everyone does this, won't this just result in new users asking questions here and not getting answers?</p>\n</blockquote>\n<p>I think so too... Maybe more effective would be a notice telling new users not to ask questions here</p>",
        "id": 200789580,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592089230
    },
    {
        "content": "<p>effectively that would be locking the topic, where the last message is a directive to ost a new topic instead</p>",
        "id": 200791852,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592093370
    },
    {
        "content": "<p>Hey all! Started playing around with lean again after a bit of a hiatus, and had a quick question:<br>\nWhat is the best way to handle \"dependent equalities\"? For context, this is what I'm trying to accomplish:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unit&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">η_</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">A</span> <span class=\"err\">≫</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"n\">A</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">assoc&#39;</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">μ_</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">A</span> <span class=\"err\">≫</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">a</span> <span class=\"err\">≫</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">restate_axiom</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">unit&#39;</span>\n<span class=\"n\">restate_axiom</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">assoc&#39;</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">T</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a_obj</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_action</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200804314,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1592119297
    },
    {
        "content": "<p>Obviously <code>algebra.ext</code> won't typecheck, as the the type of <code>algebra.a</code> depends on <code>algebra.A</code>, so <code>a_action</code> is not well typed. Is there some sort of dependent equality a la <code>PathP</code> from HoTT that will get the job done?</p>",
        "id": 200804401,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1592119449
    },
    {
        "content": "<p>Also, what is the general take on heterogenous equality?</p>",
        "id": 200804518,
        "sender_full_name": "Reed Mullanix",
        "timestamp": 1592119683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266262\">@Reed Mullanix</span> please make a new thread for this topic, 'noob questions' is muted by several question answerers, it seems</p>",
        "id": 200804617,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1592119874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266262\">@Reed Mullanix</span>, if you go back to edit your first post in this thread, you should be able to change the topic (and leave the default setting to also change the topic of all subsequent messages).</p>",
        "id": 200805154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592121039
    },
    {
        "content": "<p>We've decided that the <code>noob questions(s)</code> topic is a bad idea --- we very much want the questions, we just want them slightly easier to follow / organise, so I'll hold off on answering for now. :-)</p>",
        "id": 200805172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592121097
    },
    {
        "content": "<p>PSA: don't post here! (use another name for your topic)</p>",
        "id": 200805944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592122438
    },
    {
        "content": "<p><strong>WE ARE NO LONGER USING THE NOOB QUESTIONS TOPIC.</strong> There is no cost to making a new topic for your question, and it makes it easier for others to find. <strong>Please do not post in this topic.</strong></p>",
        "id": 200807948,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592126181
    },
    {
        "content": "<p>removed</p>",
        "id": 202007589,
        "sender_full_name": "James Arthur",
        "timestamp": 1593110116
    },
    {
        "content": "<p>removed</p>",
        "id": 224599746,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612033461
    }
]