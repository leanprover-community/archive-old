[
    {
        "content": "<p>Hey, in <code>data.matrix.pequiv</code> there is a lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pequiv.to_pequiv_mul_matrix\">docs#pequiv.to_pequiv_mul_matrix</a> , I wanted to use an equivalent of this lemma but for left multiplication (which requires additional hypothesis that <code>h : f = f.symm</code>).</p>\n<p>I've written and proved this lemma,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_pequiv_matrix_mul'</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f.symm</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⬝</span> <span class=\"n\">f.to_pequiv.to_matrix</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pequiv.matrix_mul_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">equiv.to_pequiv_symm</span><span class=\"o\">,</span> <span class=\"n\">equiv.to_pequiv_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">h</span><span class=\"o\">]}</span>\n</code></pre></div>\n<p>Is this something worth adding to <code>data.matrix.pequiv</code> or not? And is the naming appropriate?</p>",
        "id": 294674719,
        "sender_full_name": "Jamie Reason",
        "timestamp": 1661174533
    },
    {
        "content": "<p>Do you really need <code>f = f.symm</code> or you just need to replace one of the two <code>f</code> in the conclusion by <code>f.symm</code>?</p>",
        "id": 294767064,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661202457
    },
    {
        "content": "<p>Ah yes, thanks, my use case had <code>f = f.symm</code> so I didn't consider that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">to_pequiv_matrix_mul</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⬝</span> <span class=\"n\">f.to_pequiv.to_matrix</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f.symm</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pequiv.matrix_mul_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">equiv.to_pequiv_symm</span><span class=\"o\">,</span> <span class=\"n\">equiv.to_pequiv_apply</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 294840718,
        "sender_full_name": "Jamie Reason",
        "timestamp": 1661251193
    },
    {
        "content": "<p>The RHS might be better expressed with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.submatrix\">docs#matrix.submatrix</a></p>",
        "id": 294889912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661267928
    },
    {
        "content": "<p>I think that is a slightly nicer result. Although it is not consistent with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pequiv.to_pequiv_mul_matrix\">docs#pequiv.to_pequiv_mul_matrix</a> currently in mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">to_pequiv_matrix_mul</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⬝</span> <span class=\"n\">f.to_pequiv.to_matrix</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">matrix.submatrix</span> <span class=\"n\">M</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">f.symm</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pequiv.matrix_mul_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">equiv.to_pequiv_symm</span><span class=\"o\">,</span> <span class=\"n\">equiv.to_pequiv_apply</span><span class=\"o\">,</span> <span class=\"n\">matrix.submatrix_apply</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 294905410,
        "sender_full_name": "Jamie Reason",
        "timestamp": 1661272592
    }
]