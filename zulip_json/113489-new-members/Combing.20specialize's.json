[
    {
        "content": "<p>Is there a compound form for <code>specialize</code>, similar to <code>rw</code>? I have a bunch of statements like</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>in a proof.</p>",
        "id": 202041500,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593131329
    },
    {
        "content": "<p>interesting. (i don't think what you ask for exists) can you show the proof?<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#specialize\">tactic#specialize</a></p>",
        "id": 202041625,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593131470
    },
    {
        "content": "<p>Here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hu</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hw</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_of_max_le_left</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hM</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_of_max_le_right</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202041637,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593131486
    },
    {
        "content": "<p>what are <code>u</code>, <code>l</code>, <code>w</code>?</p>",
        "id": 202041709,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593131533
    },
    {
        "content": "<p>real-valued sequences. you can find a compiling version of this (sans the proof) here: <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/05_sequence_limits.lean#L149\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/05_sequence_limits.lean#L149</a></p>\n<p><code>u</code>, <code>v</code> and <code>w</code> are sequences and <code>l</code> is a real number</p>",
        "id": 202041798,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593131636
    },
    {
        "content": "<p>I'm just trying to shave a couple of lines off of my proof :)</p>",
        "id": 202041918,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593131728
    },
    {
        "content": "<p>Actually, I can do this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">u</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">w</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">seq_limit</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hu</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hw</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span> <span class=\"k\">with</span> <span class=\"n\">M</span> <span class=\"n\">hM</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">N</span> <span class=\"n\">M</span><span class=\"o\">),</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hN</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_of_max_le_left</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hM</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">le_of_max_le_right</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_le</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span> <span class=\"n\">n</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202042346,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1593132263
    }
]