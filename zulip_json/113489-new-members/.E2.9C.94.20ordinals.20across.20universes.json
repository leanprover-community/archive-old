[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/ordinals.20across.20universes/near/308478564\">said</a>:</p>\n<blockquote>\n<p>note that the universe arguments of <code>lift</code> are <em>not</em> uniquely determined by the input and output types, since the output type is <code>cardinal.{max u v}</code> and <code>max</code> is not injective</p>\n</blockquote>\n<p>I somewhat understood this objection while trying to define the coercion myself. The problem seems that the if I try to write something in the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coe_card</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">}⟩</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>it can't be deduced that I always intend <code>u</code> to be smaller than <code>v</code>. Is that right?</p>\n<p>On the other hand, using the same header as in the OP, I continued as following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">coe_card_1</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">cardinal.lift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cardinal</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">19</span><span class=\"o\">})</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">})</span> <span class=\"c1\">-- checks!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">19</span><span class=\"o\">})</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">ℵ₀</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">coe</span> <span class=\"n\">lift_t</span> <span class=\"n\">has_lift_t.lift</span> <span class=\"n\">coe_t</span> <span class=\"n\">has_coe_t.coe</span> <span class=\"n\">coe_b</span> <span class=\"n\">has_coe.coe</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I realized that this can't be made general because I'm severely limited by the <code>class.instance_max_depth</code>.<br>\nI also perceive that there must be something awfully wrong with this approach because of the amount of unfolding (and the fact that <code>simp</code> alone is not enough the finish the goal).</p>\n<p>Are there more reasons for this to be inappropriate? Can the be above perceptions be justified more precisely?</p>",
        "id": 308573294,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667910145
    },
    {
        "content": "<p>well it's awfully wasteful to have to insert 16 <code>lift</code> applications to get from <code>cardinal.{3}</code> to <code>cardinal.{19}</code> when one will do. But more importantly, this method only works when the universe levels are concrete, which is a minority of cases. Indeed <code>cardinal.{3}</code> doesn't show up in mathlib at all, let alone <code>cardinal.{19}</code>, but <code>cardinal.{u}</code> and <code>cardinal.{v}</code> definitely do</p>",
        "id": 308574384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667910567
    },
    {
        "content": "<p>the fact that <code>simp</code> doesn't work is only because you didn't provide any simp lemmas for the coercion. If we were to do this for real then those simp lemmas would be part of it and then this would be proved without any unfolding</p>",
        "id": 308574656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667910655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/ordinals.20across.20universes/near/308574384\">said</a>:</p>\n<blockquote>\n<p>well it's awfully wasteful to have to insert 16 <code>lift</code> applications to get [...]</p>\n</blockquote>\n<p>Completely agree</p>",
        "id": 308574844,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1667910739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"327749\">Pedro Sánchez Terraf</span> has marked this topic as resolved.</p>",
        "id": 308575391,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667910985
    }
]