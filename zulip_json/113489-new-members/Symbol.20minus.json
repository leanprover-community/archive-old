[
    {
        "content": "<p>Does the symbol <code>−</code> (minus) already have a meaning in lean/mathlib?</p>",
        "id": 273408485,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645974740
    },
    {
        "content": "<p>You're talking about <code>\\minus</code>? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">−</span> <span class=\"c1\">-- unexpected token</span>\n</code></pre></div>\n<p>That's a good start! Searching mathlib in VS Code gives 15 results but they are all in docstrings (and probably should be fixed)</p>",
        "id": 273408749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645975097
    },
    {
        "content": "<p>Thanks a lot! I have just learnt two new commands from your two-line-long code!</p>",
        "id": 273408887,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645975333
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12338\">#12338</a></p>",
        "id": 273409002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645975555
    },
    {
        "content": "<p>You can make the <code>all</code> file I'm importing by running <code>./scripts/mk_all.sh</code>.</p>",
        "id": 273409047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645975594
    },
    {
        "content": "<p>OK, great! I will use minus for the complement of a language.</p>",
        "id": 273409749,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645976386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 273409934,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645976591
    },
    {
        "content": "<p>Have you considered just using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compl\">docs#has_compl</a>?</p>",
        "id": 273410146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645976867
    },
    {
        "content": "<p>It seems that <code>has_compl</code> is not defined on <code>computability.language</code> unless I am mistaken.</p>",
        "id": 273410213,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645976960
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/00a3d02e8133bdf99f68af2e40ed1672f16884d7/src/computability/language.lean#L23\">https://github.com/leanprover-community/mathlib/blob/00a3d02e8133bdf99f68af2e40ed1672f16884d7/src/computability/language.lean#L23</a></p>",
        "id": 273410229,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977001
    },
    {
        "content": "<p>Or, would you suggest adding it there? Alongside with <code>has_subset</code> and <code>has_inter</code> probably.</p>",
        "id": 273410352,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977137
    },
    {
        "content": "<p>My point is that if the semantics are similar (I don't know if they are) then it would be reasonable to reuse existing notation</p>",
        "id": 273410362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645977165
    },
    {
        "content": "<p>Should I add it to mathlib, or just to my project?</p>",
        "id": 273410371,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977182
    },
    {
        "content": "<p>It looks like it does already have a has_compl instance</p>",
        "id": 273410388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645977240
    },
    {
        "content": "<p>In which file is <code>has_compl</code> added to <code>computability.language</code> please?</p>",
        "id": 273410434,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977284
    },
    {
        "content": "<p>Via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/language.complete_boolean_algebra\">docs#language.complete_boolean_algebra</a></p>",
        "id": 273410435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645977285
    },
    {
        "content": "<p>Which is defined by the line you just linked to!</p>",
        "id": 273410456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645977319
    },
    {
        "content": "<p>Oh, sorry. Thanks for telling me!</p>",
        "id": 273410465,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977349
    },
    {
        "content": "<p>Does that complement mean the same thing as the one you're talking about?</p>",
        "id": 273410508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645977372
    },
    {
        "content": "<p>Yes, exactly!</p>",
        "id": 273410608,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977545
    },
    {
        "content": "<p>Why cannot I compile this code then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.language</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">∩</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"n\">L</span> <span class=\"bp\">∩</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 273410859,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977673
    },
    {
        "content": "<p>It says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"n\">char</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_inter</span> <span class=\"o\">(</span><span class=\"n\">language</span> <span class=\"n\">char</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 273410876,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645977697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 273410883,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645977717
    }
]