[
    {
        "content": "<p>I'm trying to generalize <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean#L366\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean#L366\">this function</a> (there's a typo, that should be a def not a lemma; nonetheless it works...). I want to prove that an <code>order_iso</code>gives rise to a <code>galois_insertion</code> but I'm stuck on what seems to me to be simple:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">galois_connection</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">order_iso</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">order_iso</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">oi</span> <span class=\"o\">:</span> <span class=\"n\">order_iso</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_galois_connection</span> <span class=\"o\">:</span>\n  <span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">galois_connection</span><span class=\"bp\">;</span>\n<span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">g</span><span class=\"o\">},</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span>\n<span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"c1\">-- rw oi.ord</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_iso</span><span class=\"bp\">.</span><span class=\"n\">ord</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">oi</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">)),</span>\n  <span class=\"n\">change</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">to_galois_insertion</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">galois_insertion</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">choice</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">gc</span> <span class=\"o\">:=</span> <span class=\"n\">to_galois_connection</span> <span class=\"n\">oi</span><span class=\"o\">,</span>\n  <span class=\"n\">le_l_u</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">choice_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">order_iso</span>\n</pre></div>\n\n\n<p>In the tactic state near where I gave up, the only difference I see between the goal and <code>this</code> is that the goal uses ≤ and <code>this</code> uses <code>r</code> and <code>s</code>.</p>",
        "id": 135512696,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539136540
    },
    {
        "content": "<p>This is a job for <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 135521752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539152520
    },
    {
        "content": "<p>You should be able to use function coercion instead of <code>to_fun</code> and <code>inv_fun</code> everywhere</p>",
        "id": 135521873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539152756
    },
    {
        "content": "<p>This is ridiculous.</p>",
        "id": 135525340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158161
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">oi</span> <span class=\"o\">:</span> <span class=\"n\">order_iso</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135525381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158175
    },
    {
        "content": "<p>game: spot the error</p>",
        "id": 135525382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158181
    },
    {
        "content": "<p>no error?</p>",
        "id": 135525444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158285
    },
    {
        "content": "<p>even Mario missed it</p>",
        "id": 135525621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158491
    },
    {
        "content": "<p>the correct declaration should be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">oi</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">order_iso</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 135525626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158499
    },
    {
        "content": "<p>In particular, this means that <code>order_iso</code> is not what we want it to be.</p>",
        "id": 135525779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539158653
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">galois_connection</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">order_iso</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">order_iso</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">oi</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">order_iso</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_galois_connection</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">oi</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ord&#39;</span> <span class=\"n\">oi</span><span class=\"o\">,</span> <span class=\"n\">apply_inverse_apply</span><span class=\"o\">]</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">to_galois_insertion</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">galois_insertion</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">oi</span> <span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">choice</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">oi</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">gc</span> <span class=\"o\">:=</span> <span class=\"n\">to_galois_connection</span> <span class=\"n\">oi</span><span class=\"o\">,</span>\n  <span class=\"n\">le_l_u</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">oi</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">choice_eq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">order_iso</span>\n</pre></div>",
        "id": 135525786,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how many of this error do you think are in mathlib?</p>",
        "id": 135525822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158734
    },
    {
        "content": "<p>Oh, I missed the context</p>",
        "id": 135525870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158764
    },
    {
        "content": "<p>I thought you meant those variables don't typecheck</p>",
        "id": 135525877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158777
    },
    {
        "content": "<p>are you saying that this is in mathlib?</p>",
        "id": 135525899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158829
    },
    {
        "content": "<p>I guess there is a tension here between <code>order_iso</code>, which works with explicit relations, and <code>galois_connection</code>, which works with types with a <code>preorder</code> instance</p>",
        "id": 135525974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158903
    },
    {
        "content": "<p>I'm saying that there are errors like this in mathlib</p>",
        "id": 135525988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539158942
    },
    {
        "content": "<p>I'm sure there are, but someone has to notice them first</p>",
        "id": 135526005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158969
    },
    {
        "content": "<p>if no one notices them then they aren't doing anyone harm</p>",
        "id": 135526012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539158983
    },
    {
        "content": "<blockquote>\n<p>if no one notices them then they aren't doing anyone harm</p>\n</blockquote>\n<p>Except that you might think you have formalised something, but it turns out to be something else.</p>",
        "id": 135526075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539159028
    },
    {
        "content": "<p>that's where the fun is</p>",
        "id": 135526085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539159046
    },
    {
        "content": "<p>Isn't this exactly related to <a href=\"#narrow/stream/113488-general/subject/stacks.20project.20.2F.20schemes/near/123090992\" title=\"#narrow/stream/113488-general/subject/stacks.20project.20.2F.20schemes/near/123090992\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/stacks.20project.20.2F.20schemes/near/123090992</a></p>",
        "id": 135526089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539159059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , now all the people who bothered to click and investigate are in on the joke, can you paste one line of explanation for those of us that are so busy preparing 1st year lectures that we don't even understand the issue at hand here and would hence prefer it if your comments were less cryptic?</p>",
        "id": 135529045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539163253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> basically there are two orders on each type when there should only be one order</p>",
        "id": 135531256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539166043
    },
    {
        "content": "<p>Thanks Kenny! I'm glad it turned out to be something simple.</p>",
        "id": 135541695,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539178839
    }
]