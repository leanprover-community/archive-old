[
    {
        "content": "<p>Hello! I'm having a bit of some trouble with universes and polymorphism<br>\nI would like to have a continuation-based type with a polymorphic answer type. In particular I am implementing the \"LogicT\" monad transformer, which uses this. My current formulation from the Logic paper, using success and failure continuations is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">ans</span>\n<span class=\"kd\">def</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"n\">ans</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LogicT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">ans</span>\n</code></pre></div>\n<p>Unfortunately due to the polymorphism, I have to raise the universe level at the very end. This is fine, but it starts to create issues when I have to do things like <code>LogicT m X</code> where <code>X</code> contains some other instance of a <code>LogicT m a</code><br>\nIs there any way to get around this or am I going down the wrong path?</p>",
        "id": 223689359,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611344695
    },
    {
        "content": "<p>Would this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">ans</span>\n<span class=\"kd\">def</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"n\">ans</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LogicT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">ans</span>\n</code></pre></div>",
        "id": 223692218,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611345963
    },
    {
        "content": "<p>It can be generalized to more universes it seems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">ans</span>\n<span class=\"kd\">def</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"n\">ans</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LogicT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">ans</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">LogicT</span>\n</code></pre></div>",
        "id": 223692363,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611346036
    },
    {
        "content": "<p>What is <code>Type*</code>? It doesn't seem to work for me, probably because I'm using lean4.</p>\n<p>But the issue with putting {ans : Type u} in the definition is that I can no longer instantiate classes for it<br>\nFor example I have this definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">LogicT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Which if I add <code>ans</code> as an optional argument complains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">LogicT</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">LogicT</span> <span class=\"n\">m</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.247</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.247</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.247</span> <span class=\"bp\">?</span><span class=\"n\">u.246</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.252</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.251</span>\n</code></pre></div>",
        "id": 223695034,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611347267
    },
    {
        "content": "<p>Use <code>Type _</code> instead: <a href=\"https://leanprover.github.io/lean4/doc/typeobjs.html?highlight=type*\">https://leanprover.github.io/lean4/doc/typeobjs.html?highlight=type*</a></p>",
        "id": 223695781,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611347573
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ans</span>\n<span class=\"kd\">def</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"n\">ans</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LogicT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">},</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">ans</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">LogicT</span>\n</code></pre></div>\n<p>Yes you get the increase in universes unfortunately.</p>",
        "id": 223696105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611347715
    },
    {
        "content": "<p>Hm, is there any way to nest them then? Possibly with a function that increases the universe by a level?</p>",
        "id": 223696169,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611347748
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ans</span>\n<span class=\"kd\">def</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"n\">ans</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LogicT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">},</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">LogicT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_const</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">seq</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">seq_left</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">seq_right</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223696331,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611347814
    },
    {
        "content": "<p>Can you fill those in Lean 3?</p>",
        "id": 223696356,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611347823
    },
    {
        "content": "<p>I just did pure &amp; bind, since that seems to compile just fine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">ans</span>\n<span class=\"kd\">def</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"n\">ans</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">LogicT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ans</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"n\">SK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FK</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">ans</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">ans</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">logicPure</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">sk</span> <span class=\"n\">fk</span><span class=\"o\">,</span> <span class=\"n\">sk</span> <span class=\"n\">x</span> <span class=\"n\">fk</span>\n<span class=\"kd\">def</span> <span class=\"n\">logicBind</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">sk</span><span class=\"o\">,</span>  <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">λ</span>  <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">sk</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">LogicT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">logicPure</span><span class=\"o\">,</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">logicBind</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223698143,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611348691
    },
    {
        "content": "<p>Great, so will that work in Lean 4?</p>",
        "id": 223698456,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611348828
    },
    {
        "content": "<p>Yes! the bindings for monads and such work great. The issue is this (arguably important) function from the paper</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">msplit</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Maybe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">,</span> <span class=\"n\">LogicT</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>which is used to create \"fairness\" results and reading of one result at a time even with a strict monad m</p>",
        "id": 223700152,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611349562
    },
    {
        "content": "<p><code>Option</code> is Lean4 for <code>Maybe</code>, but I'm sure you know that</p>",
        "id": 223700443,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611349690
    },
    {
        "content": "<p>Oh that's helpful, I thought there wasn't a Maybe so I created it myself....</p>",
        "id": 223700514,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611349735
    }
]