[
    {
        "content": "<p>Is there any way to canonically transform a given traditional deduction proof (<a href=\"http://seop.illc.uva.nl/entries/natural-deduction/fitch1.svg\">this</a> for example) to a proof in Lean? In particular I would like to have a way to do the \"or\" introduction in this way. That is, it would be nice to be able to structure the proofs in such a way in Lean that to deduce \"p \\vee q \\imp r\" we could do this  with first doing  \"assume p, ........., have r\" and then \"assume q, ....., have r\" and then have \"p \\vee q \\imp r\", instead of having to put the deduction of p \\imp r and q \\imp r <em>after</em> \"p \\vee q \\imp r\". </p>\n<p>I hope the question is clear!</p>",
        "id": 281118409,
        "sender_full_name": "ebp",
        "timestamp": 1651648381
    },
    {
        "content": "<p>I think you should be able to formulate a proof in this style simply by using the <code>intro</code>, <code>exact</code> and <code>have</code> tactics.</p>",
        "id": 281118884,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1651648733
    },
    {
        "content": "<p>How would this look in the case of proving p \\vee q \\imp q \\vee p? As in the following proof: <a href=\"/user_uploads/3121/nWuWjJ3dItJCH6gyMdc5p7Y0/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nWuWjJ3dItJCH6gyMdc5p7Y0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nWuWjJ3dItJCH6gyMdc5p7Y0/image.png\"></a></div>",
        "id": 281121065,
        "sender_full_name": "ebp",
        "timestamp": 1651650431
    },
    {
        "content": "<p>Are you asking for something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"n\">or.elim</span> <span class=\"n\">hpq</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n   <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n   <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281122355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651651255
    },
    {
        "content": "<p>(which isn't very idiomatic, but does seem to match the style of your image)</p>",
        "id": 281122420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651651307
    },
    {
        "content": "<p>Ah maybe my question was not clear. The difference in the Lean proof and the one I posted is that in the Lean proof in some sense you put the rules (2,3) and (4,5) <em>after</em> rule 6, or as an <em>explanation</em> of rule 6, whereas in the deduction proof the rules (2,3) and (4,5) also stand on their own in some sense. So, I am looking for a way to implement this \"chronological\" structure in Lean</p>",
        "id": 281123351,
        "sender_full_name": "ebp",
        "timestamp": 1651651946
    },
    {
        "content": "<p>So something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">),</span>\n<span class=\"n\">or.elim</span> <span class=\"n\">hpq</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281123917,
        "sender_full_name": "ebp",
        "timestamp": 1651652350
    },
    {
        "content": "<p>So maybe this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span>\n</code></pre></div>",
        "id": 281125071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651653099
    },
    {
        "content": "<p>yes, although now the deduction rules (2,3)  and (4,5) are replaced by the direct use of or.inr and or.inl respectively. I am looking for a way to make Lean really accessible for students having basic knowledge of deduction proofs in the Fitch style, so every piece of \"extra\" syntax is too much.</p>",
        "id": 281125786,
        "sender_full_name": "ebp",
        "timestamp": 1651653500
    },
    {
        "content": "<p>Growing up as a mathematician I certainly learnt about how to write logically correct arguments. However because we work informally we were never shown these well-defined \"styles\" of proofs which people with a computer science background seem to be taught -- I'm not sure we place any weight on them. Looking at how my lecturers presented their arguments, they were in almost all cases completely logically correct, but they were typically a complete mismash of styles -- \"WLOG x&lt;=y so we can break the symmetry. Clearly it suffices to prove P. The case x=0 is trivial so assume 0&gt;x. Next we claim that H is true...\". We're leaping from the top to the bottom, just trying to join things together. I read this kind of question and think \"well if a student actually has a basic understanding of deduction proofs, they should surely be able to switch between styles seamlessly -- that's what we expect from them in a mathematics department\". </p>\n<p>At computer science conferences I have been asked questions about proof styles by people and have been too bewildered by the question to give any sort of coherent answer. I have seen people talk about various styles of proof in Isabelle/HOL and how this issue is somehow important. It leaves me completely cold. What am I missing?</p>",
        "id": 281126633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651653979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477460\">ebp</span> <a href=\"#narrow/stream/113489-new-members/topic/.22Fitch.22.20style.20proofs.20to.20Lean.20proofs/near/281125786\">said</a>:</p>\n<blockquote>\n<p>yes, although now the deduction rules (2,3)  and (4,5) are replaced by the direct use of or.inr and or.inl respectively.</p>\n</blockquote>\n<p>How about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hpqp</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inr</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hqqp</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.elim</span> <span class=\"n\">hpq</span> <span class=\"n\">hpqp</span> <span class=\"n\">hqqp</span>\n</code></pre></div>",
        "id": 281127626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651654641
    },
    {
        "content": "<p>Indeed, for students which are more \"mathematically mature\" it should not be a problem at all. However, I can imagine that for students of say philosophy doing a one time course in logic, it can be beneficial to start with just one straight forward style of proofs. </p>\n<p>Besides this, I am trying to write a sort of implementation of Lean in which the the amount of syntax that has to be used by the student is reduced as much as possible, in the sense that I want them to be able to write proofs only typing propositions, and whether the proposition is a conclusion or an assumption. For this implementation it is useful to have a way to translate Fitch style proofs to Lean proofs due to the simple structure of the Fitch style proofs.</p>",
        "id": 281127784,
        "sender_full_name": "ebp",
        "timestamp": 1651654730
    },
    {
        "content": "<p>Perhaps the goal should be for the tool you screenshot above to export a lean proof that somewhat resembles it, rather than manually writing lean proofs in this style</p>",
        "id": 281128052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651654880
    },
    {
        "content": "<p>Yes indeed. In the case of the tool it does not matter what the final Lean file looks like, but I thought it would be nice to have it resemble the original proof as much as possible so we do not need to write too many case distinctions for different inference rules and do a more general translation from Fitch to Lean. Maybe I am a bit too naive about this.</p>",
        "id": 281128356,
        "sender_full_name": "ebp",
        "timestamp": 1651655103
    },
    {
        "content": "<blockquote>\n<p>However, I can imagine that for students of say philosophy doing a one time course in logic, it can be beneficial to start with just one straight forward style of proofs.</p>\n</blockquote>\n<p>Aah I see. Thanks. I only ever get access to mathematicians in the UK university system.</p>",
        "id": 281128790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651655380
    },
    {
        "content": "<p>Btw, you might also be interested in the <code>#explode_widget</code> and <code>#explode</code> commands, see <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/explode.html#tactic.explode_cmd\">https://leanprover-community.github.io/mathlib_docs/tactic/explode.html#tactic.explode_cmd</a></p>",
        "id": 281143799,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651665130
    },
    {
        "content": "<p>Reading you original question, I think you just want the arguments to <code>or.elim</code> to be swapped, so that it's <code>(a → c) → (b → c) → a ∨ b → c</code> (instead of the current <code>a ∨ b → (a → c) → (b → c) → c</code>). I was about to make that change because it would then match <code>or.rec</code>.</p>",
        "id": 281143993,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651665251
    },
    {
        "content": "<p>Yeah I saw this explode thing as well! However, this looks a bit more like the other way around; extracting a Fitch proof from a Lean proof, instead of the other way around right?</p>",
        "id": 281146927,
        "sender_full_name": "ebp",
        "timestamp": 1651667075
    },
    {
        "content": "<p>Yes that's what it does, so not directly what you want, but related enough I wanted to make sure you were aware <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>!</p>",
        "id": 281147185,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651667230
    },
    {
        "content": "<p>Maybe this resembles (reversed) Fitch-style proofs somewhat:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">since</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">since</span> <span class=\"n\">h4</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm using a custom tactic <code>since</code> that tries <code>exact</code>, possibly preceded by <code>left</code> or <code>right</code>. That way there's just one way to do the \"∨ I\" rule.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">since</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.interactive.exact</span> <span class=\"n\">q</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic.left</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.interactive.exact</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">tactic.right</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic.interactive.exact</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 281157712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651672274
    },
    {
        "content": "<p>Or, with <code>elim</code> as a synonym for <code>cases</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.elim</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.interactive.cases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">elim</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">since</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">since</span> <span class=\"n\">h4</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281157989,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651672400
    }
]