[
    {
        "content": "<p>I'm working through the Theorem Proving book, and trying to prove associativity of and.</p>\n<p>I've got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">and_assoc_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hpqr</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">hpqr.left.left</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">hpqr.left.right</span> <span class=\"n\">hpqr.right</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which typechecks just fine, but when I try to use it I get a strange error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n  <span class=\"o\">(</span> <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and_assoc_right</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"c1\">-- etc</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">and_assoc_right</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>&amp; I'm not sure what Lean is trying to tell me.</p>",
        "id": 299660987,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663629766
    },
    {
        "content": "<p>The first three arguments to <code>and_assoc_right</code> are <code>p</code>, <code>q</code>, and <code>r</code> themselves. To use it as written, you can write <code>and_assoc_right _ _ _ h</code>, where the underscores tell Lean to figure out <code>p</code>, <code>q</code>, and <code>r</code> from context.</p>",
        "id": 299661768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663630231
    },
    {
        "content": "<p>If you alter <code>and_assoc_right</code> to have <code>{p q r : Prop}</code> in curly braces, then your <code>example</code> should work. This causes Lean to always try to figure out <code>p</code>, <code>q</code>, and <code>r</code> from context.</p>",
        "id": 299661831,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663630273
    },
    {
        "content": "<p>The type mismatch error you are seeing is from the fact that you are supplying <code>h</code> for <code>p</code>, but <code>p</code> is supposed to be a <code>Prop</code>.</p>",
        "id": 299661874,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663630314
    },
    {
        "content": "<p>Ah -- mentally I think I'm I'm passing in one conjunction and getting back another, but I could partially apply…? something?</p>",
        "id": 299662307,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663630606
    },
    {
        "content": "<p>I guess I'm passing in some types and a compound with those types? Or?? My mental model doesn't match dependent typing well.</p>",
        "id": 299662364,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663630653
    },
    {
        "content": "<p>Reading again, I have an actual <code>Prop</code> and Lean wants me to pass a type....</p>",
        "id": 299662549,
        "sender_full_name": "Arien Malec",
        "timestamp": 1663630791
    },
    {
        "content": "<p><code>and_assoc_right</code> takes four explicit arguments: the three before the colon and a proof of <code>(p ∧ q) ∧ r</code></p>",
        "id": 299662958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663631078
    },
    {
        "content": "<p>The error message that it is expecting a <code>Prop : Type</code> is admittedly confusing, but it's meant to give you more information. It's just wanting a <code>Prop</code> for the first argument (and <code>Prop</code> has type <code>Type</code>). It is similar to how it is reporting that <code>h</code> has type <code>(p ∧ q) ∧ r</code> (and <code>(p ∧ q) ∧ r</code> has type <code>Prop</code>).</p>",
        "id": 299663029,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663631153
    },
    {
        "content": "<p>My curly brace suggestion has the effect of making the first three arguments be implicit arguments. That way when you supply <code>h</code> it goes toward the explicit argument corresponding to <code>(p ∧ q) ∧ r</code>.</p>",
        "id": 299663141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663631235
    }
]