[
    {
        "content": "<p>Why doesn't <code>fintype.prod_dite</code> has the label <code>to_additive</code>? I need to use the sum version of this. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 246143925,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626377505
    },
    {
        "content": "<p>and an <code>ite</code> version also seems missing</p>",
        "id": 246144253,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626377658
    },
    {
        "content": "<p>Not very familiar with this part, I would be grateful if anyone can do the poof!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fintype.prod_ite</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.attach_eq_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">library_search</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246146242,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626378616
    },
    {
        "content": "<p>Please, <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports and variables</p>",
        "id": 246147355,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626379108
    },
    {
        "content": "<p>You have that already, and for us to try to explore the issue, we'd have to rewrite it ourselves. It's almost surely easier for you to just copy+paste the extra few lines</p>",
        "id": 246147457,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626379158
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fintype.prod_ite</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_ite</span><span class=\"o\">,</span> <span class=\"n\">finset.attach_eq_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246148250,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626379524
    },
    {
        "content": "<p>I wrote the imports.</p>",
        "id": 246148310,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626379557
    },
    {
        "content": "<p>I tagged <code>fintype.prod_dite</code> at <code>@{to_additive]</code> in <code>data.fintype.card</code> and then the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fintype.prod_ite</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∏</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.prod_dite</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fintype.sum_ite</span>\n</code></pre></div>",
        "id": 246148867,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626379826
    },
    {
        "content": "<p>I think this can make a PR.</p>",
        "id": 246150187,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626380550
    },
    {
        "content": "<p>Feel free to!</p>",
        "id": 246150200,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626380560
    },
    {
        "content": "<p>Can this be made more general? <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 246150824,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626380934
    },
    {
        "content": "<p>Well the <code>dite</code> version is the more general one, no? What additional generality would you want?</p>",
        "id": 246150870,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626380969
    },
    {
        "content": "<p>By the way, in the <code>{prod,sum}_ite</code> lemma, <code>p</code> should be an explicit variable.</p>",
        "id": 246151173,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626381133
    },
    {
        "content": "<p>I am not sure if there could be any generalization. I was just asking. This lemma now is enough for my own use.</p>",
        "id": 246151542,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626381340
    }
]