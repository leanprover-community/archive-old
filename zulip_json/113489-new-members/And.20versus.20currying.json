[
    {
        "content": "<p>Let's say I want to state the theorem that the ≤ relation on nats is transitive, I can do it in two ways, one using <code>and</code> and the other with currying. I believe they are equivalent. It looks like mathlib uses currying; why should I prefer one approach over the other?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trans1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span>\n<span class=\"n\">trans2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 239688131,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621564330
    },
    {
        "content": "<p>implication is more fundamental, and is a inductive type</p>",
        "id": 239688999,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1621565225
    },
    {
        "content": "<p>one is simpler than the other</p>",
        "id": 239689002,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1621565228
    },
    {
        "content": "<p>suppose you want to apply the hypothesis <code>x &lt;= y</code> to <code>trans2</code> - it's impossible without some busywork constructing an <code>and</code> structure</p>",
        "id": 239689151,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1621565373
    },
    {
        "content": "<p>ok thanks!</p>",
        "id": 239689248,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1621565468
    },
    {
        "content": "<p>They're logically equivalent but they're not definitionally equivalent and, as Andrew says, the version with the implications is more primitive and hence easier to use. The version with all the arrows looks weird to a mathematician because we don't usually write stuff like that, but if you put stuff before the colon then it looks totally normal: <code>trans1 (x y z : A) (hxy : x &lt;= y) (hyz : y &lt;= z) : x &lt;= z</code></p>",
        "id": 239700815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621577104
    }
]