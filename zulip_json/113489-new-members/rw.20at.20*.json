[
    {
        "content": "<p>If I have <code>h : a = b</code>, and I want to get rid of all the <code>a</code>s  in my hypotheses, I use <code>rw h at *</code>. But sometimes some are unaffected, and I have to manually go through them, using <code>rw h at h37</code>. Am I doing something wrong or is there a better way?</p>",
        "id": 130715172,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533131597
    },
    {
        "content": "<p><code>subst h</code></p>",
        "id": 130715571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533131944
    },
    {
        "content": "<p>That didn't work.</p>",
        "id": 130742552,
        "sender_full_name": "Ali Sever",
        "timestamp": 1533158693
    },
    {
        "content": "<p>I think that should be <code>subst a</code></p>",
        "id": 130742974,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533159170
    },
    {
        "content": "<p>(if a is a variable)</p>",
        "id": 130742978,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533159180
    },
    {
        "content": "<p>nah, it's <code>subst h</code></p>",
        "id": 130742985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533159185
    },
    {
        "content": "<p>Alternatively, <code>simp only [h] at *</code> might help</p>",
        "id": 130743052,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533159245
    },
    {
        "content": "<p>both <code>subst a</code> and <code>subst h</code> should work</p>",
        "id": 130743727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533160041
    },
    {
        "content": "<p>Can someone explain why the following doesn't work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">-- exact h1.symm ▸ h2.symm ▸ h (doesn&#39;t work)</span>\n<span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 131967570,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534018738
    },
    {
        "content": "<p>Try <code>refine h1.symm ▸ _</code> (instead of exact).  Then you see the expected type Lean uses to elaborate <code>h2.symm ▸ h</code> and you'll see why it doesn't work.</p>",
        "id": 131967688,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1534018932
    },
    {
        "content": "<p>If I have <code>q</code>instead of <code>g p</code>, the order doesn't matter, why does <code>g p</code> including <code>p</code> change how it works?</p>",
        "id": 131967774,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534019154
    },
    {
        "content": "<p>Isn't there a way to make subst only work once?</p>",
        "id": 131967915,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534019393
    },
    {
        "content": "<p>It works with <code>q</code> instead of <code>g p</code> because <code>q</code> does not contain <code>p</code>.  No, when <code>▸</code> is elaborated, all occurrences of the lhs are replaced in the expected type.  In a sense <code>h ▸ _</code> in term mode does pretty much the same as <code>rw ← h</code> in tactic mode.</p>",
        "id": 131968029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1534019551
    },
    {
        "content": "<blockquote>\n<p>In a sense <code>h ▸ _</code> in term mode does pretty much the same as <code>rw ← h</code> in tactic mode.</p>\n</blockquote>\n<p>Except for obeying.</p>",
        "id": 131968039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534019601
    },
    {
        "content": "<p>Can someone help me to prove that a * b + c * d = b * a + d * c , seems that mul_comm cannot work here</p>",
        "id": 131970450,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534024643
    },
    {
        "content": "<p>Have you tried <code>ring</code>? &lt;--- oops, this won't work: this is me being a mathematician and forgetting \"ring\" doesn't mean \"commutative ring\".</p>",
        "id": 131970633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534025004
    },
    {
        "content": "<p>You can also use <code>conv</code> to restrict where the <code>rw</code> acts.</p>",
        "id": 131970641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534025025
    },
    {
        "content": "<p><code>ring</code> will work if you assume <code>comm_ring</code> instance</p>",
        "id": 131970840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534025397
    },
    {
        "content": "<p>oh, that's cool, I hadn't known that!</p>",
        "id": 131970884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534025412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n      <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">skip</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">},</span>\n      <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 131971004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534025737
    },
    {
        "content": "<p>The second one is a bit silly, but fun</p>",
        "id": 131971008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534025754
    },
    {
        "content": "<p>I often use partial specification to describe where to rewrite, although this doesn't always work and then you can use the <code>conv</code> approach</p>\n<div class=\"codehilite\"><pre><span></span>example {α : Type*} [comm_ring α] {a b c d : α} :  a * b + c * d = b * a + d * c :=\nby rw [mul_comm, mul_comm c]\n</pre></div>",
        "id": 131975463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534036380
    },
    {
        "content": "<p>Also, <code>by simp [mul_comm]</code> works</p>",
        "id": 131975469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534036388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In fact <code>ring</code> is <em>only</em> for commutative (semi)rings. Perhaps I should have put <code>comm</code> in the name but I don't have any idea how to normalize a noncommutative ring</p>",
        "id": 131975512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534036471
    },
    {
        "content": "<p>Perhaps we should put <code>noncomm_</code> in the name of a noncommutative ring. :-)</p>",
        "id": 131975517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1534036504
    },
    {
        "content": "<p>Oh, I see, thank you very much</p>",
        "id": 132002007,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534089403
    },
    {
        "content": "<p>How would one check to see which lemmas simp used? I want to suppress one of them.</p>",
        "id": 132126762,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534270896
    },
    {
        "content": "<p><code>set_option trace.simplify.rewrite true</code></p>",
        "id": 132127189,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534271343
    },
    {
        "content": "<p>Is it impractical to have a tactic/function that does eq.subst with def eq things?</p>",
        "id": 132401970,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534679461
    },
    {
        "content": "<p>I don't think that's computable.</p>",
        "id": 132402856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534681236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120256\">@Ali Sever</span> Do you know about <code>dsimp</code> and <code>simp!</code>?</p>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you think it's uncomputable because def equality is not transitive? That doesn't matter as long as the language is strongly normalizing: every definition is guaranteed to terminate</p>",
        "id": 132409890,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534692444
    },
    {
        "content": "<p>I want to be able to do something in the lines of <code>exact q ▸ h</code>, but I have to do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>where <code>q</code>is def eq to a proof of <code>a = b</code>.</p>",
        "id": 132410176,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534692882
    },
    {
        "content": "<p>You can do <code>(show a = b, from q) ▸ h</code></p>",
        "id": 132410344,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534693157
    },
    {
        "content": "<p>I guess that's close enough, but I'm still wondering why it isn't its own function.</p>",
        "id": 132410562,
        "sender_full_name": "Ali Sever",
        "timestamp": 1534693471
    },
    {
        "content": "<p>you might be able to try <code>erw q</code></p>",
        "id": 132410586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534693547
    },
    {
        "content": "<p>I would be curious to know whether that ever works; I've only seen <code>erw</code> see through definitional equalities in the goal/hypothesis to be rewritten</p>",
        "id": 132410896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1534694036
    },
    {
        "content": "<p>It does seem like <code>rw</code> could try to reduce the rule until it is at least of the form <code>_ = _</code>, if it isn't already of that form</p>",
        "id": 132410966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1534694152
    },
    {
        "content": "<p>Or <code>iff</code></p>",
        "id": 132411016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1534694176
    }
]