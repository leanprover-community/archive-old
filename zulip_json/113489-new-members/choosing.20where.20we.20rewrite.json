[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n   <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">sub_le_sub_iff_right</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sub_add_cancel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>rw ← sub_add_cancel a b</code> add a <code>-b+b</code> everywhere there is an <code>a</code>, but I just want to do the rewrite in the <code>abs a</code> on the left hand side. Is the a way to specify this?</p>",
        "id": 217948028,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606344433
    },
    {
        "content": "<p>Take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nth_rewrite\">tactic#nth_rewrite</a></p>",
        "id": 217948181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606344550
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n   <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">sub_le_sub_iff_right</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n   <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">sub_add_cancel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217948209,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606344579
    },
    {
        "content": "<p>Hum I get an <code>unknown identifier 'nth_rewrite'</code> error if I do the same. Do I need to import something?</p>",
        "id": 217948597,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606344861
    },
    {
        "content": "<p>Not sure why... I just copied and pasted the whole contents of the file.</p>",
        "id": 217948672,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606344934
    },
    {
        "content": "<p>Which compiles fine.</p>",
        "id": 217948694,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606344953
    },
    {
        "content": "<p>Are you using a recent version of mathlib?</p>",
        "id": 217948703,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606344960
    },
    {
        "content": "<p>Yeah I downloaded it just today :)</p>",
        "id": 217948800,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606345029
    },
    {
        "content": "<p>It should work... your installation might be broken in some way.</p>",
        "id": 217949089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606345262
    },
    {
        "content": "<p>I just tried that code with a fresh project with the most current mathlib, and it works just fine.</p>",
        "id": 217949131,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606345301
    },
    {
        "content": "<p>It even works in the web playground:<br>\n<a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%0A%0Avariables%20a%20b%20%3A%20%E2%84%9D%0A%0Aexample%20%3A%20abs%20a%20-%20abs%20b%20%E2%89%A4%20abs%20(a%20-%20b)%20%3A%3D%0Abegin%0A%20%20%20rw%20%5B%E2%86%90%20sub_add_cancel%20(abs%20(a%20-%20b))%20(-abs%20b)%2C%20sub_neg_eq_add%5D%2C%0A%20%20%20apply%20(sub_le_sub_iff_right%20(abs%20b)).mpr%2C%0A%20%20%20nth_rewrite%200%20%E2%86%90sub_add_cancel%20a%20b%2C%0Aend%0A\">https://leanprover-community.github.io/lean-web-editor/#code=import%20data.real.basic%0A%0Avariables%20a%20b%20%3A%20%E2%84%9D%0A%0Aexample%20%3A%20abs%20a%20-%20abs%20b%20%E2%89%A4%20abs%20(a%20-%20b)%20%3A%3D%0Abegin%0A%20%20%20rw%20%5B%E2%86%90%20sub_add_cancel%20(abs%20(a%20-%20b))%20(-abs%20b)%2C%20sub_neg_eq_add%5D%2C%0A%20%20%20apply%20(sub_le_sub_iff_right%20(abs%20b)).mpr%2C%0A%20%20%20nth_rewrite%200%20%E2%86%90sub_add_cancel%20a%20b%2C%0Aend%0A</a></p>",
        "id": 217949233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606345381
    },
    {
        "content": "<p>Weird...</p>",
        "id": 217949477,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606345579
    },
    {
        "content": "<p>Another way to do things like this is <code>conv_lhs { rw ← sub_add_cancel a b }</code>. See <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a>  for more information about conv-mode.</p>",
        "id": 217950781,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606346767
    },
    {
        "content": "<p>Yet another way is to work backwards rather than forwards. You're presumably trying to turn your goal into something where you can finish with <code>abs_add (a - b) b</code>. Why not just tell Lean that's how you want to finish with <code>convert</code> and then pick up the pieces afterwards?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n   <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">sub_le_sub_iff_right</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n   <span class=\"c1\">-- ⊢ abs a ≤ abs (a - b) + abs b</span>\n   <span class=\"n\">convert</span> <span class=\"n\">abs_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"c1\">-- ⊢ a = a - b + b</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I would be more worried that you can't get a proof compiling which works for everyone else. Did you follow the instructions <a href=\"https://leanprover-community.github.io/get_started.html\">on the community website</a>?</p>",
        "id": 217951285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347213
    },
    {
        "content": "<p>If you're working in a Lean project (which you should be) then you can perhaps use something like <code>leanproject upgrade-mathlib</code> to upload the copy of mathlib for that project.</p>",
        "id": 217951385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606347304
    },
    {
        "content": "<p>Thanks for the tips, I didn't know about <code>conv_lhs</code> and <code>convert</code>. Also <code>leanproject upgrade-mathlib</code> worked, thanks!</p>",
        "id": 217958941,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1606356072
    }
]