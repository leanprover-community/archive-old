[
    {
        "content": "<p>I am working through some simple examples for dealing with real-valued functions in lean. I have two questions. </p>\n<p>First, In the following example, how can I apply the introduced variables to eliminate the forall in the hypothesis <code>rep</code>?</p>\n<p>Second, once that is eliminated, how can I rewrite, for example, <code>R x y</code> to be <code>f x &gt;= f y</code> using that <code>rep</code> hypothesis?</p>\n<p>MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Defininig Complete Relations -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rtransitive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span>  <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">rational</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rtransitive</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">complete</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">represents</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">complete</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rename</span> <span class=\"o\">[</span><span class=\"n\">h_w</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h_h</span> <span class=\"n\">rep</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complete</span><span class=\"o\">],</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282001018,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652290520
    },
    {
        "content": "<p>Doesn't the <code>parameter</code> give you two <code>R</code>in the definition of <code>complete</code>? I would encourae you to not use parameters; they are not used at all in mathlib for example.</p>",
        "id": 282001194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652290619
    },
    {
        "content": "<p>That's right. I'm not sure where I picked up this habit, but someone else mentioned it to me as well.</p>",
        "id": 282001305,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652290662
    },
    {
        "content": "<p>Replace <code>parameters</code> with <code>variables</code> would be the first thing I'd do with your code.</p>",
        "id": 282001508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652290757
    },
    {
        "content": "<p>Ok,  this gets those parameters replaced with variables. I will have to read more about the distinction, but I found it here: <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Defininig Complete Relations -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rtransitive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span>  <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rational</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rtransitive</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">complete</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">represents</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">complete</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rename</span> <span class=\"o\">[</span><span class=\"n\">h_w</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h_h</span> <span class=\"n\">rep</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complete</span><span class=\"o\">],</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282002487,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652291173
    },
    {
        "content": "<p>Hey! That fixed it!</p>",
        "id": 282002702,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652291262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Defininig Complete Relations -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rtransitive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span>  <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rational</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rtransitive</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">complete</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">represents</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">complete</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rename</span> <span class=\"o\">[</span><span class=\"n\">h_w</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h_h</span> <span class=\"n\">rep</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complete</span><span class=\"o\">],</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">rep2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rep</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n\n\n\n<span class=\"o\">},</span>\n\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282002797,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652291297
    },
    {
        "content": "<p>Let's see if I can make some progress. By the way, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> your videos are amazing! I love how fluent you are in Lean. It is inspiring. I find myself emulating the way you talk in the videos when I work with my RA in lean.</p>",
        "id": 282002910,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652291361
    },
    {
        "content": "<p>If you don't like the name <code>h_w</code> (and who would!) then you can do <code>cases h with f rep</code></p>",
        "id": 282003073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652291436
    },
    {
        "content": "<p>That is better. Making some progress here. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Defininig Complete Relations -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rtransitive</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span>  <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rational</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">rtransitive</span> <span class=\"n\">R</span> <span class=\"bp\">∧</span> <span class=\"n\">complete</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">represents</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">complete</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">rep</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complete</span><span class=\"o\">],</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">repxy</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rep</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">repyx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rep</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">repxy</span> <span class=\"k\">with</span> <span class=\"n\">fxfyRxy</span> <span class=\"n\">Rxyfxfy</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">repyx</span> <span class=\"k\">with</span> <span class=\"n\">fyfxRyx</span> <span class=\"n\">Ryxfyfx</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"o\">},</span>\n\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282003537,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652291610
    },
    {
        "content": "<p>Think I need to show fx &gt;= fy or fy &gt;= fx from completeness of &gt;= on the reals.</p>",
        "id": 282003659,
        "sender_full_name": "Greg Leo",
        "timestamp": 1652291657
    }
]