[
    {
        "content": "<p>Hey, trying to define a quiver as an inductive type, I'm getting the error <code>invalid inductive datatype, resultant type is not a sort</code> which I can't really make sense of. I tried fiddling with universes, but it doesn't seem to help. Is there a way to make this snippet work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">classical</span> <span class=\"n\">function</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">v'</span> <span class=\"n\">u''</span> <span class=\"n\">v''</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">push_quiver</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V'</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">V'</span>\n<span class=\"kd\">def</span> <span class=\"n\">push_quiver</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">X'</span> <span class=\"n\">Y'</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">σ</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X'</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"n\">σ</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y'</span><span class=\"o\">}),</span> <span class=\"n\">X.val</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.val</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- would be better but get universe troubles</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">push_quiver_arrows</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">V'</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">push_quiver_arrows</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">push_quiver</span>\n</code></pre></div>",
        "id": 303022955,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665237817
    },
    {
        "content": "<p>An <code>inductive</code> with a single non-recursive constructor is a <code>structure</code>. So why not just use <code>structure</code>?</p>",
        "id": 303023168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665237914
    },
    {
        "content": "<p>I can't really make sense of what you wrote, because the return type of <code>push_quiver_arrows</code> is <code>quiver V'</code>, not <code>V' → V' → Sort*</code>.</p>",
        "id": 303023297,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665237967
    },
    {
        "content": "<p>Note that <code>quiver V</code> is <strong>not</strong> definitionally equal to <code>V → V → Sort*</code>. So you should wrap a <code>V → V → Sort*</code> explicitly rather than letting Lean figure out that you think <code>quiver V</code> is the same as <code>V → V → Sort*</code>.</p>",
        "id": 303023476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665238065
    },
    {
        "content": "<p>I wanted to make this using an inductive type after Joel Rioux proposal to make <a href=\"https://github.com/leanprover-community/mathlib/blob/f5a600f8102c8bfdbd22781968a20a539304c1b4/src/category_theory/groupoid/free_groupoid.lean#L69\">the following</a> into an inductive def.</p>",
        "id": 303023790,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665238219
    },
    {
        "content": "<p>Now I'm dumbly trying to make as much as possible into inductive types, and figured it would also work here.</p>",
        "id": 303023842,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665238245
    },
    {
        "content": "<p>But I guess the difference was that in that case, the <code>hom_rel</code> type is defeq to <code>… -&gt; Prop</code>, is that it?</p>",
        "id": 303023917,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665238280
    },
    {
        "content": "<p>I mean, yes, it will work, but you need the return type to be <code>V' → V' → Sort*</code>, not <code>quiver V'</code></p>",
        "id": 303024087,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665238343
    },
    {
        "content": "<p>Here it makes sense to make it an inductive because <code>push_quiver_arrows (σ X) (σ Y)</code> doesn't match all <code>push_quiver_arrows X Y</code>.</p>",
        "id": 303024212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665238410
    },
    {
        "content": "<p>The fact that's it an inductive doesn't have anything to do with the error. It's like doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">empty</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">empty</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 303024364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665238466
    },
    {
        "content": "<p>Right, that makes sense. It's just that <code>quiver</code> is a struct and <code>hom_rel</code> was a definition.</p>",
        "id": 303024468,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665238526
    },
    {
        "content": "<p>Thanks for taking the time to help me figure out this basic stuff, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> !</p>",
        "id": 303024505,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665238558
    }
]