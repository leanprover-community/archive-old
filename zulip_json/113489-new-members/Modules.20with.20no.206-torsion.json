[
    {
        "content": "<p>Hello,</p>\n<p>I'm trying to define a class of objects with a number of properties, one of which is that they are modules with no  6-torsion (i.e 6•a=0 implies a=0). This is the definition I'm using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">no_6_torsion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"mi\">6</span><span class=\"bp\">•</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(I've removed the other properties for clarity)</p>\n<p>I'd like to be able to show that subobjects of this class also have the no 6-torsion property. Using the mathlib code for Lie sub-algebras as a guide, I've tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">nosixtorsion</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">subnosixtorsion</span> <span class=\"kd\">extends</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">doc_blame</span><span class=\"o\">]</span> <span class=\"n\">subnosixtorsion.to_submodule</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subnosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">subnosixtorsion.carrier</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">subnosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">A'</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subnosixtorsion_coe_submodule</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subnosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">subnosixtorsion.to_submodule</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">submodule_nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">subnosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">no_6_torsion</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set_coe.ext</span><span class=\"o\">,</span>\n    <span class=\"n\">no_6_torsion</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">nosixtorsion</span>\n</code></pre></div>\n<p>(again, the other properties have been removed for clarity). However, Lean describes <code>a</code> and <code>h</code> as unknown identifiers.</p>\n<p>Despite staring at this all evening, I can't see how to complete the proof. Perhaps there is a better way of implementing the property of not having torsion?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 221370332,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609537239
    },
    {
        "content": "<p>You are calling <code>no_6_torsion</code> as a tactic, which will give bad error messages. You need something like <code>exact no_6_torsion ...</code> or <code>have := no_6_torsion ...</code></p>",
        "id": 221370629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609537781
    },
    {
        "content": "<p>This gets closer, although there is an issue with your coercions that makes <code>h</code> not directly suitable for the final <code>_</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set_coe.ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"bp\">@</span><span class=\"n\">no_6_torsion</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221370678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609537829
    },
    {
        "content": "<p>Is there a reason you need <code>subnosixtorsion</code>, even though it has no members that are different from submodule?</p>",
        "id": 221371085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609538430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  - It's not needed for the purposes of this example. The following would illustrate my problem just as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">submodule_nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">no_6_torsion</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set_coe.ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"bp\">@</span><span class=\"n\">no_6_torsion</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 221371254,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609538705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Thanks for your help - it seems that the elements of the carrier are subtypes - a structure with a value and a proposition.</p>",
        "id": 221371352,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609538877
    },
    {
        "content": "<p>I noticed that. Perhaps you meant to use <code>\\forall a \\in A</code> in <code>no_6_torsion</code> instead of <code>\\forall a : A</code>?</p>",
        "id": 221371415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609538951
    },
    {
        "content": "<p>Lean seems to assume <code>a</code> is a natural number if I do that.</p>",
        "id": 221371630,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609539317
    },
    {
        "content": "<p>you need a type ascription on <code>6</code></p>",
        "id": 221371703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539392
    },
    {
        "content": "<p><code>(6 : R)</code> I assume?</p>",
        "id": 221371711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609539429
    },
    {
        "content": "<p>Trying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">no_6_torsion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><code>a</code> is red underlined as <code>?m_1</code></p>",
        "id": 221371767,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609539520
    },
    {
        "content": "<p>Oh I see, this proof is about showing that a submodule is a nosixtorsion, so the coe is unavoidable. You should do something like what's done to prove that a submodule is a semimodule:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">•</span><span class=\"o\">),</span> <span class=\"bp\">..</span><span class=\"n\">p.to_sub_mul_action.mul_action</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n   <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set_coe.ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The key step being <code>set_coe.ext</code></p>",
        "id": 221371776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539567
    },
    {
        "content": "<p>Oh, there is a missing simp lemma here</p>",
        "id": 221371926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539800
    },
    {
        "content": "<p>I'm wondering if I need to apply <code>set_coe.ext</code> to <code>h</code> somehow?</p>",
        "id": 221371938,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609539833
    },
    {
        "content": "<p>yes, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set_coe.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">submodule.smul_coe</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221371981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539863
    },
    {
        "content": "<p>the problem is that the latter theorem doesn't exist</p>",
        "id": 221371986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539876
    },
    {
        "content": "<p>actually I take it back, <code>submodule.coe_smul</code> does exist but doesn't apply here because you have your own coe</p>",
        "id": 221372006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539940
    },
    {
        "content": "<p>you need <code>subnosixtorsion.coe_smul</code></p>",
        "id": 221372017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609539961
    },
    {
        "content": "<p>This gets me a <code>goal accomplished!</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">submodule_nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">no_6_torsion</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set_coe.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"bp\">@</span><span class=\"n\">no_6_torsion</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 221372053,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609539965
    },
    {
        "content": "<p>you have three new definitions just before this and no lemmas about it</p>",
        "id": 221372064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609540007
    },
    {
        "content": "<p>Solved for your reduced version without the new <code>subsixmodule</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">no_6_torsion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">submodule_nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">no_6_torsion</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set_coe.ext</span> <span class=\"bp\">$</span> <span class=\"n\">nosixtorsion.no_6_torsion</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">set_coe.ext_iff.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 221372128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609540095
    },
    {
        "content": "<p>Thank you very much both for your help. This also seems to work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">no_6_torsion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"mi\">6</span><span class=\"bp\">•</span><span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">submodule_nosixtorsion</span> <span class=\"o\">(</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nosixtorsion</span> <span class=\"n\">R</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">no_6_torsion</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set_coe.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"bp\">@</span><span class=\"n\">nosixtorsion.no_6_torsion</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 221372306,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609540417
    },
    {
        "content": "<p>The one line proof in my message above appears to work for your <code>subnosixtorsion</code> structure too</p>",
        "id": 221372394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609540537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  - yes - the one line proof seems to require <code>(6 : R)</code> instead of <code>6</code> in the <code>nosixtorsion.no_6_torsion</code> definition (which is fine).</p>\n<p>Thank you again for your help.</p>",
        "id": 221372671,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1609540980
    },
    {
        "content": "<p>I wonder if <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.semimodule\">docs#submodule.semimodule</a> is not general enough to work when 6 is nat...</p>",
        "id": 221373246,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609541864
    },
    {
        "content": "<p>I think there ought to be a statement about <code>is_scalar_tower</code> there</p>",
        "id": 221373296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609541927
    },
    {
        "content": "<p>Why wouldn't it be general enough?</p>",
        "id": 221373303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609541992
    },
    {
        "content": "<p>you can coerce nat to R and use <code>\\u 6</code> in any case</p>",
        "id": 221373347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609542009
    },
    {
        "content": "<p>although you might also want to use <code>gsmul</code> for a concrete multiple like 6</p>",
        "id": 221373354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609542045
    },
    {
        "content": "<p>so that it works on additive groups</p>",
        "id": 221373358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609542052
    },
    {
        "content": "<p>Couldn't there be an instance <code>(A' : submodule R A) [is_scalar_tower S R A'] : semimodule S A'</code>?</p>",
        "id": 221373669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609542569
    },
    {
        "content": "<p>Or does that already exist?</p>",
        "id": 221373671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609542585
    },
    {
        "content": "<p>that kind of thing looks scary to me, I wouldn't want to do it without a pressing need</p>",
        "id": 221374419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609543778
    },
    {
        "content": "<p>We have that type of thing for tensor_product and linear_map already</p>",
        "id": 221374711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609544236
    },
    {
        "content": "<p>Where we avoid nasty typeclass problems in the former by providing a fast path for the 99% case (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.semimodule/src\">src#tensor_product.semimodule</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.semimodule'/src\">src#tensor_product.semimodule'</a>)</p>",
        "id": 221374797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609544375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Modules.20with.20no.206-torsion/near/221374419\">said</a>:</p>\n<blockquote>\n<p>that kind of thing looks scary to me, I wouldn't want to do it without a pressing need</p>\n</blockquote>\n<p>I've made a PR at <a href=\"https://github.com/leanprover-community/mathlib/issues/5569\">#5569</a> to find out exactly how scary this is</p>",
        "id": 221396003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609587106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373192\">Christopher Hoskin</span> <a href=\"#narrow/stream/113489-new-members/topic/Modules.20with.20no.206-torsion/near/221372671\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>  - yes - the one line proof seems to require <code>(6 : R)</code> instead of <code>6</code> in the <code>nosixtorsion.no_6_torsion</code> definition (which is fine).</p>\n</blockquote>\n<p>The one-line proof appears to work fine if you replace <code>nosixtorsion.no_6_torsion</code> with <code>nosixtorsion.no_6_torsion R</code> (since the lemma can no longer deduce<code>R</code> from the theorem statement if it's not the type of <code>6</code>)</p>",
        "id": 221396131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609587321
    }
]