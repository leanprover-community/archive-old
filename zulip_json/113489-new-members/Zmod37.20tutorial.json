[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the tutorial you added to mathlib a few days ago is very nice. Great idea to have some interactive tutorials like this in the repo, in my opinion.  Link so others can find it: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean\">https://github.com/leanprover-community/mathlib/blob/master/docs/tutorial/Zmod37.lean</a></p>",
        "id": 162525705,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554385192
    },
    {
        "content": "<p>Is there a way to get Lean to be more explicit about the goal?  E.g., here, the goal is described in comments:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">cong_mod_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"o\">(</span><span class=\"n\">cong_mod37</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- H : cond_mod37 a b</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">Hl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Hl : l * 37 = (b - a)</span>\n  <span class=\"c1\">-- Goal is to find an integer k with k * 37 = a - b</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hl</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But at that point in the file my Goals buffer just has the goal down as <code>‚ä¢ cong_mod37 b a</code>.  This means that <code>use -l</code> in the next line comes a bit out of the blue.</p>",
        "id": 162525972,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554385338
    },
    {
        "content": "<p>You could try <code>unfold cong_mod37</code></p>",
        "id": 162526845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554386040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> oh, yeah that's nicer</p>",
        "id": 162527262,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554386316
    },
    {
        "content": "<p>I wonder if a bit more commenting/cross referencing would help.  For example to explain the use of <code>cases</code>, above.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- &quot;Cases can be used to decompose any element of an inductively defined type&quot;, TPIL 5.3</span>\n</pre></div>",
        "id": 162529090,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554387505
    },
    {
        "content": "<p>Joe -- feel free to PR more clarifications on that tutorial. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I never thanked you for merging it. I think the community might like more of this sort of stuff.</p>",
        "id": 162557343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554404489
    }
]