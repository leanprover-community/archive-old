[
    {
        "content": "<p>see the following example:</p>",
        "id": 171650915,
        "sender_full_name": "Joe",
        "timestamp": 1564010312
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_inner</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_inner</span> <span class=\"o\">(</span><span class=\"n\">inner</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_inner</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">inner_product_space_has_norm</span> <span class=\"o\">:</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n             <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">ring</span> <span class=\"kn\">end</span> <span class=\"c1\">-- goals accomplished</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">inner_product_space_is_normed_group</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span>\n             <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">ring</span> <span class=\"kn\">end</span> <span class=\"c1\">-- doesn&#39;t work</span>\n</pre></div>",
        "id": 171650922,
        "sender_full_name": "Joe",
        "timestamp": 1564010329
    },
    {
        "content": "<p>what</p>",
        "id": 171651066,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564010517
    },
    {
        "content": "<p>Ouch, that looks painful.</p>",
        "id": 171657261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564019568
    },
    {
        "content": "<p>Does this error go away if you fill in the sorry? Does it help to put a <code>.</code> after the sorry? (I'm just applying cargo cult to the problem.)</p>",
        "id": 171657279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564019630
    },
    {
        "content": "<p>The thing that surprises me the most is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_inner</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I didn't know that was a valid parse, and I've read the structure parser</p>",
        "id": 171657340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564019694
    },
    {
        "content": "<p>Well, it's not clear that it is actually a valid parse, is it?</p>",
        "id": 171657409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564019790
    },
    {
        "content": "<p>Isn't it still eating all the garbage after it?</p>",
        "id": 171657418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564019811
    },
    {
        "content": "<p>/me has <em>not</em> read the structure parser</p>",
        "id": 171657428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564019829
    },
    {
        "content": "<p>I am assuming the above is valid lean from its presence in the example</p>",
        "id": 171657542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564020017
    },
    {
        "content": "<p>If it was garbage, then <code>inner_product_space</code> would not have been defined and the rest of the example would be errors everywhere</p>",
        "id": 171657562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564020072
    },
    {
        "content": "<p>I put the example in lean, and indeed that line is invalid. But apparently the parser doesn't give up completely, and treats it as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">has_inner</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 171657769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564020418
    },
    {
        "content": "<p>As for the actual question, I think the problem is all the <code>sorry</code>s</p>",
        "id": 171657820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564020497
    },
    {
        "content": "<p><code>sorry</code> is an unreliable tactic <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 171657831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564020553
    },
    {
        "content": "<p>I don't see why <code>normed_group real</code> is derivable here atm, but it is probably breaking the interpretation of + vs *</p>",
        "id": 171657909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564020676
    },
    {
        "content": "<p><code>ring</code> infers a <code>comm_semiring</code> instance once and for all and gets the operations from that. So <code>real -&gt; comm_semiring -&gt; has_add</code> should infer defeq to <code>real -&gt; has_add</code></p>",
        "id": 171658098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564020965
    },
    {
        "content": "<p>In this case I think the new instance, which is defined as <code>sorry</code> and so has no useful defeqs, is breaking this</p>",
        "id": 171658105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564021005
    },
    {
        "content": "<p>Does that mean that the example works again if you change <code>real</code> to <code>rat</code>?</p>",
        "id": 171658162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564021101
    },
    {
        "content": "<p>I don't know, my mind is working faster than lean right now</p>",
        "id": 171658168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564021123
    },
    {
        "content": "<p>My theory doesn't work. both the initial goal and the inference of <code>comm_ring real</code> and <code>comm_semiring real</code> are unchanged by the instance</p>",
        "id": 171658279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564021287
    },
    {
        "content": "<p>Aha, here's a relevant minimized version:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℝ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span>\n\n<span class=\"n\">class</span> <span class=\"n\">inner_product_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- goals accomplished</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">inner_product_space_is_normed_group</span> <span class=\"o\">:</span> <span class=\"n\">normed_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"c1\">-- instance loop</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 171658546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564021791
    },
    {
        "content": "<p>The problem is that <code>inner_product_space_is_normed_group</code> introduces an instance loop, because <code>add_comm_group + inner_product_space -&gt; normed_group -&gt; add_comm_group</code></p>",
        "id": 171658600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564021849
    },
    {
        "content": "<p>The solution is to have <code>inner_product_space A</code> extend <code>add_comm_group A</code> rather than taking it as a parameter</p>",
        "id": 171658618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564021906
    },
    {
        "content": "<p>Thank you. It solves the problem.</p>",
        "id": 171664484,
        "sender_full_name": "Joe",
        "timestamp": 1564031892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is that the correct solution, or should in fact <code>normed_group</code> be refactored to not exten <code>add_comm_group</code>? The whole point of assuming <code>[add_comm_group A]</code> was to allow flexibility in the scalar ring. This now seems to become harder...</p>",
        "id": 171667549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564036936
    },
    {
        "content": "<p>I don't follow. You don't get any extra flexibility either way</p>",
        "id": 171667578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564036988
    },
    {
        "content": "<p>Is a <code>normed_group</code> necessarily an <code>add_comm_group</code> or not? (in maths)</p>",
        "id": 171667586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564037006
    },
    {
        "content": "<p>I think there is some argument for noncommutative groups with an appropriate norm</p>",
        "id": 171667594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564037036
    },
    {
        "content": "<p>but regardless this changes nothing. If we want to refactor <code>normed_group</code> to depend on only <code>add_group</code> we can do that with either definition</p>",
        "id": 171667650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564037079
    },
    {
        "content": "<p>The general rule is to use a parameter if the class involves more types than the parent (e.g. a module needs two types, but it depends on structures on the individual types). In this case <code>inner_product_space</code> is unary and depends on <code>add_comm_group</code> which is also unary, so it should inherit</p>",
        "id": 171667750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564037193
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 171667773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564037241
    },
    {
        "content": "<p>So this becomes an issue as soon as we want inner products over more general fields than the reals</p>",
        "id": 171667819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564037282
    },
    {
        "content": "<p>An inner product over a more general field would not have the instance <code>inner_product_space_is_normed_group</code>, that would be a parameter</p>",
        "id": 171667850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1564037323
    },
    {
        "content": "<p>Thanks for bringing me back on track</p>",
        "id": 171667859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564037345
    }
]