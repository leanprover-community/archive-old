[
    {
        "content": "<p>I'm working on the chapter \"inductive types\" in \"theorem proving in lean\"<br>\nAnd I was thinking for several hours trying to understand the definition of weekday.rec and how it can be used to define and evaluate functions such as \"number_of_day\" in the example below but I can not get it.<br>\nI think I understood it in the case when C goes from weekday to Prop so I can see how it can be used to prove properties about weekdays but in the case with \"number_of_day\" I have no idea what C is. I have tried with C that has type weekday-&gt;Type and for each d : weekday returns nat but it's not working.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">weekday</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">sunday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">saturday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number_of_day</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">number_of_day</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">number_of_day</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">sunday</span>\n</code></pre></div>",
        "id": 210657558,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600593527
    },
    {
        "content": "<p>basically the type of the output can depend on the weekday</p>",
        "id": 210658044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600594412
    },
    {
        "content": "<p>i.e. it is a function on the weekday</p>",
        "id": 210658047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600594420
    },
    {
        "content": "<p>i.e. a function <code>weekday -&gt; Type*</code></p>",
        "id": 210658050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600594428
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">structure_projections</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">number_of_day</span>\n</code></pre></div>",
        "id": 210658095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600594482
    },
    {
        "content": "<p>Have you checked the type of weekday.rec_on with <code>#check @weekday.rec_on</code>? It's a function, so checking its type will tell you where it goes from and to</p>",
        "id": 210658265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600594880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span><br>\nyes, I checked the type, I don't understand how it's working<br>\nlook</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">weekday</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">sunday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">saturday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number_of_day</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">number_of_day</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">number_of_day</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">sunday</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number_of_day2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">),</span>\n<span class=\"bp\">@</span><span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">structure_projections</span> <span class=\"n\">false</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">number_of_day</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n</code></pre></div>\n\n\n<p>I copypasted the definition from \"number_of_day\" to \"number_of_day2\" and it's not working!</p>",
        "id": 210658504,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600595324
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">number_of_day2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 210658571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600595406
    },
    {
        "content": "<p>why does it show an incorrect definition?</p>",
        "id": 210658595,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600595520
    },
    {
        "content": "<p>can you copy the error?</p>",
        "id": 210658635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600595538
    },
    {
        "content": "<p>when you print it, it moves everything after the colon</p>",
        "id": 210658644,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600595559
    },
    {
        "content": "<p>on both of them it says</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">number_of_day</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n</code></pre></div>",
        "id": 210658647,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600595564
    },
    {
        "content": "<p>look at the printed result carefully</p>",
        "id": 210658649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600595565
    },
    {
        "content": "<p>I think I see</p>",
        "id": 210658661,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600595620
    },
    {
        "content": "<p>okay, can you explain how does it compute with this definition?</p>",
        "id": 210658705,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600595661
    },
    {
        "content": "<p>like why</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">number_of_day</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">sunday</span>\n</code></pre></div>\n\n\n<p>gives 1<br>\nwhere does this follow from</p>",
        "id": 210658706,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600595696
    },
    {
        "content": "<p>have you checked the type of <code>weekday.rec_on</code>?</p>",
        "id": 210658980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600596149
    },
    {
        "content": "<p>yes, </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">),</span>\n    <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">sunday</span> <span class=\"bp\">→</span>\n    <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">monday</span> <span class=\"bp\">→</span>\n    <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">tuesday</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">wednesday</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">thursday</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">friday</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">weekday</span><span class=\"bp\">.</span><span class=\"n\">saturday</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 210659657,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600597491
    },
    {
        "content": "<p>so 1 corresponds to sunday</p>",
        "id": 210659728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600597632
    },
    {
        "content": "<p>I can only see that at the step when we are defining the function,<br>\nI guess C weekday.sunday  is the same as nat so  we have a function from nat to something and we give it 1 to proceed to that something, in the similar way we give 2,3...7 and then we finally receice that our function has type weekday-&gt;nat<br>\nformally I see that 1,2,3,..7 helps us to type-check to receive the needed type of our function<br>\nthat's what I get<br>\nI don't get how it searches for 1 when we give sunday to it.<br>\nmaybe I can't wrap my mind around it because we are only dealing with the function type of .rec we don't know how .rec it acts on its type, I don't know<br>\nI need some step by step explanation, <br>\nwe give sunday to our function, what happens to it first?</p>",
        "id": 210660414,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600598716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216358\">@Fames Yasd</span> what's happening is that <code>weekday.rec_on weekday.sunday A B C D E F G</code> reduces to <code>A</code></p>",
        "id": 210661431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600599995
    },
    {
        "content": "<p>so it's kinda given, ok</p>",
        "id": 210661735,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600600424
    },
    {
        "content": "<p>thanks</p>",
        "id": 210661744,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600600437
    },
    {
        "content": "<p>When you define an inductive type, lean generates a computation rule for each constructor. When you apply the recursor to an argument,  Lean will look at what constructor the argument is from and reduce the term using the corresponding rule.<br>\nThere might be a way to get Lean to show you the comp rule using meta.</p>",
        "id": 210664253,
        "sender_full_name": "Chris B",
        "timestamp": 1600604215
    },
    {
        "content": "<p>Pretty much it just does case analysis internally.</p>",
        "id": 210664264,
        "sender_full_name": "Chris B",
        "timestamp": 1600604245
    },
    {
        "content": "<p>wait, no, this is not ok<br>\nhow is one supposed to know what a function defined with .rec will do?<br>\nFor example,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_space</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">zero</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_space</span>\n</code></pre></div>\n\n\n<p>Here, I have defined a function f:nat -&gt; nat that will map all natural number to zero, but I'm not sure that I have defined it the right way.<br>\nI mean it seems to output zero at 1 that makes me think I have defined it the right way<br>\nIt's probably can be proven for it to be equal to f' too.<br>\nAfter that there are no more questions but if it can be done that way, why would I need .rec anyway? Proving that it equals to another function is not an option.<br>\nThere must be some underlying rules that say exactly what nat.rec_on does.<br>\nLike I am 100% sure about f type, it's nat-&gt;nat<br>\nI am not sure about how it acts though.</p>",
        "id": 210664535,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600604615
    },
    {
        "content": "<p>Yes, and you can see what they are from this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">C</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"n\">z</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 210664681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600604816
    },
    {
        "content": "<p>The equations in the last two lines are the computation rules for <code>nat</code>, and because <code>rfl</code> checks at these types, they must be definitional equalities.</p>",
        "id": 210664745,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600604888
    },
    {
        "content": "<p>maybe use the equation compiler instead of <code>rec</code></p>",
        "id": 210666126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600606732
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">they_are_equal</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210669766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600612855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span><br>\nthanks, without them I don't think I would've figured out the definition of add<br>\nI still can't figure out why<br>\n<code>add m (succ n) </code> does not reduce to <code> succ add m n</code> but they can be proven to be equal with refl<br>\nStill, where did you get these rules from?<br>\nIs there some source where one can look general rules or some more information about inductive types?</p>",
        "id": 210711906,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600675957
    },
    {
        "content": "<p>You can look at section 2.6 and in particular 2.6.4 of <a href=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\">https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf</a>, but really, it's easiest to say:<br>\nwhen you apply a recursor to a constructor, then a computation rule applies that reduces it to \"the obvious thing\",<br>\nand just learn from examples what that obvious thing is (though there's really only one sensible possibility).</p>",
        "id": 210718937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600680807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216358\">Fames Yasd</span> <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20rec/near/210711906\">said</a>:</p>\n<blockquote>\n<p>I still can't figure out why<br>\n<code>add m (succ n) </code> does not reduce to <code> succ add m n</code> but they can be proven to be equal with refl</p>\n</blockquote>\n<p>Are you sure you have this right? If two things can be proven equal with refl then they should reduce to the same thing, and <code>succ (add m n)</code> doesn't reduce.</p>",
        "id": 210719177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600680936
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20rec/near/210719177\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216358\">Fames Yasd</span> <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20rec/near/210711906\">said</a>:</p>\n<blockquote>\n<p>I still can't figure out why<br>\n<code>add m (succ n) </code> does not reduce to <code> succ add m n</code> but they can be proven to be equal with refl</p>\n</blockquote>\n<p>Are you sure you have this right? If two things can be proven equal with refl then they should reduce to the same thing, and <code>succ (add m n)</code> doesn't reduce.</p>\n</blockquote>\n<p>I have here </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_space</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">structure_projections</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n<span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">add</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_space</span>\n</code></pre></div>\n\n\n<p>The last two theorems are somehow proved with rfl (I'm not sure how it works)<br>\nbut only the first reduce command reduces to what it should reduce to</p>",
        "id": 210724417,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600684416
    },
    {
        "content": "<p>No, they both reduce--though I forgot that <code>succ (add m n)</code> reduces by replacing <code>add</code> by its definition.</p>",
        "id": 210724823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600684737
    },
    {
        "content": "<p>But if you just look at the first part of the output for <code>#reduce add m (succ n)</code>, it's <code>succ</code> not <code>add</code>.</p>",
        "id": 210724846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600684760
    },
    {
        "content": "<p>If you understand the equation compiler, you will understand <code>rec</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_space</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">structure_projections</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">my_space</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>     <span class=\"o\">:=</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">zero</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">my_space</span>\n</code></pre></div>",
        "id": 210725299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600685111
    },
    {
        "content": "<p>Isn't this kind of like \"P and Q implies P\"? These seem like foundational questions and in order to understand how the equation compiler works at a foundational level you have to understand <code>rec</code> and the computation rule first anyways.</p>",
        "id": 210726789,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600686364
    },
    {
        "content": "<p>For me who basically learnt by osmosis, the equation compiler seems to be easier to understand than <code>rec</code>, and then <code>rec</code> is a lambda-calculus version of the equation compiler</p>",
        "id": 210727104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600686645
    },
    {
        "content": "<p>Right, that makes sense, but my impression (which could be wrong) is that <span class=\"user-mention\" data-user-id=\"216358\">@Fames Yasd</span> is specifically interested in how things work at a foundational level.</p>",
        "id": 210728571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600687869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20rec/near/210728571\">said</a>:</p>\n<blockquote>\n<p>Right, that makes sense, but my impression (which could be wrong) is that <span class=\"user-mention silent\" data-user-id=\"216358\">Fames Yasd</span> is specifically interested in how things work at a foundational level.</p>\n</blockquote>\n<p>No, you are 100% correct.</p>",
        "id": 210741993,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1600695626
    }
]