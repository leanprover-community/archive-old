[
    {
        "content": "<p>Informally speaking, when choosing a witness for the same thing under two different descriptions, we get the same witnesses.<br>\nWhen I <code>#print</code> I get a proof term that doesn't round-trip, i.e., I can't copy and paste it and have it work. So, what would a correct proof be?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">):</span>\n    <span class=\"n\">h1.some</span> <span class=\"bp\">=</span> <span class=\"n\">h2.some</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n<span class=\"k\">#print</span> <span class=\"n\">some_theorem</span>\n</code></pre></div>",
        "id": 258847742,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1635031057
    },
    {
        "content": "<p>If you're ok with match syntax, this is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">h1.some</span> <span class=\"bp\">=</span> <span class=\"n\">h2.some</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">rfl</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>It uses <code>h</code> to substitute <code>p</code> for <code>q</code> immediately.</p>",
        "id": 258848944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635033329
    },
    {
        "content": "<p>Somehow, using <code>subst</code> instead gives a nicer term proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">h1.some</span> <span class=\"bp\">=</span> <span class=\"n\">h2.some</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Printing it, we get something that survives the round-trip.  After some simplification, I got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">):</span>\n    <span class=\"n\">h1.some</span> <span class=\"bp\">=</span> <span class=\"n\">h2.some</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 258849094,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635033541
    },
    {
        "content": "<p>I think what's going on with failure to round-trip is that Lean's having a difficult time figuring out motives, which it needs to do since they're implicit arguments so aren't printed out.  If you do <code>set_option pp.all true</code> and then copy/paste, you get something from your <code>tidy</code> version that does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">):</span>\n    <span class=\"n\">h1.some</span> <span class=\"bp\">=</span> <span class=\"n\">h2.some</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">Exists.dcases_on.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n       <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"o\">))</span>\n    <span class=\"n\">h2</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2_w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2_h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">h2_w</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">Exists.dcases_on.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Exists.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n            <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.intro.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h2_w</span> <span class=\"n\">h2_h</span><span class=\"o\">)))</span>\n         <span class=\"n\">h1</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1_w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1_h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">h1_w</span><span class=\"o\">),</span>\n            <span class=\"bp\">@</span><span class=\"n\">eq.drec.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n                 <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h2_h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">h2_w</span><span class=\"o\">),</span>\n                   <span class=\"bp\">@</span><span class=\"n\">eq.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.intro.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1_w</span> <span class=\"n\">h1_h</span><span class=\"o\">))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.intro.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h2_w</span> <span class=\"n\">h2_h</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2_h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">h2_w</span><span class=\"o\">),</span>\n                 <span class=\"bp\">@</span><span class=\"n\">eq.refl.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.some.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Exists.intro.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h1_w</span> <span class=\"n\">h1_h</span><span class=\"o\">)))</span>\n              <span class=\"n\">q</span>\n              <span class=\"n\">h</span>\n              <span class=\"n\">h2_h</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 258849273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635033723
    },
    {
        "content": "<p>Thanks! The last one is so complicated...</p>",
        "id": 258851404,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1635037476
    },
    {
        "content": "<p><code>tidy</code> is a heaviweight tactic and the proof terms it produces are not designed to be scrutinized. It's a \"kitchen sink\" tactic. If you use <code>tidy?</code> it shows the more complicated tidy-free proof it discovered, and this can often be simplified by the user, eg it often tries <code>dsimp, simp</code> and one or both of these can sometimes be removed. Even <code>simp</code> will often produce really messy terms. The point of these high-powered tactics is to get things done, eg to help mathematicians solve goals which are math-trivial, not to produce reasonable proof terms.</p>",
        "id": 258866161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635062887
    },
    {
        "content": "<p>In this case, <code>tidy</code> ends up doing just <code>cases h2, cases h1, induction h, refl</code>, and the term you get, without the implicit arguments, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h2.dcases_on</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2_w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2_h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">h2_w</span><span class=\"o\">),</span>\n       <span class=\"n\">h1.dcases_on</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1_w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1_h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">h1_w</span><span class=\"o\">),</span> <span class=\"n\">eq.drec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2_h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">h2_w</span><span class=\"o\">),</span> <span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">h1_w</span> <span class=\"n\">h1_h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">h2_h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This isn't enough for elaboration, though. Type inference for motives is a special algorithm, and it seems to fail here for the three different functions that have such an implicit argument (<code>exists.dcases_on</code> and <code>eq.drec</code>).</p>",
        "id": 258885724,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635092142
    }
]