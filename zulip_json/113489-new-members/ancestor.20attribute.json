[
    {
        "content": "<p>The definition of <code>monoid</code> in mathlib (described <a href=\"https://github.com/leanprover-community/mathlib/blob/bc94d05242714263947fa485f3b64b911bb84faf/src/algebra/group/defs.lean\">here</a>) goes as follows: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ancestor semigroup has_one]</span>\n<span class=\"kd\">class</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why do we need to define the <code>ancestor</code> attribute if we have the <code>extends</code> part? <br>\nIt is uniformly used in the same file whenever <code>extends</code> is used.</p>",
        "id": 224821930,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612233495
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224825824,
        "sender_full_name": "Nasos Evangelou-Oost",
        "timestamp": 1612237905
    },
    {
        "content": "<p>Unfortunately, <code>extends</code> does not record <code>semigroup</code> and <code>has_one</code> in a way that can be used by metaprogramming.</p>",
        "id": 224825828,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612237908
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224825887,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612237957
    },
    {
        "content": "<p>There is an open github issue about documenting this</p>",
        "id": 224837334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612251609
    },
    {
        "content": "<p>Clearly, PRs with better docs are welcome.</p>",
        "id": 224926722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1612295628
    },
    {
        "content": "<p>Here is the issue, for reference <br>\n<a href=\"https://github.com/leanprover-community/mathlib/issues/5338\">https://github.com/leanprover-community/mathlib/issues/5338</a></p>",
        "id": 224938171,
        "sender_full_name": "Yasmine Sharoda",
        "timestamp": 1612300794
    }
]