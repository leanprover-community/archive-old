[
    {
        "content": "<p>Where in mathlib is this fact?  I tried <code>library_search</code>, but it timed out!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 200175519,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591667590
    },
    {
        "content": "<p>I wouldn't be particularly surprised if this isn't in mathlib yet. :-)</p>",
        "id": 200178400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591672153
    },
    {
        "content": "<p>Well, that would explain it! :)</p>",
        "id": 200178984,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591673107
    },
    {
        "content": "<p>By the way, is there a predefined instance for the zero-dimensional vector space?  The closest I could find on a quick pass is <code>‚ä•</code> for the zero-dimensional subspace of a given vector space.</p>",
        "id": 200179053,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591673232
    },
    {
        "content": "<p>Maybe this should go in <code>punit_instances.lean</code>?</p>",
        "id": 200179192,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673452
    },
    {
        "content": "<p>Maybe actually it's already there, since <code>vector_space = module</code>.</p>",
        "id": 200179207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673487
    },
    {
        "content": "<p>So just use <code>punit</code> as the underlying type.</p>",
        "id": 200179211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673503
    },
    {
        "content": "<p>But there won't be a <code>finite_dimensional R punit</code> instance yet, or the calculation of its dimension. :-)</p>",
        "id": 200179250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673528
    },
    {
        "content": "<p>Aha, thank you.  This <code>punit</code> is new to me.</p>",
        "id": 200179272,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591673639
    },
    {
        "content": "<p>Will any zero-dimensional vector space over <code>K</code> be definitionally equal to <code>module K punit</code> ?</p>",
        "id": 200179333,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591673752
    },
    {
        "content": "<p>Or will there only be an isomorphism?</p>",
        "id": 200179372,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591673766
    },
    {
        "content": "<p>only an iso</p>",
        "id": 200179378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673799
    },
    {
        "content": "<p>the underlying type could be any one element type</p>",
        "id": 200179380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673809
    },
    {
        "content": "<p>I guess one could derive a <code>vector_space K V</code> from <code>unique V</code>?</p>",
        "id": 200179441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673893
    },
    {
        "content": "<p>That would probably be evil to add to typeclass search, however.</p>",
        "id": 200179444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591673916
    },
    {
        "content": "<p>Could you explain your last comment?  I don't know the <code>unique V</code> syntax, and it's not very searchable  :)</p>",
        "id": 200179513,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591674016
    },
    {
        "content": "<p>Oh, there is a typeclass <code>unique</code>, that asserts that a type has exactly one elements.</p>",
        "id": 200179768,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674439
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique/src\">src#unique</a></p>",
        "id": 200179773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674449
    },
    {
        "content": "<p>It's effectively a \"this thing is equivalent to <code>punit</code>\" typeclass.</p>",
        "id": 200179818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674483
    },
    {
        "content": "<p>While one could in principle prove <code>instance vector_space_of_unique (V : Type*) [unique V] : vector_space K V := ...</code></p>",
        "id": 200179842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674538
    },
    {
        "content": "<p>(possibly by <code>transport</code>ing the vector space structure from <code>punit</code>?!)</p>",
        "id": 200179848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674551
    },
    {
        "content": "<p>I don't think this would be a good use of typeclass search.</p>",
        "id": 200179856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674577
    },
    {
        "content": "<p>Because _every_ time someone looked for a <code>vector_space K V</code> instance now for some <code>V</code>, Lean would go off and see if it could produce <code>unique V</code>.</p>",
        "id": 200179903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674605
    },
    {
        "content": "<p>I think I understand.  Yes, it seems like a bad idea :)</p>",
        "id": 200179927,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591674665
    },
    {
        "content": "<p>You are fixing the dimension somehow?</p>",
        "id": 200180012,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591674738
    },
    {
        "content": "<p>i.e., this would be the fact about the uniqueness up to isomorphism of a vector space of fixed dimension?</p>",
        "id": 200180028,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591674778
    },
    {
        "content": "<p>no --- <code>[unique V]</code> is just saying that the type <code>V</code> itself has exactly one element. Nothing I've been saying is related to \"uniqueness up to isomorphism of a vector space of fixed dimension\", except for the much easier statement \"uniqueness up to isomorphism of a vector space with one element\".</p>",
        "id": 200180192,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591674981
    },
    {
        "content": "<p>Oh, I see now what you mean by <code>unique</code> meaning \"this thing is equivalent to <code>punit</code>\".  Thanks!</p>",
        "id": 200180301,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1591675198
    }
]