[
    {
        "content": "<p>Hello ! Is there a way to use the tactic <code>lift</code> to lift from <code>\\nat</code> to <code>\\br</code>? For instance I have <code>(a:\\nat)(x:\\br)</code>and the assumption <code>(h:\\uparrow a=x)</code> and I would like to deduce that <code>x</code> is in fact a natural number. I see how to do with <code>\\int</code> but for some reason I did not manage with <code>\\br</code>.</p>",
        "id": 243705701,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1624478984
    },
    {
        "content": "<p>If you already have <code>a</code>, then you should be able to just use that.</p>",
        "id": 243705943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624479109
    },
    {
        "content": "<p>What are you going to do after doing the deduction that <code>x</code> is a nat? You know that via <code>h</code>, so just rewrite with <code>h</code> in the appropriate places.</p>",
        "id": 243705963,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624479117
    },
    {
        "content": "<p>And <code>rw</code> with <code>h</code>, whenever necessary.</p>",
        "id": 243705972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624479120
    },
    {
        "content": "<p>Thanks ! indeed I'll try this way using <code>rw</code> <code>h</code> (quick question by the way, is there a way to rw at a certain location, for instance I have <code>x+x = y+x</code> and <code>h: x = z</code> and for some reason I only want to rewrite the first <code>x</code> and not all of them ?). Concerning the lift there are still some things I don't understand: if I look at this mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">d1</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">↑</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Using <code>assumption</code> won't work although looking at the state <code>\\uparrow 1</code> belongs to <code>\\br</code> (so it should be the same thing as <code>(1:\\br)</code> ?). If I use <code>convert d1</code> it reduces to <code>1 = \\uparrow 1</code> and then <code>refl</code>,  <code>trivial</code>, or <code>dec_trivial</code> don't work but  <code>finish</code>does so I guess there is some rule that <code>finish</code> applies that I don't get.</p>",
        "id": 243755751,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1624523663
    },
    {
        "content": "<p>This is the second time that the rewrite question has come up in the last 24 hours, perhaps it's worth putting something in the docstring. See <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20h.20at.20.7B1.2C3.7D/near/243626509\">here</a> for rewrite question.</p>",
        "id": 243756559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624524174
    },
    {
        "content": "<p>Thanks a lot ! Sorry for asking a question that has already been asked...</p>",
        "id": 243757685,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1624524945
    },
    {
        "content": "<p>oh don't worry about that :-) This site is huge now. Occasionally I do a site search when asking a question which I feel must have come up before.</p>",
        "id": 243757789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624524999
    },
    {
        "content": "<p>I'll do this more carefully next time :-)</p>",
        "id": 243759255,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1624525939
    },
    {
        "content": "<p>You can prove this after your convert with \"norm_cast\", or without convert using \"nth_rewrite_rhs 0 &lt;-d1\" then some combination of congr and simp</p>",
        "id": 243779076,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624538639
    },
    {
        "content": "<p>Thanks a lot ! That's very helpful :) I am still a little puzzled that <code>(1:\\br)</code>and <code>\\uparrow 1</code> are not the same thing in this example, what is the difference ?</p>",
        "id": 243792573,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1624544207
    },
    {
        "content": "<p>↑1 is the liftingof ℕ's 1 into an arbitrary semiring, whie (1 : ℝ) is ℝ's literal 1</p>",
        "id": 243792820,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624544313
    },
    {
        "content": "<p>They are provably equal, but not the same by definition.</p>",
        "id": 243792840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624544324
    },
    {
        "content": "<p>they are ofc equal but not defeq</p>",
        "id": 243792865,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624544335
    },
    {
        "content": "<p>The pretty printer shows arrows instead of type ascriptions. But that doesn't mean it's best practice to use arrows to imply coercions or type ascriptions</p>",
        "id": 243794038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624544835
    },
    {
        "content": "<p>Until the elaboration can guess what you mean by (\\u 1), it's not determined what that expression means</p>",
        "id": 243794196,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624544895
    },
    {
        "content": "<p>Ok, <code>\\u 1</code> is a bit different from what I thought then. Thanks a lot for the explanation, I learn many things here !</p>",
        "id": 243849224,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1624570137
    }
]