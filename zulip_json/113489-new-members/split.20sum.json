[
    {
        "content": "<p>How can I split the following sum? (I.e. how to prove <code>hh</code>?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">perm</span><span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">σ</span><span class=\"o\">):</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span><span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242033190,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623228133
    },
    {
        "content": "<p>The machinery we have in lean for doing this kind of maths question is all set up for finset.sum over finset.range so if I was faced with that goal I would translate into that language, but if I were faced with that mathematics then I would try and avoid summing over fin n completely</p>",
        "id": 242035452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623229364
    },
    {
        "content": "<p>If you can express everything in this more idiomatic way then a theorem called something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_range_succ\">docs#finset.sum_range_succ</a> should do it</p>",
        "id": 242035631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623229456
    },
    {
        "content": "<p>Your statement must be false, because you've assumed <code>y n = y (σ n)</code> for all <code>σ</code>.</p>",
        "id": 242035936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623229633
    },
    {
        "content": "<p>Are you missing a second <code>σ</code> somewhere on either the LHS or RHS?</p>",
        "id": 242036060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623229687
    },
    {
        "content": "<p>I think the lemma you're after is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_cast_succ\">docs#fin.sum_univ_cast_succ</a>, anyway</p>",
        "id": 242036435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623229898
    },
    {
        "content": "<p>I removed y completely now.</p>",
        "id": 242036571,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623229972
    },
    {
        "content": "<p>aah excellent, I didn't know we had the corresponding lemma for sums over fin. Thanks Eric.</p>",
        "id": 242036653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623230033
    },
    {
        "content": "<p>In future Alex, can you make a true <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? One easy way to do so is write <code>extract_goal</code> at the sorry that you're actually stuck at, and then use that instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242036834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623230140
    },
    {
        "content": "<p>Thanks for your advice!</p>",
        "id": 242037023,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623230246
    },
    {
        "content": "<p>PS <code>tt</code> is a <code>bool</code>, if you want a Prop there's <code>true</code></p>",
        "id": 242037140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623230311
    },
    {
        "content": "<p>Suppose I want to use the theorem <code>finset.sum_range_succ</code>, but I don't know whether it exits and what its name is. How can I locate it?</p>",
        "id": 242037635,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623230600
    },
    {
        "content": "<p>library_search</p>",
        "id": 242040079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623232070
    },
    {
        "content": "<p>Or observe that you're trying to simplify the sum over range (succ n) and so start guessing the name and use ctrl-space to help you look for possible helpful theorems</p>",
        "id": 242043831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623234305
    }
]