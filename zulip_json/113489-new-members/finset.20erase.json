[
    {
        "content": "<p>This problem feels simple, but it's giving me a headache. I am trying to <code>erase</code> an element from a finset. This behaves fine when I am working with finsets of natural numbers. However, when I work with finsets of an arbitrary Type <code>α</code>, I have problems. Here are two silly examples to illustrate: </p>\n<div class=\"codehilite\" data-code-language=\"code\"><pre><span></span><code>import data.set.finite\nimport data.finset.basic\n\nexample {b : ℕ} (S : finset ℕ) (hb : b ∈ S) :\n    1 + 1 = 2 :=\nbegin\n    let not_b : finset ℕ := finset.erase S b,\n    exact rfl,\nend\n\nexample {α : Type} {b : α} (S : finset α) (hb : b ∈ S) :\n    1 + 1 = 2 :=\nbegin\n    let not_b : finset α := finset.erase S b,\n    sorry,\nend\n</code></pre></div>\n<p>The  first one works; the second one tells me \"failed to synthesize Type class instance.\" What's going on here? Is there a general lesson here to help me feel better about asking this question in the first place?</p>",
        "id": 220720381,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608662140
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 220720588,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608662285
    },
    {
        "content": "<p>I think it also works to <code>open_locale classical</code> pre-emptively (and then the <code>decidable_eq</code> isn't needed) whenever you are dealing with finsets :)</p>",
        "id": 220720901,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608662496
    },
    {
        "content": "<p>One way to figure out what was missing would be to check <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.erase\">docs#finset.erase</a>, where you can see that <code>[decidable_eq α] </code> is one of the arguments needed.</p>",
        "id": 220721004,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608662575
    },
    {
        "content": "<p>Another way is to use <code>@</code> to make all arguments explicit.  Then you can feed <code>finset.erase</code> explicitly the things you had hoped it would figure out automatically, and in failing it will give you a more useful message.  So here,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">not_b</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finset.erase</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>gives a more useful error message,</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize type class instance for\nα : Type,\nb : α,\nS : finset α,\nhb : b ∈ S\n⊢ decidable_eq α\n</code></pre></div>",
        "id": 220721431,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608662878
    },
    {
        "content": "<p>Ahhh I see, the docs do make that very clear, thank you.<br>\n I was looking at the source code for <code>erase</code> inside of <code>data.finset.basic</code>.... I didn't  see <code>variables [decidable_eq  α]</code> 300 lines above. Also, good to know about <code>@</code> as a troubleshooting tool.</p>",
        "id": 220722140,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608663310
    },
    {
        "content": "<p>The error message will have told you exactly which typeclass instance couldn't be synthesized, I think</p>",
        "id": 220726001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608665669
    },
    {
        "content": "<p>Oof, you're right. I never really learned (or got in the habit of) reading these error messages properly, but I see what's going on. Thanks.</p>",
        "id": 220729254,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1608667738
    }
]