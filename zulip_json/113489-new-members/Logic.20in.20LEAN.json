[
    {
        "content": "<p>Is someone able to send me a private message regarding first order logic in LEAN? I am working a homework that requires it and it is difficult, for LEAN is very new to me.</p>",
        "id": 136955882,
        "sender_full_name": "Sean G McCain",
        "timestamp": 1541113175
    },
    {
        "content": "<p>If you have specific questions you should feel free to ask them (publicly) in this thread. Have you seen the relevant chapters of <a href=\"http://avigad.github.io/logic_and_proof/first_order_logic.html\" target=\"_blank\" title=\"http://avigad.github.io/logic_and_proof/first_order_logic.html\">Logic &amp; Proof</a>?</p>",
        "id": 136956419,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541113848
    },
    {
        "content": "<p>I have seen them, and that is the book that I use for reference. However, I am yet to be able to figure out the issue.</p>",
        "id": 136956754,
        "sender_full_name": "Sean G McCain",
        "timestamp": 1541114220
    },
    {
        "content": "<p>Here is the code I have: <br>\nI am needing to prove the statement following example:</p>\n<p>section<br>\n         variable U : Type<br>\n         variables A B : U → Prop</p>\n<div class=\"codehilite\"><pre><span></span>     example : (∀ x, A x ∧ B x) → ∀ x, A x :=\n     assume (x : U),\n     assume h1 :∀ x, A x ∧ B x,\n     assume h2 : ∀ x, A x,\n     assume y,\n     have hy : A y, from h2 y,\n     show ∀ y, A y, from h2 y (hy) \n   end\n</pre></div>\n\n\n<p>Here is the error  I am getting:  <br>\nHowever, A y is a function, so I dont understand this error. </p>\n<p>function expected at<br>\n  h2 y<br>\nterm has type<br>\n  A y</p>",
        "id": 136956856,
        "sender_full_name": "Sean G McCain",
        "timestamp": 1541114337
    },
    {
        "content": "<p><code>A y</code> is not a function, it's a <code>Prop</code>.</p>",
        "id": 136956965,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541114457
    },
    {
        "content": "<p><code>A</code> is a function.</p>",
        "id": 136956985,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541114491
    },
    {
        "content": "<p>So, what would need to follow the 'from'</p>",
        "id": 136957170,
        "sender_full_name": "Sean G McCain",
        "timestamp": 1541114747
    },
    {
        "content": "<p>I would reconsider the strategy for proving this. In particular, your <code>assume</code> statements are out-of-order / some of them are unnecessary.</p>",
        "id": 136957338,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541114958
    },
    {
        "content": "<p>As a hint, <code>assume h1:∀ x, A x ∧ B x</code> should come first, and then <code>assume x:U</code>. You can see this by breaking down what you're trying to prove from left to right. Remember that you can use an underscore <code>_</code> and lean will tell you the type of what you're still missing.</p>",
        "id": 136957526,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541115163
    },
    {
        "content": "<p>After doing so, I am given more errors than before.</p>",
        "id": 136958036,
        "sender_full_name": "Sean G McCain",
        "timestamp": 1541115708
    },
    {
        "content": "<p>add more underscores, the compiler will tell you what you're doing wrong</p>",
        "id": 136958542,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1541116331
    },
    {
        "content": "<p>Maybe this will help. Let me go through the last example from section 9.2 of Logic &amp; Proof which is very similar. </p>\n<p>Let's start by just putting an underscore in for the entire proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">U : Type,</span>\n<span class=\"cm\">A B : U → Prop</span>\n<span class=\"cm\">⊢ (∀ (x : U), A x) → (∀ (x : U), B x) → ∀ (x : U), A x ∧ B x</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>No surprise here, lean just restates the goal for us. We see from the arrows in the goal that it is a function. To construct a function we should begin by assuming things:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">U : Type,</span>\n<span class=\"cm\">A B : U → Prop,</span>\n<span class=\"cm\">hA : ∀ (x : U), A x</span>\n<span class=\"cm\">⊢ (∀ (x : U), B x) → ∀ (x : U), A x ∧ B x</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>There's still an error, but we see that it's telling us that we're making progress. Indeed, lean actually has inferred the right type for <code>hA</code>, which we can put back in if we want to be fully explicit. The goal is still a function so we continue assuming:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">U : Type,</span>\n<span class=\"cm\">A B : U → Prop,</span>\n<span class=\"cm\">hA : ∀ (x : U), A x,</span>\n<span class=\"cm\">hB : ∀ (x : U), B x</span>\n<span class=\"cm\">⊢ ∀ (x : U), A x ∧ B x</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>So that's what <code>hB</code> is. We still have a function (the goal depends on a bound variable) so let's try assuming one more time:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hA</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hB</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">U : Type,</span>\n<span class=\"cm\">A B : U → Prop,</span>\n<span class=\"cm\">hA : ∀ (x : U), A x,</span>\n<span class=\"cm\">hB : ∀ (x : U), B x,</span>\n<span class=\"cm\">y : U</span>\n<span class=\"cm\">⊢ A y ∧ B y</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Now we're in a place where we have a term that we can construct by applying hA and hB. The final answer:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">hA</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hB</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Which is equivalent to the proof given in the book. </p>\n<p>To summarize, if you look carefully at the type errors you get, they may help guide you to the proof you're looking for.</p>",
        "id": 136958565,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541116395
    }
]