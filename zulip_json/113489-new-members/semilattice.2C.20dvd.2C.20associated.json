[
    {
        "content": "<p>Is it possible to move all that is here starting from Johan's comment directed a me to the new topic?  Or should I simply start a new topic?</p>",
        "id": 233797473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963461
    },
    {
        "content": "<p>anyone can change topics retroactively</p>",
        "id": 233797558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617963500
    },
    {
        "content": "<p>Ok, topic name changed!  Now, let's continue, since I found it quite interesting!</p>",
        "id": 233797622,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963560
    },
    {
        "content": "<p>Yeah, if <code> (∀ a : M, m ∣ a ↔ n ∣ a) ↔ associated m n</code> is missing then that's one thing, and then for nat you need associated iff equal.</p>",
        "id": 233797886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617963713
    },
    {
        "content": "<p>So, I would define a relation on a monoid to simply be that <code>r a b</code> if <code>b</code> is divisible by <code>a</code>.  To \"remove\" loops, I would need to quotient by them.</p>\n<p>How do you form quotients by relations?</p>",
        "id": 233797949,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963730
    },
    {
        "content": "<p>Once that is done, I would prove that the relation <del>is</del> induces a partial order on the quotient.</p>",
        "id": 233798066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617963803
    },
    {
        "content": "<p>I think you need commutativity to make this sensible. To form a quotient by a relation check out the section on quotients in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> or my notes on quotients from my course <a href=\"https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/\">https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/</a></p>",
        "id": 233799693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617964687
    },
    {
        "content": "<p>Also, I'm suggesting here that the construction of a partial order quotienting a preorder is independent of anything about divisibility</p>",
        "id": 233800528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617965191
    },
    {
        "content": "<p>although it has some relations to <code>associated</code> and other things when you instantiate the construction in this setting</p>",
        "id": 233800585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617965225
    },
    {
        "content": "<p>Yes, I was going to take a \"general\" approach, where each step \"resets the bar\".</p>",
        "id": 233800635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617965270
    },
    {
        "content": "<p>How bad an idea is this statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `dvd` is injective in the left argument -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">dvd_left_injective</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">((</span><span class=\"bp\">∣</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">dvd_antisymm</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 233851329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617985284
    },
    {
        "content": "<p>From which the original statement recovers as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dvd_right_iff_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.trans</span> <span class=\"o\">(</span><span class=\"n\">forall_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_iff_iff.symm</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"n\">function.funext_iff.symm.trans</span> <span class=\"n\">dvd_left_injective.eq_iff</span>\n</code></pre></div>",
        "id": 233853289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617986008
    },
    {
        "content": "<p>That's a great way of thinking about it!</p>",
        "id": 233853481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617986080
    },
    {
        "content": "<p>That is a very funny way of expressing the result!  I had never thought about it like this!</p>",
        "id": 233871463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617993796
    },
    {
        "content": "<p>Eric, if you want, I can add it to PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7132\">#7132</a>, unless you want to PR it on its own.</p>",
        "id": 233871606,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617993858
    },
    {
        "content": "<p>I think your original version is better, but perhaps proving mine in terms of yours is fine to have too, if only to leave in as a puzzle for the reader to teach them more about equality in lean</p>",
        "id": 233880495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617997665
    },
    {
        "content": "<p>I have been playing with the circle of ideas that was discussed here: I now have a (very easy) proof that divisibility in a <code>monoid</code> is a <code>preorder</code>.</p>\n<p>I also proved that two elements that divide each other in a <code>cancel_comm_monoid</code> are \"associated\": they differ by a unit.</p>\n<p>The next step would be to form the quotient of a <code>preorder</code> to obtain a <code>partial_order</code>.</p>\n<p>Finally, in the case of the <code>partial_order</code> obtained as above from a <code>cancel_comm_monoid</code>, I will want to establish that the \"fibres\" of this quotient are torsors under the group of units (this is essentially already available).</p>\n<p>My next main obstacle is that I do not know how to form quotients.  I found <code>quotient</code>, but there is very little guidance on how to use it.  Also, it is in the folder of files that I have been warned to not touch, so I feel a little worried about even browsing it!</p>\n<p>Should I simply pull up my sleeves and learn how to use <code>quotient</code>, or is there some easier file that I can look at?</p>",
        "id": 234060657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618160660
    },
    {
        "content": "<p>You can read Kevin's post on <a href=\"https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/\">https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/</a>, and look at the exercises in <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics/tree/master/src/week_7\">https://github.com/ImperialCollegeLondon/formalising-mathematics/tree/master/src/week_7</a></p>",
        "id": 234061285,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618161312
    },
    {
        "content": "<p>The basic aspect of it, if you have a <code>setoid X</code>, which you get from some equivalence on X, which is just a relation <code>r : X -&gt; X -&gt; Prop</code> such that <code>reflexive r</code>, <code>symmetric r</code>, <code>transitive r</code>, you can form a <code>quotient</code>.</p>",
        "id": 234061372,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1618161381
    },
    {
        "content": "<p>Yakov, thanks for the pointer: I will take a look!</p>",
        "id": 234061634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618161668
    }
]