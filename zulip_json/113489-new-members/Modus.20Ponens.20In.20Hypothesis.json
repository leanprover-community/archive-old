[
    {
        "content": "<p>Sorry for all my questions!<br>\nI have the hypotheses <code>h: X</code> and <code>g: Z -&gt; X -&gt; Y</code>.<br>\nI would like to \"rewrite\" <code>g</code> to <code>Z -&gt; Y</code>.  How can I do that elegantly (without an elaborate <code>have</code> proof)?</p>\n<p>Also, for a different use case, I would like to \"rewrite\" <code>h</code> to <code>Z -&gt; Y</code>, rather than <code>g</code>.<br>\n<code>apply</code> can only do this for the current goal.<br>\nArguably, this kind of reasoning is untypical for mathematical proofs, but also is handwritten program verification where you have a lot of complex hypothesis.</p>",
        "id": 218318166,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606757371
    },
    {
        "content": "<p><del>You can use <code>replace g := g h</code> (or <code>replace h := g h</code> for your second question).</del> See <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#replace\">tactic#replace</a>.</p>",
        "id": 218318864,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606757673
    },
    {
        "content": "<p><code>simp [h] at g</code> will probably work, if these are props</p>",
        "id": 218318889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606757688
    },
    {
        "content": "<p>You actually need <code>replace g := \\lam z, g z h</code> or <code>replace g := flip g h</code> for the direct proof</p>",
        "id": 218319098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606757772
    },
    {
        "content": "<p>Thanks for point out <code>replace</code>! I was looking for that but could not find it in the standard lean tactics overview.</p>",
        "id": 218319409,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606757903
    },
    {
        "content": "<p>simp does not work in my case though. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">replace</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">ant_eval_branch_or</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>This does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ant_eval_branch_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 218319668,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606758009
    },
    {
        "content": "<p>if there are a lot of variables to unify it may not be as obvious to <code>simp</code> as your example.</p>",
        "id": 218320265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606758286
    },
    {
        "content": "<p>the code you wrote is not equivalent, that will apply <code>h</code> and produce <code>Z</code> as a subgoal (which TBH is usually what you want)</p>",
        "id": 218320345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606758320
    },
    {
        "content": "<p>You mean this (<code>replace h4 := ant_eval_branch_or _ _ _ _ h4,</code>) will create a subgoal? In my case, I don't get a new subgoal...</p>",
        "id": 218320771,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606758518
    },
    {
        "content": "<p>If Lean can't guess what any of the <code>_</code>s are, it will create new subgoals.</p>",
        "id": 218322969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606759632
    }
]