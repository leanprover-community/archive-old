[
    {
        "content": "<p>I have a function that takes several arguments and I have to pattern match on all of them. When I try to use recursion, Lean tries to prove well-foundedness on the first argument, but I want to use the standard well-foundedness (by size) on the last argument (of six). Do you know how I can configure my <code>rel_tac</code> to achieve that?</p>",
        "id": 188328579,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581866107
    },
    {
        "content": "<p>All I know is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">this</a> but there are people who know more</p>",
        "id": 188328627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581866203
    },
    {
        "content": "<p>Does <code>using_well_founded \n  { rel_tac := λ _ _, </code>[exact ⟨_, measure_wf (λ x, x.2.2.2.2.2.sizeof)⟩ ] }` work?</p>",
        "id": 188328638,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581866268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">using_well_founded</span>\n  <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">]</span> <span class=\"o\">}</span><span class=\"bp\">`</span>\n</pre></div>",
        "id": 188328728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581866419
    },
    {
        "content": "<p>Yep, it did! I am using a type family so I had to specify the arguments to <code>sizeof</code> as in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Thanks :)</p>",
        "id": 188329192,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581867430
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#rcases\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#rcases\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#rcases</a></p>",
        "id": 188331517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581872193
    },
    {
        "content": "<p>Or pattern matching let/in or lambda</p>",
        "id": 188331528,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581872247
    },
    {
        "content": "<p>Thanks. It is a bit weird though. Lean is happy with this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n<span class=\"n\">rcases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">⟩⟩⟩⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>But not with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">⟩⟩⟩⟩⟩</span><span class=\"o\">,</span> <span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 188331955,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581873019
    },
    {
        "content": "<p>It says it can't show</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">id_rhs</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span>\n    <span class=\"n\">id_rhs</span> <span class=\"bp\">ℕ</span>\n      <span class=\"o\">(</span><span class=\"n\">Context</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"bp\">+</span>\n         <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">a</span> <span class=\"bp\">+</span>\n            <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">b</span> <span class=\"bp\">+</span>\n               <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">t</span> <span class=\"bp\">+</span>\n                  <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">+</span>\n                     <span class=\"o\">(</span><span class=\"n\">PTSSort</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">+</span>\n                        <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"n\">x</span> <span class=\"bp\">+</span>\n                           <span class=\"o\">(</span><span class=\"n\">BetaExp</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"n\">t</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">+</span>\n                              <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span>\n                                 <span class=\"o\">(</span><span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">_</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">+</span>\n                                    <span class=\"n\">Judgement</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Exp</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"n\">tr</span><span class=\"o\">))))))))))</span>\n</pre></div>\n\n\n<p>(Which is true since the lhs term occurs on the rhs too and there is a \"+2\")</p>",
        "id": 188331970,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581873108
    },
    {
        "content": "<p>What is the policy on Lean bug reports btw? Should I report something like this to the <a href=\"http://github.com/lean-community/lean\" target=\"_blank\" title=\"http://github.com/lean-community/lean\">github.com/lean-community/lean</a> repo?</p>",
        "id": 188332235,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581873675
    },
    {
        "content": "<p>It probably doesn't unfold the <code>id_rhs</code></p>",
        "id": 188332407,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581873985
    },
    {
        "content": "<p>Yes, the best place for bug reports about Lean (if it is not related to mathlib) is <a href=\"https://github.com/leanprover-community/lean/issues\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues\">https://github.com/leanprover-community/lean/issues</a></p>",
        "id": 188408004,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581975186
    }
]