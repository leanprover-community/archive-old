[
    {
        "content": "<p>As if I didn't have too much to do already, I'm going to start running <a href=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/Maths_Challenges/challenges.md\">Maths challenges for the Lean curious</a> and I'll promote it on Twitter. My understanding of Lean on Twitter is that Lean is quite a niche thing (apparently -- I must be in some kind of bubble?), but there are sufficiently many people on Twitter who are sufficiently Lean-curious that they will try the natural number game and then perhaps ask what to do next. All my answers so far have been lacking in some ways (e.g. \"wait until I finish the real number game\"/\"wait until I finish some more levels of the natural number game\"/\"wait until I write the integer game\"/\"read Theorem Proving In Lean\"/\"try doing some maths on your own and get completely stuck and then ask on the chat\"). On the other hand I am hoping that I will be able to knock off one relatively simple question per week (maybe I will even do a few this week, to get the ball rolling) to give beginners some experience. </p>\n<p>I will note that I wouldn't really be able to do this without the wonderful <a href=\"https://leanprover-community.github.io/lean-web-editor\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor\">community Lean web editor</a> so many thanks to <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> and whoever else was involved with making this tool. The official Lean web editor is simply too old now, it adds to the confusion rather than making life easier. I teach the <code>use</code> tactic in natnumgame and it's not in the official editor.</p>",
        "id": 182952310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575896135
    },
    {
        "content": "<p>How about \"Advent of Proof\"?</p>",
        "id": 182954483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575897914
    },
    {
        "content": "<p>one puzzle a day is probably a bit tough unless you have a backlog prepared though</p>",
        "id": 182954510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575897941
    },
    {
        "content": "<p>Maybe I could throw one our a day and after a few days start calling for suggestions on the chat</p>",
        "id": 182960714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575902184
    },
    {
        "content": "<p>And then we could have a Twitter poll</p>",
        "id": 182960751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575902206
    },
    {
        "content": "<p>Ok next one tomorrow!</p>",
        "id": 182960785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575902231
    },
    {
        "content": "<p>I think it's a bit harder than the ones you have so far, but <code>nat.choose n r &lt;= nat.choose n (n/2)</code> might be a good one (I think I'll PR this to mathlib soon as well)</p>",
        "id": 182963759,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575904108
    },
    {
        "content": "<p>I have a <a href=\"https://math.stackexchange.com/a/723017/50776\" target=\"_blank\" title=\"https://math.stackexchange.com/a/723017/50776\">MSE question</a> about that one</p>",
        "id": 182967465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575905985
    },
    {
        "content": "<p>Here's a somewhat challenging one: Prove the <a href=\"https://en.wikipedia.org/wiki/M%C3%B6bius_function\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/M%C3%B6bius_function\">Möbius function</a> is multiplicative. (Easy mode: define the Möbius function)</p>",
        "id": 182967999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575906263
    },
    {
        "content": "<blockquote>\n<p>I have a <a href=\"https://math.stackexchange.com/a/723017/50776\" target=\"_blank\" title=\"https://math.stackexchange.com/a/723017/50776\">MSE question</a> about that one</p>\n</blockquote>\n<p>Yeah that's how I did it too! It's tempting to do by induction on <code>n</code> as well, but I haven't got that way to work yet</p>",
        "id": 182969282,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1575906904
    },
    {
        "content": "<p>for what it's worth, I've been finding \"do the M40001 term sheets\" to be a pretty informative next step from the natural number game</p>",
        "id": 183003011,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1575927392
    },
    {
        "content": "<p>I posted another challenge. I'll try to do a few per week.</p>",
        "id": 183310273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576190225
    },
    {
        "content": "<p>Interesting. I just did the challenge, but I have one question, if I did <code>apply le_antisymm,</code> and proved <code>a ≤ b</code> is there a way for me to say \"by obvious symmetry we also have <code>b ≤ a</code>\" instead of redo it?</p>",
        "id": 183318705,
        "sender_full_name": "YH",
        "timestamp": 1576198258
    },
    {
        "content": "<p>I'm really enjoying these Lean problems (natural number game and maths challenges.) They're good fun and I think they're a good way to learn about some of the different parts of mathlib. Thanks for writing them Kevin Buzzard.</p>",
        "id": 183329463,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1576214032
    },
    {
        "content": "<p>@YH you can try <code>wlog a ≤ b</code> (up to syntax errors on my side)</p>",
        "id": 183331361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576216774
    },
    {
        "content": "<p>What Johan meant is: <code>wlog h : a ≤ b</code>. That tactic is smart enough to figure out why the other case follows. You still need one more line to finish the challenge though.</p>",
        "id": 183341590,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229468
    },
    {
        "content": "<p>Of course you also directly write a proof term.</p>",
        "id": 183341689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229548
    },
    {
        "content": "<p>I am still trying to work out a general framework for how I should do this. Perhaps I should collect various approaches in a solutions.lean file</p>",
        "id": 183341762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576229638
    },
    {
        "content": "<p>It's good that wlog now works in an intuitive way</p>",
        "id": 183341812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576229657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I just had a look at your official solution. Maybe you should warn readers that this is a very inefficient solution.</p>",
        "id": 183341813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229657
    },
    {
        "content": "<p>Am I allowed to post solutions here?</p>",
        "id": 183341820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229671
    },
    {
        "content": "<p>Sure</p>",
        "id": 183341834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576229684
    },
    {
        "content": "<p>I will perhaps collect them up and put them in the Xena GitHub repo</p>",
        "id": 183341855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576229702
    },
    {
        "content": "<p>The proof term is <code>le_antisymm (ha.2 hb.1) (hb.2 ha.1)</code> of course.</p>",
        "id": 183341863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229704
    },
    {
        "content": "<p>But the lazy tactic one is: <code>by linarith [hb.2 ha.1, ha.2 hb.1]</code> or <code>by { wlog h: a ≤ b,  linarith [hb.2 ha.1] }</code>.</p>",
        "id": 183341999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229842
    },
    {
        "content": "<p>Where <code>linarith</code> simply applies <code>le_antisymm</code>. (Do we have an emoji warning Mario not to read a message?)</p>",
        "id": 183342136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576229963
    },
    {
        "content": "<p>These are great. I will figure out a way of preserving them. I think beginners who manage to figure out a method will appreciate seeing lots of others</p>",
        "id": 183357189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576242488
    },
    {
        "content": "<p>Is it possible to write a small proof term for challenge 3?</p>",
        "id": 183786469,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1576700225
    },
    {
        "content": "<p>According to <code>library_search</code>, <code>nat.bit0_ne_bit1 2 2</code> proves <code>(2 + 2 : ℕ) ≠ (5 : ℕ)</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bit0_ne_bit1</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span>\n</pre></div>",
        "id": 183787521,
        "sender_full_name": "Joe",
        "timestamp": 1576701046
    },
    {
        "content": "<p>Though I guess there is no short proof of <code>nat.bit0_ne_bit1</code></p>",
        "id": 183787788,
        "sender_full_name": "Joe",
        "timestamp": 1576701255
    },
    {
        "content": "<p>But Challenge 3 is over the reals, right? Try <code>λ h, zero_ne_one $ eq.trans (eq.symm (sub_eq_zero_of_eq h.symm)) (add_sub_cancel' _ _)</code></p>",
        "id": 183787805,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576701281
    },
    {
        "content": "<p>Oh, that's true. My mistake.</p>",
        "id": 183787843,
        "sender_full_name": "Joe",
        "timestamp": 1576701321
    },
    {
        "content": "<p>The tactic <code>norm_num</code> does it but I'm not sure what exactly proof term behind is.</p>",
        "id": 183788876,
        "sender_full_name": "YH",
        "timestamp": 1576702163
    },
    {
        "content": "<p>Basically, a linear ordered field is characteristic zero so <code>bit0</code> and <code>bit1</code> are injective and disjoint</p>",
        "id": 183795370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576706765
    },
    {
        "content": "<p>Rob thanks, that works. How do you come up with something like <code>add_sub_cancel'</code>? I had a hard time even understanding how <code>a + b - a = b</code> matched <code>(5 - (2 + 2) = 1)</code></p>",
        "id": 183795395,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1576706793
    },
    {
        "content": "<p><code>5</code> unfolds to <code>2 + 2 + 1</code> by definition</p>",
        "id": 183795432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576706823
    },
    {
        "content": "<p>because it is <code>bit1 2</code></p>",
        "id": 183795445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576706831
    },
    {
        "content": "<p>There can be only one conclusion: we want a tactic to do that without telling us the proof term. The good part is it already exists <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 183795516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576706887
    },
    {
        "content": "<p>If you use specially prepared theorems, the proof is easy: <code>bit0_ne_bit1</code></p>",
        "id": 183795542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576706928
    },
    {
        "content": "<p>that's what <code>norm_num</code> does</p>",
        "id": 183795575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576706974
    },
    {
        "content": "<p>Right, the trick is knowing how numerals are defined. There are only a few important components here: 5 is defined to be (2 + 2) + 1, and the \"canonical\" disequality is <code>zero_ne_one</code>. You can combine those in various ways to prove it. Here's one without a lambda: <code>ne.symm $ sub_ne_zero.1 $ ne_of_eq_of_ne (add_sub_cancel' _ _) one_ne_zero</code>.</p>",
        "id": 183795915,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576707249
    },
    {
        "content": "<p>Is there an easy way to see the bit representation? I've discovered <code>unfold has_one.one</code> but it doesn't seem ideal</p>",
        "id": 183796021,
        "sender_full_name": "Etienne Laurin",
        "timestamp": 1576707354
    },
    {
        "content": "<p>Beauty is in the eye of the beholder.</p>",
        "id": 183796026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576707358
    },
    {
        "content": "<p>I feel <code>by norm_num</code> is the only appropriate answer.</p>",
        "id": 183796085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576707386
    },
    {
        "content": "<p><code>set_option pp.numerals false</code></p>",
        "id": 183796133,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576707448
    },
    {
        "content": "<p>I'm not sure anyone is claiming these proofs are more beautiful than <code>norm_num</code>. But someone had to know these proofs to implement <code>norm_num</code>.</p>",
        "id": 183796184,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576707483
    },
    {
        "content": "<p>Sure. We'll always need experts.</p>",
        "id": 183796218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576707528
    },
    {
        "content": "<p>These challenges are super helpful! Just a minor comment - the third challenge uses namespace 'challenge2' which probably should be 'challenge3' (in both challenge and solution files).</p>",
        "id": 183915253,
        "sender_full_name": "Haden Hooyeon Lee",
        "timestamp": 1576828047
    },
    {
        "content": "<p>thanks, I'll fix</p>",
        "id": 183915677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576828601
    }
]