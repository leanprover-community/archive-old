[
    {
        "content": "<p>Dear All,</p>\n<p>I would like to use the fact that in an integral domain, every non-zero element is left-cancellable (see the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below).  Is this lemma already in mathlib and I have simply been unable to find it?</p>\n<p>Thank you!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">xxv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210729727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600688791
    },
    {
        "content": "<p><code>mul_left_cancel</code> hopefully?</p>",
        "id": 210729813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600688874
    },
    {
        "content": "<p>Maybe with a <code>'</code>, if the other version is for groups</p>",
        "id": 210729880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600688903
    },
    {
        "content": "<p>I tried, but I was unable to make it work...</p>",
        "id": 210729974,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689000
    },
    {
        "content": "<p>I'll give it a go</p>",
        "id": 210730133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689110
    },
    {
        "content": "<p>If you change <code>is_integral_domain</code> to <code>integral_domain</code>, then <code>mul_left_cancel'</code> works btw</p>",
        "id": 210730186,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600689130
    },
    {
        "content": "<p>Aah, that's the issue: <code>is_integral_domain</code> isn't the way to say an integral domain.</p>",
        "id": 210730217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_left_cancel.20for.20integral.20domains/near/210730186\">said</a>:</p>\n<blockquote>\n<p>If you change <code>is_integral_domain</code> to <code>integral_domain, then </code>mul_left_cancel'` works btw</p>\n</blockquote>\n<p>Ah, this might fix it for me, then!</p>",
        "id": 210730241,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689174
    },
    {
        "content": "<p>You should delete <code>comm_ring R</code> and use <code>integral_domain R</code></p>",
        "id": 210730244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689177
    },
    {
        "content": "<p>Let me try!</p>",
        "id": 210730248,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689178
    },
    {
        "content": "<p>I am trying</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">xxv</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 210730497,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">xxv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>works for me.</p>",
        "id": 210730806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689536
    },
    {
        "content": "<p>I'm not sure why, but I think the <code>semiring R</code> instance is affecting things</p>",
        "id": 210730813,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600689542
    },
    {
        "content": "<p>you probably have <code>variable [semiring R]</code> somewhere? I can reproduce the error if I add a <code>semiring R</code> typeclass</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">xxv</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- Same error</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210730885,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1600689595
    },
    {
        "content": "<p>Yes, my standing assumption is that <code>R</code> is a semiring</p>",
        "id": 210730971,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689620
    },
    {
        "content": "<p>Interesting</p>",
        "id": 210731020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689647
    },
    {
        "content": "<p>I wonder if it's worth trying to improve these error messages, or we should just wait for <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 210731052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600689671
    },
    {
        "content": "<p>But an integral domain is a semiring so you should maybe just start afresh with some new variable which is an integral domain</p>",
        "id": 210731059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689676
    },
    {
        "content": "<p>I will remove this assumption now.  In case someone is further interested, here is what happens if I try to <code>convert h</code>.  Lean wants me to prove:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">cancel_monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 210731070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689682
    },
    {
        "content": "<p>Yup, but those are two completely different <code>0</code>s (-;</p>",
        "id": 210731116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600689710
    },
    {
        "content": "<p>You can't prove this, because one has come from <code>[semiring R]</code> and one has come from <code>[integral_domain R]</code>. That's exactly the difference between <code>integral_domain</code> and <code>is_integral_domain</code></p>",
        "id": 210731197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689737
    },
    {
        "content": "<p>You assumed two semiring instances (one coming from the integral domain) but Lean doesn't know any compatibility between them.</p>",
        "id": 210731208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600689747
    },
    {
        "content": "<p>Ok, I will remove the semiring assumption</p>",
        "id": 210731225,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689761
    },
    {
        "content": "<p>You should remove the <code>[semiring R]</code> assumption because type class inference knows that an integral domain is a semiring</p>",
        "id": 210731227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689764
    },
    {
        "content": "<p>so all the stuff you just proved about semirings will all work fine when you're rewriting it in some lemmas about integral domains</p>",
        "id": 210731268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689794
    },
    {
        "content": "<p>Thank you all for the help!  For the record, this now is a working lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">xxv</span> <span class=\"o\">{</span><span class=\"n\">RR</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">RR</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">RR</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"bp\">=</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210731350,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689846
    },
    {
        "content": "<p>now see if you can do it in term mode :-)</p>",
        "id": 210731394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600689875
    },
    {
        "content": "<p>I would love to, but I would need to learn how to communicate to Lean in term mode... Ahahaha</p>",
        "id": 210731554,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600689973
    },
    {
        "content": "<p>hint: the term-mode proof is a substring of the tactic proof</p>",
        "id": 210731640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600690048
    },
    {
        "content": "<p>Ok, I am making the guess that I should remove characters from <code>apply </code>, since I imagine that the name of the lemmas in mathlib appear identically in term mode!</p>",
        "id": 210731875,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600690204
    },
    {
        "content": "<p><code>begin</code> means entering tactic mode</p>",
        "id": 210731895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600690228
    },
    {
        "content": "<p>and <code>end</code> stops it.</p>",
        "id": 210731901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600690237
    },
    {
        "content": "<p>Indeed, <code>apply</code> takes a little bit of term mode as argument, and does something useful with it.</p>",
        "id": 210731928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600690263
    },
    {
        "content": "<p>ah, so i should remove from <code>begin apply [] end</code></p>\n<p>I will keep <code>by</code>!  Ahahaha</p>",
        "id": 210731942,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600690274
    },
    {
        "content": "<p>No <code>by</code> also enters tactic mode</p>",
        "id": 210731964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600690307
    },
    {
        "content": "<p>To be more specific, a consecutive substring <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 210732017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600690326
    },
    {
        "content": "<p><code>by {...}</code> and <code>begin ... end</code> are the two ways to enter tactic mode from term mode. <code>exact ...</code> is the way to enter term mode from tactic mode.</p>",
        "id": 210732065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600690366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Did you know that <code>mul_left_cancel'</code> is a function?</p>",
        "id": 210732097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600690385
    },
    {
        "content": "<p>Your lemma <code>xxv</code> is also a function</p>",
        "id": 210732112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600690402
    },
    {
        "content": "<p>Regarding the error, if you <code>set_option pp.numerals false</code>, then you get an error which shows the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">R</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">R</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"n\">R</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cancel_monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero</span> <span class=\"n\">R</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_cancel_monoid_with_zero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)))))</span>\n</code></pre></div>",
        "id": 210732818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600690864
    },
    {
        "content": "<p>showing that Lean already has some logic to help identify the issue,<br>\nbut to make it work you have to (1) guess it's an issue with <code>0</code>, (2) know (or guess) that <code>pp.numerals</code> exists, (3) turn it on and understand the resulting message</p>",
        "id": 210732932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600690925
    },
    {
        "content": "<p>I managed the term mode proof!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mul_left_cancel&#39;</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>I got stuck this whole time with the comma at the end...</p>",
        "id": 210733033,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600691002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/mul_left_cancel.20for.20integral.20domains/near/210732818\">said</a>:</p>\n<blockquote>\n<p>Regarding the error, if you <code>set_option pp.numerals false</code>, then you get an error which shows the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">R</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"n\">R</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">R</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span> <span class=\"n\">R</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">cancel_monoid_with_zero</span><span class=\"bp\">.</span><span class=\"n\">to_monoid_with_zero</span> <span class=\"n\">R</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">to_cancel_monoid_with_zero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_domain</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)))))</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I see: one appears to go by <code>semiring</code>, the other by <code>cancel_monoid</code>.</p>\n<p>Thanks for the explanation!</p>",
        "id": 210733251,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1600691152
    },
    {
        "content": "<p>Nasty commas are nasty</p>",
        "id": 210733323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600691185
    },
    {
        "content": "<p>The main point is buried though: one is ultimately built from <code>_inst_1</code> and the other from <code>_inst_2</code>. So the error message could still use some work.</p>",
        "id": 210733349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600691206
    },
    {
        "content": "<p>\"Don't forget the comma!\"</p>",
        "id": 210734180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600691709
    }
]