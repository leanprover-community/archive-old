[
    {
        "content": "<p>Is this type of quantifier defined in Lean? If yes, which is its symbol and which keys can be used to print it in VSCode? (I didn't find it  in the file lean prover/vscode-lean/translations.json) If not, is there a conventional combination of symbols which van be used to replace it? I would like to prove the following assertion: \\exists uniquely a set A such that \\forall B holds ( A \\un B = B). Which way could I print it in VSCode as provable example?</p>",
        "id": 210481808,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600409316
    },
    {
        "content": "<p><code>\\exists!</code></p>",
        "id": 210482190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600409698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">i_am_empty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">exists</span><span class=\"bp\">!</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"err\">\\</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">\\</span><span class=\"n\">union</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 210482284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600409779
    },
    {
        "content": "<p>@Johan Commelin: Thank you for your support.</p>",
        "id": 210482501,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600410090
    },
    {
        "content": "<p>Be careful if you try to use <code>\\exists!</code> with multiple variables: it unfolds to a bunch of nested <code>\\exists!</code> which usually isn't what you want. See this old thread <a href=\"#narrow/stream/113488-general/topic/undead/near/132662688\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/undead/near/132662688</a></p>",
        "id": 210483253,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600410984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>:<br>\nThank for that warning. With respect to sets I experienced something different. Maybe you like to take a look at that. Unfortunately the proof isn't complete. I stick to a problem which I actually can't solve:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">empty_union</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">union_self</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is the point I arrived at. But I don't find a solution the goal y = \\empty.</p>",
        "id": 210488834,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600415967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329867\">@Claus-Peter Becke</span> that's a maths question, not a Lean one</p>",
        "id": 210489050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600416099
    },
    {
        "content": "<p>solve it in maths first</p>",
        "id": 210489054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600416104
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code>    ...\n    have h2 := h1 ∅,\n    rw union_empty at h2,\n</code></pre></div>\n\n\n</div></div>",
        "id": 210489177,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600416182
    },
    {
        "content": "<p>(I've never seen the spoiler tag be used here before)</p>",
        "id": 210489282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600416255
    },
    {
        "content": "<p>It's relatively new (I think)</p>",
        "id": 210489292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600416262
    },
    {
        "content": "<p>@Kyle Miller:<br>\nThank you for that hint, albeit spoiled. Sometimes I don't see the forest for the trees.</p>",
        "id": 210489982,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600416792
    },
    {
        "content": "<p>@ Kenny Lau:<br>\nI'm not sure whether you intended to advise me to look at what y \\union B = B means. If yes, that wasn't necessary.</p>",
        "id": 210490463,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600417101
    },
    {
        "content": "<p>I intended you to prove, with paper and pen, that there is a unique set A such that A U B = B for all B</p>",
        "id": 210490497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600417144
    },
    {
        "content": "<p>before formalizing the proof into Lean</p>",
        "id": 210490510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600417158
    },
    {
        "content": "<p>But that hadn't been my problem, because I'm aware of the fact that if y \\union B = B is presupposed it follows that y is the empty set. The problem for me was to find a way to implement it. And because I'm not very experienced in writing mathematical proofs it would not have been easier to sit in front of a sheet of paper with a pencil between my fingers. I missed the idea to choose the empty set as a substitute for B. That was the problem. Admittedly that's a very elementary problem. But: Sometimes I don't see the forest for the trees.</p>",
        "id": 210491142,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600417540
    },
    {
        "content": "<p>then why do you know that (y U B = B for all B) implies y is the empty set?</p>",
        "id": 210491326,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600417661
    },
    {
        "content": "<p>Because I like to be examined: We. have an equality relation between two sets what means that we have a subset-relation in two directions. This can be rewritten as an implication in two directions and that again means that every x which is an element of the antecedent must also be a member of the consequence. x \\in B \\r x \\in B \\union y. So we don't have any further elements in y.</p>",
        "id": 210492114,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600418209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329867\">@Claus-Peter Becke</span> I think you mean to conclude that <code>y \\subset B</code>, right? But you want to prove <code>y = \\empty</code>. So you aren't done yet. Can you formalise this approach in Lean?</p>",
        "id": 210492348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600418398
    },
    {
        "content": "<p>I think you're treating B as a fixed set, when it's bound by a universal quantifier</p>",
        "id": 210492430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600418457
    },
    {
        "content": "<p>In h1 B is bound by the  universal quantifier, but I didn't introduce it as an arbitrary object. So I'm allowed to instantiate with a fixed set, I suppose. In this case as the empty set.</p>",
        "id": 210492943,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600418812
    },
    {
        "content": "<p>I'm claiming that the reason you're stuck in the formal proof is that you don't (or didn't) know the informal proof</p>",
        "id": 210493004,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600418877
    },
    {
        "content": "<p>hence why I said \"solve it in maths first\"</p>",
        "id": 210493053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600418893
    },
    {
        "content": "<p>At my present stage of experience with mathematical proofs I don't see an essential difference between proofs in Lean and in maths. It's only a different way to express it. I started using automated proving a few months ago with Daniel Vellemans Proof Designer. With that tool I experienced that you can express every automated step also as a corresponding \"informal\" one.</p>",
        "id": 210493618,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600419307
    },
    {
        "content": "<p>yes, I agree</p>",
        "id": 210493676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600419359
    },
    {
        "content": "<p>@Johan Comerin:<br>\nBecause y is the empty set it is also a subset of B. But with those steps I described above it should be done to prove that y = \\empty? Or am I wrong? I have formalized the proof without the unique existential quantifier which Is very easy to solve:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">empty_union</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210495880,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600420862
    },
    {
        "content": "<p>@ Johan Commelin:<br>\n I'm sorry. The automated correction changed the name I meant</p>",
        "id": 210496060,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600421019
    },
    {
        "content": "<p>Sure. Now it would be a nice exercise to also formalise the <code>!</code>-part along the lines of the argument that you sketched upstairs.</p>",
        "id": 210496164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600421102
    },
    {
        "content": "<p>Ok, I will try that.</p>",
        "id": 210496253,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600421172
    },
    {
        "content": "<p>As far as I see there will be especially two possibilities. The first one I posted above. The second is the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I don't consider the second as a rational one. My guesses advise that it should be the empty set which fulfills all conditions. If I have an existential quantifier in my goal, I'm asked to look for an object which fits in. Under the given circumstances that can only be the empty set. Thus it isn't rational to presuppose something like x \\in A if I expect A to be the empty set.<br>\nMaybe I understood you wrongly. If so, I would appreciate if you explained in detail what you expected and what is wrong with respect to my belefs.</p>",
        "id": 210604196,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600503980
    },
    {
        "content": "<p>You can presuppose a false thing -- that happens all the time in proofs by contradiction</p>",
        "id": 210604217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600504052
    },
    {
        "content": "<p>Yes, of course, but the development will show whether I was wrong or not.</p>",
        "id": 210604267,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600504108
    },
    {
        "content": "<p>I wanted to say the development of the prooof.</p>",
        "id": 210604272,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600504132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329867\">@Claus-Peter Becke</span> You wrote how you would finish the proof in a post above. I simply meant that you try to turn that into Lean code. It might be a fun exercise.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"err\">∅</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">empty_union</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- continue your proof idea here</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210604330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600504208
    },
    {
        "content": "<p>(I know you already know how to finish this proof in one way. I'm suggesting that you try to follow your own sketch as well.)</p>",
        "id": 210604335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600504243
    },
    {
        "content": "<p>In my opinion this is already done. The first time using the unique existential quantifier with the spoiled hint of Kyle Miller. And the second time with the very simple solution that uses the existential quantifier. I'm sorry, but I don't see any further solutions.</p>",
        "id": 210604471,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1600504461
    }
]