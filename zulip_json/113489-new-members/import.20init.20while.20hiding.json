[
    {
        "content": "<p>I'm currently trying to clean up a translation of the Basics chapter of Logical Foundations, which redefines <code>bool</code>. My first draft had my own <code>mybool</code> sort of thing, because Lean does not seem to allow any kind of redeclaration/shadowing, but I was wondering if I could hide the standard library's definition?</p>\n<p>I know sticking <code>prelude</code> at the top will hide imports, but it also hides the <code>match</code> tactic, which is kind of important:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">yo</span> <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"kn\">export</span> <span class=\"n\">yo</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">yo</span><span class=\"o\">):</span> <span class=\"n\">yo</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"c1\">-- nested exception message: cases tactic failed, it is not applicable to the given hypothesis</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>But then when I <code>import init.meta</code>, it seems to drag <code>bool</code> in all over again:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">meta</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bool</span> <span class=\"c1\">-- works...</span>\n</code></pre></div>",
        "id": 198513207,
        "sender_full_name": "John Hui",
        "timestamp": 1590200310
    },
    {
        "content": "<p>The match tactic is not required</p>",
        "id": 198513474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200750
    },
    {
        "content": "<p>you can use <code>yo.rec_on</code> instead</p>",
        "id": 198513512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200764
    },
    {
        "content": "<p>But if you go full prelude like this, you will not have the tactic framework so you can't use definitions by pattern matching</p>",
        "id": 198513521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200799
    },
    {
        "content": "<p>But the usual recommendation is to either use <code>mybool</code>, or put everything in a <code>namespace hidden</code></p>",
        "id": 198513532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590200855
    },
    {
        "content": "<p>Unfortunately it appears <code>export</code> does not respect namespaces so you have to fully qualify it, but otherwise this is just as good as the real thing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"bp\">|</span> <span class=\"n\">ff</span>\n<span class=\"kn\">export</span> <span class=\"n\">hidden</span><span class=\"bp\">.</span><span class=\"n\">bool</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 198513644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590201061
    },
    {
        "content": "<p>Thanks Mario! it looks like another downside with the <code>namespace</code> approach is that it does't appear to play well with notations:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"bp\">|</span> <span class=\"n\">ff</span>\n<span class=\"kn\">export</span> <span class=\"n\">hidden</span><span class=\"bp\">.</span><span class=\"n\">bool</span>\n<span class=\"n\">def</span> <span class=\"n\">orb</span> <span class=\"c\">/-</span><span class=\"cm\"> ... -/</span>\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`||`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">orb</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span><span class=\"o\">:</span>  <span class=\"n\">tt</span> <span class=\"bp\">||</span> <span class=\"n\">ff</span> <span class=\"c1\">-- ambiguous overload, possible interpretations</span>\n</code></pre></div>\n\n\n<p>I'll probably use a <code>mybool</code> kind of approach</p>",
        "id": 198515339,
        "sender_full_name": "John Hui",
        "timestamp": 1590203999
    },
    {
        "content": "<p>use a <code>local notation</code>. Overloaded <code>notation</code> never works well, even in the standard library</p>",
        "id": 198515887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590204915
    },
    {
        "content": "<p>that worked, thanks!</p>",
        "id": 198516164,
        "sender_full_name": "John Hui",
        "timestamp": 1590205345
    },
    {
        "content": "<p>Thanks for asking. I've seen this come up before in teaching situations. <span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> did you know all these tips when you did your <code>mylist</code> student tutorial? Maybe they should be recorded somewhere? What does <code>export</code> do? I've never heard of it. I just move into the namespace and hope.</p>",
        "id": 198523049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590218652
    },
    {
        "content": "<p>I didn't know about the local notation. Thanks for tagging me!</p>",
        "id": 198523411,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1590219413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>export</code> is the global version of <code>open</code></p>",
        "id": 198523740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590220030
    },
    {
        "content": "<p>for instance, in the core library there is <code>export bool (tt ff)</code> so that you can refer to <code>tt</code> anywhere without opening <code>bool</code></p>",
        "id": 198523747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590220067
    },
    {
        "content": "<p>Oh wow, I did not know that was a thing</p>",
        "id": 198523787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590220091
    },
    {
        "content": "<p>as with most global things, it should be used sparingly or in places where you don't care about the consequences</p>",
        "id": 198523797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590220118
    }
]