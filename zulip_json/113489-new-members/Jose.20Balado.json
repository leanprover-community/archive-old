[
    {
        "content": "<p>Hi, I am Jose, working as a web developer with a degree in Philosophy and interested in Mathematical Logic. I recently learned about Automatic Theorem Provers, and after trying several of them, Lean seamed like the easiest to install and run, with very good documentation.</p>\n<p>My knowledge of Mathematical Logic is kind of basic and I am going through a tutorial called Theorem Proving in Lean, so I wonder if I could find somewhere the solutions for the exercises.<br>\nWorking right now with 3.6. Examples of Propositional Validities,  but I am strugling with this one, even if I was able to solve the previous problems:<br>\n¬(p ∨ q) ↔ ¬p ∧ ¬q</p>\n<p>I solved the previous one like this:</p>\n<div class=\"codehilite\"><pre><span></span>example : ((p ∨ q) → r) ↔ (p → r) ∧ (q → r) :=\niff.intro\n(assume hpqr : (p ∨ q) → r, show (p → r) ∧ (q → r), from\n  ⟨(assume hp : p, show r, from hpqr(or.inl hp)),\n   (assume hq : q, show r, from hpqr(or.inr hq))⟩)\n(assume hprqr : (p → r) ∧ (q → r), show (p ∨ q) → r, from\n  (assume hpq : p ∨ q, show r, from\n    or.elim hpq\n    (assume hp : p, show r, from hprqr.left hp)\n    (assume hq : q, show r, from hprqr.right hq)\n  )\n)\n</pre></div>\n\n\n<p>So , please, any place where I could find the solutions, or perhaps anyone so kind as to show me how to prove this ¬(p ∨ q) ↔ ¬p ∧ ¬q.<br>\nAlso, not sure if it is right to post here these basic questions.</p>\n<p>Thanks,<br>\nJose</p>",
        "id": 164348909,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556391583
    },
    {
        "content": "<p>This is a perfect place to post basic questions.</p>",
        "id": 164349037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556391715
    },
    {
        "content": "<p>Do you know tactic mode?</p>",
        "id": 164349086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556391727
    },
    {
        "content": "<p>By the way, Lean is an Interactive Theorem Prover, not an Automatic one. You have to do a lot of the work yourself. Actually, Lean bills itself as trying to bridge the gap between the two, IIRC.</p>",
        "id": 164349095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556391777
    },
    {
        "content": "<p>No sorry, Tactics comes later. Should I take a look there first?</p>",
        "id": 164349118,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556391836
    },
    {
        "content": "<p>Here is a proof:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">finish</span>\n\n <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 164349120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556391838
    },
    {
        "content": "<p>The <code>finish</code> tactic is part of the automatic story rather than the interactive story :-)</p>",
        "id": 164349167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556391858
    },
    {
        "content": "<p>thanks for clarification about Automatic/Interactive <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 164349177,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556391891
    },
    {
        "content": "<p>I really don't now how to manipulate <code> ¬(p ∨ q)</code>.<br>\nWill I need tactics to solve the rest of the 3.6 theorems?</p>",
        "id": 164349258,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556392001
    },
    {
        "content": "<p>You don't need tactics to solve anything, it's just that I find that some beginners prefer tactic mode.</p>",
        "id": 164349275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392036
    },
    {
        "content": "<p>I'm writing some more proofs; hang on.</p>",
        "id": 164349276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392045
    },
    {
        "content": "<p>You can put <code>¬(p ∨ q)</code> in single backticks to make it look nicer.</p>",
        "id": 164349280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392060
    },
    {
        "content": "<p>The way to manipulate it is to think of it as (p or q) implies false</p>",
        "id": 164349286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392077
    },
    {
        "content": "<p>Here's a term mode proof:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hn</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 164349346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392125
    },
    {
        "content": "<p>Nice, thanks a lot.<br>\nI usually prefer to go back myself to the documentation, but because you are just here, prefer to answer you as soon as possible.<br>\nWhere can I find how that <code>$</code> thing works?</p>",
        "id": 164349443,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556392277
    },
    {
        "content": "<p>Here's a tactic mode proof.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- goal is an iff so let&#39;s split it</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ¬(p ∨ q) → ¬p ∧ ¬q</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ¬p ∧ ¬q → ¬(p ∨ q)</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hnpnq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hnpnq</span> <span class=\"k\">with</span> <span class=\"n\">hnp</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n      <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n      <span class=\"n\">contradiction</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164349453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392312
    },
    {
        "content": "<p>If you cut and paste that into VS Code and turn on \"info view: display goal\" (ctrl-shift-enter) and then click around, you will be able to see Lean's tactic state at any point in the proof.</p>",
        "id": 164349509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392366
    },
    {
        "content": "<p>$ is just function composition at super-low priority. In practice you can use it instead of brackets. Instead of <code>f (g x)</code> you can write <code>f $ g x</code></p>",
        "id": 164349523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392401
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hn</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 164349573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392451
    },
    {
        "content": "<p><code>$</code> is the third line of code in <code>core.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"err\">$</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p><code>f $ blah blah blah</code> takes everything on the right and feeds it as a single argument to the left.</p>",
        "id": 164349574,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1556392452
    },
    {
        "content": "<p>There's a <code>$</code>-free version</p>",
        "id": 164349577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392460
    },
    {
        "content": "<blockquote>\n<p>By the way, Lean is an Interactive Theorem Prover, not an Automatic one. </p>\n</blockquote>\n<p>Actually Lean used to be a fully automatic theorem prover. You would post any statement here and, a few seconds later, Mario would output a Lean proof. Unfortunately, after a long struggle, Mario's advisor found a way to make him do the work he was actually supposed to do. So we lost this automation.</p>",
        "id": 164349578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556392467
    },
    {
        "content": "<p>We need to automate him.</p>",
        "id": 164349583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392500
    },
    {
        "content": "<p>maybe Lean has the I/O capability for setting up a tactic so that every time <code>by mario</code> is called, he gets PMed with the proof state on Zulip...</p>\n<p>maybe an April Fools Day project</p>",
        "id": 164349675,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1556392590
    },
    {
        "content": "<p>Thanks, will take a look at the Tactics mode, looks really interesting. Now I am not sure if to keep working as I was or redo all the 3.6 theorems that I solved using tactics.<br>\no.k pretty simple that <code>$</code>, thanks</p>",
        "id": 164349678,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556392596
    },
    {
        "content": "<p>One of the exercises in the tactic mode chapter is \"now go back and do all the exercises in tactic mode\"</p>",
        "id": 164349701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556392625
    },
    {
        "content": "<p>Thanks a lot to all for your answers, not completely sure about that answer mentioning certain Mario :)</p>",
        "id": 164350035,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556393079
    },
    {
        "content": "<p>No one mentioned the obvious answer:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">not_or_distrib</span>\n</pre></div>\n\n\n<p>For obvious reasons, this isn't a great way to answer homework problems, but it's also important to know that all of these are already proven in the library, and you should never be proving it yourself when it comes up in a more complicated example</p>",
        "id": 164350551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556394002
    },
    {
        "content": "<p>Also, your first example is actually a generalization of the second one. If you give it a name, you have a one line proof like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">or_imp_distrib</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n  <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpqr</span><span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">)),</span>\n   <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hpqr</span><span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"o\">))</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hprqr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpq</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hprqr</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hprqr</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">or_imp_distrib</span>\n</pre></div>",
        "id": 164350613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556394100
    },
    {
        "content": "<p>Thanks Mario, really interesting your last example. <code>example (p q : Prop) : ¬(p ∨ q) ↔ ¬p ∧ ¬q := or_imp_distrib</code><br>\nbut this doesn't work for me:</p>\n<div class=\"codehilite\"><pre><span></span>import logic.basic\nexample (p q : Prop) : ¬(p ∨ q) ↔ ¬p ∧ ¬q := not_or_distrib\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>file &#39;logic/basic&#39; not found in the LEAN_PATH\n</pre></div>\n\n\n<p>Will check that later</p>",
        "id": 164351144,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556395012
    },
    {
        "content": "<p>It suggests you didn't install mathlib</p>",
        "id": 164351158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556395035
    },
    {
        "content": "<p>I am using VS Code, how can I install mathlib? Any link with instructions?</p>",
        "id": 164351216,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556395089
    },
    {
        "content": "<p>And Elan extension, it seems it automatically installed Lean</p>",
        "id": 164351240,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556395188
    },
    {
        "content": "<p>Try the readme here: <a href=\"https://github.com/leanprover-community/mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib\">https://github.com/leanprover-community/mathlib</a> . If it is not all easy please let us know. I am really hoping it's getting to the point where it's all easy.</p>",
        "id": 164351301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395249
    },
    {
        "content": "<p>Thanks Kevin, will let you know as soon as I install it</p>",
        "id": 164351391,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556395430
    },
    {
        "content": "<p>You'll probably let me know that everything has gone orange and it's taking ages to compile.</p>",
        "id": 164351445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395457
    },
    {
        "content": "<p>Make sure you figure out the <code>update_mathlib</code> magic sauce</p>",
        "id": 164351448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395475
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , I was unable to install mathlib. I don't use python so probably I am doing something wrong, but after installing <code>pip</code>, and <code>setuptools</code> with the <code>--user</code> option, I was able to run this command and it all seemed fine:</p>\n<div class=\"codehilite\"><pre><span></span>curl https://raw.githubusercontent.com/leanprover-community/mathlib/master/scripts/remote-install-update-mathlib.sh -sSf | sh\n</pre></div>\n\n\n<p>but this <code>mathlib scripts are already added to $PATH in .profile</code> doesn't seem to work on Linux Mint/Ubuntu.</p>\n<p>And when I go to <code>~/.mathlib/bin</code> and execute <code>./update-mathlib</code> I got this error:</p>\n<div class=\"codehilite\"><pre><span></span>/home/aris/.local/lib/python3.5/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.25.1) or chardet (3.0.4) doesn&#39;t match a supported version!\n  RequestsDependencyWarning)\nError: No leanpkg.toml found\n</pre></div>\n\n\n<p>If I download the repository <code>mathlib-scripts-###-###-###.tar.gz</code> and run <code>./update-mathlib.py</code><br>\nI got this:</p>\n<div class=\"codehilite\"><pre><span></span>/home/aris/.local/lib/python3.5/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.25.1) or chardet (3.0.4) doesn&#39;t match a supported version!\n  RequestsDependencyWarning)\nTraceback (most recent call last):\n  File &quot;./update-mathlib.py&quot;, line 25, in &lt;module&gt;\n    lib = leanpkg[&#39;dependencies&#39;][&#39;mathlib&#39;]\nKeyError: &#39;mathlib&#39;\n</pre></div>\n\n\n<p>Will it be possible to manually copy that definition directly <code>not_or_distrib</code> or perhaps manually copy the folder <code>logic</code> from mathlib to where my exercises are and import the logic library with <code>import</code>?<br>\nThanks</p>",
        "id": 164386878,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556457745
    },
    {
        "content": "<p>you are meant to run <code>update-mathlib</code> inside your project root folder</p>",
        "id": 164386896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556457797
    },
    {
        "content": "<p>Could you please try that and report here?</p>",
        "id": 164386909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556457830
    },
    {
        "content": "<p>Thanks Patrick, if I run inside my project: <code>update-mathlib</code></p>\n<div class=\"codehilite\"><pre><span></span>/home/aris/.local/lib/python3.5/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.25.1) or chardet (3.0.4) doesn&#39;t match a supported version!\n  RequestsDependencyWarning)\nError: No leanpkg.toml found\n</pre></div>",
        "id": 164386984,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556457930
    },
    {
        "content": "<p>I need more info: where exactly did you run that command, and what is the content of that directory?</p>",
        "id": 164387035,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556457972
    },
    {
        "content": "<p>but I had manually <code>update-mathlib</code> to the <code>.\nbashrc</code> file</p>\n<div class=\"codehilite\"><pre><span></span>export PATH=&quot;$HOME/.elan/bin:$PATH&quot;\nexport PATH=&quot;$HOME/.mathlib/bin:$PATH&quot;\n</pre></div>",
        "id": 164387057,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556458052
    },
    {
        "content": "<p>The content is just a file called: <code>3.Propositions_and_Proofs.lean</code></p>",
        "id": 164387107,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556458101
    },
    {
        "content": "<p>Then this is not a project</p>",
        "id": 164387111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556458115
    },
    {
        "content": "<p>is a folder where I run this project using VSCode</p>",
        "id": 164387114,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556458127
    },
    {
        "content": "<p>did you use <code>leanpkg new</code>?</p>",
        "id": 164387118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556458142
    },
    {
        "content": "<p>We cannot do much for you if you don't follow the instructions at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md#scenario-1-start-a-new-package\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md#scenario-1-start-a-new-package\">https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md#scenario-1-start-a-new-package</a></p>",
        "id": 164387139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556458188
    },
    {
        "content": "<p>Ah, thanks Patrick, that must be it</p>",
        "id": 164387198,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556458225
    },
    {
        "content": "<p>The end of those instructions is outdated in the sense that it doesn't use <code>update-mathlib</code>, but everything up to installation of uncompiled mathlib is ok</p>",
        "id": 164387205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556458245
    },
    {
        "content": "<p>Didn't know that way of running Lean, will work on that, thanks.<br>\nI was simply using VSCode to run Lean, a little like in the browser, and following <code>Theorem Proving in Lean</code>.<br>\nWill try that</p>",
        "id": 164387302,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556458354
    },
    {
        "content": "<blockquote>\n<p>We cannot do much for you if you don't follow the instructions at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md#scenario-1-start-a-new-package\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md#scenario-1-start-a-new-package\">https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md#scenario-1-start-a-new-package</a></p>\n</blockquote>\n<p>We need to make it easier for beginners.</p>",
        "id": 164387523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556458629
    },
    {
        "content": "<p>Yes I know</p>",
        "id": 164387529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556458640
    },
    {
        "content": "<p>Now my teaching and my perfectoid spaces are done, I firmly intend to come back to this</p>",
        "id": 164387545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556458657
    },
    {
        "content": "<p>Can't we make some Lean sample project, and host it on community mathlib?</p>",
        "id": 164387553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556458670
    },
    {
        "content": "<p>A sample project with Lean 3.4.2 and mathlib some version <em>guaranteed</em> to be (a) relatively close to <code>master</code> and (b) <code>update-mathlib</code> <em>must</em> work? And a src directory with a random theorem, like a maths proof involving equivalence relations or something.</p>",
        "id": 164387644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556458750
    },
    {
        "content": "<p>And also a file in it called CLICK_HERE_TO_INSTALL_ALL_LEAN_THINGS.exe</p>",
        "id": 164387674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556458791
    },
    {
        "content": "<p>and then we just tell people to clone it and click on the right thing</p>",
        "id": 164387763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556458852
    },
    {
        "content": "<p>and it installs VS Code and the Lean extension and it all just works</p>",
        "id": 164387787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556458880
    },
    {
        "content": "<p>This is not so easy to do in a platform-independent way</p>",
        "id": 164388180,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556459335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219844\">@Jose Balado</span> did you follow the instruction? Anything you hide from us is preventing us to improve the instructions from beginners.</p>",
        "id": 164388205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556459381
    },
    {
        "content": "<p>Thanks Patrick will let you know as soon as possible, but not sure if today :)</p>",
        "id": 164388293,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556459482
    },
    {
        "content": "<p>Well, I think if I had read everything I would have realized about that. The thing is that that the  <code>elan</code> plugin for VSCode makes things so simple to start working that I didn't even put more attention to the rest of the README.md. I was just very happy reading <code>Theorem Proving in Lean</code> and doing  proofs of theorems.<br>\nI of course had a vague idea that there should be a way to create packages and link libraries in Lean, but didn't really worry about that.<br>\nSome time ago I tried to install Agda, but gave up as soon as I was able to magically run Lean through VSCode.<br>\nI think what you are proposing of a sample project and just click here and have everything working would be fantastic, mostly for people that are completely on their own, without an instructor or any one to help you by your side.</p>",
        "id": 164388295,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556459489
    },
    {
        "content": "<p>I really don't understand how long it can take to run this <code>leanpkg +3.4.2 new my_playground</code>, <code>cd my_playground</code>, <code>leanpkg add leanprover/mathlib</code> and <code>update-mathlib</code></p>",
        "id": 164388445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556459697
    },
    {
        "content": "<p>On my machine it literally takes less than ten seconds if I copy paste the commands</p>",
        "id": 164388462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556459718
    },
    {
        "content": "<p>Well yes, I tried that, and to that point it worked, but to be sure I need understand what I am doing, try to prove a theorem, import that library, and see if everything is working.</p>",
        "id": 164388553,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556459882
    },
    {
        "content": "<p>Ah ok. The next step is to fire VScode, go to File menu/Open folder, select <code>my_playgroun</code>. Create inside <code>my_playgroung/src</code> a file called test.lean and type in that file, for instance,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">topological_space</span>\n</pre></div>",
        "id": 164388680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556460022
    },
    {
        "content": "<p>give me 30 minutes</p>",
        "id": 164389425,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556461002
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , sorry for delay, it is working: I can see this message on the Lean messages window:</p>\n<div class=\"codehilite\"><pre><span></span>topological_space : Type u_1 → Type u_1\n</pre></div>\n\n\n<p>thanks a lot for your help!!!</p>",
        "id": 164390149,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462029
    },
    {
        "content": "<p>No problem! In the end, did you do anything not covered by documentation?</p>",
        "id": 164390214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462094
    },
    {
        "content": "<p>I suppose this works because I first run:</p>\n<div class=\"codehilite\"><pre><span></span>curl https://raw.githubusercontent.com/leanprover-community/mathlib/master/scripts/remote-install-update-mathlib.sh -sSf | sh\n</pre></div>",
        "id": 164390289,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462168
    },
    {
        "content": "<p>And it was a little bit tricky on my system to make it work</p>",
        "id": 164390300,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462193
    },
    {
        "content": "<p>Why was it tricky?</p>",
        "id": 164390328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462236
    },
    {
        "content": "<p>Mostly because of python, I had to install <code>pip</code>, and <code>setuptools</code>. Discovered the need to add this option <code>--user</code></p>",
        "id": 164390389,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462300
    },
    {
        "content": "<p>just running <code>curl</code> didn't work, but I guess it is something related with how Python is installed in <code>Ubuntu</code></p>",
        "id": 164390422,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462356
    },
    {
        "content": "<p>Do you have output to paste?</p>",
        "id": 164390437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462387
    },
    {
        "content": "<p>This kind of things is hard to test because it's hard to find a computer lacking python and pip</p>",
        "id": 164390489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462409
    },
    {
        "content": "<p>I guess we should be serious about it and use virtual machines with stripped down linux</p>",
        "id": 164390502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462432
    },
    {
        "content": "<p>No sorry, I closed the windows, but I will install this in another computer. So could try to copy and paste</p>",
        "id": 164390559,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462520
    },
    {
        "content": "<p>Ubuntu has Python installed, and should have <code>pip</code> too</p>",
        "id": 164390619,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462550
    },
    {
        "content": "<p>but <code>setuptools</code> was not there</p>",
        "id": 164390630,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462573
    },
    {
        "content": "<p>Also, I had to add this to <code>.bashrc</code> file, they were added to <code>.profile</code> but didn't work</p>\n<div class=\"codehilite\"><pre><span></span>export PATH=&quot;$HOME/.elan/bin:$PATH&quot;\nexport PATH=&quot;$HOME/.mathlib/bin:$PATH&quot;\n</pre></div>",
        "id": 164390733,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462695
    },
    {
        "content": "<p>Did you source <code>.profile</code>?</p>",
        "id": 164390746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462714
    },
    {
        "content": "<p>or logout/login?</p>",
        "id": 164390751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556462726
    },
    {
        "content": "<p>yes, I logout and login, that worked only  when I added it to <code>.bashrc</code></p>",
        "id": 164390820,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462779
    },
    {
        "content": "<p>Also, it is not the first time I have problems with Python, for the rest, really easy to install</p>",
        "id": 164390935,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556462955
    },
    {
        "content": "<p><code>.profile</code> is ignored if you have <code>.bash_profile</code>, I noticed this on my mac as well.</p>",
        "id": 164391019,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1556463074
    },
    {
        "content": "<p>I don't have <code>.bash_profile</code>, but I know there are differences in behavior between different Unix related to this.</p>",
        "id": 164391274,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556463399
    },
    {
        "content": "<p>I think all this is really hard to get right on all computers (and I'm not even thinking about Windows). At some point we'll have to give up on this weird setup and package stuff on a per Linux distribution basis (plus the MacOS thing)</p>",
        "id": 164391313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556463446
    },
    {
        "content": "<p>sorry Patrick, you were right about login/logout, after restarting the computer, I no longer need to include it into <code>.bashrc</code>, for sure it would work just closing the session, but I usually don't do that, I usually open too many things, and I don't know how to open a login console inside a graphical session</p>",
        "id": 164391862,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556464071
    },
    {
        "content": "<p>I know it's a pain to close a session simply to install something.</p>",
        "id": 164391947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556464129
    },
    {
        "content": "<p>That's clearly unsatisfying</p>",
        "id": 164391970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556464163
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , these are the commands to install all Python dependencies needed for Mathlib.<br>\nOperating system version: Linux Mint 18.3 Sylvia</p>\n<div class=\"codehilite\"><pre><span></span>sudo apt install python3-pip\n// update to latest pip\npip3 install --user --upgrade pip\n// open new terminal\npip install --user setuptools\n// log out/login from the user session\ncurl https://raw.githubusercontent.com/leanprover-community/mathlib/master/scripts/remote-install-update-mathlib.sh -sSf | sh\n</pre></div>\n\n\n<p>Caveat: Now <code>pip</code> command refers to pip3 not to pip2</p>",
        "id": 164585386,
        "sender_full_name": "Jose Balado",
        "timestamp": 1556666139
    },
    {
        "content": "<p>Thanks Jose! Hopefully the missing setuptools error was fixed yesterday, and all this should be unnecessary (except for the last line).</p>",
        "id": 164613626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556705719
    }
]