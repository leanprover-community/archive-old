[
    {
        "content": "<p>I know what I am trying to achieve, however not sure about how to actually execute it in Lean.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">R_is_symmetric</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">symmetric</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>As you can see I have the hypothesis the k * 37 = x - y, however want to show existence of -k to show -k * 37 = y - x which will show that it is symmetric.<br>\nThanks</p>",
        "id": 151046285,
        "sender_full_name": "Nicholas Siedlaczek",
        "timestamp": 1544132804
    },
    {
        "content": "<p>This should help. Use cases.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">R_is_symmetric</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">symmetric</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span><span class=\"o\">(</span> <span class=\"bp\">-</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 151046398,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544132907
    },
    {
        "content": "<p>Thanks Chris</p>",
        "id": 151046671,
        "sender_full_name": "Nicholas Siedlaczek",
        "timestamp": 1544133150
    },
    {
        "content": "<p>Are you an Imperial undergraduate doing my equivalence relation challenge <span class=\"user-mention\" data-user-id=\"138693\">@Nicholas Siedlaczek</span> ?</p>",
        "id": 151050131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544136645
    },
    {
        "content": "<p>I'm sure the 37 was a coincidence</p>",
        "id": 151050456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544137158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138693\">@Nicholas Siedlaczek</span> , after you're done with this, it will be useful to realize that all those <code>unfold</code> are only psychological comfort for you, but Lean doesn't need them. The tactic proof of your lemma needs no more than three lines, one for introductions (using tactic <code>rintros</code>), one for instanciating the existential (using tactic <code>use</code>, or <code>existsi</code> but you should get used to <code>use</code> which is newer and more powerful), and one for the tiny computation (using tactic <code>simp</code>).</p>",
        "id": 151052405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544139387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks so what you're saying is all <code>unfold</code> does is display to the user what it actually means and shows you what to prove while lean basically 'ignores' them and is of no consequences to it?</p>",
        "id": 151052641,
        "sender_full_name": "Nicholas Siedlaczek",
        "timestamp": 1544139713
    },
    {
        "content": "<p>Sometimes it's useful also to Lean, eg for type class instance resolution but, in my experience, almost every unfold that I type is unnecessary.</p>",
        "id": 151052874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544140001
    },
    {
        "content": "<p>In your case, the full proof is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">R_is_symmetric</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 151052898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544140039
    },
    {
        "content": "<p>If you want to emphasize which part really uses tactics seriously, you can also write it as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">R_is_symmetric</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨-</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 151053009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544140185
    },
    {
        "content": "<p>It shows clearly that, in this proof, the only tactic which actually does work for you is the simplifier</p>",
        "id": 151053075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544140227
    }
]