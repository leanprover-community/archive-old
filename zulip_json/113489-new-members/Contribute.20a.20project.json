[
    {
        "content": "<p>I have finished a project on Hadamard matrices and relevant topics. <br>\nI would like to contribute it to mathlib.<br>\nCould anyone please let me know the proper procedure I should take to contribute a project?</p>",
        "id": 251578109,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630509817
    },
    {
        "content": "<p>I have a private repository for this project.</p>",
        "id": 251578760,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630510060
    },
    {
        "content": "<p>There's some <a href=\"https://leanprover-community.github.io/contribute/index.html\">information on the community website</a>.</p>",
        "id": 251580015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630510525
    },
    {
        "content": "<p>PS you do not \"contribute a project\" -- you make a series of PR's adding results in appropriate places.</p>",
        "id": 251580101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630510561
    },
    {
        "content": "<p>You should definitely check out all of the documents about contributing in the bottom left sidebar so in addition to Pull request lifecycle, look at: Naming conventions, Code style guideline, Documentation style are all relevant and you can start making sure your code matches what is explained there.</p>",
        "id": 251580237,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630510608
    },
    {
        "content": "<p>Yeah. I did some PRs before. If so, it seems that I just need to do more individual PRs.</p>",
        "id": 251580567,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630510724
    },
    {
        "content": "<p>Should I public my repository here or somewhere?</p>",
        "id": 251580686,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630510770
    },
    {
        "content": "<p>That's entirely up to you, and is independent of the PR process.</p>",
        "id": 251580744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630510791
    },
    {
        "content": "<p>Yeah when all the smaller lemmas are added you could make a PR introducing a file hadamard_matrices.lean that contains the crux of your project, or even break that up, first PRing the definitions, then later some results you proved about them. Smaller PRs tend to get reviewed better faster, so breaking it up will definitely help move things along.</p>",
        "id": 251580905,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630510843
    },
    {
        "content": "<p>Thanks for your suggestion. As I may not be quite sure about where to insert several topics into mathlib, I think I am going to share my repository here later.<br>\nThe implementation of Hadamard matrices depends on several other PRs. I think I am going to do surrounding PRs first to make things ready.</p>",
        "id": 251581231,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630510956
    },
    {
        "content": "<p>I have written a file about symmetric matrices. For example, what is the correct place to insert this file?<br>\nAll my files follow the contribution conventions and are in the correct styles (except for possible misuse or errors).</p>",
        "id": 251581757,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630511142
    },
    {
        "content": "<p>How long is the file?</p>",
        "id": 251582238,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630511332
    },
    {
        "content": "<p>Quite short now, 94 lines</p>",
        "id": 251582370,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630511391
    },
    {
        "content": "<p>Well it could go somewhere in the folder <code>linear_algebra/matrix/</code></p>",
        "id": 251582488,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630511428
    },
    {
        "content": "<p>Probably as a new file <code>symmetric.lean</code></p>",
        "id": 251582508,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630511440
    },
    {
        "content": "<p>I will leave for a moment and try to share the whole repository when I am back.</p>",
        "id": 251582640,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630511493
    },
    {
        "content": "<p>The other option, seeing as there isn't a lot of code is to add the material to the end of the file <code>data/matrix/basic.lean</code></p>",
        "id": 251582658,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630511503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Alex, are you a mathlib maintainer?</p>",
        "id": 251582790,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630511551
    },
    {
        "content": "<p>Personally I prefer the second option, but others might disagree</p>",
        "id": 251582828,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630511565
    },
    {
        "content": "<p>Nope I'm not</p>",
        "id": 251582849,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630511573
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 251582897,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630511599
    },
    {
        "content": "<p><code>data.matrix.basic</code> is a beast as it is. My rule of thumb is that new definitions, unless intensely related to existing definitions and lemmas, should go into new files. New files are cheap, and easier to encapsulate. Having everything in a single file makes untangling from an import spaghetti much harder later on (cf data.equiv.basic).</p>",
        "id": 251584492,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630512239
    },
    {
        "content": "<p>This rule of thumb includes new instances as well. For example, I'm PRing integer powers of matrices, since we have a <code>has_inv</code> defined, so we can make matrices a <code>div_inv_monoid</code> and get integer powers for free. But I am doing that in a new file <code>linear_algebra.matrix.fpow</code> so that this new \"definition\" and all of the associated lemmas don't pollute <code>nonsing_inv</code>.</p>",
        "id": 251584872,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630512378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project/near/251582488\">said</a>:</p>\n<blockquote>\n<p>Well it could go somewhere in the folder <code>linear_algebra/matrix/</code><br>\nProbably as a new file <code>symmetric.lean</code></p>\n</blockquote>\n<p>I would go with this option. That means you can have a self-contained PR of ~94 lines. (Don't forget copyright headers, module docstring, etc).<br>\nSeems like a good PR to start with.</p>",
        "id": 251587766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630513424
    },
    {
        "content": "<p>Putting it in its own file also helps avoid the temptation to refactor everything else in the file you would otherwise insert your code into</p>",
        "id": 251588433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630513680
    },
    {
        "content": "<p>Thanks for the suggestions, I will start with that PR tonight. What follow are circulant matrices, diagonal matrices(as a prop) etcâ€¦</p>",
        "id": 251591508,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630514827
    },
    {
        "content": "<p>I have made that PR.<br>\nWhat would be a good place for the definition of Hadamard matrices and basic APIs excluding any complicated constructions of Hadamard matrices?</p>",
        "id": 251605328,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630520336
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 251620804,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630526748
    },
    {
        "content": "<p>Probably <code>data/matrix/hadamard</code></p>",
        "id": 251626533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630529194
    },
    {
        "content": "<p>Although I wonder if we just want to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">hadamard</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi.has_mul</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So that we get all the lemmas about mul for free</p>",
        "id": 251626683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630529273
    },
    {
        "content": "<p>Eric, \"Hadamard matrix\" is different from the Hadamard product. Do we really want \"Hadamard matrix\" to be in data/matrix/hadamard?</p>",
        "id": 251627444,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630529548
    },
    {
        "content": "<p>The fact that matrices are just some thin layer on top of <code>pi</code> has bitten me before, when <code>1</code> is interpreted as <code>pi.has_one</code> instead of <code>matrix.has_one</code></p>",
        "id": 251627521,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630529575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project/near/251626683\">said</a>:</p>\n<blockquote>\n<p>Although I wonder if we just want to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">hadamard</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pi.has_mul</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So that we get all the lemmas about mul for free</p>\n</blockquote>\n<p>Please let me know if we indeed want to change the definition to this.</p>",
        "id": 251628287,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630529908
    },
    {
        "content": "<p>I'll experiment tomorrow to see if that behaves well</p>",
        "id": 251628856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630530116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/Contribute.20a.20project/near/251580686\">said</a>:</p>\n<blockquote>\n<p>Should I public my repository here or somewhere?</p>\n</blockquote>\n<p>I would recommend making your repository public if you want to show off your work to anyone today; it will be much faster than waiting for every last line to make it into mathlib!  If you have a project created with <code>leanproject</code> on github, you can even follow the instructions <a href=\"https://leanprover-community.github.io/ci.html\">here</a> to have it tested against the latest mathlib.</p>",
        "id": 251708161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630586517
    },
    {
        "content": "<p>(it will also provide reviewers with context for what you plan to do with <code>is_sym</code> / <code>hadamard</code> etc, which is often useful)</p>",
        "id": 251708236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630586547
    },
    {
        "content": "<p>Sure.</p>",
        "id": 251728042,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630594305
    },
    {
        "content": "<p><a href=\"https://github.com/l534zhan/my_project\">https://github.com/l534zhan/my_project</a><br>\nThis is the link to my project. (I am still learning how to use GitHub properly...)</p>",
        "id": 251728640,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630594544
    },
    {
        "content": "<p>Lots of good stuff there, thanks! At a glance at <code>main1</code>, these look like two nice follow-up PR targets:</p>\n<ul>\n<li>A quick one about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.kronecker\">docs#matrix.kronecker</a>: <code>Kronecker.invertible_of_invertible</code>, <code>Kronecker.unit_of_unit</code>, <code>Kronecker.is_sym_of_is_sym</code></li>\n<li>The algebra morphism from the quaternions into 4x4 matrices, which you seem to have here: <a href=\"https://github.com/l534zhan/my_project/blob/febc91e76b7b00fe2517f258ca04d27b7f35fcf3/src/main2.lean#L1159-L1175\">https://github.com/l534zhan/my_project/blob/febc91e76b7b00fe2517f258ca04d27b7f35fcf3/src/main2.lean#L1159-L1175</a>. This would amount to constructing a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quaternion_algebra.basis\">docs#quaternion_algebra.basis</a> <code>R (-1) (-1)</code>out of those three matrices, but I think you already have proofs for all the fields it needs.</li>\n</ul>",
        "id": 251731765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630595692
    },
    {
        "content": "<p>Thanks for your suggestions, Eric. As I don't have a collaborator, I have to PR things myself bit by bit in my spare time.</p>",
        "id": 251735826,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630597293
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Hadamard_matrix.Hadamard_conjecture</span><span class=\"o\">:</span>\n<span class=\"bp\">âˆ€</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">,</span> <span class=\"bp\">âˆƒ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">I</span><span class=\"o\">],</span>\n<span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"bp\">âˆƒ</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">â„š</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Hadamard_matrix</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n<span class=\"n\">card</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- Here, `sorry` means if you ask me to prove this conjecture,</span>\n      <span class=\"c1\">-- then I have to apologize.</span>\n</code></pre></div>\n<p>this gave me a nice chuckle :)</p>",
        "id": 251740117,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1630598815
    },
    {
        "content": "<p>In future PRs, do I need to rewrite every non-finishing <code>simp</code>?</p>",
        "id": 251791601,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630619208
    },
    {
        "content": "<p>Yes. Maybe <a href=\"https://leanprover-community.github.io/contribute/style.html\">#style</a> mentions that? (Edit: no, it doesn't)</p>",
        "id": 251791773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630619311
    },
    {
        "content": "<p>Definitely. Nonterminal simps make for brittle code which is hard to maintain.</p>",
        "id": 251791797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630619332
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Si903nFQkqEyVW067as-IQss/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Si903nFQkqEyVW067as-IQss/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Si903nFQkqEyVW067as-IQss/image.png\"></a></div>",
        "id": 252016914,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630779172
    },
    {
        "content": "<p>Why can't I see the just now merged <code>symmetric.lean</code> in the documentation?</p>",
        "id": 252016939,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630779206
    },
    {
        "content": "<p>Give it a bit of time <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 252017038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630779291
    },
    {
        "content": "<p>I think the docs are regenerated once per day.</p>",
        "id": 252017042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630779300
    },
    {
        "content": "<p>I'll do another two PRs today (if I can)</p>",
        "id": 252017075,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1630779351
    },
    {
        "content": "<p>I think the docs are more like every 4 hours or so</p>",
        "id": 252017469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630779776
    },
    {
        "content": "<p>is there a tutorial for how to initialize a lean project</p>",
        "id": 252030654,
        "sender_full_name": "Lucas",
        "timestamp": 1630794687
    },
    {
        "content": "<p>I am trying to use leanpkg but it seems like something is missing. When I open the project in VS code, the infoview is continually loading and my computer heats up, even with hardly anything in the file</p>",
        "id": 252030766,
        "sender_full_name": "Lucas",
        "timestamp": 1630794791
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a></p>\n<p>If you use leanpkg but want to use mathlib then you will have to spend a couple of hours compiling mathlib (i.e. letting your computer heat up). Using <code>leanproject</code> avoids this.</p>",
        "id": 252030969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630795040
    },
    {
        "content": "<p>thanks, this is exactly what I was looking for</p>",
        "id": 252031140,
        "sender_full_name": "Lucas",
        "timestamp": 1630795238
    }
]