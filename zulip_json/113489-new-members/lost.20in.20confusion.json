[
    {
        "content": "<p>After some upgrade of mathlib, some of my code broke with an error message of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">hf</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">function.bijective</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">function.bijective</span> <span class=\"bp\">⇑?</span><span class=\"n\">m_5</span>\n</code></pre></div>\n<p>If I try to fill some implicit arguments, I get a different error, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can anybody help me guess what happens…</p>",
        "id": 306723143,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666981724
    },
    {
        "content": "<p>Possibly a universe issue?</p>",
        "id": 306723503,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666981821
    },
    {
        "content": "<p>do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> you can share?</p>",
        "id": 306723559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666981835
    },
    {
        "content": "<p>It's hard to give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, because this happens after many many files of sthing which is not yet in mathlib.</p>",
        "id": 306724373,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666982095
    },
    {
        "content": "<p>I guess I don't even know what <code>→ₑ[φ]</code> is notation for...</p>",
        "id": 306725067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666982313
    },
    {
        "content": "<p>I just tried to build a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> by introducing the notation and some sorry, but even there I have a problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_preprimitive</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"n\">φ</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_preprimitive_of_bijective_map_iff</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_preprimitive</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">is_preprimitive</span> <span class=\"n\">N</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 306725191,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666982362
    },
    {
        "content": "<p>On the <code>hf : function.bijective f</code>, Lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">function.bijective</span> <span class=\"n\">f</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_3</span> <span class=\"n\">u_4</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 306725357,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666982406
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_preprimitive</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"n\">φ</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">equivariant_map.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_preprimitive_of_bijective_map_iff</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_preprimitive</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">is_preprimitive</span> <span class=\"n\">N</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 306725558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666982476
    },
    {
        "content": "<p>you need to tell lean how it should think of terms of <code>α →ₑ[φ] β</code> as functions</p>",
        "id": 306725644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666982507
    },
    {
        "content": "<p>presumably using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fun_like\">docs#fun_like</a> is the right approach in this case.</p>",
        "id": 306725688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666982522
    },
    {
        "content": "<p>So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_preprimitive</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"n\">φ</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map.to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_preprimitive_of_bijective_map_iff</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_preprimitive</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">is_preprimitive</span> <span class=\"n\">N</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 306726069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666982645
    },
    {
        "content": "<p>Does that solve the original issue?</p>",
        "id": 306726224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666982700
    },
    {
        "content": "<p>I'm polishing my mwe, I hadn't copied enough…</p>",
        "id": 306728360,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666983407
    },
    {
        "content": "<p>This seems to replicate my issue (and bring no other…)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.alternating</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">is_preprimitive</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">pointwise</span> <span class=\"n\">classical</span>\n\n<span class=\"sd\">/-- The instance that makes the stabilizer of a set acting on that set -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mul_action.of_stabilizer</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">mul_action.stabilizer</span> <span class=\"n\">M</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">φ</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"n\">φ</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">M</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">β</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">equivariant_map</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">equivariant_map_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">):</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">equivariant_map.to_fun</span><span class=\"o\">⟩</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_preprimitive_of_bijective_map_iff</span>\n  <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_preprimitive</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"n\">is_preprimitive</span> <span class=\"n\">N</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stabilizer.is_preprimitive</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nontrivial</span><span class=\"o\">):</span>\n  <span class=\"n\">is_preprimitive</span> <span class=\"o\">(</span><span class=\"n\">mul_action.stabilizer</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">mul_action.stabilizer</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">mul_action.to_perm</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hφ</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→ₑ</span><span class=\"o\">[</span><span class=\"n\">φ</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">function.bijective_id</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_preprimitive_of_bijective_map_iff</span> <span class=\"n\">hφ</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306728599,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666983491
    },
    {
        "content": "<p>The problem appears at the very end,  Lean doesn't want to use <code>hf</code>…</p>",
        "id": 306728722,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666983535
    },
    {
        "content": "<p>I can get rid of the error by replacing <code>  rw is_preprimitive_of_bijective_map_iff hφ hf,</code> with <code>rw is_preprimitive_of_bijective_map_iff _ _ _ _ hφ hf,</code></p>",
        "id": 306729167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666983687
    },
    {
        "content": "<p>You're right. This shows that my <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> does not make the problem appear, while it appears in real life…</p>",
        "id": 306729835,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666983901
    },
    {
        "content": "<p>if you have your actual code in a branch of mathlib or some separate repo, you could share a link?</p>",
        "id": 306730545,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666984147
    },
    {
        "content": "<p>Yes, this is <a href=\"https://github.com/leanprover-community/mathlib/tree/acl-Wielandt\">branch#acl-Wielandt</a><br>\nThe problem is in alternating_iwasawa.lean<br>\nIt appears on line 350, and there are similar issues below.</p>",
        "id": 306732024,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666984725
    },
    {
        "content": "<p>I'm totally confused and so grateful for your help…</p>",
        "id": 306732052,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666984738
    },
    {
        "content": "<p>I got the branch and I'm trying to build that file now.</p>",
        "id": 306732742,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666985020
    },
    {
        "content": "<p>I'm getting <code>could not resolve import: mul_action_finset</code>. Is there a file missing?</p>",
        "id": 306733320,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666985243
    },
    {
        "content": "<p>Yes… I had forgotten to add this file to the <code>commit</code>…</p>",
        "id": 306733609,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666985362
    },
    {
        "content": "<p>it's not an issue for the error in question, I'm just wondering</p>",
        "id": 306733648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666985380
    },
    {
        "content": "<p>it looks like there might be a diamond.</p>",
        "id": 306734937,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666985867
    },
    {
        "content": "<p>I have moved the contentious lemma in another file, and I get different problems…</p>",
        "id": 306735040,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666985907
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">I1</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mul_action.to_has_smul</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">I2</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n    <span class=\"n\">has_smul.stabilizer</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">I1</span> <span class=\"bp\">=</span> <span class=\"n\">I2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- FAILS</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306735343,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986032
    },
    {
        "content": "<p>let me try to extract a minimal example</p>",
        "id": 306735379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986047
    },
    {
        "content": "<p>I might have defined twice this <code>has_smul</code> ?</p>",
        "id": 306736013,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666986303
    },
    {
        "content": "<p>no I think these are both in mathlib somewhere</p>",
        "id": 306736061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986323
    },
    {
        "content": "<p>oh maybe <code>has_smul.stabilizer</code> is not?</p>",
        "id": 306736163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986363
    },
    {
        "content": "<p>Ah! Yeah, this is from your file <code>jordan/for_mathlib/stabilizer</code></p>",
        "id": 306736330,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986425
    },
    {
        "content": "<p>Okay, so I think we understand the issue -- it's a diamond caused by this isntance</p>",
        "id": 306736401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986460
    },
    {
        "content": "<p>The reason that the <code>has_smul</code> instances are not defeq is because your version of <code>has_smul.stabilizer</code> uses pattern matching whereas mathlib's version uses projections. For example, if you change your definition to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The instance that makes the stabilizer of a set acting on that set -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_smul.stabilizer</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_smul</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">stabilizer</span> <span class=\"n\">G</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↥</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>then the <del>error</del> problematic diamond disappears.</p>\n<p>Of course, the correct solution is to just use mathlib's instance :)</p>",
        "id": 306737497,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666986914
    },
    {
        "content": "<p>hmmm actually I can't seem to find the action of the stabilizer of a set on the set itself. Is that something that was recently added to mathlib?</p>",
        "id": 306738531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666987246
    },
    {
        "content": "<p>Ah no it's not in mathlib! But the difference is caused by the internals of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_mul_action.mul_action\">docs#sub_mul_action.mul_action</a></p>",
        "id": 306738955,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666987378
    },
    {
        "content": "<p>again, it stems from the pattern-matching vs. projection issue</p>",
        "id": 306739007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666987397
    },
    {
        "content": "<p>I think there is a recent PR where I discussed adding stabilizer actions</p>",
        "id": 306748713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666990906
    },
    {
        "content": "<p>Annoyingly they don't generalize and we have to repeat them for every subobject</p>",
        "id": 306748799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666990926
    },
    {
        "content": "<p>Thank you so much !</p>",
        "id": 306749673,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1666991278
    },
    {
        "content": "<p>The discussion was <a href=\"https://github.com/leanprover-community/mathlib/pull/17086#issuecomment-1293833495\">https://github.com/leanprover-community/mathlib/pull/17086#issuecomment-1293833495</a></p>",
        "id": 306758305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666995104
    }
]