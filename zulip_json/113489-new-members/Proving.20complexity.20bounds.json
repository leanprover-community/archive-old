[
    {
        "content": "<p>I have a simple proof for an introductory computer science problem, which is simply showing that <code>f(n)=n^2</code> is little-oh of <code>g(n)=n^3</code> (since the limit as <code>n</code> tends to infinity of <code>f(n)/g(n)</code> is zero). However, I'm having trouble understanding how filters (and limits generally) work in Lean.</p>\n<p>So far, I think I've been able to state the problem as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_o</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">filter.at_top</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>(if I understand how asymptotics work. I chose to use integer exponents to be able to use <code>fpow</code>, but I don't know if that was the right move). I've also been able to do some manipulations to show that, when <code>n \\ne 0</code>, <code>f(n)/g(n)=1/(↑n)</code> (for <code>f g: nat -&gt; real</code>). How do I tie these together to show that the limit of <code>1/x</code> tends to zero, and that implies little oh?</p>",
        "id": 217843332,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1606278127
    },
    {
        "content": "<p>The result <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto.inv_tendsto_zero\">docs#tendsto.inv_tendsto_zero</a> (and the surrounding results) will be useful for this</p>",
        "id": 217844329,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606279761
    },
    {
        "content": "<p>Oh, didn't mean that one. It is this result: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_inv_at_top_zero\">docs#tendsto_inv_at_top_zero</a></p>",
        "id": 217844397,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606279850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20complexity.20bounds/near/217844397\">said</a>:</p>\n<blockquote>\n<p>Oh, didn't mean that one. It is this result: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_inv_at_top_zero\">docs#tendsto_inv_at_top_zero</a></p>\n</blockquote>\n<p>I'll take a look, thanks for the pointer!</p>",
        "id": 217845062,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1606280825
    },
    {
        "content": "<p>I guess now I'm a little confused by how to prove that the limit of f(n)/g(n) is the same as the limit of n^(-1). I shouldn't need to consider what actually happens at <code>n=0</code> since that's the entire point of a limit, but the following strategy does not work to show equivalence:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">f_div_g_eq_x_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">],</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">div_eq_mul_inv</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">inv_fpow</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fpow_neg_one</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fpow_mul</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">neg_three</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">neg_three</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">fpow_add</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">two_minus_three</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">two_minus_three</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- need to prove `\\u n \\ne 0`</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I could amend the lemma to be <code>\\forall (n \\ne 0)</code> (or similar), but I return to the issue of not knowing how to interface with the limit definition.</p>",
        "id": 217845536,
        "sender_full_name": "Meyer Zinn",
        "timestamp": 1606281551
    },
    {
        "content": "<ul>\n<li>About not knowing the interface: one way is to search for theorems (such as via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_congr\">https://leanprover-community.github.io/mathlib_docs/find/tendsto_congr</a>) using our <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> conventions and then browsing results near the ones that look useful.</li>\n<li>You should be able to use prove the equality for all <code>n</code>, since division by <code>0</code> is defined to be <code>0</code>. You could start the proof with <code>by_cases hn : n = 0</code> and <code>simp [hn]</code> can simplify the fractions away in the case that <code>n = 0</code>.</li>\n<li>There should also be a congruence lemma for <code>tendsto</code> that allows you to only show the equality for \"sufficiently large\" <code>n</code>. I couldn't find such a result myself, though, so maybe it doesn't exist yet.</li>\n</ul>",
        "id": 217847123,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606283433
    },
    {
        "content": "<p>It should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_congr'\">docs#filter.tendsto_congr'</a></p>",
        "id": 217849865,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1606287484
    },
    {
        "content": "<p>Oh and you might be interested by a result I proved in <a href=\"https://github.com/leanprover-community/mathlib/issues/4979\">#4979</a> : <a href=\"https://github.com/leanprover-community/mathlib/pull/4979/files#diff-7adbc7098d121dfb6c1742ffe2994f62b43d80d894716e85a8e9260d670d5d7cR45\">https://github.com/leanprover-community/mathlib/pull/4979/files#diff-7adbc7098d121dfb6c1742ffe2994f62b43d80d894716e85a8e9260d670d5d7cR45</a></p>",
        "id": 217854945,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1606292081
    }
]