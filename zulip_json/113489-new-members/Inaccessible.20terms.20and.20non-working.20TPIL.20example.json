[
    {
        "content": "<p>I'm continuing to read TPIL, now on Inaccessible terms. The first motivating example in the document throws errors for me. MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">image_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">imf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">image_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">image_of</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">image_of</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imf</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>If I understand correctly, the compiler doesn't know where the <code>a</code> comes from.</p>",
        "id": 199825211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591316870
    },
    {
        "content": "<p>Check whether <code>imf</code> actually takes two explicit arguments <code>f</code> and <code>a</code>. The default rules for implicit-ness of constructors changed recently.</p>",
        "id": 199825405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591317107
    },
    {
        "content": "<p>Yeah, looks like one of the recent community versions broke this example, since it works in the old web editor and in a local Lean 3.4.2 project.</p>",
        "id": 199825461,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591317165
    },
    {
        "content": "<p>This works (in Lean 3.15.0c):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">image_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">imf</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">image_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">image_of</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">image_of</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">imf</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 199825506,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591317242
    },
    {
        "content": "<p>I played around with it and got this working:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">image_of</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">inf</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">inf</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Should the TPIL document be edited?</p>",
        "id": 199825540,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591317281
    },
    {
        "content": "<p>I guess that's equivalent to Bryan's code.</p>",
        "id": 199825621,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1591317370
    },
    {
        "content": "<p>Sure, I think <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> is pretty receptive to PRs <a href=\"https://github.com/avigad/theorem_proving_in_lean\">here</a>.</p>",
        "id": 199825632,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591317399
    },
    {
        "content": "<p>Yeah, the problem is that TPIL is still running with Lean 3.4.2. <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I suppose I should update it to use the online community web editor? It shouldn't be too hard, but it will take me a few days to get to it.</p>",
        "id": 199827642,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1591319808
    }
]