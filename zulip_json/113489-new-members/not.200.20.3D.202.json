[
    {
        "content": "<p>Very embarrased to ask this, but I've searched the documentation for an hour and cannot find an answer to this very simple question. How does one prove a fact such as <code>\\not 0 = 2</code> for naturals?</p>",
        "id": 222577463,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1610544084
    },
    {
        "content": "<p><code>dec_trivial</code> will work for naturals, <code>by norm_num</code> works in general</p>",
        "id": 222577492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610544105
    },
    {
        "content": "<p>Or <code>two_ne_zero'</code> if you just want the exact theorem</p>",
        "id": 222577582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610544136
    },
    {
        "content": "<p>Great thanks. How come library_search does not seem to work for this?</p>",
        "id": 222578088,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1610544366
    },
    {
        "content": "<p>It may have to do with the fact that the lemma is <code>2 \\neq 0</code>.  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>as does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 222578388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610544507
    },
    {
        "content": "<p>Why would a <em>library</em> have a proof of <code>\\not 0 = 2</code>? Do you want it to have a proof that 2 is not 37? It's a finite library. This is the sort of thing you should prove with a <em>calculation</em> right?</p>",
        "id": 222580268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610545394
    },
    {
        "content": "<p>well, two is an important number</p>",
        "id": 222581419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610545882
    },
    {
        "content": "<p>One has to stop somewhere though. Is three an important number?</p>\n<p>My point is really that it's important to learn early on what one expects in a <em>library</em> and what one is expected to deal with using results in a library and tactics.</p>",
        "id": 222581947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610546104
    },
    {
        "content": "<p>Just for fun.  This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 222582138,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610546175
    },
    {
        "content": "<p>This <em>does</em> look like the library of Babel...</p>",
        "id": 222582204,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610546204
    },
    {
        "content": "<p>I think that we can prove by induction that <code>library_search</code> contains the proof of all lemmas <code>n.succ \\neq 0</code>.</p>",
        "id": 222582484,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610546316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/not.200.20.3D.202/near/222582138\">said</a>:</p>\n<blockquote>\n<p>Just for fun.  This also works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh yeah, I put that one in because I deemed it important. Wait -- what? What does <code>by show_term {library_search}</code> say?</p>",
        "id": 222583536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610546744
    },
    {
        "content": "<p>Oh -- is it using <code>succ_ne_zero</code>?</p>",
        "id": 222583552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610546758
    },
    {
        "content": "<p>Yes, this is what it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"mi\">36</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_zero</span>\n</code></pre></div>",
        "id": 222584476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610547184
    },
    {
        "content": "<p>I guess that this means that the library is finite in the sense that you can only check out a finite number of lemmas from it, but the number of lemmas that it contains is not finite...</p>",
        "id": 222584933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610547380
    },
    {
        "content": "<p>this is a lemma with a variable input so really it's a family of lemmas</p>",
        "id": 222585282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610547519
    },
    {
        "content": "<p>Maybe we should define flat families of lemmas...</p>",
        "id": 222585637,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610547666
    },
    {
        "content": "<p>I think they might all be flat</p>",
        "id": 222593216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610550378
    }
]