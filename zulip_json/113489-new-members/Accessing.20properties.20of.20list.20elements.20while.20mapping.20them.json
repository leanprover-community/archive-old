[
    {
        "content": "<p>I'm a bit stuck with the following problem.  I want to convert the list of prime factors of a nonzero natural number a, <code>a.factors : list ℕ</code>, into a list of primes, say <code>prime_factors a : list nat.primes</code>. The obvious way to do this seems to be to use <code>list.map</code> to convert the elements from type <code>ℕ</code> to type <code>nat.primes</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span> <span class=\"n\">a.factors</span>\n</code></pre></div>\n<p>Now the underscore needs to be a proof of the fact that <code>p</code> is a prime. I know that <code>p</code> is a prime, from</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">nat.mem_factors</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n</code></pre></div>\n<p>where <code>ha : a ≠ 0</code> and the underscore is a proof of <code>p ∈ a.factors</code>.</p>\n<p>Now my question is, how I can introduce this knowledge into the function I want to use in <code>list.map</code> above?</p>",
        "id": 275175354,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647205935
    },
    {
        "content": "<p>Or maybe a different approach should be used?</p>",
        "id": 275175786,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647206692
    },
    {
        "content": "<p>I think you need to find, or write, a function like <code>map</code> that gives you this as an assumption</p>",
        "id": 275176006,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647207023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/113489-new-members/topic/Accessing.20properties.20of.20list.20elements.20while.20mapping.20them/near/275175786\">said</a>:</p>\n<blockquote>\n<p>Or maybe a different approach should be used?</p>\n</blockquote>\n<p>I'm curious what you need a list of dosc#nat.primes for, its not used so much, people instead just tend to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime_of_mem_factors\">docs#nat.prime_of_mem_factors</a> when needed</p>",
        "id": 275176451,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1647207765
    },
    {
        "content": "<p>OK, maybe this is an XY problem. What I really would like to have is something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_factors_as_finset_of_primes</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">nat.primes</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>that gives me the prime factors of <code>a</code> as a <code>finset</code>. The idea was to first convert the <code>list</code> of factors to a list of primes and then to turn the <code>list</code> into a <code>finset</code>.</p>",
        "id": 275176865,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647208384
    },
    {
        "content": "<p>But in any case, there <em>should</em> be a reasonable way of changing the type of the list elements to a subtype if we know that all the elements satisfy the relevant property?</p>",
        "id": 275176890,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1647208440
    }
]