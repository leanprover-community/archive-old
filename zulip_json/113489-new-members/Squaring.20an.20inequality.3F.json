[
    {
        "content": "<p>As part of a larger proof, inverse hyperbolic trig, I have the following lemma. Basically I want to square both sides, but I don't think thats mathematically possible? Does lean have a little thing that makes this simpler?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">b_lt_sqrt_b_sq_add_one</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- I want to square this, but I don&#39;t think thats possible.</span>\n  <span class=\"c1\">-- then do linaarith</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207023468,
        "sender_full_name": "James Arthur",
        "timestamp": 1597500434
    },
    {
        "content": "<p>You want to find a lemma that says (under some side conditions) <code>a &lt; b &lt;-&gt; a^2 &lt; b^2</code> (or maybe <code>a*a &lt; b*b</code>)</p>",
        "id": 207023519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597500524
    },
    {
        "content": "<p>I've just found <code>apply mul_self_lt_mul_self_iff</code></p>",
        "id": 207023585,
        "sender_full_name": "James Arthur",
        "timestamp": 1597500704
    },
    {
        "content": "<p>However, my main lemma is <code>sinh_surjective</code> which just said <code>sinh</code> is surjective and thats not only for positives, the lemma is true for all x.</p>",
        "id": 207023656,
        "sender_full_name": "James Arthur",
        "timestamp": 1597500820
    },
    {
        "content": "<p>Then you should split into two cases b&lt;=0 and b&gt;0</p>",
        "id": 207024277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597501878
    },
    {
        "content": "<p>Thankyou, splitting seemed to be the answer</p>",
        "id": 207026176,
        "sender_full_name": "James Arthur",
        "timestamp": 1597505008
    },
    {
        "content": "<p><code>b \\le abs b = sqrt (b ^ 2) &lt; sqrt (b ^ 2 + 1)</code> is the answer <span class=\"user-mention\" data-user-id=\"304228\">@James Arthur</span></p>",
        "id": 207030571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597511708
    },
    {
        "content": "<p>For reference, here is the code that I ended up using: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">b_lt_sqrt_b_sq_add_one</span> <span class=\"o\">(</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sqrt</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sqrt_sqr</span> <span class=\"n\">hb</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sqrt_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">},</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_le</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_nonneg</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207031167,
        "sender_full_name": "James Arthur",
        "timestamp": 1597512736
    },
    {
        "content": "<p>with help from <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span></p>",
        "id": 207031180,
        "sender_full_name": "James Arthur",
        "timestamp": 1597512751
    }
]