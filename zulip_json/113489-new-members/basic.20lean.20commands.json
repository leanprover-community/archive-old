[
    {
        "content": "<p>hi, am trying to get more familiar with ⟨⟩ operator, I know it can be used for \"and.intro\",  but I can't get the reason of the x in ⟨x, h6, h5⟩ to show y ∈ f '' (A ∪ B),  why isn't ⟨h6, h5⟩ enough? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h.left</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h.right</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or.inl</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h6</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 215667475,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604546260
    },
    {
        "content": "<p><code>y ∈ f '' (A ∪ B)</code> unfolds to <code>∃ x, x ∈ A ∧ f x = y</code></p>",
        "id": 215667789,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604546697
    },
    {
        "content": "<p>So, <code>⟨x, h6, h5⟩</code> unfolds to something like <code>Exists.intro x (and.intro h6 h5)</code></p>",
        "id": 215667807,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604546747
    },
    {
        "content": "<p>ah, that makes sense, thx <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 215667904,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604546877
    },
    {
        "content": "<p>do you have any references to the ⟨⟩ syntax? it looks really nice in proofs and I wanted to get a better feel for it</p>",
        "id": 215667965,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604546945
    },
    {
        "content": "<p>If Lean knows the expected type of an expression and this type has exactly one constructor, then <code>⟨...⟩</code> applies this constructor.</p>",
        "id": 215668035,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604547014
    },
    {
        "content": "<p>that's really cool thanks</p>",
        "id": 215668056,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604547078
    },
    {
        "content": "<p>And you can write <code>⟨a, ⟨b, c⟩⟩</code> as <code>⟨a, b, c⟩</code>. Note that you can't write <code>⟨⟨a, b⟩, c⟩</code> as <code>⟨a, b, c⟩</code>.</p>",
        "id": 215668059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604547085
    },
    {
        "content": "<p>I linked to a few mentions of the angle bracket notation in #TPiL in <a href=\"#narrow/stream/113488-general/topic/angle.20brackets.20in.20tutorial.20is.20hard/near/203573921\">this thread</a>.</p>",
        "id": 215668139,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604547241
    },
    {
        "content": "<p>oh, that's really helpful <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 215668433,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604547646
    },
    {
        "content": "<p>i have been in leans Zulip community for a couple of weeks and I have to say that its a really great one, you guys are super helpful</p>",
        "id": 215668511,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604547757
    },
    {
        "content": "<p>thx again for all the help</p>",
        "id": 215668517,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604547776
    },
    {
        "content": "<p>and I hope soon enough I can help other around here hehehe</p>",
        "id": 215668542,
        "sender_full_name": "Pedro Castilho",
        "timestamp": 1604547840
    },
    {
        "content": "<p>Happy to have you around, Pedro!</p>",
        "id": 215668589,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604547869
    },
    {
        "content": "<p>I'm having doubts when prooving an example <a href=\"/user_uploads/3121/EZxTR4VdHQTEQ62JflyIu_5P/image.png\">image.png</a> <br>\nI used the \"assume x\" hoping to do a universal introduction (to prove ∀ (x : B), v1 x = v2 x and consequently v1 = v2), but it is not working and I can't figure why!<br>\nHere's the type mismatch notification lean gives me at this marked \"show\":<br>\n\"type mismatch at application<br>\n  (λ (this : ∀ (x : B), v1 x = v2 x), this) h<br>\nterm<br>\n  h<br>\nhas type<br>\n  v1 x = v2 x<br>\nbut is expected to have type<br>\n  ∀ (x : B), v1 x = v2 x\"</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EZxTR4VdHQTEQ62JflyIu_5P/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/EZxTR4VdHQTEQ62JflyIu_5P/image.png\"></a></div>",
        "id": 215794572,
        "sender_full_name": "Eduardo Vianna",
        "timestamp": 1604624781
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 215795304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604625329
    },
    {
        "content": "<p>You'll need to use function extensionality, which is funext.</p>",
        "id": 215795315,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604625341
    },
    {
        "content": "<p>brian is right, you need <code>funext $ assume x, ...</code> instead of <code>assume x, ...</code></p>",
        "id": 215795418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604625409
    },
    {
        "content": "<p>Here's a working proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">v1</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">right_inverse</span> <span class=\"n\">v2</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">v1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v2</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h2</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">v1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>By the way, it's much easier for us to help if you copy+paste a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>; screenshots are hard to work off of.</p>",
        "id": 215795583,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604625574
    }
]