[
    {
        "content": "<p>I'm somewhat puzzled by the following function definition: <code>def f: ℕ → ℕ  := fun n, arbitrary ℕ </code>. It seems to me that <code>f</code> is not actually a mathematical function. It takes a natural number as input and outputs, ... a term that has type <code>nat</code> but it's not an actual natural number. I'm tempted to say that mathematically speaking, this is an ill-defined function? Should I think of this as essentially \"using the axiom of choice\"?</p>",
        "id": 206102845,
        "sender_full_name": "Chris M",
        "timestamp": 1596686816
    },
    {
        "content": "<p>there is in fact a natural number in there</p>",
        "id": 206102920,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596686941
    },
    {
        "content": "<p>It just outputs the provided default for the <code>inhabited</code> typeclass on that type. For nat, the inhabited instance is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n</code></pre></div>\n\n\n<p>so <code>arbitrary ℕ = 0</code>.</p>",
        "id": 206102926,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596686947
    },
    {
        "content": "<p>Ohh I see. Does this hold for all <code>arbitrary ...</code>for some type at <code>...</code>?</p>",
        "id": 206103681,
        "sender_full_name": "Chris M",
        "timestamp": 1596688053
    },
    {
        "content": "<p>did you try going to the definition of arbitrary?</p>",
        "id": 206104444,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596689153
    },
    {
        "content": "<p>there's no magic going on anywhere</p>",
        "id": 206104482,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596689165
    },
    {
        "content": "<p>Shing Tak just unfolded the definition into an english sentence of comparable length</p>",
        "id": 206104499,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596689221
    },
    {
        "content": "<p>This should be contrasted with <code>def f: ℕ → ℕ  := fun n, @classical.choice ℕ _</code>, which is a function from nat to nat that we can prove is constant but for which we don't know the value</p>",
        "id": 206105429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596690558
    },
    {
        "content": "<p>Is it just me, but while <code>inhabited</code> is a great name, <code>arbitrary</code> is likely to lead to confusion (witness: this thread) ?</p>",
        "id": 206140867,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1596720766
    },
    {
        "content": "<p>i feel like <code>arbitrary</code> is well-named but needs a docstring. It's very close to the mathematician's \"arbitrary\".</p>",
        "id": 206143291,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596721882
    },
    {
        "content": "<p><code>arbitrary</code> is basically unused anyways</p>",
        "id": 206144140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596722284
    },
    {
        "content": "<p>at least, in mathlib</p>",
        "id": 206146426,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596723250
    },
    {
        "content": "<p>Since the class is called <code>inhabited</code>, maybe <code>inhabitant</code> or <code>some_inhabitant</code>?</p>",
        "id": 206149015,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1596724430
    },
    {
        "content": "<p>We used to have <code>arbitrary</code> in Isabelle with the same meaning as in Lean (except that it worked with all types, since all HOL types are inhabited). It was renamed <code>undefined</code>. I never felt this was much of an improvement.</p>",
        "id": 206149150,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1596724478
    },
    {
        "content": "<p>Is arbitrary even going to survive until Lean 4? I think where they are used - they can be replaced with meta constants.</p>",
        "id": 206149205,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1596724519
    },
    {
        "content": "<p>I actually had misremembered how this is set up</p>",
        "id": 206149473,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596724632
    },
    {
        "content": "<p><code>arbitrary</code> is basically an <code>irreducible</code> version of <code>default</code> which is the guy from <code>inhabited</code></p>",
        "id": 206149499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596724645
    },
    {
        "content": "<p>I always wondered why more <code>arbitrary</code> wasn't used in mathlib. It was supposed to be the canonical <code>37</code> for partial functions.</p>",
        "id": 206149722,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1596724745
    },
    {
        "content": "<p>obviously anything one can do with <code>arbitrary</code> one can also do with <code>default</code>, but <code>arbitrary</code> is making a promise to the reader that all you need is <em>some</em> inhabited instance, not any particular one</p>",
        "id": 206149823,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596724785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113489-new-members/topic/arbitrary.20nat.20as.20output/near/206149722\">said</a>:</p>\n<blockquote>\n<p>I always wondered why more <code>arbitrary</code> wasn't used in mathlib. It was supposed to be the canonical <code>37</code> for partial functions.</p>\n</blockquote>\n<p>If you're going to totalize, it's usually more useful to totalize in a convenient way (normally meaning by <code>0</code> and not by <code>37</code>)</p>",
        "id": 206150115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596724902
    },
    {
        "content": "<p>From a mathematician's perspective, <code>inhabited</code> ought to be called \"pointed\"</p>",
        "id": 206150328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596724985
    },
    {
        "content": "<p>or at least the definition of pointed would look exactly the same up to renaming</p>",
        "id": 206150425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596725029
    },
    {
        "content": "<p>pointed is great, but one assumes that if something is pointed, then homomorphisms preserve the given point.</p>\n<p>To use HoTT terminology, <code>arbitrary</code> does bring to mind a 'mere inhabitant'. That is indeed quite useful, as it corresponds nicely to the classical notion of inhabitation.</p>\n<p>In all my codes, I consider the use of having a <code>default</code> point a \"code smell\". I have indeed been working to remove that from one of my student's codes in the last week. (inhabited is ok, as I know I can't rely on that mere point in any ways; default is more dangerous, as downstream code has this way of assuming it means pointed when there is in fact no such guarantee). But that is what my experience tells me, I certainly wouldn't make that a hard rule, not without more evidence.</p>",
        "id": 206152056,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1596725739
    },
    {
        "content": "<p>And I guess the point is even when you're in a general setting like <code>option.iget</code> where you can't totalize by something like <code>0</code>, it's still more useful to pass on the option to know the default value is <code>0</code> to your client by using <code>default</code>, rather than using <code>arbitrary</code> which prevents anyone from knowing about the value</p>",
        "id": 206152064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596725744
    }
]