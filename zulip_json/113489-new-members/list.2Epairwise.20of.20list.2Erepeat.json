[
    {
        "content": "<p>Is there a builtin proof that <code>list.pairwise r (list.repeat x n)</code> is true if <code>r x x</code>?</p>",
        "id": 202099818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593182842
    },
    {
        "content": "<p>And if not, under what name would it be appropriate to define it in <code>data/list/pairwise.lean</code>?</p>",
        "id": 202100001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593182934
    },
    {
        "content": "<p>can you state the lemma formally?</p>",
        "id": 202100022,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182945
    },
    {
        "content": "<p>(the way i would try to answer this question is to state the lemma formally, try library_search, and then go read the file where <code>list.pairwise</code> is defined)</p>",
        "id": 202100093,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182988
    },
    {
        "content": "<p>also by builtin do you mean available in mathlib?</p>",
        "id": 202100155,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183007
    },
    {
        "content": "<p>Sure, let me try. I've already read through that file, and nothing jumps out as what I want.</p>\n<p>Yes, I mean mathlib.</p>",
        "id": 202100170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593183015
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise\">docs#list.pairwise</a></p>",
        "id": 202100259,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183078
    },
    {
        "content": "<p>the lemma doesn't sound mathematically useful</p>",
        "id": 202100426,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183169
    },
    {
        "content": "<p>why do you need it?</p>",
        "id": 202100437,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183173
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 202100443,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183175
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">pairwise_of_rep_is_reflexive</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202100457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593183183
    },
    {
        "content": "<p>I need it in order to construct a list subtyped to satisfy a pairwise predicate.</p>",
        "id": 202100612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593183253
    },
    {
        "content": "<p>it should be an easy list induction</p>",
        "id": 202100778,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183338
    },
    {
        "content": "<p>Too \"easy\" to have a place in mathlib?</p>",
        "id": 202100932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593183398
    },
    {
        "content": "<p>not sure yet</p>",
        "id": 202100982,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183425
    },
    {
        "content": "<p>i'm working on it but haven't finished</p>",
        "id": 202101013,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183439
    },
    {
        "content": "<p><code>library_search</code> finds nothing at any rate. I'll have a go at proving it myself, and then learn from your simpler proof!</p>",
        "id": 202101045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593183455
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 202101054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1593183462
    },
    {
        "content": "<p>Maybe just call it <code>pairwise_repeat</code>? I think the guidelines only suggest describing the hypotheses in the name if necessary for disambiguation.</p>",
        "id": 202101093,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593183480
    },
    {
        "content": "<p>I think this specific case would not deserve a name, probably one can prove an induction principle so that the proof of this is <code>new_induction_principle; simp</code></p>",
        "id": 202101148,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593183490
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pairwise</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pairwise</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pairwise</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_of_mem_repeat</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202101195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593183513
    },
    {
        "content": "<p>I suspect you don't even need induction.</p>",
        "id": 202101562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593183693
    },
    {
        "content": "<p>you always need induction</p>",
        "id": 202101712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593183755
    },
    {
        "content": "<p>somewhere</p>",
        "id": 202101724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593183766
    },
    {
        "content": "<p>you'll use a lemma which uses induction :-)</p>",
        "id": 202101744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593183777
    },
    {
        "content": "<p>Looks like the lemma I want to use doesn't quite exist though</p>",
        "id": 202102018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593183898
    },
    {
        "content": "<p>(forall a b in l, a r b) -&gt; pairwise l r</p>",
        "id": 202102135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593183946
    },
    {
        "content": "<p>You could prove it from <code>pairwise.imp_of_mem</code> but <code>pairwise.true</code> is missing too.</p>",
        "id": 202102316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593184015
    },
    {
        "content": "<p>do we know that <code>repeat x n</code> is <code>sorted</code>? this seems like a valid use case</p>",
        "id": 202102499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593184103
    },
    {
        "content": "<p>Yep, I think <code>sorted_repeat</code> or <code>repeat_sorted</code> exists</p>",
        "id": 202102554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593184139
    }
]