[
    {
        "content": "<p>Does <code>cache-olean --fetch</code> perform something equivalent to <code>git checkout .</code> as part of its work?</p>",
        "id": 183594681,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576532999
    },
    {
        "content": "<p>The problem here could well be a simple case of PEBKAC but I think I just lost a bunch of work by running <code>cache-olean --fetch</code> at the wrong time.</p>",
        "id": 183594783,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576533050
    },
    {
        "content": "<p>I don't think so. You can see the source here: <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/scripts/cache-olean.py\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/master/scripts/cache-olean.py\">https://github.com/leanprover-community/mathlib-tools/blob/master/scripts/cache-olean.py</a></p>",
        "id": 183595131,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576533271
    },
    {
        "content": "<p>It does do a little more with Git than I realized, but nothing that looks dangerous at a quick glance.</p>",
        "id": 183595186,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576533314
    },
    {
        "content": "<p>OK thanks, I did scan over that source and saw nothing suspicious. I'll see if I can reproduce the behaviour that I think occurred.</p>",
        "id": 183595208,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576533335
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/boMsGLIkdZ_WWRyp8gfI667G/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/boMsGLIkdZ_WWRyp8gfI667G/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/3121/boMsGLIkdZ_WWRyp8gfI667G/pasted_image.png\"></a></div>",
        "id": 183595408,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576533445
    },
    {
        "content": "<p>What the above is supposed to show is that <code>cache-olean --fetch</code> blew away the changes I had to the file <code>lie_algebra.lean</code>.</p>",
        "id": 183595514,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576533514
    },
    {
        "content": "<p>I'll scan over the script again to see if I can understand how this might be happening. (Still entirely possible, it's something weird I'm doing.)</p>",
        "id": 183595597,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576533570
    },
    {
        "content": "<p>I can't see it, and I'm in more of a mood to spend my few minutes trying to write some Lean than debugging some Python. I'll pick this up again at the weekend if it is still not resolved; I feel a bit bad for casting aspersions.</p>",
        "id": 183595991,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576533835
    },
    {
        "content": "<p>My only idea, are you using an old version of cache-olean that's maybe doing something different?</p>",
        "id": 183596213,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576533968
    },
    {
        "content": "<p>Hmm, I don't think that's it as I only started tinkering with Mathlib around about September, and indeed I see:</p>\n<div class=\"codehilite\"><pre><span></span>âžœ  mathlib git:(lean-3.4.2) ls -l /Users/olivernash/.mathlib/bin/cache-olean\n-rwxr-xr-x  1 olivernash  staff  4961 17 Sep 22:22 /Users/olivernash/.mathlib/bin/cache-olean\n</pre></div>\n\n\n<p>and the history on GitHub says the file last changed in May.</p>",
        "id": 183596368,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576534106
    },
    {
        "content": "<p>I just tried and couldn't reproduce this.</p>",
        "id": 183596372,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576534112
    },
    {
        "content": "<p>Weird, but also thank you!</p>",
        "id": 183596376,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576534121
    },
    {
        "content": "<p>Huh. I'm out of ideas then. Let us know if you figure out what's going on, having work erased by a rogue script is a nightmare.</p>",
        "id": 183596458,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576534204
    },
    {
        "content": "<p>Given that you cannot reproduce, and others are not complaining about this, I think this is my issue to debug.</p>",
        "id": 183596495,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576534206
    },
    {
        "content": "<p>I will report back here if/when I figure it out, hopefully at the weekend. In the meantime, I will rename this thread as I think it could mislead people.</p>",
        "id": 183596516,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576534242
    },
    {
        "content": "<p>I managed to find a few minutes to look into this again this evening, and I believe I now understand. Here is where <code>cache-olean --fetch</code> clobbers my local changes:</p>\n<div class=\"codehilite\"><pre><span></span>    with DelayedInterrupt([signal.SIGTERM, signal.SIGINT]):\n        ar = tarfile.open(os.path.join(mathlib_dir, asset.name))\n        ar.extractall(&#39;.&#39;)  # Specifically this line!\n        print(&quot;... successfully extracted olean archive.&quot;)\n</pre></div>\n\n\n<p>(<a href=\"https://github.com/leanprover-community/mathlib-tools/blob/f126b0df53a1769a02eb6c972e1d2c0574d4fb28/scripts/cache-olean.py#L73\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/f126b0df53a1769a02eb6c972e1d2c0574d4fb28/scripts/cache-olean.py#L73\">https://github.com/leanprover-community/mathlib-tools/blob/f126b0df53a1769a02eb6c972e1d2c0574d4fb28/scripts/cache-olean.py#L73</a>)</p>",
        "id": 183690602,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616163
    },
    {
        "content": "<p>The reason is that the tar file which it is unpacking contains not just all the <code>.olean</code> files but also all the <code>.lean</code> source files. So that means that if you have any unstaged changes to <code>.lean</code> files then they'll be blown away by this step, as happened to me.</p>",
        "id": 183690710,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616242
    },
    {
        "content": "<p>This is of course completely my fault but I wonder if it might be worth adding a warning to <code>cache-olean</code> to warn about this before proceeding? Maybe something along the lines of:</p>\n<div class=\"codehilite\"><pre><span></span>if repo.is_dirty():\n   x = input(&#39;You have a dirty repo, and might lose data if you proceed. Do you wish to continue? [N]&#39;)\n</pre></div>",
        "id": 183691084,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616468
    },
    {
        "content": "<p>This approach helps keep the relative time stamp of .lean / .olean files consistent. We could check the git status before expand the archive.</p>",
        "id": 183691092,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576616471
    },
    {
        "content": "<p>I would say that running <code>cache-olean</code> with unstaged (and unstashed) changes is asking for trouble.</p>",
        "id": 183691119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576616487
    },
    {
        "content": "<p>Yes, you can PR this</p>",
        "id": 183691125,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576616490
    },
    {
        "content": "<p>I'm all in favour of this approach, it makes total sense.</p>",
        "id": 183691126,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616490
    },
    {
        "content": "<p>Well I certainly found trouble <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> :)</p>",
        "id": 183691153,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616507
    },
    {
        "content": "<p>But of course a warning would be nicer.</p>",
        "id": 183691165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576616516
    },
    {
        "content": "<p>Thanks @Simon, I will PR that though ludicrously I have just used up my last scrap of free time for days so it will have to wait till the weekend!</p>",
        "id": 183691247,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616545
    },
    {
        "content": "<p>If you want, you can add a command line option to disable that check (or to turn an error into a warning)</p>",
        "id": 183691352,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576616608
    },
    {
        "content": "<p>Thanks, I'll make sure to do that.</p>",
        "id": 183691383,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576616628
    },
    {
        "content": "<p>Thanks a lot! That's a great improvement</p>",
        "id": 183691566,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576616756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I just created this PR for <code>mathlib-tools</code> in an attempt to address this issue.</p>",
        "id": 184015198,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1576943285
    },
    {
        "content": "<p>Thanks! I'll have a look</p>",
        "id": 184023195,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576957396
    }
]