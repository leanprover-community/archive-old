[
    {
        "content": "<p>I have an instanced of <code>decidable</code> for a given <code>Prop</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">has_no_rational_root_dec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>From <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#decidable-propositions\">here</a>,  I thought that I would then simply be able to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>  <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>to show that the square root of 2 is irrational (the appropriate infered typeclass is <code>has_no_rational_root_dec 2 2</code>).  However, I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">true</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can anyone advise on what I'm doing wrong? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 318391111,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672310012
    },
    {
        "content": "<p>Does your <code>decidable</code> instance use axioms? If you use LEM, for instance, this clearly can't work.</p>",
        "id": 318391561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672310181
    },
    {
        "content": "<p>Specifically, <code>has_no_rational_root_dec 2 2</code> needs to reduce to a constructor application</p>",
        "id": 318391597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672310194
    },
    {
        "content": "<p>A common mistake is not using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_of_iff\">docs#decidable_of_iff</a></p>",
        "id": 318391666,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672310224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Thank you for your advice!</p>\n<p>I have now eliminated any used of the <code>rw</code> tactic in all of the relevant <code>decidable</code> instances as well as anything that appears to be non-constructive. In particular, I had a use of <code>not_not.symm</code>, which I have now replaced with the use of <code>decidable.not_not</code>. </p>\n<p>The relevant <code>decidable</code> instances are now as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">neg_dec_of_dec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">inst</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable.not_not</span> <span class=\"n\">p</span> <span class=\"n\">inst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">inst</span> <span class=\"k\">with</span> <span class=\"n\">h'</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_true</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"n\">is_false</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">is_perfect_pow_dec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_perfect_pow</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">iff.symm</span> <span class=\"bp\">$</span> <span class=\"n\">is_pp_equiv_lemma</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_no_rational_root_dec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"n\">e</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span>\n        <span class=\"n\">rintros</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">eq.symm</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n      <span class=\"o\">(</span><span class=\"n\">rootn_not_pn_irr</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span>\n          <span class=\"bp\">@</span><span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span>\n            <span class=\"o\">(</span>\n              <span class=\"n\">neg_dec_of_dec</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_perfect_pow_dec</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n            <span class=\"o\">)</span>\n        <span class=\"o\">),</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>where in a particular:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">rootn_not_pn_irr</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">^</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_pp_equiv_lemma</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_perfect_pow</span> <span class=\"n\">n</span> <span class=\"n\">e</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">floor_root</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>However, despite these changes, the problem still persists...</p>",
        "id": 318399316,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672313193
    },
    {
        "content": "<p>And <code>floor_root</code>?</p>",
        "id": 318399594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672313323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yes sorry, the type of <code>floor_root</code> is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">floor_root</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 318399815,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672313406
    },
    {
        "content": "<p>It's okay to use axioms (like <code>propext</code>) inside the proof argument of <code>decidable_of_iff</code>--it's just the data part that needs to be able to reduce</p>",
        "id": 318399840,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672313411
    },
    {
        "content": "<p>Yes and does it reduce (e.g. <code>#reduce floor_root 2 2</code>)?</p>",
        "id": 318399899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672313436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  It appears that lean diverges when I run either of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#reduce</span> <span class=\"n\">floor_root</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">has_no_rational_root_dec</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>However if I run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">floor_root</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">has_no_rational_root_dec</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tt</span>\n</code></pre></div>\n<p>respectively, as expected.</p>",
        "id": 318400899,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672313870
    },
    {
        "content": "<p>and furthermore, if I run:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">has_no_rational_root_dec</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>I get <code>ff</code>. It appears to be working as expected.</p>",
        "id": 318401121,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672313984
    },
    {
        "content": "<p>Yeah <code>#eval</code> is more powerful.</p>",
        "id": 318401293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672314035
    },
    {
        "content": "<p>Can you give a MWE containing <code>floor_root</code>? (it doesn't seem to exist in mathlib)</p>",
        "id": 318401342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672314059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Of course, thanks for helping!</p>\n<p><code>floor_root</code>'s definition is a bit convoluted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">floor_root_helper</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n  <span class=\"k\">then</span> <span class=\"n\">m</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">floor_root_helper_termination_lemma</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">floor_root_helper</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">e</span><span class=\"o\">⟩]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">floor_root</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span>\n  <span class=\"k\">then</span> <span class=\"n\">floor_root_helper</span> <span class=\"n\">e</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n  <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>where in particular:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">floor_root_helper_termination_lemma</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span>  <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">→</span>\n    <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 318401802,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672314271
    },
    {
        "content": "<p>(Results provided by <code>#eval</code> aren't certified by the kernel)</p>",
        "id": 318401886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672314313
    },
    {
        "content": "<p>I think things defined by well-founded recursion just don't reduce</p>",
        "id": 318401946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672314333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I see, which I guess is probably helping it be more permissive here.</p>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I see, so the only solution here would be to find some definition of <code>floor_root</code> that works purely by structural induction? Out of curiosity, do you know why this is the case? It seems somehow surprising as the proof of well-foundedness is not required to compute the result of the function.</p>",
        "id": 318402583,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672314588
    },
    {
        "content": "<p>It is required though, because the definition is really by induction on that proof</p>",
        "id": 318402692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672314616
    },
    {
        "content": "<p>Or rather, it is required for the term to reduce</p>",
        "id": 318402715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672314631
    },
    {
        "content": "<p>Simpler <code>floor_root</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">floor_root'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"n\">floor_root'</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">floor_root</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">floor_root'</span> <span class=\"n\">e</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 318403347,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672314885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think I'm missing something here, my understanding is that the proofs of well-foundedness here are only needed to guarantee that the reduction will converge, other than this, due to <code>Prop</code> erasure, they have no run-time existence? I'm not so familar with the exact difference between <code>#eval</code> and <code>#reduce</code> in this context.</p>\n<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> Thank you very much, with this simpler definition of <code>floor_root</code> using structural induction, the <code>dec_trivial</code> tactic now works! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 318404098,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672315171
    },
    {
        "content": "<p><code>dec_trivial</code> isn't a tactic</p>",
        "id": 318404784,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672315407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Yup, my bad! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 318404908,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672315441
    },
    {
        "content": "<p>It works by reducing a decidability instance, so it is all happening in the kernel</p>",
        "id": 318404995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672315458
    },
    {
        "content": "<p>i.e., there is no \"run-time\"; everything is happening with terms</p>",
        "id": 318405026,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672315469
    },
    {
        "content": "<p>If you look at the term that comes out of a well-founded recursion proof (probably a bad idea in general) then it will be of the form <code>acc.rec</code> applied to the proof of accessibility</p>",
        "id": 318405219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672315539
    },
    {
        "content": "<p>In theory, this could still reduce if the proof of accessibility also reduces to constructors but I think Lean doesn't do this</p>",
        "id": 318405764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672315711
    },
    {
        "content": "<p>Technically, it is a tactic: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dec_trivial\">tactic#dec_trivial</a>. There is also term-mode <code>dec_trivial</code>, which is essentially <a href=\"https://leanprover-community.github.io/mathlib_docs/find/of_as_true\">docs#of_as_true</a>.</p>",
        "id": 318405830,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672315738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Understood, thanks for explaining this to me :) </p>\n<p>One last question if it's acceptable to go a little \"off-topic\", the instance <code>neg_dec_of_dec</code> above, it feels like there has to be a better way of doing that. Any suggestions? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 318406056,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672315809
    },
    {
        "content": "<p>I would think that it must already exist in mathlib...</p>",
        "id": 318406112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672315830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I would have thought so too, but have been able to find it, at least within mathlib3...</p>",
        "id": 318406305,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672315905
    },
    {
        "content": "<p>It should be called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not.decidable\">docs#not.decidable</a></p>",
        "id": 318406436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672315948
    },
    {
        "content": "<p>Bingo!</p>",
        "id": 318406527,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672315982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thanks, that's perfect, I could have sworn I tried <code>library_search</code> before trying to prove this manually, but apparently not!</p>",
        "id": 318407151,
        "sender_full_name": "Julian Sutherland",
        "timestamp": 1672316209
    },
    {
        "content": "<p><code>library_search</code> can be hit and miss with definitions. It's really designed for theorems.</p>",
        "id": 318419754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672320991
    },
    {
        "content": "<p>Did you try <code>library_search</code> before or after the <code>intros p inst</code> line? Introducing all variables before calling <code>library_search</code> helps a lot.</p>",
        "id": 318475427,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672342155
    }
]