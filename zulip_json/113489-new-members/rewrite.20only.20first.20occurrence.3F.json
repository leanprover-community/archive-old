[
    {
        "content": "<p>Hi all. In tactics mode, how do I say <code>rewrite th1 but please do it only on the first occurence k thx</code>? Thanks a lot</p>",
        "id": 181763874,
        "sender_full_name": "agro1986",
        "timestamp": 1574607357
    },
    {
        "content": "<p>you can do it with <code>conv</code>, but I would like to see a use case first</p>",
        "id": 181763944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607472
    },
    {
        "content": "<p>More concretely, I want to change <code>n = n + 1</code> into <code>n + 0 = n + 1</code>. If I use the proof <code>n = n + 0</code>, rw will change it into <code>n + 0 = n + 0 + 1</code> :(</p>",
        "id": 181763945,
        "sender_full_name": "agro1986",
        "timestamp": 1574607473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181764002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607538
    },
    {
        "content": "<p>it's not changing the first occurrence, but it is rewriting only on the lhs of the equality</p>",
        "id": 181764017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607574
    },
    {
        "content": "<p>which achieves the same effect</p>",
        "id": 181764018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks. What about the case where I want to change a hypothesis <code>h</code>, not the goal? In rw we say <code>rw th1 at h</code></p>",
        "id": 181764102,
        "sender_full_name": "agro1986",
        "timestamp": 1574607711
    },
    {
        "content": "<p><code>at h</code> still works</p>",
        "id": 181764145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181764152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607748
    },
    {
        "content": "<p>it goes on the <code>conv</code> because that's the part that figures out where to work</p>",
        "id": 181764157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607763
    },
    {
        "content": "<p>Ahh I see! I tried writing <code>at h</code> at the end of the sentence so it didn't work. Thanks a lot!</p>",
        "id": 181764171,
        "sender_full_name": "agro1986",
        "timestamp": 1574607800
    },
    {
        "content": "<p>if you mouse over the <code>conv</code> it should print <code>conv (at id)? (in expr)? { tactic }</code> which shows the correct order of use</p>",
        "id": 181764221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574607851
    },
    {
        "content": "<p>cool! I used it for solving this: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a></p>\n<div class=\"codehilite\"><pre><span></span>  rw ← add_one_eq_succ,\n  assume h,\n  conv at h {to_lhs, rw ← add_zero n},\n  have h2 := add_left_cancel _ _ _ h,\n  apply zero_ne_succ 0,\n  rw ← one_eq_succ_zero,\n  exact h2,\n</pre></div>",
        "id": 181764294,
        "sender_full_name": "agro1986",
        "timestamp": 1574607992
    },
    {
        "content": "<p>what's the theorem?</p>",
        "id": 181764527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574608410
    },
    {
        "content": "<p>the natural number game says what theorem you are proving just outside the text box, you need that if you want to quote the theorem outside the game (and some more besides that, depending on how advanced the theorem is, you might have your own definitions and such to rely on)</p>",
        "id": 181764602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574608513
    },
    {
        "content": "<p>it's always best to post complete examples here in chat so we can test your work</p>",
        "id": 181764613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574608540
    },
    {
        "content": "<p>Mario surely you can work out the theorem from the proof :-)</p>",
        "id": 181772229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574621168
    },
    {
        "content": "<p>Is that reverse mathematics?</p>",
        "id": 181772238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574621209
    },
    {
        "content": "<p>Hm, it's a bit complicated because you made up all the theorem names, but this prelude does the job:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_one_eq_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">add_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">add_left_cancel</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_ne_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"bp\">.</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">one_eq_succ_zero</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_one_eq_succ</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">n</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">add_left_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zero_ne_succ</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">one_eq_succ_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</pre></div>",
        "id": 181772974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574622330
    },
    {
        "content": "<p>and golfed:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_succ</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>the best tactic proof is a term proof :P</p>",
        "id": 181773125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574622548
    }
]