[
    {
        "content": "<p>I would like to apply the theorem <a href=\"https://leanprover-community.github.io/mathlib_docs/init/logic.html#forall_congr\"><code>forall_congr</code></a> on a hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">((</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">forall_congr</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ...</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>How would I turn the hypothesis <code>h</code> intro <code>(‚àÄ x, p x) ‚Üî (‚àÄ x, q x)</code>? Applying <code>forall_congr</code> as I do here, doesn't change anything.</p>",
        "id": 222570615,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610540001
    },
    {
        "content": "<p>I don't understand what happens with <code>rw forall_congr h at h</code>, but <code>forall_congr</code> itself is not an iff so you can't rewrite with it. Try <code>replace h := forall_congr h</code></p>",
        "id": 222571083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610540310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Thanks that worked! Is it also possible to apply the theorem in reverse? I.e. get <code>‚àÄ x, p x ‚Üî q x</code> from <code>(‚àÄ x, p x) ‚Üî (‚àÄ x, q x)</code>?</p>",
        "id": 222573966,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610542100
    },
    {
        "content": "<p>No, since it's not true</p>",
        "id": 222573978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610542112
    },
    {
        "content": "<p>Maybe <code>p</code> is false for some <code>x</code>, while <code>q</code> is false for others</p>",
        "id": 222573995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610542124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/.60forall_congr.60.20on.20hypothesis/near/222573978\">said</a>:</p>\n<blockquote>\n<p>No, since it's not true</p>\n</blockquote>\n<p>Oh right <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>üèº‚Äç‚ôÄÔ∏è</p>",
        "id": 222574017,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610542147
    }
]