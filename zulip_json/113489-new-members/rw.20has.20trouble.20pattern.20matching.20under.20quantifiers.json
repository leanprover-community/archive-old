[
    {
        "content": "<p>I've noticed that rw has trouble pattern matching under quantifiers. E.g. in this proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">):=</span>\n<span class=\"k\">begin</span>\n    <span class=\"c1\">--rw classical.not_implies_iff,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>the rewrite fails where: <code>theorem not_implies_iff {P Q : Prop} : ¬ (P → Q) ↔ P ∧ ¬ Q</code>.</p>\n<p>My guess is the it isn't interpreting <code>P x</code> and <code>Q x</code> as Props but as predicates, so it can't pattern match. But is there a way to get it to match? Perhaps I should just be using some fancy logic tactic?</p>\n<p>I know to get that rw we could first just <code>intro x</code>, but there are cases where this would be a bit annoying to do. It feels like there should be a better way to do this.</p>",
        "id": 197846625,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589718502
    },
    {
        "content": "<p>rw never works under binders, unfortunately.</p>",
        "id": 197846887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589718956
    },
    {
        "content": "<p>Ok thanks, good to know at least I'm not being stupid.</p>",
        "id": 197847030,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589719123
    },
    {
        "content": "<p>Isn't there some beefed up rewrite tactic which does do this?</p>",
        "id": 197847121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589719275
    },
    {
        "content": "<p>There's also <code>simp only [h]</code></p>",
        "id": 197847134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589719308
    }
]