[
    {
        "content": "<p>I want to prove this in a way that is easy to follow for someone taking a first class in analysis. In my mind, that means showing the intermediary goals in the sketch proof below. This doesn't compile because of coercion problems and I'm not sure how to make it work while still keeping a very explicit statement of what is intended. Help will be greatly appreciated.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_of_inj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span> <span class=\"c1\">--does not compile</span>\n   <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">bijective</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span> <span class=\"c1\">-- bijective version of f</span>\n   <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span> <span class=\"c1\">-- from h1</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- goal should follow from h2, h3</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202874080,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593869608
    },
    {
        "content": "<p>You're fighting type theory really hard here.</p>",
        "id": 202874352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593870116
    },
    {
        "content": "<p>If you want to prove this statement here is a better way to get started</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_of_inj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1B</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2B</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">range_factorization</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">coind_injective</span> <span class=\"bp\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">surjective_onto_range</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- goal should follow from h2, h3</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202874714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593870723
    },
    {
        "content": "<p>The nonempty hypotheses are unnecessary</p>",
        "id": 202874723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593870732
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <br>\nEven starting as you indicate, <code>h3</code> is still difficult to get. In the end I settled on the following, which I post here for completeness.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_of_inj</span>  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">inj_on</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">of_fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n   <span class=\"n\">exact</span> <span class=\"n\">finite_of_finite_image</span> <span class=\"n\">hf</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202883373,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593883557
    }
]