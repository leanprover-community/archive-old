[
    {
        "content": "<p>Why are submodules of a module a structure consisting of a set with properties of the set <br>\nrather than just a class of sets satisfying the properties?</p>",
        "id": 182294893,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575224488
    },
    {
        "content": "<p>because you want <code>(s : submodule R M)</code></p>",
        "id": 182294934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575224525
    },
    {
        "content": "<p>There are two ways of doing it -- they're called bundled or unbundled, and neither is perfect, but bundled is better (in Lean at least).</p>",
        "id": 182294936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575224565
    },
    {
        "content": "<p>Stuff like intersections etc all still work because you can make all the notation apply for submodules as well as subsets.</p>",
        "id": 182294945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575224623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  why do you not want membership instead?</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> are structures bundled or unbundled?</p>",
        "id": 182295062,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575224781
    },
    {
        "content": "<p>because <code>(s : set M) (hs : s \\in submodules R M)</code> is clumsy</p>",
        "id": 182295064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575224807
    },
    {
        "content": "<p>bundled means the set is a field of the structure, so submodules are currently bundled.</p>",
        "id": 182295065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575224811
    },
    {
        "content": "<p>It's harder to get your head around it at first, but once you do you'll see that it works really nicely.</p>",
        "id": 182295080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575224844
    },
    {
        "content": "<p>one advantage is that with <code>(s : submodule R M)</code> you can write <code>s.add_mem</code></p>",
        "id": 182295125,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575224905
    },
    {
        "content": "<p>For example given a map of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M\\to N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> you get maps <code>submodule R M -&gt; submodule R N</code> and <code>submodule R N -&gt; submodule R M</code></p>",
        "id": 182295127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575224909
    },
    {
        "content": "<p>Note in contrast that groups are unbundled -- we write <code>G : Type</code> then <code>_inst_1 : group G</code>.</p>",
        "id": 182295144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575224968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I don't follow. s is a subset of M and s is in a submodule of M?</p>",
        "id": 182295202,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575225033
    },
    {
        "content": "<p>s is a submodule of M</p>",
        "id": 182295203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575225055
    },
    {
        "content": "<p><code>s.add_mem</code> is <code>x \\in s \\to y \\in s \\to x + y \\in s</code></p>",
        "id": 182295210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575225063
    },
    {
        "content": "<p>If you didn't mean that then whatever you meant you will have <code>s : set M</code> and then another thing as well to indicate it's a submodule. With teh bundled approach it's just one term.</p>",
        "id": 182295215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225080
    },
    {
        "content": "<p>Type class inference works fine for <code>_inst_1 : group G</code> but it might be pushing it a bit too far to get submodules to work. I think they had enough trouble getting modules to work the way we wanted them to.</p>",
        "id": 182295262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225150
    },
    {
        "content": "<p>But enough about the disadvantages of the unbundled approach -- the point is that the bundled approach seems to work really nicely.</p>",
        "id": 182295270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225186
    },
    {
        "content": "<p>I think I see it, do you mean instead of writing <code>(s : set M) [submodule R s]</code>, you just write <code>(s : submodule R M)</code>?</p>",
        "id": 182295276,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575225216
    },
    {
        "content": "<p>Right.</p>",
        "id": 182295279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225225
    },
    {
        "content": "<p>and then there will probably be a coercion to the set, but you don't need it anyway because there will be a has_mem instance for elements of s.</p>",
        "id": 182295324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225265
    },
    {
        "content": "<p>similarly, if you want to intersect submodules, you have to first prove has_intersect instance?</p>",
        "id": 182295392,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575225427
    },
    {
        "content": "<p>I imagine that if you just try it, it will work.</p>",
        "id": 182295393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225450
    },
    {
        "content": "<p>Because <code>∩</code> is notation for <code>has_inter.inter</code> and the instance will be defined for you.</p>",
        "id": 182295435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225513
    },
    {
        "content": "<p>oh, perhaps this is not true?</p>",
        "id": 182295489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225609
    },
    {
        "content": "<p>Sorry, I meant when it was first defined in math lib, did someone have to prove it? <br>\ni.e. every time I define \"subobject\" of an object using structures, would I have to prove these has_inter, has_union etc ?</p>",
        "id": 182295498,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575225637
    },
    {
        "content": "<p>sure! But union of two submodules isn't a submodule in general.</p>",
        "id": 182295499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225650
    },
    {
        "content": "<p>Oh I remember</p>",
        "id": 182295500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225657
    },
    {
        "content": "<p>you should think of them as a lattice, so probably you have to use lattice notation.</p>",
        "id": 182295507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225670
    },
    {
        "content": "<blockquote>\n<p>sure! But union of two submodules isn't a submodule in general.</p>\n</blockquote>\n<p>yes, of course, sorry.</p>",
        "id": 182295565,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575225723
    },
    {
        "content": "<p>On the other hand you could just imagine the submodule generated by two submodules, and I bet that's what <code>\\lub</code> does</p>",
        "id": 182295573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"n\">B</span> <span class=\"c1\">-- fails</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">⊓</span> <span class=\"n\">B</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 182295582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225771
    },
    {
        "content": "<p>then does it make sense to ask whether two submodules are equal?</p>",
        "id": 182295640,
        "sender_full_name": "Ken Lee",
        "timestamp": 1575225872
    },
    {
        "content": "<p>There is a whole theory of general types with &lt;= (inclusion, in this case) and <code>⊓</code> (intersection, in this case), called lattice theory. Lattice is an overused word and to make matters worse mathematicians hardly ever use it in this context. But submodules form a lattice.</p>",
        "id": 182295641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225894
    },
    {
        "content": "<blockquote>\n<p>then does it make sense to ask whether two submodules are equal?</p>\n</blockquote>\n<p>Probably there is an extensionality lemma saying that two submodules are equal iff the underlying sets are equal.</p>",
        "id": 182295656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575225924
    },
    {
        "content": "<p>If you want to learn how to use modules then because of <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> 's documentation push you will find that the first 50 lines of linear_algebra/basic.lean might be of some use to you!</p>",
        "id": 182295719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575226013
    },
    {
        "content": "<p>oh wow, submodules are even a complete lattice. I think that's one of the best kinds of lattice.</p>",
        "id": 182295782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575226138
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/177ccedb21ca423105081e4a20778a34f3ee356f/src/linear_algebra/basic.lean#L405\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/177ccedb21ca423105081e4a20778a34f3ee356f/src/linear_algebra/basic.lean#L405\">https://github.com/leanprover-community/mathlib/blob/177ccedb21ca423105081e4a20778a34f3ee356f/src/linear_algebra/basic.lean#L405</a></p>\n<p>Not only that, just afterwards they're proved to be an <code>add_comm_monoid</code>, which will mean that you will be able to add them up too.</p>",
        "id": 182295858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575226218
    },
    {
        "content": "<p>I am slightly surprised that there's not just some general piece of nonsense which gives you add comm monoids from certain kinds of lattices. But anyway the moral is that you should use lattice notation when working with submodules, i.e. <code>≤</code> not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\subseteq</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">⊆</span></span></span></span> and <code>⊓</code> not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∩</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∩</span></span></span></span>.</p>",
        "id": 182295926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575226325
    },
    {
        "content": "<p>and you have 1800 lines of lemmas in linear_algebra.basic to help you along your way.</p>",
        "id": 182295939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575226384
    },
    {
        "content": "<blockquote>\n<p>There is a whole theory of general types with &lt;= (inclusion, in this case) and <code>⊓</code> (intersection, in this case), called lattice theory. Lattice is an overused word and to make matters worse mathematicians hardly ever use it in this context. But submodules form a lattice.</p>\n</blockquote>\n<p>To make it worse, \"complete lattice\" means something completely different in Neukirch</p>",
        "id": 182296618,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575227555
    },
    {
        "content": "<p>a lattice is a discrete subgroup of R^n and a complete lattice is one whose R-span is R^n</p>",
        "id": 182296626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1575227576
    }
]