[
    {
        "content": "<p>I'm trying to do a simple proof that says that there exists a number t such that [3,1,4], [2,-3,5], [5,9,t] is not linearly independent in R3. I'm framing the problem as below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">14</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">22</span><span class=\"o\">,</span> <span class=\"mi\">7</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>basically, I just want it to subsitute these numbers into <code>t, a, b, c</code> and show that the results are equal. <code>simp</code> sort of helps, it does the smul and addition, but doesn't resolve the proof and leaves stuff in this weird form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">22</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">22</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">22</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">7</span> <span class=\"bp\">*</span> <span class=\"mi\">14</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Then, linarith throws an error. How can I get this to properly simplify and close the goal? It's just basic algebra to show these are the same thing</p>",
        "id": 290699501,
        "sender_full_name": "David Chanin",
        "timestamp": 1658696315
    },
    {
        "content": "<p>does <code>ext x</code> help?</p>",
        "id": 290699534,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658696374
    },
    {
        "content": "<p>after the <code>use</code>, before the <code>simp</code></p>",
        "id": 290699535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658696382
    },
    {
        "content": "<p>and maybe <code>norm_num</code> is the right thing</p>",
        "id": 290699539,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658696391
    },
    {
        "content": "<p>aah norm_num did it! Thanks so much!</p>",
        "id": 290699613,
        "sender_full_name": "David Chanin",
        "timestamp": 1658696461
    },
    {
        "content": "<p><code>congr' 1, {sorry}, congr' 1, { sorry }</code> I think would let you equate each component separately, in case that's helpful</p>",
        "id": 290699781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658696738
    },
    {
        "content": "<p>shouldn't we prefer <code>interval_cases x</code>?</p>",
        "id": 290699854,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658696855
    },
    {
        "content": "<p>ah doing <code>congr' 1 { ... }</code>3 times also works! That's  handy to know</p>",
        "id": 290700450,
        "sender_full_name": "David Chanin",
        "timestamp": 1658697663
    },
    {
        "content": "<p>how would <code>interval_cases</code> work here?</p>",
        "id": 290700463,
        "sender_full_name": "David Chanin",
        "timestamp": 1658697692
    },
    {
        "content": "<p>( I also realized I had a mistake in the previous post, the correct values are as follows):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290700513,
        "sender_full_name": "David Chanin",
        "timestamp": 1658697727
    },
    {
        "content": "<p>sorry, I meant <code>fin_cases</code>!</p>",
        "id": 290700877,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658698292
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    3 goals</span>\n<span class=\"cm\">  ⊢ (3 • ![3, 1, 4] + (-2) • ![2, -3, 5]) 0 = (1 • ![5, 9, 2]) 0</span>\n<span class=\"cm\">  ⊢ (3 • ![3, 1, 4] + (-2) • ![2, -3, 5]) 1 = (1 • ![5, 9, 2]) 1</span>\n<span class=\"cm\">  ⊢ (3 • ![3, 1, 4] + (-2) • ![2, -3, 5]) 2 = (1 • ![5, 9, 2]) 2</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290700878,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658698293
    },
    {
        "content": "<p>Why not use all zeros? Or maybe the question is about tactics, rather than proving this exact statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 290700944,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658698378
    },
    {
        "content": "<p>Ah that's a good point, I should add a constraint that a, b, and c can't be 0 too since that would also be a valid solution as I wrote it</p>",
        "id": 290701036,
        "sender_full_name": "David Chanin",
        "timestamp": 1658698496
    },
    {
        "content": "<p>Alternatively, you could just drop <code>c</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 290701198,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1658698737
    },
    {
        "content": "<p>Good call, that's even cleaner!</p>",
        "id": 290701218,
        "sender_full_name": "David Chanin",
        "timestamp": 1658698762
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent\">docs#linear_independent</a>? Perhaps you already stated your problem that way and reduced it to the case above</p>",
        "id": 290702365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658700443
    },
    {
        "content": "<p>That would probably be a smarter approach. I don't really understand how to use <code>linear_independent</code> though.  How would I frame this problem in terms of using that term?</p>",
        "id": 290702740,
        "sender_full_name": "David Chanin",
        "timestamp": 1658700977
    },
    {
        "content": "<p>I think <code>∃ t : ℝ, ¬linear_independent ℝ ![![3, 1, 4], ![2, -3, 5], ![5, 9, t]]</code> is the correct statement</p>",
        "id": 290703583,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658702305
    },
    {
        "content": "<p>ah ok, I'll see if I can figure out the proof that way, it does look a lot more legit</p>",
        "id": 290705249,
        "sender_full_name": "David Chanin",
        "timestamp": 1658704785
    },
    {
        "content": "<p>I imagine it will be more work to prove not less</p>",
        "id": 290705324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658704884
    },
    {
        "content": "<p>If you simplify with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a> that should reduce it easily to the previous proof</p>",
        "id": 290706851,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658707358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_independent</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fintype.not_linear_independent_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">matrix.smul_cons</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">fintype.univ_of_subsingleton</span><span class=\"o\">,</span>\n      <span class=\"n\">matrix.cons_val_fin_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_const</span><span class=\"o\">,</span> <span class=\"n\">finset.card_singleton</span><span class=\"o\">,</span> <span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_add_cons</span><span class=\"o\">,</span> <span class=\"n\">matrix.cons_eq_zero_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">],</span> <span class=\"c1\">-- found with `squeeze_simp [fin.sum_univ_succ]`</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290707016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658707598
    },
    {
        "content": "<p>Adam, if you add the import <code>import algebra.big_operators.norm_num</code> then <code>norm_num</code> does all of the first case :)</p>",
        "id": 290707367,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658708218
    }
]