[
    {
        "content": "<p>I am attempting to prove P → Q → P from just the ideas introduced at the beginning of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#propositions-as-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#propositions-as-types\">Section 3.1 of Theorem Proving in Lean</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">Proof</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">modus_ponens</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">implies_intro</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</pre></div>\n\n\n<p>As an easier start, I think I can prove <code>P → P</code> as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">implies_intro</span> <span class=\"n\">P</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am not certain that this is right though. It means there is a sort of built in axiom that Proof P → Proof P?</p>\n<p>In attempting to prove P → Q → P, I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">implies_intro</span> <span class=\"n\">Q</span> <span class=\"n\">P</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">implies_intro</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">Q</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but I am struggling to put these together.</p>",
        "id": 160971190,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552776067
    },
    {
        "content": "<p>So you are intentionally not conflating <code>Proof P</code> with <code>P</code>?</p>",
        "id": 160972298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552778077
    },
    {
        "content": "<p>Yes.</p>",
        "id": 160972321,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552778108
    },
    {
        "content": "<p>A function <code>Proof P -&gt; Proof P</code> would be <code>id</code></p>",
        "id": 160972322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552778112
    },
    {
        "content": "<p>I am not an expert in this sort of nonsense, but I would imagine that you have to be extremely careful to distinguish between the <code>-&gt;</code> arrow and the <code>implies</code> arrow if you are doing it like this.</p>",
        "id": 160972406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552778268
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">prelude</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"kt\">Prop</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"kn\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"err\">$</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">Proof</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">modus_ponens</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">implies_intro</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">Q</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">implies_intro</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">implies_intro</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 160972458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552778318
    },
    {
        "content": "<p>Thank you. I don't think I'm familiar with <code>prelude</code>, <code>notation</code> and <code>noncomputable</code>.</p>",
        "id": 160972755,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552778774
    },
    {
        "content": "<p>just ignore those things</p>",
        "id": 160972834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552778952
    },
    {
        "content": "<p>Can it be done without them?</p>",
        "id": 160972840,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552778985
    },
    {
        "content": "<p>I mean, what is your current code?</p>",
        "id": 160972913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779069
    },
    {
        "content": "<p>because what you wrote at the beginning doesn't compile</p>",
        "id": 160972917,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779086
    },
    {
        "content": "<p>it complains that there is already a definition of \"implies\"</p>",
        "id": 160972919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779098
    },
    {
        "content": "<p>I have what I posted wrapped in a namespace.</p>",
        "id": 160972982,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552779187
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">section_3_1</span>\n<span class=\"kn\">constant</span> <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">Proof</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">modus_ponens</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">implies_intro</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">end</span> <span class=\"n\">section_3_1</span>\n</pre></div>",
        "id": 160972987,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552779226
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">section_3_1</span>\n<span class=\"kn\">constant</span> <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">Proof</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">modus_ponens</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">implies_intro</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">Q</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">implies_intro</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">implies_intro</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span>\n<span class=\"kn\">end</span> <span class=\"n\">section_3_1</span>\n</pre></div>",
        "id": 160973036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779266
    },
    {
        "content": "<p>What do the dollar signs denote?</p>",
        "id": 160973056,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552779313
    },
    {
        "content": "<p>it denotes a bracket to the right</p>",
        "id": 160973131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">Q</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">implies_intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">implies_intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 160973174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779489
    },
    {
        "content": "<p>is equivalent</p>",
        "id": 160973176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779492
    },
    {
        "content": "<p>Sorry, if you don't mind, what would it look like without the implicit arguments?</p>",
        "id": 160973321,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552779800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">section_3_1</span>\n<span class=\"kn\">constant</span> <span class=\"n\">implies</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">Proof</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">modus_ponens</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">implies_intro</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Proof</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">Proof</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">Q</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">implies_intro</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">implies</span> <span class=\"n\">Q</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">implies_intro</span> <span class=\"n\">Q</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span> <span class=\"n\">section_3_1</span>\n</pre></div>",
        "id": 160973383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552779893
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 160973469,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1552780048
    }
]