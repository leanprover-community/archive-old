[
    {
        "content": "<p>Hi - is there any way around this? It would be nice for the lemma statement to be as shown instead of <code>r.r x x</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">refl_rel</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">refl_rel</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">refl&#39;</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">refl_rel</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"> invalid binary relation declaration,</span>\n<span class=\"cm\">   relation &#39;coe_fn&#39; must have two explicit parameters -/</span>\n</pre></div>",
        "id": 180764342,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1573759328
    },
    {
        "content": "<p>I'm afraid that is an inherent limitation of the <code>refl</code> tactic: it just looks at the head symbol of the expression to determine which reflexivity lemma to apply. You'll have to do with writing <code>apply refl'</code> or similar.</p>",
        "id": 180795143,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1573782222
    },
    {
        "content": "<p>If you want a 4-letter tactic to solve goals like that, you can tag it with <code>@[simp]</code>, then <code>simp</code> will solve it ;)</p>",
        "id": 180795184,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1573782243
    }
]