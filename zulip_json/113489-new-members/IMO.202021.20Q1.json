[
    {
        "content": "<p>Hello all! As a small project, I have formalised the solution to IMO 2021 Q1. Here is the code for the solution : <a href=\"https://gist.github.com/MantasBaksys/5db553021d417b62f33a8c821581498f\">https://gist.github.com/MantasBaksys/5db553021d417b62f33a8c821581498f</a>. Would this be worth PR'ing? For context, I have never contributed to mathlib and I'm sure my code can be significantly improved <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 247146091,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1627247831
    },
    {
        "content": "<p>Do you have the <code>mathlib</code> access? Regardless, yes — we usually store IMO problems in the \"archive\" section. I'll definitely give it a bigger review then, but it's worth cleaning up a little before PRing — stuff in <code>archive</code> tends to be \"as well documented and clear as possible\". </p>\n<p>Some of the things that jump out at me right now is that mathlib style doesn't give either of <code>{ }</code> their own lines, and uses a bit more indentation; and also I'd encourage it to give more detail about what your solution actually does!</p>",
        "id": 247146608,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627248601
    },
    {
        "content": "<p>oh, and another thing - usally operators in mathlib are typset with spaces around them consistently, so instead of <code>(43*x)+123/3</code>, we'd tend to write <code>(43 * x) + 123 / 3</code>. (even powers!)</p>",
        "id": 247146771,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627248785
    },
    {
        "content": "<p>oh, and instead <code>lemma blah : ∀ (n : ℤ) (hn : p n), asdf</code>, we'd also tend to write <code>lemma blah (n : ℤ) (hn : p n) : asdf</code>; these should keep you busy whilst maintainers give you PR access</p>",
        "id": 247146855,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627248911
    },
    {
        "content": "<p>instead of using <code>split</code> so much, you could also consider <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#refine\">tactic#refine</a> and anonymous constructors (the <code>⟨⟩</code> things you may have seen)</p>",
        "id": 247147001,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627249100
    },
    {
        "content": "<p>Thanks for your reply <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>. I do not have mathlib access yet and my Github username is <code>MantasBaksys</code>. I will keep busy improving my code, as you have suggested  in the meantime <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>.</p>",
        "id": 247147082,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1627249241
    },
    {
        "content": "<p>(I've just sent you an invite: <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a> )</p>",
        "id": 247148788,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1627251902
    },
    {
        "content": "<p>Thanks for the invite, I have accepted it and was trying to make my first PR, following the steps in this video : <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;ab_channel=leanprovercommunity\">https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;ab_channel=leanprovercommunity</a>. However, after pushing, the pop-up window crashed and calling <code>git push</code> again results in nothing. Is there a manual way to authenticate Github? Sorry if this is very dumb, I'm very new to Github <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;ab_channel=leanprovercommunity\"><img src=\"https://uploads.zulipusercontent.net/ae6a5158c3c3f73f7cadb724ecaee86e98129753/68747470733a2f2f692e7974696d672e636f6d2f76692f426e633877396c786538412f64656661756c742e6a7067\"></a></div>",
        "id": 247152978,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1627259385
    },
    {
        "content": "<p>I can't help with your git issues, I usually use it from the command line. But here's a golf of your first lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lower_bound</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sqrt_le_iff.1</span> <span class=\"n\">h₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">push_cast</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247169297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627282861
    }
]