[
    {
        "content": "<p>Why does <code>not_linear_independent_iff</code> not work here? I am getting <code>invalid rewrite tactic, failed to synthesize type class instance for  fintype ι</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">i1</span> <span class=\"o\">:</span> <span class=\"n\">ι</span>\n<span class=\"bp\">|</span> <span class=\"n\">i2</span> <span class=\"o\">:</span> <span class=\"n\">ι</span>\n<span class=\"bp\">|</span> <span class=\"n\">i3</span> <span class=\"o\">:</span> <span class=\"n\">ι</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ι.cases_on</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.not_linear_independent_iff</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- use [{2,3,-2}, λ x, x],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284307474,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653861268
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.not_linear_independent_iff\">docs#fintype.not_linear_independent_iff</a></p>",
        "id": 284307489,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653861322
    },
    {
        "content": "<p>Do I need to prove that <code>ι : fintype</code>? How would I do that?</p>",
        "id": 284307795,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653861724
    },
    {
        "content": "<p>Add <code>@[derive fintype]</code> before the inductive</p>",
        "id": 284307814,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653861775
    },
    {
        "content": "<p>That said, if you want to do explicit vector matrix calculations like this I'd recommend the things in <a href=\"https://tqft.net/mathlib/data/matrix/notation\">file#data/matrix/notation</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">]]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">linear_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.not_linear_independent_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">ind</span><span class=\"o\">],</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284308175,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1653862436
    },
    {
        "content": "<p>You are a wizard, Alex. Thank you!</p>",
        "id": 284308939,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653863671
    },
    {
        "content": "<p>Actually, could you explain how <code>linear_independent ℝ (ind t)</code> works? Don't I need <code>ind t</code> to be of type <code>ι → ℝ × ℝ × ℝ</code> for some type <code>ι</code>? But its type is <code>fin 1.succ.succ → fin 1.succ.succ → ℝ</code>.</p>",
        "id": 284309402,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653864443
    },
    {
        "content": "<p>They're not equal, but to mathlib<code>ℝ × ℝ × ℝ</code> is isomorphic to <code>fin 3 → ℝ</code> in almost every way.</p>",
        "id": 284309685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653864882
    },
    {
        "content": "<p>Which in this case, means the vector space structure on both is the obvious one</p>",
        "id": 284309700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653864906
    },
    {
        "content": "<p>I see. Thank you!<br>\nWould you mind also explaining why this does not work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>   <span class=\"o\">:=</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"c1\">-- ill-formed match/equation expression</span>\n</code></pre></div>\n<p>I need this to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_indep</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">w</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284310281,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1653865677
    },
    {
        "content": "<p>It doesn't work because <code>fin</code> is not defined inductively in that way</p>",
        "id": 284312373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653869246
    },
    {
        "content": "<p>But <code>insert</code> already exists (twice!) anyway, as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_cons\">docs#matrix.vec_cons</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.cons\">docs#fin.cons</a></p>",
        "id": 284312378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653869263
    }
]