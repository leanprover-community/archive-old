[
    {
        "content": "<p>Lean interprets \"bare numerals\" as belonging to <code>nat</code>, but you need <code>int</code> here.</p>",
        "id": 253522051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631761910
    },
    {
        "content": "<p>Writing <code>rw [show (ite i.p (1 : ℤ) 0) = (ite (¬j.p) 1 0), by congr; exact h₀],</code> works</p>",
        "id": 253522114,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631761937
    },
    {
        "content": "<p>argh the problem was with the independent type?</p>",
        "id": 253522187,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631762012
    },
    {
        "content": "<p>wow thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>!</p>",
        "id": 253522203,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631762030
    },
    {
        "content": "<p>This works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">[¬P] = 1 - [P]</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_is_one_minus</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">Iverson</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i.p</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i.z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j.z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i.invariant</span><span class=\"o\">,</span> <span class=\"n\">j.invariant</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"n\">i.p</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">j.p</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h₀</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ite_not</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j.p</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 253523569,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1631763118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"440832\">Joshua E Cook</span> has marked this topic as resolved.</p>",
        "id": 253523620,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631763137
    }
]