[
    {
        "content": "<p>Why does this fail, and how to fix it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">show_p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n  <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">show_q_or_r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>  <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">((</span><span class=\"n\">show_p</span> <span class=\"n\">h</span> <span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">show_q_or_r</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 184244701,
        "sender_full_name": "Iocta",
        "timestamp": 1577337546
    },
    {
        "content": "<p>the last line should be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">show_p</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">show_q_or_r</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 184246794,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577341897
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 184246796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577341912
    },
    {
        "content": "<p><code>and.intro</code> is a function that takes a proof of <code>a</code> and a proof of <code>b</code> and gives a proof of <code>a ∧ b</code></p>",
        "id": 184246840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577341938
    },
    {
        "content": "<p><code>show_p h</code> is the first input</p>",
        "id": 184246841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577341947
    },
    {
        "content": "<p><code>show_q_or_r h</code> is the second input</p>",
        "id": 184246842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577341953
    },
    {
        "content": "<p>Thanks</p>",
        "id": 184249545,
        "sender_full_name": "Iocta",
        "timestamp": 1577347054
    },
    {
        "content": "<p>Hm it's not quite that? Doesn't compile.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">show_p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n  <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n<span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">show_q_or_r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>  <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">show_p</span> <span class=\"n\">h</span> <span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">show_q_or_r</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 184280004,
        "sender_full_name": "Iocta",
        "timestamp": 1577390398
    },
    {
        "content": "<p>How do you declare your variables p, q and r?</p>",
        "id": 184280088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577390486
    },
    {
        "content": "<p>You seem to use them implicitly, hence they should appear between curly brackets.</p>",
        "id": 184280103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577390517
    },
    {
        "content": "<p>I have <code>variables p q r : Prop</code> at the top of the page.</p>",
        "id": 184280185,
        "sender_full_name": "Iocta",
        "timestamp": 1577390627
    },
    {
        "content": "<p>This defaults to regular parentheses, hence explicit arguments.</p>",
        "id": 184280234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577390651
    },
    {
        "content": "<p>Switch to <code>variables {p q r : Prop}</code>.</p>",
        "id": 184280239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577390667
    },
    {
        "content": "<p>That works. How should my code be if I wanted to keep the <code>variables p q r : Prop</code>?</p>",
        "id": 184280513,
        "sender_full_name": "Iocta",
        "timestamp": 1577391082
    },
    {
        "content": "<p>You have to provide all explicit parameters to the function <code>show_p</code>, so your last example should look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">show_p</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">h</span> <span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">show_q_or_r</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"o\">)</span>\n</pre></div>",
        "id": 184280688,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1577391342
    },
    {
        "content": "<p>Oh I see. Thank you all.</p>",
        "id": 184280753,
        "sender_full_name": "Iocta",
        "timestamp": 1577391386
    },
    {
        "content": "<p>That kind of verbosity is <em>precisely</em> what implicit arguments are meant to deal with.</p>",
        "id": 184280769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577391415
    },
    {
        "content": "<p>(of course you're free to use them or not, I only want to make sure you understand the point).</p>",
        "id": 184280798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577391461
    },
    {
        "content": "<p>Yep, got it.</p>",
        "id": 184280849,
        "sender_full_name": "Iocta",
        "timestamp": 1577391490
    },
    {
        "content": "<p>Is there a built-in function <code>\\lambda h, h</code>?</p>",
        "id": 185060255,
        "sender_full_name": "Iocta",
        "timestamp": 1578434973
    },
    {
        "content": "<p>That should be <code>id</code>.</p>",
        "id": 185060400,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578435059
    },
    {
        "content": "<p>Thanks</p>",
        "id": 185060417,
        "sender_full_name": "Iocta",
        "timestamp": 1578435072
    },
    {
        "content": "<p>Is it possible to do this without <code>classical</code>? <code>example : ¬(p ↔ ¬p) := sorry</code></p>",
        "id": 185060600,
        "sender_full_name": "Iocta",
        "timestamp": 1578435240
    },
    {
        "content": "<p>Yes. Do you want to prove it yourself?</p>",
        "id": 185061003,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1578435584
    },
    {
        "content": "<p>Yes it is provable. Think about  how to get <code>p</code> into context and the definition of <code>not</code>.</p>",
        "id": 185061088,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578435642
    },
    {
        "content": "<p>No luck. How do I get <code>p</code> into context?</p>",
        "id": 185062439,
        "sender_full_name": "Iocta",
        "timestamp": 1578436582
    },
    {
        "content": "<p>Have you been able to get <code>¬p</code> into the goal? Remember that this is actually <code>p → false</code>.</p>",
        "id": 185062517,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578436669
    },
    {
        "content": "<p>Strat with <code>intros contra</code> (or <code>\\lambda contra, _</code>) and see how one magically conjures hypotheses :).</p>",
        "id": 185063226,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578437211
    },
    {
        "content": "<p>I'm missing something. I can't find anything shaped like <code>p</code> or <code>p \\to false</code>.</p>",
        "id": 185064582,
        "sender_full_name": "Iocta",
        "timestamp": 1578438299
    },
    {
        "content": "<p>You're on the right path. You're looking for something <code>p \\to false</code>. Can you prove it?</p>",
        "id": 185064698,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578438380
    },
    {
        "content": "<p>No I'm back where I started :-)</p>",
        "id": 185066693,
        "sender_full_name": "Iocta",
        "timestamp": 1578440272
    },
    {
        "content": "<p>Look at your contradictory hypothesis, <code>(p ↔ ¬p)</code>. You \"win\" once you either know <code>p</code>, or <code>not p</code>. Agreed? (As this then leads to contradiction.)</p>",
        "id": 185066764,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578440333
    },
    {
        "content": "<p>So then surely the <em>only</em> way to prove this is to either know <code>p</code> or <code>not p</code>. There is bound to be no other way.</p>",
        "id": 185066856,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578440414
    },
    {
        "content": "<p>So choose one, whichever you prefer. And formulate: <code>have h : p, { ... }</code>. (Or the other one.)</p>",
        "id": 185066896,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578440466
    },
    {
        "content": "<p>Can you prove either of these? What happens if you attempt?</p>",
        "id": 185067013,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578440556
    },
    {
        "content": "<p>I want to do something like <code>or.elim hp</code>, but I can't figure out how to make <code>hp</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 185069953,
        "sender_full_name": "Iocta",
        "timestamp": 1578443507
    },
    {
        "content": "<p>If hp then hnp, and absurd hp hnp. And vice versa. But how do I state either of those hypotheses?</p>",
        "id": 185070165,
        "sender_full_name": "Iocta",
        "timestamp": 1578443756
    },
    {
        "content": "<p>So you need to prove <code>p</code>. Surely your only hypothesis is <code>c</code>. Let's use it. <code>c.2</code> gives us <code>not p -&gt; p</code>, we apply it to get the conclusion <code>not p</code>. So far so good?</p>",
        "id": 185070268,
        "sender_full_name": "Aria Miuk",
        "timestamp": 1578443861
    },
    {
        "content": "<p>Here's another transcript of my thoughts as I work through the start of this one \"automatically\" (in the style of <a href=\"#narrow/stream/113489-new-members/topic/.60or.60.20implication/near/184439048\" title=\"#narrow/stream/113489-new-members/topic/.60or.60.20implication/near/184439048\">this previous post</a>). </p>\n<p>We start out with a single underscore and let Lean tell us what's missing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (1)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> p : Prop</span>\n<span class=\"cm\">⊢ ¬(p ↔ ¬p) -/</span>\n</pre></div>\n\n\n<p>Here and below, I'll just quote the part of the error message(s) that shows the hypotheses in the context and the goal. Since <code>¬(p ↔ ¬p)</code> is the same as <code>(p ↔ ¬p) → false</code>, which is a function type, we should be able to make progress by introducing a lambda:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (2a)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> p : Prop,</span>\n<span class=\"cm\">h : p ↔ ¬p</span>\n<span class=\"cm\">⊢ false -/</span>\n</pre></div>\n\n\n<p>Note that <code>p ↔ ¬p</code> is the same as <code>(p → ¬p) ∧ (¬p → p)</code> so we could proceed by using <code>h.1</code> and <code>h.2</code>. However, I'll redo this step by making use of Lean's pattern-matching syntax to split <code>h</code> into two hypotheses:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (2b)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> p : Prop,</span>\n<span class=\"cm\">_x : p ↔ ¬p,</span>\n<span class=\"cm\">_fun_match : (p ↔ ¬p) → false,</span>\n<span class=\"cm\">h1 : p → ¬p,</span>\n<span class=\"cm\">h2 : ¬p → p</span>\n<span class=\"cm\">⊢ false -/</span>\n</pre></div>\n\n\n<p>Aside from <code>h1</code> and <code>h2</code> there's some other junk in the context related to the pattern-matching; I won't show it again below. Now, how do we make progress towards the goal of <code>false</code>? Now we realize that <code>h1 : p → ¬p</code> is short for <code>h1 : p → p → false</code>. Since passing two parameters to <code>h1</code> will yield <code>false</code>, we should try replacing the underscore with <code>h1 _ _</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (3)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> h1 : p → ¬p,</span>\n<span class=\"cm\">h2 : ¬p → p</span>\n<span class=\"cm\">⊢ p -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> h1 : p → ¬p,</span>\n<span class=\"cm\">h2 : ¬p → p</span>\n<span class=\"cm\">⊢ p -/</span>\n</pre></div>\n\n\n<p>There are now two error messages because there are two underscores. Since I'm only intending to show a few more steps, from here on out I'm only going to show the error message corresponding to the first underscore. How do we make progress towards <code>p</code> there? Well, note that <code>h2 : ¬p → p</code> is a function which takes one parameter and returns <code>p</code>, so let's replace the underscore with <code>h2 _</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (4)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> h1 : p → ¬p,</span>\n<span class=\"cm\">h2 : ¬p → p</span>\n<span class=\"cm\">⊢ ¬p -/</span>\n</pre></div>\n\n\n<p>Hey, here's the goal of <code>¬p</code> we hinted at! Now what? Well, naïvely, we might apply <code>h1</code> again, since it ends in <code>¬p</code>. However, if you try this, you'll see that continuing this way won't work (try it, what happens?). What should we do instead? Well, if we instead observe that <code>¬p</code> is the same as <code>p → false</code>, we can alternatively introduce another lambda here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (5)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> h1 : p → ¬p,</span>\n<span class=\"cm\">h2 : ¬p → p,</span>\n<span class=\"cm\">h3 : p</span>\n<span class=\"cm\">⊢ false -/</span>\n</pre></div>\n\n\n<p>Now we have <code>p</code> in the context, as desired! I'll leave the rest to you, but one final hint. Our goal is <code>false</code> again. Last time we saw this (step (3)), we replaced the underscore with <code>h1 _ _</code>. You should try doing this again. You'll end up in a state with 3 underscores / errors, but there's now something in the context which will let you close two of them right away...</p>\n<p>You can fill in the last underscore very similarly.</p>\n<p>When you get to the end, you'll notice that in blindly \"chasing underscores\" we end up with quite a bit of duplication. We could have avoided this by naming some terms with <code>have</code> statements, and it's worth refactoring the proof along those lines. Then you might start again from scratch and try to write a version of the proof with the <code>have</code> statements from the beginning.</p>",
        "id": 185070320,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578443886
    },
    {
        "content": "<p>I'll meditate on this. Thanks.</p>",
        "id": 185071145,
        "sender_full_name": "Iocta",
        "timestamp": 1578444779
    },
    {
        "content": "<p>The basic version looks like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">hp</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">hp</span><span class=\"o\">)))</span>\n<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is this less redundant, or is it the same thing?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp&#39;</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp&#39;</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">hp&#39;</span><span class=\"o\">)),</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">hnp</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185073964,
        "sender_full_name": "Iocta",
        "timestamp": 1578448268
    },
    {
        "content": "<p>Well, <code>absurd</code> itself is short for a certain proof term... do you know how <code>absurd</code> is proved?</p>",
        "id": 185075337,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578450425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> maybe try this more general theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Curry&#39;s_paradox</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 185075875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578451225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">hp&#39;</span><span class=\"o\">)</span>  <span class=\"n\">hp&#39;</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">hnp</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 185077413,
        "sender_full_name": "Iocta",
        "timestamp": 1578453441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Curry&#39;s_paradox</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp&#39;</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">hp&#39;</span> <span class=\"n\">hp&#39;</span><span class=\"o\">)),</span>\n<span class=\"k\">show</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">hp</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185077889,
        "sender_full_name": "Iocta",
        "timestamp": 1578454052
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Curry&#39;s_paradox</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span>\n</pre></div>",
        "id": 185079877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578457058
    },
    {
        "content": "<p>Why's this wrong? How to fix it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unnotnot</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hnnp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">hnnp</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">unnotnot</span> <span class=\"n\">hnnq</span><span class=\"o\">)))),</span>\n  <span class=\"k\">show</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span>\n<span class=\"o\">)</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n</pre></div>",
        "id": 185087888,
        "sender_full_name": "Iocta",
        "timestamp": 1578470434
    },
    {
        "content": "<p><code>or.inr</code> should be <code>or.inr hnq</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unnotnot</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hnnp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">hnnp</span><span class=\"o\">))</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnnq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">unnotnot</span> <span class=\"n\">hnnq</span><span class=\"o\">)))),</span>\n  <span class=\"k\">show</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hnq</span>\n<span class=\"o\">)</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n</pre></div>",
        "id": 185088007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578470562
    },
    {
        "content": "<p>the type of <code>or.inr</code> is unified with <code>¬q → ¬p ∨ ¬q</code></p>",
        "id": 185088037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578470612
    },
    {
        "content": "<p>Thanks</p>",
        "id": 185088366,
        "sender_full_name": "Iocta",
        "timestamp": 1578471043
    },
    {
        "content": "<p>Is it possible to prove <code>unnotnot</code> without <code>classical</code>?</p>",
        "id": 185088591,
        "sender_full_name": "Iocta",
        "timestamp": 1578471350
    },
    {
        "content": "<p>no</p>",
        "id": 185088969,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578471888
    },
    {
        "content": "<p>it's equivalent to <code>em</code></p>",
        "id": 185088972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578471898
    },
    {
        "content": "<p>When I have <code>\\not p</code> in context and <code>p</code> in goal, is there something I should be saying to myself?</p>",
        "id": 185194501,
        "sender_full_name": "Iocta",
        "timestamp": 1578560852
    },
    {
        "content": "<p>if you can prove the goal, then you can prove <code>false</code>; so maybe aim to prove <code>false</code> instead</p>",
        "id": 185194680,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578561012
    },
    {
        "content": "<p>Alright</p>",
        "id": 185194700,
        "sender_full_name": "Iocta",
        "timestamp": 1578561039
    },
    {
        "content": "<p>Can I fill this underscore, or am I down the wrong path? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">notq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq&#39;</span><span class=\"o\">))),</span>\n<span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"n\">notq</span>\n</pre></div>",
        "id": 185447701,
        "sender_full_name": "Iocta",
        "timestamp": 1578858848
    },
    {
        "content": "<p>You can fill in the underscore</p>",
        "id": 185447788,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1578859011
    },
    {
        "content": "<p>ok</p>",
        "id": 185447848,
        "sender_full_name": "Iocta",
        "timestamp": 1578859085
    },
    {
        "content": "<p>Is it possible to get into situations where I wouldn't be able to fill in the underscore, but where the overall claim is true?</p>",
        "id": 185447863,
        "sender_full_name": "Iocta",
        "timestamp": 1578859126
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 185447885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1578859169
    },
    {
        "content": "<p>There was another example at the very end of <a href=\"#narrow/stream/113489-new-members/topic/.60or.60.20implication/near/184439048\" title=\"#narrow/stream/113489-new-members/topic/.60or.60.20implication/near/184439048\">this reply</a> to one of your questions (step 2R).</p>",
        "id": 185447966,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1578859256
    },
    {
        "content": "<p>how do I find conversations I've been involved in on zulip?</p>",
        "id": 185448066,
        "sender_full_name": "Iocta",
        "timestamp": 1578859404
    },
    {
        "content": "<p>search for yourself using the search bar at the top.</p>",
        "id": 185448137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578859540
    },
    {
        "content": "<p>ah I see</p>",
        "id": 185448185,
        "sender_full_name": "Iocta",
        "timestamp": 1578859618
    },
    {
        "content": "<p>This <code>example</code> works but it's quite long. Did I miss some opportunity to simplify?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">contrap</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hnq</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hnq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unnotnot</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hnnp</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">hnnp</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">notnot</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ncontrap</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">np2nq</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">id</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">np2nq</span> <span class=\"n\">hnp</span><span class=\"o\">)</span>   <span class=\"o\">(</span><span class=\"n\">notnot</span> <span class=\"bp\">_</span> <span class=\"n\">hq</span><span class=\"o\">)))</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">contrapositive_not</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">nnp2nnq</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">contrap</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h&#39;</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">p2q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">unnotnot</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nnp2nnq</span> <span class=\"o\">(</span><span class=\"n\">notnot</span> <span class=\"bp\">_</span> <span class=\"n\">hp</span><span class=\"o\">)),</span> <span class=\"n\">hq</span><span class=\"o\">),</span>\n  <span class=\"n\">absurd</span> <span class=\"n\">p2q</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h&#39;</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p2q</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ncontrap</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">p2q</span><span class=\"o\">,</span>\n  <span class=\"n\">false&#39;</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hnq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq&#39;</span><span class=\"o\">))),</span>\n<span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n<span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">contrapositive_not</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">(</span><span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnq&#39;</span><span class=\"o\">,</span> <span class=\"n\">hnp</span><span class=\"o\">)))))</span>\n<span class=\"n\">hnq</span>\n</pre></div>",
        "id": 185458232,
        "sender_full_name": "Iocta",
        "timestamp": 1578877571
    },
    {
        "content": "<p>This looks a lot more complicated than necessary. In particular, you shouldn't need to use <code>em</code> again to fill in the underscore.<br>\nIn the context of the underscore, you know <code>not p</code> and also <code>not (p -&gt; q)</code>. But <code>not p</code> is <code>p -&gt; false</code>, and from <code>false</code> you can prove <code>q</code>, so you get <code>p -&gt; q</code>, which contradicts <code>not (p -&gt; q)</code>.</p>",
        "id": 185458907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1578878853
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 185463876,
        "sender_full_name": "Iocta",
        "timestamp": 1578889060
    },
    {
        "content": "<p>Of course you can also prove all of these basic logic statements with one line using tactics, and most if not all of them will already be proved in lean or mathlib already. If you're interested in seeing very short proofs you can read the proofs in the library</p>",
        "id": 185470188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1578900187
    },
    {
        "content": "<p>I'm still working through the tutorial, haven't got to tactics yet.</p>",
        "id": 185568038,
        "sender_full_name": "Iocta",
        "timestamp": 1578982285
    },
    {
        "content": "<p>I'm confused about the forall syntax. How do you fill this? <code>def prime (n : ℕ) : Prop := sorry</code></p>",
        "id": 185981406,
        "sender_full_name": "Iocta",
        "timestamp": 1579326524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nondivisible</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>nope</p>",
        "id": 185981696,
        "sender_full_name": "Iocta",
        "timestamp": 1579327022
    },
    {
        "content": "<p><code>and.intro (hp : p) (hq : q)</code> is a <strong>proof</strong> of <code>p and q</code></p>",
        "id": 185981949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1579327503
    },
    {
        "content": "<p>How do I take an <code>m : \\N</code> such that <code>1 &lt; m &lt; n</code>as an argument?</p>",
        "id": 185982076,
        "sender_full_name": "Iocta",
        "timestamp": 1579327744
    },
    {
        "content": "<p>I guess I could say <code>or.elim (em 1 &lt; m)</code> but that seems roundabout</p>",
        "id": 185982138,
        "sender_full_name": "Iocta",
        "timestamp": 1579327900
    },
    {
        "content": "<p>You just write </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185982464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579328577
    },
    {
        "content": "<p>except that doesn't actually work, but this does:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185982470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579328594
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 185982473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579328631
    },
    {
        "content": "<p>Oh, easy. Thanks.</p>",
        "id": 185983144,
        "sender_full_name": "Iocta",
        "timestamp": 1579330008
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>What's the quantifier on <code>m</code>?</p>",
        "id": 185984792,
        "sender_full_name": "Iocta",
        "timestamp": 1579333464
    },
    {
        "content": "<p>compared to <code>forall n : ℕ, (n &gt; 2) → ∃ k : ℕ, ∃m : ℕ, (and (eq (k + m) n) (and (prime k) (prime m)))</code></p>",
        "id": 185984795,
        "sender_full_name": "Iocta",
        "timestamp": 1579333485
    },
    {
        "content": "<p>(<code>m</code> in the <code>example</code>)</p>",
        "id": 185984819,
        "sender_full_name": "Iocta",
        "timestamp": 1579333527
    },
    {
        "content": "<p>Oh I see, we're taking it as an argument.</p>",
        "id": 185984923,
        "sender_full_name": "Iocta",
        "timestamp": 1579333749
    },
    {
        "content": "<p>Why doesn't it complain that it doesn't match <code>Prop</code> then?</p>",
        "id": 185984928,
        "sender_full_name": "Iocta",
        "timestamp": 1579333795
    },
    {
        "content": "<p>When you refer to a <code>variable</code>, it automatically adds the variable binder to the definition, as if you had written</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">m</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 185985048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579334028
    },
    {
        "content": "<p>Aha</p>",
        "id": 185985317,
        "sender_full_name": "Iocta",
        "timestamp": 1579334499
    },
    {
        "content": "<p>Given </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>How do I check whether <code>divides 3 6</code>?</p>",
        "id": 185985624,
        "sender_full_name": "Iocta",
        "timestamp": 1579335118
    },
    {
        "content": "<p>#check/#eval/#print don't seem to do it</p>",
        "id": 185985666,
        "sender_full_name": "Iocta",
        "timestamp": 1579335167
    },
    {
        "content": "<p>You need to prove the predicate is decidable first, which amounts to giving a decision procedure. In most programming languages, for example, you decide <code>m | n</code> by testing if <code>m % n = 0</code></p>",
        "id": 185985680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579335241
    },
    {
        "content": "<p>Luckily, we've already gone to the trouble to do this, but you have to use the built-in divides relation to get this</p>",
        "id": 185985722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579335268
    },
    {
        "content": "<p>Once you have a decidable proposition <code>#eval to_bool (divides 3 6)</code> will display either <code>tt</code> or <code>ff</code></p>",
        "id": 185985781,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1579335367
    },
    {
        "content": "<p>Note that by the syntactic form of the expression (an exists over natural numbers of a basic proposition) it is not obviously decidable. For example Goldbach's conjecture can also be written in this form but it's an open question if this is a decidable proposition</p>",
        "id": 185985784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579335403
    },
    {
        "content": "<p>With inbuilt divides, it just works: <code>#eval to_bool (3 ∣ 6) -- tt</code>. Note that this is <code>\\|</code> not <code>|</code>.</p>",
        "id": 185989055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579342008
    },
    {
        "content": "<p><code>example (a b : ℕ) : decidable (a ∣ b) := by apply_instance -- already inbuilt</code></p>",
        "id": 185989116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579342136
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>There is notation which makes this more readable for mathematicians, right?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But Mario's suggestion of currying it and writing <code>m &gt; 1 → m &lt; n → ¬ (divides m n)</code> is better for functional languages because it's easier to work with; typically m&gt;1 comes from one proof and m&lt;n comes from another, and if you curry it then you don't need to apply the <code>and.intro</code></p>",
        "id": 185989221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579342327
    },
    {
        "content": "<p>sorry if this is out of place (new to lean and to the community <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span>) but i've been searching all over the docs and can't find an answer. i'm trying to rewrite with <code>rw mem_empty_eq</code>, and receiving the following error:</p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, did not find instance of the pattern in the target expression\n  ?m_2 ∈ ∅\nstate:\nα : Type,\nA : set α\n⊢ {a : α | a ∈ A ∧ a ∈ ∅} = ∅\n</pre></div>",
        "id": 186018685,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579394990
    },
    {
        "content": "<p>ouch</p>",
        "id": 186018730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395013
    },
    {
        "content": "<p>i would think that <code>a ∈ ∅</code> is sufficient  to rewrite?</p>",
        "id": 186018732,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395019
    },
    {
        "content": "<p>It's hidden too deep in the term.</p>",
        "id": 186018733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395030
    },
    {
        "content": "<p>try <code>ext</code> first</p>",
        "id": 186018738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395040
    },
    {
        "content": "<p>You can't rewrite under a lambda.</p>",
        "id": 186018745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395059
    },
    {
        "content": "<p>ah! that makes sense. is that just to protect against accidentally rewriting already-bound terms?</p>",
        "id": 186018752,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395075
    },
    {
        "content": "<p>Alternatively you could try <code>simp only [mem_empty_eq]</code></p>",
        "id": 186018753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395077
    },
    {
        "content": "<p>I have no idea why it makes sense, I am a mathematician. I just know the workarounds.</p>",
        "id": 186018755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395092
    },
    {
        "content": "<blockquote>\n<p>I am a mathematician</p>\n</blockquote>\n<p>Hahaha, well thank you all the same <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span></p>",
        "id": 186018797,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395124
    },
    {
        "content": "<p><code>mem_empty_eq</code> is definitionally true, so you could just write <code>show  {a : α | a ∈ A ∧ false} = ∅</code></p>",
        "id": 186018801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395151
    },
    {
        "content": "<p>but then you probably won't be able to rewrite <code>and_false</code> on the next line, you'll perhaps have to do <code>ext</code> in the end if you want to prove this by hand. Did you try <code>simp</code>?</p>",
        "id": 186018854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395250
    },
    {
        "content": "<p>yeah, <code>simp</code> goes through the entire proof for me. i'm trying to get a better handle on lean by doing some introductory exercises on an undergrad abstract algebra textbook i found</p>",
        "id": 186018857,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395290
    },
    {
        "content": "<p>i got it to work with <code>simp only [...]</code> for both the <code>mem_empty_eq</code> and <code>and_false</code> steps. i'm going to try with <code>ext</code> to get more experience with that too</p>",
        "id": 186018865,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395331
    },
    {
        "content": "<p>After <code>ext</code> the rewrites do work.</p>",
        "id": 186018915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579395419
    },
    {
        "content": "<p>yep, although only on the rhs of the <code>iff</code>, i can show that <code>forall a. a \\not \\in ...</code> with a <code>iff_false</code>, and then i can map that to the set being <code>\\emptyset</code> maybe?</p>",
        "id": 186018928,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395481
    },
    {
        "content": "<p>thank you for your help :)</p>",
        "id": 186018967,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579395484
    },
    {
        "content": "<p>after many hours of syntax errors, i'm proud to say i've shown... A ∩ ∅ = ∅ <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> </p>\n<div class=\"codehilite\"><pre><span></span>lemma intersection_empty (α : Type) (A : set α) :\n        A ∩ ∅ = ∅ :=\n        begin\n            rw inter_def,\n            ext a,\n            rw mem_set_of_eq,\n            repeat {rw mem_empty_eq},\n            rw and_false,\n        end\n</pre></div>",
        "id": 186019336,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579396238
    },
    {
        "content": "<p>thanks again Kevin!</p>",
        "id": 186019342,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579396246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259240\">@Cerek Hillen (he) (W2'20)</span>  Hey Cerek, that doesn't work for me, do you need to include or open some stuff?</p>",
        "id": 186019927,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1579397447
    },
    {
        "content": "<p>yeah! i have the following at the top of my <code>.lean</code> file:</p>\n<div class=\"codehilite\"><pre><span></span>import data.set.basic\nimport data.nat.basic\nimport logic.basic\n\nopen set\nopen nat\n</pre></div>",
        "id": 186019937,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579397478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>How to write this?</p>",
        "id": 186020308,
        "sender_full_name": "Iocta",
        "timestamp": 1579398244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253355\">@Iocta</span> The answer depends on the type of <code>α</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">classical_rec_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 186020919,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579399627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259240\">@Cerek Hillen (he) (W2'20)</span> Maybe you already know this, but just to be sure, your <code>intersection_empty</code> is also known as <a href=\"https://github.com/leanprover-community/mathlib/blob/baa3aa7370e506ef89c40557eed8bd1cc811ab30/src/data/set/basic.lean#L374\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/baa3aa7370e506ef89c40557eed8bd1cc811ab30/src/data/set/basic.lean#L374\"><code>set.inter_empty</code> in mathlib</a>. You can find this out if you <code>import tactic</code> and then use <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search\"><code>library_search</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">intersection_empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>",
        "id": 186021038,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579399847
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"259240\">Cerek Hillen (he) (W2'20)</span> Maybe you already know this, but just to be sure, your <code>intersection_empty</code> is also known as <a href=\"https://github.com/leanprover-community/mathlib/blob/baa3aa7370e506ef89c40557eed8bd1cc811ab30/src/data/set/basic.lean#L374\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/baa3aa7370e506ef89c40557eed8bd1cc811ab30/src/data/set/basic.lean#L374\"><code>set.inter_empty</code> in mathlib</a>. You can find this out if you <code>import tactic</code> and then use <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search\"><code>library_search</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">intersection_empty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n</blockquote>\n<p>I was aware, but thank you! I'm looking to get a better handle on Lean by going through proofs manually</p>",
        "id": 186021748,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579401425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259240\">@Cerek Hillen (he) (W2'20)</span> your proof works but it breaks many abstraction barriers. You know too much about how sets are implemented, and know too many lemmas about them. Maybe try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186030897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579421173
    },
    {
        "content": "<p>Another useful exercise from the opposite of the style spectrum is to understand the following proof term:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∩</span> <span class=\"err\">∅</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 186030957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579421287
    },
    {
        "content": "<p>I'm just recently learning about the axiomatic description of set theory, so bear with me. When you say I know too much about how sets are implemented / too many lemmas about them, do just mean that it's generally better to provide proofs that don't rely on operators' definitions &amp; facts about them?</p>",
        "id": 186051217,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579460570
    },
    {
        "content": "<p>Or just that in this situation, since it's a base-level proof about the union identity, that it's better to prove it without knowledge of constructions and proofs that one would prove with the result itself?</p>",
        "id": 186051233,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579460604
    },
    {
        "content": "<p>Also another introductory question, say I have the following 2 hypotheses:</p>\n<div class=\"codehilite\"><pre><span></span>h : ∀ (x : α), x ∈ A → x ∈ B,\na : α\n</pre></div>\n\n\n<p>Intuitively I should be able to construct a hypothesis that states <code>a ∈ A → a ∈ B</code>, but how would I actually do that?</p>",
        "id": 186051357,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579460816
    },
    {
        "content": "<p><code>h a</code> has type <code>a ∈ A → a ∈ B</code>.</p>",
        "id": 186051410,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579460887
    },
    {
        "content": "<p>oh! i didn't realize that \\forall operators actually presented themselves as functions, or function-adjacent thing</p>",
        "id": 186051428,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579460960
    },
    {
        "content": "<p>i get the sense that i'm using the word wrong so far as lean is concerned</p>",
        "id": 186051431,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579460974
    },
    {
        "content": "<p>Well, the way I would phrase it (which might be a little off still...) is that the <code>forall</code>  \"creates\" a <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#dependent-types\">dependent function type</a>, thus something whose type is a <code>forall</code> (like <code>h</code>) is a function. (The section of TPiL I linked talks about \"Pi\" types, see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-universal-quantifier\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-universal-quantifier\">this section</a> for why <code>forall</code> and <code>Pi</code> are the same).</p>",
        "id": 186051738,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579461506
    },
    {
        "content": "<p>Ah ok, that makes sense--it's like in a type theoretic mathematical system where you'd say a thing is true iff there exists a function of the type <code>A -&gt; true</code> (or <code>A -&gt; 1</code> i guess technically)</p>",
        "id": 186052300,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579462632
    },
    {
        "content": "<p>but since <code>forall</code> describes a property of some thing, it's just equivalent to some <code>A -&gt; Prop</code>, except you have to provide some <code>a : A</code></p>",
        "id": 186052338,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579462683
    },
    {
        "content": "<p>my only knowledge of type theory is the introductory section of Homotopy Type Theory so some of my intuitions might be off</p>",
        "id": 186052345,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579462704
    },
    {
        "content": "<p>You should probably read the first few sections of theorem proving in Lean, I think you'll find it very enlightening</p>",
        "id": 186052706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579463414
    },
    {
        "content": "<p>On it <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 186052879,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579463779
    },
    {
        "content": "<p>Thanks for pointing me towards Theorem Proving in Lean, Kevin. I'm finding it a big help. NN game focuses a lot on rewrite rules so Chapt 3 has been really good about getting a sense for constructive proofs</p>",
        "id": 186393587,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579789798
    },
    {
        "content": "<p>(at least the early parts of NN Game)</p>",
        "id": 186393643,
        "sender_full_name": "Cerek Hillen (he) (W2'20)",
        "timestamp": 1579789810
    }
]