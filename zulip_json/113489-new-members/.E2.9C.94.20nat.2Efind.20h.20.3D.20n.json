[
    {
        "content": "<p>Does this lemma already exist? This seems to be the easiest way to prove that <code>nat.find</code> is equal to some given number, but I can't find it in the docs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span> <span class=\"n\">by_contra</span> <span class=\"n\">h₃</span><span class=\"bp\">;</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.find_min</span> <span class=\"n\">h</span> <span class=\"n\">h₃</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span> <span class=\"n\">_</span> <span class=\"n\">h₃</span> <span class=\"o\">(</span><span class=\"n\">nat.find_spec</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264744053,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639417726
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/1589c7b4d1715778e18fe48ed0ff5970a165451a/src/data/nat/basic.lean#L1214\">https://github.com/leanprover-community/mathlib/blob/1589c7b4d1715778e18fe48ed0ff5970a165451a/src/data/nat/basic.lean#L1214</a></p>",
        "id": 264745505,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639418303
    },
    {
        "content": "<p>Just use it from right to left.</p>",
        "id": 264745772,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639418403
    },
    {
        "content": "<p>Right, I somehow missed it. I hate it when VS Code does not display relevant lemmas in the autocomplete list.</p>",
        "id": 264747390,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639419043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> has marked this topic as resolved.</p>",
        "id": 264747402,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639419046
    }
]