[
    {
        "content": "<p>Working through this textbook example while trying to get used to Lean's interface. Is my goal in the <code>example</code> at the bottom stated correctly? If so, can it be solved with only what I have available or do I need more API for <code>natnat</code>? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"c1\">--construct the integers from the natural numbers</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">natnat</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">natnat</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`ℕ</span><span class=\"mi\">2</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">natnat</span>\n\n<span class=\"n\">def</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">another_zero</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">3</span> <span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">zero</span> <span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">same</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_equiv</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"n\">same</span> <span class=\"bp\">⟩</span>    <span class=\"c1\">-- equivalence relation on ℕ2</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">same_equiv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">same</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- reflexive:</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">same</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- symmetric</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">same</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hxy</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- transitive</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">H</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">same</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"bp\">ℕ</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">same</span><span class=\"o\">,</span>\n    <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">same_equiv</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">natnat</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">myℤ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">natnat</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n\n<span class=\"c1\">-- def zero : myℤ := ⟦0⟧</span>\n<span class=\"n\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">myℤ</span> <span class=\"o\">:=</span> <span class=\"err\">⟦</span> <span class=\"n\">natnat</span><span class=\"bp\">.ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">zero</span> <span class=\"err\">⟧</span>\n<span class=\"n\">def</span> <span class=\"n\">another_zero</span> <span class=\"o\">:</span> <span class=\"n\">myℤ</span> <span class=\"o\">:=</span> <span class=\"err\">⟦</span> <span class=\"n\">natnat</span><span class=\"bp\">.ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">another_zero</span> <span class=\"err\">⟧</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">another_zero</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 204103157,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594914685
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">natnat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">another_zero</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ setoid.r ℕ2_zero ℕ2_another_zero</span>\n  <span class=\"c1\">-- simp only [setoid.r] is helpful with a goal like this</span>\n  <span class=\"k\">show</span> <span class=\"n\">natnat</span><span class=\"bp\">.</span><span class=\"n\">same</span> <span class=\"n\">natnat</span><span class=\"bp\">.ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">zero</span> <span class=\"n\">natnat</span><span class=\"bp\">.ℕ</span><span class=\"mi\">2</span><span class=\"bp\">_</span><span class=\"n\">another_zero</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204143724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594933935
    },
    {
        "content": "<p>I explored the various variants of <code>quotient.lift_on</code>, but it was <code>quot.sound</code> that I missed! Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !</p>",
        "id": 204145162,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594934677
    },
    {
        "content": "<p>I am absolutely rubbish at the <code>quotient</code> API -- I will confess that I found it with <code>suggest</code> ;-)</p>",
        "id": 204145416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594934831
    },
    {
        "content": "<p>Since you're working with <code>quotient</code>, you might also consider <code>quotient.sound</code>, which gives <code>a ≈ b → ⟦a⟧ = ⟦b⟧</code>.  This can be convenient since it puts it in terms of your equivalence relation.</p>",
        "id": 204145452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594934852
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204145653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594934965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Lean.20equivalence.20classes/near/204145416\">said</a>:</p>\n<blockquote>\n<p>I am absolutely rubbish at the <code>quotient</code> API -- I will confess that I found it with <code>suggest</code> ;-)</p>\n</blockquote>\n<p>I also confess that (apparently) I completely forgot about <code>suggest</code> and <code>library_search</code> and was just reading through <code>quot.lean</code> instead. The idea that <code>suggest</code> could find something like this just didn't cross my mind-:(</p>",
        "id": 204145997,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1594935127
    }
]