[
    {
        "content": "<p>is there a factor tactic? (sort of like the reverse of <code> mul_add</code>)</p>",
        "id": 191356365,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811222
    },
    {
        "content": "<p>No there is not! There is a factor-<em>checking</em> tactic, but not a factor-doing one.</p>",
        "id": 191356386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811262
    },
    {
        "content": "<p>Remember though that you can rewrite <code>mul_add</code> in both directions :-)</p>",
        "id": 191356394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811279
    },
    {
        "content": "<p>so if I have something like <code>n*a +n*b = 1</code></p>",
        "id": 191356407,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811312
    },
    {
        "content": "<p>and I do <code>mul_add</code></p>",
        "id": 191356409,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811320
    },
    {
        "content": "<p>I should get <code>n*(a+b)=1</code>?</p>",
        "id": 191356450,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811332
    },
    {
        "content": "<p>what do you mean by \"do\"?</p>",
        "id": 191356455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811338
    },
    {
        "content": "<p>Let's get precise :-)</p>",
        "id": 191356463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811352
    },
    {
        "content": "<p>if I <code>`rw mul_add</code> that statement</p>",
        "id": 191356499,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811423
    },
    {
        "content": "<p>then it will say \"I can't find anything of the form <code>x*(y+z)</code> in your statement so I can't rewrite\"</p>",
        "id": 191356551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811452
    },
    {
        "content": "<p>But if you <code>rw ←mul_add</code> then it will work fine</p>",
        "id": 191356565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811471
    },
    {
        "content": "<p>oh thanks! didn't know how to go backwards at first</p>",
        "id": 191356608,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584811509
    },
    {
        "content": "<p>if <code>h</code> is a proof of <code>A = B</code> then <code>rw h</code> will turn all <code>A</code>'s in your goal to <code>B</code>'s, and <code>rw ←h</code> will turn all <code>B</code>'s into <code>A</code>'s.</p>",
        "id": 191356610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811511
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ring</span>\n  <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Lean didn't do the factoring, but it checked it once I told it.</p>",
        "id": 191356638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584811558
    },
    {
        "content": "<p>Another quick tactic question</p>",
        "id": 191370516,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584833411
    },
    {
        "content": "<p>what tactic should I use if I want to turn a=b into b=a?</p>",
        "id": 191370519,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584833427
    },
    {
        "content": "<p>I tried <code>rw eq.symm</code> but I got some sort of \"lemma lhs is a metavariable\" error</p>",
        "id": 191370581,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584833570
    },
    {
        "content": "<p>The <code>rw</code> tactic only works with equalities or iff statements. <code>eq.symm</code> is an implication <code>a = b → b = a</code>. So you should <code>apply</code> it instead. This is a really important distinction and the sooner you learn it the easier your path to enlightenment will be.</p>",
        "id": 191370601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584833622
    },
    {
        "content": "<p>Note that if you want to rewrite something, <code>eq_comm</code> is the proof that <code>a = b ↔ b = a</code></p>",
        "id": 191370651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584833672
    },
    {
        "content": "<p>I see undergraduate mathematicians in my department asking this question again and again. For mathematicians, equality and implication seem to basically be the same idea, or are stored in the same place or something. I guess the point is that if a mathematician knows that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\iff Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> is true, then obviously <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> is true, and the concepts can get a bit blurred, especially because in some sense the vast majority of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\implies</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> statements mathematicians use in school mathematics are special cases of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\iff</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span></span></span> statements.</p>",
        "id": 191370718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584833861
    },
    {
        "content": "<p>My daughter is currently learning about making new variables the subject of the equation, e.g. she is told <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>=</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">y=3x+5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> and has to figure out how to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> as a function of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. The route to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo>−</mo><mn>5</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x=(y-5)/3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord\">3</span></span></span></span> is expressed as a series of implications, but in practice it is a series of iff statements. I am not sure if the distinction is flagged at school.</p>",
        "id": 191370847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584834090
    },
    {
        "content": "<p>You can also use <code>symmetry</code>, which tries to <code>apply</code> a relevant lemma marked with the <code>[symm]</code> attribute.</p>",
        "id": 191371480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584835258
    },
    {
        "content": "<p>and <code>#print eq.symm</code> shows that indeed this lemma has that tag.</p>",
        "id": 191371494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584835318
    },
    {
        "content": "<p>I don't quite understand the tactic <code>obviously</code>. I saw this tactic in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">adj</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In particular, I don't understand how <code>obviously</code> helps here.<br>\nCould anyone please give me a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> illustrating the function of <code>obviously</code>?</p>",
        "id": 245727217,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626114657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 245728387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626115080
    },
    {
        "content": "<p>What <code>obviously</code> does is make it equivalent to writing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">complete_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span><span class=\"o\">,</span> <span class=\"n\">sym</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(At least, I think <code>obviously</code> does <code>by tidy</code>.  I'm not remembering. <em>Edit: it basically does <code>tidy</code>, but there's an extra thing where it checks for <code>sorry</code> in the type.</em>)</p>",
        "id": 245728706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626115169
    }
]