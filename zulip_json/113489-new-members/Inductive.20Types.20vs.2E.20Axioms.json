[
    {
        "content": "<p>IIRC, using the <code>constant</code> keyword in Lean is the same as declaring an axiom. So e.g:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">fruit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">constant</span> <span class=\"n\">apple</span> <span class=\"o\">:</span> <span class=\"n\">fruit</span>\n</code></pre></div>\n<p>would axiomatically define a <code>fruit</code> type with a member <code>apple</code>. </p>\n<p>What I don't understand is how inductive type declarations are different from this. E.g. if I write ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">fruit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">apple</span> <span class=\"o\">:</span> <span class=\"n\">fruit</span>\n</code></pre></div>\n<p>... then where are this new type and value coming from, if not by axioms?</p>",
        "id": 230470570,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615880488
    },
    {
        "content": "<p>My understanding is that you're right that they're essentially similar, but <code>inductive</code> is more limited in what axioms it creates, so it can't make your logic inconsistent</p>",
        "id": 230470833,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615880656
    },
    {
        "content": "<p>Right -- you have the guarantee that you didn't just enable a proof of false with the inductive definition. You can just make a constant term of type <code>false</code></p>",
        "id": 230470898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615880715
    },
    {
        "content": "<p>The inductive definition also makes a recursor, which is also defined as a constant</p>",
        "id": 230470976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615880769
    },
    {
        "content": "<p>Check out <code>#print fruit.rec</code></p>",
        "id": 230471015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615880810
    },
    {
        "content": "<p>And then an internal system makes a bunch more stuff -- check out <code>#print prefix fruit</code></p>",
        "id": 230471085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615880856
    },
    {
        "content": "<p>The recursor says \"apples are the only fruit\" -- you don't get this with the constant definition</p>",
        "id": 230471152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615880898
    },
    {
        "content": "<p>Wow ok, so we <em>are</em> in fact adding axioms with every inductive type definition.<br>\nWould there be other ways of creating new types, or is there a particular reason we need to do it by adding axioms?</p>",
        "id": 230471182,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615880918
    },
    {
        "content": "<p>I'm not a type theorist. My basic understanding is that this is just how the calculus of inductive constructions works</p>",
        "id": 230471451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615881125
    },
    {
        "content": "<p>There are three ways of making types in lean, inductive types, function types and quotient types, and as far as I am concerned each thing just happens by magic</p>",
        "id": 230471496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615881177
    },
    {
        "content": "<p>That's why we need <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>s in this world  :D</p>",
        "id": 230471534,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615881214
    },
    {
        "content": "<p>You make terms of inductive types using the constructors (which were magically added as constants when the inductive type was made), you make terms of function types with lambdas, and you make terms of quotient types with <code>quot.mk</code></p>",
        "id": 230471659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615881294
    },
    {
        "content": "<p>I never knew that quotient types were so foundational. Do they basically behave as \"take a type and make a new one by collapsing members according to a given equivalence relation\"?</p>",
        "id": 230471854,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615881467
    },
    {
        "content": "<p>That's what it means to be a quotient type, but if it were just that you could build them with set-quotients</p>",
        "id": 230472865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615881769
    },
    {
        "content": "<p>The reason they are axiomatic is so that they get the computational rule <code>lift f h (quot.mk a) = f a</code></p>",
        "id": 230472958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615881795
    },
    {
        "content": "<p>you can't add custom definitional equalities in lean's type theory, so any new defeqs have to be axiomatized as part of the theory</p>",
        "id": 230473125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615881845
    },
    {
        "content": "<p>Same thing with inductive types - you can kind of build them using church encodings if you don't care about the computational rules</p>",
        "id": 230473206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615881876
    },
    {
        "content": "<p>that doesn't completely work though because inductive types are magical in that the recursor for a (large-eliminating) inductive type mentions a free universe variable</p>",
        "id": 230473367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615881934
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat'</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat'</span> <span class=\"bp\">→</span> <span class=\"n\">nat'</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">nat'.rec</span>\n<span class=\"c1\">-- protected eliminator nat'.rec : Π {C : nat' → Sort l}, C nat'.zero → (Π (ᾰ : nat'), C ᾰ → C ᾰ.succ) → Π (n : nat'), C n</span>\n</code></pre></div>\n<p>where did that universe <code>l</code> come from? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 230473550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615881990
    },
    {
        "content": "<p>Here's a definition of <code>nat</code> using church encodings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nat'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">//</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">a0</span> <span class=\"bp\">=</span> <span class=\"n\">b0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bs</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n    <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a0</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b0</span> <span class=\"n\">bs</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>You can kind of tell this definition has a universe issue though, because it's in the wrong universe - it lives in <code>Type 1</code> but the recursor for this type only works in <code>Type</code> instead of <code>Type u</code> like the axiomatic inductive type <code>nat</code></p>",
        "id": 230474512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615882428
    }
]