[
    {
        "content": "<p>I am a bit confused by the results of the following:</p>\n<p>constants m n : ℕ<br>\n#check m - n<br>\n#eval 5 - 6</p>\n<p>The check reports a natural number. The eval returns 0.</p>\n<p>example (Q : ℕ → Prop) (m : ℕ) : (∀ n : ℕ, Q n) → ( ∀ n : ℕ, Q (n - m) ) :=<br>\n    assume a1 : ∀ n : ℕ, Q n,<br>\n        assume n : ℕ,<br>\n        show Q (n - m), from a1 (n - m)</p>\n<p>I did not expect that the substitution in the last line would be allowed, since n - m might not be a natural number.</p>",
        "id": 152392979,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545492594
    },
    {
        "content": "<p><code>n - m</code> is always a natural number. It is zero when you expect it to be negative.</p>",
        "id": 152393031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545492681
    },
    {
        "content": "<p><code>-</code> is defined on <code>nat</code> for convenience, it's not the mathematical <code>-</code>. If you want to allow negative numbers, use <code>int</code>.</p>",
        "id": 152393174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493014
    },
    {
        "content": "<p>Is there a way to override that? It does not seem like the proof I posted should be valid. I would like it to require that m &lt;= n.</p>",
        "id": 152393219,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545493093
    },
    {
        "content": "<p>I don't know what you mean by \"override\". You can't change the definition of <code>nat.sub</code> but you could define a new function if you like and I guess you could even redefine the notation <code>-</code> on <code>nat</code> to mean your new function. What do you actually want?</p>",
        "id": 152393233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493172
    },
    {
        "content": "<p>Remember that every function has to have a well-defined source and target type. <code>nat.sub</code> takes two nats and returns a nat.</p>",
        "id": 152393290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493278
    },
    {
        "content": "<p>I guess I am just uncomfortable that the proof I posted is valid. It seems that it should require m &lt;= n.</p>",
        "id": 152393347,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545493374
    },
    {
        "content": "<p>Your example is about a function called <code>nat.sub</code></p>",
        "id": 152393353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493392
    },
    {
        "content": "<p>because you used the notation <code>-</code> on naturals and that's what it expands to</p>",
        "id": 152393355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493411
    },
    {
        "content": "<p>Whether or not you're uncomfortable, Lean is just doing what you told it to do. You still haven't made clear to me what you expect to happen.</p>",
        "id": 152393394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493451
    },
    {
        "content": "<p>You can change definitions or change notation or define new functions, you can make Lean behave the way you want it to behave, but your example as it stands is behaving normally because computer scientists had reasons for defining nat.sub the way they did.</p>",
        "id": 152393410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493506
    },
    {
        "content": "<p>Your example is <em>not</em> about usual mathematician's subtraction.</p>",
        "id": 152393424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493535
    },
    {
        "content": "<p>Is there an existing function I could use to make it the usual mathematician's subtraction?</p>",
        "id": 152393472,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545493610
    },
    {
        "content": "<p><code>int.sub</code></p>",
        "id": 152393475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493621
    },
    {
        "content": "<p>This takes two ints and returns the int that you think it should return.</p>",
        "id": 152393488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493640
    },
    {
        "content": "<p>I see. Thank you.</p>",
        "id": 152393546,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545493783
    },
    {
        "content": "<p>But note that a nat is not an int -- there is a function from nat to int which to a mathematician is \"the obvious inclusion\". In computer science nat and int are two different types and there's a map from nat to int which you have to somehow invoke, which makes things a little more complicated than a mathematician would feel that they should be.</p>",
        "id": 152393591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493821
    },
    {
        "content": "<p>NB notation for <code>int.sub</code> is just <code>-</code> again -- you just have to remember to feed ints to it and not nats. The notation <code>-</code> just figures out which <code>blah.sub</code> it should expand to depending on what you feed it.</p>",
        "id": 152393599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493874
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"c1\">-- 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">((</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"c1\">-- -1</span>\n</pre></div>",
        "id": 152393602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493916
    },
    {
        "content": "<p><code>(5 : ℤ)</code> means \"I mean the integer 5\". The default 5 is the natural number 5.</p>",
        "id": 152393647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545493945
    },
    {
        "content": "<p>So in the example I posted I should introduce the assumption m &lt;= n and use it to show that 'int.sub_nat_nat n m' is a natural number, then use 'a1 (int.sub_nat_nat n m)'?</p>",
        "id": 152393752,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545494203
    },
    {
        "content": "<p>It's not so easy. Your function will return an <code>int</code>, which is never a <code>nat</code>.</p>",
        "id": 152393948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545494525
    },
    {
        "content": "<p>You could however use a function that turns an <code>int</code> into a <code>nat</code>. But it will give you garbage for negative integers.</p>",
        "id": 152393957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545494556
    },
    {
        "content": "<p>Alternatively, you can continue using natural numbers. And you can prove that it gives the \"correct\" result when <code>m &lt;= n</code>. (Such proofs already exist in mathlib.)</p>",
        "id": 152393968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545494612
    },
    {
        "content": "<p>And then you just live with the fact that you also proved something else, something garbage. But who cares.</p>",
        "id": 152394015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545494652
    },
    {
        "content": "<blockquote>\n<p>and use it to show that <code>int.sub_nat_nat n m</code> is a natural number</p>\n</blockquote>\n<p>You have a misconception about what is going on. The integer 4 is <em>not</em> a natural number, it is a non-negative integer. It is a term of type int, and because in type theory every term has at most one type, the integer 4 is not a natural number; indeed in type theory it does not even make sense to ask whether the integer 4 and the natural number 4 are equal -- terms of different types cannot be equal.</p>",
        "id": 152395321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545497182
    },
    {
        "content": "<p>On the other hand there is a map from the natural numbers to the integers, and a map (the absolute value function) from the integers to the naturals, so you can move between them -- but the moving has to be done.</p>",
        "id": 152395333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545497244
    },
    {
        "content": "<p>In particular, <code>a1 x</code> will never work if <code>a1</code> is expecting a natural and <code>x</code> is an integer, even if <code>x</code> is non-negative.</p>",
        "id": 152395375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545497305
    },
    {
        "content": "<p>So there is a function that takes a positive integer and returns a natural number?</p>",
        "id": 152397122,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545500828
    },
    {
        "content": "<p>No, same reason as above.</p>",
        "id": 152397163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545500896
    },
    {
        "content": "<p><code>int.nat_abs</code> takes an arbitrary integer and returns a natural number.</p>",
        "id": 152397166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545500913
    },
    {
        "content": "<p>and if you feed it a non-negative integer, it will return the corresponding natural number.</p>",
        "id": 152397175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545500946
    },
    {
        "content": "<p>Type theory likes total functions, and this is a bit weird for mathematicians. For example the square root function just goes from the reals to the reals -- if you feed it a non-negative real then it returns its non-negative square root, and if you feed it a negative real then it just returns some junk, maybe 0, maybe the square root of the absolute value -- as a mathematician I don't care what it returns because I never apply this function unless the input is non-negative. It's just a different way of looking at things. Took me a while to get used to.</p>",
        "id": 152397230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545501078
    },
    {
        "content": "<p>Would this be a better approach then:<br>\nexample (Q : ℤ → Prop) (m : ℤ) (m ≥ 0) : (∀ n : ℤ, (n ≥ 0) → Q n) → ( ∀ n : ℤ, (n ≥ m) → Q (n - m) ) := ...</p>",
        "id": 152398558,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545503988
    },
    {
        "content": "<p>The better approach is to accept the fact that your theorem might have some garbage edge cases. It will create more elegant proofs, and it will create lemmas that are easier to use in other proofs.</p>",
        "id": 152398876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545504642
    },
    {
        "content": "<p>How do you avoid the risk of misinterpreting the theorem? Isn't it good to make it as explicit as possible?</p>",
        "id": 152399842,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545506680
    },
    {
        "content": "<p>If you want you can use the \"garbage-include\" version to prove the explicit morally-mathematically-correct version. That shouldn't be hard.</p>",
        "id": 152400178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545507418
    },
    {
        "content": "<p>There is no risk of the theorem being wrong, since lean is checking that. More than likely, if you try to prove anything nontrivial using <code>n - m : nat</code> you will naturally end up needing <code>m &lt;= n</code> at some point, and so you add it to the theorem hypothesis and the garbage is excluded. In this particular case, you never needed this assumption, so it's true even in the \"garbage case\". You can add the assumption anyway if you want, or not.</p>",
        "id": 152400288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545507696
    },
    {
        "content": "<p>I guess it is primarily a matter of not being aware of what the axioms are or how type theory works. I am a little worried that I may run into other unexpected cases. Maybe there is no easy way to avoid that?</p>",
        "id": 152401340,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545509827
    },
    {
        "content": "<p>This came from my attempt to prove that the Principle of Induction implies the Principle of Induction from a Starting Point and being able to leave out m &lt;= n in the consequent. This feels somewhat nontrivial?</p>",
        "id": 152401644,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545510515
    },
    {
        "content": "<p>What is the real theorem you want to state? What you quoted doesn't look like the principle of induction from a starting point</p>",
        "id": 152402330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545512161
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Principle of Induction</span>\n<span class=\"n\">def</span> <span class=\"n\">ind_1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n\n<span class=\"c1\">-- Principle of Induction from a Starting Point</span>\n<span class=\"n\">def</span> <span class=\"n\">ind_2</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">)</span>\n\n<span class=\"c1\">-- Principle of Induction -&gt; Principle of Induction from a Starting Point</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ind_1</span> <span class=\"bp\">→</span> <span class=\"n\">ind_2</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">ind_1</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n            <span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">),</span>\n                <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">),</span> <span class=\"k\">from</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n                    <span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">s6</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s4</span> <span class=\"n\">s5</span><span class=\"o\">,</span>\n                    <span class=\"k\">show</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s6</span><span class=\"o\">,</span>\n                <span class=\"k\">let</span> <span class=\"n\">P&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                <span class=\"k\">have</span> <span class=\"n\">s7</span> <span class=\"o\">:(</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">a1</span> <span class=\"n\">P&#39;</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s8</span> <span class=\"o\">:</span> <span class=\"n\">P&#39;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s1</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s9</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s3</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s10</span> <span class=\"o\">:</span> <span class=\"n\">P&#39;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">s8</span> <span class=\"n\">s9</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s11</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s7</span> <span class=\"n\">s10</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s12</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s11</span><span class=\"o\">,</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                        <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n                        <span class=\"k\">have</span> <span class=\"n\">s14</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">s12</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"c1\">-- did not expect to work</span>\n                        <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 152403321,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545514227
    },
    {
        "content": "<p>To write code on this forum enclose it in three backticks <code> ``` </code></p>",
        "id": 152403526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545514732
    },
    {
        "content": "<p>Even better write <code> ```lean </code> for the first one and  it'll do syntax highlighting</p>",
        "id": 152403577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545514810
    },
    {
        "content": "<p>So if it helps at all, to resolve your last <code>sorry</code> you're going to need to show that <code>m + (n - m) = n</code>. And that will need the hypothesis that <code>n ≥ m</code>.</p>",
        "id": 152403963,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1545515681
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">s14</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">s12</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"c1\">-- did not expect to work</span>\n<span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n</blockquote>\n<p>You may not have expected the first line to work, but I think you will be vindicated when you do the second line</p>",
        "id": 152403968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545515704
    },
    {
        "content": "<p>Why does <code>m + (n - m) = n</code> require <code>n &gt;= m</code>?</p>",
        "id": 152404182,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545516204
    },
    {
        "content": "<p>You may also want to look at <code>nat.less_than_or_equal.rec</code> at some point. It probably doesn't help here, if this is a learning exercise, but it was an \"aha\" moment for me (as a Lean newcomer) to understand why the recursion principle for <code>nat.less_than_or_equal</code> is pretty much exactly induction from a starting point.</p>",
        "id": 152404225,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1545516255
    },
    {
        "content": "<p>because if <code>m &gt; n</code>, then <em>since <code>n - m</code> is a natural number and hence is <code>&gt;= 0</code></em>, we cannot possibly have <code>m + (something nonnegative) = n</code>.</p>",
        "id": 152404226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545516266
    },
    {
        "content": "<p>the fact that <code>n - m</code> is a natural number is purely a fact of its type, it is impossible for any term of that type to not be nonnegative</p>",
        "id": 152404235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545516307
    },
    {
        "content": "<p>If we want to have a function <code>sub : nat -&gt; nat -&gt; nat</code> (and we do), it must not behave like regular subtraction everywhere. We do the next best thing and make it 0 when it ought to be negative</p>",
        "id": 152404278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545516406
    },
    {
        "content": "<p>Not sure if it helps, but the natural number subtraction operation is called <a href=\"https://en.wikipedia.org/wiki/Monus\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Monus\">monus</a> in regular maths</p>",
        "id": 152404285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545516474
    },
    {
        "content": "<p>Is there an easy way to find the theorems for <code>(m + n) ≥ m</code> and <code>m + (n - m) = n</code>?</p>",
        "id": 152405626,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545519429
    },
    {
        "content": "<p>They are all in <code>init.data.nat.lemmas</code> and <code>data.nat.basic</code>. You can browse those files, or try to guess the names like <code>nat.add_sub_...</code> in the autocompletion</p>",
        "id": 152406036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545520337
    },
    {
        "content": "<p>the first one is <code>nat.le_add_left</code></p>",
        "id": 152406038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545520371
    },
    {
        "content": "<p>... and the second is <code>nat.sub_add_cancel</code> (<code>∀ {n m : ℕ}, n ≥ m → n - m + m = n</code>'), modulo a use of commutativity of addition.</p>",
        "id": 152406173,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1545520648
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 152406223,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545520710
    },
    {
        "content": "<p>the commutated version should also be there</p>",
        "id": 152406229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545520744
    },
    {
        "content": "<p>Ah, looks like it's also exactly <code>nat.add_sub_cancel'</code>, from mathlib.</p>",
        "id": 152406232,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1545520758
    },
    {
        "content": "<p>... and <code>nat.add_sub_of_le</code> from the standard library</p>",
        "id": 152406293,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1545520890
    },
    {
        "content": "<p>Completed proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"c1\">-- Principle of Induction</span>\n<span class=\"n\">def</span> <span class=\"n\">ind_1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n\n\n<span class=\"c1\">-- Principle of Induction from a Starting Point</span>\n<span class=\"n\">def</span> <span class=\"n\">ind_2</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span>\n        <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- Principle of Induction -&gt; Principle of Induction from a Starting Point</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ind_1</span> <span class=\"bp\">→</span> <span class=\"n\">ind_2</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">ind_1</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n            <span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">),</span>\n                <span class=\"k\">have</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">),</span> <span class=\"k\">from</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">s4</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n                    <span class=\"k\">have</span> <span class=\"n\">s5</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_add_right</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">s6</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s4</span> <span class=\"n\">s5</span><span class=\"o\">,</span>\n                    <span class=\"k\">show</span> <span class=\"o\">(</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s6</span><span class=\"o\">,</span>\n                <span class=\"k\">let</span> <span class=\"n\">P&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                <span class=\"k\">have</span> <span class=\"n\">s7</span> <span class=\"o\">:(</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">a1</span> <span class=\"n\">P&#39;</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s8</span> <span class=\"o\">:</span> <span class=\"n\">P&#39;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s1</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s9</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s3</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s10</span> <span class=\"o\">:</span> <span class=\"n\">P&#39;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">s8</span> <span class=\"n\">s9</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s11</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P&#39;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">s7</span> <span class=\"n\">s10</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">s12</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">s11</span><span class=\"o\">,</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n                        <span class=\"k\">assume</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n                        <span class=\"k\">have</span> <span class=\"n\">s13</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"n\">s12</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n                        <span class=\"k\">have</span> <span class=\"n\">s14</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">add_sub_of_le</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n                        <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">s14</span> <span class=\"n\">s13</span>\n</pre></div>",
        "id": 152408358,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1545525204
    }
]