[
    {
        "content": "<p>Does  Lean have any feature for covariance with respect to subtypes? I have a type <code>T</code> and its subtype <code>S</code>. I can tag the definition of <code>S</code> with <code>@[reducible]</code> in case it matters. I have a term of type <code>list S</code>. Can I use it in a position of an argument of type <code>list T</code> please? I suspect it doesn't work like that with <code>list</code> but maybe, with some custom types, does it work? I want to use it for types depending on types.</p>",
        "id": 270445926,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643831022
    },
    {
        "content": "<p>The only way I know how to do this is to explicitly write <code>l.map coe</code> to coerce the elements of a list. (That is, you use the <code>map</code> functor to manage covariance yourself.)</p>\n<p>(It might be interesting if there were an attribute (not implemented yet) that you could tag a function to be able to try to automatically construct a subtype version.)</p>",
        "id": 270447224,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643831571
    },
    {
        "content": "<p>Can you make an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of the function to show what you want to do? There might be other solutions.</p>",
        "id": 270447314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643831616
    },
    {
        "content": "<p>Making an MWE for my use case will be a bit harder but I will try.</p>",
        "id": 270447978,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643831881
    },
    {
        "content": "<p>We do have lift instances for list, for going the other way, via tactics</p>",
        "id": 270448129,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643831943
    },
    {
        "content": "<p>For input argument? The other way?!</p>",
        "id": 270448202,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643831982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Subtype.20covariance/near/270448129\">said</a>:</p>\n<blockquote>\n<p>We do have lift instances for list, for going the other way, via tactics</p>\n</blockquote>\n<p>Can you please explain?</p>",
        "id": 270525194,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643882959
    },
    {
        "content": "<p>First of all, we have a general <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_subtype\">docs#coe_subtype</a>. I was referring to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_list\">docs#lift_list</a></p>",
        "id": 270557154,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643898599
    },
    {
        "content": "<p>Does <code>has_lift</code> come automatically whenever we create a subtype? And can we have <code>has_lift</code> for something that is not a subtype?</p>",
        "id": 270727189,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1643987330
    }
]