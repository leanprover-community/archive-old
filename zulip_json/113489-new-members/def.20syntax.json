[
    {
        "content": "<p>Is there a way to make a definition with a condition that is not decidable? I need something like </p>\n<div class=\"codehilite\"><pre><span></span>def my_def := if p then sorry\nelse sorry\n</pre></div>\n\n\n<p>but with <code>p</code> not decidable.</p>",
        "id": 148134203,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542830665
    },
    {
        "content": "<p>the easiest option is to activate classical logic in your <code>section</code> or on the module level:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>add this to the top of your file</p>",
        "id": 148135957,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542832746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">my_def</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">sorry</span>\n<span class=\"k\">else</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 148135962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542832757
    },
    {
        "content": "<p>ah yes, <code>priority 0</code> is a good idea</p>",
        "id": 148135985,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1542832796
    },
    {
        "content": "<p>Thanks for the idea, but also how do I give my condition a name so I can use it in the definition?</p>\n<div class=\"codehilite\"><pre><span></span>protected noncomputable def neg (α : ℝ) : ℝ := if ∃ (p : ℚ), α = lt_rat_r p then sorry\nelse sorry\n</pre></div>\n\n\n<p>This is what I am trying to do, and I need to give a name to my condition so I can use it in the definition.</p>",
        "id": 148136595,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542833512
    },
    {
        "content": "<p>Maybe you want <code>dite</code>? \"dependent if/then/else\"</p>",
        "id": 148136656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542833554
    },
    {
        "content": "<p><code>if h : p then _ else _</code></p>",
        "id": 148136673,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542833582
    },
    {
        "content": "<blockquote>\n<p><code>if h : p then _ else _</code></p>\n</blockquote>\n<p>Oh, thanks. I was trying to do something like this but I was putting too many parenthesis and Lean was complaining. (I was trying to use <code>(h : p)</code>)</p>",
        "id": 148137486,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542834623
    },
    {
        "content": "<blockquote>\n<p>Maybe you want <code>dite</code>? \"dependent if/then/else\"</p>\n</blockquote>\n<p><code>dite</code> also works, but I think I will use <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>'s version for this. Also thanks for this function, I didn't know about it. It seems it can be pretty useful.</p>",
        "id": 148137657,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542834819
    },
    {
        "content": "<p><code>if h : p then _ else _</code> is actually just nicer syntax for <code>dite</code>.</p>",
        "id": 148138067,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542835261
    },
    {
        "content": "<p>Is there a way to make the conditional an <code>∃</code> and then extract the element? It seems like <code>exists.elim</code> will not work here because it expects a <code>Prop</code> at the end (so it only works for proving propositions).</p>",
        "id": 148140541,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542838479
    },
    {
        "content": "<p>use <code>classical.some</code></p>",
        "id": 148140724,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542838687
    },
    {
        "content": "<p>but beware that you don't get much control over which element will be returned</p>",
        "id": 148140739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542838718
    },
    {
        "content": "<p>and of course your function won't be computable</p>",
        "id": 148140835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542838833
    },
    {
        "content": "<p>Maybe it would help, if you could tell us more about what you are actually trying to do</p>",
        "id": 148140845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542838860
    },
    {
        "content": "<p>Thanks! <code>classical.some</code> worked. I did notice the problem that you don't get much control over which element will be returned (so my first attempt to use it failed), but I managed to make it work.</p>",
        "id": 148140975,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542839061
    },
    {
        "content": "<p>It's important to understand that proof irrelevance makes it impossible to prove existence using some witness and hope to get back this witness using <code>some</code>. But that wouldn't make much sense in real world math either</p>",
        "id": 148141013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542839147
    },
    {
        "content": "<p>I mean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- no hope</span>\n</pre></div>\n\n\n<p>is hopeless (and honestly it wouldn't make sense)</p>",
        "id": 148141147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542839302
    },
    {
        "content": "<p>I understand what you mean, but I don't need to prove an existence. I am only doing the law of the excluded middle over a proposition of the type <code> ∃ (x : ℚ), p x</code> with <code>p : ℚ → Prop</code>. So I am only using <code>some</code> to get the witness and use it in the proof, but I don't care what is the witness, so I won't use <code>some</code> to get it back.</p>",
        "id": 148141536,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542839830
    },
    {
        "content": "<p>Good. I still advise you to post your code when you'll be done. It's easy to do suboptimal things in this area, and you may learn useful stuff from reactions here.</p>",
        "id": 148141768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542840205
    },
    {
        "content": "<p>Ok, I will post it here when I am done.</p>",
        "id": 148141840,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542840334
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.rat data.set.basic order.bounds tactic.ring\nopen classical\nlocal attribute [instance, priority 0] classical.prop_decidable\n\nstructure Dedekind_real :=\n(carrier : set ℚ)\n(nonemp : ∃ a, a ∈ carrier)\n(nonrat : ∃ a, a ∉ carrier)\n(down : ∀ (p : ℚ), p ∈ carrier → ∀ (q : ℚ), q ≤ p → q ∈ carrier)\n(nomax : ∀ (p : ℚ), p ∈ carrier → ∃ (q : ℚ), q ∈ carrier ∧ p &lt; q)\n\nnotation `ℝ` := Dedekind_real\n\ninstance : has_coe ℝ (set ℚ) := ⟨λ r, r.carrier⟩\n\nnamespace Dedekind_real\n\nprotected def le (α β : ℝ) : Prop := (α : set ℚ) ⊆ β\n\ninstance : has_le ℝ := ⟨Dedekind_real.le⟩\n\nend Dedekind_real\n\nopen Dedekind_real\n\nlemma bounded_by_non_elements (α : ℝ) (x : ℚ): x ∉ α.carrier ↔ (∀ (q : ℚ), q ∈ α.carrier → q &lt; x) := sorry\n\nlemma real_intro : ∀ {a b : ℝ}, a.carrier = b.carrier → a = b := sorry\n\ntheorem not_exists_not_c {α : Type} {p : α → Prop} : (¬∃ (x : α), ¬p x) ↔ ∀ (x : α), p x := sorry\n\nnamespace Dedekind_real\n\ndef lt_rat_r (p : ℚ) : ℝ := ⟨{q | q &lt; p}, sorry, sorry, sorry, sorry ⟩\n\nprotected noncomputable def neg (α : ℝ) : ℝ := if h : ∃ (p : ℚ), α = lt_rat_r p then lt_rat_r (some h)\nelse ⟨{p : ℚ | ∀ (q : ℚ), q ∈ α.carrier → p + q &lt; 0},\nexists.elim α.nonrat (λ r hr, ⟨-r, (λ q hq, neg_add_lt_of_lt_add (trans_rel_left rat.has_lt.lt\n( (bounded_by_non_elements α r).mp hr q hq) (eq.symm (add_zero r) ) ) ) ⟩ ),\n(classical.by_contradiction (λ h, exists.elim α.nonemp (λ q0 hq0, (not_lt_of_lt (trans_rel_left rat.has_lt.lt\n(lt_add_one 0) (zero_add 1) ) ) (trans_rel_right rat.has_lt.lt (eq.symm (sub_add_cancel 1 q0) )\n(not_exists_not_c.mp h (1-q0) q0 hq0) ) ) ) ),\n(λ p hp q hqp r hrα, lt_of_le_of_lt ((add_le_add_iff_right r).mpr hqp) (hp r hrα) ),\n(λ p hp, dite (∃ (ε : ℚ), (ε &lt; 0 ∧ ∀ (q : ℚ), q ∈ α.carrier → p + q &lt; ε) )\n(λ hε, exists.elim hε (λ ε hε, ⟨p-ε/2, (λ q hq, sorry), sorry⟩))\n(λ hε, false.elim (h ⟨-p, real_intro (set.ext (λ x,\n⟨(λ hx, by calc x = -p + (p + x) : by ring\n... &lt; -p + 0 : add_lt_add_left (hp x hx) (-p)\n... = -p : by ring),\n(λ hx, sorry)⟩ ) ) ⟩ ) ) ) ⟩\n\nend Dedekind_real\n</pre></div>\n\n\n<p>I am not done yet (I skipped some tedious calculations: the three <code>sorry</code> in the definition of <code>neg</code>; I know how to do them, but it seems extremely tedious to do in Lean), but this is what I have. To remove clutter, I removed most of the things irrelevant to this particular definition and added <code>sorry</code> instead of my written proofs for other theorems which are required.</p>\n<p>I am starting to think that I am doing something wrong because this is getting way too tedious.</p>",
        "id": 148147423,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1542849493
    },
    {
        "content": "<p>There is a way to make this computable.</p>",
        "id": 148182360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542901293
    }
]