[
    {
        "content": "<p>I am doing the natural number game. I have a hypothesis h : a + b = a. I would like to use a rewrite rule  </p>\n<p>add_zero (a : mynat) a + 0 = a </p>\n<p>to change the second instance of a in h, but I can't figure out how to apply the rewrite tactic rw to spefic a terms, and not to all occurrences of a in h. </p>\n<p>rw \\l  add_zero at h,</p>\n<p>gives me h: (a + 0) + b = a + 0, which is not what I want. </p>\n<p>rw \\l add_zero at h {1},</p>\n<p>is a syntax error. (I thought it might work, because of this page: <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">https://leanprover.github.io/tutorial/A1_Quick_Reference.html</a>)<br>\nThe documantation about rw is just TODO, and the lean theorem book does not help me either. Does somebody know how to do it?</p>",
        "id": 245610093,
        "sender_full_name": "Nico Beck",
        "timestamp": 1626014292
    },
    {
        "content": "<p>There are a few ways to do a targetted rewrite in Lean but I can't remember how many of them work in NNG. How about instead writing something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>? That's an easy enough fix.</p>",
        "id": 245610613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626015177
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Rewriting.20specific.20term\">#lean4 &gt; Rewriting specific term</a> by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span></p>",
        "id": 245611308,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626015757
    },
    {
        "content": "<p>It's a bit dissatisfying,  but it works. Thanks! I did not know that I could introduce new goals this way.</p>",
        "id": 245612591,
        "sender_full_name": "Nico Beck",
        "timestamp": 1626017579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"426290\">Nico Beck</span> <a href=\"#narrow/stream/113489-new-members/topic/Rewriting.20specific.20term/near/245610093\">said</a>:</p>\n<blockquote>\n<p>(I thought it might work, because of this page: <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">https://leanprover.github.io/tutorial/A1_Quick_Reference.html</a>)</p>\n</blockquote>\n<p>I remember being very confused why I couldn't get any of that to work when I was first learning -- turns out that's a reference for Lean 2, not Lean 3!</p>",
        "id": 245612948,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626018159
    },
    {
        "content": "<p>There are other ways, I just don't remember how many work in NNG, which is using quite an old version of Lean 3 and mathlib (and which doesn't always have the right things imported, so the below may only work on some levels). Here's two more ways:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- h : a + b = a + 0</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- back to h : a + b = a</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"c1\">-- h : a + b = a + 0</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245613005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626018279
    }
]