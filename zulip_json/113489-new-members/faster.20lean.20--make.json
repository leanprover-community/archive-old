[
    {
        "content": "<p>When changing files down in the dependency chain, or after pulling <code>master</code> on a slow or expensive internet connection (so better no <code>leanproject get-cache</code>), I run <code>lean --make src/file/I/plan/to/edit.lean</code> before opening that file in vscode, and that can take a while.<br>\nDoes <code>lean --make</code> support a “fast mode” where it skips checking proofs in dependent files? At least those irrelevant proofs of <code>Prop</code> things? Or is that fundamentally not possible.</p>",
        "id": 269722713,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643370112
    },
    {
        "content": "<p>maybe <code>--old</code> is what you're looking for? <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#old-mode\">here</a> is an overview of it</p>",
        "id": 269723022,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643370293
    },
    {
        "content": "<p>Thanks!<br>\nNot exactly what I had in mind, but also a good trick.  I assume that new lemmas will still be visible through transitive imports, even if the intermediate module’s old lean file was still used?</p>",
        "id": 269725310,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643371494
    },
    {
        "content": "<p><code>lean --help</code> calls it <code>--old-oleans</code>. Is that the same? Should I update the docs to use the full flag name to avoid confusion?</p>",
        "id": 269725311,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643371494
    },
    {
        "content": "<p>What I had in mind could maybe be rephrased as: “Replace every proof of a <code>lemma</code> that produces a <code>Prop</code> and has it’s result type fully spelled out with <code>by sorry</code>”</p>",
        "id": 269725407,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643371542
    },
    {
        "content": "<p>huh, I thought it was just <code>--old</code> but the code disagrees  <a href=\"/user_uploads/3121/qXjvF23pSLIEsfvt4Wh3rhU_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qXjvF23pSLIEsfvt4Wh3rhU_/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qXjvF23pSLIEsfvt4Wh3rhU_/image.png\"></a></div>",
        "id": 269727936,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643372988
    },
    {
        "content": "<p>Do you want to skip checking proofs, but still check definitions? Because if you skip those, your proofs that use defeq will fail.</p>",
        "id": 269729483,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643373783
    },
    {
        "content": "<p>Right, that why I (very naively, I'm very new here) suggest that only for proofs that are irrelevant for downstream modules.</p>",
        "id": 269750895,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643382841
    },
    {
        "content": "<p>I'm afraid namespaces and <code>@[simp]</code> lemmas make this task more challenging than we'd like, because building such dependency chain becomes a semantic task rather than purely syntactical</p>",
        "id": 269752711,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643383483
    },
    {
        "content": "<p>Hmm, I don’t see it yet, can you elaborate?</p>",
        "id": 269753741,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643383897
    },
    {
        "content": "<p>Suppose you have a file A in which <code>bar</code> is declared in the namespace <code>foo</code>. Then file B imports A and opens <code>foo</code> in order to use <code>bar</code>. Now, in the file C, <code>bar</code> is declared openly, even though it also imports A. B and C import A and make use of <code>bar</code> (without dots), but they're talking about different declarations of <code>bar</code></p>",
        "id": 269754627,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643384231
    },
    {
        "content": "<p>It might be possible to figure that out with some meticulous parsing, but it doesn't look like an easy task to me.</p>\n<p>And in the case of <code>simp</code> lemmas, it's really impossible to know they're being used just by parsing text files</p>",
        "id": 269755278,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643384516
    },
    {
        "content": "<p>Using a lemma does not mean you necessarily need to know the proof of the lemma though. <code>simp [foo.bar]</code> doesn't care about the proof of <code>foo.bar</code>. The question is what would break if we replaced all proofs of lemmas by <code>sorry</code>.</p>",
        "id": 269755946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643384779
    },
    {
        "content": "<p>I think this was discussed long ago but I don't remember if there was a conclusion about whether a feature like this could work.</p>",
        "id": 269756036,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643384816
    },
    {
        "content": "<p>Right, I am _not_ talking about only checking the “obvious dependencies” on a symbol level of the file I care about (that is hardly possible with <code>simp</code> and instances etc.), but about skipping the checking of (all irrelevant) proofs.<br>\nAlthough that’s done in parallel anyways, isn’t it? So maybe it wouldn’t help that much.</p>",
        "id": 269756947,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643385187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113489-new-members/topic/faster.20lean.20--make/near/269725311\">said</a>:</p>\n<blockquote>\n<p><code>lean --help</code> calls it <code>--old-oleans</code>. Is that the same? Should I update the docs to use the full flag name to avoid confusion?</p>\n</blockquote>\n<p>You could update the doc if you like, it seems most people here just call it old though, as getopt_long is used, unambiguous abbreviations are allowed in command line args. Even the original PR description <a href=\"https://github.com/leanprover-community/lean/pull/208\">https://github.com/leanprover-community/lean/pull/208</a> calls it old <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269758341,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643385722
    }
]