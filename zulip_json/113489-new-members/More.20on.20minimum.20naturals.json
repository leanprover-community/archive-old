[
    {
        "content": "<p>Hi! I'm still struggling with minimum natural number in a set and how to use <code>nat.find</code> and friends. Here's a (probably) minimal example (I wouldn't call it working though!). We define a simple predicate <code>p2</code> (which appears to be undecidable), show the set of naturals satisfying it is nonempty, and then try to show its minimum is positive.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.lattice</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hp2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p2</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h32</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h32</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hp2_not0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p2</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_not0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h_not0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">min_p2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find</span> <span class=\"n\">hp2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_p5_positive</span> <span class=\"o\">:</span> <span class=\"n\">min_p2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">min_p2_spec</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we must now show that min_p2 = 0 leads to a contradiction</span>\n  <span class=\"c1\">-- we know ¬ p2 0; how can we substitute this in?</span>\n  <span class=\"c1\">-- in particular, the following rw line fails, as it cannot</span>\n  <span class=\"c1\">-- unify(?) nat.find hp2 with min_p2, despite the latter</span>\n  <span class=\"c1\">-- being defined as the former.</span>\n  <span class=\"c1\">-- rw h at min_p2_spec,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any help filling in the <code>sorry</code> would be appreciated! Then I'll try to apply that to my bigger problem...</p>",
        "id": 260372683,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636096986
    },
    {
        "content": "<p>You've solved all the <code>nat.find</code> aspects of the problem already.</p>",
        "id": 260372898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636097259
    },
    {
        "content": "<p>You are left with showing that <code>\\not (p2 0)</code> and <code>p2 x</code> imply <code>x &gt; 0</code>.</p>",
        "id": 260372965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636097305
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">min_p5_positive</span> <span class=\"o\">:</span> <span class=\"n\">min_p2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">min_p2_spec</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_spec</span> <span class=\"n\">hp2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.pos_of_ne_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp2_not0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">min_p2_spec</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 260373118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636097473
    },
    {
        "content": "<p>Oh, magic, thanks! One key error I made here was using <code>let</code> instead of <code>have</code>. I'll get there <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 260378413,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1636102086
    },
    {
        "content": "<p>No, I don't think that really mattered.</p>",
        "id": 260378670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636102296
    }
]