[
    {
        "content": "<p>Still making first steps with Lean. In the following code, <code>to_zero</code> is a function which calls itself recursively until it reaches 0 (just as a test dummy). When I move my cursor to the <code>succ</code> case, it shows that my induction hypothesis is <code>n_ih✝ : to_zero m = 0</code>, which is exactly what I need. But because it is marked as <code>✝</code> I can not use it directly, and have to use <code>*</code> instead. How do I use the IH directly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">to_zero_always_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_zero</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_zero</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">]</span> <span class=\"c1\">-- unknown identifier n_ih</span>\n</code></pre></div>",
        "id": 278419715,
        "sender_full_name": "Max",
        "timestamp": 1649523757
    },
    {
        "content": "<p>use <code>| succ m ih =&gt;</code> in the second case</p>",
        "id": 278419737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649523804
    },
    {
        "content": "<p>That works.</p>",
        "id": 278419796,
        "sender_full_name": "Max",
        "timestamp": 1649523861
    },
    {
        "content": "<p>Can I bind any <code>✝</code> identifiers that way, or is it specific to IHs?</p>",
        "id": 278419819,
        "sender_full_name": "Max",
        "timestamp": 1649523911
    },
    {
        "content": "<p>it is specific to IHs</p>",
        "id": 278419840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649523947
    },
    {
        "content": "<p>each tactic has its own syntax to supply the names of introduced arguments</p>",
        "id": 278419883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649523967
    },
    {
        "content": "<p>there is also <code>rename_i</code>, which will rename the last few inaccessible names in the context to provided names, which works generically</p>",
        "id": 278419900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649524009
    },
    {
        "content": "<p>so for example you could also write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">to_zero_always_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">to_zero</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_zero</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rename_i</span> <span class=\"n\">ih</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">to_zero</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 278419915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649524035
    },
    {
        "content": "<p>Ah, so if I was feeling fancy I could make my own induction tactic with crazy syntax to assign the hypotheses names.<br>\nNeat, gonna remember <code>rename_i</code>.</p>",
        "id": 278419922,
        "sender_full_name": "Max",
        "timestamp": 1649524058
    },
    {
        "content": "<p>but I think it is cleaner to provide the names up-front when possible</p>",
        "id": 278419923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649524060
    },
    {
        "content": "<p>Yeah.<br>\nAwesome, thanks!</p>",
        "id": 278419932,
        "sender_full_name": "Max",
        "timestamp": 1649524068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max</span> has marked this topic as resolved.</p>",
        "id": 278419984,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649524093
    }
]