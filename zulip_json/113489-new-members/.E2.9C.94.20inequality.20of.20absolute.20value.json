[
    {
        "content": "<p>I'm trying to prove some inequality things, and want to use very similar method as below,<br>\nI just write out a simple thing as a example to see if that works, but I found it is hard to prove |b| &gt; 1 (for integer b not equal to 0). <br>\nAny suggestions?<br>\n<a href=\"/user_uploads/3121/9CQ3OgT270aFp9dlhobMj60q/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9CQ3OgT270aFp9dlhobMj60q/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9CQ3OgT270aFp9dlhobMj60q/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"c1\">-- hb : b ≠ 0</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272884675,
        "sender_full_name": "Artizuala",
        "timestamp": 1645574637
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"480748\">@Artizuala</span>, welcome!  Could you please copy-paste your code here and enclose it in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> so that we can study it more easily?</p>",
        "id": 272884989,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645574866
    },
    {
        "content": "<p>Sorry I'm not sure how to do it. i just past parts of code in above question box.</p>",
        "id": 272885350,
        "sender_full_name": "Artizuala",
        "timestamp": 1645575159
    },
    {
        "content": "<p>click on the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> link to read how to do it. You can edit your original post.</p>",
        "id": 272885388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645575189
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"c1\">-- hb : b ≠ 0</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- probably not the quickest way to do it</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"bp\">|</span><span class=\"o\">,</span> <span class=\"c1\">-- mathlib lemmas use ≤ not ≥</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_abs</span><span class=\"o\">,</span> <span class=\"c1\">-- get rid of abs</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">0</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hb</span><span class=\"o\">),</span> <span class=\"c1\">-- three cases</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span> <span class=\"c1\">-- b &lt; 0</span>\n    <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span> <span class=\"c1\">-- b = 0 can't happen</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"c1\">-- b &gt; 0</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272885562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645575323
    },
    {
        "content": "<p>I couldn't figure out how to do it without splitting into the three cases b&lt;0, b=0 and b&gt;0.</p>",
        "id": 272885599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645575354
    },
    {
        "content": "<p>You should change your goal to <code>|a| ≤ |a * b|</code> as well really; we don't like <code>≥</code> (if we allowed it then we'd end up with twice as many inequality lemmas).</p>",
        "id": 272885721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645575421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480748\">Artizuala</span> has marked this topic as resolved.</p>",
        "id": 272885926,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645575580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480748\">@Artizuala</span>  Here's a way to do this kind of thing with minimal human effort, although requiring extra computational power:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"bp\">|</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">hb</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">abs_cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₁</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">abs_cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">h₂</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272888064,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645577180
    },
    {
        "content": "<p>hi, please help me, They are asking me to compact the following 3 theorems into one using perhaps the logical connector of disjunction. I would have wanted to just use what was shown in mathlib but it won't let me. The teacher gave us this advance, he says that with this we try to simulate the following definition, you can use the theorem command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">def1</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">def2</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_eq_zero.mpr</span> <span class=\"n\">h1</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">def3</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_of_neg</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/a3XohWE-DM8BjKsXSEyg8Tq9/imagen.png\">imagen.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/a3XohWE-DM8BjKsXSEyg8Tq9/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/a3XohWE-DM8BjKsXSEyg8Tq9/imagen.png\"></a></div>",
        "id": 276532626,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1648152434
    },
    {
        "content": "<p>It's best to start your own new topic. Also that looks like a definition, not a thing you're going to prove. Are you sure your teacher said to use <code>theorem</code>?</p>",
        "id": 276534252,
        "sender_full_name": "Julian Berman",
        "timestamp": 1648153291
    },
    {
        "content": "<p>Hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Can you prove it from here? (BTW, are you sure your teacher said disjunction and not conjunction?)</p>",
        "id": 276534527,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648153435
    },
    {
        "content": "<p>thank you this proof is accepted</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">final</span><span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_eq_zero.mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">abs_of_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>now I am asked to prove the following theorem with this result, how could I start it?<br>\n<a href=\"/user_uploads/3121/lxkfRFrRWbAkk4ETqS8NZoO9/imagen.png\">imagen.png</a>  a hint please</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lxkfRFrRWbAkk4ETqS8NZoO9/imagen.png\" title=\"imagen.png\"><img src=\"/user_uploads/3121/lxkfRFrRWbAkk4ETqS8NZoO9/imagen.png\"></a></div>",
        "id": 276560959,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1648171389
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now you have three goals:</span>\n  <span class=\"c1\">-- one goal for a &lt; 0, one for a = 0 and one for a &gt; 0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276577123,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648184786
    },
    {
        "content": "<p>I think you were really supposed to use disjunction before, like <code>a &gt; 0 and abs a = a or ...</code></p>",
        "id": 276595373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648201555
    },
    {
        "content": "<p>In case of disjunction, this might be a good start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">final</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">abs_mul'</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"bp\">@</span><span class=\"n\">final</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You may also need to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_pos\">docs#mul_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linarith.mul_neg\">docs#linarith.mul_neg</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/neg_mul_eq_mul_neg\">docs#neg_mul_eq_mul_neg</a></p>",
        "id": 276625319,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1648217994
    }
]