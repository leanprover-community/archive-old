[
    {
        "content": "<p>I can use the dot notation to reference lemmas about a specific natural number e.g. <code>3</code> or a variable <code>n</code> of type ℕ. However, the dot notation doesn't appear to work for referencing an additive group lemma for a variable of type  α with the hypothesis <code>[add_group α] </code>. Should I be surprised by this?</p>\n<p>(As an aside, I seem to have to specifically cast <code>3</code> as <code>ℕ</code> rather than that being the default in this situation.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">n.eq_zero_or_pos</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">-- \"invalid field notation, type is not of the form (C ...) where C is a constant\"</span>\n<span class=\"k\">#check</span> <span class=\"n\">c.add_left_neg</span>\n</code></pre></div>\n<p>Christopher</p>",
        "id": 231205776,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1616320264
    },
    {
        "content": "<p>I'm no expert but I'm pretty sure this is normal. Some lemmas are designed to work with dot notation; others aren't. <code>add_left_neg</code> does not strike me as one of the ones that would work.</p>",
        "id": 231206474,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1616321171
    },
    {
        "content": "<p>The way dot notation works is that if <code>a : foo x Y z</code> then <code>a.bar</code> means <code>foo.bar a</code>. So n.succ works if n : nat because nat.succ exists. If you have alpha : Type then alpha.blah will not see any hypotheses on alpha like add_group, my guess is that it will just look for Type.blah .</p>",
        "id": 231209331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616324753
    },
    {
        "content": "<p>It doesn't even look for that; from the error message \"type is not of the form (C ...) where C is a constant\". Here, <code>C</code> is <code>α</code> which is not a constant (unlike <code>nat</code> or <code>foo</code> which would be constants)</p>",
        "id": 231209790,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616325277
    },
    {
        "content": "<p>Yet something like this appears to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">point</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">point</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">p.x</span> <span class=\"bp\">+</span> <span class=\"n\">q.x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p.y</span> <span class=\"bp\">+</span> <span class=\"n\">q.y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_comm</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.add</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q.add</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">point</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">r.add</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">r.add_comm</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>(Based on an example of a <code>point</code> structure in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\">Section 9.1</a> of 'Theorem proving in lean' .</p>",
        "id": 231228071,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1616346302
    },
    {
        "content": "<p>Yes, that works because 1) the type of <code>r</code> is <code>point</code> which is the prefix of <code>point.add</code>, and 2) <code>point</code> is a constant, not a variable</p>",
        "id": 231228187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616346435
    },
    {
        "content": "<p>Dot notation also requires the parameter of type <code>point</code> to be explicit (using round parentheses, not curly or square ones).</p>",
        "id": 231228481,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616346802
    },
    {
        "content": "<p>The key words are \"first non-implicit argument\" in the TPiL section you linked to above.</p>",
        "id": 231228579,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616346910
    },
    {
        "content": "<p>So, the group example can be made to work something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_left_inv'</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">group.mul_left_inv</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g.mul_left_inv'</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">group.mul_left_inv'</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>My grasp of type theory is too weak to understand the distinction between <code>constant g : group G</code> and <code>variable h : G</code> here.</p>",
        "id": 231229748,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1616348231
    },
    {
        "content": "<p><code>constant</code> is a distraction here, that would work just the same with <code>variable</code></p>",
        "id": 231230153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616348684
    },
    {
        "content": "<p>If I change it to <code>variable g : group G</code> then <code>#check g.mul_left_inv'</code> gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 231230307,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1616348857
    },
    {
        "content": "<p>Oh, odd. Either way, you basically never want to use <code>constant</code>, so while an interesting quirk this probably isn't going to be relevant to you</p>",
        "id": 231230653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616349216
    },
    {
        "content": "<p>The (huge) difference between <code>g : group G</code> and <code>h : G</code> is that the first one means \"g is a multiplication, an inverse, an identity, and proofs of three or more axioms\" and the second one means \"h is an element of the set G, or the type G, or however you want to think of it\".</p>",
        "id": 231232203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616350757
    },
    {
        "content": "<p>Thanks - I did wonder if that was the case, but I was surprised to see <code>group.mul_left_inv' g : g⁻¹ * g = 1</code> in the Infoview for <code>#check g.mul_left_inv'</code> - it seems to be accepting <code>g</code> as an element of the group, rather than as the group axioms.</p>",
        "id": 231233169,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1616351837
    }
]