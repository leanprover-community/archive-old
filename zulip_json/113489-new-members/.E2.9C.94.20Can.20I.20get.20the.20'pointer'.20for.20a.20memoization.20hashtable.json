[
    {
        "content": "<p>For memoization, I'd like to get the pointer (or unique memory id, or whatever) for a data type.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.hash_map</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">fib_cache</span> <span class=\"o\">:=</span> <span class=\"n\">hash_map</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib_memoized</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"n\">fib_cache</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">s.find</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n    <span class=\"k\">do</span>\n    <span class=\"n\">f2</span> <span class=\"bp\">←</span> <span class=\"n\">fib_memoized</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">f1</span> <span class=\"bp\">←</span> <span class=\"n\">fib_memoized</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f1</span> <span class=\"bp\">+</span> <span class=\"n\">f2</span><span class=\"o\">,</span>\n    <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n    <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">s.insert</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">return</span> <span class=\"n\">f</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">fib_memoized</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">mk_hash_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"c1\">-- great, works fast enough</span>\n<span class=\"k\">#eval</span> <span class=\"n\">fib</span> <span class=\"mi\">10000</span>\n\n\n<span class=\"c1\">-- now how can I hash the 'pointer' to an inductive datatype? (I'm fine with</span>\n<span class=\"c1\">-- multiple reflexively equivalent copies of the same data in the hashmap).</span>\n<span class=\"c1\">-- I need to use the pointer as the full trees may be extremely large</span>\n<span class=\"c1\">-- (containing many of the same object).</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">circuit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span>\n<span class=\"bp\">|</span> <span class=\"n\">xor</span> <span class=\"o\">:</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">circuit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit</span>\n</code></pre></div>\n<p>See also <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/acyclic.20datastrucure.html\">https://leanprover-community.github.io/archive/stream/113488-general/topic/acyclic.20datastrucure.html</a></p>",
        "id": 266236067,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1640674022
    },
    {
        "content": "<p>I'd also like the property that ptr \\neq ptr' implies that the objects aren't equal so that it's possible to prove things.<br>\nI can also just sorry this if needed.</p>",
        "id": 266236157,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1640674111
    },
    {
        "content": "<p>I've actually been thinking about circuits recently myself, for theorems about circuit complexity (which seem easier than general computational complexity). My recommendation is not to use an inductive datatype, at least not like that. Instead you can have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">circuit_op</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit_op</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit_op</span>\n<span class=\"bp\">|</span> <span class=\"n\">xor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit_op</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit_op</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit_op</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">circuit_op</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">circuit'</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"n\">circuit_op</span>\n</code></pre></div>\n<p>with some additional constraints on the indices to ensure things are decreasing</p>",
        "id": 266236618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640674595
    },
    {
        "content": "<p>The inductive datatype you give can also be used as a non-computational \"model\" for the explicit list version here</p>",
        "id": 266236644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640674648
    },
    {
        "content": "<p>i.e. there is a map from <code>circuit'</code> to a downward closed <code>finset circuit</code></p>",
        "id": 266236712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640674714
    },
    {
        "content": "<p>Yeah, that would work.<br>\nIt'd be nicer to just use the naive datastructure, but I guess you can't always get what you want.</p>",
        "id": 266236742,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1640674768
    },
    {
        "content": "<p>You can use the naive datastructure for some things, but for some theorems you will want to have an explicit graph representation with labeled nodes</p>",
        "id": 266236837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640674818
    },
    {
        "content": "<p>My current issue is that the naive datastructure is way too slow, but that could be an issue too.</p>",
        "id": 266236899,
        "sender_full_name": "Ryan Greenblatt",
        "timestamp": 1640674866
    },
    {
        "content": "<p>because things like circuit size is not simply recursive on the structure of the formula</p>",
        "id": 266236905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640674869
    },
    {
        "content": "<p>The <code>list circuit_op</code> version will be relatively fast, <code>buffer circuit_op</code> will probably be as good as you can get in the lean 3 interpreter</p>",
        "id": 266236916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640674906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457807\">Ryan Greenblatt</span> has marked this topic as resolved.</p>",
        "id": 266236975,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640674988
    }
]