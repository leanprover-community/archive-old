[
    {
        "content": "<p>The state of lean is like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_right_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">lhs</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">metavariable</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is there a way to use add_right_eq_zero here?   Thank you for your help</p>",
        "id": 308280141,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1667755940
    },
    {
        "content": "<p>That error is Leanspeak for \"<code>add_right_eq_zero</code> works on some numbers and Lean can't guess which ones you want it to apply to\" for whatever reason</p>",
        "id": 308281311,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667756749
    },
    {
        "content": "<p>You should be able to help it out by doing <code>rw @add_right_eq_zero b (c * b) at h</code> or whichever two terms you want to pass in, which tells Lean you're going to explicitly tell it which things you meant to apply that lemma to, though I can't see what you're going to do once you have that (but possibly I haven't thought hard enough)</p>",
        "id": 308281415,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667756798
    },
    {
        "content": "<p>You can also provide only some things explicitly, so <code>rw @add_right_eq_zero b _</code> may already do what you want, the <code>_</code> means \"figure this out again\"</p>",
        "id": 308281554,
        "sender_full_name": "Julian Berman",
        "timestamp": 1667756874
    },
    {
        "content": "<p>In NNG, <code>add_right_eq_zero</code> is an implication, not an iff. Try <code>exact add_right_eq_zero h</code></p>",
        "id": 308281610,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667756897
    },
    {
        "content": "<p>Wonderful.  Thank you.   </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">add_right_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>did just what I wanted.  Interesting that the order \"(c*b) b\" was the other way around to what I expected.</p>",
        "id": 308282607,
        "sender_full_name": "Joe Lambourne",
        "timestamp": 1667757595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"561661\">Joe Lambourne</span> has marked this topic as resolved.</p>",
        "id": 308282615,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667757602
    },
    {
        "content": "<p>Are you sure that's what you wanted? Theorem <code>add_right_eq_zero</code> is not supposed to be used like that in rewriting. After you do <code>rw @add_right_eq_zero (c*b) b at h</code> you get two goals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>while <code>exact add_right_eq_zero h</code> would close the main goal directly. <em>\"Interesting that the order <code>(c*b) b</code> was the other way around to what I expected.\"</em> sounds like you misunderstood the statement of the theorem.</p>",
        "id": 308286470,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1667760355
    }
]