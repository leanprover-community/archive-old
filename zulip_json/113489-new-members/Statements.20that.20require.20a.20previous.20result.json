[
    {
        "content": "<p>How do you state something that only makes sense using some previous result? Consider the following MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">A_eq_B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">does_not_typecheck</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- this one is problematic</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The lemma generates the error \"type mismatch at application f = g term has type B → B but is expected to have type A → A\". What would be the correct way to state this lemma in Lean that somehow uses the fact that A = B?</p>",
        "id": 187759079,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1581255070
    },
    {
        "content": "<p>There are two ways, neither very good. You can use <code>f == g</code> to assert that <code>f</code> and <code>g</code> have the same type, or you can use <code>eq.rec</code> to convert one type to the other</p>",
        "id": 187759153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581255232
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">A_eq_B</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">A_eq_B</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">A_eq_B</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">A_eq_B</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187759214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581255316
    },
    {
        "content": "<p>But the real answer is: don't do this</p>",
        "id": 187759216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581255334
    },
    {
        "content": "<p>in your real example it might be warranted, but in this example it's clearly a bad idea</p>",
        "id": 187759262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581255370
    },
    {
        "content": "<p>There is an easy <code>cases; refl</code> proof in this case because <code>f</code> and <code>g</code> are the same function, but in real examples the proof would be harder</p>",
        "id": 187759402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581255670
    },
    {
        "content": "<p>Thank you for the answer. I experimented with <code>eq.rec_on</code>, and while I was able to prove the lemma that inspired this question, I ran into problems when trying to apply the lemma (as you predicted). However I am working with categories and found a solution using <code>eq_to_hom</code> where all the instances of <code>eq_to_hom</code> cancel out nicely.</p>",
        "id": 187760795,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1581258571
    },
    {
        "content": "<p>Equality of types is a hairy thing. In your example you'd be better off knowing that if A=B then there's a map from A to B, and using this map instead of all these heq workarounds</p>",
        "id": 187765291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581267490
    },
    {
        "content": "<p>At one point when doing basic group theory I had two equal normal subgroups of a group and I wanted to identify the quotients. I did it by writing down maps both ways between them instead of trying to use <code>=</code></p>",
        "id": 187765308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581267602
    }
]