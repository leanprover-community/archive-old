[
    {
        "content": "<p>I am playing the complex number game, and came across this paradoxical behavior.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">I_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">I</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>leaves me with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>in infoview. But deleting <code>unfold</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">I_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">true</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>in infoview. What's going on here? Why does <code>h</code> flip from <code>false</code> to <code>true</code>?</p>",
        "id": 277484070,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648850781
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 277484161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648850841
    },
    {
        "content": "<p>If you want my guess, <code>simp * at h</code> can't figure out how to simplify <code>h</code> without the unfold, but rather than fail the simplifier decides that it will use <code>h</code> to simplify <code>h</code>, and ends up simplifying it to <code>true</code>.</p>",
        "id": 277484759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851245
    },
    {
        "content": "<p>yeah:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"c1\">-- `hP : true`</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277484928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851365
    },
    {
        "content": "<p>But that's completely wrong, no? Mathematically speaking the truth value of <code>h</code> is <code>false</code>, no matter what</p>",
        "id": 277484938,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648851378
    },
    {
        "content": "<p>But <code>h</code> implies <code>h</code>, so because we have <code>h</code> as an assumption we can also reduce <code>h</code> to <code>true</code></p>",
        "id": 277484958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851402
    },
    {
        "content": "<p><code>2+2=5</code> is false, but if you assume that <code>2+2=5</code> you can reduce the equation to <code>5=5</code></p>",
        "id": 277485011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851454
    },
    {
        "content": "<p>I feel uneasy about this but I understand what you are saying</p>",
        "id": 277485028,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648851474
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hP</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hPQ</span><span class=\"o\">,</span> <span class=\"c1\">-- `hPQ : Q`</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277485170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851570
    },
    {
        "content": "<p>Here's another way of thinking about it: you are using a logical machine to do computations but right now you have a false assumption, and explicitly asking the machine to use the false assumption clearly has the consequence that the machine can say anything it wants and find some logical way to justify it.</p>",
        "id": 277485265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851637
    },
    {
        "content": "<p>In the example above, of course if we know <code>P</code> then we can reduce <code>P &lt;-&gt; Q</code> to <code>Q</code> -- that's just basic logic. But if <code>P</code> is false and <code>Q</code> is true we have \"reduced a false statement to a true statement\" on the face of it -- but only by assuming a false statement along the way.</p>",
        "id": 277485335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851709
    },
    {
        "content": "<p>Simplifying <code>h</code> by <code>h</code> sounds like a wrong turn, though. Do we ever want to do that?</p>",
        "id": 277485523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648851811
    },
    {
        "content": "<p>I agree that it's hard to imagine that it can ever be useful. Perhaps it was a last resort (note that it didn't happen when unfolding <code>I</code> first).</p>",
        "id": 277485739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648851934
    },
    {
        "content": "<p>Your code is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (it's missing some declarations/imports), but notice that failing to simplify <code>h</code> to <code>false</code> and having it being simplified to <code>true</code> instead is a loss of information, if we can think like this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- exact h would work after this!</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>                   <span class=\"c1\">-- but now I have `h : true` :(</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It's a loss of information because it's a trivial type, easily proven by <code>trivial</code>, even:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>In the case where you succeeded to simplify <code>h</code> to <code>false</code>, try using <code>squeeze_simp * at h</code> instead and you should be able to see what was used to achieve that</p>",
        "id": 277486965,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648852878
    },
    {
        "content": "<p>Are you saying that it's a loss of information because nothing follows from <code>true</code> and everything follows from <code>false</code>?</p>",
        "id": 277489690,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648855012
    },
    {
        "content": "<p>I thought that <code>unfold</code> does not actually do anything, just makes something easier to read. This example made me realize it's more complicated than that</p>",
        "id": 277489730,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1648855073
    },
    {
        "content": "<p>Well, technically speaking <code>true</code> follows from <code>true</code>, but you can't go much further than that I believe</p>",
        "id": 277489791,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648855099
    },
    {
        "content": "<p>As Yael says, this is arguably a bug in <code>simp</code>, because <code>simp [h] at h</code> shouldn't really just simplify <code>h</code> to <code>true</code> if it can't think of anything better to do. But logically it's fine.</p>",
        "id": 277489840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648855175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/113489-new-members/topic/weird.20behavior.20of.20.60unfold.60/near/277489730\">said</a>:</p>\n<blockquote>\n<p>I thought that <code>unfold</code> does not actually do anything, just makes something easier to read. This example made me realize it's more complicated than that</p>\n</blockquote>\n<p>Sorry if I speak too CS'ish, but for the computer, what we see written differently may represent very different types</p>",
        "id": 277489957,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648855286
    },
    {
        "content": "<p>Another way of saying the same thing is that with <code>simp [h] at h</code> you are instructing lean to use <code>h</code> in its simplifications.</p>\n<p>Maybe, it would have appeared less weird if the assumption have been something more complicated.  Suppose that <code>P A : Prop</code>.  Using <code>simp [h]</code> on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"k\">then</span> <span class=\"n\">P</span> <span class=\"k\">else</span> <span class=\"n\">Q</span>\n</code></pre></div>\n<p>should (untested) produce <code>P</code>.  The actual truth values of <code>P</code> or <code>Q</code> is irrelevant: you have provided the assertion that <code>h</code> can be assumed true throughout.</p>\n<p>If you are happy with this, you can now apply the previous reduction in the case where <code>P = h</code>.</p>",
        "id": 277508653,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1648878470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/weird.20behavior.20of.20.60unfold.60/near/277489840\">said</a>:</p>\n<blockquote>\n<p>As Yael says, this is arguably a bug in <code>simp</code>, because <code>simp [h] at h</code> shouldn't really just simplify <code>h</code> to <code>true</code> if it can't think of anything better to do. But logically it's fine.</p>\n</blockquote>\n<p>Maybe the bug is that <code>simp</code> isn't keeping around every assumption it's used at the end. One way to think about it is that <code>simp</code> is deriving <code>true</code> from <code>h</code> and then deleting the original <code>h</code>.  For example, if we've got <code>h : P</code> and then <code>simp [h] at h</code>, we might expect to see <code>h_1 : P</code> and <code>h : true</code> instead.</p>\n<p>We see <code>simp</code> keep around original assumptions if they're part of complicated dependent types elsewhere.</p>",
        "id": 277543702,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648923488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414458\">Vasily Ilin</span> <a href=\"#narrow/stream/113489-new-members/topic/weird.20behavior.20of.20.60unfold.60/near/277484938\">said</a>:</p>\n<blockquote>\n<p>But that's completely wrong, no? Mathematically speaking the truth value of <code>h</code> is <code>false</code>, no matter what</p>\n</blockquote>\n<p>Maybe you'll feel more at ease about it seeing what <code>simp</code> is effectively doing here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- simp [h] at h,</span>\n  <span class=\"k\">have</span> <span class=\"n\">old_h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">old_h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">old_h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now h : true (but it's a different h from what we started with)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277543892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648923762
    }
]