[
    {
        "content": "<p>I'm just playing around with Toy examples for inductive families. For the following code I'm getting the error: <code>\"eliminator\" elaborator failed to compute the motive</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">eo</span> <span class=\"o\">:</span> <span class=\"n\">eo_index</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">eo_index</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">eo</span> <span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Why is this? It seems to me like it should be able to find the motive very easily by just looking at the type signature of <code>test</code>: <code>C:\\Pi (i: eo_index) (n:nat) (e:eo i n) ,X</code></p>",
        "id": 205987138,
        "sender_full_name": "Chris M",
        "timestamp": 1596601187
    },
    {
        "content": "<p>This is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it has no definition of <code>eo_index</code></p>",
        "id": 205990419,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596606582
    },
    {
        "content": "<p><code>eo.rec_on</code> eliminates to <code>Prop</code></p>",
        "id": 205991399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596608030
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">eo_index</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">eo_index</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">eo</span> <span class=\"o\">:</span> <span class=\"n\">eo_index</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">eo_index</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">e</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 205991440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596608052
    },
    {
        "content": "<p><code>eo</code> is  Prop, so it cannot \"eliminate into data\"</p>",
        "id": 205991446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596608063
    },
    {
        "content": "<p>and here's the fix:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">eo_index</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">eo_index</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">eo</span> <span class=\"o\">:</span> <span class=\"n\">eo_index</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_zero</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">even_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">odd_of_even_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">even_of_odd_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">not_odd_zero</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">odd</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">eo_index</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">eo</span> <span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"mi\">0</span>     <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">const</span>\n<span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">test</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"err\">$</span> <span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">odd_of_even_succ</span> <span class=\"n\">H</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd</span>  <span class=\"mi\">0</span>     <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">H</span> <span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">not_odd_zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">odd</span>  <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">test</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"err\">$</span> <span class=\"n\">eo</span><span class=\"bp\">.</span><span class=\"n\">even_of_odd_succ</span> <span class=\"n\">H</span>\n</code></pre></div>",
        "id": 205991634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596608342
    },
    {
        "content": "<p>the trick is to not recurse on <code>eo</code></p>",
        "id": 205991642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596608351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/why.20is.20Lean.20not.20able.20to.20compute.20the.20motive.20here.3F/near/205990419\">said</a>:</p>\n<blockquote>\n<p>This is not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it has no definition of <code>eo_index</code></p>\n</blockquote>\n<p>sorry my bad, I missed it, edited</p>",
        "id": 206036181,
        "sender_full_name": "Chris M",
        "timestamp": 1596641084
    }
]