[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.circle</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.dihedral</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"n\">dihedral_group</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conj_nat</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conj</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245612434,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626017329
    },
    {
        "content": "<p>Since there exists a conj_of_real theorem, how can I cast the k to a real so I can apply conj_of_real? Or is there another way than casting?</p>",
        "id": 245612457,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626017403
    },
    {
        "content": "<p>I get an <code>unknown identifier conj</code> error in your code. Can you supply a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 245612573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626017530
    },
    {
        "content": "<p>Does that work?</p>",
        "id": 245612594,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626017606
    },
    {
        "content": "<p>I think you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.map_nat_cast\">docs#ring_hom.map_nat_cast</a></p>",
        "id": 245612649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626017671
    },
    {
        "content": "<p>Ahh thank you!</p>",
        "id": 245612729,
        "sender_full_name": "Shadman Sakib",
        "timestamp": 1626017817
    },
    {
        "content": "<p>Note that you could have just asked lean this rather than asking a human:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conj_nat</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245612785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626017887
    }
]