[
    {
        "content": "<p>The examples at the end of chapter 3 of tutorial \"Theorem proving in Lean\" are very easy, except the one in subj. If I try to construct it as is, I have to construct false from two functions, which I can get by <a href=\"http://iff.mp\" target=\"_blank\" title=\"http://iff.mp\">iff.mp</a> and iff.mpr - but I have no objects to apply these functions. I found propext constant, which allowed me to convert iff to an equality of p = ¬p, but I don't see how to prove (p = ¬p) → false. In Idris language such proofs are built by \"impossible\" keyword, but I cannot find anything similar in Lean. Am I missing something basic?</p>",
        "id": 133107905,
        "sender_full_name": "Andrew Skiba",
        "timestamp": 1535699222
    },
    {
        "content": "<p>Here's what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_true</span>  <span class=\"n\">p</span>  <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">q</span> <span class=\"n\">p</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_false</span> <span class=\"n\">np</span> <span class=\"o\">:=</span> <span class=\"n\">np</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">q</span> <span class=\"n\">np</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133108380,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535699980
    },
    {
        "content": "<p>Perhaps the key to remember here is that <code>¬ p</code> means <code>p → false</code>, so both <code>iff.mp q p : p → false</code> and <code>np : p → false</code>. Then you just have to fill in the <code>p</code>.</p>",
        "id": 133108711,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535700390
    },
    {
        "content": "<p>Is not the idea of not using classical that I cannot prove by cases? I'm still at the beginning of the tutorial and did not learn what is decidable, but it looks too similar to excluded middle. I suppose it should also allow to prove ¬¬p  → p which should not work in constructive reasoning.</p>",
        "id": 133108794,
        "sender_full_name": "Andrew Skiba",
        "timestamp": 1535700515
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L343\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L343\">https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L343</a></p>",
        "id": 133109087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535700987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> if you use decidable you might as well use classical</p>",
        "id": 133109264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535701322
    },
    {
        "content": "<p>True. Attempt # 2:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">h&#39;</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">q</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133109327,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535701399
    },
    {
        "content": "<p>Why don't you like my solution?</p>",
        "id": 133109343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535701429
    },
    {
        "content": "<blockquote>\n<p>you might as well use classical</p>\n</blockquote>\n<p>This conclusion doesn't need any hypotheses.</p>",
        "id": 133109344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535701430
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 133109401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535701489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I was trying to avoid “shortcuts” like <code>.1</code> and <code>$</code>,  which may not have been covered, yet.</p>",
        "id": 133109467,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535701568
    },
    {
        "content": "<p>Thanks, guys! Excellent examples, will try to understand where did I miss the point.</p>",
        "id": 133109539,
        "sender_full_name": "Andrew Skiba",
        "timestamp": 1535701716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 133109541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535701725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">q</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 133109629,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535701910
    },
    {
        "content": "<p>Are these cries for <code>hhhhhh</code>elp, Kenny? <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 133109671,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535701940
    },
    {
        "content": "<p>I just like to name my hypotheses <code>h</code></p>",
        "id": 133109676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535701961
    },
    {
        "content": "<p>Too bad there's only one <code>h</code> in the Latin alphabet.</p>",
        "id": 133109689,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535701991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I did like your solution, because the tutorial only states that there are implementations of these proofs in the standard library, but does not mention where to find them. But the easiest to follow is Sean's one, because I can see what I missed: although it's impossible to construct a p, it is still possible to construct ¬p, and the last line is trivial. I still did not completely understand, how it's done by λ h, (<a href=\"http://iff.mp\" target=\"_blank\" title=\"http://iff.mp\">iff.mp</a> q h) h, but it's a small piece to resolve already.</p>",
        "id": 133109997,
        "sender_full_name": "Andrew Skiba",
        "timestamp": 1535702474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127891\">@Andrew Skiba</span> You know that <code>λ</code> and <code>assume</code> are the same?</p>",
        "id": 133110240,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535702816
    },
    {
        "content": "<p>When looking again at Theorem Proving in Lean, I realized that it mostly used <code>assume</code>. I use <code>λ</code> more myself, since it's shorter.</p>",
        "id": 133110323,
        "sender_full_name": "Sean Leather",
        "timestamp": 1535702944
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"127891\">@Andrew Skiba</span> You know that <code>λ</code> and <code>assume</code> are the same?</p>\n</blockquote>\n<p>Sure, this one is clear. I missed another point: although it's impossible to construct p from ¬¬p without em, it is easy to construct ¬p from ¬¬¬p. This is the key to solving this exercise.</p>",
        "id": 133114894,
        "sender_full_name": "Andrew Skiba",
        "timestamp": 1535709150
    },
    {
        "content": "<p>constructive math is crazy...</p>",
        "id": 133114912,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535709202
    },
    {
        "content": "<p>This problem seems to be a fairly popular question here <a href=\"#narrow/stream/113488-general/subject/Logic.20.26.20Proof/near/127708058\" title=\"#narrow/stream/113488-general/subject/Logic.20.26.20Proof/near/127708058\">1</a> <a href=\"#narrow/stream/113489-new-members/subject/(no.20topic)/near/132923537\" title=\"#narrow/stream/113489-new-members/subject/(no.20topic)/near/132923537\">2</a>.</p>",
        "id": 133124674,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535722743
    },
    {
        "content": "<p>Yeah, for some reason it's tripping up a lot of people working through TPIL. We need a FAQ!</p>",
        "id": 133125379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535723590
    }
]