[
    {
        "content": "<p>Hi, I've proved that the composition of two injective functions is itself injective, but I'd like to see if I can improve on my proof; the paper version is much more slick IMO and I want to know if I can make my Lean more paper-like. Here is the code:</p>\n<div class=\"codehilite\"><pre><span></span>def injective {X : Type} {Y : Type} (f : X → Y) : Prop :=\n∀ a b : X, f a = f b → a = b\n\n\ntheorem injective_comp2 {X Y Z : Type} (f : X → Y) (g : Y → Z) :\n  injective f → injective g → injective (g ∘ f) :=\n\nbegin\n  intros injf injg,\n  unfold injective at *,\n  intros c d,\n\n  intro lefty,\n  unfold function.comp at *,\n\n  have intermediary : f c = f d,\n  apply injg,\n  exact lefty,\n\n  apply injf,\n  exact intermediary,\nend\n</pre></div>\n\n\n<p>Now usually (after some explaining) I'd just do <code>g ∘ f a = g ∘ f b → g(f(a)) = g(f(b)) → f(a) = f(b) → a = b</code>, thinking in terms of injectivity in one-direction instead of bouncing back-and-forth with have statements. Is there anyway I can do this for the above theorem?</p>",
        "id": 189808344,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583425222
    },
    {
        "content": "<p>I don't know if this is what you want, but you can remove all the <code>unfold</code> statements</p>",
        "id": 189808590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583425376
    },
    {
        "content": "<p>Once you've done that, the <code>have</code> statement becomes redundant...</p>",
        "id": 189808752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583425469
    },
    {
        "content": "<p>How does <code>have</code> become redundant here?</p>\n<p>(I do see though that the unfold isn't of use in the backend)</p>",
        "id": 189809614,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583425919
    },
    {
        "content": "<p>Because your <code>have</code> is equal to the goal. So you might as well prove it directly.</p>",
        "id": 189809745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583425973
    },
    {
        "content": "<p>Oh wow that's neat!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">injective_comp3</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">injf</span> <span class=\"n\">injg</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">lefty</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">injf</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">injg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">lefty</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>For some reason some time ago I figured it wouldn't work so nicely...</p>",
        "id": 189810274,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583426240
    },
    {
        "content": "<p>If you're at Xena this evening I'll show you some other proofs :-)</p>",
        "id": 189813161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583427798
    },
    {
        "content": "<p>Yes please :)</p>",
        "id": 189813941,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583428170
    },
    {
        "content": "<p>Please use \"lean\" after triple backticks, then your code will be highlighted.</p>",
        "id": 189814795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583428603
    },
    {
        "content": "<p>Now that you've got down to a tactic proof that only usees <code>intro</code>, <code>apply</code> and <code>exact</code>, you should practice turning this into a term-mode proof.</p>",
        "id": 189819145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583431184
    },
    {
        "content": "<p>(Hint, you can do it step by step, pulling things \"out the front\" of the begin ... end block.)</p>",
        "id": 189819237,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583431228
    },
    {
        "content": "<p>Also try <code>#print injective_comp3</code></p>",
        "id": 189820374,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583432039
    },
    {
        "content": "<p>Here's a really short proof <code>λ hf hg _ _, (hf _ _ ∘ hg _ _)</code></p>",
        "id": 189821766,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1583432957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How's this? (Thanks Kevin)</p>",
        "id": 189822286,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583433233
    },
    {
        "content": "<p>at some point the idea that variable names should be single letters becomes a bad one. :-)</p>",
        "id": 189822414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583433295
    },
    {
        "content": "<p>we should stick to de brujin indices instead</p>",
        "id": 189822755,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1583433523
    },
    {
        "content": "<p>What's a term-mode proof?</p>",
        "id": 189823211,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583433811
    },
    {
        "content": "<p>Also, <code>#print injective_comp3</code> gives me a messy thing to read about, but it does help with not needing to unfold everything all the time</p>",
        "id": 189823827,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583434176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255278\">Danila Kurganov</span> <a href=\"#narrow/stream/113489-new-members/topic/Improving.20injectivity.20proof/near/189823211\" title=\"#narrow/stream/113489-new-members/topic/Improving.20injectivity.20proof/near/189823211\">said</a>:</p>\n<blockquote>\n<p>What's a term-mode proof?</p>\n</blockquote>\n<p>A proof that doesn't use <code>begin ... end</code></p>",
        "id": 189824933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583434937
    }
]