[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Vec.lean:1:0: error\nuniverse level of type_of(arg #3) of &#39;Vec.cons&#39; is too big for the corresponding inductive datatype\n</pre></div>\n\n\n<p>What do I do here?</p>",
        "id": 179625490,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572614769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 179627522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572616472
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 179627708,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572616620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">w</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Vec.lean:11:17: error\nill-formed match/equation expression\n</pre></div>\n\n\n<p>I am having trouble not necessarily how to implement <code>foldl</code>, but just figuring out how to write out the pattern. It is not 3 or 4 arguments that it wants. It is not even something like <code>(@Vec.cons n w e r)</code>. Just how am I supposed to destructure <code>Vec</code> here?</p>",
        "id": 179629336,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572617720
    },
    {
        "content": "<p>you need to let <code>n</code> be part of the recursion</p>",
        "id": 179629504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572617826
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">e</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Ah, I see. Thanks again.</p>",
        "id": 179629621,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572617903
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Vec.lean:11:4: error\nequation compiler failed to prove equation lemma (workaround: disable lemma generation using `set_option eqn_compiler.lemmas false`)\n</pre></div>\n\n\n<p>Sorry, I need a hand once again. What does this error mean?</p>",
        "id": 179630977,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572618853
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</pre></div>\n\n\n<p>Ah, I see. Nevermind. I did it wrong the first time around.</p>",
        "id": 179631040,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572618923
    },
    {
        "content": "<p>oh shouldn't you have <code>| nil : Vec 0</code>?</p>",
        "id": 179631044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572618928
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">Vec</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</pre></div>\n\n\n<p>Do you mean something like this, or are you referring to the fact that there is an <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20there.20a.20hidden.20variable.20in.20this.20example.3F\" title=\"#narrow/stream/113489-new-members/topic/Why.20is.20there.20a.20hidden.20variable.20in.20this.20example.3F\">extra argument</a> for some reason? If it is the last one, I have no idea.</p>",
        "id": 179631218,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572619045
    },
    {
        "content": "<p>Ah, you mean in the type definition? Ah, yes, well spotted. Yeah, that is what it should be.</p>",
        "id": 179631294,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572619092
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Vec</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Vec</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Vec.lean:15:29: error\ntype mismatch at application\n  Vec.foldl (λ (n : ℕ), P (n + 1)) f\nterm\n  f\nhas type\n  P ?m_1 → α → P (?m_1 + 1)\nbut is expected to have type\n  Π {n : ℕ}, (λ (n : ℕ), P (n + 1)) n → α → (λ (n : ℕ), P (n + 1)) (n + 1)\n</pre></div>\n\n\n<p>What is this error now?</p>",
        "id": 179636811,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572623038
    },
    {
        "content": "<p>yeah the type of <code>f</code> is wrong</p>",
        "id": 179636997,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623139
    },
    {
        "content": "<p>the type of <code>f</code> depends on <code>P</code> (yay for dependent type theory) but you changed <code>P</code></p>",
        "id": 179637013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623152
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nf\">foldl</span> <span class=\"ow\">:</span> <span class=\"ow\">∀</span> <span class=\"o\">{</span>a b<span class=\"o\">}</span> <span class=\"o\">{</span>A <span class=\"ow\">:</span> <span class=\"kt\">Set</span> a<span class=\"o\">}</span> <span class=\"o\">(</span>B <span class=\"ow\">:</span> ℕ <span class=\"ow\">→</span> <span class=\"kt\">Set</span> b<span class=\"o\">)</span> <span class=\"o\">{</span>m<span class=\"o\">}</span> <span class=\"ow\">→</span>\n        <span class=\"o\">(</span><span class=\"ow\">∀</span> <span class=\"o\">{</span>n<span class=\"o\">}</span> <span class=\"ow\">→</span> B n <span class=\"ow\">→</span> A <span class=\"ow\">→</span> B <span class=\"o\">(</span>suc n<span class=\"o\">))</span> <span class=\"ow\">→</span>\n        B zero <span class=\"ow\">→</span>\n        Vec A m <span class=\"ow\">→</span> B m\nfoldl b _⊕_ n []       <span class=\"ow\">=</span> n\nfoldl b _⊕_ n <span class=\"o\">(</span>x ∷ xs<span class=\"o\">)</span> <span class=\"ow\">=</span> foldl <span class=\"o\">(</span>λ n <span class=\"ow\">→</span> b <span class=\"o\">(</span>suc n<span class=\"o\">))</span> _⊕_ <span class=\"o\">(</span>n ⊕ x<span class=\"o\">)</span> xs\n</pre></div>\n\n\n<p>I am trying to translate the Agda version into Lean. Where did I make a mistake?</p>",
        "id": 179637175,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572623225
    },
    {
        "content": "<p>also shouldn't you apply <code>f</code>?</p>",
        "id": 179637462,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623403
    },
    {
        "content": "<p>in maths what is <code>foldl f (x::xs)</code>?</p>",
        "id": 179637592,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623466
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 179637608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623485
    },
    {
        "content": "<blockquote>\n<p>also shouldn't you apply f?</p>\n</blockquote>\n<p>That would be the <code>(f s x)</code> part.</p>",
        "id": 179637759,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572623619
    },
    {
        "content": "<p>so <code>foldl (+) 0 (a::b::c::nil) = ((a+b)+c)+0</code> right</p>",
        "id": 179637773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623636
    },
    {
        "content": "<p>ok so here's <code>list.foldl</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n</pre></div>",
        "id": 179637912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623729
    },
    {
        "content": "<p>lemme translate that</p>",
        "id": 179637914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623734
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Vec</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"mi\">0</span>     <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"n\">α</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">foldl</span> <span class=\"bp\">_</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Vec</span>\n</pre></div>",
        "id": 179638067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572623845
    },
    {
        "content": "<p>Maybe <code>f</code> shouldn't take <code>n</code> as implicit var?</p>",
        "id": 179638199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572623932
    },
    {
        "content": "<p>And can't the <code>n</code> in the second argument to <code>@foldl</code> be inferred from the type of <code>xs</code>?</p>",
        "id": 179638232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572623956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <br>\nI am skeptical that your version is correct.  Is incrementing <code>n</code> as it is passed to <code>f</code> really the right choice here? As you go from left to right over the vector, would that not make <code>n</code> constant in <code>f</code>? Imagine if you were iterating in an array that way.</p>",
        "id": 179638820,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572624339
    },
    {
        "content": "<p>I mean, creating an <code>array</code> that way.</p>",
        "id": 179638928,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572624416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#eval @foldl nat (fun i, nat) 3 (fun n s a, s + n) 0 (cons 11 (cons 11 (cons 11 (@nil nat))) -- 3\n</pre></div>\n\n\n<p>Hmmm, it is right.</p>",
        "id": 179639928,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572625043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"mi\">0</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">nil</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n</pre></div>\n\n\n<p>Uf, I got tricked by Agda. I did not expect at all that this would be the true form of the function. Agda is really doing some sleight of hand to pass the correct implicit argument to <code>n ⊕ x</code>. I wonder how it is doing that?</p>",
        "id": 179640646,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572625487
    },
    {
        "content": "<p>Well, thank you for the help. I'll try asking on SO about this to satisfy my curiosity.</p>",
        "id": 179641019,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572625754
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/questions/58662725/how-is-agda-inferring-the-implicit-argument-to-vec-foldl\" target=\"_blank\" title=\"https://stackoverflow.com/questions/58662725/how-is-agda-inferring-the-implicit-argument-to-vec-foldl\">https://stackoverflow.com/questions/58662725/how-is-agda-inferring-the-implicit-argument-to-vec-foldl</a></p>\n<p>So it turns out that Agda is doing the same thing as the Lean solution which is a complete surprise to me. I swear I am not too dumb to make <code>foldl</code>. It is just that between the mistaken assumption that <code>f</code> should be passed as is, and the unintelligible type error, I thought that Lean was doing something crazy.</p>",
        "id": 179693288,
        "sender_full_name": "Marko Grdinić",
        "timestamp": 1572684172
    }
]