[
    {
        "content": "<p>here is the natural deduction</p>\n<div class=\"codehilite\"><pre><span></span>        P a\n  ------------- ∀ I\n    (∀ x, P x)       ¬ (∀ x, P x)\n----------------------------------- ¬ E\n                ⊥\n            --------- ¬ I\n              ¬ P a\n       ------------------ ∃ I\n         (∃ y, ¬ (P y))\n----------------------------------- → I\n  (¬ (∀ x, P x)) → (∃ y, ¬ (P y))\n</pre></div>\n\n\n<p>but I have a problem when write the proof in lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"bp\">_</span>\n</pre></div>",
        "id": 191282231,
        "sender_full_name": "elliott smith",
        "timestamp": 1584728328
    },
    {
        "content": "<p>(Isn't the last rule →-introduction?)<br>\nYou can write the term from the outside in, corresponding to reading your proof tree from the bottom up. <code>assume</code> corresponds to the last deduction. The one above that is ∃ introduction, so next you can replace <code>_</code> by <code>Exists.intro _ _</code></p>",
        "id": 191282709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584728548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20(.C2.AC.20(.E2.88.80.20x.2C.20P.20x)).20.E2.86.92.20(.E2.88.83.20y.2C.20.C2.AC.20(P.20y)).20in.20Lean/near/191282709\" title=\"#narrow/stream/113489-new-members/topic/How.20to.20prove.20(.C2.AC.20(.E2.88.80.20x.2C.20P.20x)).20.E2.86.92.20(.E2.88.83.20y.2C.20.C2.AC.20(P.20y)).20in.20Lean/near/191282709\">said</a>:</p>\n<blockquote>\n<p>(Isn't the last rule →-introduction?)<br>\nYou can write the term from the outside in, corresponding to reading your proof tree from the bottom up. <code>assume</code> corresponds to the last deduction. The one above that is ∃ introduction, so next you can replace <code>_</code> by <code>Exists.intro _ _</code></p>\n</blockquote>\n<p>after <code>exists.intro</code> should be a <code>U</code> type,  but there is no in the context, how I can introduce <code>a</code>?</p>",
        "id": 191284341,
        "sender_full_name": "elliott smith",
        "timestamp": 1584729237
    },
    {
        "content": "<p>∀ and → both correspond to (dependent) functions in the DTT approach to logic, so the introduction and elimination rules correspond to lambda/<code>assume</code> and function application respectively. The remaining connectives correspond to inductive types and you'll use the constructors/eliminators of those types.</p>",
        "id": 191284409,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584729254
    },
    {
        "content": "<p>Oh, I didn't look at your proof that closely. What is <code>a</code> in the original proof?</p>",
        "id": 191284472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584729282
    },
    {
        "content": "<p>You actually need classical logic to prove this</p>",
        "id": 191284509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584729302
    },
    {
        "content": "<p>I don't think the original proof is correct, but then I never understood how traditional logic deals with quantifiers.</p>",
        "id": 191285061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584729552
    },
    {
        "content": "<p>from the proof tree, we want prove <code> ¬ P a</code>, so we assumen <code> P a</code> and deduce <code>⊥</code></p>",
        "id": 191285108,
        "sender_full_name": "elliott smith",
        "timestamp": 1584729581
    },
    {
        "content": "<p>You can't get a <code>U</code> from what you have, as you noted. But you can use <code>classical.by_contradiction</code> now (after the <code>assume</code>).</p>",
        "id": 191285202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584729609
    },
    {
        "content": "<p>Maybe try writing your proof in the form described at <a href=\"https://en.wikipedia.org/wiki/Natural_deduction#Proofs_and_type_theory\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Natural_deduction#Proofs_and_type_theory\">https://en.wikipedia.org/wiki/Natural_deduction#Proofs_and_type_theory</a><br>\nIt's also much closer to what is happening in Lean.</p>",
        "id": 191286411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584730168
    },
    {
        "content": "<p>I am not familiar with the <code>classical</code> in lean, I will take a look</p>",
        "id": 191286425,
        "sender_full_name": "elliott smith",
        "timestamp": 1584730177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274763\">@elliott smith</span> Your natural deduction proof is not correct. When you deduce <code>∀ x, P x</code> from <code>P a</code>, you are obligated to ensure that <code>a</code> is not free in any open assumptions, but <code>P a</code> is an open assumption at the point of that deduction, so this violates the side condition of <code>∀ I</code></p>",
        "id": 191306010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584740366
    },
    {
        "content": "<p>I'm so glad I never had to learn natural deduction proofs</p>",
        "id": 191308846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584742020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , thanks for pointing that out. Could  you suggest any references about nature reduction? I am not very clearly understand what you mean.</p>",
        "id": 191313523,
        "sender_full_name": "elliott smith",
        "timestamp": 1584745490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274763\">@elliott smith</span> I googled around a bit to find a decent source, <a href=\"https://www.iep.utm.edu/nat-ded/\" target=\"_blank\" title=\"https://www.iep.utm.edu/nat-ded/\">here's one</a>. (Unfortunately the wikipedia page is a bit vague on the point I want to make here.) That page says:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∀</mi><mi>I</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\forall I)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span></span></span></span> If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mo stretchy=\"false\">[</mo><mi>a</mi><mi mathvariant=\"normal\">/</mi><mi>x</mi><mo stretchy=\"false\">]</mo><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma\\vdash[a/x]\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span><span class=\"mord mathdefault\">φ</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mtext>  </mtext><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma\\vdash\\forall x\\;\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">φ</span></span></span></span><br>\n... In the case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">\\forall I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span>, a parameter <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> is required to be \"fresh\" in the sense of having no other occurrences in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo separator=\"true\">,</mo><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma,\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">Γ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">φ</span></span></span></span>. Such a fresh <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> is sometimes called an 'eigenvariable' or a 'proper variable'.</p>\n</blockquote>\n<p>In your case, you attempted to apply <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">\\forall I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span></span></span></span> to deduce from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext> </mtext><mi>a</mi><mo>⊢</mo><mi>P</mi><mtext> </mtext><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">P\\,a\\vdash P\\,a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext> </mtext><mi>a</mi><mo>⊢</mo><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mtext>  </mtext><mi>P</mi><mtext> </mtext><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">P\\,a\\vdash \\forall x\\;P\\,x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>, and the eigenvariable condition is violated because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>P</mi><mtext> </mtext><mi>a</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Gamma=\\{P\\,a\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">}</span></span></span></span> contains a free occurrence of the eigenvariable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>.</p>",
        "id": 191318726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584750208
    },
    {
        "content": "<p>Thinking about what the theorem is trying to say, it should be obvious why this can't be true. You assume that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> holds for some fixed value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span> but that doesn't mean that it holds everywhere.</p>",
        "id": 191319047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584750510
    },
    {
        "content": "<p>This might be too much of a hint, but here's how you can use <code>by_contradiction</code> in this case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span>\n<span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)),</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span> <span class=\"c1\">-- P x</span>\n</pre></div>",
        "id": 191319322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584750870
    }
]