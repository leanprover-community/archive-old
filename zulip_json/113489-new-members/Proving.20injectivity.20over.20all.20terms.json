[
    {
        "content": "<p>I have a state that is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span><span class=\"o\">,</span>\n<span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</code></pre></div>\n\n\n<p>as a result of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">succ_above_inj_at_pivot</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ_above</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207650043,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598024845
    },
    {
        "content": "<p>Is there a way to provide an arbitrary <code>a : fin n</code> to <code>key</code>, so that I could <code>split_ifs</code> on it?</p>",
        "id": 207650109,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598024881
    },
    {
        "content": "<p>I guess I can have a hypothesis with an existential that encodes a contradiction, then choose on that.</p>",
        "id": 207650775,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598025238
    },
    {
        "content": "<p><code>key</code> is just a function, you can feed it anything you like</p>",
        "id": 207661467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598031177
    },
    {
        "content": "<p>Can't you just solve this goal using h though?</p>",
        "id": 207661544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598031232
    }
]