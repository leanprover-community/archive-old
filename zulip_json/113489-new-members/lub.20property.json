[
    {
        "content": "<p>Hello, I'm working through the following proof: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">baby_rudin_c1_p20_a</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_exists</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>My goal now is to use the fact that R has the least upperbound property so then S being a subset of R that is non-empty and bounded above (by y) we must get some least upperbound a, and I'll use that to get a contradiction.</p>\n<p>Can I get a tip as to what the name of these upperbound properties would be called in mathlib?</p>",
        "id": 282688903,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652813304
    },
    {
        "content": "<p>\"lub\" is probably the right abbreviation to search for</p>",
        "id": 282689706,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652813638
    },
    {
        "content": "<p>Maybe also <code>bdd_above</code>?</p>",
        "id": 282689972,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652813733
    },
    {
        "content": "<p>Taking a look</p>",
        "id": 282690127,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652813788
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lub\">docs#is_lub</a></p>",
        "id": 282690426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652813921
    },
    {
        "content": "<p>It goes along <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_least\">docs#is_least</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bdd_above\">docs#bdd_above</a></p>",
        "id": 282690449,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652813935
    },
    {
        "content": "<p>I want to say that there exists a lub for <code>S</code> as it's a non-empty bounded above subset of <code>R</code>, any hint for that theorem?</p>",
        "id": 282690869,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652814087
    },
    {
        "content": "<p>this one? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_lub_Iio\">docs#exists_lub_Iio</a></p>",
        "id": 282691129,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652814178
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup\">docs#Sup</a> is the least upper bound, and facts about the version for real numbers are near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.Sup_def\">docs#real.Sup_def</a>. See for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.is_lub_Sup\">docs#real.is_lub_Sup</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">baby_rudin_c1_p20_a</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSn</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">real.is_lub_Sup</span> <span class=\"n\">S</span> <span class=\"n\">hSn</span> <span class=\"n\">hSb</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- hl : is_lub S (Sup S)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 282694481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652815606
    },
    {
        "content": "<p>By the way, you can write that set as <code>{ (n * x : ℝ) | (n : ℕ) (h : 0 &lt; n) }</code>. When there are parentheses around the left of the <code>|</code>, it's treated as an expression, and everything to the right of the <code>|</code> is treated as arguments for an existential.</p>",
        "id": 282694788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652815769
    },
    {
        "content": "<p>It's a slightly different definition since it's using <code>exists</code> rather than <code>and</code> for the <code>0 &lt; n</code>.</p>",
        "id": 282694872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652815807
    },
    {
        "content": "<p>How have I never known about this syntax? <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 282707640,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1652821905
    },
    {
        "content": "<p>It was only added a couple of years ago in the community edition, so while its been around for a while its not as widely known/used as things in core that are discussed in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> etc.</p>",
        "id": 282708201,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652822163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/lub.20property/near/282694481\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Sup\">docs#Sup</a> is the least upper bound, and facts about the version for real numbers are near <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.Sup_def\">docs#real.Sup_def</a>. See for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.is_lub_Sup\">docs#real.is_lub_Sup</a></p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">baby_rudin_c1_p20_a</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSn</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">real.is_lub_Sup</span> <span class=\"n\">S</span> <span class=\"n\">hSn</span> <span class=\"n\">hSb</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- hl : is_lub S (Sup S)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is really useful, I'm trying to imitate this proof:</p>\n<p><a href=\"/user_uploads/3121/KLb_Y4lOcNAKOscriG-Oiixs/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KLb_Y4lOcNAKOscriG-Oiixs/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KLb_Y4lOcNAKOscriG-Oiixs/image.png\"></a></div><p>So I'm wondering if anyone knows of any theorems in mathlib that would help with </p>\n<p>\"since alpha - x &lt; alpha, and alpha is the least upper bound we get that alpha - x is not a lower bound, so then there exists a positive integer m so that alpha - x &lt; mx, and then keep going for the contradiction\"?</p>",
        "id": 282978261,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652987621
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_lt_of_lt_cSup\">docs#exists_lt_of_lt_cSup</a></p>",
        "id": 282978409,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652987685
    },
    {
        "content": "<p>I got the proof down to this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">baby_rudin_c1_p20_a</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSn</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">real.is_lub_Sup</span> <span class=\"n\">S</span> <span class=\"n\">hSn</span> <span class=\"n\">hSb</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">exists_lt_of_lt_cSup</span> <span class=\"n\">hSn</span> <span class=\"n\">hlt</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">hSk</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hSk</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hltx</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnin</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">∉</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- contradiction using hl and hnin to finish...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So there's a few things I'm struggling with to finish that proof, an tips on how I can get this working? (P.S I took a little break from lean so I'm a little rusty rn)</p>",
        "id": 282980491,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1652988729
    },
    {
        "content": "<p>For the first sorry, I guessed the name of the relevant lemma: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_lt_self\">docs#sub_lt_self</a></p>",
        "id": 282983700,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652990279
    },
    {
        "content": "<p>And <code>exact hnin hl.1,</code> finishes the proof, since <code>is_lub</code> is deep down <code>α ∈ upper_bounds S ∧ _</code></p>",
        "id": 282984377,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652990530
    },
    {
        "content": "<p>There's probably a better way to spell <code>hl.1</code>, but I couldn't find it just now</p>",
        "id": 282984444,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652990557
    },
    {
        "content": "<p>Btw, I'm assuming you're mostly doing this to get used to lub arguments, because there's a direct three-line proof of the lemma as well</p>",
        "id": 282984560,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652990605
    },
    {
        "content": "<p>Final one before I head off: guessing lemma names found <code>sub_lt_iff_lt_add</code> and <code>add_one_mul</code> for the second sorry</p>",
        "id": 282985122,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1652990856
    },
    {
        "content": "<p>I managed to finish the proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.ratfunc</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">baby_rudin_c1_p20_a</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hS</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSn</span> <span class=\"o\">:</span> <span class=\"n\">S.nonempty</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hSb</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">real.is_lub_Sup</span> <span class=\"n\">S</span> <span class=\"n\">hSn</span> <span class=\"n\">hSb</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">lt_self</span> <span class=\"o\">:=</span> <span class=\"n\">lt_add_of_pos_right</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sub_right_lt_of_lt_add</span> <span class=\"n\">lt_self</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">exists_lt_of_lt_cSup</span> <span class=\"n\">hSn</span> <span class=\"n\">hlt</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">hSk</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hSk</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hltx</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">lt_add_of_sub_right_lt</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">add_one_mul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hin</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hn</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnin</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">∉</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">not_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">hin</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">hltx</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hnin</span> <span class=\"n\">hl.1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I had a few questions:</p>\n<p>1) How does     <code>simp [S]</code>,  on line 14 finish the sub proof?<br>\n2) What does <code>    obtain ⟨n, hn, rfl⟩ := ha,</code> on line 18 actually do? Curious about the <code>rfl</code> part<br>\n3) Is there anything that could be done to shorten the proof?</p>",
        "id": 287637393,
        "sender_full_name": "Callum Cassidy-Nolan",
        "timestamp": 1656364227
    },
    {
        "content": "<p>For 2) you can read about the <code>rfl</code> Easter egg in my course notes <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_C/tactics/rintro.html\">here</a> but I'd be surprised if it's not mentioned in the docstring of the tactic.</p>",
        "id": 287637645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656364359
    }
]