[
    {
        "content": "<p>I have the following messy function definition. I think I'm missing some syntax tricks to make this pretty. How can I improve this?</p>\n<p>This finds the first/longest tail of <code>l1</code> that is also a prefix of <code>l2</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a.is_prefix</span> <span class=\"n\">l₂</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">l₁.tails.find</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a.is_prefix</span> <span class=\"n\">l₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">[]</span>\n</code></pre></div>\n<p>The lambda thing feels wrong. I'm using it to curry <code>is_prefix</code> with reversed argument order. Is there a neater way of doing that? I especially dislike having it repeated in the <code>decidable_pred</code>! Can that be fixed? Is there a way to avoid the currying altogether?</p>\n<p>I'm not sure whether I'm handling the <code>option</code> value in the best way. <code>list.find</code> returns an <code>option</code>, but in this case I can actually guarantee/prove that it will always be <code>some</code>, because the last tail of any list is <code>[]</code>, which is a prefix of all lists. I use <code>get_or_else []</code> to get this behaviour, but is it better to use some other proved unwrapping or <code>find</code> variant?</p>",
        "id": 292188178,
        "sender_full_name": "Sam",
        "timestamp": 1659722420
    },
    {
        "content": "<p>You can likely just have the stronger assumption <code>[decidable_eq α]</code>, unless you have a pretty complex type your lists operate over</p>",
        "id": 292188326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659722496
    },
    {
        "content": "<p>I think using <code>get_or_else []</code> makes total sense -- you're providing a junk value for a state you know is inaccessible.</p>",
        "id": 292188456,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659722554
    },
    {
        "content": "<p>Oh! Yes <code>decidable_eq</code> works nicely. I'm actually only planning on using this for <code>nat</code>s, so that's perfect. Thanks!</p>",
        "id": 292188583,
        "sender_full_name": "Sam",
        "timestamp": 1659722638
    },
    {
        "content": "<p>My concern with <code>get_or_else []</code> is that maybe it will complicate proving properties of this function? But I haven't actually started working on that yet, so maybe it's fine.</p>",
        "id": 292188776,
        "sender_full_name": "Sam",
        "timestamp": 1659722741
    },
    {
        "content": "<p>You'll use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.find_cons_of_pos\">docs#list.find_cons_of_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get_or_else_some\">docs#option.get_or_else_some</a></p>",
        "id": 292189269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659723002
    },
    {
        "content": "<p>You might like to write a helper lemma like <code>find_eq_nth_zero_filter</code></p>",
        "id": 292189344,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659723032
    },
    {
        "content": "<p>If you want to save the lambda, you can take advantage of the operator for is_prefix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">l₁.tails.find</span> <span class=\"o\">(</span><span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 292189679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659723226
    },
    {
        "content": "<p>Oh that operator thing is nice! Thanks Kyle!</p>\n<p>I'd thought there might be some general way to do something like <code>(list.find _ l₂)</code>to do a form of partial application, but I'll take this trick in this case.</p>",
        "id": 292190063,
        "sender_full_name": "Sam",
        "timestamp": 1659723419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"428422\">@Sam</span> It occurred to me that you can also do this to organize the definition, which I don't think sacrifices readability. I forgot about doing it this way because the <code>option</code> argument is implicit (and if it were explicit, you could even do <code>(l₁.tails.find (&lt;+: l₂)).get begin ... end</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">option.get</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">l₁.tails.find</span> <span class=\"o\">(</span><span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span><span class=\"o\">))</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">,</span> <span class=\"n\">list.nil_prefix</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292198531,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659727909
    },
    {
        "content": "<p>Ooh that's pretty!</p>\n<p>I actually haven't got very far with the <code>option.get</code> version yet, because when doing something simple like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">overlap_get_nil_list</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">overlap_get</span> <span class=\"o\">[]</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">overlap_get</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The tactic state just looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>1 goal\nα: Type u\n_inst_1: decidable_eq α\nl₂: list α\n⊢ option.get _ = list.nil\n</code></pre></div>\n<p>Which is kind of confusing! I assume all of the details of the goal are hidden in the <code>_</code> somehow? I'm not sure how to proceed from here.</p>",
        "id": 292200458,
        "sender_full_name": "Sam",
        "timestamp": 1659729066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"428422\">Sam</span> has marked this topic as unresolved.</p>",
        "id": 292200513,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659729113
    },
    {
        "content": "<p>This is an unfortunate feature of <code>option.get</code>, and I think it really should have the <code>option</code> argument be explicit. One thing you can do to help here is use the <code>set_option pp.implicit true</code> command to make implicit arguments pretty print as explicit.</p>",
        "id": 292200957,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659729401
    },
    {
        "content": "<p>But a fun thing is that this lemma is true by definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">overlap_get_nil_list</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">overlap_get</span> <span class=\"o\">[]</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 292201012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659729437
    },
    {
        "content": "<p>(Think about how all the definitions work and what happens when the first argument is <code>[]</code>.)</p>",
        "id": 292201108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659729484
    },
    {
        "content": "<p>Oh! That's very cool that that's <code>refl</code>.  <code>pp.implicit</code> seems like a nice trick for this.</p>",
        "id": 292202390,
        "sender_full_name": "Sam",
        "timestamp": 1659730382
    },
    {
        "content": "<p>I'm finding that I can get through proving at least some basic lemmas on the <code>option.get</code> version now, although the state still looks very messy and I'm mostly just relying on tactics to brute force it. I had naively hoped that <code>option.get</code> would lead to a cleaner solving experience. My thinking was that, because we proved <code>some</code> in the definition itself, that would effectively vanish from the proof. I thought it would let me pretend that there was never even an <code>option</code> involved. I appear to have been very wrong about that!</p>",
        "id": 292202960,
        "sender_full_name": "Sam",
        "timestamp": 1659730749
    },
    {
        "content": "<p>Yeah, all you really get is that if you can reduce the value in <code>option.get</code> to <code>some ...</code> then the <code>some</code> goes away.  This function also introduces somewhat complex dependent types that make <code>rw</code> more difficult to use, too.</p>\n<p>Maybe it's easier to prove things about <code>l₁.tails.find (&lt;+: l₂)</code> first and then write proofs about <code>overlap_get</code> as corollaries... Or even the <code>get_or_else</code> version (which doesn't have dependent type issues).</p>",
        "id": 292203242,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659730944
    },
    {
        "content": "<p>There's also <code>pp.proofs</code></p>",
        "id": 292208743,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1659734321
    },
    {
        "content": "<p>What I ended up doing was defining this. It needs a better name and some tidying up, but I haven't found a problem with this approach yet. Perhaps something based on this idea would be useful in the library?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: Decent name</span>\n<span class=\"kd\">def</span> <span class=\"n\">list.find_guaranteed</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">option.get</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">list.find</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list.find_mem_some</span> <span class=\"n\">α</span> <span class=\"n\">l</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">_inst_1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I've got nearly all of the applicable <code>find</code> lemmas from <code>data.list.basic</code> reimplemented for this (but they're a mess, because I'm a newb). <code>find_guranteed_cons_of_neg</code> and <code>find_guranteed_cons_of_pos</code> both have a <code>sorry</code> in them for now, but I don't think everything's going to come crashing down when I try to fix that... Famous last words.</p>\n<p>I use it like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: Decent name</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tails_has_match</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁.tails</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--omitted for brevity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">overlap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l₁.tails.find_guaranteed</span> <span class=\"o\">(</span><span class=\"bp\">&lt;+</span><span class=\"o\">:</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tails_has_match</span> <span class=\"n\">α</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This seems to be working well so far. I've been able to define and prove a number of simple lemmas on <code>overlap</code> without ever having to touch <code>option</code>, because I never need to look inside <code>find_guaranteed</code>. It certainly seems much easier to use than either of the other approaches.</p>",
        "id": 292226113,
        "sender_full_name": "Sam",
        "timestamp": 1659751346
    },
    {
        "content": "<p>E.g. this is pretty nice!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">overlap_suffix</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">list.is_suffix</span> <span class=\"o\">(</span><span class=\"n\">overlap</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">overlap</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">l₁.tails</span> <span class=\"o\">:=</span> <span class=\"n\">list.find_guranteed_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm sure there's a way to tidy up that <code>have</code>, but I'm happy with how tiny this proof is using the <code>find_guaranteed</code> approach!</p>",
        "id": 292226926,
        "sender_full_name": "Sam",
        "timestamp": 1659752467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"428422\">@Sam</span>  I can't find <code>list.find_mem_some</code> in the mathlib docs... is that supposed to be <code>list.find_some</code>, or is it something you defined?</p>",
        "id": 292231262,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1659758249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> Oops sorry! I forgot to include that. That's mine, it looks like this (with another messy newb proof that I need to tidy up).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">list.find_mem_some</span>\n<span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">list.find</span> <span class=\"n\">p</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">q_h</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">list.ne_nil_of_mem</span> <span class=\"n\">α</span> <span class=\"n\">q_w</span> <span class=\"n\">l</span> <span class=\"n\">q_h_right</span><span class=\"o\">,</span>\n\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.find</span><span class=\"o\">],</span>\n\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">option.is_some_some</span><span class=\"o\">,</span> <span class=\"n\">coe_sort_tt</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">l_ih</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">q_w</span> <span class=\"bp\">∈</span> <span class=\"n\">l_tl</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">l_tl</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">list.ne_nil_of_mem</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">l_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 292231744,
        "sender_full_name": "Sam",
        "timestamp": 1659758917
    },
    {
        "content": "<p>no worries!</p>",
        "id": 292231813,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1659759014
    },
    {
        "content": "<p>Actually the name seems like nonsense now that I look at it again.</p>",
        "id": 292231815,
        "sender_full_name": "Sam",
        "timestamp": 1659759018
    },
    {
        "content": "<p>I think I need to break out some named def for \"list is guaranteed to have an item matching predicate\" or something like that.</p>",
        "id": 292231835,
        "sender_full_name": "Sam",
        "timestamp": 1659759076
    },
    {
        "content": "<p>I.e. <code>list.contains_pred</code></p>",
        "id": 292231892,
        "sender_full_name": "Sam",
        "timestamp": 1659759177
    }
]