[
    {
        "content": "<p>I was experimenting with the weekday example from Theorem Proving with Lean (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#enumerated-types</a>), using the following code snippet.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">weekday</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">sunday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">monday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">tuesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">wednesday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">thursday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">friday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n<span class=\"bp\">|</span> <span class=\"n\">saturday</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">weekday.rec_on</span>\n\n<span class=\"c1\">-- weekday.rec_on :</span>\n<span class=\"c1\">--   Π {C : weekday → Sort u_1} (n : weekday),</span>\n<span class=\"c1\">--     C weekday.sunday →</span>\n<span class=\"c1\">--     C weekday.monday →</span>\n<span class=\"c1\">--     C weekday.tuesday →</span>\n<span class=\"c1\">--     C weekday.wednesday →</span>\n<span class=\"c1\">--     C weekday.thursday →</span>\n<span class=\"c1\">--     C weekday.friday →</span>\n<span class=\"c1\">--     C weekday.saturday →</span>\n<span class=\"c1\">--     C n</span>\n\n<span class=\"c1\">-- For all functions C from weekday to types, all terms n of type</span>\n<span class=\"c1\">-- weekday, if you have a term C weekday.sunday, and a term C</span>\n<span class=\"c1\">-- weekday.monday, ..., and a term C weekday.saturday, then I can give</span>\n<span class=\"c1\">-- you a term of type C n. In addition, I'll also try to infer the</span>\n<span class=\"c1\">-- function C.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">number_of_day</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">weekday.rec_on</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">number_of_day₁</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">weekday.rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">weekday</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">d</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span> <span class=\"mi\">6</span> <span class=\"mi\">7</span>\n</code></pre></div>\n<p>In <code>number_of_day₁</code> function, when I explicitly try to give the lambda for function C, it throws an error. I was wondering why that is so?</p>",
        "id": 219200020,
        "sender_full_name": "Rajiv",
        "timestamp": 1607430086
    },
    {
        "content": "<p>Because the input <code>{C : weekday → Sort u_1}</code> means \"Lean will figure out this term from the types of all the other terms you give it\". If you want to explicitly supply this parameter <code>C</code> you can do it with <code>@weekday.rec_on</code> ,  which means that the user then has to supply all the inputs to the function.</p>",
        "id": 219200194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607430230
    },
    {
        "content": "<p>Thanks again, Prof Kevin. That works!</p>",
        "id": 219200617,
        "sender_full_name": "Rajiv",
        "timestamp": 1607430488
    }
]