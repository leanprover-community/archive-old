[
    {
        "content": "<p>I am trying to express a theorem that is structure like : The following are three propositions are equivalent:<br>\n1) proposition A<br>\n2) proposition B<br>\n3) proposition C</p>\n<p>My proof will most likely be <code>A \\to B</code>, <code>B \\to C</code>, and <code>C \\to A</code>.<br>\nWhat is a the preferred/correct way to write this up?  Is there any example in mathlib or elsewhere that uses this kind of proof/theorem?</p>\n<p>I appreciate any direction.  I am using lean4 but lean3 ideas will be very much appreciated.</p>",
        "id": 293634678,
        "sender_full_name": "kvanvels",
        "timestamp": 1660604975
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tfae\">docs#list.tfae</a></p>",
        "id": 293634851,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660605045
    },
    {
        "content": "<p>And to use it we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tfae.out\">docs#list.tfae.out</a></p>",
        "id": 293634909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660605068
    },
    {
        "content": "<p>Thanks, this community is great. Thank you.  I will follow up if I have more questions.</p>",
        "id": 293635056,
        "sender_full_name": "kvanvels",
        "timestamp": 1660605124
    },
    {
        "content": "<p>I would also look at the tactic list and search for <code>tfae</code></p>",
        "id": 293635079,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660605142
    },
    {
        "content": "<p>We have some nice helper tactics for proving such statements</p>",
        "id": 293635108,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660605158
    },
    {
        "content": "<p>Notice that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.tfae_have\">docs#tactic.interactive.tfae_have</a> use 1-based indexing but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tfae.out\">docs#list.tfae.out</a> is 0-based, if I recall correctly.</p>",
        "id": 293635129,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1660605168
    },
    {
        "content": "<p>yeah, this inconsistency is annoying</p>",
        "id": 293635183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660605200
    },
    {
        "content": "<p>Note that often what actually happens is that we choose <code>A</code> as the canonical definition and call it <code>my_prop</code>, then write the lemmas <code>my_prop &lt;-&gt; A</code> (by definition), <code>my_prop &lt;-&gt; B</code>, <code>my_prop &lt;-&gt; C</code></p>",
        "id": 293635187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660605204
    },
    {
        "content": "<p>In my experience, <code>tfae</code> is nice for transcribing a pen and paper result, but not all that convenient for building things on top of.</p>",
        "id": 293635338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660605277
    },
    {
        "content": "<p>It's nice when you have more than 3 statements</p>",
        "id": 293635382,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660605299
    },
    {
        "content": "<p>I guess for the case I describe you might use tfae under the hood to build the API</p>",
        "id": 293635477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660605344
    },
    {
        "content": "<p>Or some giant connected digraph of implications and you don't want to manually construct a path between two nodes</p>",
        "id": 293635481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660605345
    }
]