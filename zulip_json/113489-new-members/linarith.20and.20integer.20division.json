[
    {
        "content": "<p>I vaguely recall having seen a thread about this before, but I can't find it, so I'll ask it again: Is <code>linarith</code> supposed to be able to handle things like the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- by linarith does not work</span>\n<span class=\"k\">by</span> <span class=\"n\">interval_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n\n\n<p>If not, is there some tactic that can automatically deal with this that compiles significantly faster than the above proof?</p>",
        "id": 203646500,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594565007
    },
    {
        "content": "<p><code>omega</code>?</p>",
        "id": 203646708,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594565370
    },
    {
        "content": "<p><code>omega</code> also fails for me</p>",
        "id": 203646760,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1594565407
    },
    {
        "content": "<p>huh, <code>interval_cases</code> is the slow part</p>",
        "id": 203646930,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594565733
    },
    {
        "content": "<p>I know this doesn't meet your criteria, but <code>nat.div_lt_of_lt_mul hi</code></p>",
        "id": 203646932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594565745
    },
    {
        "content": "<p>Omega won't work when there is multiplication or division unfortunately.</p>",
        "id": 203646979,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594565787
    },
    {
        "content": "<p>not even multiplication by constants?</p>",
        "id": 203646988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594565816
    },
    {
        "content": "<p>preprocessing for division by constants is less trivial but still possible</p>",
        "id": 203647005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594565853
    },
    {
        "content": "<p>Oops you are right, multiplication by constants is handled, just division is not.</p>",
        "id": 203647159,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594566062
    },
    {
        "content": "<p><code>qify</code> is the tactic we want?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 203647173,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594566087
    },
    {
        "content": "<p>And <code>suggets 100</code> finds Reid's proof <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 203647174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594566093
    },
    {
        "content": "<p>Note that this qification is nontrivial, since <code>i / 3</code> isn't equal to <code>(i : ℚ) / 3</code>.</p>",
        "id": 203647261,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594566241
    }
]