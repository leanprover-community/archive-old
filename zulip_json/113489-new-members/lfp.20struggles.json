[
    {
        "content": "<p>Hello lean hivemind :)  I am making my first steps after playing the number game and trying to formalise my favorite modal logic. Could someone help me how I could prove something about lfp from order.complete_lattice? (I am also new to zulip, hope this goes into the right place...)</p>",
        "id": 245092342,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625602152
    },
    {
        "content": "<p>Concretely, I am trying to show this which should follow easily from the function <del>being reflexive</del> explicitly mentioning w:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">lfp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ws</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">ws</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">|</span> <span class=\"bp\">....</span> <span class=\"n\">extra</span> <span class=\"n\">stuff</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 245092665,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625602348
    },
    {
        "content": "<p>So would I then unfold lfp or is there a theorem like <a href=\"https://leanprover-community.github.io/mathlib_docs/order/complete_lattice.html#complete_lattice.le_refl\">https://leanprover-community.github.io/mathlib_docs/order/complete_lattice.html#complete_lattice.le_refl</a> which I could use? And how would I apply it to change my goal?</p>",
        "id": 245092724,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625602387
    },
    {
        "content": "<p>Maybe you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lfp_fixed_point\">docs#lfp_fixed_point</a></p>",
        "id": 245093292,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625602707
    },
    {
        "content": "<p>rewriting leftwards, and then it should <code>simp</code> immediately (probably through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_union\">docs#set.mem_union</a> and  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_singleton\">docs#set.mem_singleton</a>)</p>",
        "id": 245093470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625602826
    },
    {
        "content": "<p>Thanks! I feel stupid now: I added \"import order.fixed_points\" but still get \"unknown identifier for lfp_fixed_point\". Also, I assume this will need a proof that my function is monotone?</p>",
        "id": 245094155,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625603227
    },
    {
        "content": "<p>I'm not sure about the error you're seeing without a <a href=\"https://leanprover-community.github.io/mwe.html\">MWE</a> but, yeah, you would need a monotonicity proof to use the lemma</p>",
        "id": 245095518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625603930
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.fixed_points</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myFunction</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">lfp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ws</span><span class=\"o\">,</span> <span class=\"n\">ws</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span> <span class=\"mi\">42</span> <span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">myFunctionIncludesN</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">myFunction</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">myFunction</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">lfp_fixed_point</span><span class=\"o\">,</span> <span class=\"c1\">-- unknown identifier lfp_fixed_point ??</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I guess I am using rw ← wrong here?</p>",
        "id": 245096583,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625604464
    },
    {
        "content": "<p>this works on my computer; do you have the latest mathlib?</p>",
        "id": 245097030,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625604681
    },
    {
        "content": "<p>ohh, good point. I assume for this I should change the commit mentioned in leanpkg.toml?</p>",
        "id": 245097152,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625604739
    },
    {
        "content": "<p>yeah, you can just open the vscode terminal and type <code>leanproject up</code></p>",
        "id": 245097192,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625604770
    },
    {
        "content": "<p>(also may be good to do <code>leanproject get-mathlib-cache</code> after)</p>",
        "id": 245097217,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625604782
    },
    {
        "content": "<p>ohh, nice. Turns out I was using mathlib from September last year ;)</p>",
        "id": 245097399,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625604856
    },
    {
        "content": "<p>and this lemma was by <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> two months ago <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245097421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1625604879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/lfp.20struggles/near/245097217\">said</a>:</p>\n<blockquote>\n<p>(also may be good to do <code>leanproject get-mathlib-cache</code> after)</p>\n</blockquote>\n<p>What does this do? And when I run \"leanpkg build\" in a terminal outside of VS code, does this use a different cache? (And do emacs and vs code share caches?)</p>",
        "id": 245097662,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625605012
    },
    {
        "content": "<p>basically, Lean stores \"precompiled\" info about files in \".olean\" files</p>",
        "id": 245097746,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625605058
    },
    {
        "content": "<p>this gets the oleans for mathlib, leanproject build will make them for your current project (which could also be mathlib!)</p>",
        "id": 245097782,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625605077
    },
    {
        "content": "<p>Thanks! Another stupid question though: from where do I get the <code>leanproject</code> command? I only have elan and leanpkg, and also <code>~/.elan/toolchains/stable/bin/</code> has no <code>leanproject</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 245098646,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625605453
    },
    {
        "content": "<p>ohh ehh is #installation a smartlink?</p>",
        "id": 245098759,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625605521
    },
    {
        "content": "<p>nope, damn</p>",
        "id": 245098799,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625605544
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a></p>",
        "id": 245098802,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625605546
    },
    {
        "content": "<p>I think <code>mathlibtools</code> contains <code>leanproject</code></p>",
        "id": 245098866,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625605565
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a> is the autolink <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 245099059,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1625605697
    },
    {
        "content": "<p>Hooray, I managed to close the toy example above and one of my \"real\" lfp proofs. Thanks a lot <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  and <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  <span aria-label=\"smiley cat\" class=\"emoji emoji-1f63a\" role=\"img\" title=\"smiley cat\">:smiley_cat:</span></p>",
        "id": 245099883,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1625606231
    }
]