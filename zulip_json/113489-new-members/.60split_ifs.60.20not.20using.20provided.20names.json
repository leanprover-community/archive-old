[
    {
        "content": "<p>I'm working on eliminating <code>finish</code> from <code>finsupp_tensor_finsupp_apply</code> and I've found some behaviour from <code>split_ifs</code> that I don't understand.</p>\n<p>The documentation says that \"<code>split_ifs</code> with <code>h₁</code> <code>h₂</code> <code>h₃</code> overrides the default names for the hypotheses.\"  But in the 8 goals produced by <code>split_ifs with h1 h2 h3</code> here, sometimes the new hypotheses are called <code>h1</code>, <code>h2</code>, and <code>h3</code>, sometimes they're <code>h1</code>, <code>h2</code>, and <code>h</code>, and sometimes they're <code>h1</code>, <code>h</code>, and <code>h_1</code>.  What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">finsupp_tensor_finsupp_apply</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ι</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">κ</span> <span class=\"bp\">→₀</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finsupp_tensor_finsupp</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">ι</span> <span class=\"n\">κ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp.induction_linear</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">hf₁</span> <span class=\"n\">hf₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_tmul</span><span class=\"o\">,</span> <span class=\"n\">hf₁</span><span class=\"o\">,</span> <span class=\"n\">hf₂</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i'</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsupp.induction_linear</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">hg₁</span> <span class=\"n\">hg₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tmul_add</span><span class=\"o\">,</span> <span class=\"n\">hg₁</span><span class=\"o\">,</span> <span class=\"n\">hg₂</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k'</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp_tensor_finsupp_single</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.single</span><span class=\"o\">,</span> <span class=\"n\">finsupp.coe_mk</span><span class=\"o\">],</span>\n      <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n      <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n    <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266162820,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640601562
    },
    {
        "content": "<p>There are 3 if-then-else statements in your example, so <code>split_ifs</code> produces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span> subgoals. The names for the hypotheses apply to each branch, so you need 8 names as well. If you want <code>h₁ h₂ h₃</code> in each subgoal, you need to use <code>split_ifs with h₁ h₂ h₃ h₃ h₂ h₃ h₃ h₃</code>. If some names are omitted, <code>split_ifs</code> defaults to <code>h, h_1, h_2, ...</code></p>",
        "id": 266164594,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640603284
    },
    {
        "content": "<p>I'm surprised there's not a one line proof of that. How's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp_tensor_finsupp\">docs#finsupp_tensor_finsupp</a> implemented?</p>",
        "id": 269067476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643009105
    },
    {
        "content": "<p>It should follow trivially from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.direct_sum_lof_tmul_lof\">docs#tensor_product.direct_sum_lof_tmul_lof</a></p>",
        "id": 269067552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643009170
    },
    {
        "content": "<p>Oh. Never mind.</p>",
        "id": 269067678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643009289
    }
]