[
    {
        "content": "<p>It seems that I always have to disambiguate the names of constructors. E.g. I am defining </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">binpos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span>\n<span class=\"bp\">|</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">binpos</span>\n</code></pre></div>\n\n\n<p>and then I try to define</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">binpos2nat</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">bs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">binpos2nat</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n  <span class=\"k\">in</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>but  get errors, one is a variable and ext is not recognised. So I have to write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">binpos2nat</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">binpos</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">binpos</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">bs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">binpos2nat</span> <span class=\"n\">bs</span><span class=\"o\">)</span>\n  <span class=\"k\">in</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n\n<p>Is there a way to avoid this?</p>",
        "id": 209112597,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1599235883
    },
    {
        "content": "<p><code>open binpos</code></p>",
        "id": 209113471,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599236377
    },
    {
        "content": "<p>Or if you want to copy the constructors to another namespace, <code>export</code> works. I think the syntax is <code>export binpos (one ext)</code>.</p>",
        "id": 209113592,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599236432
    },
    {
        "content": "<p>If you put it inside</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">binpos</span>\n<span class=\"bp\">...</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>then after the <code>end</code> things will revert to the original behavior.</p>",
        "id": 209113651,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599236469
    },
    {
        "content": "<p>Also note you can do some nice things with namespacing. The more canonical way to name <code>binpos2nat</code> is <code>binpos.to_nat</code>. Then you can write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">binpos</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span>\n<span class=\"bp\">|</span> <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">binpos</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">binpos</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"n\">binpos</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"n\">bs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">bs</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span>\n  <span class=\"k\">in</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">binpos</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">binpos</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span>\n</code></pre></div>\n\n\n<p><code>bs.to_nat</code> elaborates as: \"the type of <code>bs</code> is <code>bin_pos</code>, so find <code>bin_pos.to_nat</code> and insert <code>bs</code> as the first argument of type <code>bin_pos</code>.\" You can write very nice looking code with this but it's not always ideal for teaching.</p>",
        "id": 209114303,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599236882
    }
]