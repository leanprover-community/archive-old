[
    {
        "content": "<p>when wouuld i use <code>Prop</code> over <code>Bool</code>?</p>",
        "id": 269482969,
        "sender_full_name": "J. O.",
        "timestamp": 1643231525
    },
    {
        "content": "<p>A crude way to put it is that <code>Prop</code> is for mathematics, <code>bool</code> is for computation.</p>",
        "id": 269483046,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643231562
    },
    {
        "content": "<p>ok</p>",
        "id": 269483055,
        "sender_full_name": "J. O.",
        "timestamp": 1643231569
    },
    {
        "content": "<p>why do mathematicians not use bool</p>",
        "id": 269483074,
        "sender_full_name": "J. O.",
        "timestamp": 1643231581
    },
    {
        "content": "<p>Not every proposition is decidable.</p>",
        "id": 269483097,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643231593
    },
    {
        "content": "<p>i see</p>",
        "id": 269483113,
        "sender_full_name": "J. O.",
        "timestamp": 1643231604
    },
    {
        "content": "<p>do i would normally use bool</p>",
        "id": 269483125,
        "sender_full_name": "J. O.",
        "timestamp": 1643231613
    },
    {
        "content": "<p>got it</p>",
        "id": 269483130,
        "sender_full_name": "J. O.",
        "timestamp": 1643231614
    },
    {
        "content": "<p>thanks</p>",
        "id": 269483142,
        "sender_full_name": "J. O.",
        "timestamp": 1643231617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> has marked this topic as resolved.</p>",
        "id": 269483271,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643231671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@J. O.</span> This \"decidability\" thing people are talking about is that if you have <code>b : Bool</code>, then you can decide in finite time whether <code>b</code> is <code>true</code> or <code>false</code>, guaranteed. The design of Lean guarantees this. (The <code>partial</code> keyword in Lean 4 turns this check off, which is why it makes writing recursive functions easier, but then you don't know if your functions will infinite loop.) But if you have <code>p : Prop</code>, theoretically <code>p = True</code> or <code>p = False</code>, but there's no algorithm to decide which it is.</p>\n<p>Mathematicians work with <code>Prop</code> when we're making mathematical statements (\"propositions\") that we want to prove.</p>",
        "id": 269484946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643232399
    },
    {
        "content": "<p>Lean 4 also has this whole system to automatically prove/disprove certain propositions. This is what <code>[Decidable p]</code> is for, when you run across it.</p>",
        "id": 269485054,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643232449
    },
    {
        "content": "<p>A classic example of a <code>Prop</code> that we don't know how to decide is <a href=\"https://en.wikipedia.org/wiki/P_versus_NP_problem\">P=NP</a></p>",
        "id": 269491071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643235409
    },
    {
        "content": "<p>If every proposition had to be decidable to be stated that would be a huge limitation for a theorem prover</p>",
        "id": 269491135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643235449
    },
    {
        "content": "<p>A much simpler example of an undecidable prop is <code>Nat = Int</code></p>",
        "id": 269492002,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643235749
    },
    {
        "content": "<p>(At least in Lean 3 <code>nat = int</code> is undecidable, so I guess it also applies to Lean 4. )</p>",
        "id": 269492008,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643235757
    }
]