[
    {
        "content": "<p>Below I will paste in a correct proof.  My question is,  please show me a couple of better ways to prove this simple theorem.<br>\nQ1:  how can I do this without entering tactic mode?  Q2:  how can I do it entirely in tactic mode,  i.e.,  what do I use in tactic mode that corresponds to exists.elim? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"o\">,(</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">):=</span>\n <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201486356,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592672082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Q1</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test3_term</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"o\">,(</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">):=</span>\n <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Q2</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test3_tactic</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"o\">,(</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">):=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201486593,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592672364
    },
    {
        "content": "<p>Thank you.  If there is a way to mark an answer as \"the answer\" like on stack exchange, I don't know it.</p>",
        "id": 201486703,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592672465
    },
    {
        "content": "<p>The proof using mathlib tactics is much nicer:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test3_tactic2</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"o\">,(</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">):=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201486845,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592672611
    },
    {
        "content": "<p>Or even shorter:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test3_tactic3</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span> <span class=\"o\">,(</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span><span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">):=</span>\n<span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>",
        "id": 201486941,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592672715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284844\">Michael Beeson</span> <a href=\"#narrow/stream/113489-new-members/topic/exists_elim/near/201486703\">said</a>:</p>\n<blockquote>\n<p>Thank you.  If there is a way to mark an answer as \"the answer\" like on stack exchange, I don't know it.</p>\n</blockquote>\n<p>you can react with emoji</p>",
        "id": 201488373,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592674670
    },
    {
        "content": "<p>'tauto'  appears to be misnamed if it deals with quantifiers.  <br>\nI am trying to work with intuitionistic logic only.  Are there analogues for these tactics that are intuitionistic?<br>\nI notice that 'ifinish' can't handle this example.  In general,  once I have a proof,  how can I ask Lean to check if <br>\nit is really an intuitionistic proof?   I'm worried that some tactics may,  in the words of Avigad in a comment in finish.lean,<br>\n\"leak classical logic\".</p>",
        "id": 201492873,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592680750
    },
    {
        "content": "<p><code>#print axioms your_lemma_name</code></p>",
        "id": 201492917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592680794
    },
    {
        "content": "<p>If you see <code>classical.choice</code>, something went wrong</p>",
        "id": 201492964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592680815
    }
]