[
    {
        "content": "<p>I am trying to understand how to work with linear algebra in Lean. I watched the video by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> and it is mentioned that determinant is defined for matrices because it is easier than for endomorphisms. I wonder what in general is the approach, if there is any, in Lean to define concepts which are defined through bases but do not depend on the specific basis, like the determinant for an endomorphism. Is there a way to tell Lean pick a random basis for a finite dimensional vector space and do things with that, and then prove it does not depend on that basis, or is there maybe a way to register a \"standard basis\" for a finite vector space (maybe using type class inference?) and work with that? Any comment on this is welcomed!</p>",
        "id": 207616967,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598003863
    },
    {
        "content": "<p>(I ask because I did not find any specific implementation of determinant for endomorphisms in Lean)</p>",
        "id": 207617702,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598004117
    },
    {
        "content": "<p>I guess the current way would be to compose <code>matrix.det</code> with <code>linear_map.to_matrix</code>.</p>",
        "id": 207617774,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598004150
    },
    {
        "content": "<p>That is also how the trace of a linear map is defined:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The trace of an endomorphism given a basis. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">trace_aux</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"err\">$</span> <span class=\"n\">linear_equiv_matrix</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 207617870,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598004221
    },
    {
        "content": "<p>Ok what is <code>[decidable_eq \\iota]</code> and why do I need such instance?</p>",
        "id": 207618113,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598004367
    },
    {
        "content": "<p><code>decidable_eq ι</code> means that given any two <code>i j : ι</code>, there is an algorithm for deciding whether <code>i = j</code> or not. This makes it possible to write out the identity matrix indexed by <code>ι</code>: <code>1 i j = if i = j then 1 else 0</code>, for example in a tactic that solves a problem by computing with matrices.</p>",
        "id": 207618744,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598004850
    },
    {
        "content": "<p>This is all about actual computations, not reasoning.</p>",
        "id": 207618816,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598004917
    },
    {
        "content": "<p>If you want to write proofs, you probably don't care about doing computations, so you can write <code>open_locale classical</code> to automatically get a noncomputable instance of <code>decidable_eq</code> on everything.</p>",
        "id": 207618903,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598004973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Basis.20dependence/near/207618903\">said</a>:</p>\n<blockquote>\n<p>If you want to write proofs, you probably don't care about doing computations, so you can write <code>open_locale classical</code> to automatically get a noncomputable instance of <code>decidable_eq</code> on everything.</p>\n</blockquote>\n<p>Ok cool thanks this is useful</p>",
        "id": 207623698,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598009323
    },
    {
        "content": "<p>As for the definition of the actual trace :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Trace of an endomorphism independent of basis. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"k\">then</span> <span class=\"n\">trace_aux</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>How does lean know that it is not important what base you use? Is it implicit in the classical.some? Why was not this trick used for the determinant as well?</p>",
        "id": 207623873,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598009506
    },
    {
        "content": "<p>Lean does not know that the choice of basis does not matter and from this definition alone you cannot tell.<br>\nMaybe there is a separate lemma that says that <code>trace</code> agrees with the trace computed from any provided basis.</p>",
        "id": 207625734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598011162
    },
    {
        "content": "<p>Indeed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">trace_eq_matrix_trace</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trace</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv_matrix</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 207626902,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598012080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> Lean makes a random choice of basis, as we do, when making the definition. The definition involves the choice. The theorem that it's independent of the choice is a different object in Lean. Lean's version of the axiom of choice is super-strong. It chooses once and for all, at the beginning of time, an element from each nonempty type, and then we never change those choices.</p>",
        "id": 207629152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598013613
    },
    {
        "content": "<p>The difference is in math we don't consider something like this to be a definition until we've checked that it is independent of the choices involved.</p>",
        "id": 207629631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598013967
    },
    {
        "content": "<p>That's how we know it is a sensible notion that behaves as expected under isomorphisms, etc.</p>",
        "id": 207629679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598014005
    },
    {
        "content": "<p>Ok thanks. I cannot really use the lemma that the trace definition use, namely:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_is_basis_finset</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I do not understand what <code>coe</code> is as it is both a Lean operator and a normal function. What is it exactly? I'll try to cook up a mwe in the next message</p>",
        "id": 207657547,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598028900
    },
    {
        "content": "<p>What I now explain makes no sense at all mathematically but it is a great simplification of the problem I am trying to solve so don't judge it mathematically haha. Suppose the sum of the components of a vector in a vector space were a well defined number, independent of the basis (this is infacts not that different than the trace but in the case of the trace I do not understand what is going on because there is too many aux definitions). To define the function that implements this fantastic concept, what I'd try to do is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">exists_is_basis_finset</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This clearly gives an error, I do not expect this to work: it is just to show my intentions. What I'd think is that I should somehow use the function named <code>coe</code> but <code>coe</code> is an operator so I am clearly very confused about what I should do here</p>",
        "id": 207658807,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598029530
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">𝕜</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">exists_is_basis_finset</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">hb</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:=</span> <span class=\"err\">∑</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207659152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598029763
    },
    {
        "content": "<p>Ok thanks if I understand correctly <code>b</code> is supposed to be the set of the elements of the basis then not a set of indexes right?</p>",
        "id": 207659450,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1598029963
    },
    {
        "content": "<p>Right, in this example it is both</p>",
        "id": 207659644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598030102
    }
]