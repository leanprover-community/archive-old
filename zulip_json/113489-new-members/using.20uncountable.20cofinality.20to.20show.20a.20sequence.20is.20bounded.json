[
    {
        "content": "<p>Suppose I have an ordinal κ with <code>κ.cof &gt; cardinal.aleph_0</code> and a function <code>f : ℕ → ordinal</code> such that <code>f n &lt; κ</code> for all n. This should imply that <code>Sup (set.range f) &lt; κ</code> by the definition of uncountable cofinality, but how would I show this in Lean?</p>\n<p>For information on cofinality in Lean: <a href=\"https://leanprover-community.github.io/mathlib_docs/set_theory/cardinal/cofinality.html\">docs#cofinality</a></p>",
        "id": 307232633,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1667266698
    },
    {
        "content": "<p>Update: unpacking the definitions in <code>κ.cof &gt; cardinal.aleph_0</code> yielded <code>quotient.lift_on κ (λ (a : Well_order), strict_order.cof a.r) ordinal.cof._proof_1 &gt; (cardinal.mk ℕ).lift</code> which honestly raises more questions than it answers; could I possibly get some help on understanding what any of these mean?</p>",
        "id": 307232991,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1667266993
    },
    {
        "content": "<p>I think you can just apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.sup_lt_ord\">docs#ordinal.sup_lt_ord</a> to the function <code>f : ℕ → ordinal</code> you constructed. The resulting <code>ordinal.sup f</code> is probably easier to work with than <code>Sup (set.range f)</code>. You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.Sup_eq_sup\">docs#ordinal.Sup_eq_sup</a> if you do want <code>Sup (set.range f)</code>.</p>",
        "id": 307234039,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667267994
    },
    {
        "content": "<blockquote>\n<p>could I possibly get some help on understanding what any of these mean?</p>\n</blockquote>\n<p>I could be wrong, but my guess is that the advice will be to not worry about the underlying machinery and just focus on the API provided by Lean (i.e. the lemmas describing cofinality, such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.cof_eq_Inf_lsub\">docs#ordinal.cof_eq_Inf_lsub</a>). However, you should definitely understand that ordinals in Lean are represented by the type of well orders quotiented by order isomorphism, which is part of what you're seeing.</p>",
        "id": 307238142,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667271816
    },
    {
        "content": "<p>You're also seeing that <code>aleph_0</code> is defined as the cardinality of the natural numbers (<code>cardinal.mk ℕ</code>).</p>",
        "id": 307238313,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667271948
    },
    {
        "content": "<p><code>ordinal.cof</code> ultimately relies on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order.cof\">docs#order.cof</a></p>",
        "id": 307238691,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1667272300
    }
]