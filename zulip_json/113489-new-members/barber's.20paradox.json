[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">men</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">barber</span> <span class=\"o\">:</span> <span class=\"n\">men</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"o\">:</span> <span class=\"n\">men</span> <span class=\"bp\">→</span> <span class=\"n\">men</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">men</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It is to prove that a contradiction follows from the hypotheses. My goal is to find two hypotheses which contradict each other. The first I would like to do is to remove the universal quantifier from the hypothesis. To be able to do that, x should be introduced. But to introduce it as an arbitrary object presupposes that the quantified x appears inside the goal. The only way to achieve this is to use the revert-tactic as far as I see. But after having done that I'll get an implication forall x ...  -&gt; false. Which alternatives do I have?</p>",
        "id": 209484334,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599640326
    },
    {
        "content": "<p><code>have h1 := h barber</code></p>",
        "id": 209484372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599640355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <br>\nThanks.</p>",
        "id": 209484725,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599640588
    },
    {
        "content": "<p>why using <code>Type*</code> ? Why not only <code>Type</code>?</p>",
        "id": 209584424,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599697003
    },
    {
        "content": "<p>Don't you have barbers in your universe? :-)</p>",
        "id": 209584642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599697205
    },
    {
        "content": "<p>Sorry, I didn't understand.</p>",
        "id": 209586700,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1599699604
    },
    {
        "content": "<p><code>Type*</code> means in an arbitrary universe</p>",
        "id": 209599257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599718219
    },
    {
        "content": "<p>A proof of the barber paradox was discussed before in <a href=\"#narrow/stream/113488-general/topic/barber.20paradox/near/206917550\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/barber.20paradox/near/206917550</a></p>",
        "id": 209621685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599734853
    }
]