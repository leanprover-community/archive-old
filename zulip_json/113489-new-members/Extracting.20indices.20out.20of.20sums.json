[
    {
        "content": "<p>I'm trying to prove a lemma which essentially has the following form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>\"Obviously\" <code>l ≤ k ≤ n</code>, so the hypothesis <code>h</code> is usable, but Lean complains that it has no idea what <code>l</code> is because it's not in the context. How do I extract data about about <code>l</code>? Is there any straightforward way to do this?</p>",
        "id": 221708898,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609884723
    },
    {
        "content": "<p>The sum shown has 'l' just for notation for (finset.range k).sum (fun l, f l)</p>",
        "id": 221709792,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609885311
    },
    {
        "content": "<p>There's probably some lemma about \"sum_range_congr\"</p>",
        "id": 221709861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609885331
    },
    {
        "content": "<p>You can definitely apply \"finset.sum_congr\"</p>",
        "id": 221710253,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609885606
    },
    {
        "content": "<p>Yes, that works. Thanks!</p>",
        "id": 221710451,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609885766
    }
]