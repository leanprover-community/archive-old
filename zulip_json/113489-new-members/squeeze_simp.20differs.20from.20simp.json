[
    {
        "content": "<p>Hi, I have a proof of the following small lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.roots.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_multiset_prod</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">multiset.mem_map</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">ha.2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">X_sub_C_ne_zero</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>\n\n<p>That works (it can surely proved in a better way, but at least it works). Then I decided to replace the first <code>simp</code> with <code>simp only</code>, so I run <code>squeeze_simp</code> instead of the first <code>simp</code>. It proposes the following: <code>simp only [mul_one, nat_degree_X_sub_C, nat.cast_id, multiset.sum_repeat, multiset.map_const, nsmul_eq_mul, eq_self_iff_true, function.comp_app, multiset.map_map]</code> but if I use it the proof doesn't work (it even adds one goal, some <code>multiset</code> stuff I used <code>simp</code> to avoid).</p>\n<p>My question is what I am supposed to do in this situation. I can for sure prove what I want but I am more interested in the general strategy when <code>squeeze_simp</code> behaves like this. Thank you!</p>",
        "id": 212703438,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602169506
    },
    {
        "content": "<p>I just want to say that I have had a similar experience at times with <code>simp</code> and <code>squeeze_simp</code> giving incompatible outputs.  I am very curious to read about the answers!</p>",
        "id": 212703990,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1602169699
    },
    {
        "content": "<p><code>squeeze_simp</code> is unfortunately a bit hacky. We need a lean/tactic/c++ expert to give us something better (-;</p>",
        "id": 212704575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602169872
    },
    {
        "content": "<p>One option is to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n<p>on an empty line above the lemma, and look at the output. It will mention all lemmas that simp is using. But the output can be intimidating.</p>",
        "id": 212704764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602169951
    },
    {
        "content": "<p>OK, i tried <code>trace.simplify.rewrite true</code>. The <code>simp</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">multiset.map_map</span><span class=\"o\">]:</span> <span class=\"n\">multiset.map</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"bp\">∘</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"bp\">∘</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">==&gt;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">polynomial.nat_degree_X_sub_C</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">multiset.map_const</span><span class=\"o\">]:</span> <span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">multiset.repeat</span> <span class=\"mi\">1</span> <span class=\"n\">p.roots.card</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">multiset.sum_repeat</span><span class=\"o\">]:</span> <span class=\"o\">(</span><span class=\"n\">multiset.repeat</span> <span class=\"mi\">1</span> <span class=\"n\">p.roots.card</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">p.roots.card</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">]:</span> <span class=\"n\">p.roots.card</span> <span class=\"bp\">•</span><span class=\"n\">ℕ</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p.roots.card</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_id</span><span class=\"o\">]:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p.roots.card</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">p.roots.card</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]:</span> <span class=\"n\">p.roots.card</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">p.roots.card</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">]:</span> <span class=\"n\">p.roots.card</span> <span class=\"bp\">=</span> <span class=\"n\">p.roots.card</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n<p>I do not understand exactly what it means, but if I use the line given by <code>squeeze_simp</code> it only says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">multiset.map_map</span><span class=\"o\">]:</span> <span class=\"n\">multiset.map</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"n\">nat_degree</span> <span class=\"bp\">∘</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span>\n</code></pre></div>\n\n<p>So it seems it is doing the first line but not the others.</p>",
        "id": 212705614,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602170315
    },
    {
        "content": "<p>Well, each line of that output gives you a lemma that you can pass to <code>simp only</code>. Just copy-paste the name between the second set of <code>[..]</code>s</p>",
        "id": 212706578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602170669
    },
    {
        "content": "<p>Yes, but that's what <code>simp only</code> proposes, with a small difference in the order, but the result is the same.</p>\n<p>I tried to write the <code>simp only</code> one by one. The first line <code>simp only [multiset.map_map]</code> seems ok (<code>trace.simplify.rewrite true</code> gives the correct output), but then <code>simp only [function.comp_app]</code> says <code>simplify tactic failed to simplify</code>. If I understand what <code>simp only</code> is doing here, it wants to do <code>rw function.comp_app</code>, but I have the impressione that a simple <code>rw</code> doesn't work inside a <code>(   ).sum</code>.</p>",
        "id": 212710052,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602172156
    },
    {
        "content": "<p>Weird...</p>",
        "id": 212711968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602172905
    },
    {
        "content": "<p>I guess I will just keep my <code>simp</code>, but if someone is interested here is the code that does not work and should work if one just copy/paste the output of <code>set_option trace.simplify.rewrite true</code> (I put a sorry after the error instead of the rest of the output).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">p.roots</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.roots.card</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_multiset_prod</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">multiset.map_map</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">],</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>\n\n<p>It fails with  <code>simplify tactic failed to simplify</code>.</p>",
        "id": 212718562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602175821
    },
    {
        "content": "<p>As a hack, maybe you can pass it <code>function.comp</code> instead of <code>function.comp_app</code></p>",
        "id": 212719757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602176336
    },
    {
        "content": "<p>That magically works!</p>",
        "id": 212720221,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1602176523
    }
]