[
    {
        "content": "<p>Hello :-)</p>\n<p>I'm trying to reason about Sets, Powersets, and their elements in Lean.<br>\nIf someone can help me construct the following I would be eternally grateful.</p>\n<p>Definitions:<br>\n<code>x</code>, <code>y</code>, <code>z</code>, w: elements of some Type <code>U</code> <br>\n<code>A</code>:  set of Type <code>U</code> such that <code>A = {x,y,z}</code><br>\n<code>PA</code>: The powerset of <code>A</code></p>\n<p>A decision function (<code>U -&gt; set U -&gt; \\N</code>) which checks if an element of U is an element of A and returns 1/0</p>\n<p>A decision function (<code>set U -&gt; set (set U) -&gt; \\N</code>) which checks if an element of set U is an element of set (set U) and returns 1/0</p>\n<p>Goal (using the 2 functions):</p>\n<ol>\n<li>Prove that x is an element of A</li>\n<li>Prove that w is not an element of A</li>\n<li>Prove that {x, y} is an element of PA</li>\n</ol>\n<p>I am currently stuck at the definitions, but here's some code in case it would be helpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">A</span>\n\n<span class=\"c1\">--- --- It seems that A is not of the right type</span>\n<span class=\"kd\">def</span> <span class=\"n\">PA</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">powerset</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 273838075,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646239970
    },
    {
        "content": "<p>I will be making some edits to make my message more legible but won't be changing the content</p>",
        "id": 273838597,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646240128
    },
    {
        "content": "<p>You have produced a function, called <code>A</code>, that given three elements <code>x y z</code> of <code>U</code>, produces the set with these three elements. So the set you want is <code> A x y z</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"c1\">--A x y z : set U</span>\n</code></pre></div>",
        "id": 273838975,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646240246
    },
    {
        "content": "<p>In practice you can always directly write <code>({x, y, z} : set U)</code>.</p>",
        "id": 273839664,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646240430
    },
    {
        "content": "<p>Thank you very much for the tip</p>",
        "id": 273840044,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646240579
    },
    {
        "content": "<p>Depending on what you are doing it's possible that Lean can guess the <code> : set U</code> part.</p>",
        "id": 273840336,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646240684
    },
    {
        "content": "<p>Can I store that as a hypothesis?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Constructing.20Sets.20and.20Powersets/near/273839664\">said</a>:</p>\n<blockquote>\n<p>In practice you can always directly write <code>({x, y, z} : set U)</code>.</p>\n</blockquote>",
        "id": 273841048,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646240933
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">A</span> <span class=\"c1\">--- A : ↥{x, y, z}</span>\n</code></pre></div>",
        "id": 273841160,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646240970
    },
    {
        "content": "<p>I'm sorry I'm a complete beginner</p>",
        "id": 273841201,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646240986
    },
    {
        "content": "<p>What did you read so far to learn Lean?</p>",
        "id": 273841558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646241109
    },
    {
        "content": "<p>You can use parameters for that, but this can be a little problematic. If you just want to avoid typing <code>({x, y, z} : set U)</code> a lot, you can just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So now typing <code>A</code> is literally the same as typing <code>({x, y, z} : set U)</code> (in the current file).</p>",
        "id": 273841631,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646241128
    },
    {
        "content": "<p>It seems you would benefit a lot from reading more before trying to do things of your own.</p>",
        "id": 273841638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646241134
    },
    {
        "content": "<p>or <code>set A : set U := {x, y, z}</code> within a tactic block</p>",
        "id": 273841677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646241164
    },
    {
        "content": "<p>I'm going through the Mathematics in Lean tutorial, I'm done with part 2</p>",
        "id": 273841742,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Constructing.20Sets.20and.20Powersets/near/273841631\">said</a>:</p>\n<blockquote>\n<p>You can use parameters for that, but this can be a little problematic. If you just want to avoid typing <code>({x, y, z} : set U)</code> a lot, you can just write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So now typing <code>A</code> is literally the same as typing <code>({x, y, z} : set U)</code> (in the current file).</p>\n</blockquote>\n<p>This is exactly what I needed!!! Thank you so much</p>",
        "id": 273841972,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241273
    },
    {
        "content": "<p>What do you call part 2? Is it <a href=\"https://avigad.github.io/mathematics_in_lean/02_Basics.html\">https://avigad.github.io/mathematics_in_lean/02_Basics.html</a> ?</p>",
        "id": 273842300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646241408
    },
    {
        "content": "<p>Yes</p>",
        "id": 273842348,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241431
    },
    {
        "content": "<p>Seems like a long way to go</p>",
        "id": 273842364,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241436
    },
    {
        "content": "<p>Maybe I'm trying to jump forward</p>",
        "id": 273842393,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241446
    },
    {
        "content": "<p>But I will complete it</p>",
        "id": 273842403,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241453
    },
    {
        "content": "<p>I strongly recommend you also go through parts 3 and 4 before returning to what you're currently doing.</p>",
        "id": 273842574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646241503
    },
    {
        "content": "<p>Okay I will, thanks again</p>",
        "id": 273842655,
        "sender_full_name": "Georgio Nicolas",
        "timestamp": 1646241539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> do we have a clear plan about when we plan to discuss <code>subtype</code> and the <code>↥</code> arrow so that people at least recognize it when they don't actually want it?</p>",
        "id": 273842892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646241621
    },
    {
        "content": "<p>First, a note: the \"official\" (at least, more official -- it's still evolving and growing) version of MIL is <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">https://leanprover-community.github.io/mathematics_in_lean/</a>. The <code>avigad</code> version is used to test and share drafts of new sections.</p>\n<p>That said, subtypes are mentioned in passing at the end of the draft section here: <a href=\"https://avigad.github.io/mathematics_in_lean/06_Abstract_Algebra.html#structures\">https://avigad.github.io/mathematics_in_lean/06_Abstract_Algebra.html#structures</a>.<br>\nThat seemed a natural place to mention their existence, but I wasn't planning to say much about them. I am open to suggestions, though.</p>",
        "id": 273844459,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1646242092
    },
    {
        "content": "<p>I think it would be nice to mention them in the section on sets.</p>",
        "id": 273848587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646243524
    },
    {
        "content": "<p>Just say that they exist and can be used to turn a set or a property into a new type? With a forward reference to the later section?</p>",
        "id": 273849235,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1646243761
    },
    {
        "content": "<p>And also a warning saying that if readers suddenly see the <code>↥</code> arrow appearing then it means they inadvertently used this concept and they should think harder.</p>",
        "id": 273849428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646243838
    },
    {
        "content": "<p>Will do!</p>",
        "id": 273858120,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1646247221
    }
]