[
    {
        "content": "<p>Hello,</p>\n<p>I am having trouble with the sum of variables of different types in Lean. Specifically, I have the code that boils down to this (in fact, it is more complex, but I simplified it to demonstrate the essense of the issue that I am having):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pfin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tricky_definition_1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pfin</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"c1\">--does not compile; how to make \"m + x\" work here?</span>\n</code></pre></div>\n<p>Again, in reality, the function f is much more complex than just returning x, but it's not relevant to the current issue, so I simplified it to that. What is important is that it accepts the argument of type \"pnat\". So, I need the sum \"m + x\" to be casted to the type \"pnat\".</p>\n<p>Regarding the type \"pfin\", I would prefer to use a type for the numbers { 1, ..., n } instead of for the numbers { 0, ..., n-1 }, that's why I use this custom type \"pfin\" instead of the existing type \"fin\". But I am also considering reverting to using \"fin\", in which case my definition would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tricky_definition_2</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>  <span class=\"c1\">--does not compile; how to make \"m + x + 1\" work here?</span>\n</code></pre></div>\n<p>So, I would appreciate if you would help me how to make these sums \"m + x\" and \"m + x + 1\" to work in the definitions above.</p>",
        "id": 298827646,
        "sender_full_name": "Mikhail Makarov",
        "timestamp": 1663180476
    },
    {
        "content": "<p>In lean addition is only between two terms of the same type, so we cannot expect that the add symbol will work out of the box.<br>\nHere you are relying on the fact that a positive natural added to any natural is again positive, so you can take f of it, this is fairly obvious to us but it does need to be proved somewhere for lean!<br>\nHere is one way to do this, we add <code>m</code> to <code>x.1</code> which is notation for the underlying natural of <code>x</code>, then use <code>simp</code> to prove that this is positive and make a new <code>pnat</code> we can apply <code>f </code>  to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tricky_definition_1</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pfin</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩)</span>\n</code></pre></div>",
        "id": 298835154,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663183018
    },
    {
        "content": "<p>Ok, thank you, it works.<br>\nBut is this notation <code>.1</code> documented anywhere?<br>\nBefore posting the question here, I tried <code>m + (x:nat)</code> and <code>m+↑x</code>, neither of which worked. I am confused by how casting works in Lean.</p>",
        "id": 298840006,
        "sender_full_name": "Mikhail Makarov",
        "timestamp": 1663184855
    },
    {
        "content": "<p><code>x.val</code> is another name for the same thing, which is maybe more intuitive (meaning val).</p>",
        "id": 298841641,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663185461
    },
    {
        "content": "<p>Casting is managed using the typeclass system, so if you make a new type like <code>pfin</code> then generally you have to tell lean what casts you want it to have to other types</p>",
        "id": 298841856,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663185550
    },
    {
        "content": "<p>For examples you could add:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">pfin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">pnat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pfin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pfin</span> <span class=\"mi\">3</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 298842256,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663185696
    }
]