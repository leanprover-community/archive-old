[
    {
        "content": "<p>Hello, suppose that <code>f</code> is a ring morphism, I want to consider the image of <code>f</code> <strong>as a ring</strong>. With <code>set.range f</code> I get it only as a set. Is this already available somewhere? Thanks!</p>",
        "id": 178048454,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570990206
    },
    {
        "content": "<p>it should be a ring already.</p>",
        "id": 178048991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570991114
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">subring</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">],</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 178049711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570992154
    },
    {
        "content": "<p>Output:</p>\n<div class=\"codehilite\"><pre><span></span>λ {α : Type u} {β : Type v} [_inst_1 : comm_ring α] [_inst_2 : comm_ring β] (f : α → β)\n[_inst_3 : is_ring_hom f], subset.ring :\n  Π {α : Type u} {β : Type v} [_inst_1 : comm_ring α] [_inst_2 : comm_ring β] (f : α → β)\n  [_inst_3 : is_ring_hom f], ring ↥(set.range f)\n</pre></div>",
        "id": 178049714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570992164
    },
    {
        "content": "<p>There's a subtlety here. <code>set.range f</code> is a term of type <code>set beta</code>, but not itself a type. The way rings work in Lean is via the typeclass system. In other words, if R is a type then the way to make it a ring is to get a term of type <code>ring R</code>. But <code>ring (set.range f)</code> does not literally make sense. However Lean makes <code>set.range f</code> into a type under the hood, namely a subtype of beta, and then <code>ring (\\u set.range f)</code> does make sense (with \\u being a little up-arrow to indicate that something subtle just happened) and, as Kenny shows, type class inference then magics up the term of this type automatically.</p>",
        "id": 178051240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570994590
    },
    {
        "content": "<p>You are talking about \"a set\" and \"a ring\" as if they were the same sort of thing, but in Lean they are not at all the same. There's no such thing as a set, there's only a subset of a type, and stuff like groups and rings etc are all done using type class inference, they are not at all \"a set plus some axioms\" like in set theory.</p>",
        "id": 178051311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570994725
    },
    {
        "content": "<p>Thanks, this clarifies things a bit.</p>",
        "id": 178052432,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1570996583
    }
]