[
    {
        "content": "<p>What does <code>⦃</code> mean?  For example, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/upper_bounds\">docs#upper_bounds</a> .  I am sure this has been asked and answered many times before, but unfortunately it's pretty hard to search Zulip for a single symbol ...</p>",
        "id": 208406436,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598658893
    },
    {
        "content": "<p>It is an implicit argument that Lean will not fill in with a metavariable (and hence presumably try to solve by unification), unless a subsequent explicit argument appears.</p>\n<p>So:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"c1\">--- just a `nat`, but that has a metavariable in it!</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">⦃</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">⦄</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"c1\">-- still a function</span>\n</code></pre></div>",
        "id": 208406871,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598659525
    },
    {
        "content": "<p>Thank you!  I have to say, I am still curious why would one want this ... if there is a good link in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> or a previous discussion, I would be glad of further reading :)</p>",
        "id": 208408214,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598661467
    },
    {
        "content": "<p>There's a brief discussion in TPiL <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-implicit-arguments\">here</a>.</p>",
        "id": 208408282,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598661542
    },
    {
        "content": "<p>That's perfect, thank you!</p>",
        "id": 208408393,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598661715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> It took me a long time to understand why these brackets are useful. But here is a very pedestrian reason:</p>\n<ol>\n<li><code>function.injective</code> uses this in its statement: <code>\\forall \\{{x y\\}}, f x = f y -&gt; x = y</code>.</li>\n<li>We have things like <code>function.injective.eq_iff</code>, and we want to use projection notation like <code>hf.eq_iff</code> (for some <code>hf : function.injective f</code>).</li>\n<li>If we had used <code>\\forall {x y}</code> then lean would try to figure out <code>x</code> and <code>y</code> whenever it saw <code>hf</code>, and so <code>hf</code> would not have type <code>function.injective f</code> anymore, and projection notation would break down. The other option would be to use <code>(x y)</code>.</li>\n<li>Suppose that <code>h : f x = f y</code>. Then <code>hf h</code> will be a proof of <code>x = y</code>. This still <em>just works</em>. But if we used <code>\\forall (x y)</code>, then we would have to write explicitly <code>hf x y h</code>, which seems a bit annoying.</li>\n</ol>\n<p>Tl;dr: <code>\\{{ .. \\}}</code> hold a charming spot between <code>{}</code> and <code>()</code>.</p>",
        "id": 208415959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598673979
    },
    {
        "content": "<p>This is great!  Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 208416051,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598674171
    }
]