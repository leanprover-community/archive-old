[
    {
        "content": "<p>Is there a tactic that works like <code>specialize</code> but kinda opposite? I'd like to write the following in a single command.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"n\">clear</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n<span class=\"n\">rename</span> <span class=\"n\">baz</span> <span class=\"n\">bar</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Maybe it is what <code>apply foo at bar</code> was suggested to do? Does it exist?</p>",
        "id": 314048050,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670253634
    },
    {
        "content": "<p><code>replace bar := foo bar</code>?</p>",
        "id": 314058663,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670253767
    },
    {
        "content": "<p>Is it good manner to use <code>replace</code> in \"production code\"?</p>",
        "id": 314059813,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670254113
    },
    {
        "content": "<p>i hope so because i've done it a lot</p>",
        "id": 314059847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1670254124
    },
    {
        "content": "<p>I can see 600+ hits in mathlib</p>",
        "id": 314059917,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1670254148
    },
    {
        "content": "<p>I don't see any problem with it, and I like it!</p>",
        "id": 314060042,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670254190
    },
    {
        "content": "<p>I was just wondering what happens if I accidentally write <code>replace baz := foo bar</code> instead. It seems it just does <code>have</code> and nothing breaks.</p>",
        "id": 314060569,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670254320
    },
    {
        "content": "<p>What I like about <code>specialize</code> is that this mistake cannot happen. I don't have to write a pair of matching identifiers in order to do what it is made for.</p>",
        "id": 314060758,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670254365
    },
    {
        "content": "<p>Regarding <code>apply foo at bar</code>, are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">tactic#apply_fun</a>?</p>",
        "id": 314060932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670254425
    },
    {
        "content": "<p>No.</p>",
        "id": 314061232,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1670254508
    },
    {
        "content": "<p>Lean more or less ignore the name we give to variables (this is surely not precise, but in practice it's often like that). I think it uses behind the scenes the <a href=\"https://en.wikipedia.org/wiki/De_Bruijn_index\">De_Bruijn_index</a>.</p>",
        "id": 314062056,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670254742
    },
    {
        "content": "<p>Ah sorry, your question was different. You can see that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.replace\">docs#tactic.replace</a> does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">h'</span> <span class=\"bp\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">p</span> <span class=\"bp\">←</span> <span class=\"n\">to_expr</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"n\">note</span> <span class=\"n\">h</span> <span class=\"n\">none</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n   <span class=\"n\">clear</span> <span class=\"n\">h'</span>\n</code></pre></div>\n<p>so if <code>h</code> doesn't exist it's like a <code>have</code>.</p>",
        "id": 314062350,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1670254832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 314062690,
        "sender_full_name": "Notification Bot",
        "timestamp": 1670254933
    }
]