[
    {
        "content": "<p><code>linarith</code> works properly when the goal is of the form <code>¬ a = b</code>, but it will fail if the goal is <code>a ≠ b</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- succeed</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- failed</span>\n</pre></div>\n\n\n<p>I think this can be fixed easily by adding a corresponding pattern to <code>get_contr_lemma_name</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"bp\">`</span><span class=\"n\">not</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n</pre></div>",
        "id": 172569296,
        "sender_full_name": "Joe",
        "timestamp": 1565080056
    },
    {
        "content": "<p>However, if <code>a ≠ b</code> or <code>¬ a = b</code> are hypotheses, <code>linarith</code> will fail in both cases:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">bar1</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- failed</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bar2</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- failed</span>\n</pre></div>\n\n\n<p>I think I can add support for this, but I'm not sure if this is intended.</p>",
        "id": 172569361,
        "sender_full_name": "Joe",
        "timestamp": 1565080110
    },
    {
        "content": "<p>It will make <code>linarith</code> exponential, since  each <code>≠</code> will split into two goals. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 172569562,
        "sender_full_name": "Joe",
        "timestamp": 1565080295
    },
    {
        "content": "<p>Huh. Failing on <code>≠</code> goals is definitely an oversight, I'll fix that. Thanks for pointing that out!</p>",
        "id": 172569903,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565080634
    },
    {
        "content": "<p>Not using <code>≠</code> hypotheses is intentional. <code>linarith</code> shouldn't have that kind of exponential behavior.</p>",
        "id": 172569926,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565080675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Can  you explain why <code>bar2</code> in the example should fail?</p>",
        "id": 172570226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565081026
    },
    {
        "content": "<p>I don't understand enough of the algorithm I guess.</p>",
        "id": 172570279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565081046
    },
    {
        "content": "<p>Is it just that inequality in hypothesis is generally bad?</p>",
        "id": 172570291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1565081072
    },
    {
        "content": "<p>I think <code>linarith</code> proves <code>a ≠ b → goal</code> by proving <code>a &lt; b → goal</code> and <code>b &lt; a → goal</code>.</p>",
        "id": 172570522,
        "sender_full_name": "Joe",
        "timestamp": 1565081344
    },
    {
        "content": "<p>I think the algorithm can be adjusted to use <code>≠</code> hypotheses \"natively,\" and this should probably be done at some point. But disequalities don't quite fit into the same framework as (in)equalities.</p>",
        "id": 172570550,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565081394
    },
    {
        "content": "<blockquote>\n<p>I think <code>linarith</code> proves <code>a ≠ b → goal</code> by proving <code>a &lt; b → goal</code> and <code>b &lt; a → goal</code>.</p>\n</blockquote>\n<p><code>linarith</code> doesn't prove this at all right now, but it's the \"cheap\" way to do it. Cheap in implementation time, not in runtime.</p>",
        "id": 172570633,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565081455
    },
    {
        "content": "<p>Yeah, I know. I was just mimicking the way <code>linarith</code> proves <code>a = b</code>. <br>\nBut I'm curious, what is a better way of using <code>≠</code> hypotheses? What does \"natively\" mean?</p>",
        "id": 172571354,
        "sender_full_name": "Joe",
        "timestamp": 1565082273
    },
    {
        "content": "<p>Well, I meant \"native\" in the sense that it could handle disequality without encoding it into symbols it already knows about. But my claim is wrong, or at least, the half-baked algorithm I had in mind isn't complete. The proper way to handle disequality (and arbitrary logical formulas more generally) is with an SMT solver.</p>",
        "id": 172575592,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565086240
    }
]