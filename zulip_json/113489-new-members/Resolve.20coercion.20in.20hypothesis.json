[
    {
        "content": "<p>I have <code>h: ↥p</code>. How do I rewrite it to <code>h: p = tt</code>? Neither <code>rw coe</code> nor <code>simp</code> worked.</p>",
        "id": 218942377,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186252
    },
    {
        "content": "<p><code>p</code> is a bool, presumably? You could do cases on it I guess, but there is probably a one-liner.</p>",
        "id": 218942445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186330
    },
    {
        "content": "<p>yes, p is a bool ;) Would love to have a one-liner at hand to deal with coercions!</p>",
        "id": 218942470,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186370
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218942527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186411
    },
    {
        "content": "<p>Why is <code>cases hp</code> closing the goal?</p>",
        "id": 218942615,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186546
    },
    {
        "content": "<p>Ah, because it is an empty inductive type</p>",
        "id": 218942636,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186602
    },
    {
        "content": "<p>because there are no cases, so there are no goals after it's done :-)</p>",
        "id": 218942637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186604
    },
    {
        "content": "<p>but how does it resolve the coercion?</p>",
        "id": 218942649,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186635
    },
    {
        "content": "<p><del>If <code>p</code> is a random bool then Lean doesn't know what <code>↥p</code> is, but if <code>p</code> is <code>tt</code> or <code>ff</code> then it knows.</del></p>",
        "id": 218942699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186680
    },
    {
        "content": "<p>no I just checked the definition and what I just said is false.</p>",
        "id": 218942720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186746
    },
    {
        "content": "<p>I had assumed the coercion would be defined by cases, but <code>↥p := p = tt</code></p>",
        "id": 218942769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186774
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218942779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186795
    },
    {
        "content": "<p>hmm, I guess exact is doing some kind of reduction then?</p>",
        "id": 218942782,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186815
    },
    {
        "content": "<p>They are definitionally equal. You can use <code>change</code> to change one to the other. Sorry for misleading you!</p>",
        "id": 218942786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186825
    },
    {
        "content": "<p><code>example (p : bool) (hp : p) : p = tt := hp</code></p>",
        "id": 218942796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186877
    },
    {
        "content": "<p>no problem, thank you very much for helping me  reducing my confusion ;)</p>",
        "id": 218942838,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186894
    },
    {
        "content": "<p>does definitionionally equal mean they are equal after rewriting definitions?</p>",
        "id": 218942846,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186918
    },
    {
        "content": "<p>why does this unfolding of definitions happen automatically, while I have to unfold all my definitions manually or with simp?</p>",
        "id": 218942861,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607186946
    },
    {
        "content": "<p>In term mode Lean can see through all definitions.</p>",
        "id": 218942865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186964
    },
    {
        "content": "<p>You need to talk to someone who knows something about computers really.</p>",
        "id": 218942870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607186978
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a> is something I found useful</p>",
        "id": 218942917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Resolve.20coercion.20in.20hypothesis/near/218942870\">said</a>:</p>\n<blockquote>\n<p>You need to talk to someone who knows something about computers really.</p>\n</blockquote>\n<p>i remember that you wrote a pretty good blog post on the matter yourself</p>",
        "id": 218942920,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607187009
    },
    {
        "content": "<p>but you might know it already. You might want to hear something about <code>#reduce</code> but this is something I never use or think about.</p>",
        "id": 218942934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187042
    },
    {
        "content": "<p>Lean won't unfold a definition automatically, but if I say <code>x = y</code> and the proof is <code>rfl</code>, then at that point Lean will start to try and prove x and y are definitionally equal and it will happily unfold anything.</p>",
        "id": 218942949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187089
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/05/21/equality-part-1-definitional-equality/\">https://xenaproject.wordpress.com/2019/05/21/equality-part-1-definitional-equality/</a><br>\n<a href=\"https://xenaproject.wordpress.com/2019/05/25/equality-part-2-syntactic-equality/\">https://xenaproject.wordpress.com/2019/05/25/equality-part-2-syntactic-equality/</a></p>",
        "id": 218942953,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607187101
    },
    {
        "content": "<p>In fact you can hang Lean by giving it two complicated terms which aren't equal and then telling it to try and prove them by <code>rfl</code>. The <code>exact</code> tactic will presumably just be a wrapper around <code>rfl</code>.</p>",
        "id": 218942996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187132
    },
    {
        "content": "<p>ah so <code>rfl</code> is the tactic I can use to show that two syntactically different terms are definitionally equivalent?</p>",
        "id": 218943022,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607187214
    },
    {
        "content": "<p><code>rfl</code> is the term, <code>refl</code> is the tactic.</p>",
        "id": 218943026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187231
    },
    {
        "content": "<p>thanks a lot!</p>",
        "id": 218943070,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607187268
    },
    {
        "content": "<p>(strictly speaking <code>refl</code> is a bit stronger, it will attempt to prove any goal of the form <code>R a b</code> where <code>R</code> is a reflexive predicate which has been tagged with the <code>@[refl]</code> attribute by invoking reflexivity of <code>R</code> and then trying to prove <code>a = b</code>; for example you can prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≤</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2 \\le 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> with <code>refl</code> in tactic mode but not with <code>rfl</code> in term mode, which is strictly for equality)</p>",
        "id": 218943088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187321
    },
    {
        "content": "<p><code>example : 2 + 2 = 4 := rfl</code> (because both reduce to <code>S(S(S(S(0))))</code></p>",
        "id": 218943135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187363
    },
    {
        "content": "<p>if you care about implementation details, <code>rfl</code> is just <code>eq.refl</code> (<a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L231\">https://github.com/leanprover-community/lean/blob/master/library/init/core.lean#L231</a>), where <code>eq.refl</code> is described in TPIL (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductive-families\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#inductive-families</a>), and definitional equality is built into the kernel</p>",
        "id": 218943214,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607187509
    },
    {
        "content": "<p><code>example (p : bool) : p = tt = ↥p := rfl</code></p>",
        "id": 218943216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187513
    },
    {
        "content": "<p>and the contradiction is that definitional equality is undecidable but <code>rfl</code> is a computer program :-) There's an example in the reference manual where two things are definitionally equal but <code>rfl</code> doesn't prove it, but this is very much an edge case.</p>",
        "id": 218943237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187570
    },
    {
        "content": "<p>But why is <code>refl</code> able to solve this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">):</span> <span class=\"n\">tt</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>?</p>",
        "id": 218943505,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607187950
    },
    {
        "content": "<p>Here's how I'd diagnose this.</p>",
        "id": 218943551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607187974
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"c1\">-- it's notation for `band`</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">band</span> <span class=\"c1\">-- and now right click and peek definition</span>\n</code></pre></div>",
        "id": 218943579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607188064
    },
    {
        "content": "<p>I find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">band</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 218943616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607188082
    },
    {
        "content": "<p>so <code>tt &amp;&amp; p</code> is by definition <code>p</code>.</p>",
        "id": 218943629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607188095
    },
    {
        "content": "<p>So I guess there is some kind of reduction β and  refl solves <code>R a b</code> by checking whether β a is syntactically equal to β b? Can I somehow invoke this reduction β manually to make terms simpler in hypothesis/goals?</p>",
        "id": 218943638,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607188123
    },
    {
        "content": "<p>yeah you need to talk to a computers person. I have no idea how all this works.</p>",
        "id": 218943653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607188159
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dsimp\">https://leanprover-community.github.io/mathlib_docs/tactics.html#dsimp</a></p>",
        "id": 218943701,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607188210
    },
    {
        "content": "<p>If I want to unfold things I just <code>unfold</code> them. As a mathematician I believe that definitional equality is a weird implementation issue which I should not be using; I don't like the fact that <code>n + 0 = n</code> is definitional and <code>0 + n = n</code> is not because this upsets my view of the universe as a beautiful symmetric thing. In short, I try not to think about definitional equality. But for what you're doing it's probably super-important!</p>",
        "id": 218943714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607188252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234196\">Henning Dieterichs</span> <a href=\"#narrow/stream/113489-new-members/topic/Resolve.20coercion.20in.20hypothesis/near/218943638\">said</a>:</p>\n<blockquote>\n<p>So I guess there is some kind of reduction β and  refl solves <code>R a b</code> by checking whether β a is syntactically equal to β b? Can I somehow invoke this reduction β manually to make terms simpler in hypothesis/goals?</p>\n</blockquote>\n<p>The tactic for this is called <code>whnf</code></p>",
        "id": 218944098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188861
    },
    {
        "content": "<p>but it's not great for interactive use</p>",
        "id": 218944105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188874
    },
    {
        "content": "<p>prefer <code>simp</code></p>",
        "id": 218944106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607188877
    },
    {
        "content": "<p>But still, this does not work to get rid of the coercion operator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218944165,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607188951
    },
    {
        "content": "<p>I don't want to prove that two terms are equal, I want to obtain p = tt, so I can rewrite that term at a different hypothesis</p>",
        "id": 218944182,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1607188994
    },
    {
        "content": "<p>there should be a theorem that says that</p>",
        "id": 218944261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607189123
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold_coes</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works but goes a little against the way things are supposed to work.</p>",
        "id": 218945424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607190942
    },
    {
        "content": "<p>(and of course the <code>assumption</code> tactic works without <code>unfold_coes</code> anyway, because it also relies on <code>rfl</code> ;-) )</p>",
        "id": 218945472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607190982
    },
    {
        "content": "<p>I think I have a very similar problem to this one. I also need to \"unfold\" a coercion, but in my specific situation I am unsure how to enter tactic mode to be able to try the above suggestions. Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">limit_cone</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">⥤</span> <span class=\"n\">Profinite</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">to_Top</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n          <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Profinite_to_Top</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sections</span><span class=\"o\">,</span>\n          <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">topological_space.induced</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.inclusion</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Profinite_to_Top</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sections</span> <span class=\"n\">set.univ</span> <span class=\"o\">(</span><span class=\"n\">set.subset_univ</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"n\">J</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Profinite_to_Top</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Profinite_to_Top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">str</span><span class=\"o\">))</span>\n          <span class=\"o\">},</span>\n        <span class=\"n\">is_compact</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">is_t2</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">is_totally_disconnected</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>And I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">topological_space.induced</span> <span class=\"o\">(</span><span class=\"n\">set.inclusion</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"n\">term</span>\n  <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Profinite_to_Top</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">topological_space</span> <span class=\"bp\">↥</span><span class=\"n\">set.univ</span>\n</code></pre></div>\n<p>and set.univ is just: <code>set (Π (j : J), (F ⋙ Profinite_to_Top ⋙ forget Top).obj j)</code>.</p>\n<p>So is there some way of \"wrapping\" the Pi.topological_space line in tactic mode and then rewriting it in there? Or is there a theorem I can use directly in term mode?</p>",
        "id": 218948987,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607196113
    },
    {
        "content": "<p>I suspect that <code>↥set.univ</code> is not _definitionally_ equal to <code>(Π (a : J), (F ⋙ Profinite_to_Top ⋙ forget Top).obj a)</code>.</p>",
        "id": 218949077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607196231
    },
    {
        "content": "<p>When I have my cursor on the Pi.topological_space line and press set.univ in the infoview that is what I get</p>",
        "id": 218949179,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607196356
    },
    {
        "content": "<p>Or I get that set.univ is <code>set (Π (j : J), (F ⋙ Profinite_to_Top ⋙ forget Top).obj j)</code> but maybe I dont understand what the coercion is doing. I assume that coe_sort will give me <code>(Π (j : J), (F ⋙ Profinite_to_Top ⋙ forget Top).obj j)</code></p>",
        "id": 218949247,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607196436
    },
    {
        "content": "<p>No it won't, it will give you a type which bijects with that but which is not equal to that.</p>",
        "id": 218949942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607197328
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218949947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607197340
    },
    {
        "content": "<p>The coercion will give you a subtype of X corresponding to all the terms in X for which <code>true</code> is true, so in particular it will give you a different but isomorphic type.</p>",
        "id": 218950047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607197454
    },
    {
        "content": "<p>What happens if you just delete <code>str</code> completely? Does type class inference fill it in?</p>",
        "id": 218950076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607197520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Resolve.20coercion.20in.20hypothesis/near/218950076\">said</a>:</p>\n<blockquote>\n<p>What happens if you just delete <code>str</code> completely? Does type class inference fill it in?</p>\n</blockquote>\n<p>unfortunately not</p>",
        "id": 218950219,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607197692
    },
    {
        "content": "<p>What is the goal in <code>str := begin sorry end</code>?</p>",
        "id": 218950257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607197746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Resolve.20coercion.20in.20hypothesis/near/218950047\">said</a>:</p>\n<blockquote>\n<p>The coercion will give you a subtype of X corresponding to all the terms in X for which <code>true</code> is true, so in particular it will give you a different but isomorphic type.</p>\n</blockquote>\n<p>That is interesting.  So I should look for some lemma which puts a topology on an isomorphic type? Maybe that will be hard to work with in practice though</p>",
        "id": 218950267,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607197767
    },
    {
        "content": "<p>Maybe something like <code>str := by unfold sections; apply_instance</code> will work? Can you post some working code which I can run at my end?</p>",
        "id": 218950275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607197791
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">topological_space</span> <span class=\"bp\">↥</span><span class=\"o\">((</span><span class=\"n\">F</span> <span class=\"bp\">⋙</span> <span class=\"n\">Profinite_to_Top</span> <span class=\"bp\">⋙</span> <span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sections</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218950278,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1607197799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> if you want to do this in real time you can stream in Xena</p>",
        "id": 218950318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607197805
    }
]