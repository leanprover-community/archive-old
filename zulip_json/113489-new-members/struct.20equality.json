[
    {
        "content": "<p>I saw a topic about this in #general, but it didn't answer the more general question I have. How do I define equality for a new type of structure I want to use? i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.prod</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foos_equal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">edge1</span> <span class=\"n\">edge2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">edge1</span> <span class=\"bp\">=</span> <span class=\"n\">edge2</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">foo.mk</span> <span class=\"n\">edge1</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">foo.mk</span> <span class=\"n\">edge2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ext, -- (doesn't work?)</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have a more complicated setting where I'd like to prove things that look like this; the general idea is to be able to define and use an equivalence that hinges on the data used to create the struct and not the proofs about that data. Any help would be greatly appreciated!</p>",
        "id": 262268078,
        "sender_full_name": "Evan Lohn",
        "timestamp": 1637539008
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foos_equal</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">edge1</span> <span class=\"n\">edge2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">edge1</span> <span class=\"bp\">=</span> <span class=\"n\">edge2</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">foo.mk</span> <span class=\"n\">edge1</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">foo.mk</span> <span class=\"n\">edge2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"c1\">-- works!</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262268097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637539077
    },
    {
        "content": "<p><code>subst h</code> ought to work on your goal, no <code>ext</code> needed (because you have <code>mk</code> on both sides of the <code>=</code> so there's nothing that needs to be pulled apart)</p>",
        "id": 262268139,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637539130
    }
]