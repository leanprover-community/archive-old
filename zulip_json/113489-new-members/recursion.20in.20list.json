[
    {
        "content": "<p>Hello, I am new to lean, and I am having difficulties in invoking a recursive function. I am trying to define a subtitution function with the following inductive type and definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>     <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span>     <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitute</span><span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"c1\">-- (substitute arg₀ by arg₁ in arg₂)</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp.var</span> <span class=\"n\">s</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">e</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">exp.var</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">exp.app</span> <span class=\"n\">s</span> <span class=\"n\">le</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exp.app</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">le.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">substitute</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>However, the subtitution inside the map provokes the error message \"failed to prove recursive application is decreasing, well founded relation\". Do you have any suggestions to overcome this issue?</p>",
        "id": 273526279,
        "sender_full_name": "Catarina Gamboa",
        "timestamp": 1646070054
    },
    {
        "content": "<p>Your <code>exp</code> is a nested inductive type because <code>exp</code> appears recursively as an argument to a different type (<code>list</code>). As you've discovered, such types are poorly supported by Lean's termination checker. There are two ways forward:</p>\n<ul>\n<li>Use well-founded induction. This is a technique that allows you to prove a function terminates even when Lean doesn't immediately see it. There should be a section in the mathlib docs about this.</li>\n<li>Restructure your type to avoid the nesting. If possible, this would be my preferred choice.</li>\n</ul>\n<p>Coq supports nested inductives better btw, though afair the experience is not super great there either.</p>",
        "id": 273527727,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646070651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/113489-new-members/topic/recursion.20in.20list/near/273527727\">said</a>:</p>\n<blockquote>\n<p>There should be a section in the mathlib docs about this.</p>\n</blockquote>\n<p>Did you mean?<br>\n<a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a></p>",
        "id": 273528741,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646071041
    },
    {
        "content": "<p>You'll have a much nicer time if you make the type <code>app : ∀ {n}, string → (fin n → exp) → exp</code> (which is one particular way to do choice (2) suggested by Jannis).</p>",
        "id": 273539923,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1646076045
    }
]