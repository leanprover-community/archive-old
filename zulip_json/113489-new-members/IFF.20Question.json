[
    {
        "content": "<p>Here is the <code>iff</code> lemma I am trying to prove:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">another_helper</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n\n    <span class=\"n\">induction</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rw</span> <span class=\"n\">succ_eq_add_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I am trying to prove the first goal with induction, but I am stuck after the last line. Can anyone help, or suggest a better way to prove this?</p>",
        "id": 191135504,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584634054
    },
    {
        "content": "<p>You should use <code>{}</code> brackets to ensure that you only have one goal at all times. Your question is hard for me to understand because your code doesn't compile and I'm not entirely sure which rewrites are supposed to apply to which goals.</p>",
        "id": 191141324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584636512
    },
    {
        "content": "<p>There is a lemma in <code>mathlib</code> called <code>mul_le_mul_left</code>, which you can use by importing <code>data.nat.basic</code>. To solve your inductive case here, you can just use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>instead of the bunch of <code>rw</code>s. Which will close the goal.</p>\n<p>Also you don't need induction here, since you don't need the induction hypotheses.</p>\n<p>As <code>mul_le_mul_left</code> is already an iff statement, you can pretty much just use it to solve your goal without needing to <code>split</code> it.</p>\n<p>A complete proof just using <code>mul_le_mul_left</code> as an <code>iff</code> statement is like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">another_helper</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191141373,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584636530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"272522\">@Dev-Indra</span>: note the brackets <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> used!</p>",
        "id": 191141478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584636571
    },
    {
        "content": "<p>I've golfed it slightly :) Apparently <code>norm_num</code> is a lot more powerful than I thought.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">another_helper</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"bp\">*</span><span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Curiously, just <code>norm_num</code> by itself doesn't work, but using <code>cases</code>then <code>norm_num</code> does.</p>",
        "id": 191142481,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1584636966
    },
    {
        "content": "<p>Thanks.  <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I will take note of the use of {}</p>",
        "id": 191142921,
        "sender_full_name": "Dev-Indra",
        "timestamp": 1584637111
    }
]