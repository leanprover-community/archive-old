[
    {
        "content": "<p>So far I could only find variants of has_deriv_at which take as input a function from a normed group or field to a normed group. I want to talk about the differentiability of a function defined on an open subset of \\C, i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">\\</span><span class=\"n\">C</span>\n<span class=\"kd\">constant</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span>\n<span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">\\</span><span class=\"n\">C</span>\n</code></pre></div>\n\n<p>I suppose I could extend f by zero and then use has_deriv_at, but this doesn't seem like a natural way to do things. <br>\nShould I just make a definition kind of like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">has_deriv_open_subset_at</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">\\</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">\\</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n   <span class=\"o\">:=</span> <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">extend_by_0</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214045326,
        "sender_full_name": "Golol",
        "timestamp": 1603284981
    },
    {
        "content": "<p>Where did you get that function?</p>",
        "id": 214046347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603285549
    },
    {
        "content": "<p>I tried to push for a derivative on partial functions early on, but the view was that in practice you only ever get total functions (and we try to keep it that way)</p>",
        "id": 214046455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603285603
    },
    {
        "content": "<p>I want to formalize some basic lemmas in a complex analysis book I have and in this book functions are pretty much always associated with a domain U.</p>",
        "id": 214046562,
        "sender_full_name": "Golol",
        "timestamp": 1603285673
    },
    {
        "content": "<p>okay, so just ignore that then</p>",
        "id": 214046621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603285685
    },
    {
        "content": "<p>just use a total function which is only assumed to be reasonable on U</p>",
        "id": 214046656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603285713
    },
    {
        "content": "<p>ah hmm that would work for now</p>",
        "id": 214046685,
        "sender_full_name": "Golol",
        "timestamp": 1603285730
    },
    {
        "content": "<p>we'll just keep pushing the <code>extend_by_0</code> part off and maybe we'll never need it</p>",
        "id": 214046786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603285784
    },
    {
        "content": "<p>So I guess just always carry the domain along with the function and try to never do anything which depends on function values outside its domain. Ok that'll work.</p>",
        "id": 214047186,
        "sender_full_name": "Golol",
        "timestamp": 1603285989
    },
    {
        "content": "<p>welcome to the weird world of dependent type theory</p>",
        "id": 214047224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603286015
    },
    {
        "content": "<p>where the one thing you must avoid at all costs is dependent types</p>",
        "id": 214047525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603286166
    },
    {
        "content": "<p>I am struggling to rewrite <code>Δ x * (x - z) - Δ z * (x - z)</code> into <code>(Δ x  -  Δ z) * (x - z) </code> using right_distrib. The problem is that there is a minus and not a plus. What exactly does this notation actually stand for? Is it <code>Δ x * (x - z) + (-1) * Δ z * (x - z)</code>?</p>",
        "id": 214064440,
        "sender_full_name": "Golol",
        "timestamp": 1603293192
    },
    {
        "content": "<p>just use <code>sub_mul</code></p>",
        "id": 214064702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603293275
    },
    {
        "content": "<p>To see what notation stands for, you can use <code>set_option pp.notation false</code>.</p>",
        "id": 214065463,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603293508
    },
    {
        "content": "<p>Though often times you'll also need <code>set_option pp.implicit true</code> to make sense of the output.</p>",
        "id": 214065551,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603293538
    },
    {
        "content": "<p>There is probably a lemma that says that the two statements are equal (<code>-</code> and <code>+ (-1) *</code>) but only for types that make sense. So for example, this is not true for <code>nat</code> because there is no<code>-1</code> in <code>nat</code>, and subtraction in <code>nat</code> isn't what you expect.</p>",
        "id": 214066740,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603293926
    }
]