[
    {
        "content": "<p>Hi, I'm trying to prove some simple facts about <code>End</code> and <code>Aut</code>, see <a href=\"https://github.com/urkud/mathlib/blob/22ceb7d817a0f772a4ad9bb72eb3f282b4ebc920/src/category_theory/endomorphism.lean#L72\" target=\"_blank\" title=\"https://github.com/urkud/mathlib/blob/22ceb7d817a0f772a4ad9bb72eb3f282b4ebc920/src/category_theory/endomorphism.lean#L72\">https://github.com/urkud/mathlib/blob/22ceb7d817a0f772a4ad9bb72eb3f282b4ebc920/src/category_theory/endomorphism.lean#L72</a><br>\nCould you please explain why Lean fails to find instances for <code>monoid (End X)</code> and <code>monoid (End (f.obj X))</code> here? It tries <code>End.monoid</code> but says that is_defeq failed.</p>",
        "id": 169893341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562610690
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">End</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>works.</p>\n<p>What I <em>think</em> is going on is that Lean is actually looking for instances for <code>monoid (X ⟶ X)</code> and <code>monoid (f.obj X ⟶ f.obj X)</code>. You tell Lean explicitly that you want the output of <code>functor.map</code> to have type <code>End X → End (f.obj X)</code> but I don't think Lean listens. It checks that the type is defeq to that but for some reason when the type class algorithm is running it has already decided that <code>monoid (X ⟶ X)</code> is what it should be looking for.</p>",
        "id": 169895763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562612651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>fails, but</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">show</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>works and starts to solve the issues. There might also be some clever way of getting Lean to do elaboration in some different way.</p>",
        "id": 169896065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562612955
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! Indeed it was looking for <code>monoid (X ⟶ X)</code> instead of <code>monoid (End X)</code>. I wonder why <code>End.monoid</code> fails defeq anyway but at least now I have a workaround.</p>",
        "id": 169896575,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562613401
    },
    {
        "content": "<p>Type class inference does not do full definitional equality checking, for performance reasons. It should work if you make <code>End</code> reducible.</p>\n<div class=\"codehilite\"><pre><span></span>local attribute [reducible] End\n</pre></div>",
        "id": 169896883,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562613616
    },
    {
        "content": "<p>But <code>(@functor.map _ _ _ _ f X X : End X → End (f.obj X))</code> is supposed to have type <code>End X → End (f.obj X)</code> and that is what is fed to <code>is_monoid_hom</code>. I still don't quite understand what is going on here. Elaboration of that term is still spitting out something of type <code>(X ⟶ X) → (f.obj X ⟶ f.obj X)</code> despite Yury's pleas to do something else.</p>",
        "id": 169897097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562613832
    },
    {
        "content": "<p>Is it possible to avoid at least one of the two <code>@</code>? I mean, <code>@is_monoid_hom (End X) (End $ f.obj X) _ _ f.map</code> doesn't work because term<br>\n<code>f.map</code><br>\nhas type<br>\n<code>Π {X Y : C}, (X ⟶ Y) → (f.obj X ⟶ f.obj Y) : Type (max u v v')</code><br>\nbut is expected to have type<br>\n<code>End X → End (f.obj X) : Type (max v v')</code><br>\nIs it about extra arguments, or about <code>End</code> not marked as <code>reducible</code>?</p>",
        "id": 169897754,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562614352
    },
    {
        "content": "<blockquote>\n<p>But <code>(@functor.map _ _ _ _ f X X : End X → End (f.obj X))</code> is supposed to have type <code>End X → End (f.obj X)</code> and that is what is fed to <code>is_monoid_hom</code>. I still don't quite understand what is going on here. Elaboration of that term is still spitting out something of type <code>(X ⟶ X) → (f.obj X ⟶ f.obj X)</code> despite Yury's pleas to do something else.</p>\n</blockquote>\n<p>The notation <code>(t : T)</code> asks Lean to check (and enforce) that the type of <code>t</code> is definitionally equal to <code>T</code>. After Lean has done that, Lean will happily forget that you ever asked, and just continue with what it thought was the type of <code>t</code>. To enforce that Lean uses the type <code>T</code> for <code>t</code>, use <code>show T, from t</code>. </p>\n<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span>instance foo : is_monoid_hom (show End X → End (f.obj X), from functor.map f) :=\nsorry\n</pre></div>",
        "id": 169898854,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562615132
    },
    {
        "content": "<p>Alternatively, if you don't like <code>show</code> and want to give implicit arguments, give them to <code>is_monoid_hom</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">End</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 169898949,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562615190
    },
    {
        "content": "<blockquote>\n<p><code>f.map</code></p>\n</blockquote>\n<p>This is a bug with the projection notation: the first argument of <code>functor.map</code> after the explicit argument is implicit, and the projection notation cannot deal with that if you don't apply it to another argument. In this case you just have to write <code>functor.map f</code>.</p>",
        "id": 169899271,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562615394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thank you for the explanation!</p>",
        "id": 169899507,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562615572
    },
    {
        "content": "<p>I do recall vaguely that <code>show</code> in data can cause little troubles down the road.</p>",
        "id": 169900964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562616802
    },
    {
        "content": "<p>So even if it is more readable this way, I think that in practice the <code>@is_monoid_hom</code> version might be better for applications...</p>",
        "id": 169901051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562616848
    },
    {
        "content": "<p>But I might very well be mistaken.</p>",
        "id": 169901066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562616870
    },
    {
        "content": "<blockquote>\n<p>I do recall vaguely that <code>show</code> in data can cause little troubles down the road.</p>\n</blockquote>\n<p>yeah, I wouldn't be surprised if the instance <code>is_monoid_hom (show End X → End (f.obj X), from functor.map f)</code> does not always apply when  <code>@is_monoid_hom ... (functor.map f)</code> does. The form <code>@is_monoid_hom ... (functor.map f)</code> feels safer indeed.</p>",
        "id": 169901537,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562617287
    },
    {
        "content": "<p>There is a tactic to fix this, I think it's called <code>clean</code></p>",
        "id": 169902112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562617763
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">foo_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo_eq</span> <span class=\"c1\">-- theorem foo_eq : (show ℕ, from foo) = 1</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">foo_eq&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">clean</span> <span class=\"k\">show</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo_eq&#39;</span> <span class=\"c1\">-- theorem foo_eq&#39; : foo = 1</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 169902378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562617941
    },
    {
        "content": "<p>Aah -- a secret tactic! Not mentioned in any docs at all?</p>",
        "id": 169902513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562618087
    },
    {
        "content": "<p>It's pretty specialized, to basically this exact situation</p>",
        "id": 169902567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618125
    },
    {
        "content": "<p>At least it has a docstring.</p>",
        "id": 169902572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562618128
    },
    {
        "content": "<p>it removes a bunch of things that are identity functions used for annotation</p>",
        "id": 169902583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618141
    },
    {
        "content": "<p>like <code>show</code></p>",
        "id": 169902588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618145
    },
    {
        "content": "<p>hm, this fails, but it looks like a lean bug:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">foo_eq&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">clean</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo_eq&#39;&#39;</span> <span class=\"c1\">-- theorem foo_eq&#39;&#39; : foo = 1</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 169902654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618173
    },
    {
        "content": "<p><code>rw foo_eq''</code> also fails with \"can't find <code>foo</code>\" which makes no sense since that's literally the statement</p>",
        "id": 169902710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618229
    },
    {
        "content": "<p>Oh, these are not the same, but <code>pp.all</code> isn't enough to show the difference. (I changed <code>1</code> to <code>nat.zero</code> to make the super-pp-all not so big)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">foo_eq₁</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">foo_eq₂</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">clean</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo_eq₁</span> <span class=\"c1\">-- theorem foo_eq₁ : @eq.{1} nat foo nat.zero</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo_eq₂</span> <span class=\"c1\">-- theorem foo_eq₂ : @eq.{1} nat foo nat.zero</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">foo_eq₁</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span>\n  <span class=\"c1\">-- (app (app (app (const eq [1]) (const nat [])) (const foo [])) (const nat.zero []))</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">foo_eq₂</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span>\n  <span class=\"c1\">-- (app (app (app (const eq [1]) (const nat [])) [macro annotation (const foo [])]) (const nat.zero []))</span>\n</pre></div>",
        "id": 169903178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618588
    },
    {
        "content": "<p>damn you <code>macro annotation</code></p>",
        "id": 169903221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562618625
    },
    {
        "content": "<p>that's not particularly well-documented either, as far as I know</p>",
        "id": 169903271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562618645
    },
    {
        "content": "<p>Where is the \"understatement\" emoji?</p>",
        "id": 169903340,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562618716
    },
    {
        "content": "<p>by sheer luck, there is an API function <code>expr.is_annotation</code> that will allow us to destructure an annotation</p>",
        "id": 169903804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562619068
    },
    {
        "content": "<p>so <code>clean</code> can be fixed</p>",
        "id": 169903814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562619083
    },
    {
        "content": "<p>I'll rewrite <a href=\"https://github.com/leanprover-community/mathlib/issues/1195\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1195\">#1195</a> to use <code>@is_*_hom</code></p>",
        "id": 169904052,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562619255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">expr</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">clean_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">clean_ids</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span>\n  <span class=\"o\">(</span><span class=\"n\">clean_aux</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">e&#39;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">clean_aux</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">e&#39;</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">e&#39;</span> <span class=\"err\">←</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">is_annotation</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">clean_aux</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">e&#39;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">clean&#39;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">clean_aux</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">foo_eq₃</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">clean&#39;</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">foo_eq₃</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span>\n  <span class=\"c1\">-- (app (app (app (const eq [1]) (const nat [])) (const foo [])) (const nat.zero []))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 169904572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562619676
    }
]