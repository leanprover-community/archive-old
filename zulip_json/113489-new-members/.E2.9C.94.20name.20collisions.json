[
    {
        "content": "<p>I decided that for a more manageable first attempt, I would try to write down some nice properties about Steiner systems. A question: I want to define a <code>mul_left_cancel</code> lemma on my structure, just like mathlib has on <code>left_cancel_semigroup</code>. But, my structure is not a kind of <code>left_cancel_semigroup</code> (it isn't associative). This means that if I <code>import algebra.group.defs</code>, I get name collision.</p>\n<p>Does this mean that the <code>mul_left_cancel</code> name is foreven taken up by semigroups, never to be used by other structures? I thought I might be able to give an alternate meaning of <code>mul_left_cancel</code> for other structures, but I guess that isn't the case. So for now I'm naming my lemma <code>mul_left_cancel_S</code> which is somewhat unsatisfying...</p>",
        "id": 256173667,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633406522
    },
    {
        "content": "<p>For that matter, I don't understand the difference between a <code>theorem</code> and a <code>lemma</code> and can't find information anywhere :c</p>",
        "id": 256173726,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633406554
    },
    {
        "content": "<p><code>theorem</code> and <code>lemma</code> are strictly the same (if an expert could confirm, but I'm pretty sure of that).</p>",
        "id": 256173883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633406684
    },
    {
        "content": "<p>When we have several structures on which a same lemma holds true, we usually abstract away their commonalities. Note however that this is not alway the case. In particular, all lemmas holding on a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group\">docs#group</a> also hold on a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_with_zero\">docs#group_with_zero</a> assuming all variables are nonzero (and often a bit more generally). Typical examples are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_inv_smul\">docs#smul_inv_smul</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_inv\">docs#smul_inv</a>_smul₀. Another source of those \"duplicated\" lemmas is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_monoid\">docs#canonically_ordered_monoid</a> where all elements are positive in some sense, so there's no need to assume positivity in lemmas.</p>",
        "id": 256174293,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633407001
    },
    {
        "content": "<p>So here I'd advise you to simply prime your lemma name and once your stuff gets PRed, we can decide whether there's a correct abstraction to unify your lemma with the <code>left_cancel_semigroup</code>one (in general, there is: you can create a typeclass which precisely states a given lemma).</p>",
        "id": 256174432,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633407110
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 256174589,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633407241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> has marked this topic as resolved.</p>",
        "id": 256174626,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633407244
    },
    {
        "content": "<p>You can also just \"hide\" all your new lemmas in a namespace, e.g. <code>steiner_system</code>.</p>",
        "id": 256174683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633407289
    },
    {
        "content": "<p>Ooh, ok. I think I might prefer that.</p>",
        "id": 256174819,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1633407370
    }
]