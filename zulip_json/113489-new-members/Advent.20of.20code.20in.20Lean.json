[
    {
        "content": "<p>Hello Lean Zulip chat,</p>\n<p>I am trying to do the advent of code (<a href=\"https://adventofcode.com/\" target=\"_blank\" title=\"https://adventofcode.com/\">https://adventofcode.com/</a>) in Lean. I've gotten the code for part 1 written, I'm just trying to figure out how to do IO. There seems to be some functions for doing file IO (<a href=\"https://github.com/leanprover/lean/blob/master/library/system/io.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/system/io.lean\">https://github.com/leanprover/lean/blob/master/library/system/io.lean</a>), but then I realized I have no idea how to parse a char_buffer into a \\N. Is there some sort of standard library function for parsing numbers, or will I need to roll my own?</p>",
        "id": 182304794,
        "sender_full_name": "Frank Dai",
        "timestamp": 1575242299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> did a few of last year's problems in Lean (<a href=\"https://github.com/digama0/advent-of-code\" target=\"_blank\" title=\"https://github.com/digama0/advent-of-code\">repo here</a>). It looks like he used core Lean's <a href=\"https://github.com/leanprover-community/lean/blob/master/library/data/buffer/parser.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/data/buffer/parser.lean\"><code>data.buffer.parser</code></a> functions <a href=\"https://github.com/digama0/advent-of-code/blob/lean-3.4.1/common.lean\" target=\"_blank\" title=\"https://github.com/digama0/advent-of-code/blob/lean-3.4.1/common.lean\">in his code here</a>.</p>",
        "id": 182305130,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575242934
    },
    {
        "content": "<p>Thanks for the information, I got it!</p>",
        "id": 182305272,
        "sender_full_name": "Frank Dai",
        "timestamp": 1575243199
    },
    {
        "content": "<p>This is what I have for the first day. It's not pretty and there is one 'sorry' ... so suggestions on how to improve this are quite welcome <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span> <span class=\"n\">io</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append_line</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">ml</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">do</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">ml</span><span class=\"o\">,</span>\n             <span class=\"n\">x</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_line</span><span class=\"o\">,</span>\n             <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">l</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">])</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fuel_wf</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">additional_fuel</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"n\">fuel_wf</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">additional_fuel</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">total_fuel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):=</span> <span class=\"k\">let</span> <span class=\"n\">fm</span> <span class=\"o\">:=</span> <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">fm</span> <span class=\"bp\">+</span> <span class=\"n\">additional_fuel</span> <span class=\"n\">fm</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span> <span class=\"n\">lines</span> <span class=\"bp\">&lt;-</span> <span class=\"o\">(</span><span class=\"n\">foldl</span> <span class=\"n\">append_line</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">100</span><span class=\"o\">),</span>\n         <span class=\"n\">fuel</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">total_fuel</span> <span class=\"err\">∘</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span> <span class=\"n\">lines</span><span class=\"o\">,</span>\n         <span class=\"n\">put_str_ln</span> <span class=\"err\">∘</span> <span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">fuel</span>\n</pre></div>",
        "id": 182389643,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1575320800
    },
    {
        "content": "<p>Isn't this sorry a new test for <code>omega</code>?</p>",
        "id": 182391359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575321707
    },
    {
        "content": "<blockquote>\n<p>Isn't this sorry a new test for <code>omega</code>?</p>\n</blockquote>\n<p>Hm, I can indeed solve <code>m &lt; 3 * (m+2)</code> with <code>omega</code>, which leaves me with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fuel_wf</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n\n  <span class=\"n\">omega</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><del>Sadly I don't even know how to use the definitional equality <code>fuel m = m/3 - 2</code> <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> I just recently finished the natural number game ...</del> I think I can take it from there</p>",
        "id": 182395519,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1575324683
    },
    {
        "content": "<p>If you are doing advent of code, you don't need to worry about termination, so you can mark <code>additional_fuel</code> as <code>meta</code> and delete the <code>have</code></p>",
        "id": 182395995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575325012
    },
    {
        "content": "<blockquote>\n<p>If you are doing advent of code, you don't need to worry about termination, so you can mark <code>additional_fuel</code> as <code>meta</code> and delete the <code>have</code></p>\n</blockquote>\n<p>I know, but where's the fun in that? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 182396107,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1575325108
    },
    {
        "content": "<p>Sadly <code>m &lt; 3 * (m + 2)</code> is much easier to prove than your goal (and <code>linarith</code> probably does it as well). What you found is the worst part of Lean: nat subtraction hell.</p>",
        "id": 182397344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575326157
    },
    {
        "content": "<p>Unfortunately we still don't have a tactic handling that.</p>",
        "id": 182397412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575326193
    },
    {
        "content": "<p>Actually it may start even before that. Are you sure you actually understand what is <code>m/3</code> in your code? (hint: it's a natural number, not a rational number).</p>",
        "id": 182397741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575326487
    },
    {
        "content": "<p>This is a rare instance where getting a nat from division is actually desired: <a href=\"https://adventofcode.com/2019/day/1\" target=\"_blank\" title=\"https://adventofcode.com/2019/day/1\">https://adventofcode.com/2019/day/1</a></p>",
        "id": 182397874,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1575326610
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fuel</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fuel_wf</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_div_iff_mul_le</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">erw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_left_iff_lt_add</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span> <span class=\"n\">m</span> <span class=\"mi\">3</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span>  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I really don't know why I did this, probably fear of not finding sleep if I go to bed...</p>",
        "id": 182398187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575326987
    },
    {
        "content": "<p>Nice, thanks a lot! I tried to do it myself and ended up with the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">fuel_wf</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fuel</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">div_lt_self</span> <span class=\"n\">h</span> <span class=\"bp\">_;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">/</span><span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le_self</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">2</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fuel</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Somehow I had a hard time finding <code>sub_le_self</code> ... I also had to prefix it with <code>nat.</code> because otherwise lean tried to use the one for ordered commutative groups, which obviously does not work for nat.</p>",
        "id": 182652472,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1575547334
    },
    {
        "content": "<p>It's a bug that <code>m/3 - 2 ≤ m/3</code> isn't <code>by omega</code>. Hopefully we get this fixed soon.</p>",
        "id": 182652716,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575547575
    },
    {
        "content": "<p><code>norm_num</code> is more appropriate than <code>linarith</code> in the first <code>have</code>.</p>",
        "id": 182652732,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575547593
    },
    {
        "content": "<p>Hello, all. I'm insane in doing this, but I'm hoping to try advent of code in Lean this year.</p>",
        "id": 260552648,
        "sender_full_name": "Ocschwar",
        "timestamp": 1636258290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> tried this in lean 4 last year iirc. I think he called the project advent of lean 4. Maybe you can find some useful stuff there</p>",
        "id": 260564846,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636278781
    },
    {
        "content": "<p><a href=\"https://github.com/rwbarton/advent-of-lean-4\">https://github.com/rwbarton/advent-of-lean-4</a></p>",
        "id": 260568915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636284881
    },
    {
        "content": "<p>Hello all, I am completely new to Lean and I am planning to use advent of code as an opportunity to learn about it. Looking forward to trying it out! By the way, is it preferable to start new topics for asking questions, or to simply continue this thread?</p>",
        "id": 263122336,
        "sender_full_name": "Tim Hunter",
        "timestamp": 1638266442
    },
    {
        "content": "<p>topics are cheap. feel free to start new ones.</p>",
        "id": 263122500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638266532
    },
    {
        "content": "<p>It keeps the discussion organized</p>",
        "id": 263122520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638266545
    }
]