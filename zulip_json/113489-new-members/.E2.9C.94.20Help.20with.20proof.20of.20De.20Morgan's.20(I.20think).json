[
    {
        "content": "<p>Edit: I'm not sure if it makes a difference, but this problem is supposed to be solved without the  <code>classical</code> library. </p>\n<p>I'm working through chapter 3 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html\">Theorem Proving in Lean</a>. I'm pretty sure that there are three problems that are a lead-up to a proof of De Morgan's (these are the second, third and fourth problems in the \"other properties\" section of the exercises). I'm completely stuck with the first one. I'm pretty sure I was able to prove the the second half of the bi-conditional, but I'm asking for some hint on how to prove the first half. My code so far is below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">iff.intro</span>\n<span class=\"gr\">sorry</span>\n<span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"n\">or.elim</span> <span class=\"n\">h₁</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">and.left</span> <span class=\"n\">h₀</span><span class=\"o\">)</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">and.right</span> <span class=\"n\">h₀</span><span class=\"o\">)</span> <span class=\"n\">h₂</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 266929308,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1641385986
    },
    {
        "content": "<p>Conceptually for proving the left to right direction you can again assume the left hand side, apply the introduction rule for <code>and</code> and the two subgoals that emerge should be almost the same and rather easy to solve with <code>or</code> introduction rules.</p>",
        "id": 266930001,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641386472
    },
    {
        "content": "<p>Can you complete the proof from here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"c1\">-- we need to prove an implication, so we need to use assume / λ</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and.intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- we need to prove an `∧`, so we need to use `and.intro`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- in both cases we need to prove an implication, so we need to use assume / λ</span>\n</code></pre></div>",
        "id": 266930113,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1641386549
    },
    {
        "content": "<p>Thank you both for the comments. These are good hints. Let me play with these for a while and see if I can come to a solution.</p>",
        "id": 266930377,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1641386717
    },
    {
        "content": "<p>Nice, I think I've got it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">and.intro</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">h₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₀</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h₁</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>Using those underscores helped a lot with figuring out what I needed to prove, but I've actually just never seen a proof structured this way and I'm not really sure I understand it. This feels a lot like <code>or.elim</code>, but we didn't need to use that keyword. Why didn't we use that here?</p>\n<p>I'm learning a lot of logic on the fly here, but maybe I should actually study from a textbook. Is there any reasonably-sized logic textbook that might show me the fundamentals that anyone could recommend?</p>\n<p>Thanks again for the help!</p>",
        "id": 266932450,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1641387775
    },
    {
        "content": "<p>Oh wait, I think I understand now. In our subgoals, we assume p and q because they are both hypotheses of the conjunction on the RHS. This was actually what I wanted to do originally, but I wasn't sure how to structure a proof that way in Lean. This is awesome!</p>\n<p>I understand why we're not using  <code>or.elim</code> here.</p>",
        "id": 266932898,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1641387996
    },
    {
        "content": "<p><code>or.elim</code> is used when you want to use an <code>∨</code> to prove something else (i.e. case distinction), whereas <code>or.inl</code> and <code>or.inr</code> are used to prove <code>∨</code>.</p>",
        "id": 266932976,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1641388036
    },
    {
        "content": "<p>Got it. Thanks very much for the help here.</p>",
        "id": 266933111,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1641388093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466607\">Andrew Lubrino</span> has marked this topic as resolved.</p>",
        "id": 266933136,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641388101
    },
    {
        "content": "<p>If you are looking for an introduction to Lean that focuses more on teaching the basics of logic along the way, there is <a href=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a>. Not sure if it's up-to-date (i.e. works with the most recent versions of Lean 3) :-)</p>",
        "id": 266933380,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1641388237
    },
    {
        "content": "<p>I personally didn't even really know natural deduction or about structuring things into \"introduction rules\" and \"elimination rules\" when I learned Lean, but it kind of clicked immediately that this is a useful way to think about logic proofs.</p>",
        "id": 266933603,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1641388388
    },
    {
        "content": "<p>Oh yes, I looked at this one too. This definitely has more introductory material and is better for beginners. I'll use this a little more I think. Thanks for the recommendation.</p>",
        "id": 266934551,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1641388977
    }
]