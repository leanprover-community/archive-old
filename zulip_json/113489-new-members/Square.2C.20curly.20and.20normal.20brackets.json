[
    {
        "content": "<p>Hey everybody,</p>\n<p>I am still trying to do the lean exercises in section 2, i.e. defining vector addition, matrix addition and matrix  multiplication. And this is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_add</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span> <span class=\"o\">[],</span>    <span class=\"n\">h</span> <span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"o\">[],</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span> <span class=\"o\">[],</span>    <span class=\"n\">h</span> <span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span> <span class=\"o\">[],</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vec_add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">vec_add</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">vec_has_add</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">](</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">vec_add</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">vec_has_add</span>\n\n<span class=\"n\">def</span> <span class=\"n\">scal_mul</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">scal_mul</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">scal_mul</span>\n</pre></div>\n\n\n<p>This somehow works. But I what exactly is the difference between declaring a variable \\alpha:Type in the beginning of a file and putting (\\alpha:Type) in front of the colon of every declaration? What is the difference between normal brackets and curly braces?</p>\n<p>E.g. in the definition of vec_add I had to make everything a a dependent type depending on n since otherwise the recursion wouldn't work out. Is it also possible to skip (\\alpha:Type) in front of the colon and make everything a dependent type depending on \\alpha?</p>\n<p>It is hard to spell out but I have a bunch of problems which seem very similar to each other making me feel that I didn't get something conceptually.</p>",
        "id": 180116607,
        "sender_full_name": "yuppie",
        "timestamp": 1573120274
    },
    {
        "content": "<p>The difference is that <code>variable (α : Type)</code> saves you some typing.</p>",
        "id": 180117250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573120897
    },
    {
        "content": "<p>The difference between <code>()</code> and <code>{}</code> is in how you can call such declarations. If you use <code>def foo {α : Type}</code> then <code>α</code> is <em>implicit</em> which means that you don't pass that argument to <code>foo</code> when you call it.</p>",
        "id": 180117334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573120967
    },
    {
        "content": "<p>This is useful, if <code>α</code> can be figured out by looking at other arguments (for example <code>a : α</code> might be another argument to <code>foo</code>.</p>",
        "id": 180117356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573121007
    },
    {
        "content": "<p>If at some point you do want to tell Lean the argument <code>α</code>, you can write <code>@foo α</code>, and the <code>@</code> will make all arguments to <code>foo</code> explicit.</p>",
        "id": 180117428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573121073
    },
    {
        "content": "<p>Oh thanks for the quick answer. I see.</p>",
        "id": 180117964,
        "sender_full_name": "yuppie",
        "timestamp": 1573121602
    },
    {
        "content": "<p>And writing variable \\a:Type is somehow a \"fixed constant\" and every definition depending on it is fixed as well and cannot be instantiated with another type?</p>",
        "id": 180118063,
        "sender_full_name": "yuppie",
        "timestamp": 1573121700
    },
    {
        "content": "<p>I mean variable \\a:Type is not syntactic sugar for inserting (a:Type) in front of every definition nor {a:Type}. It is really something else.</p>",
        "id": 180118151,
        "sender_full_name": "yuppie",
        "timestamp": 1573121769
    },
    {
        "content": "<p>No, it is such syntactic sugar</p>",
        "id": 180118641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573122282
    },
    {
        "content": "<p>And it is a bit smart, because it only gets inserted when needed</p>",
        "id": 180118658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573122297
    },
    {
        "content": "<p>So it is not a \"fixed constant\"</p>",
        "id": 180118681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573122325
    },
    {
        "content": "<p>And is it sugar for normal brackets or curly braces?</p>",
        "id": 180118865,
        "sender_full_name": "yuppie",
        "timestamp": 1573122488
    },
    {
        "content": "<p>Depends on what you put after the <code>variables</code> keyword</p>",
        "id": 180119008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573122618
    },
    {
        "content": "<p>You can write <code>variables {G : Type} [group G] (g : G)</code></p>",
        "id": 180119061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573122650
    },
    {
        "content": "<p>And if halfway your file you need to switch, you can write <code>variables (G)</code> and from then on <code>G</code> will be explicit</p>",
        "id": 180119097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573122674
    },
    {
        "content": "<p>Ahhh, I see!</p>",
        "id": 180119115,
        "sender_full_name": "yuppie",
        "timestamp": 1573122689
    },
    {
        "content": "<p>Thanks. This clarified a lot.</p>",
        "id": 180119192,
        "sender_full_name": "yuppie",
        "timestamp": 1573122734
    },
    {
        "content": "<p>If you write <code>variable A : Type</code> with no parentheses it's explicit, the same as <code>(A : Type)</code>.</p>",
        "id": 180119195,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573122735
    },
    {
        "content": "<blockquote>\n<p>Thanks. This clarified a lot.</p>\n</blockquote>\n<p>It took me ages to learn this. It was only looking through the mathlib source code and noticing Johannes constantly writing <code>variable (X : Type)</code> when he'd already got a variable X and finally asking someone what was going on, that it all dawned on me. <span class=\"user-mention\" data-user-id=\"246966\">@yuppie</span> you should write up a brief <code>variables.md</code> file and PR it to the mathlib docs directory. Just a brief thing explaining the contents of this thread.</p>",
        "id": 180127040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573129836
    },
    {
        "content": "<p>Yeah I can do that although evidently I have no idea about it ;) Do you mean into the mathlib repo? Is that the right place for explanations of the lean core syntax?</p>",
        "id": 180127675,
        "sender_full_name": "yuppie",
        "timestamp": 1573130459
    },
    {
        "content": "<p>I think so, and I want to make that doc directory grow. I certainly wrote stuff in it which explained <code>simp</code> and I wrote it exactly when I was in the same situation as you -- I had figured out some stuff about <code>simp</code> about 30 minutes previously and I just thought \"sod it, I don't want to have to figure all of this out again, let me write it down\". I've spent my entire life figuring out stuff and then just writing it down. In maths I ended up with this page <a href=\"http://wwwf.imperial.ac.uk/~buzzard/maths/research/notes/index.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/maths/research/notes/index.html\">http://wwwf.imperial.ac.uk/~buzzard/maths/research/notes/index.html</a> and people love those notes, I get fan mail, google indexes them highly, it works great. Why not do the same with Lean? When people work stuff out, just write it down quick before you forget it all again.</p>",
        "id": 180128519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573131233
    },
    {
        "content": "<p>Ok I'll do it :)</p>",
        "id": 180131492,
        "sender_full_name": "yuppie",
        "timestamp": 1573133435
    },
    {
        "content": "<p>Maybe the relevant section(s) in TPiL could be improved as well, though I don't have any concrete suggestions. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span></p>",
        "id": 180131969,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573133773
    },
    {
        "content": "<p>We don't need to keep hassling Jeremy. These facts could easily be in there and I just missed them first time around. TPIL is a brilliant document, I learnt so much from it, the mathlib docs can just build around it. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> 's comment from the other day about how hard it was to use a new (to him) part of the library made me start thinking about this. <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> was figuring out how to use equalisers in the category theory library at Xena last week and I was hugely encouraging him to just write something once he'd figured it out. It would be really nice to just get a bunch of users explaining stuff they understand as they understand it.</p>",
        "id": 180138678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573138033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Don't worry about hassling me. I keep adding things to my list. I feel guilty that I am falling behind with corrections, but I am planning to catch up on Tuesday.</p>\n<p>But I agree that it would be good to have more documentation for mathlib. The docs folder is great. But it is also not hard to set up a new Sphinx document with the same style as TPIL. I'll be happy to do that if there is community interest in putting together a nice mathlib reference.</p>",
        "id": 180258668,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1573238523
    },
    {
        "content": "<p>I have been experimenting with the different types of variable declarations. Here is a code snippet:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_add</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vec_add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">vec_add</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">vec_add</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_add_2</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">](</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vec_add_2</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">vector</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">(</span><span class=\"n\">w</span><span class=\"o\">)))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">vec_add_2</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">vec_add_2</span>\n</pre></div>\n\n\n<p>The check commands indicate that both declarations are of the same type but the first implementation type checks and the second does not. Somehow it interprets the first (explicit) argument as a vector and not as a natural number which is necessary for the recursion.</p>\n<p>My question: What is the difference between the two declarations (Pi after the colon vs. (n:nat) before the colon)? How do I make the implementation of vec_add_2 type check?</p>",
        "id": 180420057,
        "sender_full_name": "yuppie",
        "timestamp": 1573476523
    },
    {
        "content": "<p>You can only pattern match on things after the colon</p>",
        "id": 180420207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573476635
    },
    {
        "content": "<p>So you can use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span>\n</pre></div>\n\n\n<p>in the second example. You only have two arguments to match on.</p>",
        "id": 180420247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573476667
    },
    {
        "content": "<p>To add: If you put arguments before the colon, they will be bound for the whole declaration. So within the definition of <code>vec_add_2</code>, the expression <code>vec_add_2</code> has type <code>vector α n → vector α n → vector α n</code></p>",
        "id": 180420274,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1573476709
    },
    {
        "content": "<p>Right... that's an important thing to know for recursive definitions. And it took me some time to understand this. (I admit, I should probably have read TPIL...)</p>",
        "id": 180420364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573476772
    },
    {
        "content": "<p>I tried to write this stuff up and opened a PR but I am not sure whether I could and should have assigned this to a specific reviewer. How do you handle things here?</p>",
        "id": 181725718,
        "sender_full_name": "yuppie",
        "timestamp": 1574533081
    },
    {
        "content": "<p>You don't need to assign it to anyone.</p>",
        "id": 181725836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574533251
    },
    {
        "content": "<p>Ok I hope this is kind of what you thought about.</p>",
        "id": 181725962,
        "sender_full_name": "yuppie",
        "timestamp": 1574533486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246966\">@yuppie</span> Thanks for the PR</p>",
        "id": 181798694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574667785
    },
    {
        "content": "<p>Sorry, wrong thread.</p>",
        "id": 185440454,
        "sender_full_name": "Chris B",
        "timestamp": 1578846743
    }
]