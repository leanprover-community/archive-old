[
    {
        "content": "<p>Hello there, i am not sure if i am in the right place to ask but i am planning on submitting a pretty simple PR contribution to mathlib and i will like someone with more experience to take a look : <a href=\"https://github.com/oxarbitrage/mathlib/pull/1\">https://github.com/oxarbitrage/mathlib/pull/1</a> . Any feedback will be very appreciated.</p>",
        "id": 285737561,
        "sender_full_name": "Alfredo",
        "timestamp": 1654898504
    },
    {
        "content": "<p>I might suggest defining it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">≢</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>since that way the modeq will directly be visible to <code>rw</code> and <code>simp</code>.</p>\n<p>Or, if you do want <code>modneq</code> as a def of its own (for example, if you want dot notation to work for it), you can follow how <code>neq</code> works <a href=\"https://github.com/leanprover-community/lean/blob/68455b087d87e9dc3f736da0de95807e05260460/library/init/logic.lean#L100\">here</a> and do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">modneq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span>\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">≢</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">modneq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>The <code>reducible</code> makes it so that things can see through the definition. (You shouldn't don't need <code>@[derive decidable]</code> when you have this attribute.)</p>",
        "id": 285748075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654908685
    },
    {
        "content": "<p>In either case, I think it would be better if the <code>a % n ≠ b % n</code> form were some sort of \"<code>modneq_iff</code>\" lemma rather than being the definition itself since you want <code>modneq</code> to transparently be that it's not <code>modeq</code>.</p>",
        "id": 285748270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654908954
    },
    {
        "content": "<p>Note also that you have not made this PR in a way that it can actually be merged; make sure to read or contribution guidelines</p>",
        "id": 285769334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654938991
    },
    {
        "content": "<blockquote>\n<p>Note also that you have not made this PR in a way that it can actually be merged; make sure to read or contribution guidelines</p>\n</blockquote>\n<p>I think i did, besides not having the PR pointing to the mathlib repository what do i have missing ?</p>",
        "id": 285777799,
        "sender_full_name": "Alfredo",
        "timestamp": 1654951536
    },
    {
        "content": "<p>Your shouldn't push to a fork for CI reasons. That is, your PR source branch must be a part of leanprover-community/mathlib itself. Maintainers can grant you permission to push to non-master branches if you don't have it already.</p>",
        "id": 285778001,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1654951812
    },
    {
        "content": "<p>Thank you for the suggestions Kyle, i agree with it. I made some changes so now i have it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">modneq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">≢</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">modneq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">modneq.def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The <code>modneq.def</code> is similar to <a href=\"https://github.com/leanprover-community/lean/blob/68455b087d87e9dc3f736da0de95807e05260460/library/init/logic.lean#L103\">https://github.com/leanprover-community/lean/blob/68455b087d87e9dc3f736da0de95807e05260460/library/init/logic.lean#L103</a></p>\n<p>However, it requires a bit more effort to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">15</span> <span class=\"bp\">≡</span> <span class=\"mi\">3</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">12</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">modeq</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">19</span> <span class=\"bp\">≢</span> <span class=\"mi\">6</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">11</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">modneq</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">modneq.def</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Ill keep trying but let me know how do you see it</p>",
        "id": 285780003,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954735
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>  i think i do have permissions already, i submitted a PR a few months ago iirc</p>",
        "id": 285780049,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954792
    },
    {
        "content": "<p>I did on my own fork because  i wanted to show the idea first, if it was a bad one i didnt wanted people on mathlib wasting time reviewing it</p>",
        "id": 285780100,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954848
    },
    {
        "content": "<p>i will push directly the next time</p>",
        "id": 285780122,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954886
    },
    {
        "content": "<p>That's fair! But I think marking your PR as a Draft has the same meaning</p>",
        "id": 285780124,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1654954899
    },
    {
        "content": "<p>maybe as a draft pull request</p>",
        "id": 285780125,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954903
    },
    {
        "content": "<p>right, agree, thanks</p>",
        "id": 285780127,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954914
    },
    {
        "content": "<p>ill do that now</p>",
        "id": 285780176,
        "sender_full_name": "Alfredo",
        "timestamp": 1654954957
    },
    {
        "content": "<p>So, here it is now, thanks again <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/14682\">https://github.com/leanprover-community/mathlib/pull/14682</a></p>",
        "id": 285780900,
        "sender_full_name": "Alfredo",
        "timestamp": 1654956071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"476482\">@Alfredo</span> You might like to have this too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">modneq_iff</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≢</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>That way you can rewrite in one step.</p>",
        "id": 285781187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654956538
    },
    {
        "content": "<p>great, with that we can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">19</span> <span class=\"bp\">≢</span> <span class=\"mi\">6</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">11</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">modneq_iff</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 285781748,
        "sender_full_name": "Alfredo",
        "timestamp": 1654957367
    },
    {
        "content": "<p><code>modneq.def</code> looks like a weird lemma to have, we don't normally write lemmas about equality of props</p>",
        "id": 285794084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654975675
    },
    {
        "content": "<p>removed <code>modneq.def</code> then changed the PR from the draft state: <a href=\"https://github.com/leanprover-community/mathlib/pull/14682\">https://github.com/leanprover-community/mathlib/pull/14682</a></p>",
        "id": 285842898,
        "sender_full_name": "Alfredo Garcia",
        "timestamp": 1655040764
    },
    {
        "content": "<p>thank you Eric for all the help, looks great now.</p>",
        "id": 285842906,
        "sender_full_name": "Alfredo Garcia",
        "timestamp": 1655040776
    }
]