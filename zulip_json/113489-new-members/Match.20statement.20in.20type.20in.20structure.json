[
    {
        "content": "<p>I am trying to define the type of potentially countably infinite binary strings. I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.bounded_order</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.module</span>\n\n<span class=\"kd\">@[derive [</span>\n<span class=\"kd\">  has_zero, add_comm_monoid_with_one,</span>\n<span class=\"kd\">  canonically_ordered_comm_semiring, complete_linear_order, nontrivial,</span>\n<span class=\"kd\">  canonically_linear_ordered_add_monoid, has_sub, has_ordered_sub,</span>\n<span class=\"kd\">  linear_ordered_add_comm_monoid_with_top, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">extnat</span> <span class=\"o\">:=</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">extnat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">extnat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">extnat</span>\n\n<span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">extnat.top</span><span class=\"o\">)</span> <span class=\"bp\">`∞`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">extnat</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">structure</span> <span class=\"n\">binstring</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">seq</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">len</span><span class=\"o\">:</span> <span class=\"n\">extnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">proof</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">len</span> <span class=\"k\">with</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n                                        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n                                        <span class=\"kd\">end</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>Basically, <code>finstring</code> should be a sequence with a length, together with a proof that the sequence is 0 after the end of the length. I could probably also do this with a quotient instead, but this is the route I am trying first.</p>\n<p>However this gives me the error \"failed to register private name '_match_1', prefix has not been registered\". What causes this error? What would the idiomatic way of writing the type of such a proof be? An alternative I am considering is <code>(proof: len = ∞ ∨ (∃l: ℕ, len = l ∧ ∀n ≥ l, seq n = false))</code></p>",
        "id": 300464094,
        "sender_full_name": "Josiah Eldon Bills",
        "timestamp": 1663974534
    },
    {
        "content": "<p>FYI, your <code>extnat</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat\">docs#enat</a></p>",
        "id": 300464332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663974724
    },
    {
        "content": "<p>For the <code>match</code> expression, this seems to be a bug, but in any case I think it would be easier to work with <code>proof: ∀n ≥ len, seq n = ff</code>.</p>",
        "id": 300464444,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663974806
    },
    {
        "content": "<p>There's a coercion from <code>nat</code> to <code>enat</code>, so the statement will be vacuously true if <code>len = ∞</code></p>",
        "id": 300464508,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663974844
    },
    {
        "content": "<p>You'll have to write it as <code>∀(n : ℕ), n ≥ len ∧ seq n = ff</code> I believe (sorry, I haven't checked it in Lean)</p>",
        "id": 300464566,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663974907
    },
    {
        "content": "<p>All right, that makes sense</p>",
        "id": 300464586,
        "sender_full_name": "Josiah Eldon Bills",
        "timestamp": 1663974935
    }
]