[
    {
        "content": "<p>I am trying to define the integers as a quotient group of pairs of natural numbers.  I am am trying to extend the construction as in  <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics/blob/master/src/week_7/Part_A_quotients.lean\">here.</a>.  In this construction, two pairs of natural numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>p</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><msub><mi>b</mi><mi>p</mi></msub><mo separator=\"true\">,</mo><msub><mi>b</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a_p,a_n), (b_p,b_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are equivalent if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>p</mi></msub><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><mo>=</mo><msub><mi>b</mi><mi>p</mi></msub><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_p + b_n = b_p+a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9805em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. </p>\n<p>The way to define (almost all?) most function/relations on the the quotient group is outlined in the linked file.  I am having trouble extending this approach to a function like <code>decidable_nonneg</code> because the type of the output depends on the input (a Pi term).   I have looked at certain functions like \"quot.lift_beta\" but haven't been able to get anything to work.  what follows is my minimal (non-working) example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">N2</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">N2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_def</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"bp\">↔</span> <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Z</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mysetoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">N2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r_refl</span><span class=\"o\">,</span> <span class=\"n\">r_symm</span><span class=\"o\">,</span> <span class=\"n\">r_trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_def</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">≈</span> <span class=\"n\">cd</span> <span class=\"bp\">↔</span> <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">N2.Z.mysetoid</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ab.snd</span> <span class=\"bp\">≤</span> <span class=\"n\">ab.fst</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonneg_aux_def</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">a0</span><span class=\"o\">,</span><span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">a0</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.lift</span> <span class=\"n\">nonneg_aux</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">--the rest is very simple so i skipped it</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decidable_nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nonneg_aux</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span> <span class=\"n\">p0</span> <span class=\"n\">p1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nonneg_aux_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.decidable_le</span> <span class=\"n\">p1</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">decidable_nonneg_aux_def</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">a0</span><span class=\"o\">,</span><span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat.decidable_le</span> <span class=\"n\">a1</span> <span class=\"n\">a0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">decidable_nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">--- How do proceed here?  The normal approach of using \"apply quotient.lift nonneg_aux\" doesnt work,</span>\n  <span class=\"c1\">--I think because of the \"Pi\" term.</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Z</span>\n<span class=\"kd\">end</span> <span class=\"n\">N2</span>\n</code></pre></div>\n<p>Please let me know if I am on the wrong path.  I plan on doing this same construction to generate a toy version of the rationals and then I would like to generate/define the real numbers as equivalence classes of Cauchy sequences, so getting this correct seems important even if it just an exercise.  Any ideas/help is appreciated.</p>\n<p>Thanks you.</p>",
        "id": 295321697,
        "sender_full_name": "kvanvels",
        "timestamp": 1661467282
    },
    {
        "content": "<p>For the dependent version you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.rec_on\">docs#quotient.rec_on</a>, but you can also use the more convenient <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.rec_on_subsingleton\">docs#quotient.rec_on_subsingleton</a></p>",
        "id": 295321911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661467395
    },
    {
        "content": "<p>Thank you.  I appreciate it.  I will follow up if I have more questions.</p>",
        "id": 295322462,
        "sender_full_name": "kvanvels",
        "timestamp": 1661467738
    },
    {
        "content": "<p>Thank you.  I got it to work.  I had to add a \"definitional lemma\" so I could rewrite <code>nonneg</code> in the proof.  Does \"rec\" stand for recurse, or record or something else?  I had the return type incorrect in my <code>decidable_nonneg_aux</code> definition.</p>\n<p>I was successful with the <code>quotient.rec_on</code> and got pretty far with the <code>quotient.rec_on_subsington</code> , but in the latter case, I got stuck at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n<span class=\"n\">p0</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">≤</span> <span class=\"n\">p0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Any ideas here?  I can generate <code>decidable (p1&lt;= p0)</code> from <code>nat.decidable_le p1 p0</code>.</p>\n<p>I really appreciate the help.  Thanks again.</p>",
        "id": 295327251,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661471206
    },
    {
        "content": "<p><code>rec</code> stands for \"recursor\"</p>",
        "id": 295327360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661471288
    },
    {
        "content": "<p>If you use <code>quotient.rec_on_subsington</code> the subsingleton side goal should be automatically proved by typeclass inference. How are you using it?</p>",
        "id": 295327406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661471335
    },
    {
        "content": "<p>I am just working on a file that was identical to my  minimal working example.  To be honest, I don't even know what \"typeclass inference means. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> </p>\n<p>For your convenience, here is the current state of my code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">N2</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">N2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_def</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"bp\">↔</span> <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">r_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Z</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mysetoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">N2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r_refl</span><span class=\"o\">,</span> <span class=\"n\">r_symm</span><span class=\"o\">,</span> <span class=\"n\">r_trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_def</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">≈</span> <span class=\"n\">cd</span> <span class=\"bp\">↔</span> <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">N2.Z.mysetoid</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">ab.snd</span> <span class=\"bp\">≤</span> <span class=\"n\">ab.fst</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonneg_aux_def</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">a0</span><span class=\"o\">,</span><span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a1</span> <span class=\"bp\">≤</span> <span class=\"n\">a0</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonneg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient.lift</span> <span class=\"n\">nonneg_aux</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nonneg_def</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"n\">Z.nonneg</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">↔</span> <span class=\"n\">p1</span> <span class=\"bp\">≤</span> <span class=\"n\">p0</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decidable_nonneg_aux</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">N2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"n\">ab</span><span class=\"bp\">⟧</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ab</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nonneg_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.decidable_le</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decidable_nonneg_NOT_WORKING</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">quotient.rec_on_subsingleton</span>  <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nonneg_def</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.decidable_le</span> <span class=\"n\">p1</span> <span class=\"n\">p0</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nonneg_def</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">decidable_nonneg_WORKING</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">quotient.rec_on</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">p0</span><span class=\"o\">,</span><span class=\"n\">p1</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">p2</span><span class=\"o\">,</span><span class=\"n\">p3</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">decidable_nonneg_aux</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Z</span>\n<span class=\"kd\">end</span> <span class=\"n\">N2</span>\n</code></pre></div>",
        "id": 295327768,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661471627
    },
    {
        "content": "<p>don't use <code>apply</code>, use <code>refine</code></p>",
        "id": 295327823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661471650
    },
    {
        "content": "<p><code>refine quotient.rec_on_subsingleton  a _</code></p>",
        "id": 295327829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661471665
    },
    {
        "content": "<p>I haven't used refine at all.  I will be looking into it.  I didn't  understand what it did when I read about it.  But yeah, I will be looking in to it.</p>\n<p>I got it to work using refine for the <code>rec_on_subsingleton</code> case.... but not on the \"vanilla\" <code>rec_on</code> case.</p>",
        "id": 295328146,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661471931
    },
    {
        "content": "<p>you have to put the right number of underscores at the end corresponding to the subgoals</p>",
        "id": 295328176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661471980
    },
    {
        "content": "<p><code>rec_on</code> has two subgoals, one for the function and one for the proof that the function respects the equivalence relation</p>",
        "id": 295328203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472002
    },
    {
        "content": "<p><code>refine</code> lets you give a partial proof term for the goal, where any <code>_</code> in the term turn into subgoals</p>",
        "id": 295328357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472108
    },
    {
        "content": "<p><code>apply</code> tries to automatically figure out how many trailing <code>_</code> there are but this has some side effects in this case</p>",
        "id": 295328455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472163
    },
    {
        "content": "<p>Ok, that worked. I read the pop up help and now I understand what it does.</p>",
        "id": 295328472,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472181
    },
    {
        "content": "<p>Just for my future reference, do you know how I can show <code>subsingleton (decidable (p1 &lt;= p0))</code> for two natural numbers p0 p1.  Is a <code>subsingleton</code> something like the empty-set?</p>",
        "id": 295328723,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472368
    },
    {
        "content": "<p>a subsingleton is a type with at most one element</p>",
        "id": 295328747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472395
    },
    {
        "content": "<p>Ha, ok.  A \"sub-or-equal\" singleton.</p>",
        "id": 295328795,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472443
    },
    {
        "content": "<p><code>decidable p</code> is a subsingleton because there are only two different ways to prove <code>decidable p</code> and they can never both apply simultaneously</p>",
        "id": 295328800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472453
    },
    {
        "content": "<p>it means \"subset of a singleton\"</p>",
        "id": 295328810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472467
    },
    {
        "content": "<p>If you have a goal of <code>subsingleton (decidable p)</code> for some reason, then you can prove it by <code>apply_instance</code></p>",
        "id": 295328877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472510
    },
    {
        "content": "<p>yeah, I guess I turned that in my head to \"(proper) subset of a singleton\".  :)</p>",
        "id": 295328880,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472519
    },
    {
        "content": "<p>which explicitly calls typeclass inference (normally that happens automatically but <code>apply</code> constructed the proof in a weird way and it ended up as a subgoal)</p>",
        "id": 295328903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472548
    },
    {
        "content": "<p>If you do <code>show_term { apply_instance }</code> you can see the actual theorem being applied</p>",
        "id": 295328922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472586
    },
    {
        "content": "<p>I think it would be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable.subsingleton\">docs#decidable.subsingleton</a></p>",
        "id": 295328980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472610
    },
    {
        "content": "<p>library_search worked too,  I gave up too easily.</p>",
        "id": 295329030,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472668
    },
    {
        "content": "<p>but I want to emphasize that these lemmas are explicitly not intended for directly being referenced</p>",
        "id": 295329046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472694
    },
    {
        "content": "<p>you should use <code>apply_instance</code></p>",
        "id": 295329054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472699
    },
    {
        "content": "<p>or just rejigger the proof so that the goal doesn't appear in the first place</p>",
        "id": 295329066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472718
    },
    {
        "content": "<p>Is it a rule/expectation here to use your real name?  I have never been on a message board with almost everyone using real (looking) names.</p>",
        "id": 295329117,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472742
    },
    {
        "content": "<p>It's not a requirement, but it is preferred. It helps establish this place as a professional environment</p>",
        "id": 295329158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661472809
    },
    {
        "content": "<p>Well, I will be changing my handle.  My name is Kent Van Vels. I really appreciate the help.  I have a lot to learn.  Thanks again.</p>",
        "id": 295329282,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661472905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519925\">@Kent Van Vels</span> you were looking at a course I gave in 2021. In 2022 I slightly revised my approach to quotients; you can see it here <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/tree/master/src/section06quotients\">https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/tree/master/src/section06quotients</a> .</p>\n<p>As for real names, yeah I know it's weird, but this isn't a chat room (even though it looks like a chat room), it's a serious research forum. I sometimes don't respond to people who aren't using their real names here (in contrast to my Discord, where there are a ton of people who aren't using their real names and this is fine).</p>",
        "id": 295565849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661591025
    },
    {
        "content": "<p>Thank you, I think I will be going through those notes right now.</p>",
        "id": 295613070,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661615405
    }
]