[
    {
        "content": "<p>In the following example, what's the reason for which <code>well_typed_list1</code> and <code>well_typed_list2</code> work fine, while in <code>well_typed_list3</code> Lean doesn't <code>x</code> see as a product?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.alist</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">type.arrow</span> <span class=\"c1\">--input with \\ pr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">preterm</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">suc</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">preterm</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">alist</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">type</span> <span class=\"n\">preterm</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">well_typed</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">suc</span> <span class=\"o\">:</span> <span class=\"n\">well_typed</span> <span class=\"n\">suc</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"bp\">↣</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">well_typed</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">↣</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">well_typed</span> <span class=\"n\">u</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">well_typed</span> <span class=\"o\">(</span><span class=\"n\">t.app</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">τ</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">well_typed_list1</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">ts</span> <span class=\"n\">σs</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.zip</span> <span class=\"n\">ts</span> <span class=\"n\">σs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">well_typed</span> <span class=\"n\">ctx</span> <span class=\"n\">x.fst</span> <span class=\"n\">x.snd</span><span class=\"o\">)})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">well_typed_list2</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">ts</span> <span class=\"n\">σs</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">preterm</span> <span class=\"bp\">×</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.zip</span> <span class=\"n\">ts</span> <span class=\"n\">σs</span> <span class=\"bp\">→</span> <span class=\"n\">well_typed</span> <span class=\"n\">ctx</span> <span class=\"n\">x.fst</span> <span class=\"n\">x.snd</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">well_typed_list3</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">preterm</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">ts</span> <span class=\"n\">σs</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">list.zip</span> <span class=\"n\">ts</span> <span class=\"n\">σs</span><span class=\"o\">,</span> <span class=\"n\">well_typed</span> <span class=\"n\">ctx</span> <span class=\"n\">x.fst</span> <span class=\"n\">x.snd</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field notation, type is not of the form (C ...) where C is a constant</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 233878738,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1617996867
    },
    {
        "content": "<p>In the first definition lean deduces the type of <code>x</code> before evaluating the tactic mode term. In the second definition you explicitly specify the type. In the third definition lean doesn't know the type of <code>x</code> when it needs to parse <code>x.fst</code>. It should work if you add a type annotation somewhere or use <code>prod.fst x</code>.</p>",
        "id": 233887170,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618000881
    },
    {
        "content": "<p>It makes sense. Thanks!</p>",
        "id": 233887793,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618001227
    }
]