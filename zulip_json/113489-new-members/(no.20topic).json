[
    {
        "content": "<p>This message has no topic</p>",
        "id": 123002439,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661640
    },
    {
        "content": "<p>yes, you need to reply to threads explicitly, but small questions need not have their own topic, it seems</p>",
        "id": 123002488,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661698
    },
    {
        "content": "<p>previously people were doing @person | quote \"...\" and then their reply</p>",
        "id": 123002561,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661787
    },
    {
        "content": "<p>this is definitely better for a larger chat room. which hopefully will happen since Lean is going to be super popular</p>",
        "id": 123002571,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661809
    },
    {
        "content": "<p>I mean, the Gitter one is already larger than I can care to follow</p>",
        "id": 123002590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519661843
    },
    {
        "content": "<p>are you ferinko</p>",
        "id": 123002682,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519661948
    },
    {
        "content": "<p>I was going to ask that! It will be weird referring to people by name instead of handle</p>",
        "id": 123002699,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519661991
    },
    {
        "content": "<p>Hi everyone!</p>",
        "id": 123002750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519662010
    },
    {
        "content": "<p>well, Moses isn't actually his name either, haha</p>",
        "id": 123002751,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519662010
    },
    {
        "content": "<p>well, this is just the new members room, I didn't want to pollute #general with off topic comments</p>",
        "id": 123002793,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519662094
    },
    {
        "content": "<p>It is?</p>",
        "id": 123002797,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1519662108
    },
    {
        "content": "<p>Interesting. I was apparently using the \"all messages\" tab which somehow forwarded to New Members automatically.</p>",
        "id": 123002867,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1519662218
    },
    {
        "content": "<p>Well this is very modern.</p>",
        "id": 123005614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519666644
    },
    {
        "content": "<p>I had trouble logging in with github, I had to go back a forth a while, but we got there in the end</p>",
        "id": 123005621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519666673
    },
    {
        "content": "<p>The design isn't exactly modern <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span> . But other than that, I like it.</p>",
        "id": 123005744,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519666811
    },
    {
        "content": "<p>i wonder if there's an option to customize the css styling anywhere</p>",
        "id": 123005767,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519666915
    },
    {
        "content": "<p>I also had trouble registering and signing in. Had to figure out which cookies to allow.</p>",
        "id": 123008714,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519671908
    },
    {
        "content": "<p>What does the gray text mean?</p>",
        "id": 123008724,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519671937
    },
    {
        "content": "<p>Oh, I think I see. It's a different channel?</p>",
        "id": 123008774,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519671967
    },
    {
        "content": "<p>everything on zulip is filtered by topic and stream</p>",
        "id": 123008778,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519671981
    },
    {
        "content": "<p>Yeah, it's confusing to see different streams interleaved on one page.</p>",
        "id": 123008794,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519672033
    },
    {
        "content": "<p>If you click on a topic, you'll only see the messages that belong to that topic</p>",
        "id": 123008810,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1519672078
    },
    {
        "content": "<p>probably want to deselect \"all messages\" at the top left of your screen then</p>",
        "id": 123008811,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519672080
    },
    {
        "content": "<p>zulip is what i think happened when a bulletin board and irc server had a lovechild</p>",
        "id": 123008872,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519672148
    },
    {
        "content": "<p>It's the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> view that I'm on. I don't yet know what topics I'm interested in, so I'm not sure which ones to look at.</p>",
        "id": 123008884,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519672190
    },
    {
        "content": "<p>I don't see a way to merge topics. That would probably help.</p>",
        "id": 123008946,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519672219
    },
    {
        "content": "<p>if topics share something in common they should probably be filtered at the stream level</p>",
        "id": 123008955,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519672243
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192186978,
        "sender_full_name": "Dan Abolafia",
        "timestamp": 1585505765
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192866166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585949322
    },
    {
        "content": "<p>somehow that line still worked ;).</p>",
        "id": 193673777,
        "sender_full_name": "Nam",
        "timestamp": 1586630811
    },
    {
        "content": "<p>You just changed thread. I am surprised it worked actually!</p>",
        "id": 193673785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586630835
    },
    {
        "content": "<p>darn. i apologize. this tool needs some time to get used to.</p>",
        "id": 193673791,
        "sender_full_name": "Nam",
        "timestamp": 1586630870
    },
    {
        "content": "<p>Hello,</p>\n<p>I want to proof the following case:</p>\n<div class=\"codehilite\"><pre><span></span>case mynat.succ\nt b d : mynat,\ndh : t * (d + b) = t * d + t * b\n⊢ t * (succ d + b) = t * succ d + t * b\n</pre></div>\n\n\n<p>my idea is to <code>rw dh</code> to get <code>t * succ d + t * b</code> on the left side. I think it should work because <code>succ d</code> should also be a <code>mynat</code>.</p>\n<p>However I get </p>\n<div class=\"codehilite\"><pre><span></span>tactic failed, there are unsolved goals\nstate:\ncase mynat.succ\nt b d : mynat,\ndh : t * (d + b) = t * d + t * b\n⊢ t * (succ d + b) = t * succ d + t * b\n</pre></div>\n\n\n<p>Did I missunderstood something or do I have to give an additional hint in the <code>rw</code> step?</p>",
        "id": 193674081,
        "sender_full_name": "Lukas",
        "timestamp": 1586631163
    },
    {
        "content": "<p>You definitely can't do <code>rw dh</code></p>",
        "id": 193674098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631198
    },
    {
        "content": "<p>If <code>dh : A = B</code> then <code>rw dh</code> will only work when there is something exactly equal to A in the goal</p>",
        "id": 193674115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631232
    },
    {
        "content": "<p>i.e. you really need exactly the symbols <code>t * (d + b)</code> in the goal for <code>rw dh</code> to work.</p>",
        "id": 193674163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631264
    },
    {
        "content": "<p>If <code>dh</code> said something like <code>∀ d, t * (d + b) = t * d + t * b</code> then you would be OK. But it doesn't.</p>",
        "id": 193674185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631315
    },
    {
        "content": "<p><code>dh</code> just says that something is true for that one specific d, not all d.</p>",
        "id": 193674196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/193674163\" title=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/193674163\">said</a>:</p>\n<blockquote>\n<p>i.e. you really need exactly the symbols <code>t * (d + b)</code> in the goal for <code>rw dh</code> to work.</p>\n</blockquote>\n<p>okay thanks,</p>\n<p>can I somehow substitute the <code>succ d</code> into a new variable and then it will work - or is that the wrong direction?</p>",
        "id": 193674237,
        "sender_full_name": "Lukas",
        "timestamp": 1586631363
    },
    {
        "content": "<p>If induction was that easy, then you would be able to prove pretty much any statement by induction.</p>",
        "id": 193674240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631364
    },
    {
        "content": "<p>you have <em>fixed</em> naturals <code>t</code> and <code>b</code> and <code>d</code>, and <code>dh</code> is only a statement about those fixed naturals.</p>",
        "id": 193674249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631398
    },
    {
        "content": "<p>Look, here is a proof that for every natural number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n=n^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 193674258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631419
    },
    {
        "content": "<p>Let's prove it by induction.</p>",
        "id": 193674262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631426
    },
    {
        "content": "<p>The base case is fine -- because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>=</mo><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">0=0^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 193674268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631439
    },
    {
        "content": "<p>Now for the inductive step, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> be any natural at all.</p>",
        "id": 193674274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631456
    },
    {
        "content": "<p>Let's assume <code>h : n = n^2</code> and try and deduce <code>succ n = (succ n)^2</code></p>",
        "id": 193674281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631480
    },
    {
        "content": "<p>By your way of thinking, n is an arbitrary natural number, so we can let it be <code>succ n</code> and use <code>h</code> to prove what we want to prove.</p>",
        "id": 193674323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631510
    },
    {
        "content": "<p>That can't be how induction works though, because what we're trying to prove isn't true.</p>",
        "id": 193674346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586631531
    },
    {
        "content": "<p>okay thanks for the explanation</p>",
        "id": 193674376,
        "sender_full_name": "Lukas",
        "timestamp": 1586631593
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197086127,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589154306
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 197132928,
        "sender_full_name": "Golol",
        "timestamp": 1589197446
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199711980,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1591254770
    },
    {
        "content": "<p>(tmp)</p>",
        "id": 200780817,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1592075721
    },
    {
        "content": "<p>So,  the parameter M:Type  that is mentioned in the class definition doesn't get passed automatically with the members of the class, in this case Rel and p44.     I need to mention M  in defining test.   When I've successfully defined test,  and I want to use it, I have to pass M  as the first argument,  e.g. test M.   Then it's the passed M  that will be used as the type of p44.   That explains why you have to pass M as an argument to test.   Are these statements correct?</p>",
        "id": 202383879,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593476968
    },
    {
        "content": "<p>These statements are in the wrong topic (and you could move them)</p>",
        "id": 202401726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593500845
    },
    {
        "content": "<p>Look at the type of Rel. It takes M as an input.</p>",
        "id": 202401748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593500873
    },
    {
        "content": "<p><code>#check @Rel</code></p>",
        "id": 202401805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593500897
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202890273,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1593894780
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203332560,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594248153
    },
    {
        "content": "<p>Install mathematics_in_lean, I wanted to start looking at the online book Mathematics in Lean. I installed Lean in VS code as they suggested, but when I run the commando <code>leanproject get mathematics_in_lean</code> in Git Bash, the program ask for a password this is the exact response:<br>\n<code>Please provide password for encrypted SSH private key:</code><br>\nHowever, there is no mention of a password in the text, so what is the password or where did I go wrong?</p>",
        "id": 204408495,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595242508
    },
    {
        "content": "<p>I think that this might be your SSH private key, if you set up SSH keys in github</p>",
        "id": 204408554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595242552
    },
    {
        "content": "<p>GitHub is asking you to authenticate, it looks like</p>",
        "id": 204408605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595242569
    },
    {
        "content": "<p>Ok, I will take a look at that.</p>",
        "id": 204408614,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595242581
    },
    {
        "content": "<p>Stepping back a bit -- do you have a userid at the GitHub website?</p>",
        "id": 204408620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595242591
    },
    {
        "content": "<p>Yes</p>",
        "id": 204408661,
        "sender_full_name": "Emiel Lanckriet",
        "timestamp": 1595242641
    },
    {
        "content": "<p>Ok so GitHub is perhaps saying \"instead of providing your github password, just let me know that you are you, because you set up an ssh key at some point\". I'm not an expert, this is kind of a guess.</p>",
        "id": 204408774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595242704
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209623052,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599735893
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211525744,
        "sender_full_name": "Malo Jaffré",
        "timestamp": 1601315302
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 211528004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601316397
    },
    {
        "content": "<p>If I have other questions on different kata, is it better etiquette here to start a new thread or continue this one?</p>",
        "id": 216677297,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605303796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/216677297\">said</a>:</p>\n<blockquote>\n<p>If I have other questions on different kata, is it better etiquette here to start a new thread or continue this one?</p>\n</blockquote>\n<p>You probably meant to post this on some particular other thread. But generally it's good etiquette to start a new topic for every \"different\" question. Really the point is that you want to give people the opportunity to stop paying attention to topics they don't care about, and this is easier if individual topics are small</p>",
        "id": 216679282,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304669
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 216679385,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304709
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 221320584,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609452652
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 224647909,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1612104334
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/6484#issuecomment-788189034\">https://github.com/leanprover-community/mathlib/pull/6484#issuecomment-788189034</a><br>\nbors says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Build</span> <span class=\"n\">failed</span> <span class=\"o\">(</span><span class=\"n\">retrying...</span><span class=\"o\">):</span>\n\n<span class=\"n\">Build</span> <span class=\"n\">mathlib</span>\n</code></pre></div>\n<p>But I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">github</span><span class=\"bp\">-</span><span class=\"n\">actions</span>\n<span class=\"n\">continuous</span> <span class=\"n\">integration</span> <span class=\"bp\">/</span> <span class=\"n\">Build</span> <span class=\"n\">mathlib</span> <span class=\"o\">(</span><span class=\"n\">push</span><span class=\"o\">)</span> <span class=\"n\">Successful</span> <span class=\"k\">in</span> <span class=\"mi\">118</span><span class=\"n\">m</span>\n<span class=\"n\">Details</span>\n</code></pre></div>\n<p>Does this mean that my pull request somehow conflicted with another pull request which was accepted within the time since I downloaded Mathib, in which case, I should remake the pull request? This is my best guess as of now. I am unable to see the details of the fail.<br>\nWhen I press</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">bors</span>\n<span class=\"n\">bors</span> <span class=\"bp\">—</span> <span class=\"n\">Build</span> <span class=\"n\">failed</span>\n<span class=\"n\">Details</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Permission</span> <span class=\"n\">denied</span>\n</code></pre></div>\n<p>Thus I can only guess. Hmmm. May I have permission to see the details?</p>",
        "id": 228296970,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614629130
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib/runs/2005805443\">Build mathlib</a> link has all the details that are needed.</p>\n<p>In this case, the issue was with another PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6452\">#6452</a>: <a href=\"https://github.com/leanprover-community/mathlib/pull/6452#pullrequestreview-601069376\">https://github.com/leanprover-community/mathlib/pull/6452#pullrequestreview-601069376</a></p>",
        "id": 228297206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614629225
    },
    {
        "content": "<p>I need to know how to pull any recent changes from master to my branch. Maybe I should just delete the branch and start from scratch though; 'tis a simple solution.</p>",
        "id": 228297443,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1614629308
    },
    {
        "content": "<p>For what it's worth, the bors page doesn't actually have much useful information in this case: <a href=\"/user_uploads/3121/yQcEpHoMBRR2CjMTogRTRwIc/Screen-Shot-2021-03-01-at-3.08.13-PM.png\">Screen-Shot-2021-03-01-at-3.08.13-PM.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yQcEpHoMBRR2CjMTogRTRwIc/Screen-Shot-2021-03-01-at-3.08.13-PM.png\" title=\"Screen-Shot-2021-03-01-at-3.08.13-PM.png\"><img src=\"/user_uploads/3121/yQcEpHoMBRR2CjMTogRTRwIc/Screen-Shot-2021-03-01-at-3.08.13-PM.png\"></a></div><p>(Sometimes when bors crashes the log page will have some crash log details...)</p>",
        "id": 228297513,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614629337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Gerads</span> <a href=\"#narrow/stream/113489-new-members/topic/(no.20topic)/near/228297443\">said</a>:</p>\n<blockquote>\n<p>I need to know how to pull any recent changes from master to my branch. Maybe I should just delete the branch and start from scratch though; 'tis a simple solution.</p>\n</blockquote>\n<p>I think your branch is fine, but for future reference, I think <code>git fetch origin</code> then <code>git merge origin/master</code> should work.</p>",
        "id": 228297738,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614629422
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230236685,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1615726470
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233502621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617807407
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234962057,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618637750
    },
    {
        "content": "<p>what's best way to find stuff in mathlib, so far i am using grep and file hierarchy, e.g. I am looking for definition of order or linear_order</p>",
        "id": 235599426,
        "sender_full_name": "Matúš Behun",
        "timestamp": 1619048960
    },
    {
        "content": "<p>my favourite is <code>example : &lt;stuff&gt; := by library_search</code>, although the docs with some decent keywords can be okay</p>",
        "id": 235599532,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1619049018
    },
    {
        "content": "<p>cheers, hovering with mouse over keyword helped in this case</p>",
        "id": 235600105,
        "sender_full_name": "Matúš Behun",
        "timestamp": 1619049467
    },
    {
        "content": "<p>What's difference between constant and variable declaration</p>",
        "id": 237646387,
        "sender_full_name": "Matúš Behun",
        "timestamp": 1620302634
    },
    {
        "content": "<p>Can you ask this question in a thread with a topic name? Or edit the topic name for your post?</p>",
        "id": 237646609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620302758
    },
    {
        "content": "<p>Did you read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#variables-and-sections\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#variables-and-sections</a>? That would be the first step.</p>",
        "id": 237647393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620303188
    },
    {
        "content": "<p>Zulip admins, can we turn off  \"no topic\" topics? <a href=\"https://zulip.com/help/require-topics\">https://zulip.com/help/require-topics</a></p>",
        "id": 237647591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620303302
    },
    {
        "content": "<p>We can help you install lean and mathlib if you have any difficulties. I installed to reproduce Mario result above that the zero function is the 5th program in partrec hehehe</p>",
        "id": 261295277,
        "sender_full_name": "Rudi Cilibrasi",
        "timestamp": 1636743129
    },
    {
        "content": "<p>(you can edit your message above to change the \"topic\" so that it moves to the right place)</p>",
        "id": 261302641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636746820
    }
]