[
    {
        "content": "<p>Hey, I decided on a neat exercise for myself and figured I'd make a topic for all the questions I have along the way.</p>\n<p>I defined some types:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"kn\">open</span> <span class=\"n\">fin</span>\n<span class=\"kn\">open</span> <span class=\"n\">vector</span>\n\n<span class=\"n\">def</span> <span class=\"n\">duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">j</span>\n<span class=\"n\">def</span> <span class=\"n\">has_duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">duplicate</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</pre></div>\n\n\n<p>The exercise, for now, is: I want to prove that <code>has_duplicate</code> is a decidable property of vectors.</p>\n<p>So, I started writing an instance for the <code>decidable</code> class. Here's my proof so far.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">dec_duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">has_duplicate</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- I&#39;ll perform induction on the list inside the vector.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v_val</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- Empty list case: there is no duplicate because i cannot even exist.</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">has_duplicate</span> <span class=\"bp\">⟨</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">v_property</span><span class=\"bp\">⟩</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">is_false</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">v_property</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">v_property</span> <span class=\"n\">at</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim0</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- TODO: recursive case:</span>\n  <span class=\"c1\">--   1. If head ∈ tail, there&#39;s a duplicate.</span>\n  <span class=\"c1\">--   2. Otherwise, decide if there&#39;s a duplicate in the tail.</span>\n  <span class=\"c1\">--     a. If there is, show it is also in this list.</span>\n  <span class=\"c1\">--     b. If not, show that head ∉ tail means the full list has no duplicate either.</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This brings me to my first question:</p>\n<p>For step 2, I figured I'll need to write something like <code>let foo := dec_duplicate (tail v)</code>. But I can't actually use <code>dec_duplicate</code> like that; I guess instance names can't be used like that.</p>\n<p>What should I write instead, to recurse and decide if the tail has a duplicate, and split on the <code>is_false</code> and <code>is_true</code> cases?</p>\n<p>I found examples of expressions using <code>decidable.cases_on</code> (or is it <code>rec_on</code>?) but I don't know how to make it useful for my tactic proof.</p>",
        "id": 193218502,
        "sender_full_name": "Lynn",
        "timestamp": 1586279066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247532\">Lynn</span> <a href=\"#narrow/stream/113489-new-members/topic/Lynn's.20has_duplicate.20exercise/near/193218502\" title=\"#narrow/stream/113489-new-members/topic/Lynn's.20has_duplicate.20exercise/near/193218502\">said</a>:</p>\n<blockquote>\n<p>Hey, I decided on a neat exercise for myself and figured I'd make a topic for all the questions I have along the way.</p>\n</blockquote>\n<p>That's a good idea! It seems to be one of the best ways to learn Lean.</p>",
        "id": 193220003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586279787
    },
    {
        "content": "<p>This is definitely not my area of expertise, but I think you will need to use <code>induction</code> and not <code>cases</code> on your list.</p>",
        "id": 193220011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586279792
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"c1\">-- I&#39;ll perform induction on the list inside the vector.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span> <span class=\"c1\">-- Empty list case: there is no duplicate because i cannot even exist.</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">has_duplicate</span> <span class=\"bp\">⟨</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">hL</span><span class=\"bp\">⟩</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">is_false</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hL</span> <span class=\"n\">at</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim0</span><span class=\"o\">},</span>\n\n  <span class=\"o\">{</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193220116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586279860
    },
    {
        "content": "<p>But actually I suspect that what you're trying to prove isn't true. If L is a list of length 2 then deciding whether L has duplicates is the same as deciding equality on alpha. So I think you'll need to add <code>[decidable_eq \\alpha]</code></p>",
        "id": 193220243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586279928
    },
    {
        "content": "<p>No this won't work either because your inductive hypothesis is useless the way I suggested.</p>",
        "id": 193220362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586279998
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">vector</span>\n<span class=\"kn\">open</span> <span class=\"n\">fin</span>\n<span class=\"kn\">open</span> <span class=\"n\">vector</span>\n\n<span class=\"n\">def</span> <span class=\"n\">duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">nth</span> <span class=\"n\">v</span> <span class=\"n\">j</span>\n<span class=\"n\">def</span> <span class=\"n\">has_duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">duplicate</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n<span class=\"kn\">instance</span> <span class=\"n\">dec_duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">has_duplicate</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- I&#39;ll perform induction on the list inside the vector.</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">L</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">M</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n\n  <span class=\"o\">{</span> <span class=\"c1\">-- Empty list case: there is no duplicate because i cannot even exist.</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">has_duplicate</span> <span class=\"bp\">⟨</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">hL</span><span class=\"bp\">⟩</span> <span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">is_false</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hL</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hL</span> <span class=\"n\">at</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim0</span><span class=\"o\">},</span>\n\n  <span class=\"c1\">-- TODO: recursive case:</span>\n  <span class=\"c1\">--   1. If head ∈ tail, there&#39;s a duplicate.</span>\n  <span class=\"c1\">--   2. Otherwise, decide if there&#39;s a duplicate in the tail.</span>\n  <span class=\"c1\">--     a. If there is, show it is also in this list.</span>\n  <span class=\"c1\">--     b. If not, show that head ∉ tail means the full list has no duplicate either.</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This looks more promising</p>",
        "id": 193220567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586280112
    },
    {
        "content": "<p>So now <code>h</code> is your <code>dec_duplicate (tail v)</code>.  Actually you might want to write <code>replace h := h rfl</code> to get the actual instance. <code>decidable.cases_on</code> is just <code>cases</code> again. You can do <code>cases h</code> to split into the two cases of a duplicate or not.</p>",
        "id": 193221243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586280405
    },
    {
        "content": "<p>Thank you! How would I split into cases on some other “decision”? For example for step 1 now I want to do something like <code>cases (list.mem a M),</code> but that's apparently not it.</p>",
        "id": 193229858,
        "sender_full_name": "Lynn",
        "timestamp": 1586284769
    },
    {
        "content": "<p><code>revert n,</code> is an interesting trick.</p>",
        "id": 193229985,
        "sender_full_name": "Lynn",
        "timestamp": 1586284832
    },
    {
        "content": "<p>Really n is a red herring. You can just do everything with lists rather than vectors. If you don't revert n then you end up with an induction hypothesis saying \"if the length of L is n then [blah]\" and then another hypothesis saying \"the length of L isn't n\", which is what makes the induction hypo useless. The only reason you can't get rid of n completely is that you have these <code>fin n</code> things in the defnition.</p>",
        "id": 193230230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586284977
    },
    {
        "content": "<p>Well, I'm a mathematician so I would just write <code>classical</code> and then <code>by_cases h : a \\in M</code> but then again if I'm assuming <code>classical</code> then I can just prove the entire theorem by the law of the excluded middle. You can case on an inductive type but I think that if you're being constructive then you can't case on a Prop.</p>",
        "id": 193230530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586285106
    },
    {
        "content": "<p>To be quite frank I don't even know if what you're doing is possible -- I don't ever think about this kind of question.</p>",
        "id": 193230713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586285189
    },
    {
        "content": "<p>Maybe first you should prove <code>a \\in M</code> is decidable? Then you'll be able to do cases on it.</p>",
        "id": 193230784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586285231
    },
    {
        "content": "<p><code>mem</code> has a \"decidable\" instance in <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/list/basic.lean\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/data/list/basic.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/data/list/basic.lean</a></p>",
        "id": 193230826,
        "sender_full_name": "Lynn",
        "timestamp": 1586285245
    },
    {
        "content": "<p>oh that's great, then you should definitely be able to case on it. It's just that I would always use LEM at this point because I am uncultured :-)</p>",
        "id": 193230951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586285294
    },
    {
        "content": "<p>I think I just <em>syntactically</em> don't know how to make use of that fact. <code>cases (list.mem a M)</code> gives me <code>cases tactic failed, it is not applicable to the given hypothesis</code></p>",
        "id": 193230963,
        "sender_full_name": "Lynn",
        "timestamp": 1586285301
    },
    {
        "content": "<p>I guess <code>cases</code> should be followed by the name of a hypothesis and not an expression</p>",
        "id": 193230999,
        "sender_full_name": "Lynn",
        "timestamp": 1586285320
    },
    {
        "content": "<p>and, ha, I like to be constructive when I can so I'm gonna try to stick to it here <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193231080,
        "sender_full_name": "Lynn",
        "timestamp": 1586285359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"n\">haM</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">haM</span> <span class=\"k\">with</span> <span class=\"n\">haMf</span> <span class=\"n\">haMt</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>works but there will be a more elegant way of doing it I'm sure. You need someone who actually has a clue about constructive stuff.</p>",
        "id": 193231285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586285447
    },
    {
        "content": "<p>Oh -- <code>by_cases haM : a ∈ M,</code> works fine.</p>",
        "id": 193231345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586285489
    },
    {
        "content": "<p>awesome, that tactic is exactly what I was looking for!</p>",
        "id": 193231604,
        "sender_full_name": "Lynn",
        "timestamp": 1586285624
    },
    {
        "content": "<p>maybe it'll be easier to work with something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">il</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"n\">j</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">nth_le</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"n\">il</span> <span class=\"bp\">=</span> <span class=\"n\">nth_le</span> <span class=\"n\">l</span> <span class=\"n\">j</span> <span class=\"n\">jl</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193236857,
        "sender_full_name": "Lynn",
        "timestamp": 1586288041
    },
    {
        "content": "<p>That would be my gut feeling (but my gut is not good at this stuff). Now you won't have to do the revert n dance.</p>",
        "id": 193236992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586288117
    },
    {
        "content": "<p>There is still some way to go however -- this is a neat little puzzle.</p>",
        "id": 193237106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586288167
    },
    {
        "content": "<p>I'm a little surprised lean can't make placeholders in </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">has_duplicate</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">il</span><span class=\"o\">:</span><span class=\"n\">i</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"n\">j</span><span class=\"bp\">&lt;</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"n\">duplicate</span> <span class=\"n\">l</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</pre></div>\n\n\n<p><a href=\"/user_uploads/3121/PneQ0XDHTwRT90iRDho_ggsh/image.png\" title=\"image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PneQ0XDHTwRT90iRDho_ggsh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PneQ0XDHTwRT90iRDho_ggsh/image.png\"></a></div>",
        "id": 193237115,
        "sender_full_name": "Lynn",
        "timestamp": 1586288174
    },
    {
        "content": "<p>You don't need <code>decidable_eq</code> to define this <code>Prop</code></p>",
        "id": 193237142,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288189
    },
    {
        "content": "<p>Probably you should make <code>il</code> and <code>jl</code> explicit.</p>",
        "id": 193237284,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288261
    },
    {
        "content": "<p>If you're using the old web editor, <a href=\"https://leanprover-community.github.io/lean-web-editor/\" title=\"https://leanprover-community.github.io/lean-web-editor/\">this one is better</a> (it has some bugfixes)</p>",
        "id": 193237641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586288411
    },
    {
        "content": "<p>You'll need decidable_eq to prove anything about it but you don't need it for the prop itself (my bad)</p>",
        "id": 193237694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586288445
    },
    {
        "content": "<p>As for the placeholders, it all depends on which bit of Lean is being asked to fill them.</p>",
        "id": 193237754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586288483
    },
    {
        "content": "<p>What's <code>cong : {f : t -&gt; u} -&gt; (a = b) -&gt; (f a = f b)</code>  called in Lean?</p>",
        "id": 193250902,
        "sender_full_name": "Lynn",
        "timestamp": 1586294956
    },
    {
        "content": "<p><code>congr_arg</code></p>",
        "id": 193251632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586295418
    },
    {
        "content": "<p>And <code>f</code> is an explicit argument of <code>congr_arg</code>.</p>",
        "id": 193251761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586295501
    },
    {
        "content": "<p>hooray, I did it! <a href=\"https://gist.github.com/lynn/18aafb4f04b5e9289693e8a58bec532f\" title=\"https://gist.github.com/lynn/18aafb4f04b5e9289693e8a58bec532f\">https://gist.github.com/lynn/18aafb4f04b5e9289693e8a58bec532f</a></p>",
        "id": 193251992,
        "sender_full_name": "Lynn",
        "timestamp": 1586295655
    },
    {
        "content": "<p>It's a bit of a mess. I'll think about how to clean it up and what I struggled with. If anything looks totally silly about the way I used (or didn't use) my tactics then let me know. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> </p>\n<p>One thing I wondered is: sometimes I want to treat the hole that <code>existsi</code> is going to fill as a subgoal, and apply tactics to it. I used <code>have temp : write_out_the_whole_type_here, (tactics for the goal), existsi temp</code> a few times. Is there a better way (ideally one that doesn't make me write out the type)?</p>",
        "id": 193252453,
        "sender_full_name": "Lynn",
        "timestamp": 1586295971
    },
    {
        "content": "<p>another is: is there a better way to get all the variables out of a <code>∃(i:ℕ)(il:i&lt;l.length) (j:ℕ)(jl:j&lt;l.length), …</code> hypothesis than my</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">il</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">jl</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 193252497,
        "sender_full_name": "Lynn",
        "timestamp": 1586296006
    },
    {
        "content": "<p>you might find the mathlib tactic docs interesting, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases</a></p>",
        "id": 193252858,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586296238
    },
    {
        "content": "<p>for your <code>existsi</code> question, i sometimes use <code>refine</code>, e.g. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- two goals!</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193253408,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1586296558
    },
    {
        "content": "<p>The way I would prove that this predicate is decidable is by proving it is equivalent to (the negation of)<code>list.pairwise (\\ne)</code></p>",
        "id": 193254325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586297131
    },
    {
        "content": "<p><code>rcases p with ⟨i, i1, j, j1⟩</code></p>",
        "id": 193258135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586300132
    }
]