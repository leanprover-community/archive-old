[
    {
        "content": "<p>I ready TPIL 8 once but I'm still confused about how lean wants me to structure my recursive definitions. I want to define a function that tells me whether the base 10 representation of a nat is all <code>1</code>s or not. In a normal programming language like python I'd do something like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">all_ones</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">all_ones</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>In Haskell I'd do something like this, but I know Lean only lets you pattern match on constructors. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">all_ones</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">all_ones</span> <span class=\"n\">k</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>\n\n\n<p>How do I do this? Do I need to use some more extensive base 10 machinery with the nats?</p>",
        "id": 199232850,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1590804898
    },
    {
        "content": "<p>You can use a definition roughly analogous to the first one you gave, but you have to first prove the recursion is well founded</p>",
        "id": 199234067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590806936
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">all_ones</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span>\n<span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">all_ones</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 199234156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590807055
    },
    {
        "content": "<p>but this is more appropriate for a decidable proposition or boolean function. You can easily use the same construction to produce a computable boolean function witnessing this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">all_ones</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span>\n<span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">10</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">all_ones</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>the only difference is that I used <code>bool</code> instead of <code>Prop</code>, and everything else is handled by coercion</p>",
        "id": 199234230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590807162
    },
    {
        "content": "<p>If you don't care about decidability, there is a much simpler way to express this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">all_ones</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"bp\">^</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 199234253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590807203
    },
    {
        "content": "<p>Does haskell really let you pattern match on <code>10 * k + 1</code>? If so they must have some special support for this because this is undecidable in general if you put an arbitrary function in there</p>",
        "id": 199234403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590807435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/recursive.20definitions/near/199234403\">said</a>:</p>\n<blockquote>\n<p>Does haskell really let you pattern match on <code>10 * k + 1</code>? If so they must have some special support for this because this is undecidable in general if you put an arbitrary function in there</p>\n</blockquote>\n<p>Haskell doesn't let you pattern match like this - there used to be \"n+k patterns\" which let you match on eg <code>n + 3</code> but it was removed a while back</p>",
        "id": 199235750,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590809309
    }
]