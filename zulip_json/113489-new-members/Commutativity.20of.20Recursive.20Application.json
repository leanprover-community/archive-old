[
    {
        "content": "<p>I have a function that recursively applies a commutative operation and would like to show that this recursive application is also commutative.<br>\nHere's an analogous example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">content</span> <span class=\"o\">:=</span> <span class=\"n\">b.content</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pour_list</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">hd</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">pour_list</span> <span class=\"n\">cs'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">cs'</span> <span class=\"o\">(</span><span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The target of the operation is a <code>bucket</code>. Doing a single <code>pour</code> is proven to be commutative. I would like to show that <code>pour_list</code> is also commutative.<br>\nIs there a neat way of proving this?<br>\nThanks</p>",
        "id": 223407485,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611164339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">content</span> <span class=\"o\">:=</span> <span class=\"n\">b.content</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pour_list</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">hd</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_list_comm_singleton</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">cs</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">pour_comm</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"o\">(</span><span class=\"n\">pour_list</span> <span class=\"n\">cs'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">cs'</span> <span class=\"o\">(</span><span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">cs'</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">hl</span> <span class=\"n\">generalizing</span> <span class=\"n\">cs</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">,</span> <span class=\"n\">pour_list_comm_singleton</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223409173,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611165060
    },
    {
        "content": "<p>I had to prove the simpler <code>pour_list_comm_singleton</code> first.</p>",
        "id": 223409214,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611165074
    },
    {
        "content": "<p>You might like the <code>is_commutative</code> Prop</p>",
        "id": 223409454,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611165171
    },
    {
        "content": "<p>Although that operation is limited to things that are all in the same type. I think Kevin remarked on this at some point (or for <code>is_associative</code>).</p>",
        "id": 223409746,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611165297
    },
    {
        "content": "<p>Thanks for your feedback <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>! Unfortunately I noticed that the example I gave above was actually a bit weaker than what I'm trying to prove. What I actually want to prove is that if I pass two lists to <code>pour_list</code> where one is just a  permutation of the other, the results stay the same. So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">content</span> <span class=\"o\">:=</span> <span class=\"n\">b.content</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pour_list</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">hd</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cs</span> <span class=\"bp\">~</span> <span class=\"n\">cs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">cs'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223411655,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166078
    },
    {
        "content": "<p>Do you know that your <code>pour</code> is associative too?</p>",
        "id": 223411882,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611166172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Commutativity.20of.20Recursive.20Application/near/223409746\">said</a>:</p>\n<blockquote>\n<p>Although that operation is limited to things that are all in the same type. I think Kevin remarked on this at some point (or for <code>is_associative</code>).</p>\n</blockquote>\n<p>Yeah, there's <a href=\"https://leanprover-community.github.io/mathlib_docs/init/logic.html#right_commutative\"><code>right_commutative</code></a> and <code>left_commutative</code> to work around that.</p>",
        "id": 223411894,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Commutativity.20of.20Recursive.20Application/near/223411882\">said</a>:</p>\n<blockquote>\n<p>Do you know that your <code>pour</code> is associative too?</p>\n</blockquote>\n<p>Yes it is :)</p>",
        "id": 223412038,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166244
    },
    {
        "content": "<p>Can you show that?</p>",
        "id": 223412079,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611166267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Commutativity.20of.20Recursive.20Application/near/223412079\">said</a>:</p>\n<blockquote>\n<p>Can you show that?</p>\n</blockquote>\n<p>Yeah, I think I could come up with a proof of that.</p>",
        "id": 223412161,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166306
    },
    {
        "content": "<p>Ok, I guess I got ahead of myself there. How would associativity work for a function whose output type is not the same as its input type?</p>",
        "id": 223412838,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166572
    },
    {
        "content": "<p>Right.</p>",
        "id": 223412999,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611166645
    },
    {
        "content": "<p>Here's a sort of cheating way to prove <code>pour_list_comm</code>:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">content</span> <span class=\"o\">:=</span> <span class=\"n\">b.content</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">bucket.ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span> <span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pour_list</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">hd</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_list_eq</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">cs.sum</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">cs</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">,</span> <span class=\"n\">pour</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">cs_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cs</span> <span class=\"bp\">~</span> <span class=\"n\">cs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour_list</span> <span class=\"n\">cs</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">cs'</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list_eq</span><span class=\"o\">,</span> <span class=\"n\">list.perm.sum_eq</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n</div></div>",
        "id": 223413350,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611166804
    },
    {
        "content": "<p>I've gotten to the point in the proof where the remaining goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">pour_list</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">b</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs'.erase</span> <span class=\"n\">hd</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs'</span>\n</code></pre></div>\n<p>(where <code>hd</code> is the head of <code>cs'</code>) but I don't know if I took the right path, or how to continue from here.</p>",
        "id": 223413407,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166815
    },
    {
        "content": "<p>Can you just use <code>multiset.foldr</code> directly here?</p>",
        "id": 223413485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611166857
    },
    {
        "content": "<p>If you've proven <a href=\"https://leanprover-community.github.io/mathlib_docs/find/left_commutative\">docs#left_commutative</a> then it will do the rest of the work for you</p>",
        "id": 223413541,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611166883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Commutativity.20of.20Recursive.20Application/near/223413485\">said</a>:</p>\n<blockquote>\n<p>Can you just use <code>multiset.foldr</code> directly here?</p>\n</blockquote>\n<p>You mean instead of the inductive definition over a list?</p>",
        "id": 223413559,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166889
    },
    {
        "content": "<p>Yes</p>",
        "id": 223413574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611166899
    },
    {
        "content": "<p>Yeah, I could do that. How would I get the commutativity of <code>foldr</code> then?</p>",
        "id": 223413697,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166939
    },
    {
        "content": "<p>Ah, you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.perm.foldr_eq\">docs#list.perm.foldr_eq</a></p>",
        "id": 223413730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611166955
    },
    {
        "content": "<p><code>multiset</code> not needed</p>",
        "id": 223413747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611166960
    },
    {
        "content": "<p>wow, list has fold too :D</p>",
        "id": 223413787,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611166983
    },
    {
        "content": "<p>If you insist on your inductive definition, then you could hopefully prove very easily that it's equal to a fold</p>",
        "id": 223413822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611167001
    },
    {
        "content": "<p>Nah, fold is perfect.<br>\nThanks everybody! I think I'll be able to get it from here :)</p>",
        "id": 223413873,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611167023
    },
    {
        "content": "<p>Yeah, <code>pour_list</code> is best defined as a <code>foldr</code></p>",
        "id": 223414078,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611167119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/113489-new-members/topic/Commutativity.20of.20Recursive.20Application/near/223413873\">said</a>:</p>\n<blockquote>\n<p>Nah, fold is perfect.<br>\nThanks everybody! I think I'll be able to get it from here :)</p>\n</blockquote>\n<p>Well bummer, I'm not able to get it from here ^^<br>\nThere's a constraint on the commutativity of my <code>pour</code> function, that's giving me a hard time extending the commutativity to <code>pour_list</code>.</p>\n<p>Let's say the commutativity of <code>pour</code> depends on a <code>belongs_to</code> property:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">content</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">content</span> <span class=\"o\">:=</span> <span class=\"n\">b.content</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">belongs_to</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldr</span> <span class=\"n\">pour</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cs</span> <span class=\"bp\">~</span> <span class=\"n\">cs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_b'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs'</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Can't just use `list.perm.foldr_eq` here ...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Using <code>list.perm.foldr_eq</code> or <code>list.perm.foldr_eq'</code> in the proof of the theorem doesn't work anymore, because the commutativity of <code>pour</code> doesn't hold for <em>all</em> <code>c</code>s. But assuming that all of the elements in <code>cs</code> and <code>cs'</code> <em>do</em> have that property (required by <code>h_b</code> and <code>h_b'</code>), is there a way to show that <code>pour_list</code> is the same for permutations?</p>",
        "id": 223428178,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611173375
    },
    {
        "content": "<p>Do you know <code>belongs_to c (pour c' b)</code>? Otherwise that theorem looks difficult to apply</p>",
        "id": 223433513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611175987
    },
    {
        "content": "<p>in fact I'm not even sure it's true for three elements</p>",
        "id": 223433581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611176016
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">bucket</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span>\n<span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span>\n<span class=\"bp\">|</span> <span class=\"n\">bucket.zero</span> <span class=\"o\">:=</span> <span class=\"n\">bucket.one</span>\n<span class=\"bp\">|</span> <span class=\"n\">bucket.one</span> <span class=\"o\">:=</span> <span class=\"n\">bucket.two</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">bucket.three</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">belongs_to</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">bucket.zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldr</span> <span class=\"n\">pour</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cs</span> <span class=\"bp\">~</span> <span class=\"n\">cs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_b'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x'</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">bucket.zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223435228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611176649
    },
    {
        "content": "<p>However if you assume that <code>belongs_to</code> is closed under <code>pour</code> then it is true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n<span class=\"kd\">def</span> <span class=\"n\">bucket</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">pour</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">belongs_to</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">belongs_to.pour</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c'</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pour_comm</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">c'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pour</span> <span class=\"n\">c'</span> <span class=\"o\">(</span><span class=\"n\">pour</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pour_list</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bucket</span> <span class=\"o\">:=</span> <span class=\"n\">list.foldr</span> <span class=\"n\">pour</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">belongs_to.pour_list</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">cs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">belongs_to</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">cs</span> <span class=\"n\">generalizing</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">list.forall_mem_cons.1</span> <span class=\"n\">hcs</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">belongs_to.pour</span> <span class=\"o\">(</span><span class=\"n\">cs_ih</span> <span class=\"n\">h2</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cs_ih</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pour_list_comm</span> <span class=\"o\">(</span><span class=\"n\">cs</span> <span class=\"n\">cs'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cs</span> <span class=\"bp\">~</span> <span class=\"n\">cs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bucket</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">cs</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_b'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">cs'</span><span class=\"o\">,</span> <span class=\"n\">belongs_to</span> <span class=\"n\">x'</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs</span> <span class=\"bp\">=</span> <span class=\"n\">pour_list</span> <span class=\"n\">b</span> <span class=\"n\">cs'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pour_list</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.cons</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IH</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.foldr</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">IH</span> <span class=\"o\">(</span><span class=\"n\">list.forall_mem_cons.1</span> <span class=\"n\">h_b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">list.forall_mem_cons.1</span> <span class=\"n\">h_b'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.swap</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">list.foldr</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.forall_mem_cons</span><span class=\"o\">,</span> <span class=\"n\">list.forall_mem_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h_b</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h_b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pour_comm</span> <span class=\"o\">(</span><span class=\"n\">belongs_to.pour_list</span> <span class=\"n\">h1</span> <span class=\"n\">h3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">belongs_to.pour_list</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">list.perm.trans</span> <span class=\"o\">:</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"n\">l3</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">IH1</span> <span class=\"n\">IH2</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h_b</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">p1.mem_iff.2</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">IH1</span> <span class=\"n\">h_b</span> <span class=\"n\">hc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">IH2</span> <span class=\"n\">hc</span> <span class=\"n\">h_b'</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223439194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611178579
    },
    {
        "content": "<p>Wow, thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>! The \"<code>belongs_to</code> is closed under <code>pour</code>\"-part and the special induction for <code>list.perm</code> was what I was missing.</p>",
        "id": 223548141,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1611252570
    }
]