[
    {
        "content": "<p>I'm having trouble finding a simple explanation of how to use a tfae theorem. I have a theorem that basically looks like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>(I have completed the proof.) I now need to use the fact that <code>b -&gt; c</code> in the proof of another theorem. How do I access this fact from <code>thm1</code>? </p>\n<p>I have run across some discussion of <code>tfae.out</code> but I can't immediately figure out how it works.</p>",
        "id": 206936712,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1597416539
    },
    {
        "content": "<p>I think <code>tfae.out thm1 1 2</code> should be a proof of <code>b -&gt; c</code></p>",
        "id": 206938050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597417258
    },
    {
        "content": "<p>That's what I tried first, but I get an error. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">true</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">[</span><span class=\"n\">church_rosser</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">,</span> <span class=\"n\">confluent</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">,</span> <span class=\"n\">semiconfluent</span> <span class=\"err\">?</span><span class=\"n\">m_2</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(In this case, my <code>a, b, c</code> correspond to the properties <code>church_rosser, confluent, semiconfluent</code>.)</p>",
        "id": 206938545,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1597417509
    },
    {
        "content": "<p>Actually, try this version instead:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">tfae</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tfae</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">l</span> <span class=\"n\">n₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">.</span> <span class=\"n\">control_laws_tac</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">l</span> <span class=\"n\">n₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"bp\">.</span> <span class=\"n\">control_laws_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_mem</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth_mem</span> <span class=\"n\">h₂</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">tfae</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">out&#39;</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206938807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597417636
    },
    {
        "content": "<p>that error is a bit odd. You might have to specify <code>?m_2</code> (it should probably be an explicit argument to the theorem) but it should reduce even without that</p>",
        "id": 206939023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597417727
    },
    {
        "content": "<p>Sorry. I'm still a newbie. How do I use that new version? Is that included in some library? If not, I am having trouble putting it into my file to use.</p>",
        "id": 206939657,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1597417988
    },
    {
        "content": "<p>I wrote it just now. You should just be able to put it at the top of your file</p>",
        "id": 206939772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597418047
    },
    {
        "content": "<p>make sure it's not in a namespace of yours</p>",
        "id": 206939807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597418066
    },
    {
        "content": "<p>That works! I did end up having to make the implicit variable an explicit argument to the theorem. It didn't work otherwise.  But that makes sense to me in my context. Thanks for the help!</p>",
        "id": 206940702,
        "sender_full_name": "Paul Rowe",
        "timestamp": 1597418580
    }
]