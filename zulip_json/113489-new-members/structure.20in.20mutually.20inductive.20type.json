[
    {
        "content": "<p>My basic understanding is that there are conveniences that come along with declaring a type with one constructor as a structure. Is it possible to declare one of the types in a mutually-inductive declaration to be structure too? Here's a MWE</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">sumtype</span><span class=\"o\">,</span> <span class=\"n\">A</span>\n <span class=\"k\">with</span> <span class=\"n\">sumtype</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromA</span> <span class=\"o\">:</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">sumtype</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fromInt</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">sumtype</span>\n <span class=\"k\">with</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>                 <span class=\"c1\">-- how to say this is a structure?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">sumtype</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">sumtype</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">fromA</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">fromInt</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 202765452,
        "sender_full_name": "Kris Brown",
        "timestamp": 1593746758
    },
    {
        "content": "<p>Unfortunately no, the other half of the buy-in to <code>structure</code> is that it can't be recursive.</p>",
        "id": 202767860,
        "sender_full_name": "Chris B",
        "timestamp": 1593750547
    },
    {
        "content": "<p>As a follow up, is this inductive type  recursive in some sense? I can't get a structure analogue to work.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"o\">:=</span>  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">bool</span> <span class=\"k\">else</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n   <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span>  <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Foo&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>  <span class=\"c1\">-- something like this</span>\n</code></pre></div>",
        "id": 203621321,
        "sender_full_name": "Kris Brown",
        "timestamp": 1594516222
    }
]