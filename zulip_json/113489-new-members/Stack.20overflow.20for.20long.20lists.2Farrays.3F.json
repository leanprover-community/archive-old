[
    {
        "content": "<p>Hello all; I want to create a list or array representing the integer interval <code>[0,n)</code> for large <code>n</code>.  I tried the naive way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upto</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">upto</span> <span class=\"n\">k</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but when I eval this with a large argument, I get a stack overflow and the Lean server crashes in VSCode.<br>\nFor instance, <code>#eval upto 10</code> correctly gives me the list I need, but if I <code>#eval upto 100000</code>, it crashes.  The same is true if I replace <code>List</code> with <code>Array</code> in the code above.</p>\n<p>Thanks!</p>",
        "id": 321466890,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1673779953
    },
    {
        "content": "<p>Can you try <code>#eval (upto 10).length</code> instead?</p>",
        "id": 321467933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673780535
    },
    {
        "content": "<p>It might be that it's the printing that is stack overflowing</p>",
        "id": 321467959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673780548
    },
    {
        "content": "<p>That function is not tail recursive, so this is expected behavior. (Even if it was you should watch out for printing code overflowing as Eric says.)</p>",
        "id": 321468409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673780775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Stack.20overflow.20for.20long.20lists.2Farrays.3F/near/321467933\">said</a>:</p>\n<blockquote>\n<p>Can you try <code>#eval (upto 10).length</code> instead?</p>\n</blockquote>\n<p>Yes, the overflow persists when I change 10 to 100000.  As Mario said, the function is not tail recursive as written, but I am not sure how to make it so.</p>",
        "id": 321468740,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1673780978
    },
    {
        "content": "<p>Here's a version that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.upto</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"n\">where</span>\n  <span class=\"n\">go</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">arr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">arr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Array.upto</span> <span class=\"mi\">100000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span>\n</code></pre></div>\n<p>Eric is right that this crashes if you leave off <code>.size</code></p>",
        "id": 321468768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673781000
    },
    {
        "content": "<p>you can also do it with a <code>for</code> loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.upto</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">pure</span> <span class=\"n\">arr</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">Array.upto</span> <span class=\"mi\">100000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">size</span>\n</code></pre></div>",
        "id": 321468903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673781058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> </p>\n<p>Thank you very much!  So, the function I wrote is not tail-recursive because it is mixing the <code>++</code> constructor and the recursive function call?</p>",
        "id": 321469371,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1673781353
    },
    {
        "content": "<p>the recursive function call needs to be the last thing your function does. So <code>foo (n+1) := foo (bar n)</code> is okay but <code>foo (n+1) := bar (foo n)</code> is not</p>",
        "id": 321469528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673781425
    },
    {
        "content": "<p>I see; thank you for this clarification!</p>",
        "id": 321469703,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1673781522
    },
    {
        "content": "<p>the reason is that if you call a function in tail position you can basically forget that you were in the context of a call to <code>foo</code> in the first place and just evaluate <code>foo</code> with the result of <code>bar n</code>, whereas in the <code>bar (foo n)</code> example you have to evaluate <code>foo n</code> while remembering that we are still pending a call to <code>bar</code>, and those calls to <code>bar</code> can pile up (that's what the call stack is storing)</p>",
        "id": 321469750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673781546
    },
    {
        "content": "<p>Does <code>(toString (repr (upTo 10000))).size</code> also crash? Is there some recursion that needs to be turned into tail recursion in core somewhere?</p>",
        "id": 321485189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673789040
    },
    {
        "content": "<p>last I checked it was the format instance for lists</p>",
        "id": 321485787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673789308
    },
    {
        "content": "<p>Yes, that crashes. <code>toString</code> is the one that overflows</p>",
        "id": 321486182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673789522
    },
    {
        "content": "<p>which means it's probably the formatter itself. It is probably pretty difficult to make that one tail recursive, it already has some CPS stuff going on</p>",
        "id": 321486289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673789587
    },
    {
        "content": "<p>The result of repr on a large array/list looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Std.Format.FlattenBehavior</span>\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">Repr</span> <span class=\"n\">for</span> <span class=\"n\">Std.Format</span>\n<span class=\"k\">#eval</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">Array.mkArray</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Std.Format.group</span>\n  <span class=\"o\">(</span><span class=\"n\">Std.Format.nest</span>\n    <span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n      <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n        <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"#[\"</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n          <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n            <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n              <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n                <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span>\n                  <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"2\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.line</span><span class=\"o\">)))</span>\n                  <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"2\"</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.line</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"2\"</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"n\">Std.Format.append</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Std.Format.line</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"2\"</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">Std.Format.text</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">Std.Format.FlattenBehavior.fill</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(imagine the tower of <code>append</code>s in the middle is repeated <code>n</code> times instead of just 4)</p>",
        "id": 321486797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673789865
    },
    {
        "content": "<p>It's pretty hard to process tree structures like this in tail-recursive style without an explicit stack</p>",
        "id": 321486942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673789927
    },
    {
        "content": "<p>Do you think having a <code>Format.sequence [a, b, c]</code> constructor instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Format.append#doc\">docs4#Std.Format.append</a> would help with that?</p>",
        "id": 321488295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673790627
    },
    {
        "content": "<p>Unclear. I haven't been able to pinpoint the actual culprit function - the formatter core is actually based on an explicit stack, so unless TCO is not working on it (which I think is unlikely) it is probably not responsible for the issue.</p>",
        "id": 321489335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673791077
    },
    {
        "content": "<p>debugger says the culprit is <a href=\"https://github.com/leanprover/lean4/blob/fedf235cba35ed8bf6bf571cf38e6d8536b904ac/src/Init/Data/Format/Basic.lean#L120-L136\">src4#Std.Format.spaceUpToLine</a></p>",
        "id": 321490121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673791354
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 321490406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673791491
    },
    {
        "content": "<p>One simple fix that makes the formatter work here is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">spaceUptoLine</span> <span class=\"o\">:</span> <span class=\"n\">Format</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">SpaceResult</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span>          <span class=\"n\">_</span><span class=\"o\">,</span>       <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">line</span><span class=\"o\">,</span>         <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">flatten</span> <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span> <span class=\"n\">foundLine</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">align</span> <span class=\"n\">force</span><span class=\"o\">,</span>  <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">flatten</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">force</span> <span class=\"k\">then</span> <span class=\"o\">{}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n      <span class=\"o\">{</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"o\">}</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">{</span> <span class=\"n\">foundLine</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"n\">s</span><span class=\"o\">,</span>       <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">s.posOf</span> <span class=\"sc\">'\\n'</span>\n    <span class=\"k\">let</span> <span class=\"n\">off</span> <span class=\"o\">:=</span> <span class=\"n\">s.offsetOfPos</span> <span class=\"n\">p</span>\n    <span class=\"o\">{</span> <span class=\"n\">foundLine</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">!=</span> <span class=\"n\">s.endPos</span><span class=\"o\">,</span> <span class=\"n\">foundFlattenedHardLine</span> <span class=\"o\">:=</span> <span class=\"n\">flatten</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">p</span> <span class=\"bp\">!=</span> <span class=\"n\">s.endPos</span><span class=\"o\">,</span> <span class=\"n\">space</span> <span class=\"o\">:=</span> <span class=\"n\">off</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"n\">f₃</span><span class=\"o\">,</span> <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">spaceUptoLine</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span><span class=\"o\">))</span> <span class=\"n\">flatten</span> <span class=\"n\">m</span> <span class=\"n\">w</span> <span class=\"c1\">-- NEW</span>\n  <span class=\"bp\">|</span> <span class=\"n\">append</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">merge</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">spaceUptoLine</span> <span class=\"n\">f₁</span> <span class=\"n\">flatten</span> <span class=\"n\">m</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">spaceUptoLine</span> <span class=\"n\">f₂</span> <span class=\"n\">flatten</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nest</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">,</span>     <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">spaceUptoLine</span> <span class=\"n\">f</span> <span class=\"n\">flatten</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">w</span>\n  <span class=\"bp\">|</span> <span class=\"n\">group</span> <span class=\"n\">f</span> <span class=\"n\">_</span><span class=\"o\">,</span>    <span class=\"n\">_</span><span class=\"o\">,</span>       <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">spaceUptoLine</span> <span class=\"n\">f</span> <span class=\"n\">true</span> <span class=\"n\">m</span> <span class=\"n\">w</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tag</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span>      <span class=\"n\">flatten</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">spaceUptoLine</span> <span class=\"n\">f</span> <span class=\"n\">flatten</span> <span class=\"n\">m</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 321492557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673792492
    },
    {
        "content": "<p>What's the diff there?</p>",
        "id": 321492779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673792593
    },
    {
        "content": "<p>the line marked <code>-- NEW</code></p>",
        "id": 321492794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673792601
    },
    {
        "content": "<p>Ah, that was cut off on my screen</p>",
        "id": 321492917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673792648
    },
    {
        "content": "<p>also the <code>partial</code> at the front (which could be fixed by some minor refactoring of the signature)</p>",
        "id": 321492918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673792649
    },
    {
        "content": "<p><code>upto</code> is equal to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.range#doc\">docs4#List.range</a>, right? How does this built-in function behave?</p>",
        "id": 321526993,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673813224
    },
    {
        "content": "<p>Also, do <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.iota#doc\">docs4#List.iota</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.iotaTR#doc\">docs4#List.iotaTR</a> exist?  And how do they fit here?  They produce the list in reverse order and count to 1, but they may be good replacements, right?</p>",
        "id": 321536086,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673820484
    }
]