[
    {
        "content": "<p>Hello,</p>\n<p>I know the topic is a bit vague, but I simply want to decide a proposition about a finite set. I'd like to pattern match on the set just as I'm used to pattern match on lists. I saw there is <code>finset.induction_on</code>, but I don't get it to work. Perhaps it expects a predicate and <code>decidable</code> is not a <code>prop</code> but a <code>type</code>. Anyway, here's (approximately) what I want to achieve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all_positive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                 <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>What would be the cleanest way to implement this?</p>\n<p>Thanks,<br>\nTage</p>",
        "id": 307596815,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1667415054
    },
    {
        "content": "<p>There are already instances in mathlib for that, so you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all_positive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                 <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 307597262,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415215
    },
    {
        "content": "<p>But, just to check, are you sure you're wanting <code>decidable</code> here?</p>",
        "id": 307597471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415272
    },
    {
        "content": "<p>If you want to track down how mathlib does it, if you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">all_positive</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                 <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"k\">#print</span> <span class=\"n\">all_positive</span>\n</code></pre></div>\n<p>then you can see it uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.decidable_dforall_finset\">docs#finset.decidable_dforall_finset</a></p>",
        "id": 307597860,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415404
    },
    {
        "content": "<p>Thanks, but I just gave a simplified example. It wasn't ment to be solved by \"cheating\". Here what I actually want to achieve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weightlifting_subset</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                         <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 307598035,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1667415466
    },
    {
        "content": "<p>I want to split the proof/implementation into a case where <code>p</code> is empty and one case where <code>p</code> is a set with an inserted element.</p>",
        "id": 307598311,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1667415561
    },
    {
        "content": "<p>Poking around a bit, it looks like the key is that since a <code>finset</code> is a kind of <code>multiset</code>, then you can use <code>quotient.rec_on_subsingleton</code> on that, which gives a <code>list</code> that you can compute with however you like. But you should look through how that's done.</p>",
        "id": 307598323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415567
    },
    {
        "content": "<p>To <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this a bit, where is this <code>decidable</code> being used? I'm asking because you have a <code>def</code> rather than a <code>class</code>, which makes me wonder what you're up to.</p>",
        "id": 307598499,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415612
    },
    {
        "content": "<p>Anyway, I'd still do this by \"cheating\" by using pre-existing instances wherever possible. (I switched to <code>s.sum id</code>, which is equivalent, just because I was in the middle of a random other Lean file)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weightlifting_subset</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                         <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">p.powerset</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s.1.sum</span> <span class=\"n\">id</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 307599020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415821
    },
    {
        "content": "<p>The trick is that I knew there was a decidable instance for existentials over finite types.</p>",
        "id": 307599372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667415944
    },
    {
        "content": "<p>Your solution seems to work, although I probably need some time to understand why. It feels all too magick!</p>\n<p>But anyway. The problem is that I should create an algorithm that given a set of weights <code>p</code> and a total weight <code>w</code>, checks whether there exists a subset of <code>p</code> which sum is equal to <code>w</code>. Then I wanted to prove this algorithm being correct, and I thought I could do the computation and proof together by using <code>decidable</code>. But perhaps this isn't entirely correct?</p>",
        "id": 307600677,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1667416403
    },
    {
        "content": "<p>The high-level reason this works is that there are already algorithms for this problem somewhere deep in mathlib, and we just needed to rewrite the <code>Prop</code> to help it see this. Whether that algorithm is any good is a different story! (I imagine it's one someone thought at least a little about runtime characteristics.)</p>",
        "id": 307601576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667416778
    },
    {
        "content": "<p>I suppose it makes sense to use <code>decidable</code> this way. It can be easier to define an algorithm then prove it's correct, though if you can interleave the algorithm and proof that's fine too.</p>\n<p><code>decidable</code> is generally used as a typeclass, since it's used to synthesize decision procedures for propositions automatically. That way you can use a <code>Prop</code> as if it were a <code>Bool</code> inside programs.</p>",
        "id": 307601912,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667416899
    },
    {
        "content": "<p>Is there any way to get to know the instance used by <code>decidable_of_iff</code>?</p>",
        "id": 307604218,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1667417612
    },
    {
        "content": "<p>It's not the best, but I might try doing <code>#print weightlifting_subset</code> and looking for something relevant</p>",
        "id": 307604547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667417728
    },
    {
        "content": "<p>Another way is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">weightlifting_subset</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                         <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s.sum</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">p.powerset</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s.1.sum</span> <span class=\"n\">id</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and in the output I see <code>fintype.decidable_exists_fintype ↥(p.powerset)</code>.</p>",
        "id": 307604885,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1667417858
    }
]