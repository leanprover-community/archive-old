[
    {
        "content": "<p>Hello, something came up in my project that confused me, so I thought I would post it here. The MWE is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">constants</span> <span class=\"n\">n_foo</span> <span class=\"n\">n_bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">u_foo</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n_foo</span>\n<span class=\"kd\">constant</span> <span class=\"n\">u_bar</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n_bar</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">a_foo</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n_foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_property</span> <span class=\"o\">(</span><span class=\"n\">a_bar</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n_bar</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">vector.map₂</span> <span class=\"n\">has_scalar.smul</span> <span class=\"n\">a_bar</span> <span class=\"n\">u_bar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list.sum</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">vector.map₂</span> <span class=\"n\">has_scalar.smul</span> <span class=\"n\">a_foo</span> <span class=\"n\">u_foo</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list.sum</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n<p>This code complains of \"don't know how to synthesize placeholder\" on a_foo and u_foo. It gets fixed by elaborating the type of a_foo and u_foo</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.div</span>\n\n\n\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">constants</span> <span class=\"n\">n_foo</span> <span class=\"n\">n_bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">u_foo</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n_foo</span>\n<span class=\"kd\">constant</span> <span class=\"n\">u_bar</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n_bar</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">a_foo</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n_foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_property</span> <span class=\"o\">(</span><span class=\"n\">a_bar</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n_bar</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">vector.map₂</span> <span class=\"n\">has_scalar.smul</span> <span class=\"n\">a_bar</span> <span class=\"n\">u_bar</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_list.sum</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">vector.map₂</span> <span class=\"n\">has_scalar.smul</span> <span class=\"o\">(</span><span class=\"n\">a_foo</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">F</span> <span class=\"n\">n_foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_foo</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n_foo</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_list.sum</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n<p>This latter code has no errors. But I can't figure out why it is necessary to elaborate the type when it's specified right on line 20.</p>",
        "id": 218383170,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606801778
    },
    {
        "content": "<p>The <code>constant</code>s <code>u_foo</code>, etc. depend on the <code>variable</code> <code>F</code>, which might not mean what you think.<br>\nI would recommend not using <code>constant</code> at all.</p>",
        "id": 218398921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606815795
    },
    {
        "content": "<p><code>@u_foo F _</code> would be shorter than the type annotations</p>",
        "id": 218399328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606816039
    },
    {
        "content": "<p>What's going on is slightly complicated but the basic issue is you have effectively a separate constant <code>u_foo</code> for each <code>field</code></p>",
        "id": 218399669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606816259
    }
]