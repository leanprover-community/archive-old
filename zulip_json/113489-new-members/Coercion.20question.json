[
    {
        "content": "<p>I have the following in my context:</p>\n<p><a href=\"/user_uploads/3121/I8-zRwJcXF255WYmTVJkTMbC/context.png\">context.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/I8-zRwJcXF255WYmTVJkTMbC/context.png\" title=\"context.png\"><img src=\"/user_uploads/3121/I8-zRwJcXF255WYmTVJkTMbC/context.png\"></a></div><p>with the corresponding types:</p>\n<p><a href=\"/user_uploads/3121/lbl6HRT-a854mDX8OAjKSB-o/xtxtype.png\">xtxtype.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lbl6HRT-a854mDX8OAjKSB-o/xtxtype.png\" title=\"xtxtype.png\"><img src=\"/user_uploads/3121/lbl6HRT-a854mDX8OAjKSB-o/xtxtype.png\"></a></div><p>I didn't find a way to obtain the goal, everything seems to fail (<code>norm_cast</code>, <code>fin.coe_eq_val</code>, <code>fin.coe_fin_lt.mp</code>). Does anyone see something that might work here?</p>",
        "id": 205927879,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596558013
    },
    {
        "content": "<p>does <code>exact h3</code> work?</p>",
        "id": 205927909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596558043
    },
    {
        "content": "<p>Nope</p>",
        "id": 205927921,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596558056
    },
    {
        "content": "<p>apply h3?</p>",
        "id": 205927937,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596558066
    },
    {
        "content": "<p>Funny I didn't try this last one. I'll give it a try in a sec.</p>",
        "id": 205927979,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596558098
    },
    {
        "content": "<p>No, it doesn't.</p>",
        "id": 205928075,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596558137
    },
    {
        "content": "<p>just bite the bullet and do cases on i and j</p>",
        "id": 205928089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596558147
    },
    {
        "content": "<p><code>finish</code> would probably work :)</p>",
        "id": 205928112,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596558160
    },
    {
        "content": "<p>I think <code>h3</code> might say something like <code>j % (n + 2) &lt; (i + 1) % (n + 2)</code> or something</p>",
        "id": 205928130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596558174
    },
    {
        "content": "<p>and you can prove <code>j % (n + 2) = j</code> by <code>mod_lt</code> or something</p>",
        "id": 205928195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596558211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20question/near/205928112\">said</a>:</p>\n<blockquote>\n<p><code>finish</code> would probably work :)</p>\n</blockquote>\n<p>It doesn't. I wish it did.</p>",
        "id": 205928290,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596558245
    },
    {
        "content": "<p>Oh, I see the coercion is going into fin (n+2). Missed that.</p>",
        "id": 205928308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596558258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20question/near/205928130\">said</a>:</p>\n<blockquote>\n<p>I think <code>h3</code> might say something like <code>j % (n + 2) &lt; (i + 1) % (n + 2)</code> or something</p>\n</blockquote>\n<p>Thanks, I'll have to try <code>cases</code> I guess. Maybe I get to see if there's a hidden problem somewhere in the process.</p>",
        "id": 205928535,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596558394
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205931768,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596560216
    },
    {
        "content": "<p>This looks like a situation it would be better not to get into in the first place</p>",
        "id": 205932189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596560435
    },
    {
        "content": "<p>e.g. if <code>h3</code> was stated in terms of things like <code>cast_succ</code></p>",
        "id": 205932477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596560580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20question/near/205932477\">said</a>:</p>\n<blockquote>\n<p>e.g. if <code>h3</code> was stated in terms of things like <code>cast_succ</code></p>\n</blockquote>\n<p>That <code>h3</code> comes from something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span><span class=\"bp\">|</span><span class=\"n\">h2</span><span class=\"bp\">|</span><span class=\"n\">h3</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>and is the one case that leads to <code>false</code>. I did expect to have trouble with it, the other two  worked like a charm. How could I have done a better job with <code>cast_succ</code>?</p>",
        "id": 205942090,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596565572
    },
    {
        "content": "<p>Don't write things like <code>((i+1) : fin (n+2))</code> (you implicitly used a coercion here) but instead use methods of <code>fin</code> designed for this purpose</p>",
        "id": 205943475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596566183
    },
    {
        "content": "<p>see the top of <code>data.fin</code></p>",
        "id": 205943548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596566223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20question/near/205943475\">said</a>:</p>\n<blockquote>\n<p>Don't write things like <code>((i+1) : fin (n+2))</code> (you implicitly used a coercion here) but instead use methods of <code>fin</code> designed for this purpose</p>\n</blockquote>\n<p>This is very good advice, unfortunately I just got it too late and am not sure what to do now. I have a rather dense 200-lines proof that hinges on this one <code>sorry</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>which I thought was easy when I outlined the proof, but it turns out I couldn't bring to completion (one of the ways I tried is below). Does anyone see how to finish this? I can't seem to figure out how to use an alternative at the place I need this. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fin_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_val_lt_val</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206147642,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596723809
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fin_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_val_lt_val</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206148930,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596724389
    },
    {
        "content": "<p>this is a nightmare to prove.</p>",
        "id": 206245732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596799122
    },
    {
        "content": "<p>The case i = 0 is defeq to <code>0 &lt; (0 + (0 + 1) % (n + (0 + 1) + 1)) % (n + bit0 (0 + 1)),</code></p>",
        "id": 206245776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596799187
    },
    {
        "content": "<p>Just refactor, it will be easier and will save you more pain later</p>",
        "id": 206245851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596799221
    },
    {
        "content": "<p>Fwiw I've proven this (PM with Dan). I have a better proof that doesn't use norm cast and things, but I'm on my phone rn.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fin_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">coe_coe</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_val_of_lt</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206246162,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596799476
    },
    {
        "content": "<p>nice!</p>",
        "id": 206246192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596799508
    },
    {
        "content": "<p>There's a few more <code>fin</code> lemmas that I was gonna PR today, but my internet decided to not work very well. I'll try and PR these to mathlib tomorrow (should these be PR-ed?)</p>",
        "id": 206246288,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1596799583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Coercion.20question/near/206245732\">said</a>:</p>\n<blockquote>\n<p>this is a nightmare to prove.</p>\n</blockquote>\n<p>I really think this would be useful in <code>mathlib</code>. <code>fin</code>is a great type to have for finite-length sequences, as the discussion initiated by <span class=\"user-mention\" data-user-id=\"139442\">@Patrick Thomas</span> about partitions/Riemann sums also suggests. This result is very helpful when working with <code>strict_mono</code> sequences, which will be needed in many circumstances, most probably including that case (refining partitions). Kudos <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> !</p>",
        "id": 206260400,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596809107
    }
]