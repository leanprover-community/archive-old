[
    {
        "content": "<p>If i have a goal like : <code>(∀ (n : ℕ), p1(n)) ∧ (∀ (n : ℕ), p2(n))</code>, can i have <code>∀ (n : ℕ), p1(n) ∧ p2(n)</code><br>\nOr is there a way to <code>intro n</code> in both.</p>",
        "id": 216721722,
        "sender_full_name": "Alice",
        "timestamp": 1605350742
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 216721947,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605351001
    },
    {
        "content": "<p><code>split</code> and then <code>intro</code> in both branches. You can avoid repetition using <code>split; intro</code></p>",
        "id": 216721989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605351009
    },
    {
        "content": "<p>Though Johan's approach is probably simpler; with mine you'd need to do <code>intro</code> and then <code>split</code> after</p>",
        "id": 216722035,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605351087
    },
    {
        "content": "<p>Yeah but I need the <code>intro</code> to work with hypothesis and I don't want to repeat all that work so I prefer your approach,<br>\n<code>library_search</code> give me <code>forall_and_distrib.symm</code> and it's what I want.</p>",
        "id": 216722447,
        "sender_full_name": "Alice",
        "timestamp": 1605351537
    }
]