[
    {
        "content": "<p>Heya! I'm Eric, and I'm hoping to formalise some combinatorial statements for my undergrad thesis. I've been working through all the examples from the books, and I'm confused as to why this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">self_sub_error</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">add_left_neg</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>complaining about no instance of <code>a + -a</code> but as far as I understood, <code>a - a</code> and <code>a + -a</code> are the same thing within Lean. it works just fine if I prepend it with <code>suffices h: a + -a = 0, by exact h, </code>, which makes sense, but I'm not sure why I have to do this at all.</p>",
        "id": 226674064,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1613576185
    },
    {
        "content": "<p>What constraints to you have on <code>R</code>?</p>",
        "id": 226674190,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613576238
    },
    {
        "content": "<p>They are not the same. <code>rw sub_eq_add_neg</code> should help you</p>",
        "id": 226674207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613576245
    },
    {
        "content": "<p>For example. <code>add_left_neg</code> wouldn't work unless <code>[add_group R]</code></p>",
        "id": 226674274,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613576269
    },
    {
        "content": "<p>Until two months ago they were defeq, but mathlib was refactored to solve some hairy issues.</p>",
        "id": 226674286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613576275
    },
    {
        "content": "<p>Yakov, this is just from 2.2 in Mathematics in Lean</p>",
        "id": 226674306,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1613576282
    },
    {
        "content": "<p>Ahh I see, but then why does <code>exact h</code> solve it?</p>",
        "id": 226674369,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1613576296
    },
    {
        "content": "<p>hmm, MiL is still using an old mathlib, I guess.</p>",
        "id": 226674431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613576323
    },
    {
        "content": "<p>Anyway, the reason <code>rw</code> doesn't work is because it looks at syntax, not just up to defeq</p>",
        "id": 226674484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613576347
    },
    {
        "content": "<p>makes sense, thanks!</p>",
        "id": 226674550,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1613576380
    }
]