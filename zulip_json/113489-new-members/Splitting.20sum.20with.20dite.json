[
    {
        "content": "<p>What's the lemma/definition that can break a sum into the cases that are relevant to the internal <code>ite</code> or <code>dite</code>? My current goal state is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">ix</span> <span class=\"n\">jx</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">jx</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n<span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">jx</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n<span class=\"err\">⊢</span> <span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n      <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">*</span>\n        <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n    <span class=\"n\">A</span> <span class=\"n\">ix</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 205385920,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596043009
    },
    {
        "content": "<p>The statement being proved is wrong in general (I was left-multiplying by the swap-column matrix instead of right-multiplying), but the question stands.</p>",
        "id": 205386124,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596043115
    },
    {
        "content": "<p>You can usually use <code>split_ifs</code> if you have an <code>ite</code> in the goal, but here it won't work because it's under a binder</p>",
        "id": 205387899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596043980
    },
    {
        "content": "<p>first you have to figure out what you want to do about the sum</p>",
        "id": 205387936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596043997
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_apply_dite\">docs#finset.prod_apply_dite</a></p>",
        "id": 205439251,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596081026
    }
]