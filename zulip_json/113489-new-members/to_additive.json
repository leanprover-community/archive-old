[
    {
        "content": "<p>In big_operators there is a <code>sum_smul'</code> lemma:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">sum_smul&#39;</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">n</span> <span class=\"o\">((</span><span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">prod_pow</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">sum_smul&#39;</span><span class=\"o\">]</span> <span class=\"n\">prod_pow</span>\n</code></pre></div>\n\n\n<p>Why can't I seem to use this lemma? I get <code>unknown identifier 'sum_smul''</code> even later in the big_operators file? <br>\nProbably related: Is there somewhere I can read up on <code>to_additive</code>?</p>",
        "id": 198844438,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590547172
    },
    {
        "content": "<p>did you open the right namespace?</p>",
        "id": 198844501,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590547222
    },
    {
        "content": "<p>it's probably in the <code>finset</code> namespace</p>",
        "id": 198844507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590547241
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html\">https://leanprover-community.github.io/mathlib_docs/algebra/group/to_additive.html</a></p>",
        "id": 198844646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590547430
    },
    {
        "content": "<p>Thanks and thanks! Yeah finset.sum_smul' does the trick.</p>",
        "id": 198844719,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590547470
    },
    {
        "content": "<p>Typing <code>#where</code> just after a definition will tell you the name of the namespace you're in when you made it.</p>\n<p>Unfortunately editing mathlib can cause recompilation issues.</p>\n<p>It's a shame that we can't hover over a definition and see exactly what we see when we hover over a use of that definition.</p>",
        "id": 198864877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590569259
    },
    {
        "content": "<p>Oh, this is good to know!</p>",
        "id": 198884751,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1590583358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_smul_comm</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</code></pre></div>",
        "id": 244115537,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624869189
    },
    {
        "content": "<p>If my understanding is correct,  @[to_additive] allows me to change * to +. But how can I use this feature?</p>",
        "id": 244115836,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624869406
    },
    {
        "content": "<p>There will be another lemma, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_vadd_comm\">docs#add_vadd_comm</a> that you can use instead</p>",
        "id": 244116162,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1624869641
    },
    {
        "content": "<p>Do you mean <code>@[to_additive]</code> automatically produces another lemma <code>add_vadd_comm</code>?</p>",
        "id": 244116689,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624869978
    },
    {
        "content": "<p>Yep</p>",
        "id": 244116700,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1624869992
    },
    {
        "content": "<p>How the name <code>add_vadd_comm</code> is determined?</p>",
        "id": 244116740,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624870017
    },
    {
        "content": "<p>Namely, how do I know what the lemmas that <code>@[to_additive]</code> produces are?</p>",
        "id": 244116861,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624870092
    },
    {
        "content": "<p>The easiest way is to go to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_smul_comm\">docs#mul_smul_comm</a> and scroll up - the last lemma or definition before the multiplicative version is the additive version</p>",
        "id": 244116900,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1624870140
    },
    {
        "content": "<p>I don't quite understand how <code>@[to_additive]</code> works or what it allows us to do.</p>",
        "id": 244116971,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624870197
    },
    {
        "content": "<p>By the way, what does <code>v</code> stand for in <code>vadd</code>?</p>",
        "id": 244117054,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624870238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/to_additive/near/244116971\">said</a>:</p>\n<blockquote>\n<p>I don't quite understand how <code>@[to_additive]</code> works or what it allows us to do.</p>\n</blockquote>\n<p>When you add a <code>@[to_additive]</code> annotation to a declaration (<code>def</code> or <code>theorem</code>), it calls a tactic that automatically generates a copy of that declaration. In this copy, all references to multiplicative structure (<code>mul</code>, <code>one</code>, <code>inv</code>) are replaced with additive structures (<code>add</code>, <code>zero</code>, <code>neg</code>). You can think of it as copy-pasting the declaration and find-and-replace <code>mul</code> with <code>add</code>, <code>one</code> with <code>zero</code>, <code>inv</code> with <code>neg</code>, except smarter.</p>",
        "id": 244117704,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624870690
    }
]