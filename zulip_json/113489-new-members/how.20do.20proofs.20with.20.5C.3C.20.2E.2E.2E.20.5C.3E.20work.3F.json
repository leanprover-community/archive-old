[
    {
        "content": "<p>Hi, I'm new to Lean.</p>\n<p>I saw some examples where<br>\n<code>lemma self_mem_coset (a : G) (H : subgroup G) : a ∈ a ⋆ H := ⟨1, H.one_mem, (group.mul_one a).symm⟩</code>.<br>\nI'm unsure how to read this proof.</p>\n<p>I know that <code>⟨..., ...⟩</code> represents a dependent pair (sigma type) and means that \"the type of the second element of the pair, b : β a, depends on the first element of the pair, a : α\"<br>\nfrom <a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html</a></p>\n<p>What does it translate to in tactics?</p>\n<p>Thanks :)</p>",
        "id": 223603193,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611290237
    },
    {
        "content": "<p>Can you say where you found that lemma?</p>",
        "id": 223603282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611290374
    },
    {
        "content": "<p>Even better, provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 223603335,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611290411
    },
    {
        "content": "<p>In any case, the point is that to prove that some element  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> of a group is a member of a coset associated to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>, you have to prove that there exists an element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> in the subgroup <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>=</mo><mi>a</mi><mo>⋅</mo><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">g = a \\cdot h</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span>. In the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">g = a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>, you take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, so that's the first <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> appearing there. The <code>H.one_mem</code> is the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> (which is a subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>), while <code>group.mul_one a</code> is the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>a</mi><mo>⋅</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a = a \\cdot 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, while <code>symm</code> means reverse the equality.</p>",
        "id": 223603417,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611290533
    },
    {
        "content": "<p>A mwe would be helpful, but here's a guess of a tactic proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H.one_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">group.mul_one</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223603421,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1611290547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  I found it here: <a href=\"https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/subgroup/basic.lean#L191\">https://github.com/ImperialCollegeLondon/group-theory-game/blob/master/src/subgroup/basic.lean#L191</a></p>",
        "id": 223603581,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611290778
    },
    {
        "content": "<p>but how should I interpret the <code>⟨..., ...⟩</code> more generally? Is it just used to sequence terms one after the other? since each spot in the tuple is dependent on the spot before it? (sorry, I don't know if \"spot\" is the right word to use here)</p>",
        "id": 223603644,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611290918
    },
    {
        "content": "<p>Its called an anonymous constructor, see <a href=\"https://leanprover.github.io/reference/declarations.html#structures-and-records\">https://leanprover.github.io/reference/declarations.html#structures-and-records</a></p>",
        "id": 223604054,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611291601
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> ! That's exactly the info I needed. So does this mean that it doesn't correspond to a term of a sigma type?</p>",
        "id": 223604241,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611291801
    },
    {
        "content": "<p>Right, its much more general, you can make terms of sigma types with it like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">vector.nil</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but we can also make a term of type <code>vector ℤ 1</code> with this notation, a vector is a list of a fixed length, so it has one constructor, the list and the proof that it has that length, so this is <code>⟨[1], by simp⟩ : vector ℤ 1</code>. The fun begins when we can combine these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">⟨[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩⟩</span>\n<span class=\"c1\">-- we can remove the nesting which is what makes this notation so powerful:</span>\n<span class=\"kd\">def</span> <span class=\"n\">t''</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">ℤ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 223604608,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611292278
    },
    {
        "content": "<p>Another place where they can occur is in the proof of iff statements.  In this case you would have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"bp\">→</span><span class=\"o\">,</span> <span class=\"n\">proof</span> <span class=\"n\">of</span> <span class=\"bp\">←</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 223608879,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611298335
    },
    {
        "content": "<p>Damiano, you were talking about structures recently -- you can make a term of any structure using this pointy bracket notation. The things in the bracket are the inputs for the constructor.</p>",
        "id": 223609834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611299635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Note that <code>iff</code> is just a special case of what Alex said! It's also just a structure (-;</p>",
        "id": 223610109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611299943
    },
    {
        "content": "<p>Ah, thanks for the information: I did not know that these were all special cases of the same construction!</p>",
        "id": 223610625,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611300551
    },
    {
        "content": "<p>In the example shown here <a href=\"https://leanprover.github.io/reference/declarations.html#structures-and-records\">https://leanprover.github.io/reference/declarations.html#structures-and-records</a>,<br>\nI'm still a little confused as to why <code>⟨ b₁, b₂, f₁, ..., fₙ ⟩</code> is equivalent to <code>foo.constructor b₁ b₂ f₁ f₁ ... fₙ</code>.<br>\nMy understanding is that a structure is a pi-type with type former : <code>foo : Π (a : α), Sort u</code><br>\nWouldn't a term of the type formed by the structure need to be of a pi-type?<br>\nI thought <code>⟨ ...⟩</code> meant it's a term of a sigma-type.</p>\n<p>Thanks again!<br>\n(I managed to translate a few of the proofs done with <code>⟨ ...⟩</code> into tactic proofs and am getting a better intuition toward it but I think I haven't yet wrapped my head completely around it)</p>",
        "id": 223657978,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611330213
    },
    {
        "content": "<p>The bracket notation is really for any inductive type with only one constructor, check out these examples for instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨⟩</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">bar</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨⟨⟨</span><span class=\"n\">l</span><span class=\"o\">⟩⟩⟩</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 223671655,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611336176
    },
    {
        "content": "<p>I think the confusion comes from families of types, but the notation works in the same way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨⟩</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 223674055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611337336
    },
    {
        "content": "<p>ok I'm not sure why I was assuming that <code>⟨ ...⟩</code> was only for sigma types.<br>\nI just looked at the sigma type definition (<a href=\"https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/init/core.lean#L247\">https://github.com/leanprover/lean/blob/72a965986fa5aeae54062e98efb3140b2c4e79fd/library/init/core.lean#L247</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">sigma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and it has only one constructor and if I'm not mistaken a <code>structure</code> is an <code>inductive</code>.<br>\nThis means we can use the \"anonymous constructor\" <code>⟨ ...⟩</code> to create a term of type <code>sigma</code>.</p>\n<p>So if I understood correctly, <code>⟨ ...⟩</code> is not specific to sigma types but instead is specific to inductive types.</p>",
        "id": 223676329,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611338392
    },
    {
        "content": "<p>*with one constructor</p>",
        "id": 223676997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611338667
    },
    {
        "content": "<p>You can't use it on <code>or</code>, which has two</p>",
        "id": 223677049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611338689
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>   you're explanations really helped me understand this :) and thanks everyone else as well for all your clues to help me untangle this!</p>",
        "id": 223685681,
        "sender_full_name": "François Sunatori",
        "timestamp": 1611343004
    }
]