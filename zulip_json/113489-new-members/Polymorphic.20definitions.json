[
    {
        "content": "<p>Is there any way I can have two definitions with the same name, for example, I would prefer having one definition of convergence of a sequence, convergence to 0 and to non-zero values. So here is an example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span>  <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span>  <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n<p>Its a simple example, and it probably just makes sense to have the first definition and simply use 0 as the proposed limit, however would it be possible to have lean infer the proper definition depending on the context?</p>",
        "id": 224606959,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1612043406
    },
    {
        "content": "<p>It is possible to mark variables as implicit, e.g. <code>{a: \\R}</code></p>",
        "id": 224607396,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612043910
    },
    {
        "content": "<p>Lean will try to provide a value based on the context</p>",
        "id": 224607399,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612043918
    },
    {
        "content": "<p>Though, it will not fix your problem, I'm not sure what sense it is to say <code>converges f</code> without specifying any limit, except: there is a limit l such that converges_limit f l for example.</p>",
        "id": 224607437,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612043989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span>  It doesn't make that much sense,  but it was just an example to see if it is possible.</p>",
        "id": 224607999,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1612044193
    },
    {
        "content": "<p>I'm not aware of polymorphic definitions in this sense, in Lean, and it's non-obvious to me to find the closest natural usecase for your idea <span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span></p>",
        "id": 224608094,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612044254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span>  It may not be very useful in math, however it is used in programming languages (Java etc) as an abstraction mechanism so it would have use cases in that sense.</p>",
        "id": 224608399,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1612044604
    },
    {
        "content": "<p>since lean is also a programming language.</p>",
        "id": 224608418,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1612044633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span>  In that case, you just want to generalize over the arguments types, right? In those languages, e.g. Java, Rust, etc. they use generics, generics are quite first class in Lean.</p>\n<p>Rather if your question is whether is it possible to specialize a generic function, I guess you can just pattern match your arguments and provide inductive definitions? But maybe there is a better way to do it.</p>",
        "id": 224608512,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1612044730
    },
    {
        "content": "<p>One way is to use a \"notational\" typeclass, e.g. like we do use the symbol <code>+</code> to mean addition of naturals, addition of reals etc. I'm not sure how to do this in a way to have variable number of arguments but maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_converges</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_converges</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span><span class=\"n\">has_converges</span> <span class=\"o\">((</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"o\">):=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span>  <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">⟩</span>\n<span class=\"k\">#check</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_converges</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span>  <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is close to what you want?</p>",
        "id": 224608866,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612045267
    },
    {
        "content": "<p>For your original example you can also use default arguments, but it sounds like thats not really what your question was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span>  <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 224608944,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1612045363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Yeah my original example could've used defaults, but the first piece of code you gave is what I needed, thank you!<br>\nAnd thank you <span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> .</p>",
        "id": 224608985,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1612045422
    },
    {
        "content": "<p>You can also just use two names in different namespaces.</p>",
        "id": 224609049,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612045485
    },
    {
        "content": "<p>It might help if you gave a non-artificial example of what you want to do.</p>",
        "id": 224609060,
        "sender_full_name": "Reid Barton",
        "timestamp": 1612045497
    }
]