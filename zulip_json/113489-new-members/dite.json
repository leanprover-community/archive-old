[
    {
        "content": "<p>From TPIL, I know about <code>dite</code> (dependent if-then-else).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable.rec_on</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnc</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">hnc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I don't understand what is the purpose of <code>dite</code>. Can <code>t</code> extract any information from <code>c</code> apart from that it is <code>True</code>?</p>",
        "id": 266662799,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641199617
    },
    {
        "content": "<p>The idea behind <code>dite</code> is that you can communicate the fact that what you are branching on is true/false to the branches themselves, if you take a look at the regular <code>ite</code> this is not the case there. This is useful if you for example do a case split on some property <code>h</code> and say the <code>if</code> branch has a function that requires a proof of that property <code>h</code> as a parameter.</p>",
        "id": 266663277,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641199951
    },
    {
        "content": "<p>I don't know whether I understand your reply. Can we use the same function in place of <code>t</code> and <code>e</code> then?</p>",
        "id": 266663447,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641200094
    },
    {
        "content": "<p><code>t</code> and <code>e</code> have different types so your last question doesn't seem to make sense</p>",
        "id": 266663587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641200208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/dite/near/266662799\">said</a>:</p>\n<blockquote>\n<p>Can <code>t</code> extract any information from <code>c</code> apart from that it is <code>True</code>?</p>\n</blockquote>\n<p>What else would you want it to extract?</p>",
        "id": 266663604,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641200229
    },
    {
        "content": "<p>Sorry. Then I missed the point.</p>",
        "id": 266663606,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641200230
    },
    {
        "content": "<p>Maybe a concrete example would be better here, the following is some Lean 4 code but it conceptually works the same in lean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">args</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Missing argument: mode\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">1</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Mode is: {args.head h}\"</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>If we take a look at the definition of <code>List.head</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">as</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>it requires a proof that the list we want to get the head of is not empty (which makes sense of course). And in this case we obtain this proof by doing a <code>dite</code> on the fact that <code>h : args = []</code> so by the definition of <code>dite</code> in the else case <code>h</code> is of type <code>args ≠ []</code> which is precisely what we need in order to obtain the head. And this concept of \"passing the fact that the property we are branching on is true/false to the individual branches\" is what distinguishes <code>dite</code> from <code>ite</code>.</p>",
        "id": 266664026,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641200479
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266664264,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641200652
    }
]