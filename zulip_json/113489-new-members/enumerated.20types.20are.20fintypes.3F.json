[
    {
        "content": "<p>If I define an enumerate type <code>α</code>, then there should be a way for me to quickly infer that this is a fintype?<br>\nCurrently I am writing things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">α_fin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">},</span>  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Is there an easier way to do this? Some tactic that can handle this?</p>",
        "id": 189912075,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1583513743
    },
    {
        "content": "<p>Can a derive handler do this? For enumerated types it is presumably not too hard. </p>\n<p>I realise that I currently have no idea how to see what the derive handler can do. Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n</pre></div>\n\n\n<p>But <code>@[derive fintype]</code> doesn't seem to work (and I don't know how to find out what works nowadays).</p>",
        "id": 189913782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583514804
    },
    {
        "content": "<p>That's because there is no derive handler for fintypes.</p>",
        "id": 189913883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583514855
    },
    {
        "content": "<p>Did Vaibhav just write one, in some sense, for enumerated types?</p>",
        "id": 189913949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583514911
    },
    {
        "content": "<p>If <code>A</code> is a fintype, and you write <code>def B := A</code>, then <code>@[derive fintype]</code> will use a generic instance derive handler to get a fintype instance for <code>B</code>. But that machine will not work for your inductive type.</p>",
        "id": 189913955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583514914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/enumerated.20types.20are.20fintypes.3F/near/189913949\" title=\"#narrow/stream/113489-new-members/topic/enumerated.20types.20are.20fintypes.3F/near/189913949\">said</a>:</p>\n<blockquote>\n<p>Did Vaibhav just write one, in some sense, for enumerated types?</p>\n</blockquote>\n<p>Well, you would need an automated way to determine what <code>elems</code> should be.</p>",
        "id": 189914159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583515065
    },
    {
        "content": "<p>Right but presumably one can do this in meta land?</p>",
        "id": 189915138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583515733
    },
    {
        "content": "<p>Thanks, that's good to know. So for now, I will keep on writing these explicit instances.</p>",
        "id": 189915548,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1583516042
    }
]