[
    {
        "content": "<p>Is there any particular reason why continuous maps are defined with <code>def</code> instead of being a structure such as linear maps? I am asking because when working with smooth maps I realize that if they were defined as a structure and smooth maps could be defined as a structure extending continuous maps, everything would be way more natural and smooth (no PUN intended!)</p>",
        "id": 202887133,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593889450
    },
    {
        "content": "<p>I asked a <a href=\"#narrow/stream/116395-maths/topic/Bounded.20continuous.20functions/near/197186991\">related question</a> about bounded continuous functions a couple of months ago.  To summarize <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s answers there, indeed maybe it should be a structure, but this refactor is low priority.</p>",
        "id": 202894089,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593901702
    },
    {
        "content": "<p>Ok thanks! I guess it is too late to change it?</p>",
        "id": 202894349,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593902308
    },
    {
        "content": "<p>I would also be curious to know!</p>",
        "id": 202894792,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593903271
    },
    {
        "content": "<p>I mean Sebastien plans to define smooth functions between manifolds as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">times_cont_mdiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">other_stuff</span>\n</code></pre></div>\n\n\n<p>At this point I am not really sure If I should define a diffeomorphism as a structure extending a homeomorphism which would therefore require twice a proof that the map is continuous (I mean it'd be fine but dirty) or more basically as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">diffeomorph</span> <span class=\"kn\">extends</span> <span class=\"n\">M</span> <span class=\"err\">≃</span> <span class=\"n\">M&#39;</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smooth_to_fun</span>  <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I</span> <span class=\"n\">I&#39;</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smooth_inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I&#39;</span> <span class=\"n\">I</span> <span class=\"n\">inv_fun</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and then manually define all the coercions to homeomorphisms (more clean but more work)</p>\n<p>PS.: <code>smooth</code> is an abbreviation for <code>times_cont_mdiff \\top</code></p>",
        "id": 202894862,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593903459
    },
    {
        "content": "<p>Do you mean changing <code>continuous</code> to a structure, but leaving it still a <code>Prop</code>?</p>",
        "id": 202894912,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593903533
    },
    {
        "content": "<p>Or making a structure with two fields?</p>",
        "id": 202894922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593903554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202894912\">said</a>:</p>\n<blockquote>\n<p>Do you mean changing <code>continuous</code> to a structure, but leaving it still a <code>Prop</code>?</p>\n</blockquote>\n<p>No I'd make it a structure with two fields but I understand it requires a lot of work to change the library this way</p>",
        "id": 202894931,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593903601
    },
    {
        "content": "<p>Would it be to bad to leave it as it is and define a structure</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">continuous_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">continuous</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>So that all these definitions can be given more cleanly?</p>",
        "id": 202895097,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593903867
    },
    {
        "content": "<p>I mean having both things living in mathlib?</p>",
        "id": 202895099,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593903897
    },
    {
        "content": "<p>That actually already exists though it is a <code>def</code> and in a funny place.</p>",
        "id": 202895112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593903923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202895112\">said</a>:</p>\n<blockquote>\n<p>That actually already exists though it is a <code>def</code> and in a funny place.</p>\n</blockquote>\n<p>You mean the name <code>continous_map</code> is already taken?</p>",
        "id": 202895161,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593903989
    },
    {
        "content": "<p>Or the structure exists?</p>",
        "id": 202895165,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593904004
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map\">docs#continuous_map</a></p>",
        "id": 202895166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593904013
    },
    {
        "content": "<p>Does that work for what I was saying? I mean writing the definition of smooth map as a structure extending a continuous map?</p>",
        "id": 202895223,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593904200
    },
    {
        "content": "<p>If it is just about the name I guess another name can be found for the structure</p>",
        "id": 202895274,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593904304
    },
    {
        "content": "<p>You can't literally extend it because it is a <code>def</code> but there is no reason that it could not change to a <code>structure</code>.</p>",
        "id": 202895326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593904388
    },
    {
        "content": "<p>However, it would still be unused outside of this one file (which states theorems which cannot be formulated without it).</p>",
        "id": 202895328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593904412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202895328\">said</a>:</p>\n<blockquote>\n<p>However, it would still be unused outside of this one file (which states theorems which cannot be formulated without it).</p>\n</blockquote>\n<p>What about making it a structure and moving it to topology.basic and then use it in geometry as well?</p>",
        "id": 202895376,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593904492
    },
    {
        "content": "<p>I mean I guess my question can be made more general as, why when implementing a concrete category in mathlib, sometimes morphisms are formalized as structure with a <code>to_fun</code> field and sometimes as properties with a true/false value? Is there a specific reason why a uniform choice was not taken?</p>",
        "id": 202895449,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593904657
    },
    {
        "content": "<p>Historical reasons and/or experience</p>",
        "id": 202895564,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593904838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202895376\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202895328\">said</a>:</p>\n<blockquote>\n<p>However, it would still be unused outside of this one file (which states theorems which cannot be formulated without it).</p>\n</blockquote>\n<p>What about making it a structure and moving it to topology.basic and then use it in geometry as well?</p>\n</blockquote>\n<p>Ok what do you think of this?</p>",
        "id": 202895620,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593904964
    },
    {
        "content": "<p>I mean, I'm not thinking about it very hard, but it doesn't seem worth it if the goal is to save 4 lines of copying the information that a function is continuous somewhere</p>",
        "id": 202895627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593904997
    },
    {
        "content": "<p>It sounds like you already have at least one perfectly satisfactory option</p>",
        "id": 202895631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593905025
    },
    {
        "content": "<p>Continuous functions should not be bundled because usually continuity is not the main property of a function</p>",
        "id": 202895632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593905027
    },
    {
        "content": "<p>I think it's pretty likely that <code>continuous</code> has to exist as a <code>Prop</code> (even in a clean-slate redesign) whether or not you also use a name for a bundled continuous function.</p>",
        "id": 202895685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593905118
    },
    {
        "content": "<p>By the way, we also have a second form of bundled continuous functions, in category theory</p>",
        "id": 202895687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593905130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202895632\">said</a>:</p>\n<blockquote>\n<p>Continuous functions should not be bundled because usually continuity is not the main property of a function</p>\n</blockquote>\n<p>Can you say a bit more on this? I am not sure I understand what you mean?</p>",
        "id": 202895741,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593905200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202895631\">said</a>:</p>\n<blockquote>\n<p>It sounds like you already have at least one perfectly satisfactory option</p>\n</blockquote>\n<p>Which of the above two would you suggest then?</p>",
        "id": 202895759,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593905237
    },
    {
        "content": "<p>I'm not in a position to suggest anything right now.</p>",
        "id": 202895764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593905262
    },
    {
        "content": "<p>Bundled fuctions are always more convenient if you don't know what the function is.</p>",
        "id": 202895769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593905279
    },
    {
        "content": "<p>But someone somewhere had to provide that bundled function and to do it they had to prove that some function is continuous, and it's probably too hard if they can't talk about <code>continuous f : Prop</code>.</p>",
        "id": 202895809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593905305
    },
    {
        "content": "<p>Yeah I understand this! Indeed to me now the best option would be to have both and have continous and continous_map both in topology.basic, but if you say it's not worth it I just wonder if someone with more experience can suggest me what of the above two options is better at this point to define diffeomorphism</p>",
        "id": 202895949,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593905615
    },
    {
        "content": "<p>In any case it's not just to change those 4 lines but so to have also smooth maps as a structure and define those thousands of kinds of maps in geometry as structures extending smooth maps</p>",
        "id": 202895996,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593905677
    },
    {
        "content": "<p>I mean I had this issue with 4 maps already that are smooth maps also with other properties and I never know if it's better to repeat the proof that they are continous many times or if to do everything manually</p>",
        "id": 202896076,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593905788
    },
    {
        "content": "<p>What other types are you talking about?</p>",
        "id": 202896446,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593906528
    },
    {
        "content": "<p>I mean that <code>continuous_map</code> should not be the main interface for continuous maps because this way you'll need <code>continuous_map.sin := ⟨sin, continuous_sin⟩</code> etc.</p>",
        "id": 202897717,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593909196
    },
    {
        "content": "<p>And you often create discontinuous functions from continuous functions (e.g., <code>f / g</code>).</p>",
        "id": 202897723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593909227
    },
    {
        "content": "<p>However it's OK to deal with <code>continuous_map</code> (it should be redefined as a <code>structure</code>) when you study, e.g., the space of all continuous functions.</p>",
        "id": 202897765,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593909286
    },
    {
        "content": "<p>I think that <code>diffeomorphism</code> should be a bundled structure, cf. <code>homeomorph</code>.</p>",
        "id": 202897819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593909363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202894349\">said</a>:</p>\n<blockquote>\n<p>Ok thanks! I guess it is too late to change it?</p>\n</blockquote>\n<p>The only part of <code>lean+mathlib</code> that is \"too late to change\" is the core logic foundation. I'll be glad to review a PR that will move <code>continuous_map</code> to <code>topology/basic</code> or a dedicated file <code>topology/continuous_map</code> and redefine it using <code>structure</code>.</p>",
        "id": 202899865,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593913605
    },
    {
        "content": "<p>I mean, <code>continuous_map</code> is a much more rarely used definition than <code>is_ring_hom</code> was a year ago, and we almost migrated to bundled <code>ring_hom</code>s.</p>",
        "id": 202899925,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593913747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202897819\">said</a>:</p>\n<blockquote>\n<p>I think that <code>diffeomorphism</code> should be a bundled structure, cf. <code>homeomorph</code>.</p>\n</blockquote>\n<p>Yep sure I did define it like that (you can see above my definition), but I could have also defined it as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- α and β are homeomorph, also called topological isomoph -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">diffeomorph</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">homeomorph</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smooth_to_fun</span>  <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I</span> <span class=\"n\">I&#39;</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smooth_inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I&#39;</span> <span class=\"n\">I</span> <span class=\"n\">inv_fun</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202915454,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593944781
    },
    {
        "content": "<p>And this way the proof that it is continuous has to be given twice</p>",
        "id": 202915509,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593944883
    },
    {
        "content": "<p>And it's totally fine but things can be done more cleanly if everything is also defined in terms of bundled maps</p>",
        "id": 202915570,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593944974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202896446\">said</a>:</p>\n<blockquote>\n<p>What other types are you talking about?</p>\n</blockquote>\n<p>My point is that in geometry you can add a lot of structures to a manifold and then deal with morphisms that preserve those structures. I believe that for continuous maps and smooth functions it makes sense to have things defined both in terms of properties and bundled maps for the reason you said but at some points you start dealing with morphisms such as maps preserving a connection or any kind of structure and you care less about proving that a specific map has that property and treat things more as morphism just as for algebraic structure. And I believe it'd be very clean, if it is not too much of an effort, to have versions of bundled continuous maps and smooth maps and theorems proving things about them in such a way that whenever you add the nth structure on top of your manifold with (n-1) structures you just need to extend the morphisms you had and have automatic coercions</p>",
        "id": 202915937,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593945521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span>, have you looked at the category <code>Top</code>? That uses bundled continuous maps, and indeed allows you to simply write things like <code>variables {X Y : Top} (f : X ⟶ Y)</code> and that slightly-different-from-normal arrow means that <code>f</code> is automatically a continuous map.</p>",
        "id": 202916017,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593945649
    },
    {
        "content": "<p>I actually did look into Top but would you suggest using this version of the bundled map for geometry? It seemed to me that in Mathlib the style is to formalize things without category theory at first and then add category theory when things are already established (at least for maths that, possibly, can be done without too much category theory such as differential geometry)</p>",
        "id": 202916161,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593945840
    },
    {
        "content": "<p>That is true, but it might be a historical artefact</p>",
        "id": 202916236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593945912
    },
    {
        "content": "<p>Yeah, I'm unsure. I am perfectly sympathetic to \"no unnecessary category theory!\" but the notation works out so nicely. :-)</p>",
        "id": 202916249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593945949
    },
    {
        "content": "<p>We made topological rings in about 2017 and needed a gazillion facts about them in 2018 for the perfectoid project. Concrete categories didn't appear until 2019.</p>",
        "id": 202916297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593945967
    },
    {
        "content": "<p>Until quite recently using the category theory library resulted in having to fight Lean, reminding it about universes all the time. This problem has gone away, so it's _much_ smoother to use.</p>",
        "id": 202916311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593945994
    },
    {
        "content": "<p>And as Scott said, they are exactly the way to bundle morphisms.</p>",
        "id": 202916327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946026
    },
    {
        "content": "<p>I really like to use category theory from the beginning but the problem I see with that is that differential geometry is really necessary for physics and mathematical physics and developing it with category theory in the first place might make it less friendly for people that might not be very familiar with it</p>",
        "id": 202916336,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593946061
    },
    {
        "content": "<p>They bundle objects too. But I'm not sure this is really an issue. I would recommend you try categories. Progress is made through experimentation. The sad fact is that nobody knows the right way to do manifolds in a theorem prover</p>",
        "id": 202916393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946108
    },
    {
        "content": "<p>We had unbundled group homs in 2018 and bundled them in 2019</p>",
        "id": 202916409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946151
    },
    {
        "content": "<p>This question could have been asked 30 years ago but there was nobody to ask it</p>",
        "id": 202916466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946236
    },
    {
        "content": "<p>Try categories. They're better than ever before</p>",
        "id": 202916471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946253
    },
    {
        "content": "<p>And I speak as someone who has been very frustrated by previous iterations on more than one occasion</p>",
        "id": 202916487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946276
    },
    {
        "content": "<p>Bhavik Mehta and the other Cambridge people have had a very positive experience with them in their topos project</p>",
        "id": 202916505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946314
    },
    {
        "content": "<p>It will be a great test of the concrete category API</p>",
        "id": 202916553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593946373
    },
    {
        "content": "<p>I can but the problem I have with categories now is that it seems to require way more work than just restating some theorems for continuous bundled maps and since I am doing all of this for a summer project at Cambridge to formalize some mathematical physics and we are already quite behind, I might just do things the way they were started and then come back to this after my project I guess</p>",
        "id": 202916771,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593946738
    },
    {
        "content": "<p>Also I'm from DPMMS but my colleagues are from DAMPT, so they might not enjoy too much if they need to study some category theory to work with the maths I formalize</p>",
        "id": 202916846,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593946844
    },
    {
        "content": "<p>Maybe I could define continuous bundled map in a file on my computer and prove just the things that I need so to do things cleanly on my computer closer to the style of category theory and then try later to convert it to category theory</p>",
        "id": 202917058,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593947220
    },
    {
        "content": "<p>I always used to call it DAMPT too :-)</p>",
        "id": 202917182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593947431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202917182\">said</a>:</p>\n<blockquote>\n<p>I always used to call it DAMPT too :-)</p>\n</blockquote>\n<p>Ops DAMTP haha</p>",
        "id": 202917245,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593947547
    },
    {
        "content": "<p>It's just that DAMPT is more easily pronounced haha</p>",
        "id": 202917248,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593947565
    },
    {
        "content": "<p>When you're just using category theory as a language, like you are (as a way to bundle morphisms) you won't need to learn any of the category theory language other than the way to compose morphisms. You will for example never need a functor. You will just need to learn the new way of saying \"let X be a manifold\" (which is easier than the old way, it's just <code>X: Manifold</code>) and how to move between the old way to the new way, which is easy with concrete categories. It is not a big ask for those DAMPTers.</p>",
        "id": 202917391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593947866
    },
    {
        "content": "<p>You are literally just using it as a wrapper to bundle morphisms</p>",
        "id": 202917440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593947892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202917391\">said</a>:</p>\n<blockquote>\n<p>When you're just using category theory as a language, like you are (as a way to bundle morphisms) you won't need to learn any of the category theory language other than the way to compose morphisms. You will for example never need a functor. You will just need to learn the new way of saying \"let X be a manifold\" (which is easier than the old way, it's just <code>X: Manifold</code>) and how to move between the old way to the new way, which is easy with concrete categories. It is not a big ask for those DAMPTers.</p>\n</blockquote>\n<p>Yes sure I take it that it's not a lot to learn even though the problem of taking much more time to implement it subsists. The cool thing about not doing it with category theory is that I can use topology as a model to implement many things. Say that for example I need to implement diffeomorphisms or local_diffeomorphisms. I can just copy the files homeomorphism and local_homeomorphism, read them and keep all the lemmas (especially the simp ones) that make sense for diffeomorphisms, do a couple of replace, like homeo with diffeo and continuous with smooth, and voilà in 2 hours of work I have a pretty decent implementation of diffeomorphisms I can work with</p>",
        "id": 202924054,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1593959746
    },
    {
        "content": "<p>AFAIK, one of the main reasons not to move to \"categories everywhere\" is that <code>X  ⟶ Y</code> needs <code>X</code> and <code>Y</code> to be in the same universe, and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> explains once a month that we should allow them to be in different universes because (some arguments I don't fully understand).</p>",
        "id": 202931431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593972017
    },
    {
        "content": "<p>You can use <code>ulift</code> in order to get around this, although it makes application a bit harder</p>",
        "id": 202931449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593972110
    },
    {
        "content": "<p>The question is what is harder: use <code>ulift</code> where you need different universes or repeat lemmas like <code>comp_assoc</code> for every concrete category.</p>",
        "id": 202931503,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593972184
    },
    {
        "content": "<p>As a person who doesn't need different universes most of the time, I'd prefer to use <code>⟶</code>.</p>",
        "id": 202931578,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593972324
    },
    {
        "content": "<p>umm... <code>comp_assoc</code> is an axiom of categories. Category theory isn't giong to help you prove that</p>",
        "id": 202932415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593973655
    },
    {
        "content": "<p>I'm still waiting for an example of a theorem that category theory actually helps to make shorter</p>",
        "id": 202932457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593973686
    },
    {
        "content": "<p>That said, I don't think that there is a conflict here. We can have both</p>",
        "id": 202932471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593973718
    },
    {
        "content": "<p>For me \"using the same symbol and name for composition everywhere\" is already a good reason.</p>",
        "id": 202933750,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593975686
    },
    {
        "content": "<p>What <code>category</code>/<code>concrete_category</code> gives for free: (a) <code>End</code>, <code>Aut</code>; (b) <code>category</code> from <code>coe_fn</code> + 2 or 3 <code>rfl</code>s.</p>",
        "id": 202933833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593975833
    },
    {
        "content": "<p>For me a good reason not to switch to categories is that now we have, e.g., <code>mul_equiv</code> that works for anything from <code>semigroup</code> to <code>comm_group</code>, and similarly for <code>ring_equiv</code>.</p>",
        "id": 202933945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593975995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Continuous.20maps/near/202932457\">said</a>:</p>\n<blockquote>\n<p>I'm still waiting for an example of a theorem that category theory actually helps to make shorter</p>\n</blockquote>\n<p>I'm pretty certain that if you include the \"setting up the abstract nonsense\" in your line count, this is never ever going to happen.</p>\n<p>The purposes of using the category theory library should instead be</p>\n<ol>\n<li>convenient notation when working with bundled objects/morphisms</li>\n<li>stating universal properties and constructions clearly, and with a uniform API.</li>\n<li>doing all of the modern mathematics outside of \"category theory\" which is all written in the languages of abelian categories, semisimple categories, triangulated categories, etc.</li>\n<li>doing abstract category theory for its own sake, for those who like that kind of thing. :-)</li>\n</ol>",
        "id": 202943187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593992412
    },
    {
        "content": "<p>For 2., what I have in mind is, e.g., there are many interesting adjunctions in mathematics worth having in mathlib. It's important that they all get stated as an <code>adjunction</code>, rather than using a different formulation of what it means to be an adjunction each time (which is prone to leaving bits out). We already have quite a few \"universal properties\" stated in mathlib which ideally we would clean up and state \"properly\" as an initialness condition, or an adjunction, etc. Similarly we have a bunch of \"informal\" functoriality statements.</p>",
        "id": 202943201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593992516
    },
    {
        "content": "<p>If you don't need to count the \"setting up the abstract nonsense\", a small but nice PR from Markus <a href=\"https://github.com/leanprover-community/mathlib/issues/3280\">#3280</a> significantly shortened the construction of direct sums in <code>Ab</code>, by saying \"well, it's a preadditive category, and has products, so those products are automatically biproducts\".</p>",
        "id": 202943254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593992642
    },
    {
        "content": "<p>I have to say that this is a disappointing answer, although it is more or less what I expected</p>",
        "id": 202943291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593992687
    },
    {
        "content": "<p>In theory, as long as you have enough example categories you might be able to beat the \"abstract nonsense overhead\" by sheer number of uses</p>",
        "id": 202943312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593992739
    },
    {
        "content": "<p>I think 3. is the real motivation.</p>",
        "id": 202943313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593992747
    },
    {
        "content": "<p>There is an awful lot of modern mathematics (particularly in rep theory, alg goem, quantum alg, low dim. topology) which simply can't be spoken about without a lot of category theory set up.</p>",
        "id": 202943357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593992782
    },
    {
        "content": "<p>We're gradually getting to the point we're ready for these things. :-)</p>",
        "id": 202943377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593992831
    },
    {
        "content": "<p>I think proving the snake lemma (and all other lemmas in homological algebra) via category theory might help. Otherwise we would have to prove them for add_comm_groups, for module, and later for abelian sheaves. And these proofs aren't exactly 1-liners.<br>\nMaybe (maybe) we still want to restate the snake lemma for (say) modules, without using the categorical language, because that way it might integrate better with other parts of the library. But I'm convinced that Markus's diagram chasing library will be a gateway drug to proving these kinds of lemmas using the category theory library.</p>",
        "id": 202953404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594011056
    },
    {
        "content": "<p>It's probably not a coincidence that abstract category theory didn't appear until the 50s or whatever. You can get a long way without it. But after a while it becomes essential. The moment we start doing cohomology we're either going to be repeating work or using categories</p>",
        "id": 202959553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594020141
    }
]