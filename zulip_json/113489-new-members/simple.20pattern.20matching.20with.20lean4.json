[
    {
        "content": "<p>Hey guys (<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>?),</p>\n<p>I am trying to get the following code to compile in lean4:</p>\n<div class=\"codehilite\"><pre><span></span>cat test.lean\nimport init.data.int.basic\nimport init.data.string.basic\n\ndef foo (ctx : String) : Int → Int\n| x =&gt; if ctx == &quot;a&quot; then x else (foo &quot;a&quot; x)\n$lean test.lean\n/home/grosser/Projects/lean4/test.lean:4:4: error: type mismatch at application\n  foo &quot;a&quot;\nterm\n  &quot;a&quot;\nhas type\n  String\nbut is expected to have type\n  Int\n$cat test2.lean\nimport init.data.int.basic\nimport init.data.string.basic\n\ndef foo : String → Int → Int\n| &quot;a&quot; x =&gt; x\n| _ x =&gt; foo &quot;a&quot; x\n$lean test2.lean\n/home/grosser/Projects/lean4/test2.lean:4:4: error: invalid application, function expected\n</pre></div>\n\n\n<p>The example is obviously artificial and reduced from an example that is a lot larger. What I want to do is -- in certain cases -- change the first argument and then recurse into the very same function with the updated first argument. Unfortunately, this does not seem to work. In the first test.lean file it seems ctx is already implicitly passed as the first argument to foo such that only the second argument can be passed to foo. In the second test case I get an error message which I do not fully understand. Any ideas?</p>",
        "id": 176827964,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1569680420
    },
    {
        "content": "<p>The first one is wrong in Lean 3 for the reason you say, I assume it is the same in Lean 4.<br>\nIt looks like the second one needs commas in Lean 4, judging from (for example) <a href=\"https://github.com/leanprover/lean4/blob/master/library/init/data/list/basic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/blob/master/library/init/data/list/basic.lean\">https://github.com/leanprover/lean4/blob/master/library/init/data/list/basic.lean</a></p>",
        "id": 176830702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569685417
    },
    {
        "content": "<p>This seems to work. Thanks a lot. I should have looked myself a little deeper. I had the feeling I may have misunderstood sth basic, but it seems some syntax changed and the error message is not super descriptive. Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for providing details here.</p>",
        "id": 176835232,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1569693779
    },
    {
        "content": "<p>Wow, I hadn't really appreciated the following: that Lean 4 file (with all the CamelCase changes etc) still says copyright 2016 on it. Is that how it works? When mathlib gets ported we leave all the copyrights as they were -- they're not \"new files\"?</p>",
        "id": 176835812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569694674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> will we keep that ASCII art <code>=&gt;</code>? Or is it only used in core before the parser is able to handle a proper unicode arrow?</p>",
        "id": 176839931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569701780
    },
    {
        "content": "<p>To all people who post Lean 4 code, do you understand correctly that there is still no VScode extension and you use Lean 4 non-interactively (or using emacs)?</p>",
        "id": 176839951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569701843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <code>⇒</code> does already work. Leo seems to prefer the ASCII arrow, but we haven't really discussed coding styles so far (which of course we should do exactly once when implementing a standard code formatter for Lean 4 and then never talk about this topic again).</p>",
        "id": 176843580,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1569708105
    },
    {
        "content": "<p>wait, so the preference is unicode lambda + ascii arrow?</p>",
        "id": 176843644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569708185
    },
    {
        "content": "<p>No, Leo's current preference is <code>fun</code> + <code>=&gt;</code>. My preference may be <code>fun</code> + <code>⇒</code> but I haven't really decided yet.</p>",
        "id": 176864639,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1569750438
    },
    {
        "content": "<p>Returning to ASCII would be <em>really</em> sad. Readable unicode is the first thing that attracts mathematicians to Lean after seeing Coq.</p>",
        "id": 176865055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569751076
    },
    {
        "content": "<p>have you ever read agda code?</p>",
        "id": 176866091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569752857
    },
    {
        "content": "<p>unicode can be overused</p>",
        "id": 176866092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569752868
    },
    {
        "content": "<p>is exchanging unicode for ascii the motivation for using fun instead of \\lam as well?</p>",
        "id": 176866375,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569753260
    },
    {
        "content": "<p>i suppose λ foo =&gt; bar would look a bit strange</p>",
        "id": 176866454,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1569753389
    },
    {
        "content": "<p>This is no need to overuse unicode. We can keep words, but avoid ascii art.</p>",
        "id": 176866467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569753433
    },
    {
        "content": "<p>I like using ascii art for programmy stuff and unicode for math stuff</p>",
        "id": 176866479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569753474
    },
    {
        "content": "<p>You can define functions in math</p>",
        "id": 176866523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569753505
    },
    {
        "content": "<p>I'm sure Scott and co will reserve all the arrows</p>",
        "id": 176866524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569753508
    },
    {
        "content": "<p>by programmy stuff I mean lean core</p>",
        "id": 176866537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569753547
    },
    {
        "content": "<p>Sometimes wish that the ascii -&gt; unicode happened not in the editors input mechanism, but by running a pass over ASCII sources.  So it would be represented as \\lam foo, bar then converted to λ foo, bar for display... Not sure it'd be at all readable, but perhaps helpful if you weren't familiar with a symbol, but there are also tons of search boxes which are terrible at unicode... <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 176900582,
        "sender_full_name": "matt rice",
        "timestamp": 1569814607
    }
]