[
    {
        "content": "<p>Hi, everyone! I'm trying to write some lean stuff, but I'm getting a weird error.</p>\n<p>import tactic<br>\nimport geom_sum</p>\n<p>example (a m n : ℕ) : (nat.gcd (a^m - 1) (a^n - 1)) = a^(nat.gcd m n) - 1 :=<br>\nbegin<br>\n  rw mul_geom_sum a m,<br>\nend</p>\n<p>and the error is<br>\nfailed to synthesize type class instance for<br>\na m n : ℕ<br>\n⊢ ring ℕ<br>\nstate:<br>\na m n : ℕ<br>\n⊢ (a ^ m - 1).gcd (a ^ n - 1) = a ^ m.gcd n - 1</p>\n<p>how do I resolve this? I'm assuming i need to turn my a into an integer, but i'm not sure how to do it.</p>",
        "id": 310486040,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668627672
    },
    {
        "content": "<p>If you change the <code>ℕ</code> into <code>ℤ</code> and the <code>nat.gcd</code> into <code>int.gcd</code>, would that help?</p>",
        "id": 310486459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668627823
    },
    {
        "content": "<p>let me try!</p>",
        "id": 310486495,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668627835
    },
    {
        "content": "<p><code>-</code> on natural numbers means truncated subtraction. So it probably is not exactly what you want.</p>",
        "id": 310486580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668627851
    },
    {
        "content": "<p>truncated subtraction?</p>",
        "id": 310486616,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668627864
    },
    {
        "content": "<p>import tactic<br>\nimport geom_sum</p>\n<p>example (a m n : ℤ) : (int.gcd (a^m - 1) (a^n - 1)) = a^(int.gcd m n) - 1 :=<br>\nbegin<br>\n  rw mul_geom_sum a m,<br>\nend</p>\n<p>gives me failed to synthesize type class instance for<br>\na m n : ℤ<br>\n⊢ has_pow ℤ ℤ</p>",
        "id": 310486691,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668627899
    },
    {
        "content": "<p>(an error)</p>",
        "id": 310486718,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668627908
    },
    {
        "content": "<p>looked up truncated subtraction. i think ik what it means now, like m - n for m &lt; n would give 0</p>",
        "id": 310487015,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628022
    },
    {
        "content": "<p>Btw, with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> you can typeset codeblocks on Zulip to get syntax highlighting and such.</p>",
        "id": 310487269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628108
    },
    {
        "content": "<p>oooh sure let me try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">pow</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℤ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 310487304,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628121
    },
    {
        "content": "<p>yep! <br>\nthanks</p>",
        "id": 310487318,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628125
    },
    {
        "content": "<p>Ooh, I guess only <code>a</code> should have become a <code>ℤ</code>. But <code>m</code> and <code>n</code> should still be <code>ℕ</code>.</p>",
        "id": 310487512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628193
    },
    {
        "content": "<p>yea, i tried that too</p>",
        "id": 310487626,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">geom_sum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">int.gcd</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> rw mul_geom_sum a m, -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the left hand side of my statement is okay! but... the right hand side isn't.<br>\nit spits out this error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">pow</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℤ</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℕ</span>\n</code></pre></div>",
        "id": 310487739,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628268
    },
    {
        "content": "<p>doesn't matter if i do try int.gcd or nat.gcd for it :')</p>",
        "id": 310487812,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628290
    },
    {
        "content": "<p>Huh, does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.gcd\">docs#int.gcd</a> spit out a natural number?</p>",
        "id": 310487853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628300
    },
    {
        "content": "<p>Apparently it does!</p>",
        "id": 310487918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628317
    },
    {
        "content": "<p>both int and nat do!</p>",
        "id": 310487933,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628320
    },
    {
        "content": "<p>which does make sense, after all... hmm...</p>",
        "id": 310488004,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628327
    },
    {
        "content": "<p>Ok, write <code>\\u</code> in front of the left-hand-side</p>",
        "id": 310488064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628342
    },
    {
        "content": "<p>It will typeset as <code>↑</code>.</p>",
        "id": 310488107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628349
    },
    {
        "content": "<p>mhm i see<br>\nwhat does that do?</p>",
        "id": 310488159,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628361
    },
    {
        "content": "<p>Alternatively, you can write <code>(int.gcd (a^m - 1) (a^n - 1) : ℤ)</code></p>",
        "id": 310488222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628377
    },
    {
        "content": "<p>the statement magically works now o.o</p>",
        "id": 310488227,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628378
    },
    {
        "content": "<p><code>↑</code> is a \"coercion\". It turns something of type <code>X</code> into something of type <code>Y</code> whenever that makes sense.</p>",
        "id": 310488358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628405
    },
    {
        "content": "<p>For a suitable value of \"whenever that makes sense\".</p>",
        "id": 310488419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628421
    },
    {
        "content": "<p>i see!<br>\nwould it be better style to use \\u or (left hand side : Z)</p>",
        "id": 310488446,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628425
    },
    {
        "content": "<p>since i suspect \\u might break sometimes... and you can't tell exactly what it wants to become!</p>",
        "id": 310488504,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628440
    },
    {
        "content": "<p>The 2nd is a bit more readable and predictable.</p>",
        "id": 310488534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1668628442
    },
    {
        "content": "<p>alright! i'll be using that then. thanks for your help!</p>",
        "id": 310488592,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628451
    },
    {
        "content": "<p>i'm going to go try and prove this c:</p>",
        "id": 310488636,
        "sender_full_name": "Lawrence Lin",
        "timestamp": 1668628462
    },
    {
        "content": "<blockquote>\n<p>The 2nd is a bit more readable and predictable.</p>\n</blockquote>\n<p>I don't agree with it being more predictable; certainly not to newcomers. Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which actually means</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : ℕ → ℕ → ℚ := λ (m n : ℕ), ↑(↑m + ↑n)</span>\n</code></pre></div>\n<p>In general the two syntaxes are not directly interchangeable</p>",
        "id": 310493603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668629816
    },
    {
        "content": "<p>The most predictable spelling would probably be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>↑</code> means \"do a coercion\", and <code>: ℤ</code> means \"here's a hint about what you're supposed to coerce to\".</p>",
        "id": 310494027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668629967
    }
]