[
    {
        "content": "<p>I am struggling with some termination proofs in some of my definitions, so I decided to work on some later stuff (which depends on those definitions) until I figure them out. So I declared them as <code>meta</code>, and now of course I have to propagate the <code>meta</code>. <br>\nNow, I want to write these meta definitions in robust way, such that they will be sound once I finally prove my initial definition is terminating (hopefully, if what I wrote is indeed correct) and I will remove the <code>meta</code>s. An immediate problem is that the term being defined is accessible in the context of the definition, as below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">x : ℕ</span>\n<span class=\"cm\">⊢ ℕ</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can remove it by starting with <code>clear x</code>. Is this solution reasonable? I didn't find a way to write something nonterminating or to prove <code>false</code> after starting with this. Are there other tricks to minimize your chance of accidentally writing unsound <code>meta</code> functions?</p>",
        "id": 236564852,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619638269
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">a: false</span>\n<span class=\"cm\">⊢ false</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236578892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619643919
    },
    {
        "content": "<p>Sure, but if you first do <code>clear</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">clear</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ false</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then are you safe?</p>",
        "id": 236581070,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619644469
    },
    {
        "content": "<p>I have never written a line of meta code in my life; I'm not the person to ask, sorry :-). All I know is that meta code isn't allowed in the proofs I'm interested in.</p>",
        "id": 236581382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619644545
    },
    {
        "content": "<p>Why don't you just use <code>sorry</code> instead of <code>meta</code>? This is what we do in the lean liquid project. If we haven't got the technology to prove a theorem but we know it's true because we're mathematicians, we sorry the proof, and then we can use it in other theorems and come back to it later.</p>",
        "id": 236581740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619644646
    },
    {
        "content": "<p>Note that you can avoid having to propagate the meta if you pass the meta functions as arguments into the non-meta ones</p>",
        "id": 236582226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619644797
    },
    {
        "content": "<p>eg, instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- impossible to nonterminate here</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar_safe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo_ref</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">foo_ref</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">bar_safe</span> <span class=\"n\">foo</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 236582902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619644964
    },
    {
        "content": "<p>I'm not even really sure where to put the <code>sorry</code>s :) It's about a recursion which lean doesn't believe to be terminating, so I have to use well founded recursion which I am only now beginning to learn, that's why <code>meta</code> seemed like the easiest solution.</p>",
        "id": 236583676,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619645197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/avoid.20nonterminating.20meta.20defs/near/236582226\">said</a>:</p>\n<blockquote>\n<p>Note that you can avoid having to propagate the meta if you pass the meta functions as arguments into the non-meta ones</p>\n</blockquote>\n<p>Thanks, that's an interesting solution, I'll try that</p>",
        "id": 236584419,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619645513
    },
    {
        "content": "<p>I think rather than using <code>meta</code> for this, you should use a non-meta definition with <code>using_well_founded {dec_tac := \\lam _, `[sorry]}</code></p>",
        "id": 236611289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619664695
    },
    {
        "content": "<p>because if I understand correctly this is supposed to be a pure definition and it is simply difficult (but not false) to prove termination</p>",
        "id": 236611365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619664758
    },
    {
        "content": "<p>That's right, thank you, I managed to sorry it with <code>{dec_tac := `[sorry]}</code></p>",
        "id": 236625868,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1619678124
    }
]