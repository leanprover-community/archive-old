[
    {
        "content": "<p>What could be a short proof for this (and similar statements)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">dif_symm</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 211863339,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601519796
    },
    {
        "content": "<p>Use <code>split_ifs</code>?</p>",
        "id": 211864277,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601521039
    },
    {
        "content": "<p>In this particular case: <code>by simpa [eq_comm]</code></p>",
        "id": 211864347,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601521100
    },
    {
        "content": "<p>Ah <code>eq_comm</code> is what I was looking for</p>",
        "id": 211864366,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601521136
    },
    {
        "content": "<p>There might be a problem if the types inside <code>dite</code> actually depend on the condition (or only for <code>Type</code>-values <code>dite</code>s?)</p>",
        "id": 211864457,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601521231
    },
    {
        "content": "<p>I don't remember details.</p>",
        "id": 211864474,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601521260
    },
    {
        "content": "<p>In case of an error, I just use <code>split_ifs</code></p>",
        "id": 211864484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601521275
    },
    {
        "content": "<p>(or <code>by_cases</code> + <code>simp [dif_pos ...]</code>)</p>",
        "id": 211864495,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601521302
    },
    {
        "content": "<p>The larger issue is that this is my goal after a <code>wlog</code>. I could for sure solve it without the <code>wlog</code>, but thought it'd be cleaner with.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : field R,</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">A : matrix (fin (n + 3)) (fin (n + 3)) R,</span>\n<span class=\"cm\">x y : fin (n + 2 + 1),</span>\n<span class=\"cm\">H : y ≤ x,</span>\n<span class=\"cm\">this :</span>\n<span class=\"cm\">  dite (y = x) (λ (_x : y = x), 0)</span>\n<span class=\"cm\">      (λ (h : ¬y = x),</span>\n<span class=\"cm\">         -A 0 x * (-1) ^ ↑x * A 1 y * (-1) ^ ↑(x.pred_above y h) * det' ((A.drop 0 x).drop 0 (x.pred_above y h))) =</span>\n<span class=\"cm\">    dite (x = y) (λ (_x : x = y), 0)</span>\n<span class=\"cm\">      (λ (h : ¬x = y),</span>\n<span class=\"cm\">         A 1 y * (-1) ^ ↑y * A 0 x * (-1) ^ ↑(y.pred_above x h) * det' ((A.drop 0 y).drop 0 (y.pred_above x h)))</span>\n<span class=\"cm\">⊢ dite (x = y) (λ (_x : x = y), 0)</span>\n<span class=\"cm\">      (λ (h : ¬x = y),</span>\n<span class=\"cm\">         -A 0 y * (-1) ^ ↑y * A 1 x * (-1) ^ ↑(y.pred_above x h) * det' ((A.drop 0 y).drop 0 (y.pred_above x h))) =</span>\n<span class=\"cm\">    dite (y = x) (λ (_x : y = x), 0)</span>\n<span class=\"cm\">      (λ (h : ¬y = x),</span>\n<span class=\"cm\">         A 1 x * (-1) ^ ↑x * A 0 y * (-1) ^ ↑(x.pred_above y h) * det' ((A.drop 0 x).drop 0 (x.pred_above y h)))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 211864732,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601521605
    },
    {
        "content": "<p><code>this</code> is just the goal with the conditions reversed.</p>",
        "id": 211864742,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601521629
    },
    {
        "content": "<p>Almost.</p>",
        "id": 211864751,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601521649
    },
    {
        "content": "<p>I'll just go back to my <code>wlog</code>-free proof.</p>",
        "id": 211864913,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1601521852
    }
]