[
    {
        "content": "<p>In <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.60max_eq_max'.60\">a recent thread</a> there was a question about proving the equality of <code>max</code> and <code>max'</code>. I suggested <code>by rw [finset.max', with_bot.coe_unbot]</code> and this worked, but only after the user updated their mathlib to master. It turns out that <code>max'</code> was changed to use <code>unbot</code> only <a href=\"https://github.com/leanprover-community/mathlib/commit/646028a0b749eabb281682751d09fe573a4f8cf6\">a few days ago</a>; previously it used <code>option.get</code>, so the solution would have worked with <code>option.coe_get</code> instead of <code>with_bot.coe_unbot</code>.</p>\n<p>It occurred to me that <code>with_bot.coe_unbot</code> and <code>option.coe_get</code> are both simp lemmas, meaning that if I had initially suggested <code>by simp [finset.max']</code> it would (in theory) have worked without the user needing to update mathlib. Of course, maybe it's a good thing that they updated mathlib, but my point here is that using <code>simp</code> appears to make code more robust against changes to mathlib, as it chooses the appropriate lemma dynamically instead of relying on a specific one. This benefit of using <code>simp</code> hadn't occurred to me before.</p>\n<p>Should I have suggested <code>by simp [finset.max']</code> instead of <code>by rw [finset.max', with_bot.coe_unbot]</code>? More generally, does this robustness mean we should prefer using <code>simp</code> (in our own code and in suggestions to others) even when it only performs one additional rewrite?</p>",
        "id": 289072256,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1657414888
    },
    {
        "content": "<p>My opinion on <code>simp</code> is that if you need to specify any additional lemmas, you're most likely using it wrong</p>",
        "id": 289073215,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657416569
    },
    {
        "content": "<p>It's not really based on much other than anecdote</p>",
        "id": 289073220,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657416586
    },
    {
        "content": "<p>I guess I can try to elaborate: if you have to use additional lemmas on a <code>simp</code>, one of two things is likely happening</p>\n<ul>\n<li>the lemma should be marked <code>simp</code> but isn't, that's an easy fix</li>\n<li>you're doing some rewrites then finishing a proof by <code>simp</code>, in which case I believe it's cleaner to separate the steps out</li>\n</ul>",
        "id": 289073363,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657416778
    },
    {
        "content": "<p>Of course, that additional lemma might be a local hypothesis, or there might be the rare case where that hypothesis appears multiple times in the expression and allows for further simplification: using <code>simp</code> with extra hypotheses is fine in that case</p>",
        "id": 289073392,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657416823
    },
    {
        "content": "<p>My opinion on using <code>simp</code> for didactic purposes: don't</p>",
        "id": 289073441,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657416853
    },
    {
        "content": "<p>It's a very useful tactic but it's hard to understand if you don't already have a clear understanding of what the lemmas it can use are</p>",
        "id": 289073447,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657416871
    },
    {
        "content": "<p>I was the \"user\" that Matt refers to!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>My attitude towards <code>simp</code> is somewhat the opposite of what Violeta said: once I realize that a proof can end with <code>simp</code>, I then try to absorb as many lines before it as possible into the <code>simp</code>.</p>\n<p>I find that this makes code much less brittle, precisely for the reason that Matt mentions: <code>simp</code> will try snake its way around lemmas, and if it needs some hints, then I'll make its life easier!</p>\n<p>Ultimately, it is probably a question of whether you want to do small fixes every time you change a lemma that is used in a <code>rw</code>, or whether you prefer to do them only when a <code>simp [stuff]</code> no longer works.  The second issue feels its like much less frequent, though it could be harder to fix than the former.</p>",
        "id": 289079687,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657425790
    },
    {
        "content": "<p>Adding lemmas to a <code>simp</code> is actually a very sane thing to do. This usually happens when the simplification of an expression, except for one or two steps that \"complicate\" it.</p>",
        "id": 289102462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657458786
    },
    {
        "content": "<p>One could also argue that this makes the proofs more readable since it basically says 'simplify and use these nontrivial facts' and it is way easier to understand than <code>simp only [..], rw complicated_lemma, simp</code>.</p>",
        "id": 289112111,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657470868
    },
    {
        "content": "<p>What do y'all think of this: \"You should understand your Lean code so well that tactics are something you <em>want</em> to use, but not something you <em>need</em> to use\"</p>",
        "id": 289121582,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1657483824
    },
    {
        "content": "<p>I'm not so sure about that statement, particularly the word \"understand\". In my experience, after a while you just build up intuition for what tactics will make progress. And concerning simp, I personally found that I used simp more and more with more experience. After a while you realize just how powerful simp can be, and you want to use it as much as possible.</p>",
        "id": 289122169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1657484727
    },
    {
        "content": "<p>I am a little worried about excessive <code>simp</code> and using \"backwards\" <code>simp</code> and I wonder if there might be something clearer to write.  For example, with <code>squeeze_simp</code> I was able to produce <a href=\"https://github.com/leanprover-community/mathlib/blob/psl/src/linear_algebra/special_linear_group.lean#L246-L262\">https://github.com/leanprover-community/mathlib/blob/psl/src/linear_algebra/special_linear_group.lean#L246-L262</a> which includes code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_scalar</span><span class=\"o\">,</span> <span class=\"n\">special_linear_group.coe_fn_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">special_linear_group.coe_inv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">diagonal_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">diagonal_smul</span><span class=\"o\">,</span> <span class=\"n\">adjugate_diagonal</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">diagonal_smul</span><span class=\"o\">,</span> <span class=\"n\">diagonal_one</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.prod_const</span><span class=\"o\">,</span> <span class=\"n\">finset.card_erase_of_mem</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">diagonal_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">diagonal_smul</span><span class=\"o\">,</span> <span class=\"n\">matrix.diagonal_eq_diagonal_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">implies_true_iff</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>It seems that I can't collapse these because of the use of <code>←</code>?</p>",
        "id": 290185932,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658282180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466727\">@Jim Fowler</span> Often, when you end up with a huge pile of <code>simp</code>s like this, it's a sign that you've unfolded too much. A few lemmas there stand out as being too \"low level\" for what you're trying to do: <code>pi.smul_apply</code>, all the <code>finset</code> stuff, ...</p>\n<p>Here's a more direct proof. I started the same way you did, <code>squeeze_simp at ha ⊢</code>, then noticed I could rewrite with <code>ha</code> and the proof fell out from there.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_scalar</span><span class=\"o\">,</span> <span class=\"n\">special_linear_group.coe_fn_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">special_linear_group.coe_inv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">adjugate_smul</span><span class=\"o\">,</span> <span class=\"n\">adjugate_one</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 290187144,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1658283831
    },
    {
        "content": "<p>That's so great!</p>",
        "id": 290187222,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658283897
    }
]