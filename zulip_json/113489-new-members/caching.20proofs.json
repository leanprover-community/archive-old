[
    {
        "content": "<p>Re <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>'s dream. ( <span class=\"emoji emoji-26a0\" title=\"warning\">:warning:</span> everything that follows should be taken with a fair amount of <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span>)<br>\nWe now have two crawlers that spit out dependency graphs of statements in mathlib. What I wish is that this would be integrated with Lean. I don't think it is unreasonable that Lean could have some <code>cache.sqlite</code> in the root of every project. It could store dependencies there (not per file, but per statement!) and also cache proofs that have been computed by hammer/big-gun tactics.<br>\nThis would have the side benefit that Lean could use more fine-grained dependency management on recompilation. Currently if someone <em>adds</em> a lemma to some basic file like <code>data/list/basic.lean</code> almost half of mathlib has to be recompiled. But nothing changed! We only added a lemma!<br>\nI understand that if you want reproducible builds, this might require some modification of the binary format, but that shouldn't be impossible.<br>\nThis recompilation could also combine this cache and proof-irrelevance. If someone changed the <em>proof</em> of a <code>Prop</code>, but left the statement alone, then one only needs to chech that the new proof is in fact a proof. But it isn't necessary to recompile everything that depended on it.<br>\nBasically, when someone adds a lemma to <code>data/list/basic.lean</code> I want the recompile to be done in 5 seconds.</p>",
        "id": 134149890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537254869
    },
    {
        "content": "<p>I definitely think dependency tracking should be per-theorem and per-definition. I think the proof changing bit could probably be taken care by tracking changes to the theorem's interface (i.e. what you see with <code>set_option pp.all true</code>, <code>#check @theorem</code>).</p>",
        "id": 134150071,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537255222
    },
    {
        "content": "<p>Unfortunately too much proof caching becomes dangerous, especially when combined with hammers.</p>",
        "id": 134150093,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255295
    },
    {
        "content": "<p>Why?</p>",
        "id": 134150095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537255310
    },
    {
        "content": "<p>The problem can be that of course merely adding a lemma can't break a proof, but it can very much break a hammer.</p>",
        "id": 134150096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255312
    },
    {
        "content": "<p>Perhaps my hammer spends a certain amount of time searching a graph of rewrites, but has heuristics for aborting if things starting looking too bad.</p>",
        "id": 134150141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255337
    },
    {
        "content": "<p>For example, adding a <code>@[simp]</code> theorem can change the way <code>simp</code> works?</p>",
        "id": 134150144,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537255350
    },
    {
        "content": "<p>Right, I see where this is going...</p>",
        "id": 134150145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537255356
    },
    {
        "content": "<p>That's true.</p>",
        "id": 134150148,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537255357
    },
    {
        "content": "<p>An innocuous extra lemma can cause it to waste time searching consequences of that lemma, and not only cause it to run longer, but to actually fail.</p>",
        "id": 134150153,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255366
    },
    {
        "content": "<p>We want to allow people to leave the big hammers in their proofs, but also to be confident these proof scripts are still correct.</p>",
        "id": 134150166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255401
    },
    {
        "content": "<p>I can imagine a \"two pass\" compilation, which we could display e.g. with two colours of sidebars instead of the current yellow one.</p>",
        "id": 134150170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255433
    },
    {
        "content": "<p>On a first pass, we very aggressively use cached proofs, and if they work completely ignore the \"expensive to check\" tactic scripts.</p>",
        "id": 134150213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255463
    },
    {
        "content": "<p>This leads to something I've been thinking about for a while: storing the proof structure directly to allow for fast builds.</p>",
        "id": 134150214,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537255466
    },
    {
        "content": "<p>On the second pass we actually check the tactic scripts still work.</p>",
        "id": 134150216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255474
    },
    {
        "content": "<p>By the way --- this discussion, which is great, definitely doesn't belong on this thread.</p>",
        "id": 134150218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255502
    },
    {
        "content": "<p>But that second pass has to go all over mathlib. Not just the 5 files that I have open.</p>",
        "id": 134150221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537255504
    },
    {
        "content": "<p>Discussion continued here: <a href=\"#narrow/stream/113488-general/subject/caching.20proofs\" title=\"#narrow/stream/113488-general/subject/caching.20proofs\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/caching.20proofs</a></p>",
        "id": 134151223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537257060
    }
]