[
    {
        "content": "<p>In line 23, <a href=\"https://gist.github.com/Agnishom/426552564fd1a235ac7c009c24b11c09\" target=\"_blank\" title=\"https://gist.github.com/Agnishom/426552564fd1a235ac7c009c24b11c09\">here</a>, I have the structure <code>monoid_recognizer</code> which supposedly consists of a monoid <code>m</code> among other things.</p>\n<p>In line 41, I would like to use the multiplication involved with this monoid. However, simply refering to it as <code>*</code> would not work as would be evident from running the code. I have also tried other things like <code>M.is_monoid.mul</code>, etc.</p>\n<p>How do I get it to work?</p>",
        "id": 185419368,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578805794
    },
    {
        "content": "<p>You need to make it an instance, i.e.:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">monoid_recognizer</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">is_monoid</span>\n</pre></div>",
        "id": 185419563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578806172
    },
    {
        "content": "<p>That is a good idea. Thanks</p>",
        "id": 185419578,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578806239
    },
    {
        "content": "<p>What other way is there to do this? My understanding is that something like <code>M.is_monoid.mul</code> or similar thing should work</p>",
        "id": 185419619,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578806292
    },
    {
        "content": "<p>This works for me :</p>\n<div class=\"codehilite\"><pre><span></span>def recognizer_to_dfa {alphabet : Type} [fintype alphabet] (M : monoid_recognizer alphabet) : dfa alphabet :=\nlet MONOID_MUL : M.m → M.m → M.m := M.is_monoid.mul\nin @dfa.mk _ _ M.m M.is_finite M.has_decidable_eq (λ q a, MONOID_MUL q (M.h [a])) (M.h []) M.fin\n</pre></div>\n\n\n<p>What error message are you getting?</p>",
        "id": 185434711,
        "sender_full_name": "Chris B",
        "timestamp": 1578836134
    },
    {
        "content": "<p>That works, thanks!</p>\n<p>While this works:</p>\n<div class=\"codehilite\"><pre><span></span>def recognizer_to_dfa {alphabet : Type} [fintype alphabet] (M : monoid_recognizer alphabet) : dfa alphabet :=\nlet MONOID_MUL : M.m → M.m → M.m := M.is_monoid.mul\nin @dfa.mk _ _ M.m M.is_finite M.has_decidable_eq (λ q a, MONOID_MUL q (M.h [a])) (M.h []) M.fin\n</pre></div>\n\n\n<p>the following variants however do not:</p>\n<div class=\"codehilite\"><pre><span></span>def recognizer_to_dfa {alphabet : Type} [fintype alphabet] (M : monoid_recognizer alphabet) : dfa alphabet :=\n@dfa.mk _ _ M.m M.is_finite M.has_decidable_eq (λ q a, M.is_monoid.mul q (M.h [a])) (M.h []) M.fin\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span>def recognizer_to_dfa {alphabet : Type} [fintype alphabet] (M : monoid_recognizer alphabet) : dfa alphabet :=\nlet MONOID_MUL : M.m → M.m → M.m := M.is_monoid.mul\nin @dfa.mk _ _ M.m M.is_finite M.has_decidable_eq (λ q a, M.is_monoid.mul q (M.h [a])) (M.h []) M.fin\n</pre></div>\n\n\n<p>I get the error message <code>invalid field notation, function 'monoid.mul' does not have explicit argument with type (monoid ...)</code>.</p>\n<p>I wonder why?</p>",
        "id": 185439052,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578844066
    },
    {
        "content": "<p>That's a great question...  And one that I'm sure Mario or someone can answer for you lol. FWIW this works too.</p>\n<div class=\"codehilite\"><pre><span></span>def recognizer_to_dfa {alphabet : Type} [fintype alphabet] (M : monoid_recognizer alphabet) : dfa alphabet :=\n@dfa.mk _ _ M.m M.is_finite M.has_decidable_eq (λ q a, @monoid.mul M.m M.is_monoid q (M.h [a])) (M.h []) M.fin\n</pre></div>",
        "id": 185440457,
        "sender_full_name": "Chris B",
        "timestamp": 1578846775
    },
    {
        "content": "<p>The problem, as the error message says, is that <code>monoid.mul</code> has an argument of type <code>monoid A</code>, but it is not explicit, so you aren't allowed to use projection notation on an element of type <code>monoid A</code> to apply <code>monoid.mul</code>. You can write <code>@monoid.mul _ M.is_monoid q (M.h [a])</code></p>",
        "id": 185442984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578851259
    },
    {
        "content": "<p>well, why does it work when it is bound using a <code>let</code> then? As in Chris's example?</p>",
        "id": 185444337,
        "sender_full_name": "Agnishom Chattopadhyay",
        "timestamp": 1578853547
    },
    {
        "content": "<p>Lean appears to be a bit inconsistent in the handling of partial applications and built in projections here. Demo:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">nat</span>\n<span class=\"kn\">constant</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">mul</span>   <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">func</span>  <span class=\"c1\">-- failed to synth monoid (monoid ℕ)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span>  <span class=\"c1\">-- invalid field notation, insufficient number of arguments</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"c1\">-- invalid field notation, insufficient number of arguments</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>   <span class=\"c1\">-- invalid field notation, no explicit (monoid ...) arg</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">func</span> <span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"c1\">-- invalid field notation, no explicit (monoid ...) arg</span>\n</pre></div>\n\n\n<p>Note that the types of <code>monoid.mul</code> and <code>monoid.func</code> are exactly the same; the only difference is that <code>monoid.mul</code> is a built in structure projection and <code>monoid.func</code> is a defined (well, axiomatized) function on <code>monoid</code></p>",
        "id": 185449797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1578862424
    }
]