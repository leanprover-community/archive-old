[
    {
        "content": "<p>Lean seems to allow the following definition even when <code>tree</code> is nested in the <code>list</code> class, as described under  <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n</code></pre></div>\n<p>However, I can't seem to get this work with <code>vector</code>, the following code doesn't compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">tree</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n</code></pre></div>\n<p>Any way to get lean work with <code>vector</code>? Maybe define a custom vector that allows nested inductive definition?</p>",
        "id": 218640997,
        "sender_full_name": "Rui Liu",
        "timestamp": 1606956331
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n</code></pre></div>",
        "id": 218641269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606956603
    },
    {
        "content": "<p>and then if you really want a vector, you can do <code>vector.of_fn</code>.</p>",
        "id": 218641297,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606956618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> </p>\n<p>I don't seem to be able to import <code>data.fin</code>? I'm developing from vscode after downloading the release here <a href=\"https://github.com/leanprover/lean/releases\">https://github.com/leanprover/lean/releases</a></p>",
        "id": 218641819,
        "sender_full_name": "Rui Liu",
        "timestamp": 1606957048
    },
    {
        "content": "<p>That's the old abandoned version of lean</p>",
        "id": 218641986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606957200
    },
    {
        "content": "<p>Oh actually if I just don't run <code>import data.fin</code> it also seems to work...</p>",
        "id": 218642105,
        "sender_full_name": "Rui Liu",
        "timestamp": 1606957313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What version should I use instead?</p>",
        "id": 218642310,
        "sender_full_name": "Rui Liu",
        "timestamp": 1606957456
    },
    {
        "content": "<p>leanprover-community/lean</p>",
        "id": 218642365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606957526
    },
    {
        "content": "<p>Oh actually I did download from there <a href=\"https://github.com/leanprover-community/lean/releases/tag/v3.23.0\">https://github.com/leanprover-community/lean/releases/tag/v3.23.0</a></p>",
        "id": 218642708,
        "sender_full_name": "Rui Liu",
        "timestamp": 1606957873
    },
    {
        "content": "<p>Try following the recommended instructions at <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a></p>",
        "id": 218642859,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1606958013
    },
    {
        "content": "<p>Lean's support for nested inductive types is spotty, and in particular it does not support dependent nested inductives. These inductives are not part of the kernel but are instead simulated by a compilation strategy that doesn't work in the dependent case. Like Yakov says, you should use functions instead, because these are native inductives and have all the nice properties you would expect</p>",
        "id": 218643150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606958292
    }
]