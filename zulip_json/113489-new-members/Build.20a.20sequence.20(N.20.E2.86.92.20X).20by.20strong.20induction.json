[
    {
        "content": "<p>I'm trying to build a strictly increasing sequence of elements, by using some hypothesis on Inf/Sup:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">seq_strictly_increasing</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Inf</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">)):</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>   <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">seq_strictly_increasing</span> <span class=\"n\">k</span><span class=\"o\">})</span>\n</pre></div>\n\n\n<p>But I'm getting the following error:</p>\n<div class=\"codehilite\"><pre><span></span>failed to prove recursive application is decreasing, well founded relation\n  @has_well_founded.r ℕ (@has_well_founded_of_has_sizeof ℕ nat.has_sizeof)\nPossible solutions:\n  - Use &#39;using_well_founded&#39; keyword in the end of your definition to specify tactics for synthesizing well founded relations and decreasing proofs.\n  - The default decreasing tactic uses the &#39;assumption&#39; tactic, thus hints (aka local proofs) can be provided using &#39;have&#39;-expressions.\nThe nested exception contains the failure state for the decreasing tactic.\nnested exception message:\nfailed\nstate:\nX : Type,\n_inst_5 : has_Inf X,\nS : set X,\nHinf : infinite S,\nHinf : ∀ (M : set X), M ⊆ S → set.nonempty M → Inf M ∈ M,\nseq_strictly_increasing : ℕ → X,\nn : ℕ,\nx : X,\nk : ℕ,\nH : k ≤ n\n⊢ k &lt; nat.succ n\n</pre></div>\n\n\n<p>Which I'm not sure how to solve, I guess I have to prove that the <code>k &lt; nat.succ n</code>, i.e. <code>k ≤ n</code>, that's by H, but unsure how to do it?</p>\n<p>Is there a general way to build objects (i.e. sequences, functions, etc.) by induction? I tried to read, re-read mathlib &amp; its docs and the Lean reference, but found nothing except toy examples with naturals, fibonacci, etc.</p>",
        "id": 191413708,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584907678
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover-community/mathlib/pull/1952/files#diff-3cf2529e763503ec4f444b4a282b272eR30\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1952/files#diff-3cf2529e763503ec4f444b4a282b272eR30\">https://github.com/leanprover-community/mathlib/pull/1952/files#diff-3cf2529e763503ec4f444b4a282b272eR30</a> help as an example?</p>",
        "id": 191413913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584907991
    },
    {
        "content": "<p>It makes a lot clearer, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>!</p>",
        "id": 191414133,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584908339
    },
    {
        "content": "<p>So now, I'm reduced to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">increasing_seq</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Inf</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hinf</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">M</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">)):</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">increasing_seq</span><span class=\"o\">,</span>\n    <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">increasing_seq</span>  <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">admit</span><span class=\"o\">)})</span>\n</pre></div>\n\n\n<p>So instead of <code>by admit</code>, I should use the fact that some hypothesis <code>H: k &lt; n</code> is added to my context and give it to <code>increasing_seq</code>,  so I've done <code>begin, exact H, end</code>, could I do something shorter?</p>",
        "id": 191414239,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584908514
    },
    {
        "content": "<p><code>by assumption</code> (but isn't this slow?)</p>",
        "id": 191414280,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584908534
    },
    {
        "content": "<p><code>begin exact H end</code> can always be replaced by <code>H</code>.</p>",
        "id": 191414357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584908646
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ! Was not sure about it because it seemed like implicit hypothesis appearing out of nowhere</p>",
        "id": 191414500,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584908872
    },
    {
        "content": "<p>Oh, I didn't see <code>H</code> was such a weird assumption. It comes from your <code>∃ k &lt; n,</code>. This is a really weird way to play here.</p>",
        "id": 191414853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584909356
    },
    {
        "content": "<p>If you want to avoid relying on automatic names you can desugar the notation to <code>Inf (S \\ { x : X | ∃ (k : ℕ) (Hyp : k &lt; n), x = increasing_seq  k Hyp })</code></p>",
        "id": 191414928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584909464
    },
    {
        "content": "<p>But I think <code>by assumption</code> is fine here.</p>",
        "id": 191414932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584909478
    },
    {
        "content": "<p>If it feels too long you can use Swiss quotes.</p>",
        "id": 191414972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584909495
    },
    {
        "content": "<p><code>Inf (S \\ { x : X | ∃ k &lt; n, x = increasing_seq  k ‹_› })</code></p>",
        "id": 191414987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584909532
    },
    {
        "content": "<p>should we change the shorthand for <code>\\f&lt;</code> <code>\\f&gt;</code>, now that the french are rejecting the \"single french quotes\"?</p>",
        "id": 191415642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584910575
    },
    {
        "content": "<p>I'm not sure I can speak for all French people.</p>",
        "id": 191415707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584910679
    },
    {
        "content": "<p>:D</p>",
        "id": 191416063,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584911011
    },
    {
        "content": "<p>Thank you for the desugared notation, anyway <span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> — makes a lot more sense to me now</p>",
        "id": 191416087,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584911041
    }
]