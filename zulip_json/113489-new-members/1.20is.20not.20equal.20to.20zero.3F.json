[
    {
        "content": "<p>I seem to have backed myself into a corner and cannot for the life of me figure out how to prove that 1 is not = to zero.  Any hints?</p>",
        "id": 266505582,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640959927
    },
    {
        "content": "<p>some variation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_ne_zero\">docs#one_ne_zero</a>; what type is <code>1</code>?</p>",
        "id": 266505722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640960153
    },
    {
        "content": "<p>just a natural number.</p>",
        "id": 266505968,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640960423
    },
    {
        "content": "<p>For natural numbers, it can be proved using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_ne_zero\">docs#nat.succ_ne_zero</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">succ_ne_zero</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>But it is not true in general:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">T.mk</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">T.mk</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 266505970,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640960426
    },
    {
        "content": "<p>If you omit the type signature, you can't prove it.</p>",
        "id": 266506010,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1640960513
    },
    {
        "content": "<p>fun fact: this is also a valid proof of <code>1 ≠ 0</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>(you can <code>#print</code> it to see what magic is going on here, and Kevin has a <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">blog post on it</a>)</p>",
        "id": 266506100,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640960617
    },
    {
        "content": "<p>The actual situation I'm in is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>So I really want to prove 1 not = to 2.  More generally I am experimenting with proving very concrete things like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">one_list</span> <span class=\"o\">:=</span> <span class=\"n\">list.nil.cons</span> <span class=\"mi\">1</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">one_list</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">one_list.cons</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and finding it surprisingly complicated.</p>",
        "id": 266506178,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640960705
    },
    {
        "content": "<p>The <code>.</code> is the most mystifying proof I've ever seen. I love it <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 266506189,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640960729
    },
    {
        "content": "<p>Does <code>norm_num</code> help Jeremy? Or <code>dec_trivial(!)</code>?</p>",
        "id": 266506251,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640960821
    },
    {
        "content": "<p>Or <code>cases h</code></p>",
        "id": 266506344,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640960944
    },
    {
        "content": "<p><code>cases h</code> works like magic, but what did it do?</p>",
        "id": 266506518,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640961214
    },
    {
        "content": "<p>It gave you n goals, where n was the number of constructors of <code>eq</code> which could possibly have made such a proof.</p>",
        "id": 266506760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640961488
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">one_list</span> <span class=\"o\">:=</span> <span class=\"n\">list.nil.cons</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">one_list'</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"c1\">-- why not just use the notation for this?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">one_list</span> <span class=\"bp\">=</span> <span class=\"n\">one_list'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">one_list</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">one_list.cons</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 266506859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640961637
    },
    {
        "content": "<p>When <code>nat</code> is constructed, Lean's elaborator knows that it can assume that constructors are injective and that distinct constructors give different terms. If you do <code>cases h</code> when <code>h : 1 = 2</code> then Lean thinks \"well the only constructor for <code>eq</code> is <code>eq.refl x : x = x</code> so both <code>1</code> and <code>2</code> have to be equal to <code>x</code>. Now <code>1 := succ zero</code> and <code>2 := succ (succ zero)</code> so for <code>x</code> to exist, <code>succ (succ zero)</code> and <code>succ zero</code> have to be equal, but I know that succ is injective so this means <code>succ zero</code> has to equal <code>zero</code> but again I know this can't be true because zero isn't succ of anything, so this case can't happen\"</p>",
        "id": 266507033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640961930
    },
    {
        "content": "<p>Under the hood, there are these auto-generated <code>no_confusion</code> declarations that give you (or the <code>cases</code> tactic) lower level access to the fact that constructors are injective and disjoint.</p>",
        "id": 266507051,
        "sender_full_name": "Chris B",
        "timestamp": 1640961960
    },
    {
        "content": "<p>Is it the elaborator doing this when the <code>cases</code> tactic is run?</p>",
        "id": 266507095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640961977
    },
    {
        "content": "<p>In Lean 4 it is, there might be c++ magic in Lean 3.</p>",
        "id": 266507112,
        "sender_full_name": "Chris B",
        "timestamp": 1640962024
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.no_confusion</span>\n</code></pre></div>\n<p>gives some statement which is hard to understand (it involves another type called <code>nat.no_confusion_type</code> -- it was only when Chris Hughes and I sat down to figure out what was going on that I began to understand it and then wrote the blog post linked to above). If you right click on it, you might be surprised where you end up: the point is that this lemma is generated automatically by Lean when <code>nat</code> is defined.</p>",
        "id": 266507185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640962111
    },
    {
        "content": "<p>It does look like <code>cases</code> farms out to <code>no_confusion</code> in lean 3 as well.</p>",
        "id": 266507325,
        "sender_full_name": "Chris B",
        "timestamp": 1640962256
    },
    {
        "content": "<p>I guess I didn't realize that \"constructors are injective\" and that \"distinct constructors give different terms\" were built in.  So in the<br>\ninductive definition of the natural numbers, the injectivity of <code>succ</code> is automatic? </p>\n<p>Is there a section of TPIL I can read to understand more about the process you describe below?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/1.20is.20not.20equal.20to.20zero.3F/near/266507033\">said</a>:</p>\n<blockquote>\n<p>When <code>nat</code> is constructed, Lean's elaborator knows that it can assume that constructors are injective and that distinct constructors give different terms. If you do <code>cases h</code> when <code>h : 1 = 2</code> then Lean thinks \"well the only constructor for <code>eq</code> is <code>eq.refl x : x = x</code> so both <code>1</code> and <code>2</code> have to be equal to <code>x</code>. Now <code>1 := succ zero</code> and <code>2 := succ (succ zero)</code> so for <code>x</code> to exist, <code>succ (succ zero)</code> and <code>succ zero</code> have to be equal, but I know that succ is injective so this means <code>succ zero</code> has to equal <code>zero</code> but again I know this can't be true because zero isn't succ of anything, so this case can't happen\"</p>\n</blockquote>",
        "id": 266507499,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1640962445
    },
    {
        "content": "<p>They're not built in per se, they're proved automatically and added. You can <code>#print nat.no_confusion</code> to see the proof that Lean automatically generated.</p>",
        "id": 266507523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640962494
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo.no_confusion</span> <span class=\"c1\">-- you can see the term proof</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">foo</span> <span class=\"c1\">-- all the other goodies</span>\n</code></pre></div>",
        "id": 266507553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640962534
    },
    {
        "content": "<p><code>#print prefix foo</code> shows you all the things Lean makes automatically when the user builds the inductive type <code>foo</code>. The only things in that list without a definition are <code>foo</code>, <code>foo.bar</code>, <code>foo.baz</code> and <code>foo.rec</code>.</p>",
        "id": 266507606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640962571
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">foo.no_confusion</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">baz</span> <span class=\"n\">x.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">baz</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">foo.no_confusion</span> <span class=\"n\">h</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 266507897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640962910
    },
    {
        "content": "<p>The dot thing is just an Easter egg, it's rarely useful in practice to mathematicians. It's all well and good having this fabulous equation compiler, but the equation compiler is a tool which works wonders on inductive types with more than one constructor, and we in practice hardly ever use these. Things like <code>group G</code>, the type of group structures on a type <code>G</code>, are strictly speaking inductive types, but they only have one constructor (the only way to make a group structure on G is to give the multiplication, identity, inverse, and proofs of the axioms). So you don't ever see this <code>no_confusion</code> stuff in practice when you're e.g. in <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a> trying to prove FLT for regular primes.</p>",
        "id": 266508068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640963107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462625\">Jeremy Teitelbaum</span> <a href=\"#narrow/stream/113489-new-members/topic/1.20is.20not.20equal.20to.20zero.3F/near/266507499\">said</a>:</p>\n<blockquote>\n<p>I guess I didn't realize that \"constructors are injective\" and that \"distinct constructors give different terms\" were built in.  So in the<br>\ninductive definition of the natural numbers, the injectivity of <code>succ</code> is automatic? </p>\n<p>Is there a section of TPIL I can read to understand more about the process you describe below?</p>\n</blockquote>\n<p>The type signature for <code>no_confusion_type</code>is intimidating, but the underlying idea is pretty intuitive. You tell it some <code>p</code> that you want, and give it a proof <code>h : a = b</code>, and it looks at what <code>a</code> and <code>b</code> are. <br>\nFor <code>0 = 0</code>, you get nothing, since it's a trivial proof. For <code>S x  = 0</code> and <code>0 = S y</code>, you immediately get a witness of <code>p</code>, since your <code>h</code> is a proof of false. For <code>S x = S y</code>, you get back a term that will give you <code>p</code> if it can be derived from <code>x = y</code>.</p>",
        "id": 266508310,
        "sender_full_name": "Chris B",
        "timestamp": 1640963375
    },
    {
        "content": "<blockquote>\n<p>Is there a section of TPIL I can read to understand more about the process you describe below?</p>\n</blockquote>\n<p>I just picked it up by asking questions on here. I don't need a detailed understanding of this phenomenon to do the kind of mathematics I want to do so I didn't understand the details any more carefully. Someone like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> will be able to tell you how everything works in Lean 3.</p>",
        "id": 266509172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640964258
    }
]