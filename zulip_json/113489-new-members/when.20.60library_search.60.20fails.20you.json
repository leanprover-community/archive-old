[
    {
        "content": "<p>I've been having a recurring situation where I want to prove something relatively obvious, but I don't know the name of the lemma that mathlib gives to it. I generally use <code>library_search</code>, but there isn't always a single lemma that can prove something. I end up adding lots of <code>have</code>s  for the assumptions of a lemma that I THINK is the way to prove this.<br>\nIn the following example, I'm trying to prove <code>abs x * abs y  ≤ abs x * ε</code> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">my_lemma2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">},</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ε</span> <span class=\"n\">epos</span> <span class=\"n\">ele1</span> <span class=\"n\">xlt</span> <span class=\"n\">ylt</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">abs_nonneg</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">abs_mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span>                 <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span>                     <span class=\"o\">:</span> <span class=\"n\">one_mul</span> <span class=\"n\">ε</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>To show that <code>abs x * abs y  ≤ abs x * ε</code> I tried using <code>library_search</code> but apparently there isn't a single lemma for this. I reasoned that the way to show this is by saying that <code>0≤a \\to a * b ≤ a * c \\iff b≤c</code>, which didn't work. However then after reading in the tutorial, they suggested I use <code>mul_le_mul : ?M_3 ≤ ?M_5 → ?M_4 ≤ ?M_6 → 0 ≤ ?M_4 → 0 ≤ ?M_5 → ?M_3 * ?M_4 ≤ ?M_5 * ?M_6</code>. I would not have discovered this without the tutorial telling me. </p>\n<p>What general strategy should I adopt to find which lemma's to use in situations like this?</p>",
        "id": 204512316,
        "sender_full_name": "Chris M",
        "timestamp": 1595307136
    },
    {
        "content": "<p>For finding lemmas, the inequality you need to prove is <code>_ * _ ≤ _ * _</code>, so if you write down the symbols, it's <code>[mul, le, mul]</code>. So searching for <code>mul_le_mul</code> should find that lemma. To search, you can use VSCode search (make sure it can search in mathlib!), <code>grep</code> or <code>Ctrl-P</code>, then <code>#mul_le_mul</code></p>\n<p>Although I think for inequalities like this, just using <code>linarith</code> and <code>nlinarith</code> is probably faster than trying to find the exact lemma which solves it. In this case, you can replace <code>by library_search</code> with <code>by nlinarith</code>.</p>",
        "id": 204512762,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1595308050
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 204628075,
        "sender_full_name": "Chris M",
        "timestamp": 1595389816
    },
    {
        "content": "<p>Would it make sense for there to be a tactic that, like <code>library_search</code>, searches the library, but instead merely looks for lemmas that pattern-match with your conclusion, and just lists all of those lemmas and their type signatures, even if it can't find an immediate way to use it.</p>",
        "id": 204628144,
        "sender_full_name": "Chris M",
        "timestamp": 1595389951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> Have you seen <code>suggest</code>?</p>",
        "id": 204630007,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595393055
    },
    {
        "content": "<p>No I haven't! Looking at the the docs, it sounds great, I'll look at it. thanks :)</p>",
        "id": 204630084,
        "sender_full_name": "Chris M",
        "timestamp": 1595393192
    },
    {
        "content": "<p>(I recommend doing a speed-read of the tactic docs page as a way to get a feel for what exists)</p>",
        "id": 204656568,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595419479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113489-new-members/topic/when.20.60library_search.60.20fails.20you/near/204512762\">said</a>:</p>\n<blockquote>\n<p>To search, you can use VSCode search (make sure it can search in mathlib!), [...] <code>Ctrl-P</code>, then <code>#mul_le_mul</code></p>\n</blockquote>\n<p>You can also hit <code>Ctrl-T</code>, <code>mul_le_mul</code>.</p>\n<p>We usually recommend <code>library_search</code>  and <code>suggest</code> now, but <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##find\"><code>#find</code></a> works (slowly) on patterns like <code>_ * _ ≤ _ * _</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 204657102,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595419848
    }
]