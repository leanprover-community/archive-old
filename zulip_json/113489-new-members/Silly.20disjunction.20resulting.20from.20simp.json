[
    {
        "content": "<p>I have a hypothesis <code>h : 2 * d ^ 2 = 2 * (2 * k * k)</code>, and if i then <code>simp at h</code>,  I get the result <code>d ^ 2 = 2 * k * k ∨ 2 = 0</code>. But <code>2 /= 0</code> --- do i really need to prove this is an inl myself?</p>",
        "id": 222336603,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389367
    },
    {
        "content": "<p>I know some types which have 2 = 0. Which type are you using?</p>",
        "id": 222336662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610389401
    },
    {
        "content": "<p><code>d k : Nat</code></p>",
        "id": 222336692,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389423
    },
    {
        "content": "<p>Maybe if you add a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">2\\not=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> for nats as a hypothesis <code>h</code> and prove it with e.g. <code>norm_num</code>, and tell <code>simp</code> about <code>h</code>. it will do it for you. But it's not true that every tactic knows every obvious thing.</p>",
        "id": 222336852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610389497
    },
    {
        "content": "<p>that does it, thanks. is there a more concise way than <code>have</code>-binding the 2/=0 proof and then giving it to simp?</p>",
        "id": 222337119,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389626
    },
    {
        "content": "<p>currently</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">two_neq_zero</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">two_neq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 222337146,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389644
    },
    {
        "content": "<p>i'd prefer to put it directly in the simp list</p>",
        "id": 222337209,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389679
    },
    {
        "content": "<p><code>simp at h</code> is an antipattern anyway. Maybe you should just apply the relevant lemma?</p>",
        "id": 222337253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610389685
    },
    {
        "content": "<p>sorry, i'm not sure what you mean by applying the relevant lemma here</p>",
        "id": 222337294,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389710
    },
    {
        "content": "<p>There will be a lemma in the library saying <code>a \\ne 0 -&gt; a * b = a * c -&gt; b = c</code> and you could just apply that.</p>",
        "id": 222337420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610389765
    },
    {
        "content": "<p><code>norm_num at h</code> is a much of an antipattern as <code>simp at h</code> but it will do what you want here.</p>",
        "id": 222337552,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1610389815
    },
    {
        "content": "<p>There should also be a <code>zero_lt_two</code>, which you can combine with <code>ne_of_gt</code>(or <code>ne_of_lt</code>, I am not at my computer...)</p>",
        "id": 222337726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610389911
    },
    {
        "content": "<p>some more context; i'm trying to show sqrt2 is irrational. my context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n<span class=\"n\">even_pow_n_2</span><span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hk</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>now I want to show <code>d^2</code> is even, so i want to show there exists <code>m</code> st <code>2 * m = d^2</code>. my current way of doing that is via a <code>calc</code>, but syntactically i don't know how to make it give me what i want, thus this <code>at</code> shenanigans</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">^</span><span class=\"mi\">2</span>               <span class=\"o\">:</span> <span class=\"n\">h'.symm</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span>         <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hk</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">pow_two</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span>         <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n          <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">two_neq_zero</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">two_neq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 222337878,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610389980
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- `mul_right_inj'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inj'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222337945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610390009
    },
    {
        "content": "<p>the result is <code>h : d ^ 2 = 2 * k * k</code> which is actually what i want</p>",
        "id": 222337976,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390025
    },
    {
        "content": "<p>You could do <code>replace h := (mul_right_inj' (by norm_num)).1 h</code></p>",
        "id": 222338066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610390059
    },
    {
        "content": "<p>You can always do <code>(show 2 ≠ 0, by norm_num)</code> as a way of inlining</p>",
        "id": 222338077,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610390066
    },
    {
        "content": "<p>and being explicit</p>",
        "id": 222338101,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610390077
    },
    {
        "content": "<p>thanks kevin and yakov --- both the things i didn't know i was looking for</p>",
        "id": 222338210,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390140
    },
    {
        "content": "<p>i had tried <code>rw [(by norm_num) : 2 \\neq 0] at h</code>, but syntactically it didnt work. happy to see that the show construct does</p>",
        "id": 222338381,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390232
    },
    {
        "content": "<p>even if that worked, you can't <code>rw</code> using an inequality, only using equalities and <code>iff</code>s</p>",
        "id": 222338527,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610390295
    },
    {
        "content": "<p>the correct way to write what you wrote is <code>rw (by norm_num : 2 \\neq 0) at h</code></p>",
        "id": 222338539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610390301
    },
    {
        "content": "<p>sorry, i meant <code>simp</code> rather than <code>rw</code></p>",
        "id": 222338548,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390309
    },
    {
        "content": "<p>which should have the same effect as yakov's version</p>",
        "id": 222338585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610390332
    },
    {
        "content": "<p>ahh. <code>simp [by norm_num : 2 ≠ 0] at h,</code> doesn't parse, but <code>simp [(by norm_num : 2 ≠ 0)] at h,</code> does <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 222338664,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390387
    },
    {
        "content": "<p>yes, because type ascription to any term always has to be of the syntax <code>( term : type )</code></p>",
        "id": 222338738,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610390414
    },
    {
        "content": "<p>parentheses are mandatory around type ascription, they are part of the syntax</p>",
        "id": 222338742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610390417
    },
    {
        "content": "<p>that's helpful to know. i'm coming from haskell where the parens are optional</p>",
        "id": 222338771,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390435
    },
    {
        "content": "<p>okay, marking this as resolved. thanks everyone!</p>",
        "id": 222338789,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610390446
    }
]