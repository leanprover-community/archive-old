[
    {
        "content": "<p>Hello!</p>\n<p>I've worked my way through TpiL4 to the point that I can write proofs (without using tactics). Although constructing new types is still beyond me, I think I should be able to start writing proofs of mathematical theorems. </p>\n<p>I would find it helpful to see a small Lean4 example project that proves some theorems about (say) groups. That way I would be able to see what's required and what I am missing. Does anyone have such a project they could share with me? I realise that mathlib is such a project, but it's a little daunting to start there! </p>\n<p>Is it \"simply\" a matter of downloading mathlib (Lean4) and importing the theorems needed to prove what I want to prove? Or am I missing something? </p>\n<p>Thanks <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 319706471,
        "sender_full_name": "Robert Culling",
        "timestamp": 1672969983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"525668\">@Robert Culling</span>  See this file<br>\n<a href=\"https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/wednesday/algebraic_hierarchy.lean\">https://github.com/leanprover-community/lftcm2020/blob/master/src/exercises_sources/wednesday/algebraic_hierarchy.lean</a><br>\nfrom the \"LftCM 2020\" workshop, or this chapter<br>\n<a href=\"https://leanprover-community.github.io/mathematics_in_lean/06_Abstract_Algebra.html\">https://leanprover-community.github.io/mathematics_in_lean/06_Abstract_Algebra.html</a><br>\nof <em>Mathematics in Lean</em>.</p>",
        "id": 319706745,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672970185
    },
    {
        "content": "<p>Thank you  <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I'll take a look at those!</p>",
        "id": 319709195,
        "sender_full_name": "Robert Culling",
        "timestamp": 1672972150
    },
    {
        "content": "<p>Note that those are Lean 3 projects. But they might still be helpful.</p>",
        "id": 319721718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1672983799
    },
    {
        "content": "<p>I should think that a fun project would be to translate them into lean 4! I learnt a lot about lean in 2017 by translating Coq code into lean</p>",
        "id": 319727000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672987971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"525668\">@Robert Culling</span>  When I was first starting out with Lean3, I started a small project formalizing very elementary group theory separate from  from mathlib's algebra/group theory modules,  albeit heavily guided by the constructions used in mathlib (especially the use of typeclasses). I originally wanted to formalize my own version of the first isomorphism theorem for groups, but once I got comfortable with Lean I pivoted to other work. The repository I had was <a href=\"https://github.com/loganrjmurphy/lean-algebra/blob/master/src\">here</a> if you find it useful to take a look at (disclaimer: I was very much a novice at the time and the code may not be great quality).</p>\n<p>I also agree with Kevin that translating something like this or the files Heather linked to lean4 is likely a great way to learn.</p>",
        "id": 319802103,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1673018438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thanks for the warning. I'll try and translate them <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 320129431,
        "sender_full_name": "Robert Culling",
        "timestamp": 1673221196
    },
    {
        "content": "<p>I am getting trouble at the first step <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <br>\nWhen I write the following, Lean4 says it can't find has_mul, has_one, has_inv. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- and then we ask for the axioms</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this because I am not importing something? or because these are not in Lean4?</p>\n<p>Thank you!</p>",
        "id": 321070566,
        "sender_full_name": "Robert Culling",
        "timestamp": 1673575691
    },
    {
        "content": "<p>I'm not on my PC but I don't think those exist in Lean 4 by default</p>",
        "id": 321078662,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1673582251
    },
    {
        "content": "<p>They're <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mul#doc\">docs4#Mul</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=One#doc\">docs4#One</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Inv#doc\">docs4#Inv</a> in Lean 4. But in reality <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Group#src\">src4#Group</a> extends <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DivInvMonoid#doc\">docs4#DivInvMonoid</a>.</p>",
        "id": 321080584,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673583856
    }
]