[
    {
        "content": "<p>Why doesn't this work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">chebyshev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">chebyshev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">chebyshev</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>Lean tells me the definition relies on <code>classical.choice</code>. Indeed putting <code>noncomputable</code> at the front fixes things, but why is it noncomputable?</p>",
        "id": 154992565,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547314450
    },
    {
        "content": "<p>The definition of <code>polynomial X</code> is \"functions from nat to X which vanish outside a finite set\"; \"vanish\" means \"equals zero\", and equality is undecidable in the reals. This might be something to do with it. Try <code>polynomial int</code> and see if it fixes things!</p>",
        "id": 154993140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547315567
    },
    {
        "content": "<p>NB <code>import analysis.polynomial</code> to make it work, but indeed int fixes things, and is probably the \"correct\" thing to do.</p>",
        "id": 154993205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547315694
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chebyshev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">chebyshev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">chebyshev</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">chebyshev</span> <span class=\"mi\">17</span> <span class=\"c1\">-- just about works on my desktop</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">C (65536) * X ^ 17 + C (-278528) * X ^ 15 + C (487424) * X ^ 13 + C (-452608) * X ^ 11 + C (239360) * X ^ 9 + C (-71808) * X ^ 7 + C (11424) * X ^ 5 + C (-816) * X ^ 3 + C (17) * X</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">chebyshev</span> <span class=\"mi\">19</span> <span class=\"c1\">-- (deterministic) timeout</span>\n</pre></div>",
        "id": 154993404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547316011
    },
    {
        "content": "<p>you can probably get farther with a list based representation of the polynomials</p>",
        "id": 154993597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316369
    },
    {
        "content": "<p>I guess the reason lists aren't used in general is that the leading term might be 0, which causes problems in general; however it will not cause problems here.</p>",
        "id": 154993606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547316421
    },
    {
        "content": "<p>well, it would make it harder to print if the leading term was 0</p>",
        "id": 154993616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316460
    },
    {
        "content": "<p>and get the degree and other things</p>",
        "id": 154993617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316469
    },
    {
        "content": "<p>In general I guess one could define some more computationally efficient but slightly broken \"non-zero polynomials\" with addition only defined if you can prove that the degrees are unequal, and multiplication OK over an integral semi-domain :-)</p>",
        "id": 154993618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547316479
    },
    {
        "content": "<p>But even lists are inefficient, right, because they're linked lists in reality?</p>",
        "id": 154993669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547316531
    },
    {
        "content": "<p>If you want to forgo the equality checks, you can define a polynomial as a quotient of representations with some zeros at the end</p>",
        "id": 154993672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316540
    },
    {
        "content": "<p>then addition and multiplication are easy and degree needs equality</p>",
        "id": 154993681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316559
    },
    {
        "content": "<p>yes lists are linked lists which aren't so great</p>",
        "id": 154993690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316589
    },
    {
        "content": "<p>you could use buffer for really good VM performance</p>",
        "id": 154993744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316617
    },
    {
        "content": "<p>but they are better than functions which is what is currently used</p>",
        "id": 154993749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316637
    },
    {
        "content": "<p>I think the polynomials become big if else chains</p>",
        "id": 154993751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316648
    },
    {
        "content": "<p>in fact, they probably aren't even reduced, you get these big thunks for calculating the coefficients</p>",
        "id": 154993815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316723
    },
    {
        "content": "<p>the advantage of lists is they are a strict data structure, you calculate all the values before recursing</p>",
        "id": 154993822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316763
    },
    {
        "content": "<p>also -- should have mentioned this before -- <code>chebyshev</code> there has an exponential time implementation</p>",
        "id": 154993836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316794
    },
    {
        "content": "<p>just like the naive fib algorithm</p>",
        "id": 154993839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547316808
    },
    {
        "content": "<p>It seems some things may have changed since this discussion took place. Trying to get started working with polynomials; <code>analysis.polynomial</code> is not a valid import any longer. In the following I try to reproduce Kevin's piece of code listed above in this same topic, but it doesn't work on my computer because of the VM not having code for <code>classical.choice</code>. Am I missing something? Also, the definition of <code>p1</code> is non-computable; do we have a way to compute (like <code>#eval</code>) a value from it (or any other polynomial on the reals, or even nats) at a given point?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- this is noncomputable</span>\n<span class=\"n\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"c1\">-- these check but I can&#39;t produce a value</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">chebyshev</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"bp\">ℤ</span> <span class=\"c1\">-- fails,  VM: no classical.choice</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">chebyshev</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">chebyshev</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">chebyshev</span> <span class=\"mi\">3</span> <span class=\"c1\">--fails, VM: no classical.choice</span>\n</pre></div>",
        "id": 188132510,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581616971
    },
    {
        "content": "<p>choice will certainly be uncomputable. That's a fact of life that we'll need to deal with.</p>",
        "id": 188133163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581617352
    },
    {
        "content": "<p>So you will want</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n</pre></div>\n\n\n<p>at the top of your file, just after the <code>import</code>s</p>",
        "id": 188133213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581617392
    },
    {
        "content": "<p>Next, <code>#eval</code> won't work, so you can't simply compute the value. But you could write some <code>simp</code>-lemmas that can do some work for you.</p>",
        "id": 188133370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581617464
    },
    {
        "content": "<p>Which is almost as good.</p>",
        "id": 188133380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581617473
    },
    {
        "content": "<p>It is unfortunate that it is currently not easy to run the simplifier against an expression like <code>chebyshev 3</code>. You need to write <code>example : chebyshev 3 = the_answer := by simp [chebyshev]</code>, which defeats the purpose because you will have to precompute the answer. And then Lean will tell you that it agrees <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 188133574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581617595
    },
    {
        "content": "<p>Maybe we should define a command <code>#simp</code> that behaves like <code>#eval</code> except using the simplifier.</p>",
        "id": 188133652,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581617638
    },
    {
        "content": "<p>Just wondering how Kevin could <code>#eval chebyshev 17</code>, as he shows above (that is, the older messages on the same topic).</p>",
        "id": 188133885,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1581617778
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1391\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1391\">#1391</a> removed this. It worked on toy examples, but isn't very helpful in practice and causes problems elsewhere.</p>",
        "id": 188134036,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581617919
    },
    {
        "content": "<p>Chris is sitting next to me talking about perhaps having some attribute for computing and then you just unfold a lot until you can use <code>norm_num</code> or something...</p>",
        "id": 188144223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581623882
    },
    {
        "content": "<p>I think that's tricky. Do you unfold <code>has_add.add</code>? Sometimes yes, because you want to unfold addition on whatever type you're working on. Sometimes no, because you want <code>norm_num</code> to deal with it.</p>",
        "id": 188146966,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1581625630
    }
]