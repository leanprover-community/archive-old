[
    {
        "content": "<p>I can't understand why <code>representation k A V</code> is underlined with \"fails to synthesize type class instance for <code>module k (V →ₗ[k] V)</code>\" in :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subrepresentation</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">assoc_algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">A</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but it succeeds when I change <code>structure</code> to <code>def</code>. Lean also succeeds if I copy the same variables into a <code>variables</code>.</p>",
        "id": 241681544,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622969778
    },
    {
        "content": "<p>For context, <code>representation</code> is defined with these variables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">assoc_algebra</span> <span class=\"n\">k</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 241681585,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622969872
    },
    {
        "content": "<p>What are your imports?</p>",
        "id": 241681859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622970286
    },
    {
        "content": "<p><code>import algebra.module</code></p>",
        "id": 241681869,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622970312
    },
    {
        "content": "<p>Sorry, I guess I mean what is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? For example, where is <code>assoc_algebra</code> from?</p>",
        "id": 241681886,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622970356
    },
    {
        "content": "<p><code>class assoc_algebra\n  (k : Type _) [field k] (A : Type _) [ring A] extends module k A</code></p>",
        "id": 241681936,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622970378
    },
    {
        "content": "<p>And then finally, what's your <code>representation</code> definition?</p>",
        "id": 241681952,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1622970433
    },
    {
        "content": "<p>Sorry I should really be including everything, but the problem seems to be fixed when I <code>import linear_algebra.basic</code></p>",
        "id": 241681971,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622970470
    },
    {
        "content": "<p>Which is where the instance for the module in question is defined</p>",
        "id": 241682014,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622970487
    },
    {
        "content": "<p>What's strange is that it succeeds when I write <code>def</code> instead of <code>structure</code>...</p>",
        "id": 241682022,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622970513
    },
    {
        "content": "<p>I assume you're deliberately avoiding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> as a learning exercise?</p>",
        "id": 241682564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622971342
    },
    {
        "content": "<p>How can I fix this problem? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span><span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">S</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_one</span> <span class=\"bp\">↥</span><span class=\"n\">S</span>\n</code></pre></div>",
        "id": 242324033,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623405730
    },
    {
        "content": "<p><code>f</code> returns an element of <code>S</code>, i.e. an element <code>y : ℕ</code> along with a proof <code>y ∈ S</code>. So you need to return the proof as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 242324698,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623406179
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/formation\">noted</a>, when you write <code>1 : S</code>, it really means \"lean can parse the syntax 1 into a term of type S\". So there's an alternative way to make your original version of <code>f</code> work, namely by telling Lean how to interpret the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert</span> <span class=\"mi\">1</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}⟩⟩</span>\n</code></pre></div>\n<p>(This is the reason you got an error along the lines of \"failed to synthesize type class instance for <code>has_one S</code>\", rather than \"expected type <code>S</code>, but <code>1</code> has type <code>ℕ</code>\": Lean uses these typeclass instances to interpret numerals.)</p>",
        "id": 242325371,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623406569
    },
    {
        "content": "<p>Note that the <code>1</code> is purely a bit of syntax with no meaning. So you can also define that <code>1 : S</code> actually corresponds to the natural number <code>2</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">set.mem_insert_of_mem</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">set.mem_insert</span> <span class=\"mi\">2</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">})⟩⟩</span>\n</code></pre></div>",
        "id": 242325457,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623406621
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fin.has_one'</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"k\">#check</span> <span class=\"n\">fin.has_one'</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fin.has_one'</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why does the definition of <code>f</code> report</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 247967545,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627936295
    },
    {
        "content": "<p>Since <code>fin n</code> is not a class, the argument <code>i</code> in the context is not available for your <code>fin.has_one'</code> instance to be selected, I think.</p>",
        "id": 247968027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627936526
    },
    {
        "content": "<p>Is there a minor change that solves this problem?</p>",
        "id": 247969305,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627937183
    },
    {
        "content": "<p>You could replace <code>{i : fin n}</code> by <code>[inhabited (fin n)]</code>.<br>\nBut the mathlib way is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.has_one\">docs#fin.has_one</a>, which only gives <code>has_one (fin (succ n))</code></p>",
        "id": 247970251,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1627937662
    },
    {
        "content": "<p>There might be a better/more mathlib-approved way of doing whatever it is you want to do with <code>1 : fin n</code>.</p>",
        "id": 247972140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627938762
    },
    {
        "content": "<p>You can always construct the same value as <code>⟨1, your_proof_that (1 &lt; n)⟩</code></p>",
        "id": 247975203,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627940559
    },
    {
        "content": "<p>Just because you somehow have a term of <code>i : fin 0</code> doesn't mean that suddenly you should be able to write <code>1</code> for things of <code>fin 0</code>.</p>",
        "id": 247975292,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627940636
    },
    {
        "content": "<p>Hi, the following code fails with this message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">R : Type u_1,</span>\n<span class=\"cm\">_inst_1 : integral_domain R,</span>\n<span class=\"cm\">K : Type u_2,</span>\n<span class=\"cm\">_inst_2 : field K,</span>\n<span class=\"cm\">_inst_3 : comm_ring K,</span>\n<span class=\"cm\">_inst_4 : algebra R K</span>\n<span class=\"cm\">⊢ algebra R K</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I don't know why lean does not see the instance <code>_inst_4</code>...</p>",
        "id": 258266153,
        "sender_full_name": "Eloi Torrents",
        "timestamp": 1634675237
    },
    {
        "content": "<p>Try adding <code>set_option pp.all true</code> after the imports, is there a difference then?</p>",
        "id": 258266352,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634675314
    },
    {
        "content": "<p>K is both a field and a comm ring</p>",
        "id": 258266475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634675385
    },
    {
        "content": "<p>So it has two completely unrelated ring structures and Lean is completely confused</p>",
        "id": 258266565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634675407
    },
    {
        "content": "<p>Try removing the <code>[comm_ring K]</code></p>",
        "id": 258266614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634675424
    }
]