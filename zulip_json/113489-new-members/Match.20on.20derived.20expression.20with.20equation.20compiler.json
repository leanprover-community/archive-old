[
    {
        "content": "<p>So I was just looking into translating <a href=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569\" title=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569\">this nice little exercise in Coq</a> into Lean and realized that I don't understand Lean's equation compiler at all.</p>\n<p>In Coq, we can match on a derived expression of an argument as follows (example taken from that exercise):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">decide</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"n\">mod</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"mi\">0</span> <span class=\"o\">=&gt;</span> <span class=\"bp\">false</span>\n  <span class=\"o\">|</span> <span class=\"mi\">2</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">27</span> <span class=\"o\">&lt;=?</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"mi\">4</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">9</span> <span class=\"o\">&lt;=?</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"o\">_</span> <span class=\"o\">=&gt;</span> <span class=\"bp\">true</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>Basically, this means that, given a natural number <code>n</code>, we compute <code>n mod 5</code> and then perform case analysis on this intermediate result (with the <code>match</code> expression). How do we do that using Lean's equation compiler? I quickly skimmed through the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html\">Induction and Recursion chapter of TPIL</a> again but could not seem to find a similar example.</p>",
        "id": 193338537,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586360575
    },
    {
        "content": "<p>I don't know what <code>&lt;=?</code> does but this compiles</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>  <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"kn\">end</span>\n\n  <span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">decide</span> <span class=\"mi\">3</span>\n</pre></div>",
        "id": 193339627,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1586361038
    },
    {
        "content": "<p>Maybe <code>2 := (27 &lt;= n)</code>? But this is a Prop not a bool.</p>",
        "id": 193340150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586361256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">27</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193340163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586361261
    },
    {
        "content": "<p>usually we use Prop rather than bool</p>",
        "id": 193340183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586361269
    },
    {
        "content": "<p>To write the equivalent of <code>a &lt;=? b</code> you can use the coercion from Prop to bool:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">27</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">decide</span> <span class=\"mi\">12</span>\n</pre></div>\n\n\n<p>Kenny's version using <code>Prop</code> is usually preferred, but in that case decidability is not for free anymore, you have to prove it by cases:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">27</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">decide</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">true</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193383683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586383127
    },
    {
        "content": "<p>Thanks, I didn't realize that Lean's equation compiler also provided a similar <code>match</code> construct.</p>",
        "id": 193399243,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586396914
    }
]