[
    {
        "content": "<p>The docs suggest that <code>simp</code> will use <code>unfold</code>. So why do the examples below fail if <code>unfold</code> is not invoked? Also, why does the presence of <code>matrix.mul_eq_mul</code> confuse simp? Changing the definition attribute from <code>reducible</code> to anything else does not change the behavior.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"c1\">-- attempt using (*)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">mat_invertible</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- this lemma is never used by simp</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_invertible_def</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- fails, simp does not unfold h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- fails, does not utilize mul_assoc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- fails, does not utilize h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- attempt using (matrix.mul)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- this lemma is never used by simp</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_invertible_def&#39;</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- fails, simp does not unfold h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_left_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- fails, does not utilize mul_assoc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_right_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 201304531,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592503266
    },
    {
        "content": "<p>Which docs suggest <code>simp</code> will use <code>unfold</code>? Simp matches terms by syntactic equality so it doesn't \"know\" how to use <code>mat_invertible_def</code> to match terms, you can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n</code></pre></div>\n\n\n<p>instead,<br>\nThe lemma <code>mat_invertible_def</code> is applied if the target has <code>mat_invertible A B</code> in it, but your goal doesn't, only <code>h</code> does.</p>",
        "id": 201306679,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592504417
    },
    {
        "content": "<p>Aha. That makes sense. So I can do <code>simp * at *</code> to resolve some of the <code>unfold</code> away. But the <code>-matrix.mul_eq_mul</code> issue remains:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"c1\">-- attempt using (*)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">mat_invertible</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- this lemma is never used by simp</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_invertible_def</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- fails, does not utilize mul_assoc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_right_cancel</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- attempt using (matrix.mul)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- this lemma is never used by simp</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_invertible_def&#39;</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mat_inv_left_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- fails, does not utilize mul_assoc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- fails because of mat_invertible&#39; defn</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible&#39;</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 201307650,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592504970
    },
    {
        "content": "<p>What do you mean by the issue remains? Which of the fails would you like to work?</p>",
        "id": 201308586,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592505433
    },
    {
        "content": "<p>I guess the question is why does including <code>-matrix.mul_eq_mul</code> make the latter example here work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- fails, does not utilize mul_assoc</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">mat_invertible</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 201308911,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1592505599
    },
    {
        "content": "<p>Because <code>mul_assoc</code> says <code>c*a*b = c*(a*b)</code> so if <code>matrix.mul_eq_mul</code> fires before <code>mul_assoc</code> then the goal becomes <code>(c.mul a).mul b</code> and <code>mul_assoc</code> can't match this as its in terms of <code>*</code> not <code>mul</code>.<br>\nBasically you have to make a choice whether your simp lemmas are in terms of <code>mul</code> or <code>*</code> for matrix and feed in the right lemmas for whatever choice you make, so either have <code>matrix.mul_eq_mul</code> in your simp set and use <code>matrix.mul_assoc</code> or have <code>matrix.mul_eq_mul</code> not in the simp set and use <code>mul_assoc</code>.</p>",
        "id": 201310812,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592506459
    },
    {
        "content": "<p>Or you make no choice and include both <code>mul_assoc</code> and <code>matrix.mul_assoc</code> in your simp set.<br>\nYou might find reading about confluent rewriting systems interesting, <a href=\"https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)\">https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)</a></p>",
        "id": 201311045,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592506580
    }
]