[
    {
        "content": "<p>I can't seem to find the syntax for checking whether a string is a substring of another. Does that exist somewhere I'm not finding? It seems to exist on <code>list</code> as maybe <code>is_infix</code>, and I see I can convert strings to lists... is that what I should be doing?</p>",
        "id": 211333585,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601082228
    },
    {
        "content": "<p>Oh, maybe I should try <code>#print prefix</code> which I saw mentioned somewhere...</p>",
        "id": 211333651,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601082303
    },
    {
        "content": "<p>(No, nothing on <code>string</code> looks applicable to me, unless I'm missing it.)</p>",
        "id": 211333991,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601082837
    },
    {
        "content": "<p>The <code>string</code> API is embarrassingly sparse. Don't expect to find much useful there. Instead, either convert strings to lists of characters, or start writing some API. :-)</p>",
        "id": 211335054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601084476
    },
    {
        "content": "<p>Is there perhaps an API for getting the path Lean is installed to? Or am I out of luck there too</p>",
        "id": 211336341,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601086170
    },
    {
        "content": "<p>Aha! I found some mathlib code doing essentially what I'm trying to do (and yeah doing it hackishly). So I guess \"no\".</p>",
        "id": 211336420,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601086259
    },
    {
        "content": "<p>Out of curiosity, what is it you're trying to do?</p>",
        "id": 211336681,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601086581
    },
    {
        "content": "<p>I'm trying to generalize <code>export_json</code> that I found in doc-gen</p>",
        "id": 211336961,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601086939
    },
    {
        "content": "<p>By making it only export decls that it finds in the \"current project\", regardless of if that's mathlib or not</p>",
        "id": 211336969,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601086958
    },
    {
        "content": "<p>I can do that afterwards by post processing the filenames I see, but I was hoping not to waste time since it looks like running that takes like a minute to run over mathlib</p>",
        "id": 211336977,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601086990
    },
    {
        "content": "<p>(And then more broadly what I'm trying to do is \"generate docs for my thing\")</p>",
        "id": 211336991,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601087027
    },
    {
        "content": "<p>I'm sure that \"teach that script to take an argument\" is a suitably simple solution as well but I didn't/don't know how to do that argparsing so I was futzing with other parts of the code instead. But yeah I'm likely to give up and do something else soon, probably the post processing</p>",
        "id": 211337181,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601087284
    },
    {
        "content": "<p>Ah, cool! That sounds like a worthy task. Certainly generalizing <code>doc-gen</code> to work on non-mathlib projects is an eventual goal; it's just that we haven't had the time for it.</p>\n<p>Let's loop in <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  who wrote <code>export_json.lean</code>.</p>",
        "id": 211345571,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601102112
    },
    {
        "content": "<p>I'd love to see doc-gen generalized! But indeed I haven't found the time to work on it myself. Ideally you'd be able to choose what projects/dependencies get exported. But there are subtleties here. We don't store old versions of the docs, so if you generate docs for your project that depends on an old version of mathlib, you can't reliably link mathlib declarations to the community docs.</p>",
        "id": 211356712,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601121337
    },
    {
        "content": "<p>There are a handful of other places in the code and UI where the assumption it's running on mathlib is pretty much baked in. Generalizing isn't a trivial job.</p>",
        "id": 211356769,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601121421
    },
    {
        "content": "<p>But identifying which project a declaration is from shouldn't be too hard. Core Lean filepaths are identifiable using the hack in doc-gen now. Dependency filepaths (e.g. mathlib, if you're in a project that depends on mathlib) are identifiable by the <code>_target/deps/projectname</code> prefix.</p>",
        "id": 211356830,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601121511
    },
    {
        "content": "<p>Unless your project is using local dependencies, in which case you might be out of luck, I think the user will have to provide this info.</p>",
        "id": 211356843,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601121559
    },
    {
        "content": "<p>Thanks for the info. And yeah so I was going to try something different to what's in doc-gen to be honest</p>",
        "id": 211358332,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601124115
    },
    {
        "content": "<p>If I can get decls out in some easy to process way (which is why I was looking at export_json) I was going to try to throw together a Lean sphinx domain</p>",
        "id": 211358385,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601124157
    },
    {
        "content": "<p>At which point I'd just be able to have sphinx docs for the decls and ignore all the UI code in doc-gen which did indeed look quite mathlib-specific</p>",
        "id": 211358397,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601124194
    },
    {
        "content": "<p>I tried indeed to basically do what you mentioned within <code>process_decl</code>, namely adding e.g.  <code>if \"_target\" \\mem filename.split_on '/' then return none else do ...</code> which does filter out mathlib but still leaves stuff defined in core lean (hence wanting to know how to get that path)</p>",
        "id": 211358587,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601124516
    },
    {
        "content": "<p>So I tried instead using <code>if e.is_prefix_of_file ... decl_name</code> on the `all import as I think the mathlib code does but I was finding it hard to debug, I'm new to the notorious IO-monad world so I couldn't figure out what value wasn't what I expected in that big filter operation</p>",
        "id": 211358609,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601124592
    },
    {
        "content": "<p>You can mostly-reliably get the path to <code>core</code> by getting the location of some declaration you know lives in some particular file in core. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n<span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n<span class=\"n\">os</span> <span class=\"bp\">←</span> <span class=\"n\">e.decl_olean</span> <span class=\"bp\">`</span><span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">os</span>\n</code></pre></div>",
        "id": 211359155,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601125428
    },
    {
        "content": "<p>Assuming <code>nat</code> lives at <code>.../library/init/core.lean</code>, you can strip that from the end of <code>os</code> and get the path to the root of <code>core</code>.</p>",
        "id": 211359205,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601125499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/113489-new-members/topic/substring/near/211358609\">said</a>:</p>\n<blockquote>\n<p>So I tried instead using <code>if e.is_prefix_of_file ... decl_name</code> on the `all import as I think the mathlib code does but I was finding it hard to debug, I'm new to the notorious IO-monad world so I couldn't figure out what value wasn't what I expected in that big filter operation</p>\n</blockquote>\n<p>I'm not quite sure what you mean here, could you elaborate?</p>",
        "id": 211359280,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601125618
    },
    {
        "content": "<p>Sorry I mean something quite simplistic -- basically this is my entire diff at the minute using the \"whitelist\"-kind of approach rather than filtering out mathlib+core:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/export_json.lean b/src/export_json.lean</span>\n<span class=\"gh\">index f476297..315bb2d 100644</span>\n<span class=\"gd\">--- a/src/export_json.lean</span>\n<span class=\"gi\">+++ b/src/export_json.lean</span>\n<span class=\"gu\">@@ -301,6 +301,8 @@ do ff ← d.in_current_file | return none,</span>\n    let decl_name := d.to_name,\n    if decl_name.is_internal ∨ d.is_auto_generated e then return none else do\n    some filename ← return (e.decl_olean decl_name) | return none,\n<span class=\"gi\">+   some project_dir ← return (e.decl_olean `all) | return none,</span>\n<span class=\"gi\">+   if ¬(e.is_prefix_of_file (project_dir.popn_back 8) decl_name) then return none else do</span>\n    some ⟨line, _⟩ ← return (e.decl_pos decl_name) | return none,\n    doc_string ← (some &lt;$&gt; doc_string decl_name) &lt;|&gt; return none,\n    (args, type) ← get_args_and_type d.type,\n</code></pre></div>",
        "id": 211359874,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601126640
    },
    {
        "content": "<p>But running that produces no <code>decl</code>s. How can I debug why that condition isn't matching?</p>",
        "id": 211359926,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601126695
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.decl_olean\">docs#environment.decl_olean</a> takes the name of a declaration, not a file. So that line will only work if there's a declaration named <code>all</code> in some file in <code>project_dir</code>.</p>",
        "id": 211360159,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601127027
    },
    {
        "content": "<p>aha. and <code>import</code>s don't create some sort of runtime object?</p>",
        "id": 211360225,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601127125
    },
    {
        "content": "<p>(i.e. I guess what I thought that'd do is that that file has <code>import all</code> in it, so I thought it'd give me the path that that import ended up finding)</p>",
        "id": 211360321,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601127264
    },
    {
        "content": "<p>No, AFAIK there's no convenient way to test whether one olean file imports another from within meta-Lean. You can do it externally.</p>",
        "id": 211360332,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601127287
    },
    {
        "content": "<p>Got it, ok. Will go back to the other way then (of trying to filter out core + mathlib)</p>",
        "id": 211360347,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601127327
    },
    {
        "content": "<p>The semantics of <code>decl_olean n</code> are, \"if <code>n</code> is the name of a declaration defined in some imported file, give me the path to that file, otherwise return none`\"</p>",
        "id": 211360350,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601127336
    },
    {
        "content": "<p>If you can assume that lean is being run in your project root, you can get <code>project_dir</code> another way. <code>tactic.unsafe_run_io io.env.get_cwd</code></p>",
        "id": 211360409,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601127394
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/core/init/meta/module_info.html#module_info.module_id\">https://leanprover-community.github.io/mathlib_docs/core/init/meta/module_info.html#module_info.module_id</a> another option?</p>",
        "id": 211360890,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601127991
    },
    {
        "content": "<p>(About to see if I can figure out how to use it)</p>",
        "id": 211360895,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601128005
    },
    {
        "content": "<p>Oh. It only works on the current module. OK. Nevermind</p>",
        "id": 211361007,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601128197
    },
    {
        "content": "<p>Oh, I forgot about those. I think you could make them work (<code>of_module_name</code> and the like) but I don't know enough about it to give you any real advice.</p>",
        "id": 211361105,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601128299
    },
    {
        "content": "<p>Cool, will keep poking. Appreciate the help.</p>",
        "id": 211361161,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601128363
    },
    {
        "content": "<p>Did you at what leanproject does here?  I'm away from my computer and I forgot</p>",
        "id": 211364093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601132537
    },
    {
        "content": "<p>Hm, for which part? (FWIW I got this working fairly easily, it was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">get_project_dir</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">string.popn_back</span> <span class=\"o\">(</span><span class=\"n\">module_info.of_module_name</span> <span class=\"s2\">\"all\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"s2\">\"all.lean\"</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>along with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>   <span class=\"n\">some</span> <span class=\"n\">filename</span> <span class=\"bp\">←</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e.decl_olean</span> <span class=\"n\">decl_name</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"bp\">¬</span><span class=\"n\">project_dir.is_prefix_of</span> <span class=\"n\">filename</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n</code></pre></div>\n\n<p>etc. but I have to propagate that change to the other keys from <code>export_json</code>, since that only handles <code>decls</code>, so yeah working through each one.</p>",
        "id": 211374760,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601147323
    },
    {
        "content": "<p>You can have a look at the output of <code>leanproject decls</code></p>",
        "id": 211380356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601150705
    },
    {
        "content": "<p>(the ouput is in <code>decls.yaml</code>)</p>",
        "id": 211380377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601150758
    },
    {
        "content": "<p>Yeah sorry I went back and looked after and figured you meant to point me at e.g. <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/0c5b88b911c2aae1bfd441e7e2e07deb5084f4c2/mathlibtools/decls.lean#L37-L43\">https://github.com/leanprover-community/mathlib-tools/blob/0c5b88b911c2aae1bfd441e7e2e07deb5084f4c2/mathlibtools/decls.lean#L37-L43</a></p>",
        "id": 211380459,
        "sender_full_name": "Julian Berman",
        "timestamp": 1601150848
    }
]