[
    {
        "content": "<p>My code currenly goes as following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Goal</span>\n<span class=\"cm\">We want to proof that the SC defined in the thesis is sound and</span>\n<span class=\"cm\">complete. In this file, ACL syntax and semantics are defined.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ALC</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Role</span> <span class=\"o\">(</span><span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Atomic</span> <span class=\"o\">:</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">Role</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Concept</span> <span class=\"o\">(</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TopConcept</span>    <span class=\"o\">:</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BottomConcept</span> <span class=\"o\">:</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Atomic</span>        <span class=\"o\">:</span> <span class=\"n\">AtomicConcept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Negation</span>      <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Intersection</span>  <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Union</span>         <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Some</span>          <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Role</span> <span class=\"n\">AtomicRole</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Every</span>         <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Role</span> <span class=\"n\">AtomicRole</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span> <span class=\"bp\">→</span> <span class=\"n\">Concept</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Concept</span> <span class=\"n\">Role</span>\n\n<span class=\"kd\">notation</span>        <span class=\"bp\">`⊤`</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.TopConcept</span>    <span class=\"c1\">-- \\top</span>\n<span class=\"kd\">notation</span>        <span class=\"bp\">`⊥`</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.BottomConcept</span> <span class=\"c1\">-- \\bot</span>\n<span class=\"kd\">prefix</span>          <span class=\"bp\">`¬ₐ`</span> <span class=\"o\">:</span> <span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.Negation</span>\n\n<span class=\"c1\">--instance concept_has_inf (AtomicConcept AtomicRole : Type) :</span>\n<span class=\"c1\">-- has_inf (Concept AtomicConcept AtomicRole) := ⟨ Concept.Intersection ⟩</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span>      <span class=\"bp\">`⊓`</span> <span class=\"o\">:</span> <span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.Intersection</span>   <span class=\"c1\">-- ◾\\sqcap</span>\n<span class=\"kd\">instance</span> <span class=\"n\">concept_has_sup</span> <span class=\"o\">(</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"n\">has_sup</span> <span class=\"o\">(</span><span class=\"n\">Concept</span> <span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">Concept.Union</span> <span class=\"o\">⟩</span>\n<span class=\"c1\">--local infix      `⊔` : 55 := Concept.Union         -- \\sqcup</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`∃ₐ`</span> <span class=\"n\">R</span> <span class=\"bp\">`.ₐ`</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.Some</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"c1\">-- (it would be nice to use `∃ R. C`)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∀ₐ`</span> <span class=\"n\">R</span> <span class=\"bp\">`.ₐ`</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.Every</span> <span class=\"n\">R</span> <span class=\"n\">C</span> <span class=\"c1\">-- (it would be nice to use `∀ R. C`)</span>\n\n<span class=\"c1\">-- interpretation structure</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n      <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n      <span class=\"o\">(</span><span class=\"n\">atom_C</span>   <span class=\"o\">:</span> <span class=\"n\">AtomicConcept</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">atom_R</span>   <span class=\"o\">:</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- role interpretation</span>\n<span class=\"kd\">definition</span> <span class=\"n\">r_interp</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Role</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">I.δ</span> <span class=\"bp\">×</span> <span class=\"n\">I.δ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Role.Atomic</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">I.atom_R</span> <span class=\"n\">R</span>\n\n\n<span class=\"c1\">-- concept interpretation</span>\n<span class=\"kd\">definition</span> <span class=\"n\">interp</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">I.δ</span>\n <span class=\"bp\">|</span> <span class=\"bp\">⊤</span>            <span class=\"o\">:=</span> <span class=\"n\">univ</span>\n <span class=\"bp\">|</span> <span class=\"bp\">⊥</span>            <span class=\"o\">:=</span> <span class=\"bp\">∅</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Atomic</span> <span class=\"n\">C</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">I.atom_C</span> <span class=\"n\">C</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">¬ₐ</span> <span class=\"n\">C</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"n\">compl</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">C1</span> <span class=\"bp\">⊓</span> <span class=\"n\">C2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C1</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C2</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"n\">C1</span> <span class=\"n\">C2</span><span class=\"o\">):=</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C1</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C2</span><span class=\"o\">)</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Some</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">I.δ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I.δ</span><span class=\"o\">,</span>\n                     <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">r_interp</span> <span class=\"n\">I</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Every</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">I.δ</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I.δ</span><span class=\"o\">,</span>\n                     <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">r_interp</span> <span class=\"n\">I</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">interp</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>My problem is about the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--instance concept_has_inf (AtomicConcept AtomicRole : Type) :</span>\n<span class=\"c1\">-- has_inf (Concept AtomicConcept AtomicRole) := ⟨ Concept.Intersection ⟩</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span>      <span class=\"bp\">`⊓`</span> <span class=\"o\">:</span> <span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">Concept.Intersection</span>   <span class=\"c1\">-- ◾\\sqcap</span>\n</code></pre></div>\n<p>If I use the <code>local infix</code> there is no problem if I instead try to create a polymorphic instance for the operator <code>⊓</code>, Lean launches </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\"> failed to prove recursive application is decreasing, well founded relation</span>\n<span class=\"cm\">   @has_well_founded.r (Concept AtomicConcept AtomicRole)</span>\n<span class=\"cm\">     (@has_well_founded_of_has_sizeof (Concept AtomicConcept AtomicRole)</span>\n<span class=\"cm\">        (@Concept.has_sizeof_inst AtomicConcept AtomicRole (default_has_sizeof AtomicConcept)</span>\n<span class=\"cm\">           (default_has_sizeof AtomicRole)))</span>\n</code></pre></div>\n<p>There are a few suggestions concerning <strong>using_well_founded</strong> at the end of my proof, but I didn't understand what this means (am I not simply doing a pattern match?).</p>",
        "id": 227613973,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1614179921
    },
    {
        "content": "<p>You need <code>attribute [pattern] has_sup.sup has_inf.inf</code> I think, to allow the notation to be used in pattern matching</p>",
        "id": 227614894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614180248
    },
    {
        "content": "<p>You'll probably want to use <code>has_top</code> and <code>has_bot</code> instead of your notation too</p>",
        "id": 227615024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614180303
    },
    {
        "content": "<p>Perfect, exactly what I needed. Just out of curiosity now. This will apply the attribute for all polymorphic options of my operator, not only for my type Concept? Can I do this only for the Concept case?</p>",
        "id": 227616317,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1614180795
    },
    {
        "content": "<p>And thanks, I am also going to use now <code>has_top</code> and <code>has_bot</code>.</p>",
        "id": 227626705,
        "sender_full_name": "Joao Bregunci",
        "timestamp": 1614183883
    },
    {
        "content": "<p>You can use <code>local attribute [pattern] ...</code> to just enable the pattern within your file, otherwise yes it is global</p>",
        "id": 227635490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614186731
    },
    {
        "content": "<p>This attribute <code>[pattern]</code> is only mentioned in <a href=\"https://leanprover.github.io/reference/declarations.html#inductive-types\">https://leanprover.github.io/reference/declarations.html#inductive-types</a>. Where/How can we find more about the attributes defined and their uses?</p>",
        "id": 227667468,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1614198896
    },
    {
        "content": "<p>We have a page documenting some custom <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html\">attributes</a>, but it doesn't include many of the attributes defined in core Lean yet.</p>",
        "id": 227668195,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614199153
    }
]