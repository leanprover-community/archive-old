[
    {
        "content": "<p>I'm new to functional programming and I come from a C# background. I just wrote my first program in F# and I ended up putting the meat of my program in a class with a bunch of mutable members. I know I just mentioned F# but I am trying to learn lean, and functional programming along the way.  Anyway, my question is, if I am writing a program that operates on an object, like a graph, and all the operations on that graph return a new graph, should I keep a variable that points to the current graph in global scope?</p>",
        "id": 322905714,
        "sender_full_name": "James B Clifford",
        "timestamp": 1674420257
    },
    {
        "content": "<p>What do you mean by a \"global variable\" in Lean? Are you using Lean3 or Lean4?</p>",
        "id": 322906523,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674420846
    },
    {
        "content": "<p>lean4. In OOP global variables are discouraged. But they appear to be OK here. I'm just trying to verify , or ask If I'm missing something.</p>",
        "id": 322909849,
        "sender_full_name": "James B Clifford",
        "timestamp": 1674423405
    },
    {
        "content": "<p>You missed the first question, which was very important.</p>",
        "id": 322910147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674423624
    },
    {
        "content": "<p>You will have a lot to unlearn, but this is part of the fun of switching to another programming paradigm!</p>",
        "id": 322910179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674423651
    },
    {
        "content": "<p>Showing maybe a code snippet explaining \"In OOP global variables are discouraged. But they appear to be OK here\" will help.</p>",
        "id": 322910390,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1674423811
    },
    {
        "content": "<p>At least in a simplified form, the final answer is probably: global variables in your sense don't exist at all in Lean 4.</p>",
        "id": 322910529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674423898
    },
    {
        "content": "<p>With the follow up answer of \"<code>variables (x : Nat)</code> is not declaring a global variable, it's declaring function arguments\"</p>",
        "id": 322911429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674424598
    },
    {
        "content": "<p>so you mean to tell me that there is no concept of scope in lean4?</p>",
        "id": 322912600,
        "sender_full_name": "James B Clifford",
        "timestamp": 1674425479
    },
    {
        "content": "<p>There's no concept of <em>global</em> scope</p>",
        "id": 322912771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674425614
    },
    {
        "content": "<p>The closest you can reasonably get is the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=StateM#doc\">docs4#StateM</a> monad which lets you implicitly thread a piece of state through a call stack</p>",
        "id": 322912903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674425701
    },
    {
        "content": "<p>I think global mutable variable is more like <a href=\"https://github.com/leanprover/lean4/blob/a125a36bcc79a28963ed5786f94c5d97648a8f99/src/Init/System/IO.lean#L624\"><code>IO.Ref</code></a> and it is as bad as in other programming languages. You should think twice before using it.</p>",
        "id": 322941725,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1674451102
    }
]