[
    {
        "content": "<p>how do i write a function that takes in a tuple, but destructured? something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">a</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"err\">\\</span><span class=\"n\">b</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"err\">\\</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 209394495,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1599575568
    },
    {
        "content": "<p>Use <code>\\&lt; \\&gt;</code></p>",
        "id": 209395134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599575830
    },
    {
        "content": "<p>But lean needs to know the expected type. You are giving it very little info atm</p>",
        "id": 209395178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599575847
    },
    {
        "content": "<p>sorry, i don't understand how to use <code>\\&lt;</code> and <code>\\&gt;</code>. could you give an example?</p>",
        "id": 209395708,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1599576041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">\\</span><span class=\"bp\">&lt;</span> <span class=\"err\">\\</span><span class=\"n\">a</span> <span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 209396056,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1599576190
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p><code>(a, b)</code> isn't supported as the argument of a lambda. Therefore you also have to tell Lean the expected type of the function.</p>",
        "id": 209396077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599576201
    },
    {
        "content": "<p>oh i get it now instead of <code>(</code> and <code>)</code> use <code>\\&lt;</code> and <code>\\&gt;</code>. also how did you type in the nice looking alpha and beta?</p>",
        "id": 209396845,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1599576499
    },
    {
        "content": "<p>I copied and pasted them from a Lean file</p>",
        "id": 209396913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599576534
    },
    {
        "content": "<p>zulip doesn't have markup for greek letters?</p>",
        "id": 209397064,
        "sender_full_name": "Kevin Tran",
        "timestamp": 1599576602
    }
]