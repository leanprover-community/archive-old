[
    {
        "content": "<p>Given terms <code>x y : X</code>, I would like to define the set <code>{x, y}</code> as a finset. Here is a mwe for a way that doesn't work and a way that  works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">finset.cons</span> <span class=\"n\">x</span> <span class=\"o\">({</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset.not_mem_singleton.mpr</span> <span class=\"n\">hxy</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm pretty sure the first method worked in a previous version of mathlib, and it had the advantage of not requiring <code>x</code> and <code>y</code> to be distinct (I assume it just made the set a singleton if they were equal). Is there a way to do something equivalent to the first method in current mathlib?</p>",
        "id": 274993784,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1647014419
    },
    {
        "content": "<p>You're missing a <code>[decidable_eq X]</code> assumption in the first case.</p>",
        "id": 274994245,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647014518
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20a.20finset.20with.20two.20elements.20.7Bx.2Cy.7D/near/274994245\">said</a>:</p>\n<blockquote>\n<p>You're missing a <code>[decidable_eq X]</code> assumption in the first case.</p>\n</blockquote>\n<p>Thank you!</p>",
        "id": 274998582,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1647016585
    }
]