[
    {
        "content": "<p>How to move from <code>a = b</code> goal to <code>f a = f b</code>?</p>",
        "id": 226866493,
        "sender_full_name": "kana",
        "timestamp": 1613676617
    },
    {
        "content": "<p>Do you know that <code>f</code> is injective?</p>",
        "id": 226867512,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613677022
    },
    {
        "content": "<p>Oh, my bad, I understood why it is not correct in the general case. Thanks</p>",
        "id": 226868315,
        "sender_full_name": "kana",
        "timestamp": 1613677369
    },
    {
        "content": "<p><code>apply (_ : function.injective f)</code> would probably do it.</p>",
        "id": 226872148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613678916
    },
    {
        "content": "<p>Is there a more idiomatic way to do these? Maybe involving some flavor of <code>congr_</code>...?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">A</span><span class=\"bp\">=</span><span class=\"n\">B</span><span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_in</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span>  <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,}</span>\n</code></pre></div>",
        "id": 292080395,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1659653669
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_in</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 292080729,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659653935
    },
    {
        "content": "<p>I guess in mathlib the idiomatic thing to do is to move as much as you can left of the colon so you don't have to do the lambdas (i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>). Here's another proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq'</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 292080740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659653941
    },
    {
        "content": "<p>or if you want to go full term-mode</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_in</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">hA</span>\n</code></pre></div>",
        "id": 292080900,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659654022
    },
    {
        "content": "<p>But yeah, as Kevin said, it's usually best practice to put as many hypotheses as you can to the left of the <code>:</code></p>",
        "id": 292080971,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659654067
    },
    {
        "content": "<p>This also works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq.subst</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eq_in</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq.subst</span>\n</code></pre></div>",
        "id": 292081044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659654108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/congr/near/292080740\">said</a>:</p>\n<blockquote>\n<p>I guess in mathlib the idiomatic thing to do is to move as much as you can left of the colon so you don't have to do the lambdas (i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">in_eq</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>). </p>\n</blockquote>\n<p>Interesting; I've noticed that not everything can be moved to left of colon, e.g. when you need a strong induction hypothesis for <code>rec_on</code></p>",
        "id": 292081603,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1659654521
    },
    {
        "content": "<p>Yeah sometimes induction makes things complicated. It's usually possible to write <code>induction ... generalizing ...</code> for appropriate values of <code>...</code> that <em>should</em> accomplish the same thing.</p>",
        "id": 292081834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659654707
    },
    {
        "content": "<p>of if you want to use term-mode, you can <code>match</code> on a hypothesis instead of using the equation compiler</p>",
        "id": 292081894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659654738
    }
]