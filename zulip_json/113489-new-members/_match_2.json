[
    {
        "content": "<p>As an exercise I'm trying to define an over (slice) category, and I'm not sure what to do at the goal <code>over._match_2 C c X X</code> (at the first <code>sorry</code>). Is there a way I can expand this into an actual type? Or have I gone wrong somewhere earlier?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">over</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">):</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">⟶</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⟶</span> <span class=\"n\">y</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">},</span>\n    <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- over._match_2 C c X X</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 186420270,
        "sender_full_name": "Thomas Read",
        "timestamp": 1579804749
    },
    {
        "content": "<p>That is referring to the <code> λ ⟨x, f⟩</code> function from the previous line</p>",
        "id": 186426669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579808236
    },
    {
        "content": "<p>you have to pattern match <code>X</code> before it will unfold</p>",
        "id": 186426722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579808277
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 186429391,
        "sender_full_name": "Thomas Read",
        "timestamp": 1579809763
    },
    {
        "content": "<p>If you use field accessors rather than pattern-matching in the definition of <code>hom</code>, it will make things easier later.</p>",
        "id": 186429877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579810067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Probably this should be added to the coding style guide. This is not obvious (at least for a mathematician).</p>",
        "id": 186430078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579810186
    },
    {
        "content": "<p>e.g. <code>λ xf yg, {h : xf.1 ⟶ yg.1 // xf.2 ≫ h = yg.2}</code></p>",
        "id": 186430148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579810204
    }
]