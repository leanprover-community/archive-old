[
    {
        "content": "<p>Newly in Lean 4 (I think?) automatically-named values because unaddressable. (E.g. x<span aria-label=\"cross\" class=\"emoji emoji-271d\" role=\"img\" title=\"cross\">:cross:</span> in tactic mode.) How does one give them names, for example when using the induction tactic?</p>",
        "id": 310523104,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668642867
    },
    {
        "content": "<p>(<code>have : type := by assumption</code> will find things by type, but it doesn't make sense when the type is <code>Nat</code>.)</p>",
        "id": 310523163,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668642912
    },
    {
        "content": "<p>For induction it is the <code>with</code> keyword: <code>induction n with k hk,</code></p>",
        "id": 310523397,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668643048
    },
    {
        "content": "<p>I tried <code>induction ... with</code>, but Lean 4 says <code>unknown tactic</code>.</p>",
        "id": 310523511,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668643101
    },
    {
        "content": "<p>Ah, perhaps:<br>\n<code>induction n with\n| zero =&gt; ...\n| succ n ih =&gt;</code></p>",
        "id": 310523892,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668643293
    },
    {
        "content": "<p>Hmm, <code>split</code> creates many unaddressable names too.</p>",
        "id": 310524278,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668643494
    },
    {
        "content": "<p>oh sorry I was thinking Lean 3</p>",
        "id": 310524283,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668643500
    },
    {
        "content": "<p>in Lean 4 you can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 310524305,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668643515
    },
    {
        "content": "<p><code>induction'</code> gives <code>unknown tactic</code> for me. Is that part of math lib?</p>",
        "id": 310524418,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668643583
    },
    {
        "content": "<p>yes</p>",
        "id": 310524445,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668643603
    },
    {
        "content": "<p>ah the version you wrote seems to be prefered: <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Cases.html\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Tactic/Cases.html</a></p>",
        "id": 310524840,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1668643834
    },
    {
        "content": "<p>Ah, thank you. Similar tricks don't seem to work with the unaddressable names coming from a <code>split</code>, however.</p>",
        "id": 310525034,
        "sender_full_name": "Adam Langley",
        "timestamp": 1668643974
    },
    {
        "content": "<p>for <code>split</code>, you can either use <code>rename_i a b c</code> or <code>next a b c =&gt;</code> to name the variables produced by the <code>split</code></p>",
        "id": 310533000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668649933
    }
]