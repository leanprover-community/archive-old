[
    {
        "content": "<p>Suppose I know that some property holds when <code>X</code> is <code>fintype</code> and when <code>X</code> is infinite. How do I prove that it holds for all <code>X</code>? I am fine with using classical logic/choice if need be. MWE</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">finite_foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">X</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">infinite_foo</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205397351,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596048277
    },
    {
        "content": "<p>What's the definition of infinite? I don't have access to lean right now</p>",
        "id": 205397454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048335
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">infinite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">not_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205397577,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596048387
    },
    {
        "content": "<p>There's also <code>set.infinite</code> for saying a subset of a type <code>X</code> is infinite</p>",
        "id": 205397621,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596048424
    },
    {
        "content": "<p>If I should be using that instead, that's fine too</p>",
        "id": 205397637,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596048439
    },
    {
        "content": "<p>The infinite class you quoted above just says not a fintype so it should be easy to do with that class</p>",
        "id": 205397694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048470
    },
    {
        "content": "<p>You can just do cases on nonempty (fintype X) right?</p>",
        "id": 205397817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048533
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 205397877,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1596048564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cases.20on.20finite.20vs.2E.20infinite/near/205397817\">said</a>:</p>\n<blockquote>\n<p>You can just do cases on nonempty (fintype X) right?</p>\n</blockquote>\n<p>Yeah, I guess that sounds right. I was trying to do cases on <code>infinite</code> and for some reason was getting stuck proving that something that's not infinite is <code>fintype</code></p>",
        "id": 205398003,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596048609
    },
    {
        "content": "<p>You might want to look at where nonempty is defined because there will be a useful lemma in the API saying that if you're not nonempty then there's a map to false</p>",
        "id": 205398112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596048673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/cases.20on.20finite.20vs.2E.20infinite/near/205398112\">said</a>:</p>\n<blockquote>\n<p>You might want to look at where nonempty is defined because there will be a useful lemma in the API saying that if you're not nonempty then there's a map to false</p>\n</blockquote>\n<p>hmm, it looks like <code>nonempty</code> is in <code>core/init/logic.lean</code> but I don't see anything about having a map to false.</p>",
        "id": 205398565,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596048911
    },
    {
        "content": "<p>I want something which says not nonempty X -&gt; (X -&gt; false)</p>",
        "id": 205398826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596049032
    },
    {
        "content": "<p>okay, wait, I found it with <code>library_search</code></p>",
        "id": 205398898,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596049071
    },
    {
        "content": "<p>Assume h : not nonempty X, intro x, apply h, use x</p>",
        "id": 205398914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596049079
    },
    {
        "content": "<p>So that should be all you need</p>",
        "id": 205398983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596049094
    },
    {
        "content": "<p><code>not_nonempty_iff_imp_false</code></p>",
        "id": 205399119,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596049158
    },
    {
        "content": "<p>Okay, now I have the proof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">finite_foo</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">infinite_foo</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">not_nonempty_fintype</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>which seems simple enough to satisfy me. Thanks for the help <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>!</p>",
        "id": 205399411,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596049277
    },
    {
        "content": "<p>I think the main thing I didn't think of was doing cases on <code>nonempty (fintype X)</code> though in retrospect it makes sense I guess</p>",
        "id": 205399472,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596049305
    }
]