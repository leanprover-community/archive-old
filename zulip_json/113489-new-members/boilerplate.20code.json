[
    {
        "content": "<p>As I go through Kevin Buzzard's (amazing!) <code>formalising-mathematics-2022</code> repo, I notice that there are a lot of boilerplate proofs that I keep repeating. For an egregious example, my proofs that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> is an abelian group is almost exactly the same as my proof that it is a commutative ring. I just copy-pasted basically the same block of code. It seems like there should be a better way of doing this. Is there?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">myint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on₃</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">myint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on₃</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on₃</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on₃</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">c'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">quotient.induction_on₂</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span><span class=\"o\">,</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">myint.add_comm_group</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277951402,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1649197376
    },
    {
        "content": "<p>you should take a look at the proof that the complexes are a ring</p>",
        "id": 277952022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649197754
    },
    {
        "content": "<p>it has a very similar structure: apply <code>ext</code> , <code>simp</code>, <code>ring</code> and repeat 16 times or so</p>",
        "id": 277952053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649197774
    },
    {
        "content": "<p>this kind of proof compresses very well using tactic combinators like <code>;</code> which say \"run this tactic on all subgoals\"</p>",
        "id": 277952178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649197840
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.comm_ring/src\">src#complex.comm_ring</a></p>",
        "id": 277952202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649197852
    },
    {
        "content": "<p>How do I compress these proofs though? I have to apply <code>quotient.induction_on_{x}</code> for varying values of x.</p>",
        "id": 277956471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649200287
    },
    {
        "content": "<p><code>repeat { intro x, apply quotient.induction_on x }</code>?</p>",
        "id": 277972468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649216911
    },
    {
        "content": "<p>I think this might produce different goals?</p>",
        "id": 278054765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649264469
    }
]