[
    {
        "content": "<p>Can anyone give me a pointer on how prove this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 150722245,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543755048
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 150722253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543755105
    },
    {
        "content": "<p>The state after <code>cases</code> is a bit weird. You can also directly provide the proof term <code>(prod.mk.inj h).left</code></p>",
        "id": 150722349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543755277
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 150722350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543755285
    },
    {
        "content": "<p>Thanks so much!!</p>",
        "id": 150722351,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543755296
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 150722360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543755355
    },
    {
        "content": "<p>So that's a tactic mode proof, a term mode proof, and a proof using the equation compiler.</p>",
        "id": 150722399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543755370
    },
    {
        "content": "<p>Haha, that's great :D - I'm not quite sure how the equation compiler does it tho ;p</p>",
        "id": 150722448,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543755509
    },
    {
        "content": "<p><code>(a, b)</code> has type <code>prod \\alpha \\beta</code>, an inductive type, so you need tools to deal with terms of this type. When the inductive type <code>prod</code> is defined, Lean creates with it its recursor <code>prod.rec</code>, which is the universal way to define a map from <code>prod \\alpha \\beta</code> to anywhere. Lean then creates a bunch of other useful functions automatically, you can see what they are by typing <code>#print prefix prod</code>. There's usually something called <code>X.mk.inj</code> in there for an inductive type <code>X</code>, so that's what I was looking for. That's how I found the term proof. For the tactic mode proof, <code>cases</code> is a great tactic for any inductive type, it takes the type to pieces. </p>\n<p>For the equation compiler proof, we make Lean do the work. I had to move things to the other side of the colon. The point is that I can tell Lean that without loss of generality <code>h</code> <em>must</em> be <code>rfl</code>. I still don't really understand how the equation compiler actually works, but I have sort-of got the hang of how to use it in practice. Your question is a great basic example of how to use its power.</p>",
        "id": 150722505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543755652
    },
    {
        "content": "<p>it uses <code>prod.no_confusion</code> under the hood, which is basically the same as <code>prod.inj</code></p>",
        "id": 150722564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543755747
    },
    {
        "content": "<p>You folks are amazing. Thank you.</p>",
        "id": 150722580,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543755835
    },
    {
        "content": "<p>Just to be clear -- moving stuff to before or after the colon doesn't change the proposition, it's just a trick for controlling whether or not you have to give the inputs yourself in the \"first line\" of your proof.</p>",
        "id": 150722619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543755845
    }
]