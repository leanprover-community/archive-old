[
    {
        "content": "<p>With propext, funext, and proof-irrelevance, it should be possible to define the quotient of an equivalence relation to be its set of equivalence classes.  Why does Lean take quotients to be primitive instead?</p>",
        "id": 312539163,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1669601448
    },
    {
        "content": "<p>because this gives a definitional equality for <code>lift f (mk a) = f a</code></p>",
        "id": 312546529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669603527
    },
    {
        "content": "<p>also, funext isn't an axiom, it is proved... using quotients</p>",
        "id": 312546580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669603566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20quotients/near/312546580\">said</a>:</p>\n<blockquote>\n<p>also, funext isn't an axiom, it is proved... using quotients</p>\n</blockquote>\n<p>But since quotients are an axiom, that doesn't seem like a reason to do it one way or the other.  This way, quotients are an axiom and you prove funext, but the other way, funext would be an axiom and you prove quotients.  I don't see why one axiom is better than the other.</p>",
        "id": 312548716,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1669605612
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20quotients/near/312546529\">said</a>:</p>\n<blockquote>\n<p>because this gives a definitional equality for <code>lift f (mk a) = f a</code></p>\n</blockquote>\n<p>This is a surprising reason to hear, given that Lean generally seems to deprecate definitional equality.  Are there places where the definitional nature of this equality is really used importantly?</p>",
        "id": 312548757,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1669605655
    },
    {
        "content": "<blockquote>\n<p>Are there places where the definitional nature of this equality is really used importantly?</p>\n</blockquote>\n<p>For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset\">docs#multiset</a> is a quotient of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list\">docs#list</a>, and with the computation rule <code>lift f (mk x) = f x</code>, <code>h : multiset.mem a {1,2,3}</code> reduces to <code>h : a = 1 ∨ a = 2 ∨ a = 3 ∨ false</code>, so you can do <code>rcases h with (rfl|rfl|rfl|⟨⟨⟩⟩)</code> which can be quite convenient.</p>",
        "id": 312554467,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669610608
    },
    {
        "content": "<p>There are limits to de-emphasizing definitional equality. For example, we for sure want <code>fst (x, y)</code> to be definitionally equal to <code>x</code>.</p>",
        "id": 312554900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669611043
    },
    {
        "content": "<p>It's more for things like <code>real</code> and <code>polynomial</code> (where there is no unique obvious representation anyways) that we don't care so much about definitional equalities. And a lot of mathlib is about things like <code>real</code> and <code>polynomial</code>.<br>\n<code>quot</code>, like <code>prod</code>, is a quite basic thing where it's obvious what definitional equalities you would like; so we might as well have them.</p>",
        "id": 312555289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669611415
    }
]