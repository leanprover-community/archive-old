[
    {
        "content": "<p>Hi, all! I have a been on a quest to (re)prove Lagrange's Theorem in order to get to know Lean better and ran into the following lemma, which I cannot prove :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.setoid.partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv_cl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">equiv_R</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setoid_R</span><span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">equiv_R</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv_cl_set</span> <span class=\"o\">:=</span> <span class=\"n\">setoid.classes</span> <span class=\"o\">(</span><span class=\"n\">setoid_R</span> <span class=\"n\">R</span> <span class=\"n\">equiv_R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_Union_eq_sum_card_equiv_cl</span><span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span>  <span class=\"n\">equiv_cl_set</span> <span class=\"n\">R</span> <span class=\"n\">equiv_R</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">equiv_cl_set</span> <span class=\"n\">R</span> <span class=\"n\">equiv_R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Ideally, I would like apply <code>finset.card.bUnion</code> but I cannot seem to make the types match at any rate. I'm welcome to all suggestions <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 232458606,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1617122991
    },
    {
        "content": "<p>The trouble is  coming from the fact your <code>equiv_cl_set</code> is a set of sets, not a finset of finset, so lemmas about finsets do not apply.</p>",
        "id": 232461300,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617123888
    },
    {
        "content": "<p>I don't think people use <code>setoid.classes</code> too much in mathlib, as we have quotient types explicitly working with equivalence relations as sets of sets isn't done as much I guess.</p>",
        "id": 232461652,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617123997
    },
    {
        "content": "<p>You could maybe set it up like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.setoid.partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span><span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv_cl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">univ.filter</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">equiv_cl_set</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">univ.image</span> <span class=\"o\">(</span><span class=\"n\">equiv_cl</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 232461678,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617124009
    },
    {
        "content": "<p>There are so many ways to do finiteness in Lean. I'd be tempted to stick to a non-constructive one but we're only now in the process of adding all the lemmas to mathlib :-)</p>",
        "id": 232473155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617128583
    },
    {
        "content": "<p>Thanks,  Alex for your response. Managed to get it all working <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 232495747,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1617137410
    },
    {
        "content": "<p>Great, I'd recommend trying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient\">docs#quotient</a> too to see if it makes your life easier or not. Kevin wrote a nice thing about the difference between using  explicit equivalence classes and using <code>quotient</code> at <a href=\"https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/\">https://xenaproject.wordpress.com/2021/03/04/formalising-mathematics-workshop-7-quotients/</a></p>",
        "id": 232513913,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1617147260
    }
]