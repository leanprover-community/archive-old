[
    {
        "content": "<p>I've not yet been able to see the pattern that predicts whether Lean will accept <code>rfl</code> as a proof. I would like to understand which reductions Lean does and doesn't do before concluding that two sides of an equation are the same. </p>\n<p>What exactly is the rule that Lean applies to check whether <code>rfl</code> is a correct proof? Basically, <code>rfl</code> is a proof of <code>a=a</code>, and I think that Lean accepts <code>rfl</code> as a proof for a given equality, if those objects are \"definitionally the same\", but I'm not exactly sure what that means concretely.</p>",
        "id": 205726299,
        "sender_full_name": "Chris M",
        "timestamp": 1596372537
    },
    {
        "content": "<p>e.g., in the following example, Lean accepts <code>rfl</code> as a proof for the case that <code>n=0</code>, which would require a substitution to be correct. However, for the case that <code>n=4</code> for example, we could in principle also deduce that the two sides are the same, simply by first reducing the terms on both sides of the equation, but Lean doesn't do this type of reduction.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">xplusm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">xplusm</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>i.e. in the first example, <code>rfl</code> is accepted but in the second it isn't. (I'm not saying it should be accepted in the second. If the line isn't drawn somewhere, this would basically amount to quite general automated prover. I'm just stating that I don't know where the line is.)</p>",
        "id": 205727045,
        "sender_full_name": "Chris M",
        "timestamp": 1596373905
    },
    {
        "content": "<p>See section 2 of <a href=\"https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf\">https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf</a></p>",
        "id": 205727832,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596375341
    },
    {
        "content": "<p>Or section 3.7 of the Lean reference manual <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">https://leanprover.github.io/reference/expressions.html#computation</a></p>",
        "id": 205729990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596379195
    },
    {
        "content": "<p><code>add n (succ m)</code> is defeq to <code>succ (add n m)</code>, but to prove it's equal to <code>add (succ n) m</code> you need to prove it by induction, i.e. you need to apply the recursor, so it's not definitional.</p>",
        "id": 205730062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596379308
    },
    {
        "content": "<p>You're right that when you start putting numbers in,  more things become definitionally equal. For example <code>0 + n = n</code> needs to be proved by induction, but for any fixed numeral <code>n</code> e.g. <code>n=4</code>, it's definitional.</p>",
        "id": 205730135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596379415
    }
]