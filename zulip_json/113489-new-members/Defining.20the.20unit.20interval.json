[
    {
        "content": "<p>How to elegantly define the unit interval? I have kind of defined it using <code>set</code>, however, I find the result rather unwieldy.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">ge_zero</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">le_one</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">ge_zero</span> <span class=\"err\">∩</span> <span class=\"n\">le_one</span>\n</code></pre></div>",
        "id": 200004066,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591498170
    },
    {
        "content": "<p>There should be a way of easily defining it with quotients I think.</p>",
        "id": 200004092,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591498202
    },
    {
        "content": "<p>The more idiomatic way to write your definition is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>What's wrong with it?</p>",
        "id": 200004120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591498278
    },
    {
        "content": "<p>I don't see any reason for quotients to get involved, the unit interval is a subtype of the reals</p>",
        "id": 200004133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591498308
    },
    {
        "content": "<p>(This already exists BTW, it's called <code>Icc 0 1</code>)</p>",
        "id": 200004174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591498335
    },
    {
        "content": "<p>I'd like use relation <code>a ~ b</code> on  <code>ℝ</code> defined as <code>b - a ∈  ℤ</code> to be my unit interval.</p>",
        "id": 200004546,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591499059
    },
    {
        "content": "<p>As I understand, if I define <code>I</code> as a quotient on <code>ℝ</code>, instead of a <code>set ℝ</code>, I can have <code>0 : I</code>, or am I mistaken?</p>",
        "id": 200004616,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591499176
    },
    {
        "content": "<p>I don't know if this topic came from mine (the message I deleted earlier), but I am having a similar problem in <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/About.20measures\">#new members &gt; About measures</a></p>",
        "id": 200005224,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591500376
    },
    {
        "content": "<p>The thing I found neat about quotients is that I can define a function on the reals and lift it to the interval without having to redefine things like addition and multiplication (but maybe it is not so hard to do this in the subtype definition?)</p>",
        "id": 200005285,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591500489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20the.20unit.20interval/near/200004616\">said</a>:</p>\n<blockquote>\n<p>As I understand, if I define <code>I</code> as a quotient on <code>ℝ</code>, instead of a <code>set ℝ</code>, I can have <code>0 : I</code>, or am I mistaken?</p>\n</blockquote>\n<p>I think you could define it as a subtype (instead of a set), so you could have <code>(a : I)</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)}</span>\n</code></pre></div>\n\n\n<p>but to have <code>0:I</code> you would need <code>I.has_zero</code></p>",
        "id": 200005697,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591501351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"298376\">Pedro Minicz</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20the.20unit.20interval/near/200004546\">said</a>:</p>\n<blockquote>\n<p>I'd like use relation <code>a ~ b</code> on  <code>ℝ</code> defined as <code>b - a ∈  ℤ</code> to be my unit interval.</p>\n</blockquote>\n<p>That's not the unit interval, that's S^1</p>",
        "id": 200005857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591501714
    },
    {
        "content": "<p>it is naturally bijective with <code>[0, 1)</code> but not <code>[0, 1]</code></p>",
        "id": 200005866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591501758
    },
    {
        "content": "<p>To flesh out Lucas's suggestion:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_le_one</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_le_one</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200005930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591501904
    },
    {
        "content": "<p>I ended up settling for the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">R_equiv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">equivalence</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">transitive</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"n\">reflexive</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sub_self</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">symmetric</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨-</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"n\">transitive</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">hk₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">hk₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">R</span> <span class=\"n\">R_equiv</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I'd like to see an expression <code>0.5 : I</code>, but I couldn't manufacture it.</p>",
        "id": 200005973,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591501984
    },
    {
        "content": "<p>You can't divide by 2 in R/Z though</p>",
        "id": 200005976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502003
    },
    {
        "content": "<p>however you can use <code>[[1/2]]</code></p>",
        "id": 200005980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20the.20unit.20interval/near/200005866\">said</a>:</p>\n<blockquote>\n<p>it is naturally bijective with <code>[0, 1)</code> but not <code>[0, 1]</code></p>\n</blockquote>\n<p>Yes, I realize this difference.</p>",
        "id": 200006021,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591502059
    },
    {
        "content": "<p>You can also leverage the general theory of quotient groups here to define R/Z and get all the additive group structure</p>",
        "id": 200006025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20the.20unit.20interval/near/200005930\">said</a>:</p>\n<blockquote>\n<p>To flesh out Lucas's suggestion:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Icc</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_le_one</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_le_one</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Wow, those instances make a big difference! It suddenly looks so much nicer.</p>",
        "id": 200006036,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591502129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Defining.20the.20unit.20interval/near/200006025\">said</a>:</p>\n<blockquote>\n<p>You can also leverage the general theory of quotient groups here to define R/Z and get all the additive group structure</p>\n</blockquote>\n<p>Can I use something defined mathlib for that? I am not that familiar with it already. Or does the quotient I defined above suffice?</p>",
        "id": 200006224,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591502451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">coe_int_is_add_group_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_ring_hom</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">add_group</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 200006302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502625
    },
    {
        "content": "<p>The first instance should arguably be in mathlib, but I think it's in a precarious position because <code>is_add_group_hom</code> is deprecated</p>",
        "id": 200006350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591502694
    },
    {
        "content": "<p>In this context, we should have <code>(0 : I) = 1</code>, right?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">quotient_group</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_add_submonoid</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_add_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">⟨</span><span class=\"n\">ka</span><span class=\"o\">,</span> <span class=\"n\">hka</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">kb</span><span class=\"o\">,</span> <span class=\"n\">hkb</span><span class=\"bp\">⟩;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">ka</span> <span class=\"bp\">+</span> <span class=\"n\">kb</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"bp\">⟩;</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨-</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">push_cast</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">add_group</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">I</span>  <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200008304,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591506460
    },
    {
        "content": "<p>Indeed. <code>  change _ ∈ _,</code> should make it clearer</p>",
        "id": 200008361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591506518
    },
    {
        "content": "<p>Wow, you are a wizard, hahaha. Thank you very much!</p>",
        "id": 200008371,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591506552
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 200008373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591506558
    },
    {
        "content": "<p>I keep getting suck on steps like these, I can \"see through\" the definitions, but find myself unable to show it to Lean.</p>",
        "id": 200008431,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591506625
    },
    {
        "content": "<p>In theory these should be simp lemmas, but in a hastily written development they may not be and then you have to use <code>change</code> tricks to force your way through the layers of definition</p>",
        "id": 200008445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591506682
    },
    {
        "content": "<p>in the proof I gave above, <code>⟨1, ...</code> forces it even past <code>_ \\in set.range _</code> to <code>\\exists n : int, ...</code> and provides the witness <code>1</code>, after which the body of the exists is a simple theorem <code>\\u 1 = -0 + 1</code> which simp can handle</p>",
        "id": 200008536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591506845
    },
    {
        "content": "<p>From this construction, how can I instantiate <code>setoid \\R</code>?</p>",
        "id": 200026026,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591539398
    },
    {
        "content": "<p>Found it: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_add_group</span><span class=\"bp\">.</span><span class=\"n\">left_rel</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 200026181,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591539693
    },
    {
        "content": "<p>that shouldn't be an instance, because it will be the one and only <code>setoid real</code> instance if so, and this particular instance has no claim to canonicality</p>",
        "id": 200026474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591540249
    },
    {
        "content": "<p>it can be a local instance but usually we just use a <code>def</code></p>",
        "id": 200026485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591540267
    },
    {
        "content": "<p>arguably <code>setoid</code> shouldn't even be a class because this lack of uniqueness comes up so often</p>",
        "id": 200026494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591540291
    },
    {
        "content": "<p>I just want to use the <code>⟦x⟧</code> notation, should I do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⟦</span><span class=\"bp\">`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"err\">⟧</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>Instead?</p>",
        "id": 200026879,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591540868
    },
    {
        "content": "<p>This looks simpler indeed (the other way would return more complicated expressions)</p>",
        "id": 200027071,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1591540941
    }
]