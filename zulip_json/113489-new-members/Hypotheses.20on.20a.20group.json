[
    {
        "content": "<p>What is the canonical way to say \"Let G be a finite, cyclic group of order q with generator g\"? Right now I have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>but I'm not sure how to get a hold of variables <code>q</code> or <code>g</code>for the rest of the file and not have to unpack the definition of <code>G</code> in every proof.</p>",
        "id": 244592045,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625156353
    },
    {
        "content": "<p>That's good, now do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_cyclic.exists_generator</span>\n</code></pre></div>\n<p>or something akin to it</p>",
        "id": 244593022,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625156838
    },
    {
        "content": "<p>you could just add <code>variables (q : nat) (hGq : fintype.card G = q)</code></p>",
        "id": 244594934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625157780
    },
    {
        "content": "<p>Or even something silly like <code>local notation `q` := fintype.card</code></p>",
        "id": 244595122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625157883
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_eq_card_gpowers\">docs#order_eq_card_gpowers</a></p>",
        "id": 244595264,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625157960
    },
    {
        "content": "<p>Seemingly missing an <code>[is_cyclic G] subgroup.gpowers g = \\top</code> lemma.</p>",
        "id": 244595402,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625158032
    },
    {
        "content": "<p>There is the inverse, in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_cyclic_of_order_of_eq_card\">docs#is_cyclic_of_order_of_eq_card</a></p>",
        "id": 244595515,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625158093
    },
    {
        "content": "<p>Okay, thank you for the help. Right now I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hGg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">subgroup.gpowers</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hGq</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess my question now is the <code>[is_cyclic G]</code> seems redundant given that I manually defined the equivalent <code>hGg</code>, i.e. I'm not really taking advantage of the typeclass system by doing this. I am not exactly sure how to use  the <code>is_cyclic.exists_generator G</code> proposition to get a hold of the particular <code>g</code> since the <code>obtain</code> tactic isn't working in this scope.</p>",
        "id": 244596727,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625158701
    },
    {
        "content": "<p>If a typeclass argument is implied by a hypothesis, you should remove the typeclass argument only if it isn't used in the statement of the lemma</p>",
        "id": 244596899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625158778
    },
    {
        "content": "<p>Yea, I guess my point was it seems (to me) like it would be better practice (or cleaner at least) to use the typeclass and then get the <code>g</code> from the <code>is_cyclic</code> rather than just manually writing the definition.</p>",
        "id": 244597178,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625158874
    },
    {
        "content": "<p>It seems like you want <code>g</code> to be fixed, though?</p>",
        "id": 244597227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625158897
    },
    {
        "content": "<p><code>is_cyclic</code> says only that there exists a generator, so there is no <code>g</code> to refer to</p>",
        "id": 244597335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625158932
    },
    {
        "content": "<p>If <code>g</code> doesn't appear in the statement of the lemma though, then you should just use <code>obtain ⟨g, hg⟩ := is_cyclic.exists_generator G</code> at the start of the proof</p>",
        "id": 244597439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625158992
    },
    {
        "content": "<p>it might help to give a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 244597538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159036
    },
    {
        "content": "<p>Interesting, wouldn't the \"there exists\" imply we should be able to say okay, call the thing that exists \"g\"?</p>",
        "id": 244597982,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625159204
    },
    {
        "content": "<p>That's precisely what <code>obtain</code> does.</p>",
        "id": 244598093,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625159260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"415873\">Joey Lupo</span> <a href=\"#narrow/stream/113489-new-members/topic/Hypotheses.20on.20a.20group/near/244597982\">said</a>:</p>\n<blockquote>\n<p>Interesting, wouldn't the \"there exists\" imply we should be able to say okay, call the thing that exists \"g\"?</p>\n</blockquote>\n<p>Yes, but you can't refer to <code>g</code> outside the scope of that part of the proof, so in particular it can't appear in the theorem statement</p>",
        "id": 244598296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159343
    },
    {
        "content": "<p>btw, I don't have a MWE yet so sorry about that. I am basically trying to write these hypotheses at the beginning of the file so as to say, \"for the rest of this file, let G be a finite, cyclic group with order q and generator g\"</p>",
        "id": 244598525,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625159440
    },
    {
        "content": "<p>That's just what you wrote, except you don't need <code>[is_cyclic G]</code></p>",
        "id": 244598575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159468
    },
    {
        "content": "<p>you don't need <code>(q_pos : 0 &lt; q)</code>, that's implied by the fact that <code>q</code> is the cardinality of a group</p>",
        "id": 244598693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159523
    },
    {
        "content": "<p>But if the theorems you want to state don't use <code>q</code> and/or <code>g</code> in them, it will be more convenient for users of your theorem to have the <code>[is_cyclic G]</code> assumption instead of q and g</p>",
        "id": 244598914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159632
    },
    {
        "content": "<p>but they are equivalent, since users can always use <code>obtain ⟨g, hg⟩ := is_cyclic.exists_generator G</code> before applying your lemma</p>",
        "id": 244599001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159668
    },
    {
        "content": "<p>Okay, then I think I have something that works for my purpose. But to push the point a little further-  how come I was able to use <code>fintype</code> in the hypothesis of <code>q,</code> but can't use <code>is_cyclic</code>  in the hypothesis of <code>g</code>? Does that just come down to the typeclass code not including that functionality? <br>\nAlso, Yakor, I wasn't able to get this basic line to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_cyclic.exists_generator</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 244599023,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625159674
    },
    {
        "content": "<p>Yea I guess the <code>obtain</code> should be in the context of a proof</p>",
        "id": 244599089,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625159700
    },
    {
        "content": "<p><code>obtain</code> is a tactic, it is supposed to go in a proof</p>",
        "id": 244599107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159705
    },
    {
        "content": "<p>the things that appear at the top level are things like <code>theorem</code>, <code>lemma</code>, <code>def</code>, <code>variable</code> (aka \"commands\")</p>",
        "id": 244599166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159736
    },
    {
        "content": "<blockquote>\n<p>how come I was able to use fintype in the hypothesis of q, but can't use is_cyclic in the hypothesis of g? Does that just come down to the typeclass code not including that functionality? </p>\n</blockquote>\n<p>I don't understand what you mean by this. For <code>fintype.card G</code> to be well formed, <code>fintype G</code> has to be a previous typeclass argument</p>",
        "id": 244599419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159852
    },
    {
        "content": "<p>Nothing in your variables similarly needs <code>is_cyclic G</code> for well formedness, so it can be safely removed</p>",
        "id": 244599511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159895
    },
    {
        "content": "<p>you might need it for the lemmas though, you haven't shown any theorem statements yet</p>",
        "id": 244599543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625159914
    },
    {
        "content": "<p>Yes, I understand that I can remove <code>is_cyclic.</code></p>\n<p>What I mean is that it would be nice to be able to use the <code>is_cyclic</code> typeclass to get a hypothesis on a <code>g</code> defined at the top-level in the same way that I use the <code>fintype</code> typeclass to get a hypothesis on a <code>q</code> defined at the top-level.</p>",
        "id": 244600125,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625160178
    },
    {
        "content": "<p>If <code>g</code> is a random element and <code>is_cyclic G</code>, that doesn't say anything about whether <code>g</code> is a cyclic generator</p>",
        "id": 244600210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160225
    },
    {
        "content": "<p><code>is_cyclic</code> is a property of the whole group, not any particular element</p>",
        "id": 244600275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160246
    },
    {
        "content": "<p>What you would need is some kind of <code>is_cyclic_generator g</code> class or hypothesis, defined to be <code>∀ (x : G), x ∈ subgroup.gpowers g</code>. So far, this has not been useful enough to need</p>",
        "id": 244600324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160288
    },
    {
        "content": "<p>I guess I was envisioning something along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n                    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">G.generator</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244600365,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625160297
    },
    {
        "content": "<p><code>G.generator</code> is not a function</p>",
        "id": 244600381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160308
    },
    {
        "content": "<p>If a group is cyclic, there is not necessarily any distinguished generator</p>",
        "id": 244600415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160337
    },
    {
        "content": "<p>and <code>is_cyclic</code> is defined using an existential so you can't extract a particular witness from it</p>",
        "id": 244600466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160364
    },
    {
        "content": "<p>By contrast, when <code>fintype G</code>, there is a unique number <code>q</code> which is the cardinality of <code>G</code>, which is why the <code>fintype.card</code> function can exist</p>",
        "id": 244600552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160412
    },
    {
        "content": "<p>if a finite group could have multiple witnesses to finiteness then that function wouldn't exist</p>",
        "id": 244600604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160461
    },
    {
        "content": "<p>So if you want to refer to a particular generator, you have to explicitly unpack it into the two assumptions \"<code>g</code> is an element  of <code>G</code>\"  and \"<code>g</code> is a cyclic generator of <code>G</code>\"</p>",
        "id": 244600770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160536
    },
    {
        "content": "<p>and the conjunction of these two is <em>stronger</em> than the original <code>is_cyclic G</code> assumption</p>",
        "id": 244600836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625160582
    },
    {
        "content": "<p>Interesting. I agree that equals was not the right idea. So are you arguing in the last two lines that having something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n                    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">G.generator</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>hG</code> is equivalent to <code>(hGg : ∀ (x : G), x ∈ subgroup.gpowers g)</code> should be outside the scope of the <code>is_cyclic</code>typeclass functionality?</p>",
        "id": 244601955,
        "sender_full_name": "Joey Lupo",
        "timestamp": 1625161101
    },
    {
        "content": "<p>If you have <code>[is_cyclic G]</code>, then <code>(hG : G.generator g)</code> is true for any <code>g : G</code>, so you don't need that hypothesis. Do you have an example of a theorem statement you want to make regarding such <code>g</code>s?</p>",
        "id": 244605310,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625162716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/Hypotheses.20on.20a.20group/near/244605310\">said</a>:</p>\n<blockquote>\n<p>If you have <code>[is_cyclic G]</code>, then <code>(hG : G.generator g)</code> is true for any <code>g : G</code>, so you don't need that hypothesis. Do you have an example of a theorem statement you want to make regarding such <code>g</code>s?</p>\n</blockquote>\n<p>Not every element of a cyclic group is a generator. The identity almost never is</p>",
        "id": 244607620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625163872
    },
    {
        "content": "<p>Ah yes, apologies.</p>",
        "id": 244608074,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625164122
    }
]