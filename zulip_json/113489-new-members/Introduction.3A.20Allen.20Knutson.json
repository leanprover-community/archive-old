[
    {
        "content": "<p>Hello everyone. I am learning about Lean and hoping to direct a couple of undergraduates to formalize some of the basics of Schubert polynomials in Lean. First up is dealing with the polynomial ring Z[x_1,x_2,...] and the division algorithm. Another short-term goal is Tits' theorem in type A, that any two minimal ways to write a permutation as a product of simple transpositions can be related by commuting and braid moves.</p>",
        "id": 271693656,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1644679417
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3770\">#3770</a> looks like it might be somewhat related to Tits' theorem</p>",
        "id": 271693880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644679765
    },
    {
        "content": "<p>We have the polynomial ring: assuming you mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[x_1, x_2, \\ldots]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">]</span></span></span></span> it's <code>mv_polynomial ℕ ℤ</code> (import <code>data.mv_polynomial.basic</code>), although the naturals start at 0 around here (blame the computer scientists). What's \"the division algorithm\"?</p>",
        "id": 271694484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644680415
    },
    {
        "content": "<p>What I had meant by it was the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[x]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span></span></span></span> is a Euclidean domain for k a field (exhibit the actual quotient with remainder). But I actually want to divide by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_i - x_{i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6389em;vertical-align:-0.2083em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2083em;\"><span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"true\">^</mo></mover><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z[x_1,\\ldots,\\widehat{x_i},\\ldots][x_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6706em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"svg-align\" style=\"top:-3.4306em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> while noting that the coefficient on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is invertible in that coefficient ring. Anyway I think I've found a way around dealing with any of that, involving proofs that are less edifying for humans but good enough for computers.</p>",
        "id": 271747951,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1644761430
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271748095,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1644761672
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271748179,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1644761776
    },
    {
        "content": "<p>Mathlib has division of polynomials by monic polynomials (quotient and remainder), and the ability to pull out one variable and consider the multivariable ring as a polynomial ring over (the multivariable ring in the rest).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.div</span> <span class=\"c1\">-- division</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"c1\">-- Let R be a commutative ring and let q ∈ R[X] be a polynomial (soon assumed to be monic)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Let p ∈ R[X] be a polynomial</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"c1\">-- because I can't be bothered to write `polynomial.mod_by_monic_add_div`</span>\n\n<span class=\"c1\">-- division</span>\n<span class=\"k\">#check</span> <span class=\"n\">p</span> <span class=\"bp\">/ₘ</span> <span class=\"n\">q</span> <span class=\"c1\">-- polynomial R</span>\n\n<span class=\"c1\">-- remainder</span>\n<span class=\"k\">#check</span> <span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"n\">q</span> <span class=\"c1\">-- polynomial R</span>\n\n<span class=\"c1\">-- Both return junk if `q` isn't monic</span>\n\n<span class=\"c1\">-- remainder has degree less than q, if R isn't the zero ring and q is monic</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.monic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">degree_mod_by_monic_lt</span> <span class=\"n\">p</span> <span class=\"n\">hq</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"c1\">-- quotient divisibility theorem</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.monic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">%ₘ</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/ₘ</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mod_by_monic_add_div</span> <span class=\"n\">p</span> <span class=\"n\">hq</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- If `T` is a type, let `R[T]` denote the ring of multivariable</span>\n<span class=\"c1\">-- polynomials with coefficients indexed by `T`. Exception: `R[X]`</span>\n<span class=\"c1\">-- means polynomial in one variable</span>\n\n<span class=\"c1\">-- `option S` is the type containing `S` and one extra element</span>\n\n<span class=\"c1\">-- `R[option S]` is isomorphic as R-algebra to `(R[S])[X]`</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial.option_equiv_left</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n\n<span class=\"c1\">-- A bijection `S ≃ T` induces an R-algebra isomorphism R[S] ≃ₐ[R] R[T]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">mv_polynomial.rename_equiv</span> <span class=\"n\">R</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">-- `option (ℕ \\ {i})` bijects with `ℕ` in the obvious way</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">({</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span><span class=\"o\">})</span> <span class=\"bp\">≃</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option.rec_on</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.1</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- this code is not good</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271768721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644790906
    },
    {
        "content": "<p>BTW, sometimes it is useful to divide by a polynomial with an invertible leading coefficient without dividing the denominator by this coefficient first (e.g., in the proof of <a href=\"https://en.wikipedia.org/wiki/Sturm%27s_theorem\">Sturm's theorem</a>). Probably, we should either add a new function or generalize <code>divide_by_monic</code>.</p>",
        "id": 271789791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644821522
    },
    {
        "content": "<p>That's all pretty great, thanks a lot! Now I'm not sure which proof to use! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 271999468,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1644942558
    },
    {
        "content": "<p>I looked for emacs support for Lean and found support for Lean 4. Am I right in thinking that if my interest is in MathLib, then I don't want to install that? Is there emacs support for Lean 3?</p>",
        "id": 274231349,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1646471151
    },
    {
        "content": "<p>Yes, there's quite a number of people using Lean 3 + emacs.</p>",
        "id": 274231399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646471201
    },
    {
        "content": "<p>Does <a href=\"https://github.com/leanprover/lean-mode\">https://github.com/leanprover/lean-mode</a> help?</p>",
        "id": 274231417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646471235
    },
    {
        "content": "<p>\"This is the Emacs mode for the Lean <strong>3</strong> theorem prover.\" Ah perfect, thanks very much.</p>",
        "id": 274231813,
        "sender_full_name": "Allen Knutson",
        "timestamp": 1646471783
    }
]