[
    {
        "content": "<p>I am just playing around with <code>Lean</code>. I wrote this, but I have no clue what is wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">natural</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">natural</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">natural</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">natural</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">add_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294749857,
        "sender_full_name": "KK",
        "timestamp": 1661195005
    },
    {
        "content": "<p>Well, what is wrong?</p>",
        "id": 294750077,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661195095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">case</span> <span class=\"n\">natural.add</span>\n<span class=\"n\">n_ᾰ</span> <span class=\"n\">n_ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">,</span>\n<span class=\"n\">n_ih_ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">zero.add</span> <span class=\"n\">n_ᾰ</span> <span class=\"bp\">=</span> <span class=\"n\">n_ᾰ</span><span class=\"o\">,</span>\n<span class=\"n\">n_ih_ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">zero.add</span> <span class=\"n\">n_ᾰ_1</span> <span class=\"bp\">=</span> <span class=\"n\">n_ᾰ_1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">zero.add</span> <span class=\"o\">(</span><span class=\"n\">n_ᾰ.add</span> <span class=\"n\">n_ᾰ_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n_ᾰ.add</span> <span class=\"n\">n_ᾰ_1</span>\n\n<span class=\"n\">case</span> <span class=\"n\">natural.mul</span>\n<span class=\"n\">n_ᾰ</span> <span class=\"n\">n_ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">,</span>\n<span class=\"n\">n_ih_ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">zero.add</span> <span class=\"n\">n_ᾰ</span> <span class=\"bp\">=</span> <span class=\"n\">n_ᾰ</span><span class=\"o\">,</span>\n<span class=\"n\">n_ih_ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">zero.add</span> <span class=\"n\">n_ᾰ_1</span> <span class=\"bp\">=</span> <span class=\"n\">n_ᾰ_1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">zero.add</span> <span class=\"o\">(</span><span class=\"n\">n_ᾰ.mul</span> <span class=\"n\">n_ᾰ_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n_ᾰ.mul</span> <span class=\"n\">n_ᾰ_1</span>\n</code></pre></div>",
        "id": 294750296,
        "sender_full_name": "KK",
        "timestamp": 1661195172
    },
    {
        "content": "<p>and an error at  the <code>end</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">module</span><span class=\"o\">,</span> <span class=\"n\">expecting</span> <span class=\"bp\">'</span><span class=\"kd\">end</span><span class=\"bp\">'</span>\n</code></pre></div>",
        "id": 294750541,
        "sender_full_name": "KK",
        "timestamp": 1661195270
    },
    {
        "content": "<p>The second one is easy: you need to close the namespace with <code>end natural</code></p>",
        "id": 294751384,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661195610
    },
    {
        "content": "<p>The first one is because inductive types don't work like that - in fact, your axioms are inconsistent.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">add_zero</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 294752051,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661195854
    },
    {
        "content": "<p>Your code says that the numbers created by <code>add</code> expressions are <em>distinct</em> from the ones created by <code>zero</code> or <code>succ</code></p>",
        "id": 294752355,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1661195930
    },
    {
        "content": "<p>I figured that <code>add</code> and <code>mul</code> should not be part of the <code>natural</code> type.</p>",
        "id": 294752414,
        "sender_full_name": "KK",
        "timestamp": 1661195953
    },
    {
        "content": "<p>Indeed the type you defined might be described as the type of <em>expressions</em> in Peano arithmetic.</p>",
        "id": 294753517,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661196379
    },
    {
        "content": "<p>Is it possible to do something else than this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">natural</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">natural</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"bp\">→</span> <span class=\"n\">natural</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">natural</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">:=</span>\n  <span class=\"n\">natural.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natural</span> <span class=\"o\">:=</span>\n  <span class=\"n\">natural.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">add_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">add_succ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">mul_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">mul_succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_mul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">natural</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">zero</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I mean avoiding the fact that <code>add</code> and <code>mul</code> are \"functions\".</p>",
        "id": 294753597,
        "sender_full_name": "KK",
        "timestamp": 1661196415
    },
    {
        "content": "<p>If you are asking if there's another way to define the naturals inductively, one thing you can do is the <code>zero/bit0/bit1</code> definition, which essentially defines naturals as binary strings. This is convenient because it means you can represent large naturals efficiently. But I don't think there's any way to have succ be one of the constructors without doing this exact definition.</p>",
        "id": 294756557,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661197758
    },
    {
        "content": "<p>I did not mean that. Also, it would still require <em>functions</em> <code>add</code> and <code>mul</code>. I would like to work directly on <em>Peano arithmetic expressions</em>, where <code>add </code>and<code> mul</code> do not have a special <em>function</em> type (if this even makes sense).</p>",
        "id": 294757275,
        "sender_full_name": "KK",
        "timestamp": 1661198053
    },
    {
        "content": "<p>I'm confused what you mean about add and mul being functions. They are also functions in peano arithmetic..</p>",
        "id": 294757454,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661198147
    },
    {
        "content": "<p>Fair enough, thank you everyone.</p>",
        "id": 294757620,
        "sender_full_name": "KK",
        "timestamp": 1661198206
    },
    {
        "content": "<p>Maybe you are looking for something like <a href=\"https://github.com/flypitch/flypitch/blob/aea5800db1f4cce53fc4a113711454b27388ecf8/old/peano.lean#L21-L26\">this</a> and <a href=\"https://github.com/flypitch/flypitch/blob/aea5800db1f4cce53fc4a113711454b27388ecf8/old/peano.lean#L89-L91\">this</a></p>",
        "id": 294760152,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661199167
    },
    {
        "content": "<p>Nice find.</p>",
        "id": 294761199,
        "sender_full_name": "KK",
        "timestamp": 1661199654
    },
    {
        "content": "<p>Flypitch is probably the largest project on mathematical logic / model theory so far in Lean, so I'd always look there when people ask questions in these areas. Some of flypitch is slowly being moved to mathlib.</p>",
        "id": 294767405,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661202590
    }
]