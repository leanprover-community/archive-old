[
    {
        "content": "<p>I tried to find a proof that a restriction of an injective map is injective <em>by library_search</em> but didn't succeed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">set.restrict</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext_val</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>By the way, I wonder, in the situation of a map <code>fin n.succ \\to \\alpha</code> how one should get its restriction to <code>fin n</code>. <br>\nMaybe it is better to do just by composition with <code>fin.cast_le (nat.le_succ n)</code> (it saves a quantifier).</p>",
        "id": 263121471,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638265959
    },
    {
        "content": "<p>I would certainly use the composition</p>",
        "id": 263121549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638266015
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_tail\">docs#matrix.vec_tail</a>?</p>",
        "id": 263121567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638266027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/subtypes.20.2F.20restrictions/near/263121549\">said</a>:</p>\n<blockquote>\n<p>I would certainly use the composition</p>\n</blockquote>\n<p>Which means, by the way, that good writing in Lean  probably requires thinking categorically.</p>",
        "id": 263123217,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638266914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> There's certainly a tendency towards that. Type theory nudges you in that direction.</p>",
        "id": 263123346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638266988
    },
    {
        "content": "<p>I’m curious : does <code>hf.comp subtype.coe_injective</code> work as a proof of your example ?</p>",
        "id": 263123981,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1638267396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113489-new-members/topic/subtypes.20.2F.20restrictions/near/263123981\">said</a>:</p>\n<blockquote>\n<p>I’m curious : does <code>hf.comp subtype.coe_injective</code> work as a proof of your example ?</p>\n</blockquote>\n<p>Yes !</p>",
        "id": 263124916,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638267928
    },
    {
        "content": "<p>So in fact <code>set.restrict</code> is already the composition with <code>coe</code></p>",
        "id": 263127897,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1638269776
    },
    {
        "content": "<p>I see. In fact, to propose a mwe, I had simplified my own stuff where s was a <code>set.range</code> of an injective map (<code>nat.cast_le _</code>), hence the simplification. As Johan wrote, it is probably better to compose explicitly with <code>coe</code> in my case.</p>",
        "id": 263129917,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638271008
    }
]