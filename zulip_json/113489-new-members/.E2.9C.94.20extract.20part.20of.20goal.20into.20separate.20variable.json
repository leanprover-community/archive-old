[
    {
        "content": "<p>As an exercise I'm trying to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">ℶ</mi><mi>ω</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\beth_\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord amsrm\">ℶ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a strong limit cardinal. So far I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.continuum</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cofinality</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">beth</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ordinal.limit_rec_on</span> <span class=\"n\">o</span>\n  <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">lim</span> <span class=\"n\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">cardinal.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">o</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span> <span class=\"o\">},</span> <span class=\"n\">IH</span> <span class=\"n\">α.1</span> <span class=\"n\">α.2</span><span class=\"o\">))</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ordinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ordinal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.is_strong_limit</span> <span class=\"o\">(</span><span class=\"n\">beth</span> <span class=\"n\">ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">beth</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">limit_rec_on_limit</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">omega_is_limit</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Part of the problem is that the current goal is somewhat unwieldy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">cardinal.sup</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ω</span><span class=\"o\">}),</span>\n         <span class=\"n\">α.val.limit_rec_on</span> <span class=\"n\">cardinal.omega</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">pow</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">lim</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">lim.is_limit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">IH</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">o'</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">o'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal</span><span class=\"o\">),</span>\n              <span class=\"n\">cardinal.sup</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">o</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lim</span><span class=\"o\">}),</span> <span class=\"n\">IH</span> <span class=\"bp\">↑</span><span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"bp\">≠</span>\n    <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I was hoping to simplify this by extracting the argument to <code>cardinal.sup</code> into a separate variable <code>f</code>, replacing the goal with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">cardinal.sup</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and then trying to work from there. I'm not sure how to do this, though. Is there a tactic that makes this kind of extraction simple?</p>\n<p>(Even better would be if I could prove that <code>f</code> is simply <code>beth</code> restricted to a subtype. Not sure how to go about doing that either.)</p>",
        "id": 277959129,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649202461
    },
    {
        "content": "<p>To simplify the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">cardinal.sup</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Reference.20a.20part.20of.20an.20expression/near/275713792\">source</a></p>",
        "id": 277960029,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649203220
    },
    {
        "content": "<p>that is the cleverest use of metavariables I've ever seen</p>",
        "id": 277960088,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649203278
    },
    {
        "content": "<p>amazing, thank you!</p>",
        "id": 277961408,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649204618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 277961411,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649204623
    },
    {
        "content": "<p>I guess the message is that Lean will do everything for you if you just get out of the way</p>",
        "id": 277961535,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649204739
    },
    {
        "content": "<p>This is a great trick! Unfortunately it doesn't always work (e.g. IIRC if <code>f</code> is suppose to be something <code>fun_like</code>, and the goal involves applying the function <code>f</code> to some term).</p>",
        "id": 277963437,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649206588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Thank you!</p>",
        "id": 278089562,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649280988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as resolved.</p>",
        "id": 278089569,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649280993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> still running into some universe problems when I try to prove <code>bdd_above (set.range beth)</code>. This doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">beth</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ordinal.limit_rec_on</span> <span class=\"n\">o</span>\n  <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">lim</span> <span class=\"n\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">lim.brange</span> <span class=\"n\">IH</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">beth_bdd_above</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">beth</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal.bdd_above_range</span> <span class=\"n\">beth</span>\n</code></pre></div>\n<p>I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">cardinal.bdd_above_range</span> <span class=\"n\">beth</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">beth</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The error goes away if I change the signature of <code>beth</code> to <code>def beth (o : ordinal.{u}) : cardinal.{max (u+1) v}</code>. However, the downside of that is that I'm back to having universe problems when comparing <code>beth</code> and <code>aleph</code> cardinals.</p>",
        "id": 278334727,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649437843
    },
    {
        "content": "<p>I can get around the aleph problem by defining that theorem as <code>∀ (o: ordinal), beth.{u v} o ≥ cardinal.lift.{max (u+1) v}(cardinal.aleph o)</code>, but that seems awkward and it would be great if I could avoid having to use <code>cardinal.lift</code> in the statement of the theorem.</p>",
        "id": 278334994,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649437974
    },
    {
        "content": "<p>I suspect the issue here has something to do with the way <code>bdd_above</code> interacts with <code>lim.brange</code>, but I'm not sure what to do about it.</p>",
        "id": 278335257,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649438114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380294\">@Matt Diamond</span> What I meant is that you need to show <code>bdd_above (lim.brange IH)</code>, not the whole <code>beth</code>, which definitely isn't bounded by a cardinal in the same universe. I think you just need to rewrite using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.range_family_of_bfamily\">docs#ordinal.range_family_of_bfamily</a> (which makes a family indexed by the \"underlying set\" of the ordinal instead of by a subset of the class of ordinals) to be able to apply <code>cardinal.bdd_above_range</code>.</p>",
        "id": 278338145,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649439557
    },
    {
        "content": "<p>ah, that makes sense... I'll try that, thanks!</p>",
        "id": 278338405,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649439688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I've got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">brange_bdd_above</span> <span class=\"o\">{</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">}:</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">o.brange</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">o</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">o.brange</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">ordinal.range_family_of_bfamily</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f'</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.bdd_above_range</span> <span class=\"n\">f'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but now it looks like <code>cardinal.bdd_above_range</code> is expecting the return type to be <code>cardinal.{max u v}</code></p>",
        "id": 278352567,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649446615
    },
    {
        "content": "<p>better than <code>{max (u+1) v}</code>, at least</p>",
        "id": 278352635,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649446643
    },
    {
        "content": "<p>oh wait, it looks like that's good enough to get rid of cardinal.lift! sweet</p>\n<p>I'm good now, thanks again for the help</p>",
        "id": 278353868,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649447386
    },
    {
        "content": "<p>Indeed it seems Lean once again has problem unifying universe expression involving <code>max</code>, and requires a bit of hint (<code>.{u u}</code>): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">brange_bdd_above</span> <span class=\"o\">{</span> <span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">}:</span>\n<span class=\"n\">bdd_above</span> <span class=\"o\">(</span><span class=\"n\">o.brange</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">o</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ordinal.range_family_of_bfamily</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cardinal.bdd_above_range.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278354296,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649447574
    },
    {
        "content": "<p>If you make everything in the same universe then yes you don't need to use <code>lift</code>. But I think you do need to show <code>bdd_above</code> to be able to prove anything about the <code>Sup</code>, since otherwise it may return a junk value.</p>",
        "id": 278354774,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649447835
    },
    {
        "content": "<p>Yeah, you need <code>bdd_above</code> to prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>s</mi><mo>→</mo><mi>a</mi><mo>≤</mo><mtext>Sup </mtext><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">a \\in s \\to a \\leq \\text{Sup }s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord\">Sup </span></span><span class=\"mord mathnormal\">s</span></span></span></span>, it's definitely important</p>",
        "id": 278359087,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649450238
    }
]