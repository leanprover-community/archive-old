[
    {
        "content": "<p>having some trouble prooving this </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">simple_01</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>there is some coercion problem</p>",
        "id": 196246519,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588630625
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>? This doesn't compile for me. Did you try <code>by norm_cast</code>?</p>",
        "id": 196247115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588630982
    },
    {
        "content": "<p>no, will now<br>\nI was trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 196247209,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631041
    },
    {
        "content": "<p>it talks about class_instance resolution dept<br>\nhave to increase class.instance_max_dept</p>",
        "id": 196247509,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631200
    },
    {
        "content": "<p><code>rat.cast_mul</code></p>",
        "id": 196247681,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631316
    },
    {
        "content": "<p>thanks, fixed it with <code>int.cast_mul</code> and <code>nat.cast_mul</code> for <code>rat.num</code> and <code>rat.denom</code> respectively</p>",
        "id": 196248471,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588631871
    },
    {
        "content": "<p>All these <code>cast_mul</code> lemmas are known to the <code>norm_cast</code> tactic, which should in theory solve all problems of this nature in one fell swoop. I still don't know what the up-arrows signify in your original question, they are a coercion but you haven't given enough information to enable people to work out where you're coercing.</p>",
        "id": 196250754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588633523
    },
    {
        "content": "<p>they are taking them to <code>\\Q</code></p>",
        "id": 196253649,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588636260
    },
    {
        "content": "<p>I was trying to prove these but there is some issue</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">congr_arg</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"n\">h₀</span><span class=\"o\">),</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_own_denom_eq_num</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_denom</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_self_num</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">rewrite</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">dvd</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h₁</span><span class=\"o\">)),</span>\n    <span class=\"c1\">-- have h₃ : 2 ∣ ↑p.num, from nat.coprime.mul_dvd_of_dvd_of_dvd</span>\n    <span class=\"c1\">-- have h₂ : p.num * p.num = 2 * (p.denom * p.denom),</span>\n    <span class=\"c1\">-- have h₂ : 2 ∣ (↑p.num * ↑p.num), from @dvd.intro _ _ 2 ↑(p.num * p.num) ↑(p.denom * p.denom) (eq.symm h₁),</span>\n    <span class=\"c1\">-- have a₀ : 2 ∣ (p * p).num, from @dvd.intro ℤ _ 2 (p * p).num (p * p).denom (eq.symm h₁),</span>\n    <span class=\"c1\">-- have a₀ : ↑(p * p).denom ∣ ↑(p * p).num, from dvd.intro_left 2 (eq.symm h₁),</span>\n    <span class=\"c1\">-- have a₁, from rat.cop (p * p),</span>\n\n    <span class=\"c1\">-- have h₃ : 2 ∣ p.num, from dvd.</span>\n    <span class=\"c1\">-- sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><code>h₂</code> sometimes compiles but sometimes it timesout</p>",
        "id": 196253743,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588636334
    },
    {
        "content": "<p>it did compile a few minutes ago but it has timed out the next few times</p>",
        "id": 196253815,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588636411
    },
    {
        "content": "<p>the multiplication in <code>h₁</code> is taking everything to <code>ℚ</code></p>",
        "id": 196253949,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588636508
    },
    {
        "content": "<p>this helped</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">((</span><span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">dvd</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">h₁</span><span class=\"o\">)),</span>\n</code></pre></div>",
        "id": 196254543,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1588637016
    },
    {
        "content": "<p>I think that 2 divides any rational number.</p>",
        "id": 196335395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588697896
    }
]