[
    {
        "content": "<p>Is there a comprehensive-ish tutorial on using setoid in specific written somewhere? There's one section on it in Theorem Proving in Lean I found, but it doesn't go into much detail and I'm having a lot of trouble actually using it in practice.</p>",
        "id": 278526084,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649668114
    },
    {
        "content": "<p>Here's what I wrote about them for my recent course <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_A/section06quotients/quotients.html\">https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_A/section06quotients/quotients.html</a> and here are the associated exercises <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/tree/master/src/section06quotients\">https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/tree/master/src/section06quotients</a></p>",
        "id": 278529582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649670182
    },
    {
        "content": "<p>thanks!</p>",
        "id": 278529992,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649670422
    },
    {
        "content": "<p>There's also a file on quotient groups in the <code>outtakes</code> directory which I never got into good shape because it uses the <code>quotient'</code> trick which i didn't explain</p>",
        "id": 278530460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649670722
    },
    {
        "content": "<p>hmmm<br>\nso my question in particular is, say I define the alias</p>\n<p><code>def int := quotient int.setoid</code></p>\n<p>(having already done the <code>setoid</code> setup above)</p>",
        "id": 278530785,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649670927
    },
    {
        "content": "<p>I now define a bunch of theorems and instances and so on using <code>int</code>, in particular, say, <code>has_neg int</code> and <code>has_zero int</code></p>",
        "id": 278530882,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649670975
    },
    {
        "content": "<p>If you write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> it will be easier for everyone to answer your question.</p>",
        "id": 278530947,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649671043
    },
    {
        "content": "<p>Lean doesn't seem to then pass this on to things of the form <code>⟦.⟧ </code>, complaining things like <code>failed to synthesize type class instance for failed to synthesize type class instance for\n⊢ has_zero (quotient int.setoid)</code></p>",
        "id": 278530965,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649671055
    },
    {
        "content": "<p>hmmm, this time I maybe can</p>",
        "id": 278530978,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649671068
    },
    {
        "content": "<p>a decent chunk of my current problems are partially due to the length of this file -_-</p>",
        "id": 278531035,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649671088
    },
    {
        "content": "<p>here</p>",
        "id": 278532108,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649671687
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">peano</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eqv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.1</span> <span class=\"bp\">+</span> <span class=\"n\">b.2</span> <span class=\"bp\">=</span> <span class=\"n\">b.1</span> <span class=\"bp\">+</span> <span class=\"n\">a.2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.refl</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eqv</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">eqv</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">eqv</span><span class=\"o\">},</span> <span class=\"n\">tauto</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv.trans</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eqv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">eqv</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">eqv</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eqv</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv_is_eqv</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">eqv</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk_equivalence</span> <span class=\"n\">eqv</span> <span class=\"n\">eqv.refl</span> <span class=\"n\">eqv.symm</span> <span class=\"n\">eqv.trans</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">int.setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">setoid.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">eqv_is_eqv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">int.setoid</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">int.mk</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">peano</span>\n</code></pre></div>",
        "id": 278532113,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649671690
    },
    {
        "content": "<p>Lean complains at </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">int.setoid</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>at <code>⟦(c, d)⟧ = 0</code></p>",
        "id": 278532338,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649671834
    },
    {
        "content": "<p>I think you can write <code>lemma foo : ⟦(c, d)⟧  = (0 : int) := sorry</code></p>",
        "id": 278532582,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649671995
    },
    {
        "content": "<p>hmmm<br>\nso you can, thanks</p>",
        "id": 278532836,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672138
    },
    {
        "content": "<p>that said, I'm still generally just drowning in <code>unfolds</code> trying to work with these things</p>",
        "id": 278532860,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672157
    },
    {
        "content": "<p>I am not sure, but also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">int.setoid</span>\n</code></pre></div>\n<p>should work.</p>",
        "id": 278532943,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649672209
    },
    {
        "content": "<p>I'm getting the impression that you're \"supposed\" to just use <code>quot.out</code> pretty early to get to the underlying representation, at least for low-level stuff, but I'm trying not to because I'm trying to follow a book on axiomatizations/reverse mathematics and I'd rather not invoke choice so early in the game lol</p>",
        "id": 278532947,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278532943\">said</a>:</p>\n<blockquote>\n<p>I am not sure, but also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">int.setoid</span>\n</code></pre></div>\n<p>should work.</p>\n</blockquote>\n<p>ahhh, that helps a lot</p>",
        "id": 278533008,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672248
    },
    {
        "content": "<p>thanks muchly</p>",
        "id": 278533014,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672253
    },
    {
        "content": "<p>The problem is that you provided an instance of <code>has_zero</code> to <code>int</code>, that it defined to be <code>quotient int.setoid</code>, but Lean doesn't unfold it.</p>",
        "id": 278533019,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649672256
    },
    {
        "content": "<p>that does work</p>",
        "id": 278533020,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672256
    },
    {
        "content": "<p>hmm</p>",
        "id": 278533142,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672318
    },
    {
        "content": "<p>so when should I be marking things <code>reducible</code>?</p>",
        "id": 278533152,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649672326
    },
    {
        "content": "<p>I would say that the correct thing to do is the opposite: provide a good API, and then mark the definition <code>irreducible</code>.</p>",
        "id": 278533464,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649672500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278532860\">said</a>:</p>\n<blockquote>\n<p>that said, I'm still generally just drowning in <code>unfolds</code> trying to work with these things</p>\n</blockquote>\n<p>Can you give an example?</p>",
        "id": 278533931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649672801
    },
    {
        "content": "<p>why the thumbsdown :(</p>",
        "id": 278534537,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673214
    },
    {
        "content": "<p>uh, lemme see</p>",
        "id": 278534544,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278533464\">said</a>:</p>\n<blockquote>\n<p>I would say that the correct thing to do is the opposite: provide a good API, and then mark the definition <code>irreducible</code>.</p>\n</blockquote>\n<p>er<br>\nbut then I end up having to constantly switch between <code>quot.mk</code> and my actual type to do anything</p>",
        "id": 278534731,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278533931\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278532860\">said</a>:</p>\n<blockquote>\n<p>that said, I'm still generally just drowning in <code>unfolds</code> trying to work with these things</p>\n</blockquote>\n<p>Can you give an example?</p>\n</blockquote>\n<p>for example</p>\n<p>add as setup</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">neg_int_pair</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">a.1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">neg_respects_eqv</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">):</span>\n  <span class=\"n\">a₁</span> <span class=\"bp\">≈</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">neg_int_pair</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">neg_int_pair</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h_eqv</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_equiv.equiv</span> <span class=\"n\">eqv</span> <span class=\"n\">neg_int_pair</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quot.sound</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">setoid.r</span> <span class=\"n\">eqv</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">cc</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">int</span>\n  <span class=\"kd\">def</span> <span class=\"n\">neg</span><span class=\"o\">:</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"o\">:=</span>\n    <span class=\"n\">quotient.lift</span> <span class=\"n\">neg_int_pair</span> <span class=\"n\">neg_respects_eqv</span>\n\n  <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">int</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">neg</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span> <span class=\"n\">int</span>\n</code></pre></div>",
        "id": 278535047,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673579
    },
    {
        "content": "<p>you already can see the <code>unfold &lt;three or four things&gt;, apply quot.sound, unfold &lt;more things&gt;, dsimp</code> pattern I resort to a <em>lot</em> in order to get at the underlying representation</p>",
        "id": 278535162,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673651
    },
    {
        "content": "<p>I realize that largely that defeats the purpose, which is why I'm trying to prove a few basic principles about <code>add</code> and <code>neg</code> and <code>sub</code> so I can stop doing that</p>",
        "id": 278535193,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673682
    },
    {
        "content": "<p>anyway, I then have a helper lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">int.neg_mk</span> <span class=\"o\">:</span> <span class=\"bp\">-⟦</span><span class=\"o\">(</span><span class=\"n\">ap</span><span class=\"o\">,</span> <span class=\"n\">am</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">am</span><span class=\"o\">,</span> <span class=\"n\">ap</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">quotient.mk</span> <span class=\"n\">has_neg.neg</span> <span class=\"n\">int.neg</span> <span class=\"n\">quotient.lift</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">neg_int_pair</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278535212,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673704
    },
    {
        "content": "<p>which is reasonably short, but is also pretty much literally nothing but <code>unfold</code>s <br>\nand <code>unfold_projs</code> won't do it all for me</p>",
        "id": 278535277,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649673726
    },
    {
        "content": "<p>Doesn't <code>lemma int.neg_mk : -⟦(ap, am)⟧ = ⟦(am, ap)⟧ := rfl</code> work?</p>",
        "id": 278535504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649673937
    },
    {
        "content": "<p>hmmm<br>\nwell, a), apparently not<br>\nbut b) even if it did, it wouldn't help me in more complex cases where I actually need to do work after unfolding everything down to the underlying equivalence</p>",
        "id": 278535731,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649674098
    },
    {
        "content": "<p>Thumbs down was for \"supposed to invoke choice\", that usually just results in you having to work harder to prove the same thing that <code>lift</code> already asked for in the first place.</p>",
        "id": 278537305,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649675173
    },
    {
        "content": "<p>fair enough, guess I just misread it lol</p>",
        "id": 278537770,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649675483
    },
    {
        "content": "<p>but in this case, for example, it's not like <code>a = -a ↔ a = 0</code> follows from the well-definedness of <code>neg</code> alone, I need to actually go digging into how <code>neg</code> works on the underlying representation, I think?</p>",
        "id": 278537850,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649675526
    },
    {
        "content": "<p>Rather than unfolding everything, if you want to get at the underlying relation then state it as a lemma</p>",
        "id": 278537980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649675624
    },
    {
        "content": "<p>If you're unfolding the same thing over and over again, it means you're missing a lemma</p>",
        "id": 278537982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649675625
    },
    {
        "content": "<p>This is the lemma you're missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a.1</span> <span class=\"bp\">+</span> <span class=\"n\">b.2</span> <span class=\"bp\">=</span> <span class=\"n\">b.1</span> <span class=\"bp\">+</span> <span class=\"n\">a.2</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n</code></pre></div>",
        "id": 278537994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649675633
    },
    {
        "content": "<p>(in addition to the <code>int.neg_mk</code> above, which is also a good lemma)</p>",
        "id": 278538077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649675679
    },
    {
        "content": "<p>^ this, although I would write it for <code>[(a, b)] = [(c, d)]</code> instead</p>",
        "id": 278538078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649675679
    },
    {
        "content": "<p>same thing for <code>-[(a, b)] = [(b, a)]</code> for unfolding the definition of <code>-</code></p>",
        "id": 278538205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649675758
    },
    {
        "content": "<p>Probably you want both, since my version lets you get rid of any <code>equiv</code>s that pop up while using <code>quotient.lift</code> or <code>quotient.map</code></p>",
        "id": 278538274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649675775
    },
    {
        "content": "<p>with just a few things like that as simp lemmas you can demolish most goals about associativity or whatever using <code>simp</code></p>",
        "id": 278538290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649675790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278535504\">said</a>:</p>\n<blockquote>\n<p>Doesn't <code>lemma int.neg_mk : -⟦(ap, am)⟧ = ⟦(am, ap)⟧ := rfl</code> work?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278535731\">said</a>:</p>\n<blockquote>\n<p>hmmm<br>\nwell, a), apparently not</p>\n</blockquote>\n<p>This works as long as <code>int</code> is reducible. If you choose not to make <code>int</code> reducible, then you can't use <code>⟦⟧</code> anywhere</p>",
        "id": 278538506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649675926
    },
    {
        "content": "<p>hm<br>\nworks in my mwe but not in my original, even though it's marked reducible in both places</p>",
        "id": 278538579,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649675994
    },
    {
        "content": "<p>semireducible (aka default) should suffice</p>",
        "id": 278538628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676004
    },
    {
        "content": "<p>empirically it doesn't, though I'm starting to suspect the size of this file is getting in the way of things</p>",
        "id": 278538661,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649676031
    },
    {
        "content": "<p>also related to the above, but if I prove a bunch of things about things of the form <code>[(a, b)]</code>, they don't seem to play nice when I then pass in <code>ints</code> instead, I think<br>\nthough I will double check in a bit</p>",
        "id": 278538718,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649676073
    },
    {
        "content": "<p>those lemmas won't trigger if you put in ints, and this is deliberate</p>",
        "id": 278538766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676113
    },
    {
        "content": "<p>so e.g. <code>[(a, b)] + c</code> won't reduce</p>",
        "id": 278538832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676133
    },
    {
        "content": "<p>Another thing you should do to avoid weird type inference is to explicitly redefine <code>quotient.mk</code> for your particular quotient and give it the right type. In this case it would be <code>def int.mk (a b : nat) : int := [(a, b)]</code></p>",
        "id": 278539020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676259
    },
    {
        "content": "<p>and then all of the theorems mentioned above should use <code>int.mk</code> instead of <code>[(a, b)]</code></p>",
        "id": 278539047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676285
    },
    {
        "content": "<p>.... so, uh, never actually use the convenient <code>[.]</code> syntax?<br>\nthat seems... disappointing &gt;.&gt;</p>",
        "id": 278539091,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649676317
    },
    {
        "content": "<p>and you have simp lemmas like <code>[(a, b)] = int.mk a b</code> to make sure that any occurrences of the quotient that accidentally pop up are removed</p>",
        "id": 278539115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676327
    },
    {
        "content": "<p>you can add a notation for <code>int.mk</code> if you want</p>",
        "id": 278539131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278538832\">said</a>:</p>\n<blockquote>\n<p>so e.g. <code>[(a, b)] + c</code> won't reduce</p>\n</blockquote>\n<p>but I would like to rise above the level where I'm constantly referring back to the underlying representation someday, and that means I need to be able to write \"axioms\" (quote-unquote, since I'm proving them) that rely on that representation, but can be used by outside functions that only pass in black-boxed ints</p>",
        "id": 278539309,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649676429
    },
    {
        "content": "<p>the problem with the <code>[.]</code> syntax is that it has type <code>quotient &lt;stuff&gt;</code>, which means that if you write <code>[(0, 0)] = 0</code> then the <code>0</code> on the right will be looking for <code>has_zero (quotient &lt;stuff&gt;)</code> which is bad</p>",
        "id": 278539362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676471
    },
    {
        "content": "<p>the lemmas I've been talking about, like <code>-mk a b = mk b a</code>, are lemmas to help you prove theorems about the int functions you actually care about like <code>-(-a) = a</code></p>",
        "id": 278539493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676550
    },
    {
        "content": "<p>the proof method for all of these is to use <code>quotient.induction</code> to replace <code>a</code> with <code>int.mk x y</code> and then <code>simp</code></p>",
        "id": 278539571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649676593
    },
    {
        "content": "<p>Note that I don't use <code>unfold</code> once in my exposition of how to make <code>int</code> from <code>nat x nat</code> <a href=\"https://github.com/ImperialCollegeLondon/formalising-mathematics-2022/blob/master/src/section06quotients/sheet4Z.lean\">here</a>. I do however write a bunch of helper lemmas such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">ab.2</span> <span class=\"bp\">+</span> <span class=\"n\">cd.1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">R_def</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"bp\">↔</span> <span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span> <span class=\"bp\">=</span> <span class=\"n\">ab.2</span> <span class=\"bp\">+</span> <span class=\"n\">cd.1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">R_def'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">myint</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">myint</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 278540055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649676870
    },
    {
        "content": "<p>(I should think all the proofs are refl)</p>",
        "id": 278540148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649676927
    },
    {
        "content": "<p>I do not seem to be getting anywhere near as much use out of <code>refl</code> as any of you do :v</p>",
        "id": 278542280,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649678237
    },
    {
        "content": "<p>admittedly, this is probably in large part because I also rewrote <code>nat</code> and therefore do not have quite so optimized a set of <code>simp</code> lemmas</p>",
        "id": 278542327,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649678273
    },
    {
        "content": "<p>I was originally planning on just implementing the entire book from scratch but at this rate I may end up just switching to existing libraries after I \"re-implement\" them</p>",
        "id": 278542453,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649678317
    },
    {
        "content": "<p>You reimplemented <code>nat</code>? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> That should definitely have been part of your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>",
        "id": 278542980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649678624
    },
    {
        "content": "<p>Note that you would have the same issues with type classes if you defined something like <code>def complex := real \\x real</code></p>",
        "id": 278543129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649678705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278542980\">said</a>:</p>\n<blockquote>\n<p>You reimplemented <code>nat</code>? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> That should definitely have been part of your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>\n</blockquote>\n<p>... I mean, at that point, it stops being a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and starts being \"here is the entirety of my code\", though?</p>",
        "id": 278543972,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649679223
    },
    {
        "content": "<p>that's kind of the issue I've been having, really, is that since I reimplemented everything from scratch it's hard to isolate things into an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, so I just end up asking very vague general-practice questions instead</p>",
        "id": 278544053,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649679253
    },
    {
        "content": "<p>like if you don't mind looking through my ~1k lines of code then yay, but I don't really expect that of random people on the internet :p</p>",
        "id": 278544127,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649679304
    },
    {
        "content": "<p>Anyways, <code>refl</code> doesn't depend on what simp lemmas you wrote or didn't write.</p>",
        "id": 278544333,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649679422
    },
    {
        "content": "<p>Huh. Good to know</p>",
        "id": 278545655,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649680134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"359992\">Robert Maxton</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278543972\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20to.20using.20setoid/near/278542980\">said</a>:</p>\n<blockquote>\n<p>You reimplemented <code>nat</code>? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span> That should definitely have been part of your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>!</p>\n</blockquote>\n<p>... I mean, at that point, it stops being a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and starts being \"here is the entirety of my code\", though?</p>\n</blockquote>\n<p>I suspect that reimplementing basic stuff can lead to weird situations like this, where each definition in mathlib already has a bunch of layers of lemmas to smooth out (e.g.) intermediate facts between an underlying representation and the intended usage.</p>\n<p>You might be reimplementing the basics in order to learn about writing math in Lean -- I did some of that myself last year. But at the same time you're (unwittingly) forcing yourself to deal with a bunch of core type theory design choices, which might turn out to be subtler than you expect. For example, Mario's advice about defining <code>int.mk</code> and writing all subsequent theorems with <code>int.mk</code> instead of simply <code>quotient.mk</code>.</p>\n<p>At least when I tried this, I eventually decided to approach reimplementing the basics with the mindset of \"I'll push this as far as it goes but won't be surprised if I get stuck at some (early) point\". I still found it to be a helpful exercise though!</p>",
        "id": 278733671,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649788154
    }
]