[
    {
        "content": "<p>I'm probably missing something really simple here, but is there a way to avoid using <code>@</code> in this situation? Shouldn't Lean see that <code>a</code> can be used?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">property_1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">property_2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">property_1</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- This does not work</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">property_1</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">property_2</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- But this works... is there anyway to avoid having to use `@`?</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">property_1</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">property_2</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 228141373,
        "sender_full_name": "Pontus Sundqvist",
        "timestamp": 1614530686
    },
    {
        "content": "<p>Have you read <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> about explicit, implicit, and typeclass arguments?</p>",
        "id": 228141565,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614530915
    },
    {
        "content": "<p>No... I probably should do that.</p>",
        "id": 228141611,
        "sender_full_name": "Pontus Sundqvist",
        "timestamp": 1614530991
    },
    {
        "content": "<p>Making the first <code>def</code> a <code>class</code> makes your <code>test1</code> work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">property_1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">property_2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">property_1</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- This now works</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">property_1</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">property_2</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 228141701,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614531066
    },
    {
        "content": "<p>But what's the larger problem? <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 228141718,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614531083
    },
    {
        "content": "<p>I encountered the problem several times, but an example was in the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conserves_order</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a2</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">a2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">submatrix</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">conserves_order</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conserves_order</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">ℕ</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">submatrix_is_minor</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">conserves_order</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">conserves_order</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">submatrix</span> <span class=\"n\">m</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m.minor</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n<span class=\"c1\">-- Lean: failed to synthesize type class instance [at submatrix] for [function.injective/conserves_order f/g]</span>\n<span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I feel like using the same restrictions on f (and g) in the definition and the theorem should make it obvious that they satisfy the requirements.</p>",
        "id": 228143154,
        "sender_full_name": "Pontus Sundqvist",
        "timestamp": 1614532526
    },
    {
        "content": "<p>I should read up on classes, I haven't used them yet.</p>",
        "id": 228143224,
        "sender_full_name": "Pontus Sundqvist",
        "timestamp": 1614532601
    },
    {
        "content": "<p>If you're going to put things in square brackets, they need to be tagged with <code>@[class]</code></p>",
        "id": 228143855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614533207
    },
    {
        "content": "<p>I think what you probably want to do is replace <code>(f : p -&gt; a) [conserves_order f] [function.injective f]</code> with <code>(f : p ↪o a)</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_embedding\">docs#order_embedding</a></p>",
        "id": 228143973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614533271
    }
]