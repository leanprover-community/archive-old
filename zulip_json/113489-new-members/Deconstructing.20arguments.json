[
    {
        "content": "<p>New to Lean, working through theorem_proving_in_lean.</p>\n<p>My solution for <code>uncurry</code> exercise  on the dependent type theory section ends up as <br>\n<code>def uncurry (α β γ : Type*) (f: α → β → γ ) : α × β → γ := λ  c, f c.fst c.snd</code></p>\n<p>Is there a more general way I can access the fst and snd components of the product in the lambda?</p>\n<p>Why doesnt something like <br>\n<code>def uncurry2 (α β γ : Type*) (f: α → β → γ ) : α × β → γ := λ (a × b), f a b</code> work ?</p>",
        "id": 223687596,
        "sender_full_name": "Brice Paris",
        "timestamp": 1611343917
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">uncurry2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 223688293,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611344209
    },
    {
        "content": "<p>The angle brackets are another way to represent a <code>prod</code> term ? Then why do<code>(a \\x \\b)</code> or <code>(prod a b)</code> not decompose ?</p>",
        "id": 223689148,
        "sender_full_name": "Brice Paris",
        "timestamp": 1611344606
    },
    {
        "content": "<p><code>prod α β</code> or <code>α × β : Type*</code> is a term describing a Type, while <code>(a, b)</code> or <code>⟨a, b⟩ : α × β</code> is a term of that product type.</p>",
        "id": 223690971,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611345421
    }
]