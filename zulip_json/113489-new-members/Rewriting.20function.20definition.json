[
    {
        "content": "<p>Hello, I would like to rewrite a function definition with a specified target. Here is an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"infixl ` ⬝ `:75 := matrix.mul\"</span> <span class=\"k\">in</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix_mul_mul</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">Y</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This should rewrite the first ⬝, not the second one!</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Currently, the <code>rw matrix.mul</code> rewrites <code>Y ⬝ X</code>, but I would like it to rewrite  <code>X ⬝ Y</code>. I had the following two ideas, neither of which worked:</p>\n<ol>\n<li>Adding an argument to the rewrite to indicate what should be rewritten:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This should rewrite the first ⬝, not the second one!</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.mul</span> <span class=\"n\">X</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This, unsurprisingly, doesn't work,  I assume because <code>matrix.mul</code> is a function definition and not a theorem/lemma. So it just takes the <code>X</code> as the first argument.</p>\n<ol start=\"2\">\n<li>Using <code>nth_rewrite</code>.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This should rewrite the first ⬝, not the second one!</span>\n  <span class=\"c1\">-- 1 should do the 2nd rewrite, as 0 does the 1st</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"n\">matrix.mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Which gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"n\">enough</span> <span class=\"n\">rewrites</span> <span class=\"n\">found</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">Y</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>This also doesn't entirely make sense to me, as it should be able to do 2 rewrites.<br>\nIs there a way to do this?</p>",
        "id": 283733142,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653393304
    },
    {
        "content": "<p>Note that <code>infixl</code> is telling Lean that <code>matrix.mul</code> associates on the left. so the term is actually <code>(X.mul Y).mul X</code>, not <code>X.mul (Y.mul X)</code>. you can see this with the option <code>pp.notation</code> (specifically the line <code>set_option pp.notation false</code> before the theorem statement, as a debugging option)</p>",
        "id": 283733500,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653393504
    },
    {
        "content": "<p>but for me, this does rewrite <code>X * Y</code> already, as you have <code>Y * X</code> terms left in the definition</p>",
        "id": 283733654,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653393578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Rewriting.20function.20definition/near/283733654\">said</a>:</p>\n<blockquote>\n<p>but for me, this does rewrite <code>X * Y</code> already, as you have <code>Y * X</code> terms left in the definition</p>\n</blockquote>\n<p>My context after <code>rw matrix.mul</code> (without <code>pp.notation</code> turned off) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">matrix.dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⬝</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>So, for me, there is still <code>(X ⬝ Y)</code>, is that not the case for you?</p>",
        "id": 283733930,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653393712
    },
    {
        "content": "<p>not at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">matrix.dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">⬝</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>are you on the latest mathlib?</p>",
        "id": 283734057,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653393760
    },
    {
        "content": "<p>Now I am on the newest version, but I'm still getting the same context as before...</p>\n<p>Regardless, I would still like to be able to select which <code>mul</code> is being rewritten, so in your case I would like <code>Y ⬝ X</code> to be rewritten...</p>",
        "id": 283734656,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653394086
    },
    {
        "content": "<p>but note that <code>Y * X</code> doesn't exist! if the term is <code>(X.mul Y).mul X</code>, there is no <code>Y.mul X</code> in there. You first have to check that multiplication is associative, and then you can do that</p>",
        "id": 283734814,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653394185
    },
    {
        "content": "<p>(and of course it is, and the correct theorem is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul_assoc\">docs#matrix.mul_assoc</a>)</p>",
        "id": 283734835,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653394201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/Rewriting.20function.20definition/near/283734814\">said</a>:</p>\n<blockquote>\n<p>but note that <code>Y * X</code> doesn't exist! if the term is <code>(X.mul Y).mul X</code>, there is no <code>Y.mul X</code> in there. You first have to check that multiplication is associative, and then you can do that</p>\n</blockquote>\n<p>Oh dangit, you're completely right... I've been doing this for all the other theorems, but completely missed it here (probably, as you pointed out, because of <code>infixl</code>). Thanks a lot!</p>",
        "id": 283735117,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653394355
    },
    {
        "content": "<p>Ah, I've misunderstood my initial problem. It's not <code>Y.mul X</code> I would like to have rewritten but <code>(X.mul Y).mul X</code> (the outer <code>mul</code>). So I still have this problem in my non-MWE unfortunately... In general, I would just like to know how I can control which rewrite happens when I'm rewriting function definitions.</p>",
        "id": 283736618,
        "sender_full_name": "Aron Erben",
        "timestamp": 1653395234
    },
    {
        "content": "<p>I'm personally a bit surprised that <code>nth_rewrite</code> doesn't work, and the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.mul_apply\">docs#matrix.mul_apply</a> methods have the arguments implicit, so you can't really do that either without a lot of <code>_</code>s</p>",
        "id": 283737477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653395753
    },
    {
        "content": "<p>can you try <code>rw [...] { occs := occurrences.pos [x] }</code> and try messing with <code>x</code> and see if that works?</p>",
        "id": 283737578,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653395799
    },
    {
        "content": "<p>you can also try use <code>conv</code> to drill down to what you want</p>",
        "id": 283737597,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653395812
    }
]