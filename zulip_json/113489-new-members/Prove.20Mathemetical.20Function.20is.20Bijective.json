[
    {
        "content": "<p>Hey y'all, I'm trying to prove that this mathematical function is bijective, but I'm really new to theorum proving so I'm honestly just flailing trying to figure things out. So far I have this code, which is incomplete and errors out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n\n<span class=\"c1\">-- fn next(i: NonZeroU64) -&gt; NonZeroU64 {</span>\n<span class=\"c1\">--     let i = i.get();</span>\n<span class=\"c1\">--     let n = (i &lt;&lt; 1) ^ (i &gt;&gt; 63 ^ i &gt;&gt; 62 ^ i &gt;&gt; 60 ^ i &gt;&gt; 59) &amp; 1;</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">--     // Safety: I hope I got the math right</span>\n<span class=\"c1\">--     unsafe { NonZeroU64::new_unchecked(n) }</span>\n<span class=\"c1\">-- }</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">prove_prng</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">int</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">int.shiftl</span>\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">int.shiftr</span>\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">⊕</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">int.lxor</span>\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">&amp;</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">60</span> <span class=\"o\">:=</span> <span class=\"n\">int.land</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prng</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">63</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">62</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">60</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">59</span><span class=\"o\">))</span> <span class=\"bp\">&amp;</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">prng</span> <span class=\"mi\">100</span>\n<span class=\"k\">#eval</span> <span class=\"n\">prng</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">injective_prng</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"bp\">@</span><span class=\"n\">prng</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">prng</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">prng</span> <span class=\"n\">x₂</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prng</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x₁</span> <span class=\"n\">using</span> <span class=\"n\">int.induction_on</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x₂</span> <span class=\"n\">using</span> <span class=\"n\">int.induction_on</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">int.zero_shiftr</span> <span class=\"c1\">-- Error occurs here</span>\n  <span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">int.zero_shiftl</span> <span class=\"o\">}</span>\n  <span class=\"c1\">-- There's more cases since I applied induction twice</span>\n<span class=\"kd\">end</span>\n  <span class=\"c1\">-- Also tried this:</span>\n  <span class=\"c1\">-- assume x₁ x₂,</span>\n  <span class=\"c1\">-- assume H : prng x₁ = prng x₂,</span>\n  <span class=\"c1\">-- show x₁ = x₂,</span>\n  <span class=\"c1\">--   from H</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">surjective_prng</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"bp\">@</span><span class=\"n\">prng</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bijective_prng</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"bp\">@</span><span class=\"n\">prng</span> <span class=\"o\">:=</span>\n  <span class=\"n\">and.intro</span> <span class=\"n\">injective_prng</span> <span class=\"n\">surjective_prng</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">prove_prng</span>\n</code></pre></div>\n<p>The error it produces is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">with</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">case</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hp</span>\n<span class=\"n\">x₂_i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">x₂_ᾰ</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">63</span> <span class=\"bp\">⊕</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">62</span> <span class=\"bp\">⊕</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">60</span> <span class=\"bp\">⊕</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">59</span><span class=\"o\">)</span> <span class=\"bp\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">63</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">62</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">60</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">59</span><span class=\"o\">)</span> <span class=\"bp\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">63</span> <span class=\"bp\">⊕</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">62</span> <span class=\"bp\">⊕</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">60</span> <span class=\"bp\">⊕</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">59</span><span class=\"o\">)</span> <span class=\"bp\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">⊕</span>\n       <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">63</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">62</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">60</span> <span class=\"bp\">⊕</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"mi\">59</span><span class=\"o\">)</span> <span class=\"bp\">&amp;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">x₂_i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>But honestly, I don't even know if I'm heading in the right direction, any advice?</p>",
        "id": 264746396,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1639418621
    },
    {
        "content": "<p>what do you want your tactic state to be? <code>apply</code> basically means \"if my goal is B, and I have A → B, then A suffices\".</p>",
        "id": 264746982,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639418864
    },
    {
        "content": "<p>For lack of a better term, I want to \"execute the function on the state\", I want to remove all the instances of zero being bitshifted in favor of a literal zero</p>",
        "id": 264747359,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1639419024
    },
    {
        "content": "<p>You probably want <code>simp_rw [int.zero_shiftr, int.zero_shiftl] at *</code> instead of <code>apply int.zero_shiftr, apply int.zero_shiftl</code></p>",
        "id": 264747464,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639419067
    },
    {
        "content": "<p>Ahh, thanks! And another thing, I'd like to do this with a representation of 64bit integers but I think <code>int</code> is an unbounded integer, <code>fin</code> looks like what I want (bounded integers) but I can't find bitwise operations over it</p>",
        "id": 264747724,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1639419180
    },
    {
        "content": "<p>Yeah, you'll probably have to implement them yourself</p>",
        "id": 264747839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639419237
    },
    {
        "content": "<p>Drat, thank you!</p>",
        "id": 264747992,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1639419288
    },
    {
        "content": "<p>How would I remove duplicate terms from each side of the equation, turning <code>x + 1 = y + 1</code> into <code>x = y</code>?</p>",
        "id": 264748366,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1639419424
    },
    {
        "content": "<p><code>congr</code></p>",
        "id": 264748512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639419483
    },
    {
        "content": "<p>You can also use the fact that addition is injective. Do you have <code>x + 1 = y + 1</code> as a goal or as hypothesis?</p>",
        "id": 264748571,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639419502
    },
    {
        "content": "<p>or use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_left_inj\">docs#add_left_inj</a></p>",
        "id": 264748633,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639419529
    },
    {
        "content": "<p>Currently it's a hypothesis</p>",
        "id": 264748777,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1639419592
    },
    {
        "content": "<p>Right, so <code>congr</code> won't work on a hypothesis. Because that would mean that <code>1 / 0 = 2 / 0</code> would imply <code>1 = 2</code>.</p>",
        "id": 264748877,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639419625
    },
    {
        "content": "<p>Fun fact: the term <code>1 / 0 = 2 / 0</code> reduces to <code>true</code>.</p>",
        "id": 264750218,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1639420267
    },
    {
        "content": "<p>Implementing unsigned 64-bit integers and bitwise operations on them is not that hard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">uint64_t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bits</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bits.length</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bits</span> <span class=\"o\">:=</span> <span class=\"n\">repeat</span> <span class=\"n\">ff</span> <span class=\"mi\">64</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">length_repeat</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">not'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bits</span> <span class=\"o\">:=</span> <span class=\"n\">a.1.map</span> <span class=\"n\">bnot</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">length_map</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">and'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bits</span> <span class=\"o\">:=</span> <span class=\"n\">zip_with</span> <span class=\"n\">band</span> <span class=\"n\">a.1</span> <span class=\"n\">b.1</span><span class=\"o\">,</span>\n  <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a.1.length</span> <span class=\"n\">b.1.length</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span><span class=\"o\">),</span>\n  <span class=\"n\">length_zip_with</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">a.2</span><span class=\"o\">,</span> <span class=\"n\">b.2</span><span class=\"o\">,</span> <span class=\"n\">min_self</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">or'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uint64_t</span> <span class=\"o\">:=</span>\n<span class=\"n\">not'</span> <span class=\"o\">(</span><span class=\"n\">and'</span> <span class=\"o\">(</span><span class=\"n\">not'</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not'</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 264750941,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639420601
    },
    {
        "content": "<p>Just use <code>vector bool 64</code></p>",
        "id": 264751731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639420990
    }
]