[
    {
        "content": "<p>Hello, can I please have help proving (or even properly stating) something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lim_re</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.abs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f.lim</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f.re</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lim</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Of course the problem is that <a href=\"http://f.re\">f.re</a> isn't defined... (How do I define it, or is something related in mathlib somewhere and I can't find it?) Thanks!</p>",
        "id": 212234496,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601835305
    },
    {
        "content": "<p>Why do you need <code>cau_seq</code>?</p>",
        "id": 212234951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601835882
    },
    {
        "content": "<p>I know that it's not documented at all but <code>cau_seq</code> is considered to be an implementation detail of <code>def real := ...</code></p>",
        "id": 212234977,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601835928
    },
    {
        "content": "<p>Most of the topology library relies on <code>cauchy_seq</code>.</p>",
        "id": 212234986,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601835942
    },
    {
        "content": "<p>Some day we should migrate <code>complex.exp</code> from <code>cau_seq</code>, but I don't want to do this migration until we have a glue between <code>mv_power_series</code> and analytic functions.</p>",
        "id": 212235036,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601835977
    },
    {
        "content": "<p>(then we'll port it to analytic functions)</p>",
        "id": 212235050,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836007
    },
    {
        "content": "<p>I think I've figured out the statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lim_re</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span>  <span class=\"n\">complex.abs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℝ</span>   <span class=\"n\">abs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f.lim</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g.lim</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212235069,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601836037
    },
    {
        "content": "<p>I need something with exp, which is defined in terms of cau_seq... Thanks!</p>",
        "id": 212235118,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601836085
    },
    {
        "content": "<p>We should prove <code>has_sum (λ z, z^n / n!) (exp z)</code>, may be even before migrating to analytic functions.</p>",
        "id": 212235223,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836273
    },
    {
        "content": "<p>I can do it tonight or tomorrow.</p>",
        "id": 212235278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836326
    },
    {
        "content": "<p>Which fact about <code>exp</code> do you want to prove?</p>",
        "id": 212235295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836382
    },
    {
        "content": "<p>I'm sorry that you have to deal with <code>cau_seq</code> here. I was going to migrate it to at least <code>cauchy_seq</code> for months.</p>",
        "id": 212235354,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836451
    },
    {
        "content": "<p>I think, we should have a fact that <code>cau_seq</code> tends to its <code>lim</code>.</p>",
        "id": 212235390,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836523
    },
    {
        "content": "<p>Then <code>continuous_re</code> should help you.</p>",
        "id": 212235401,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836541
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cau_seq.tendsto_limit\">docs#cau_seq.tendsto_limit</a></p>",
        "id": 212235477,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836629
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lim_re</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℂ</span>  <span class=\"n\">complex.abs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℝ</span> <span class=\"n\">abs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f.lim</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g.lim</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">f.tendsto_limit</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">funext</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">complex.continuous_of_real.tendsto</span> <span class=\"n\">g.lim</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">g.tendsto_limit</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212235733,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601836986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 212237812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601839801
    },
    {
        "content": "<p>Ah, thanks. But I'm getting an error at f.tendsto_limit...:</p>\n<p>'tendsto_limit' is not a valid \"field\" because environment does not contain 'subtype.tendsto_limit'<br>\n  f<br>\nwhich has type<br>\n  {f // is_cau_seq complex.abs f}</p>\n<p>?? Thanks!</p>",
        "id": 212249383,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601858809
    },
    {
        "content": "<p>You might be missing the import?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.cau_seq_filter</span>\n</code></pre></div>",
        "id": 212249472,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601858979
    },
    {
        "content": "<p>Maybe I should cut to the chase of what I'm trying to prove; perhaps there's an easier way to do it. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">expLinearization</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n                                 <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                                      <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">complex.abs</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">complex.abs</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">complex.abs</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>That is, if |x|\\le 1 and z is any complex number, then <br>\n|exp(x z ) - (1 + xz)| \\le |x|^2 exp(|z|).</p>\n<p>Human proof:<br>\n|exp(x z ) - (1 + xz)| = | (xz)^2/2! + (xz)^3/3!+... |<br>\n\\le |x|^2 (|z|^2/2!+|z|^3/3!+...) (here using |x|\\le 1)<br>\n\\le |x|^2(1+|z|+|z|^2/2!+|z|^3/3!+...)<br>\n= |x|^2 exp(|z|).</p>",
        "id": 212249537,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601859041
    },
    {
        "content": "<p>That did it, thanks!...</p>",
        "id": 212249565,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1601859113
    },
    {
        "content": "<p>I think you could prove this by Taylor's theorem, right?  That might be the \"high-level\" way (interacting with the API about the derivative of <code>exp</code>, rather than the details of the construction).</p>",
        "id": 212249921,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601859626
    },
    {
        "content": "<p>Here's a PR by an undergraduate student of mine, doing something similar to prove bounds about <code>arctan</code>: <a href=\"https://github.com/leanprover-community/mathlib/issues/4228\">#4228</a></p>",
        "id": 212249954,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601859702
    },
    {
        "content": "<p>Minor problem -- no Taylor's theorem in mathlib yet :) (though messing round with the mean value theorem on a suitable auxiliary function would probably work)</p>",
        "id": 212250081,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601859884
    }
]