[
    {
        "content": "<p>Hi! I am Iurii, new to this Zulip instance. I have a question about runtime representation of Lean types.</p>\n<p>As a beginner, I thought a good learning project would be to formalize simple programming language based on untyped lambda calculus. You can see my attempt at <a href=\"https://gist.github.com/RiscInside/6da4a485b83e6e7e55e7398b62005dce\">https://gist.github.com/RiscInside/6da4a485b83e6e7e55e7398b62005dce</a>.</p>\n<p>I use <code>Expr n</code> as an type for lambda-calculus with de-brujin indices where <code>n</code> is the highest index of the free variable (<code>Expr 0</code> represents expression with no free terms). I have a function called <code>Expr.leftExtend</code> which translates <code>Expr n</code> to <code>Expr (n + 1)</code>. This function does not actually do anything with the term - it simply propogates information down the tree.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Left-extend `Expr n` to `Expr (n + 1)`</span>\n<span class=\"kd\">def</span> <span class=\"n\">Expr.leftExtend</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">evar</span> <span class=\"n\">m</span> <span class=\"n\">m_lt_n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">evar</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_trans</span> <span class=\"n\">m_lt_n</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">emku</span> <span class=\"n\">_</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">emku</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">euop</span> <span class=\"n\">u</span> <span class=\"n\">e</span>        <span class=\"bp\">=&gt;</span> <span class=\"n\">euop</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">e.leftExtend</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ebop</span> <span class=\"n\">b</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">ebop</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">e₁.leftExtend</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂.leftExtend</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eabs</span> <span class=\"n\">e</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">eabs</span> <span class=\"o\">(</span><span class=\"n\">e.leftExtend</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">elet</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>      <span class=\"bp\">=&gt;</span> <span class=\"n\">elet</span> <span class=\"o\">(</span><span class=\"n\">e₁.leftExtend</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂.leftExtend</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ecas</span> <span class=\"n\">e</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">ecas</span> <span class=\"o\">(</span><span class=\"n\">e.leftExtend</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₁.leftExtend</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂.leftExtend</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">efix</span> <span class=\"n\">e</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">efix</span> <span class=\"o\">(</span><span class=\"n\">e.leftExtend</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As I do quite a few left extensions during substitution, I hoped that lean compiler would be able to pick up on the fact that this function is, in fact, a no-op. To check that, I transpiled this lean file to C with <code>lean -c tiny.c Tiny.lean</code>. It turns out, however, that lean does indeed generate code for this function and it is very much not a no-op</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_Expr_leftExtend</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_obj_tag</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">lean_is_exclusive</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_ctor_get</span><span class=\"p\">(</span><span class=\"n\">x_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">x_4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">1u</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n</code></pre></div>\n<p>Is there a way to tell lean compiler this function actually does nothing?</p>",
        "id": 316665134,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1671423287
    },
    {
        "content": "<p>Automatic detection of identity functions like this is on the roadmap but it will probably be a while. To take the code generation into your own hands you can use <code>unsafeCast</code> and <code>implemented_by</code></p>",
        "id": 316666718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671425104
    },
    {
        "content": "<p>Thanks. WIll I lose the ability to reason about this function?</p>",
        "id": 316666834,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1671425237
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">Expr.leftExtendImpl</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">-- Left-extend `Expr n` to `Expr (n + 1)`</span>\n<span class=\"kd\">@[implemented_by Expr.leftExtendImpl]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Expr.leftExtend</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 316666853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671425275
    },
    {
        "content": "<p>nope</p>",
        "id": 316666854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671425279
    },
    {
        "content": "<p>for reasoning purposes is it not different at all</p>",
        "id": 316666900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671425299
    },
    {
        "content": "<p>however it is now up to you to ensure that the unsafe implementation in fact matches the model</p>",
        "id": 316666914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671425335
    },
    {
        "content": "<p>Thanks a lot. Is there a GitHub issue tracking implementation of this functionality?</p>",
        "id": 316666918,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1671425338
    },
    {
        "content": "<p>I don't think there is, but it would be reasonable to open one</p>",
        "id": 316667180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671425526
    },
    {
        "content": "<p>I have opened the issue at <a href=\"https://github.com/leanprover/lean4/issues/1972\">https://github.com/leanprover/lean4/issues/1972</a>. I believe this thread can now be closed (although I am not sure how to do it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 316724102,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1671451265
    }
]