[
    {
        "content": "<p>Hi everyone, I'm new to Lean, and after going through the tutorials, I thought I'd try to tackle the formula for the number of derangements (freek 88).</p>\n<p>The informal argument is pretty straightforward (show an equivalence between derangements(n+2) and derangements on smaller sets), but building that equivalence is proving to be way more verbose than I expected. I'm starting to wonder whether I'm going about this \"against the grain\" of Lean. I suspect that I am, but I'd love to hear what advice more experienced folks can offer.</p>\n<p>I've got a MWE written up (it's just what I have minus all the extra lemmas I didn't need to use): <a href=\"https://pastebin.com/UbjGTp7U\">https://pastebin.com/UbjGTp7U</a></p>\n<p>Since that's pretty long, here's the specific questions I have:</p>\n<ul>\n<li>when should i be using fintype vs finset? I figure the advantage of finset is that I can use plain-old-equality, and not have to juggle subtypes around like in <code>lemma derangement_ignore_two_cycle</code>, right? If that's the case, I think finset is probably more appropriate here.</li>\n<li>how do i make members of <code>{x : perm T // some_predicate}</code> behave like functions? I have to append <code>.val</code> to use them as functions, and I'm not sure how to make that conversion happen automatically. Lines 320 and 321 are particularly awful.</li>\n<li>I have a lot of trouble getting <code>rw</code> to rewrite things, particularly when coercions are involved. This is probably more an art than a science, but are there any rough guidelines that'd help? For example, on line 209, I have to swap the goal and a hypothesis, and then contrapose, because a plain rewrite gave me motive errors.</li>\n<li>Lastly, I'm quite stuck on showing <code>fintype.card {k : fin(n+2) // k ≠ 0 ∧ k ≠ m.succ } = n</code>. It's easy with finsets, but I haven't a clue with fintypes. Maybe that's more evidence the former is more appropriate?</li>\n</ul>",
        "id": 234970024,
        "sender_full_name": "Henry Swanson",
        "timestamp": 1618645684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"402311\">@Henry Swanson</span> Welcome. Your first observation on fintype vs finset sounds right.</p>",
        "id": 234970079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618645753
    },
    {
        "content": "<p>For point two, you want to create an instance of <code>has_coe_to_fun</code> for <code>derangements</code>.</p>",
        "id": 234970087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618645784
    },
    {
        "content": "<p>For point three. Sometimes <code>simp [hyp]</code> will be able to avoid the motive errors. If not, then you might need to refactor parts of the setup. Or live with the DTT pain (-;</p>",
        "id": 234970156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618645844
    },
    {
        "content": "<p>For point 4: I agree. My gut instinct would be to move it to a question about finsets as soon as possible.</p>",
        "id": 234970182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618645908
    },
    {
        "content": "<p>Line 25: <code>:= begin exact bla_bla end</code> is the same as <code>:= bla_bla</code></p>",
        "id": 234970258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618645998
    },
    {
        "content": "<p>I've briefly looked through the rest of the code, and I agree with you that it looks like <code>finset</code> will be easier to work with.</p>",
        "id": 234971539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618647531
    },
    {
        "content": "<p>For your last point, just construct an equiv to <code>fin n</code></p>",
        "id": 234976255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618652907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> On one hand, it's nice to know my intuition was okay, but on the other, this means I have a lot of rewriting to do :) In any case, thank you!<br>\n<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I futzed around with pred_above for a while, but the fact that I can't pass in any element of the domain (it only takes elements of the codomain) made it kinda messy; I'll see if I can get that working again!</p>",
        "id": 235026759,
        "sender_full_name": "Henry Swanson",
        "timestamp": 1618701940
    },
    {
        "content": "<p>You should be able to go via <code>card {k : fin n.succ // k ≠ m} = n</code>, which may or may not be easiee</p>",
        "id": 235029843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618705359
    }
]