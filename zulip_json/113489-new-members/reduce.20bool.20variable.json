[
    {
        "content": "<p>If I have this:</p>\n<div class=\"codehilite\"><pre><span></span>variable b : bool\n#reduce b &amp;&amp; tt\n#reduce b &amp;&amp; ff\n#reduce ff &amp;&amp; b\n#reduce tt &amp;&amp; b\n</pre></div>\n\n\n<p>I get back </p>\n<div class=\"codehilite\"><pre><span></span>b &amp;&amp; tt\nb &amp;&amp; ff\nff\ntt &amp;&amp; b\n</pre></div>\n\n\n<p>my question is why does <code>b &amp;&amp; ff</code> not reduce to <code>ff</code> and  why does <code>tt &amp;&amp; b</code> not reduce to <code>b</code>? Thanks!</p>",
        "id": 177880083,
        "sender_full_name": "Alex Kassil",
        "timestamp": 1570772992
    },
    {
        "content": "<p>The reason is that <code>band</code> (the name for <code>&amp;&amp;</code>) was defined as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">band</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span>  <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n</pre></div>\n\n\n<p>If we would have defined it as follows</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">my_band</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"kn\">variable</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">my_band</span> <span class=\"n\">b</span> <span class=\"n\">tt</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">my_band</span> <span class=\"n\">b</span> <span class=\"n\">ff</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">my_band</span> <span class=\"n\">ff</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">my_band</span> <span class=\"n\">tt</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>then, as you can see <code>tt &amp;&amp; b</code> would reduce to <code>b</code>.</p>\n<p>I don't think that there is a way to define <code>&amp;&amp;</code> so that <em>both</em> <code>ff &amp;&amp; b</code> and <code>b &amp;&amp; ff</code> will reduce to <code>ff</code>: it will have to decide which side it will evaluate first.</p>",
        "id": 177880346,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570773394
    },
    {
        "content": "<p>No doubt you can apply a theorem in the library to get from <code>tt &amp;&amp; b</code> to <code>tt</code>, but <code>#reduce</code> doesn't do that.</p>",
        "id": 177884475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570779164
    }
]