[
    {
        "content": "<p>When I'm faced with a goal such as <code>⇑1 x = x</code>, where the <code>1</code> here is the <code>.one</code> of <code>M ≃ₗ[R] M</code>, how can I efficiently rewrite it into <code>linear_equiv.refl ...</code> according to the definition of <code>linear_map.automorphism_group</code>? I find myself doing some tedious stuff like <code>unfold has_one.one mul_one_class.one monoid.one div_inv_monoid.one group.one</code> before I get to that point.</p>",
        "id": 241639007,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622902823
    },
    {
        "content": "<p>in this case, I think you can close the goal with <code>refl</code>. In general, we have the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a> tactic which lets you change something to anything that's defeq (with some limitations if your term involves applications of functions)</p>",
        "id": 241639088,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622902944
    },
    {
        "content": "<p>Generally you should try to avoid unfolding, and instead use the lemmas that exist in the library.</p>",
        "id": 241639123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622903018
    },
    {
        "content": "<p>Indeed <code>refl</code> works. It is however a bit of a black box to me, so I'm never quite sure when to use it</p>",
        "id": 241639170,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622903051
    },
    {
        "content": "<p>In this particular case, I suspect mathlib is missing a simp lemma...</p>",
        "id": 241639211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622903144
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_one</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 241639265,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622903196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416472\">Winston Yin</span> <a href=\"#narrow/stream/113489-new-members/topic/unfolding.20.221.22/near/241639170\">said</a>:</p>\n<blockquote>\n<p>Indeed <code>refl</code> works. It is however a bit of a black box to me, so I'm never quite sure when to use it</p>\n</blockquote>\n<p>To understand when <code>refl</code> works one has to have a good understanding of (a) what the definition of everything is (which you can get by right clicking on definitions) and (b) what Lean means by definitional equality (the formal definition is <a href=\"https://leanprover.github.io/reference/expressions.html#computation\">here</a>). The first thing to know is that definitional equality is in some sense \"not mathematical\". For example if x is a natural then<code>x + 0 = x</code> is true by <code>refl</code> but <code>0 + x = x</code> is not; to see why this is true you need to know the actual way that addition is implemented on the naturals (i.e. something computer scientists know about addition), as opposed to just the list of properties which it has (i.e. the things mathematicians know about it). The reason <code>refl</code> works here is that you will not be surprised to know that the definition of the isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>:</mo><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">1:M\\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is that it is the map sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>.</p>",
        "id": 241639667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622903857
    },
    {
        "content": "<p>To me the tricky might be the first part—knowing how exactly something is defined. This has been leading me down this tree of definitions on mathlib. Is it right to say that the graph of defeq terms in Lean contains no cycles (diamonds)? So if something is defined equivalently in two ways, e.g. reals as Dedekind cuts vs Cauchy sequences, the two are not defeq?</p>",
        "id": 241643452,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622909243
    },
    {
        "content": "<p>Everything is defined in one way in Lean. You might think that the real numbers has two definitions, but in Lean the real numbers are <em>defined</em> to be equivalence classes of Cauchy sequences, and the isomorphism with Dedekind cuts would not be <code>refl</code>, it would be maps in both directions between different types (in particular it would not even be an equality, it would be something else, namely an <code>equiv</code> : <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv\">docs#equiv</a></p>",
        "id": 241643532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622909351
    },
    {
        "content": "<p>Got it</p>",
        "id": 241643741,
        "sender_full_name": "Winston Yin",
        "timestamp": 1622909693
    },
    {
        "content": "<p>I realise that it's actually quite an involved procedure to find the definition of <code>1</code> for a beginner. Here is how I do it. Step 1 is to make the thing I want to inspect in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>And then I put my cursor just before the <code>sorry</code> and in the infoview I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I then click on the <code>1</code> and I understand enough about the system to know that the output means \"the 1 here has come from <code>mul_one_class.to_has_one (M ≃ₗ[R] M)</code> so I click on that and discover that it's come from the fact that the isomorphisms are a monoid, a so-called <code>div_inv_monoid</code> (an implementation detail defining a mathematical object that mathematicians are not particularly interested in) and ultimately from a group, and the definition is <code>linear_map.automorphism_group</code>. I then click on the little arrow and it takes me to <code>linear_algebra.basic</code> where I see on line 2521 the definition of <code>linear_map.automorphism_group</code>, and <code>one</code> is defined to be <code>linear_equiv.refl R M</code>. I right click on this and see that the map is defined to be <code>linear_map.id</code>, and a final jump to definition, this time in <code>algebra.module.linear_map</code> line 88 shows me that the map is indeed defined to be <code>id</code>, whose definition in core Lean is defined to be <code>id a = a</code>. So now I know that <code>rfl</code> will work.</p>\n<p>You can inspect anything like this -- you can pretty much always figure out what's going on, at least at this kind of level.</p>",
        "id": 241644177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622910361
    },
    {
        "content": "<p>Kevin's method is, of course, the correct way to find the definition of something in vscode, but perhaps I should mention how I approach this.</p>\n<ol>\n<li>I assume that mathlib has the \"reasonable\" definitions for things.</li>\n<li>In this case, there is only one reasonable definition, namely the identity function.</li>\n<li>Hence this should be true <code>by refl</code>.</li>\n</ol>\n<p>Of course these steps fail fairly often, and when that happens (after getting frustrated that what I expect to be the \"reasonable\" definition is not the actual definition) I go digging approximately like Kevin suggests.</p>",
        "id": 241646112,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622912810
    }
]