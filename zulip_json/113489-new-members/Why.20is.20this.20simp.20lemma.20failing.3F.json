[
    {
        "content": "<p>Hi,</p>\n<p>I don't understand why this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_div_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_eq_one_iff_eq</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_div_eq</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I look at the trace, I see that it can't prove that x is nonzero, which is in fact a hypothesis in the example.</p>\n<p>More generally, I am surprised that it takes quite a bit of effort to prove the following multiplicative identity:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>Is there something that I am missing?</p>\n<p>Thank you!</p>",
        "id": 219957971,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608026936
    },
    {
        "content": "<p>[grumble grumble not MWE grumble]</p>",
        "id": 219958034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608026981
    },
    {
        "content": "<p>Presumably <code>simp only [mul_div_eq, h]</code> will work?</p>",
        "id": 219958057,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1608026996
    },
    {
        "content": "<p>It doesn't, but <code>simp only [mul_div_eq h]</code> does.</p>",
        "id": 219958151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20this.20simp.20lemma.20failing.3F/near/219958034\">said</a>:</p>\n<blockquote>\n<p>[grumble grumble not MWE grumble]</p>\n</blockquote>\n<p>Yes, I should have sorry'ed the first lemma. But it was 3 lines...</p>",
        "id": 219958495,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608027278
    },
    {
        "content": "<p>no it's a missing import :-)</p>",
        "id": 219958515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027292
    },
    {
        "content": "<p>Sometimes you get people saying \"this doesn't work\" and then other people say \"yes it does\" and it's all because someone posted something without any imports and then other people use different imports and get different behaviour. That's why it's important.</p>",
        "id": 219958584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027333
    },
    {
        "content": "<p>I should have known this by now...my apologies. I'll edit it to fix the example.</p>",
        "id": 219958680,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608027372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20this.20simp.20lemma.20failing.3F/near/219958034\">said</a>:</p>\n<blockquote>\n<p>[grumble grumble not MWE grumble]</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 219958718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608027399
    },
    {
        "content": "<p>So for your example, this should be closed with <code>field_simp [h], ring</code> and I'm surprised it isn't. <code>field_simp</code> is the tactic you're missing, it should clear denominators. But for some reason it's not doing so.</p>",
        "id": 219958804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027449
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h12x</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">12</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h12x</span><span class=\"o\">],</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219958902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027510
    },
    {
        "content": "<p>Yeah, I was also surprised that I couldn't close this with <code>field_simp</code></p>",
        "id": 219958933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608027540
    },
    {
        "content": "<p>I thought that <code>field_simp</code> knew that 12 wasn't 0 and the product of two nonzero things was nonzero, but apparently it doesn't in this case.</p>",
        "id": 219958939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027546
    },
    {
        "content": "<p>OK, I thought that ring would suffice (I'm happy to add some things are nonzero in the hypotheses list).</p>",
        "id": 219958977,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608027581
    },
    {
        "content": "<p>Even this didn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">12</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219958984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608027593
    },
    {
        "content": "<p>That's probably the wrong 12</p>",
        "id": 219959030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027605
    },
    {
        "content": "<p>About simp: is it possible to make it take the context hypotheses into account when you apply it?</p>",
        "id": 219959037,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608027611
    },
    {
        "content": "<p><code>simp *</code></p>",
        "id": 219959047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027623
    },
    {
        "content": "<p>Yep, with the right 12 that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">12</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219959077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608027652
    },
    {
        "content": "<p><code>ring</code> doesn't know about division, and division is thorny because of division by zero. <code>field_simp</code> is exactly the tactic which puts things over a common denominator and then clears denominators if it can find proofs that they're nonzero.</p>",
        "id": 219959094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027664
    },
    {
        "content": "<p>So I guess <code>field_simp</code> doesn't try using <code>norm_num</code></p>",
        "id": 219959128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608027685
    },
    {
        "content": "<p><del>but it does because there's a 1/6 in there. I think the product is the issue.</del> [Eric seems to be right]</p>",
        "id": 219959151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027702
    },
    {
        "content": "<p>Thanks! I'll clear my proofs a bit with this info... Glad to have learned field_simp (which should be called field, right?)</p>",
        "id": 219959223,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608027731
    },
    {
        "content": "<p>\"The fact that a product is nonzero when all factors are, and that a power of a nonzero number is nonzero, are included in the simpset\" (from the <code>field_simp</code> docstring)</p>",
        "id": 219959248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027752
    },
    {
        "content": "<p><code>field_simp</code> doesn't attempt to close the goal like <code>ring</code> does, it only attempts to simplify it by clearing denominators.</p>",
        "id": 219959273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20is.20this.20simp.20lemma.20failing.3F/near/219959248\">said</a>:</p>\n<blockquote>\n<p>\"The fact that a product is nonzero when all factors are, and that a power of a nonzero number is nonzero, are included in the simpset\" (from the <code>field_simp</code> docstring)</p>\n</blockquote>\n<p>I guess that description is missing \"a nonzero number is nonzero\"?</p>",
        "id": 219959320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608027803
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>does work.</p>",
        "id": 219959489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027909
    },
    {
        "content": "<p>As does <code>simp [h]</code>. So it's the <code>simp only</code> which is blocking things. Aah -- <code>squeeze_simp</code> reports that the issue is that the simplifier algorithm also uses <code>not_false_iff</code> and <code>ne.def</code>.</p>",
        "id": 219959618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608027974
    },
    {
        "content": "<p>I though that <code>simp *</code> applied simp to the goal and to the hypotheses. But I see that it apply simp to the goal <em>using</em> the hypotheses, which is quite different. Thanks!</p>",
        "id": 219959694,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608028041
    },
    {
        "content": "<p>(OK I see, otherwise it's <code>simp at h</code>, my bad.</p>",
        "id": 219959807,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1608028096
    },
    {
        "content": "<p>PS Marc -- Lean already has <code>mul_div_cancel</code> marked as simp so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_div_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works.</p>",
        "id": 219959823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608028109
    },
    {
        "content": "<p>Eric you do seem to be right about the 12 though, which really confuses me because the 6 wasn't a problem on the RHS.</p>",
        "id": 219960255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608028401
    },
    {
        "content": "<p>Oh I see my mistake -- the 6 doesn't get cancelled but <code>ring</code> deals with it anyway somehow.</p>",
        "id": 219960653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608028638
    }
]