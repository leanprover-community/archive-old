[
    {
        "content": "<p>I'm having trouble with handling inductive definitions with overlapping patterns. A MWE of what I'm trying to do (or at least, as minimal as I can get it):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span>\n\n<span class=\"n\">include</span> <span class=\"n\">hg</span>\n<span class=\"n\">def</span> <span class=\"n\">eval_fg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>As far as I understand, this definition is allowed (and it indeed compiles), and when calculating f, it'll take the first matching pattern. But how can I tell Lean that the pattern <code>[0]</code> doesn't match <code>(0 :: g)</code>, and hence it should use the second pattern to evaluate <code>f (0 :: g)</code>?</p>",
        "id": 205651333,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596237540
    },
    {
        "content": "<p>0 :: _ :: l?</p>",
        "id": 205653632,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596240093
    },
    {
        "content": "<p>Because [0] does match 0 :: g</p>",
        "id": 205653704,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596240127
    },
    {
        "content": "<p>Or have f take a proof about the non emptiness of l</p>",
        "id": 205653743,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596240190
    },
    {
        "content": "<p>Your definition is fine too since you included a hypothesis that g != 0.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">eval_fg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Just to add to what he said, [0] is (0 :: nil).</p>",
        "id": 205656468,
        "sender_full_name": "Chris B",
        "timestamp": 1596243776
    },
    {
        "content": "<p>Thanks, that works! I forgot that cases could help me here, as lean does know that <code>0 :: g_hd :: g_tl</code> does not match the pattern <code>[0]</code>. The proof can even be shortened to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">include</span> <span class=\"n\">hg</span>\n<span class=\"n\">def</span> <span class=\"n\">eval_fg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205656766,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596244254
    },
    {
        "content": "<p>How dare you golf me.</p>",
        "id": 205656796,
        "sender_full_name": "Chris B",
        "timestamp": 1596244295
    }
]