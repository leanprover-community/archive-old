[
    {
        "content": "<p>I need <code>dfinsupp</code> for graded rings, modules, etc, but <code>polynomial</code> is implemented with <code>finsupp</code>, so to construct the polynomial ring as an example for a graded ring, I need an isomorphism between those in the non dependent case. Is there one somewhere? I've looked for some time but couldn't find anything.</p>",
        "id": 206715070,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597248535
    },
    {
        "content": "<p>I guess this would be trivial if <code>finsupp</code> was implemented using <code>dfinsupp</code>. Is there a reason why this isn't the case?</p>",
        "id": 206715327,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597248660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> you sometimes complain about <code>polynomial</code>. How should we fix it?</p>",
        "id": 206723403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597252739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282095\">Andre Knispel</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20and.20non.20dependent.20finsupp/near/206715327\">said</a>:</p>\n<blockquote>\n<p>I guess this would be trivial if <code>finsupp</code> was implemented using <code>dfinsupp</code>. Is there a reason why this isn't the case?</p>\n</blockquote>\n<p>When I wrote <code>dfinsupp</code> I cared about computability so I made sure that everything was computable, and <code>finsupp</code> wasn't computable.</p>",
        "id": 206728097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597254950
    },
    {
        "content": "<p>So what's your opinion now that you no longer care about computability? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 206728176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597254974
    },
    {
        "content": "<p>well if <code>dfinsupp</code> were to be constructed using <code>finsupp</code> then we would need to map it to some sort of wedged disjoint union?</p>",
        "id": 206728290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597255037
    },
    {
        "content": "<p>this doesn't sound very beautiful to me</p>",
        "id": 206728305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597255045
    },
    {
        "content": "<p>Other way around</p>",
        "id": 206728345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597255061
    },
    {
        "content": "<p>oh</p>",
        "id": 206728369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597255073
    },
    {
        "content": "<p>then this would make <code>finsupp</code> computable? :P</p>",
        "id": 206728392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597255081
    },
    {
        "content": "<p>Oh dang, can't have that!</p>",
        "id": 206728471,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597255111
    },
    {
        "content": "<p>that would make polynomials worse, right?</p>",
        "id": 206730803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597256180
    },
    {
        "content": "<p>the implementation shouldn't matter!</p>",
        "id": 206731740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597256623
    },
    {
        "content": "<p>hm, I guess I'll just redefine the polynomial ring using <code>dfinsupp</code> then for now. Should I open an issue for the larger issue of making these compatible?</p>",
        "id": 206742445,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597262065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282095\">Andre Knispel</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20and.20non.20dependent.20finsupp/near/206742445\">said</a>:</p>\n<blockquote>\n<p>redefine the polynomial ring using <code>dfinsupp</code></p>\n</blockquote>\n<p>Could you explain what you mean by this?</p>",
        "id": 206744622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597263031
    },
    {
        "content": "<p><code>def polynomial (α : Type*) [comm_semiring α] := Π₀ _ : ℕ, α</code></p>",
        "id": 206744885,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597263165
    },
    {
        "content": "<p>Why would this be necessary to make polynomials an example of a graded ring?</p>",
        "id": 206746109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597263649
    },
    {
        "content": "<p>it's not necessary, but I need it to be at least isomorphic to this type</p>",
        "id": 206746292,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597263724
    },
    {
        "content": "<p>I've tried to construct this isomorphism and got stuck on some details that I don't really want to mess with, so this seems easier</p>",
        "id": 206746601,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597263846
    },
    {
        "content": "<p>Redefining a structure to make it an example of something doesn't seem sustainable--what happens when the next person wants to make it an example of something else?</p>",
        "id": 206746681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597263892
    },
    {
        "content": "<p>well, what I really want is for <code>finsupp</code> and <code>dfinsupp</code> to be compatible, but that's too much work for me right now. I just want to take the path of least resistance to construct the projective space as a scheme</p>",
        "id": 206746978,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597264046
    },
    {
        "content": "<p>I really don't think the path of least resistance can be to redefine <code>polynomial</code>. The API already characterizes it up to isomorphism, so if you manage to avoid breaking all the users then this is tantamount to constructing the isomorphism you are interested in anyways.</p>",
        "id": 206749033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597265080
    },
    {
        "content": "<p>true, but I don't intend to actually redefine polynomial, just to have an equivalent definition for that single use case.</p>",
        "id": 206749904,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597265524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282095\">@Andre Knispel</span> I am going to challenge your assertion that you \"need\" dfinsupp for graded rings, modules etc. What do you mean by this? I can't imagine why I would need any particular implementation to make the specification for graded rings and modules.</p>",
        "id": 206755576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597268124
    },
    {
        "content": "<p>Well, I need to form a direct sum over a family indexed by a monoid. So I don't necessarily need exactly <code>dfinsupp</code>, but at least something equivalent</p>",
        "id": 206755888,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597268305
    },
    {
        "content": "<p>Aah I see -- you don't have a 0 so you can't use <code>finsupp</code>?</p>",
        "id": 206756065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597268434
    },
    {
        "content": "<p>No, the modules I'm summing need to depend on the index</p>",
        "id": 206756136,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597268496
    },
    {
        "content": "<p>Oh I see -- I am finally on your wavelength.</p>",
        "id": 206756304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597268582
    },
    {
        "content": "<p>oh but if you do it this way then you're going to end up in dependent type theory hell aren't you? Did you see the CDGA thread? Maybe you should do some trick with sigma types?</p>",
        "id": 206756520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597268697
    },
    {
        "content": "<p>No, do you have a link to that thread?</p>",
        "id": 206756641,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597268780
    },
    {
        "content": "<p>PS you know schemes aren't yet in mathlib, right? Somehow people decided to do sheafification using category theory and this has slowed the process up</p>",
        "id": 206756667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597268801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282095\">Andre Knispel</span> <a href=\"#narrow/stream/113489-new-members/topic/Dependent.20and.20non.20dependent.20finsupp/near/206756641\">said</a>:</p>\n<blockquote>\n<p>No, do you have a link to that thread?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/116395-maths/topic/CDGAs/near/167848869\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/CDGAs/near/167848869</a></p>",
        "id": 206756713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597268843
    },
    {
        "content": "<p>yes, I intend to build on lean-scheme and maybe make a PR when I'm done</p>",
        "id": 206756750,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597268875
    },
    {
        "content": "<p>Thanks! One advantage I see in this simpler case is that there is an actual ring structure to build on top of, so most of the axioms are free</p>",
        "id": 206757260,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597269174
    },
    {
        "content": "<p>I already have definitions for graded rings and homogeneous modules over them that seem to work fine, though I haven't proved anything yet with them</p>",
        "id": 206757495,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597269328
    },
    {
        "content": "<p>maybe I should just construct the functor mapping regular rings to graded rings concentrated in degree 0 for an easier example...</p>",
        "id": 206757597,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597269379
    },
    {
        "content": "<p>I think this is a really interesting and worthwhile project. I think that <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> tried to construct <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">P</mi><mi>R</mi><mn>1</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^1_R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.089439em;vertical-align:-0.275331em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.424669em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"><span></span></span></span></span></span></span></span></span></span> before but by explicitly glueing two copies of affine 1-space.</p>",
        "id": 206757678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597269447
    },
    {
        "content": "<p>I looked a little bit at that, but I don't think there is much I can take from there to make it easier for me</p>",
        "id": 206758539,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597269969
    },
    {
        "content": "<p>theoretically you can show that finsupp and dfinsupp are isomorphic by using their universal properties</p>",
        "id": 206786615,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597302863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> how would you set up graded rings and modules?</p>",
        "id": 206786736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597302988
    },
    {
        "content": "<p>definitely not by requiring that every graded ring / module be a dfinsupp</p>",
        "id": 206786769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303033
    },
    {
        "content": "<p>but merely isomorphic to one</p>",
        "id": 206786774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303044
    },
    {
        "content": "<p>Oh yes this is a crucial point.</p>",
        "id": 206786797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597303063
    },
    {
        "content": "<p>Because someone will come along with some completely different construction and then in the literature it will say \"hence we see R is a graded ring\" and it's crucial that it can become an instance of graded_ring</p>",
        "id": 206786892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597303161
    },
    {
        "content": "<p>exactly</p>",
        "id": 206786977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303252
    },
    {
        "content": "<p>implementation (of the ring) should not matter at all</p>",
        "id": 206786985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303263
    },
    {
        "content": "<p>So it should be a predicate on a pair consisting of a ring and a map from nat to the subsets of the ring?</p>",
        "id": 206787103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597303376
    },
    {
        "content": "<p>or something mathematically equivalent, yes</p>",
        "id": 206787131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303405
    },
    {
        "content": "<p>Or instead of nat you can use any add_comm_monoid or something</p>",
        "id": 206787134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597303411
    },
    {
        "content": "<p>but never equality</p>",
        "id": 206787153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597303439
    },
    {
        "content": "<p>Let me copy my current definition (of graded abelian group) here</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">graded_abelian_group</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">piece</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">group</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">piece</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">iso</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span><span class=\"bp\">+</span> <span class=\"n\">direct_sum</span> <span class=\"n\">M</span> <span class=\"n\">piece</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I don't really see how I would form direct sums with subsets, but this seems to work just fine</p>",
        "id": 206795017,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597310404
    },
    {
        "content": "<p>Using the universal properties to show the isomorphism is a good point, I didn't think about that!</p>",
        "id": 206795221,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597310575
    },
    {
        "content": "<p>This definition definitely avoids the problems I was worried about</p>",
        "id": 206795239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597310595
    },
    {
        "content": "<p>You will have the usual problems with equality but  c'est la vie</p>",
        "id": 206795357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597310689
    },
    {
        "content": "<p>The requirement of decidable equality on <code>M</code> annoys me a little, but I guess that's the price to be paid for  computability in<code>dfinsupp</code></p>",
        "id": 206795404,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597310742
    },
    {
        "content": "<p>The advantage of the <code>M -&gt; set alpha</code> approach is that you get a better equality</p>",
        "id": 206795419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597310758
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</code></pre></div>",
        "id": 206795473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597310785
    },
    {
        "content": "<p>If you're doing schemes then you'll have to do this.</p>",
        "id": 206795482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597310799
    },
    {
        "content": "<p>How much experience do people have with set theoretic vs type theoretic constructions in these contexts? In an ideal world, we could have both, what I did and using subsets instead interchangeably and choose whatever is better right now</p>",
        "id": 206795839,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597311077
    },
    {
        "content": "<p>I imagine I could make another class that uses subsets instead, show that those types are isomorphic, and then redefine <code>graded_abelian_group</code> such that it works with both of those definitions. But I don't know how well this would work in practice</p>",
        "id": 206796147,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597311362
    },
    {
        "content": "<p>When you make classes you're basically making categories, so if you make two classes you're making two categories, and then the dictionary is an equivalence (not an isomorphism) between them.</p>",
        "id": 206796249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597311433
    },
    {
        "content": "<p>Now I'm thinking that that might not be necessary, I can also just define the subsets from here, and then work with them whenever it's convenient</p>",
        "id": 206796342,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597311511
    },
    {
        "content": "<p>Lean has functional and set extensionality, so if you start with M -&gt; set alpha and then move to the type thing and then back to M, you'll get something which is provably (but not definitionally) equal; the other way you'll get something which is not provably equal.</p>",
        "id": 206796346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597311514
    },
    {
        "content": "<p>But equality is the wrong concept in category theory. This is a shame, because it's an extremely convenient concept to work with, e.g. <code>rw</code> works great.</p>",
        "id": 206796375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597311558
    },
    {
        "content": "<p>The crucial insight we had with localisation (which also had this sort of issue -- the localisation of R at f is one concretely defined ring R[1/f], but unfortunately R[1/f][1/g] is not literally equal to R[1/fg] so one has to work with isomorphisms instead. We still can't transfer ring-theoretic properties along isomorphisms so the trick is to prove things for any ring satisfying the universal property directly.</p>",
        "id": 206796552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597311724
    },
    {
        "content": "<p>That sounds familiar, I expect that's the same issue as for any explicit constructions with limits</p>",
        "id": 206796612,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597311808
    },
    {
        "content": "<p>I think the set definition is kind of better because it doesn't have this extra Type-valued data <code>piece</code>, and it has better equality properties. I think I'd be tempted to try</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">graded_abelian_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">grading</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span><span class=\"o\">(</span><span class=\"n\">axioms</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206796757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597311940
    },
    {
        "content": "<p>But I'm not very good at definitions; <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> will have an opinion which is worth a lot more weight.</p>",
        "id": 206796828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597311974
    },
    {
        "content": "<p>I wonder if it makes a difference though, I'm pretty sure I can define <code>grading</code></p>",
        "id": 206796893,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597312058
    },
    {
        "content": "<p>Do we have the notion of an internal direct sum already?</p>",
        "id": 206798973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597313821
    },
    {
        "content": "<p>The difference is simply that the add_subgroup definition has a better-behaved equality. In a category the concept of equality is kind of barely relevant. If you have two unequal but isomorphic objects X and Y in a category and you decide to make them equal then you end up with a quotient category, equivalent to your original category; if the category didn't change up to equivalence then you didn't really change anything. You're suggesting a definition and I'm suggesting a definition where a whole bunch of isomorphic objects become equal. The definitions are equivalent, but equality is easier to work with in Lean than isomorphism, so the more of it you have, the better.</p>\n<p>If the answer to Reid's question is \"yes\" then you should use this.</p>",
        "id": 206806764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597320490
    },
    {
        "content": "<p>Ah, I got confused, I thought you were talking about equality in the ring, not of graded rings</p>",
        "id": 206809763,
        "sender_full_name": "Andre Knispel",
        "timestamp": 1597322578
    },
    {
        "content": "<p>we are talking about type equality, <span class=\"user-mention\" data-user-id=\"282095\">@Andre Knispel</span> , which we do not talk about</p>",
        "id": 206812107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597324025
    }
]