[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to understand how to generate the free module of rank n over a commutative ring R.  I do not understand how to use the <code>\\oplus</code> notation, so I was wondering if the definition below constructs what I think it does!</p>\n<p>Also, how to I construct a <code>linear_map</code> between free modules?  Or, at least, how can I have a <code>linear_map</code> as a hypothesis of a lemma/theorem/proposition?</p>\n<p>Thank you very much!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">direct_sum</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">free</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}),</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 208440352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598716337
    },
    {
        "content": "<p><code>def free (R : Type u) [comm_ring R] (n : ℕ) := fin n -&gt; R</code> probably works fine</p>",
        "id": 208441110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598717268
    },
    {
        "content": "<p>You might want to import algebra.pi_instances if you haven't already; I think this is the import which gives it the module structure.</p>",
        "id": 208441160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598717307
    },
    {
        "content": "<p>Thanks: I will try with algebra.pi_instances!</p>",
        "id": 208441325,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598717551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you make your own definition, you will have to reprove all the basic lemmas</p>",
        "id": 208441782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598718138
    },
    {
        "content": "<p>I think it is easier to try to learn how to use the free modules that are already in mathlib.</p>",
        "id": 208441792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598718156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have tried to use the symbols for direct_sums, but I have failed.  I am happy to use what is available, but I am not able to...</p>",
        "id": 208442076,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598718522
    },
    {
        "content": "<p>I haven't used the symbols either</p>",
        "id": 208442102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598718564
    },
    {
        "content": "<p>I would probably use <code>finsupp</code></p>",
        "id": 208442107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598718577
    },
    {
        "content": "<p>I think <code>X -&gt; R</code> is the canonical product of R's over X, and X -&gt;_0 R is the canonical direct sum.</p>",
        "id": 208442178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598718657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208442178\">said</a>:</p>\n<blockquote>\n<p>I think <code>X -&gt; R</code> is the canonical product of R's over X, and X -&gt;_0 R is the canonical direct sum.</p>\n</blockquote>\n<p>Ok, as I have only finitely generated free modules, I should be able to choose which one I prefer!  Hopefully, I can also find an isomorphism between the two, in case I need to go back and forth...</p>",
        "id": 208442286,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598718805
    },
    {
        "content": "<p>In any case, all that I should need is the following statement: if f is an endomorphism of a free module of rank n over an integral domain and f^n is not the zero endomorphism, then no power of f is the zero endomorphism.</p>",
        "id": 208442460,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598718979
    },
    {
        "content": "<p>That's not true -- consider multiplication by 2 on (Z/2^{100}Z)^3</p>",
        "id": 208442489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719028
    },
    {
        "content": "<p>oh sorry! ID!</p>",
        "id": 208442495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719041
    },
    {
        "content": "<p>Yes that's totally true, and should be fun to prove in Lean.</p>",
        "id": 208442501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719053
    },
    {
        "content": "<p>I also made that mistake, <em>integral domain</em> is crucial!</p>",
        "id": 208442502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719055
    },
    {
        "content": "<p>and then is just a statement about nilpotent matrices and their characteristic polynomial</p>",
        "id": 208442556,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719083
    },
    {
        "content": "<p>Right. I don't know if this stuff is in mathlib but it should be by now. Do we have Cayley Hamilton?</p>",
        "id": 208442571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719110
    },
    {
        "content": "<p>i saw it somewhere, but i was trying to get to define the modules, before i went further on how to prove stuff</p>",
        "id": 208442586,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719139
    },
    {
        "content": "<p>You should prove it for fields first using CH and then deduce it for IDs using field of fractions</p>",
        "id": 208442592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719144
    },
    {
        "content": "<p>mathlib/src/linear_algebra/char_poly.lean:# Characteristic polynomials and the Cayley-Hamilton theorem<br>\nmathlib/src/linear_algebra/char_poly.lean:The Cayley-Hamilton theorem, that the characteristic polynomial of a matrix,</p>",
        "id": 208442610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719175
    },
    {
        "content": "<p>(i grepped Cayley-Hamilton)</p>",
        "id": 208442618,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208442592\">said</a>:</p>\n<blockquote>\n<p>You should prove it for fields first using CH and then deduce it for IDs using field of fractions</p>\n</blockquote>\n<p>yes, that is what my strategy was, but i have been unable to start... even a vector space!  ahahaha</p>",
        "id": 208442669,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719234
    },
    {
        "content": "<p>You don't have to grep: <a href=\"/user_uploads/3121/nWOTJF5V16kq8OzLb8-OC9_l/ch.png\">ch.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nWOTJF5V16kq8OzLb8-OC9_l/ch.png\" title=\"ch.png\"><img src=\"/user_uploads/3121/nWOTJF5V16kq8OzLb8-OC9_l/ch.png\"></a></div>",
        "id": 208442681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719245
    },
    {
        "content": "<p>CH is proved for matrices in that file.</p>",
        "id": 208442708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719289
    },
    {
        "content": "<p>Note that the rows and columns are indexed by an arbitrary finite type <code>n</code> in that file.</p>",
        "id": 208442765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208442681\">said</a>:</p>\n<blockquote>\n<p>You don't have to grep: <a href=\"/user_uploads/3121/nWOTJF5V16kq8OzLb8-OC9_l/ch.png\">ch.png</a></p>\n</blockquote>\n<p>how did you open \"search\"?</p>",
        "id": 208442770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719336
    },
    {
        "content": "<p>Don't worry about the proofs but try and read the definitions and theorem statements in the Lean file.</p>",
        "id": 208442776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719352
    },
    {
        "content": "<p>I opened search with the magnifying glass in the toolbar on the left of VS Code. But there's a gotcha.</p>",
        "id": 208442781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208442781\">said</a>:</p>\n<blockquote>\n<p>I opened search with the magnifying glass in the toolbar on the left of VS Code. But there's a gotcha.</p>\n</blockquote>\n<p>indeed: my lean does not search mathlib...</p>",
        "id": 208442804,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719424
    },
    {
        "content": "<p>Can you see the cog on my screenshot, which isn't blue? If the search doesn't work for you, then it might be because you're using Lean in a project which has mathlib as a dependency, and VS Code is not searching dependencies (because this is the default behaviour). Click on the three dots and then on the blue cog to unblue it.</p>",
        "id": 208442810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719431
    },
    {
        "content": "<p>I have told this to 100 students.</p>",
        "id": 208442857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719466
    },
    {
        "content": "<p>got it: thanks!!!</p>",
        "id": 208442979,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719664
    },
    {
        "content": "<p>So now we have Cayley Hamilton for matrices, but if you really want to prove something for free modules you're going to have to learn about how to move between matrices and linear maps in Lean, and I have no idea how to do this.</p>",
        "id": 208443038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719742
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/matrix.html\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/matrix.html</a></p>",
        "id": 208443092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598719809
    },
    {
        "content": "<p>That's the file you are looking for. And it will get better once <a href=\"https://github.com/leanprover-community/mathlib/issues/3919\">#3919</a> is merged. And then a very nice project would be to split it into well documented smaller files.</p>",
        "id": 208443130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598719889
    },
    {
        "content": "<p>Ok, I can probably reduce to the case of fields, if taking fields of fractions of integral domains is straightforward</p>",
        "id": 208443192,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598719975
    },
    {
        "content": "<p>Great! Thanks Patrick! So now here are some exercises.</p>\n<p>1) Prove that if phi is a linear map from (n -&gt; R) to (n -&gt; R) and f is the char poly of the corresponding matrix, then f(phi)=0. </p>\n<p>2) Prove that if phi=T^n then phi^n=0</p>\n<p>3) Prove that if a matrix is nilpotent then its char poly is T^n (this might be in the library, but it might not be; it doesn't technically need eigenvalues but they might help)</p>",
        "id": 208443198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719991
    },
    {
        "content": "<p>I don't see what eigenvalues have to do with 3).</p>",
        "id": 208443272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720071
    },
    {
        "content": "<p>given two polynomials <code>f g : polynomial R</code> with <code>g</code> monic, i want to show that <code>f</code> is in the radical of <code>g</code> if <code>f^(nat_degree g)</code> is a multiple of <code>g</code>.  This boils down to viewing <code>f</code> as a linear map on <code>quotient (ideal.span {g})</code>, which is a free R module...</p>",
        "id": 208443319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720146
    },
    {
        "content": "<p>I think mathlib knows that polynomial annihilating a given endormorphism form an ideal and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is principal, so we have a minimal polynomial which if some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span> and divides the characteristic polynomial which has degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>",
        "id": 208443330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720155
    },
    {
        "content": "<p>The previous message is still answering Kevin, not Damiano</p>",
        "id": 208443382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208443382\">said</a>:</p>\n<blockquote>\n<p>The previous message is still answering Kevin, not Damiano</p>\n</blockquote>\n<p>yes, but I am also following the side conversation!</p>",
        "id": 208443392,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208443192\">said</a>:</p>\n<blockquote>\n<p>Ok, I can probably reduce to the case of fields, if taking fields of fractions of integral domains is straightforward</p>\n</blockquote>\n<p>Yes, this should be straight-forward. But I haven't thought about the rest of the steps. Is there tensoring involved?</p>",
        "id": 208443403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598720242
    },
    {
        "content": "<p>The \"down with determinants\" (Axler) philosophy says \"come on, this has nothing to do with determinants\", and perhaps Patrick has signed up for this, but the determinant proof is \"char poly = prod (T-eigenvalues) and if v is an eigenvector (work in an alg closure) with eigenvalue lambda then lambda^(big)=0 if phi is nilpotent so char poly = T^n\".</p>",
        "id": 208443414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208443403\">said</a>:</p>\n<blockquote>\n<p>Yes, this should be straight-forward. But I haven't thought about the rest of the steps. Is there tensoring involved?</p>\n</blockquote>\n<p>Not necessarily, but you should convince Lean that multiplying by <code>f</code> on <code>polynomial R</code> descends to a linear endomorphism on the quotient by <code>g</code>.</p>",
        "id": 208443461,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720315
    },
    {
        "content": "<p>I still prefer my proof <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 208443462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720320
    },
    {
        "content": "<p>(and possibly afterwards taking field of fractions: this could be viewed as tensoring, but it is also just including an integral domain in a larger field...)</p>",
        "id": 208443476,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720356
    },
    {
        "content": "<p>(I guess that you can also view the quotient by <code>g</code> as a tensor product, though...)</p>",
        "id": 208443571,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720451
    },
    {
        "content": "<p>Anyway, the biggest obstacle for me at the moment is to understand how to define free modules/vector spaces.  if i can do one of these two, then it will likely be how to convert multiplication by an element into an endomorphism and after that, how to reduce to fields of fractions</p>",
        "id": 208443646,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720533
    },
    {
        "content": "<p>how do you type the small \\iota in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 208443752,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720757
    },
    {
        "content": "<p><code>\\l</code></p>",
        "id": 208443798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720773
    },
    {
        "content": "<p>It stand for \"linear\"</p>",
        "id": 208443804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720782
    },
    {
        "content": "<p>hence the l</p>",
        "id": 208443809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720785
    },
    {
        "content": "<p>It was at about this point when we realised that our naming conventions were not really scaling well.</p>",
        "id": 208443824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720806
    },
    {
        "content": "<p><code>\\l</code> types a left pointing arrow on my keyboard</p>",
        "id": 208443834,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720819
    },
    {
        "content": "<p>Of course all this would be solved if we moved to categories</p>",
        "id": 208443836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720823
    },
    {
        "content": "<p>It might be <code>\\_l</code></p>",
        "id": 208443839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720830
    },
    {
        "content": "<p>oops, I meant <code>\\_l</code></p>",
        "id": 208443843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720840
    },
    {
        "content": "<p>I was too focused on getting the <code>\\</code> right (since I don't use backslash)</p>",
        "id": 208443854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598720865
    },
    {
        "content": "<p>ah, <code>\\_l</code> produces the symbol!  i was convinced that it was a small \\iota...</p>",
        "id": 208443856,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720872
    },
    {
        "content": "<p>thank you both anyway!</p>",
        "id": 208443893,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720885
    },
    {
        "content": "<p>Patrick's proof is much more lean-friendly, because we know k[X] is a PID and a UFD, and there is machinery there.</p>",
        "id": 208443904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598720905
    },
    {
        "content": "<p>this was also the proof that i had in mind</p>",
        "id": 208443909,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720917
    },
    {
        "content": "<p>anyway, i will go back to learning about free modules, whether over a commutative (semi-)ring which may or may not be an integral domain or a field!</p>",
        "id": 208443937,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598720987
    },
    {
        "content": "<p>in the end, the fractions are there just for psychological reasons: the given arguments almost never use them anyway... i guess this is the same with the <em>semi</em>ring distinction, athough i have never thought about that seriously...</p>",
        "id": 208444006,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598721047
    },
    {
        "content": "<p>Damiano -- for your radical approach it's obvious that if f^(nat_degree g) is a multiple of g then f is in the radical of g. You mean the other way around, right? If f is in the radical of g then f^M is a multiple of g, so all prime factors of g in k[X] divide f^M and hence f, so g divides f^(number of prime factors of g counted with multiplicity) and now you have to show the number of prime factors of g is at most deg(g) because all primes have degree &gt;= 1 -- it might be easier to work over a field here.</p>",
        "id": 208444025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598721095
    },
    {
        "content": "<p>Yes, I want to show that if some power of f is in <del>the radical</del> (g), then f^(deg g) is in <del>the radical</del> (g).  I am even thinking that i might do without knowing the explicit power, but I must check that the maths side of things does not actually rely on knowing a priori a fixed bound</p>",
        "id": 208444097,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598721208
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 208444154,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598721259
    },
    {
        "content": "<p>if only i had access to a proof checker, to convince myself that not having an a priori bound still makes the proof go through...</p>",
        "id": 208444190,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598721338
    },
    {
        "content": "<p>One potential stumbling block with <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>’s method is that we have <code>minimal_polynomial</code> in mathlib, but only for elements of commutative algebras</p>",
        "id": 208444251,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598721427
    },
    {
        "content": "<p>It’s probably still the best approach, but fixing that probably ought to happen first</p>",
        "id": 208444316,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598721499
    },
    {
        "content": "<p>Oh, I didn't know that. The \"minimal polynomial\" entry of the <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">overview</a> is completely misleading then.</p>",
        "id": 208444522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598721830
    },
    {
        "content": "<p>Wait. Isn't it more general?</p>",
        "id": 208444580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598721869
    },
    {
        "content": "<p>(to close up a hanging thread: i think that the the proof that i know does need some form of upper bound on the power of <code>f</code> that is in the ideal <code>(g)</code> that is independent on <code>f</code>.)</p>",
        "id": 208444603,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598721931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208444522\">said</a>:</p>\n<blockquote>\n<p>Oh, I didn't know that. The \"minimal polynomial\" entry of the <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">overview</a> is completely misleading then.</p>\n</blockquote>\n<p>In my case, this seems what I want: B=R[x]/(g) is an A=R algebra and multiplication by f induces the element x.   if i can convert this into lean, i should be good to go!</p>",
        "id": 208444789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722165
    },
    {
        "content": "<p>is <code>polynomial R</code> an algebra over <code>R</code>?  Is <code>quotient g</code> an algebra over <code>R</code>?</p>",
        "id": 208444868,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722243
    },
    {
        "content": "<p>I'm sure Lean knows about the first one at least.</p>",
        "id": 208444878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722274
    },
    {
        "content": "<p>assuming that <code>g</code> is monic, does lean know that <code>quotient g</code> is finite over <code>R</code>?</p>",
        "id": 208444882,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722286
    },
    {
        "content": "<p>(i guess that these are the steps that i will need to understand, i am fleshing them out here, mostly for future reference for myself!  of course, if someone can start ticking them off, i will gladly take the help!)</p>",
        "id": 208444938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722330
    },
    {
        "content": "<p>Oh no, I just realized the import word in Aaron's message is <em>commutative</em>.</p>",
        "id": 208444961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722387
    },
    {
        "content": "<p>my rings are <em>always</em> commutative</p>",
        "id": 208444969,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722402
    },
    {
        "content": "<p>So yes, this need to be fixed first.</p>",
        "id": 208444970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722402
    },
    {
        "content": "<p>The base ring is not the issue.</p>",
        "id": 208444975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722415
    },
    {
        "content": "<p>The issue for minimal polynomial of an endomorphism is the endomorphism algebra is not commutative.</p>",
        "id": 208444983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722436
    },
    {
        "content": "<p>but I am ok with working with the endomorphisms that are linear combinations of multiples of a single one, so this is still commutative, no?  am i missing something?</p>",
        "id": 208445056,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722539
    },
    {
        "content": "<p>(i only have multiplication by a fixed element <code>f</code>, nothing else)</p>",
        "id": 208445097,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722570
    },
    {
        "content": "<p>That sounds fine.</p>",
        "id": 208445103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722579
    },
    {
        "content": "<p>I'm only complaining we can't use the <code>minimal_polynomial</code> we have in mathlib.</p>",
        "id": 208445115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722617
    },
    {
        "content": "<p>It's a bit sad that our brand new <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_algebra.eigenspace\">docs#linear_algebra.eigenspace</a> file doesn't include existence of the minimal polynomial.</p>",
        "id": 208445197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722729
    },
    {
        "content": "<p>Our <code>minimal_polynomial</code> file also doesn’t really use PID or UFD theory very explicitly, for better or worse</p>",
        "id": 208445227,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598722799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/free.20modules/near/208445197\">said</a>:</p>\n<blockquote>\n<p>It's a bit sad that our brand new <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_algebra.eigenspace\">docs#linear_algebra.eigenspace</a> file doesn't include existence of the minimal polynomial.</p>\n</blockquote>\n<p>...and that the link is broken...</p>",
        "id": 208445279,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598722821
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/eigenspace.html\">https://leanprover-community.github.io/mathlib_docs/linear_algebra/eigenspace.html</a></p>",
        "id": 208445288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722842
    },
    {
        "content": "<p>I don't know how to use the linkifier for file names.</p>",
        "id": 208445294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598722855
    }
]