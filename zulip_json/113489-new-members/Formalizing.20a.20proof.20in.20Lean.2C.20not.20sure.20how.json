[
    {
        "content": "<p>I have an informal proof and I'm curious how to formalize it in Lean. I'll strip away the details: Broadly the algorithm goes like this:</p>\n<p>We  have a tree (i.e. a DAG) <code>G</code>, where each node <code>N</code> has some data associated to it in the form of a function <code>D:G.Nodes\\to DataType1</code>.  We are also given a function <code>F</code> that takes a tree with data<code>(G,D)</code>, and outputs another tree <code>(G,D')</code>where <code>D'</code> differs from <code>D</code> on the root node of the tree and its child nodes. We want to use <code>F</code> to recursively adjust the data in the tree.</p>\n<p>I have an algorithm <code>H</code>, which recursively applies <code>F</code>, but it recurses \"forwards\" on the graph. This is pseudocode:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">--informal definition</span>\n  <span class=\"n\">for</span> <span class=\"n\">each</span> <span class=\"n\">child</span> <span class=\"n\">node</span> <span class=\"n\">c</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">root</span> <span class=\"n\">node</span> <span class=\"n\">of</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">Let</span> <span class=\"o\">(</span><span class=\"n\">G_c</span><span class=\"o\">,</span> <span class=\"n\">D_c</span><span class=\"o\">)</span> <span class=\"n\">be</span> <span class=\"n\">the</span> <span class=\"n\">subgraph</span> <span class=\"n\">of</span> <span class=\"n\">G</span> <span class=\"n\">starting</span> <span class=\"k\">with</span> <span class=\"n\">c</span>\n    <span class=\"n\">Let</span> <span class=\"o\">(</span><span class=\"n\">G_x</span><span class=\"o\">,</span> <span class=\"n\">D&#39;_c</span><span class=\"o\">)</span> <span class=\"n\">be</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">of</span> <span class=\"n\">H</span> <span class=\"n\">applied</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">G_c</span><span class=\"o\">,</span> <span class=\"n\">D_c</span><span class=\"o\">)</span>\n  <span class=\"n\">Let</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"err\">\\</span><span class=\"n\">tilde</span> <span class=\"n\">D&#39;</span><span class=\"o\">)</span> <span class=\"n\">be</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">of</span> <span class=\"n\">replacing</span> <span class=\"n\">the</span> <span class=\"n\">subgraphs</span> <span class=\"o\">(</span><span class=\"n\">G_c</span><span class=\"o\">,</span> <span class=\"n\">D_c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">G_c</span><span class=\"o\">,</span> <span class=\"n\">D&#39;_c</span><span class=\"o\">)</span> <span class=\"n\">for</span> <span class=\"n\">each</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">Let</span> <span class=\"n\">H</span><span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"n\">D&#39;</span><span class=\"o\">)</span> <span class=\"n\">be</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">of</span> <span class=\"n\">applying</span> <span class=\"n\">F</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"err\">\\</span><span class=\"n\">tilde</span> <span class=\"n\">D&#39;</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Intuitively, the algorithm first moves all the way to the leaves of the tree, applies <code>F</code> there, and then recurses backwards. We know that the graph is finite.</p>\n<p><strong>Here is what I don't know how to formalize</strong>: I want to use this algorithm in an existence proof (<code>H</code> shows that for any pair <code>(G,D)</code> there exists a pair <code>(G,D')</code> with certain properties that I won't go into), but <strong>this definition uses a form of recursion that is different from well-founded recursion e.g. on the natural numbers.</strong> In fact it seems to me like I can't even define <code>H</code> in lean without the <code>meta</code> keyword because it is not using well-founded recursion. <strong>Intuitively I can just say \"H keeps calling a graph that is smaller than the original, and the size of graphs is bounded above 0, so it is well-defined\", but I'm not sure how to formalize this.</strong></p>\n<p>I can think of two solutions:</p>\n<ol>\n<li>Drop the idea of actually defining <code>H</code>, and just prove the result by mathematical induction on the depth of the graph. I'd prefer not to do this since I want to have <code>H</code> as a computational object.</li>\n<li>Define a function <code>H_n</code> which takes a graph of depth <code>n</code> (or maximal depth <code>n</code>) and only have <code>H_{n+1}</code> call <code>H_n</code> or <code>H_k</code> with <code>k\\leq n</code>. Then define <code>H</code> in terms of <code>H_n</code> where <code>n</code> is the size of the input graph. But this seems ugly to me. I'd rather just define <code>H</code> directly for reasons of simplicity and clarity.</li>\n</ol>",
        "id": 205220101,
        "sender_full_name": "Chris M",
        "timestamp": 1595932347
    },
    {
        "content": "<p>If you can express your recursion using a match statement, then you can always provide a <code>using_well_founded</code> definition explicitly - there are some recent discussions about this elsewhere on zulip</p>",
        "id": 205220347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595932519
    },
    {
        "content": "<p>It sounds like you just do structural recursion on trees though.</p>",
        "id": 205220488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595932624
    },
    {
        "content": "<p>I guess it might not be so simple depending on the representation of trees</p>",
        "id": 205220783,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595932810
    },
    {
        "content": "<p>Does the type of this declaration faithfully represent your problem?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">graph</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">graph</span>\n\n<span class=\"n\">def</span> <span class=\"n\">H</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205221089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595933047
    },
    {
        "content": "<p>Let me just copy it and put line breaks in:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">graph</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">graph</span>\n\n<span class=\"n\">def</span> <span class=\"n\">H</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n<span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205221179,
        "sender_full_name": "Chris M",
        "timestamp": 1595933141
    },
    {
        "content": "<p>I have to think about it, but I have to leave now. I'll look at this again soon.</p>",
        "id": 205221677,
        "sender_full_name": "Chris M",
        "timestamp": 1595933553
    },
    {
        "content": "<p>Actually it looks like alpha and beta have to be the same</p>",
        "id": 205221916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595933766
    },
    {
        "content": "<p>To be clear, is this a DAG or a tree? I don't think your operation makes sense on a general DAG.</p>",
        "id": 205224279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595935973
    },
    {
        "content": "<p>This is how I have interpreted it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">tree</span><span class=\"o\">,</span> <span class=\"n\">list_tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list_tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n<span class=\"k\">with</span> <span class=\"n\">list_tree</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list_tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span>    <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">list_tree</span> <span class=\"bp\">→</span> <span class=\"n\">list_tree</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list_tree</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H_tilde</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"k\">with</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">H_tilde</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H_tilde</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">H_tilde</span> <span class=\"o\">:</span> <span class=\"n\">list_tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list_tree</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">list_tree</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">list_tree</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list_tree</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">t</span> <span class=\"n\">ts</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list_tree</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_tilde</span> <span class=\"n\">ts</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>But I'm sure there's some much neater way to express it using the equation compiler and (as Eric Wieser suggests)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n</code></pre></div>\n\n\n<p>I think the authoritative source on this stuff is TPIL chapters 7 and 8.</p>",
        "id": 205251741,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1595950588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span>  This seems to work too (at least it typechecks!) and perhaps it's closer to what you asked for.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tree</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"n\">δ&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">root</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">child</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">D&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">δ&#39;</span><span class=\"o\">),</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">δ&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">D&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">δ&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟩</span> <span class=\"bp\">→</span> <span class=\"n\">δ&#39;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"bp\">.</span><span class=\"n\">root</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">D&#39;</span> <span class=\"n\">d</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"bp\">.</span><span class=\"n\">child</span> <span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">D&#39;</span> <span class=\"n\">c</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">),</span> <span class=\"n\">node</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">δ&#39;</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">φ</span><span class=\"bp\">⟩</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">node</span><span class=\"bp\">.</span><span class=\"n\">child</span> <span class=\"n\">c</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">node</span><span class=\"bp\">.</span><span class=\"n\">root</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 205367660,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1596034579
    }
]