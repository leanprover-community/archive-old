[
    {
        "content": "<p>I see, thanks!</p>",
        "id": 259274139,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635355116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> has marked this topic as resolved.</p>",
        "id": 259274150,
        "sender_full_name": "Notification Bot",
        "timestamp": 1635355119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20from.20inclusion.20to.20belonging/near/259273306\">said</a>:</p>\n<blockquote>\n<p>Yes -- if you want to define a function in the middle of a tactic proof it's probably best to do it directly with <code>λ</code> etc: <code>let f : {v | v ≠ root} → G.edge_set := λ w, ...</code></p>\n</blockquote>\n<p>For what it's worth, that would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">root</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">next_edge</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">root</span> <span class=\"n\">v.property</span> <span class=\"o\">(</span><span class=\"n\">G.tree_path</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">root</span><span class=\"o\">)</span>\n    <span class=\"k\">in</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a.property.1</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>I mistakenly thought writing this definition using tactics would keep the <code>let</code> from being part of the term (but I didn't check the goal window to make sure), since I thought there was a chance <code>let</code> in a term might cause even more obscure questions than the ones this code's already generated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Arthur: There's a small set of tactics that are \"ok\" for defining functions, but it's generally better to write a term directly since hand-written definitions tend to be easier to prove things about.</p>",
        "id": 259286106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635359764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Here's maybe a nicer-looking definition (and slightly nicer proof that it maps vertices to incident edges):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">root</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">next_edge</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">root</span> <span class=\"n\">v.property</span> <span class=\"o\">(</span><span class=\"n\">G.tree_path</span> <span class=\"n\">h</span> <span class=\"n\">v</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">root</span><span class=\"o\">),</span>\n     <span class=\"n\">G.incidence_set_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">subtype.mem</span> <span class=\"n\">_</span><span class=\"o\">)⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">fprop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">root</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">⟩)</span> <span class=\"bp\">∈</span> <span class=\"n\">G.incidence_set</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype.mem</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 259288106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635360615
    },
    {
        "content": "<p>Hm, indeed I suspected we could use <code>incidence_set_subset</code> somehow</p>",
        "id": 259288518,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635360768
    },
    {
        "content": "<p>The definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.incidence_set_subset\">docs#simple_graph.incidence_set_subset</a> is just <code>h.1</code>, but it makes the code a bit clearer (and helps direct Lean to fill in the underscores).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">incidence_set_subset</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.incidence_set</span> <span class=\"n\">v</span> <span class=\"bp\">⊆</span> <span class=\"n\">G.edge_set</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span>\n</code></pre></div>",
        "id": 259288873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635360904
    },
    {
        "content": "<p><code>h.1</code> is a proof that the edge is an element of the edge set, and <code>h.2</code> is a proof that <code>v</code> is one of the endpoints of the edge.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">incidence_set</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">sym2</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">G.edge_set</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">e</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259289080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635360994
    }
]