[
    {
        "content": "<p>Is there any \"pretty\" proof that coercing a value to an option type equals (some value)? For example, is there a more elegant way to prove the following example?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">,</span> <span class=\"n\">lift_t</span><span class=\"o\">,</span> <span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">coe_t</span><span class=\"o\">,</span> <span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 163371206,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555327332
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 163371255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555327429
    },
    {
        "content": "<p>that is indeed more elegant ;D thank you!</p>",
        "id": 163371309,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555327475
    },
    {
        "content": "<p>My thought process:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"c1\">-- not sure how to proceed, so let&#39;s start to unfold</span>\n <span class=\"n\">unfold</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n <span class=\"n\">unfold</span> <span class=\"n\">lift_t</span><span class=\"o\">,</span>\n <span class=\"n\">unfold</span> <span class=\"n\">has_lift_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span><span class=\"o\">,</span>\n <span class=\"n\">unfold</span> <span class=\"n\">coe_t</span><span class=\"o\">,</span>\n <span class=\"n\">unfold</span> <span class=\"n\">has_coe_t</span><span class=\"bp\">.</span><span class=\"n\">coe</span><span class=\"o\">,</span>\n <span class=\"c1\">-- hey, the goal automatically got solved!</span>\n <span class=\"c1\">-- And &quot;unfold&quot; didn&#39;t really do anything apart from changing things</span>\n <span class=\"c1\">-- to definitionally equal things.</span>\n <span class=\"c1\">-- So maybe `rfl` worked right from the start!</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163371347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555327538
    },
    {
        "content": "<p>I should probably not confess this, but I often write code like this.</p>",
        "id": 163371409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555327573
    },
    {
        "content": "<p>When I'm not entirely sure how coercions are defined, I just unfold them manually like this</p>",
        "id": 163371417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555327594
    },
    {
        "content": "<p>and then when I've got to the actual definition, I look at the goal, copy it, write <code>change [insert goal here]</code> and then delete all the unfolds.</p>",
        "id": 163371432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555327625
    },
    {
        "content": "<p><code>change</code> (and <code>show</code>, they do the same thing) changes the goal to something definitionally equal.</p>",
        "id": 163371445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555327646
    },
    {
        "content": "<p>Ah, I did not know about the <code>change</code> keyword. Nice to know :)</p>",
        "id": 163371587,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555327795
    },
    {
        "content": "<p>There is <code>unfold_coes</code>. Maybe if would have done all those unfolds in one go.</p>",
        "id": 163371974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555328196
    },
    {
        "content": "<p>That also works, cheers!</p>",
        "id": 163372284,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555328534
    },
    {
        "content": "<p>PS you can write <code> (λ (x: option α), x) val</code> as <code>(val : option α)</code></p>",
        "id": 163384153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555338572
    },
    {
        "content": "<p>Oh, I knew that one can do that, but for some reason, I did not use it here.  Thanks again Kevin! :)</p>",
        "id": 163385708,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555339693
    }
]