[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z_rez_im</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">z_re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">{</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">z_im</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z_re</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z_im</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>what can be used to rw <code>~</code> in h?</p>",
        "id": 222222078,
        "sender_full_name": "Răzvan Flavius Panda",
        "timestamp": 1610285085
    },
    {
        "content": "<p>What do you want to rewrite it to? What are you trying to do mathematically?</p>",
        "id": 222222694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610285886
    },
    {
        "content": "<p>One option:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z_re</span> <span class=\"n\">z_im</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">z_re</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">({</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"n\">z_im</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z_re</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">z_im</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">zero_pow</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">pow_eq_zero</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 222223469,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610287174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> apply negation to both parts of the complex number then split h into 2 equialities maybe</p>",
        "id": 222223672,
        "sender_full_name": "Răzvan Flavius Panda",
        "timestamp": 1610287483
    },
    {
        "content": "<p>You do understand that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">¬</span></span></span></span> doesn't mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">-</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span></span></span></span> right? Are you confusing logical negation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">\\lnot P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> with the negative of a number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">-z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>? I am still at a loss with this question. Can you write down in Lean what you want to rewrite the equation to?</p>",
        "id": 222224394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610288604
    },
    {
        "content": "<p>And in particular <code>¬{re := 0, im := z_im} = 0</code> means <code>¬ ({re := 0, im := z_im} = 0)</code></p>",
        "id": 222224555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610288823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> yes, I understand, you told me that in Xena DIscord. so I'd like to apply <code>~</code> to that complex number<br>\nisn't negating a complex number negating both of its components?</p>",
        "id": 222231069,
        "sender_full_name": "Răzvan Flavius Panda",
        "timestamp": 1610298495
    },
    {
        "content": "<p>this negates a proposition not a complex number</p>",
        "id": 222231108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1610298596
    },
    {
        "content": "<p>Oh, so <code>~</code> is actually negating the entire proposition: <code>{re := 0, im := z_im} = 0</code><br>\nonly seen now what <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> said</p>",
        "id": 222238554,
        "sender_full_name": "Răzvan Flavius Panda",
        "timestamp": 1610308332
    }
]