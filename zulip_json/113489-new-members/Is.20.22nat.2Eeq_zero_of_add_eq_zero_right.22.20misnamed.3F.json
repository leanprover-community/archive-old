[
    {
        "content": "<p>I am wondering if the <code>nat.eq_zero_of_add_eq_zero_right</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/nat/lemmas.html#nat.eq_zero_of_add_eq_zero_right\">link</a>)  and <code>nat.eq_zero_of_add_eq_zero_left</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/init/data/nat/lemmas.html#nat.eq_zero_of_add_eq_zero_left\">(link)</a> should have their names swapped.    Since I am new, I am posting here, but if there a better place for me to post this, please let me know.</p>\n<p>I would be happy to make the change if it is needed, I didn't see it on the issues list on the repo.  Thanks.</p>",
        "id": 299037370,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663269900
    },
    {
        "content": "<p>Yeah, the names are weird. But also, why is exactly one of them written as implication?</p>",
        "id": 299039366,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663270694
    },
    {
        "content": "<p>Ah, only the first one is proved using pattern matching. Still, don't we want to make them look the same?</p>",
        "id": 299040218,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663271096
    },
    {
        "content": "<p>These lemmas are not in mathlib, right?</p>\n<p>I think that changing them in favour of a convention that is not so well-established may be more work than is worth.</p>\n<p>Still, if someone else feel strongly about this, feel free to say so!</p>",
        "id": 299044459,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663272756
    },
    {
        "content": "<p>You can also take a look at what injectivity a add_left_cancel_semigroup to see some more confusing left/right lemmas.</p>",
        "id": 299044557,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663272804
    },
    {
        "content": "<p>What do you mean by \"not in mathlib\" please?</p>",
        "id": 299045150,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663273066
    },
    {
        "content": "<p>Isn't the lemma in core?  The location is not <code>src/...</code>, right?</p>",
        "id": 299045447,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663273197
    },
    {
        "content": "<p>Oh! You are right!<br>\n<code>lean/library/init/data/nat/lemmas.lean</code></p>",
        "id": 299045931,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1663273433
    },
    {
        "content": "<p>Yes, so this is a lemma that comes with Lean, even if you do not want to use mathlib.  It can still be changed, but the procedure is different than opening a PR for mathlib.</p>",
        "id": 299046162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663273562
    },
    {
        "content": "<p>Honestly, if I need one of these lemmas, I look them up, read the <em>statements</em> via autocompleting <code>eq_zero_of_add_eq_zero</code>, type enter when I see the one I want and not even look at whether it is left or right!  <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 299046656,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663273773
    },
    {
        "content": "<p>Two more minor comments.</p>\n<p><span class=\"user-mention\" data-user-id=\"519925\">@Kent Van Vels</span> you can link Lean declarations typing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.eq_zero_of_add_eq_zero_right\">docs#nat.eq_zero_of_add_eq_zero_right</a> (I literally typed what you see) and the link is automatically created.</p>\n<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> while the statements look different, I think that internally Lean converts them to similar shape.  You can see this as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.eq_zero_of_add_eq_zero_left</span>\n<span class=\"c1\">-- nat.eq_zero_of_add_eq_zero_left : ∀ {n m : ℕ}, n + m = 0 → m = 0</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.eq_zero_of_add_eq_zero_right</span>\n<span class=\"c1\">-- nat.eq_zero_of_add_eq_zero_right : ∀ {n m : ℕ}, n + m = 0 → n = 0</span>\n</code></pre></div>\n<p>The difference in the automatically generated documentation is probably a consequence of the fact that the parsing relies more on the actual lean file than on the internal representation of the declarations.  I do not actually know how the documentation works, so I may be wrong about this.</p>",
        "id": 299092737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663305470
    },
    {
        "content": "<p>I think the doc is generated from the internal representation and pretty printed rather than the source, so I'm not sure what causes lean to show them differently in this case.</p>",
        "id": 299124742,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663321171
    },
    {
        "content": "<p>Alex, thanks for the information!</p>",
        "id": 299133121,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663324615
    }
]