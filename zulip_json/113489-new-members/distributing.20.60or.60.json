[
    {
        "content": "<p>This clearly isn't on the right track,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">factor_or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- p is true.</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n  <span class=\"c1\">-- If p is false, q and r are true.</span>\n  <span class=\"c1\">-- But we don&#39;t really know that p is false.</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but lean doesn't like <code>or.elim (p \\or \\not p)</code> either. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">factor_or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- p is true.</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n  <span class=\"c1\">-- p is false, so q and r are true.</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">z</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n<span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How can I go about this?</p>",
        "id": 184399422,
        "sender_full_name": "Iocta",
        "timestamp": 1577583414
    },
    {
        "content": "<p>the <code>p or not p</code> needs to be replaced with a <strong>proof</strong> of <code>p or not p</code></p>",
        "id": 184400096,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577584949
    },
    {
        "content": "<p>which is <code>classical.em p</code></p>",
        "id": 184400097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577584952
    },
    {
        "content": "<p>or maybe <code>classical.em</code>, I don't remember</p>",
        "id": 184400100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577584963
    },
    {
        "content": "<p>This is in the <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#exercises\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#exercises\">section of the exercises</a> that I think isn't supposed to require <code>classical</code>. Is there a way to do it without?</p>",
        "id": 184406114,
        "sender_full_name": "Iocta",
        "timestamp": 1577597092
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">factor_or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span><span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">hq</span> <span class=\"n\">hr</span>\n</pre></div>",
        "id": 184406605,
        "sender_full_name": "Joe",
        "timestamp": 1577598165
    },
    {
        "content": "<p>Try to do <code>or.elim</code> on both <code>and.left h</code> and <code>and.right h</code>.</p>",
        "id": 184406619,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577598208
    },
    {
        "content": "<p>Got it, thanks.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">factor_or</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">qq</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">rr</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">qq</span> <span class=\"n\">rr</span><span class=\"o\">))))))</span>\n</pre></div>",
        "id": 184407470,
        "sender_full_name": "Iocta",
        "timestamp": 1577599960
    },
    {
        "content": "<p>BTW, it makes sense to use <code>theorem</code>/<code>lemma</code> in this case because the conclusion is a proposition, not a <code>Type</code>.</p>",
        "id": 184407527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577600061
    },
    {
        "content": "<p>Ok</p>",
        "id": 184408172,
        "sender_full_name": "Iocta",
        "timestamp": 1577601427
    },
    {
        "content": "<p>Below is the same proof written in a slightly different way. It illustrates</p>\n<ul>\n<li>Using dot syntax to deal with <code>and</code> followed by <code>or</code>: <code>h.left.elim</code> and <code>h.right.elim</code></li>\n<li>Letting Lean infer the <code>and</code> constructor by using angle brackets: <code>⟨hq,hr⟩</code></li>\n</ul>\n<p>I'm not saying it's stylistically better (it's just an example of some Lean syntax which may be of interest).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n        <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span><span class=\"n\">hr</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 184808314,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1578151683
    }
]