[
    {
        "content": "<p>This grew out of attempts at implementing things related to what was discussed in <a href=\"#narrow/stream/113489-new-members/topic/gluing.20functions\" title=\"#narrow/stream/113489-new-members/topic/gluing.20functions\">another thread</a>, but I think it's generic enough that I should ask separately:</p>\n<p>What is the (correct?) way of moving between subtypes of the same type defined by equivalent (but not definitionally equal)? For instance,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- i think these are different types.</span>\n<span class=\"n\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span>   <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n<span class=\"n\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- is there a non-awkward way of stating &amp; invoking</span>\n<span class=\"c1\">-- theorems like this?</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>(context: if I glued two partial functions, I get a partial function (still of the same type! like <code>α →. β</code>) whose domain is provably equal as a set to the union of the domains of the two functions I was gluing. Now I'm interested in having a statement for this gluing thing that instead takes two functions (say <code>f g : α → β</code>) and two sets (<code>u v: set α</code>), producing a function from <code>subtype (u ∪ v)</code> — and now this seems like a tremendously bad idea, because if I do this sort of thing two or three times I wind up with a whole bunch of subtypes that all disagree with each other. Does there already exist a way of making this not-painful?)</p>",
        "id": 167499233,
        "sender_full_name": "Jean Lo",
        "timestamp": 1559839819
    },
    {
        "content": "<p><code>equiv.subtype_congr_prop</code>. You can rewrite with the proof that the predicates are equal, but this <code>equiv</code> gives better defeq</p>",
        "id": 167509291,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559846399
    },
    {
        "content": "<p>Oh, how does this work in practice? I choose a subtype to state the theorem for, then I invoke <code>subtype_congr_prop</code> every time I want to apply it to a term of another subtype with an equivalent prop?</p>",
        "id": 167513400,
        "sender_full_name": "Jean Lo",
        "timestamp": 1559848642
    },
    {
        "content": "<p>Chris says yes -- choose one of them and always use that one</p>",
        "id": 167513587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559848751
    },
    {
        "content": "<p>great, thanks for the help!</p>",
        "id": 167513635,
        "sender_full_name": "Jean Lo",
        "timestamp": 1559848801
    },
    {
        "content": "<p>My inclination is to agree that this is a bad idea and you should stick with roption. You will actually get a bunch of subtypes of subtypes, and there are functions to deal with it, but it's not very convenient</p>",
        "id": 167513707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559848830
    },
    {
        "content": "<p>I agree that <code>roption</code> is the right formulation for the stuff about gluing functions.</p>\n<p>But at the same time I also want to write down things about partial functions from vector spaces and topologies and stuff, where the relevant lemmas in mathlib seem to usually be stated in terms of <em>'make a subtype out of a set (, the library code automatically puts the appropriate structure on it,) then work on that'.</em> For example, my interest in being able to do gluing began with wanting to construct piecewise functions with the pasting lemma (<code>continuous_subtype_is_closed_cover</code>) , and currently to do that I seem to have to:</p>\n<ul>\n<li>define several partial functions, possibly by defining a (total) function, do <code>pfun.lift</code>, then <code>pfun.restrict</code> it onto the domain I want.</li>\n<li>glue them together.</li>\n<li>make the glued-together (partial) function a (total) function again</li>\n<li>use some sort of <code>glue_eq</code> lemma, together with <code>pfun.as_subtype</code>, to put together the hypotheses <code>(f_cont  : ∀i, continuous (λ(x : subtype (c i)), f x.val))</code></li>\n</ul>\n<p>before I can actually invoke the lemma. I guess it's to be expected that manipulating concrete examples like this is going to be tedious, but I still get the feeling that there's an amount of passing-back-and-forth-between-different-ways-of-writing-things that can possibly be avoided through some abstraction that I don't know yet.</p>",
        "id": 167515144,
        "sender_full_name": "Jean Lo",
        "timestamp": 1559849763
    },
    {
        "content": "<p>Isn't there a pasting lemma that uses <code>if</code>?</p>",
        "id": 167516518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559850848
    },
    {
        "content": "<p>yeah, <code>continuous_if</code>; it takes care of the case where the function is just defined piecewise as an <code>ite</code>. But surely I'd still want to be able to do the same thing with any family of functions glued together (given a locally finite closed cover etc.) ?</p>",
        "id": 167550037,
        "sender_full_name": "Jean Lo",
        "timestamp": 1559886886
    },
    {
        "content": "<p>Then use <code>continuous_subtype_is_closed_cover</code> (Ah, now I see that you mentioned it already...)</p>",
        "id": 167550255,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559887106
    },
    {
        "content": "<p>yeah. <code>continuous_subtype_is_closed_cover</code> wants a total function together with proofs that its restrictions to functions from subtypes are continuous, and I was wondering whether there's a good way to feed it a bunch of functions from subtypes (or pfuns)  and have it give me the continuity of the glued-together function that I wanted :D</p>",
        "id": 167550557,
        "sender_full_name": "Jean Lo",
        "timestamp": 1559887407
    },
    {
        "content": "<p>Maybe you need to think it from the other side (which is obviously the same but sometimes makes a mental difference). You want to prove <code>continuous G</code> (where <code>G</code> is your glued-together function). Then you apply <code>continuous_subtype_is_closed_cover C</code>, and get the statement that for each <code>c</code> in <code>C</code> you need to prove <code>continuous (fn x:subtype c, G (coe x))</code>. But now you can rewrite <code>(fn x:subtype c, G (coe x))</code> into something your like more.</p>",
        "id": 167551567,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559888664
    },
    {
        "content": "<p>The trick is that we now talk about <code>G (coe x)</code> where <code>coe x</code> gives us enough information to rewrite <code>G (coe x) = f_c (coe_2 x)</code> where <code>c</code> is the index into our cover, and <code>coe_2</code> now may coerce from the cover into another set, the set where <code>f_c</code> is defined on.</p>",
        "id": 167551694,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1559888876
    }
]