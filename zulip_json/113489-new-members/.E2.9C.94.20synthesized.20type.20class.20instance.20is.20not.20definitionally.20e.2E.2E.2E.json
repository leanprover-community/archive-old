[
    {
        "content": "<p>Ok, well I don't claim that you won't have any more issues of this nature, as there is a genuine problem lurking in mathlib's algebra design that needs to be sorted out, but at least this compiles</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.number_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"bp\">.</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">algebra_rat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]}</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_char_zero</span> <span class=\"o\">:=</span> <span class=\"n\">char_zero_of_injective_algebra_map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">to_finite_dimensional</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n   <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root.power_basis</span> <span class=\"o\">(</span><span class=\"n\">irreducible.ne_zero</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)),</span>\n   <span class=\"n\">convert</span> <span class=\"n\">power_basis.finite_dimensional</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n   <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_rat_subsingleton</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">number_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→+*</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Qx</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_root</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_separable.is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">ℚ</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">minpoly.irreducible</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">number_field</span> <span class=\"n\">Qx</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 284650006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654107565
    },
    {
        "content": "<p>Great! Thanks a lot.</p>",
        "id": 284652770,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1654108781
    },
    {
        "content": "<p>By \"algebra design\", do you mean <code>algebra</code> specifically?</p>",
        "id": 284654660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654109777
    },
    {
        "content": "<p>Yes, or maybe I mean the fact that its super easy to make diamonds with the current instances</p>",
        "id": 284655448,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654110139
    },
    {
        "content": "<p>Were you able to work out what the diamond is here? (I'm not at lean)</p>",
        "id": 284657961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654111442
    },
    {
        "content": "<p>Oh I've seen it enough times I don't even need lean <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> it bites me so often:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">algebra_rat</span> <span class=\"bp\">=</span> <span class=\"n\">algebra.id</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 284659237,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654112096
    },
    {
        "content": "<p>Oh yes, that one!</p>",
        "id": 284669032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654117414
    }
]