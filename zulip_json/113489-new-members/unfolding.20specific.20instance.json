[
    {
        "content": "<p>Is it possible to tell lean to unfold only a specific instance of a typeclass function? This typically happens when I have my own instance of a typeclass, so I need to dig inside, but then there are also other instances of the same typeclass in the library. For example, what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem.mem</span> <span class=\"c\">/-</span><span class=\"cm\"> somehow only for set -/</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">set.mem</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would like it to end up with the goal <code>n ∈ l = s n</code>. I tried <code>unfold set.has_mem.mem</code> but that fails.</p>",
        "id": 232226559,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1617001630
    },
    {
        "content": "<p>You can use <code>change</code> to get there manually</p>",
        "id": 232226587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617001679
    },
    {
        "content": "<p>Or you can zoom into the term in <code>conv</code> mode and just unfold the part you want</p>",
        "id": 232226677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617001732
    },
    {
        "content": "<p><code>change</code> (or <code>show</code>) can be impractical  in practice when I deal with more complex terms, I don't know conv mode (I can look at it)</p>",
        "id": 232226800,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1617001827
    },
    {
        "content": "<p>I just thought whether it could be possible to directly target an instance, it feels quite natural to me.</p>",
        "id": 232226999,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1617001972
    },
    {
        "content": "<p>Otherwise, I can write my own unfolding lemmata, I guess.</p>",
        "id": 232228316,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1617002804
    },
    {
        "content": "<p>I can't get <code>unfold</code> to work in <code>conv</code> mode. <code>change</code> you can make easier by using wildcards:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ n ∈ l = s n</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232230169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617004118
    },
    {
        "content": "<p>But <code>rw</code> works</p>",
        "id": 232230376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617004287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.has_mem_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set.has_mem_def</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ n ∈ l = s n</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232230897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617004621
    },
    {
        "content": "<p>OK, I will do it this way, that is what I meant with writing custom unfolding lemmata.</p>",
        "id": 232231690,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1617005042
    }
]