[
    {
        "content": "<p>Proving that <code>fin 3</code> is <code>nontrivial</code> works out of the box:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin.nontrivial</span>\n</code></pre></div>\n<p>However, taking the powerset doesn't work: <code>𝒫 (fin 3)</code></p>\n<p>So I need to change representations to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But then I'm not sure of a couple of things:</p>\n<ul>\n<li>How do I construct emptyset and top</li>\n<li>How do I use those constructed objects in a proof</li>\n</ul>\n<p>I am stuck on that and <code>sorry</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_nontrivial_X</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>I have looked at <code>library_search!</code> which has no suggestions and output of <code>suggest</code> and <code>hint</code> which put out some ideas but haven't worked for me so far.</p>\n<p>I'm also stuck for powerset.   Here I've got 3 ideas and I don't know how to make them work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">empty_in_PX</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">top_in_PX</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_nontrivial_PX</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"n\">is_nontrivial_PX</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Any help greatly appreciated.</p>",
        "id": 219737239,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607821734
    },
    {
        "content": "<p>Why do you need that powerset?</p>",
        "id": 219737529,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607822266
    },
    {
        "content": "<p>The number of unique terms of \"set (fin 3)\" is the cardinality of that powerset</p>",
        "id": 219737576,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607822318
    },
    {
        "content": "<p>Nontrivial takes a type as input, not a set so it inserts a coercion which you may not want.<br>\nIf all the elements you ever want to consider are 1,2,3 I'd recommend starting with <code>fin 3</code> rather than making subsets of sets, you can just work with <code>set (fin 3)</code>  more naturally in lean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">empty_mem_powerset</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒫</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">top_in_PX</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- this is false ⊤ is the set of all naturals which is not a subset of X</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_nontrivial_PX</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span>  <span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">empty_mem_powerset</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">set.eq_empty_iff_forall_not_mem.mp</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"bp\">𝒫</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span><span class=\"n\">rcases</span> <span class=\"n\">is_nontrivial_PX</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span>  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 219739894,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607826572
    },
    {
        "content": "<p>Thanks I will try <code>set X</code> .  I got it in my head I needed <code>𝒫 X</code> but that's incorrect.</p>",
        "id": 219739999,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607826726
    },
    {
        "content": "<p>DONE (most of the work done by library_search!)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin.nontrivial</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nontrivial_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">∅</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.empty_ne_univ.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219740428,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607827539
    },
    {
        "content": "<p>Does <code>unfold X, apply_instance</code> work for the second?</p>",
        "id": 219750958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607847691
    },
    {
        "content": "<p>Yes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219764187,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1607870195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/Need.20help.20on.20proving.20.7B1.2C2.2C3.7D.20and.20P.7B1.2C2.2C3.7D.20are.20nontrivial/near/219740428\">said</a>:</p>\n<blockquote>\n<p>DONE (most of the work done by library_search!)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">fin.nontrivial</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nontrivial_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">∅</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.empty_ne_univ.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>As far as I understand, the three <code>exact</code> after the <code>refine</code> fill in the underscores.  Thus, also <code>refine nontrivial_of_ne set.univ ∅ set.empty_ne_univ.symm,</code> finishes the goal.  At this point, you can notice that the last underscore is filled in with a proof that <code>∅ ≠ set.univ</code>, so just this is enough for Lean to figure out what the two sets in question were.  Hence, <code>refine nontrivial_of_ne _ _ set.empty_ne_univ.symm,</code>is sufficient information to create a proof.  Once you are here, you no longer need tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nontrivial_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">set.empty_ne_univ.symm</span>\n</code></pre></div>",
        "id": 219805129,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607927838
    }
]