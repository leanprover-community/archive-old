[
    {
        "content": "<p>I am trying to formalize the following linear algebra exercise. I am running into needing to convert from <code>set</code>, which I know is finite, to <code>finset</code>. Is there a better way to set up the example to avoid this issue?</p>\n<p><a href=\"/user_uploads/3121/BPSlEih-Y7HadRF-fTuOMSli/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/BPSlEih-Y7HadRF-fTuOMSli/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/BPSlEih-Y7HadRF-fTuOMSli/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lin_indep</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_lin_indep</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">linear_independent</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">submodule.span</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.not_linear_independent_iff</span> <span class=\"n\">at</span> <span class=\"n\">not_lin_indep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">not_lin_indep</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_add_distrib</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">finset.sum_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_span_finset</span><span class=\"o\">,</span> <span class=\"c1\">-- does not work</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287976720,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1656566686
    },
    {
        "content": "<p>I would say that part of the formalization is knowing that just because the problem statement is using an indexed collection over m vars doesn't mean you should</p>",
        "id": 288013782,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656589295
    },
    {
        "content": "<p>I also think your statement doesn't match the problem, you're using vec_cons when the statement is about ((+) w o v)</p>",
        "id": 288014053,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656589442
    },
    {
        "content": "<p>Maybe I'm mistaken that the two are different</p>",
        "id": 288014145,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656589465
    },
    {
        "content": "<p>You can noncomputably produce a finset from a set you know is finite, if \"hs : set.finite s\" then \"hs.to_finset\" is the finset that corresponds to s. You're using the construction \"set.finite.to_finset\"</p>",
        "id": 288014399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656589584
    },
    {
        "content": "<p>You can also use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.image\">docs#finset.image</a> to produce a finset directly corresponding to the range of v</p>",
        "id": 288014518,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656589668
    },
    {
        "content": "<p>I don't remember what the shorthand for of finset.univ.image v would be</p>",
        "id": 288014680,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656589750
    },
    {
        "content": "<p>You are right, I misread what the problem is actually asking...<br>\nThank you for pointing it out and the hints</p>",
        "id": 288052866,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1656606149
    },
    {
        "content": "<p>One of the easiest ways to (computably) get finsets from sets is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a> after importing <code>data.set.finite</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.to_finset</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 288053604,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656606523
    },
    {
        "content": "<p>That module has <code>fintype</code> instances that wrap up all the underlying <code>finset</code> operations for you.</p>",
        "id": 288053672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656606563
    }
]