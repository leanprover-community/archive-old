[
    {
        "content": "<p>Hello,</p>\n<p>Given a topological space α, it's not too hard to show, using the results from <code>topology.bounded_continuous_function</code> that α →ᵇ ℝ, the space of bounded continuous real-valued functions on α, is a lattice in a natural way. I'm interested in the situation where the lattice structure on α →ᵇ ℝ is conditionally complete, which does not hold in general. I'm having difficulty seeing how to add this as a hypothesis. Naively I've tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bounded_continuous_function</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→ᵇ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"bp\">→</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">csupr_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">csupr_le</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>(I've replaced the proof that α →ᵇ ℝ is a lattice with <code>sorry</code> in the above for brevity.)</p>\n<p>If I comment out the line <code>instance : lattice (α →ᵇ ℝ) := sorry</code> then there are no errors.</p>\n<p>How do I say \"given this structure which we've proved to be a lattice, add the hypothesis that the lattice is conditionally complete\"?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 224232624,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611774638
    },
    {
        "content": "<p>The <code>conditionally_complete_lattice</code> instance already contains the data of a lattice structure (see the fields available in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_lattice\">docs#conditionally_complete_lattice</a>), so having a separate <code>lattice</code> instance on the same type confuses Lean.</p>",
        "id": 224233332,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611774960
    },
    {
        "content": "<p>Yes, something like this works in Lean (but is mathematically incorrect):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">bounded_continuous_function.lattice</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>I think I'm looking for something which replaces these sorrys with \"take this as an hypothesis\".</p>",
        "id": 224233851,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611775182
    },
    {
        "content": "<p>Perhaps it would be clearer if I gave an example? Given a compact Hausdorff space α, if the lattice (α →ᵇ ℝ) is conditionally complete, then  α is Stonean.</p>",
        "id": 224235010,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611775701
    },
    {
        "content": "<p>Maybe this does what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bounded_continuous_function</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→ᵇ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">my_mixin</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_cSup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cSup_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cInf_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_cInf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">my_mixin</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">my_mixin</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">my_mixin</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"bp\">→</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">csupr_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224235147,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611775769
    },
    {
        "content": "<p>You make a new class with the missing fields, parameterised by lattice structures, then assume one of those and make an instance from the new class to the thing you actually want to assume.</p>",
        "id": 224235269,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611775809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Thank you. A bit clunky perhaps, but this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.conditionally_complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.bounded_continuous_function</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→ᵇ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">bounded_continuous_function</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">conditionally_complete</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_cSup</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cSup_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">upper_bounds</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cInf_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">bdd_below</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_cInf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">),</span> <span class=\"n\">s.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">conditionally_complete_lattice2</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">conditionally_complete</span> <span class=\"n\">L</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">conditionally_complete</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"bp\">→</span><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">csupr_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224252827,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611784260
    },
    {
        "content": "<p>The proof at the end is just the term proof <code>csupr_le h</code>. There is already a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_lattice_of_complete_lattice\">docs#conditionally_complete_lattice_of_complete_lattice</a>.</p>",
        "id": 224256601,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611785821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <code>conditionally_complete_lattice_of_complete_lattice</code> shows that a complete lattice is always conditionally complete. I'm looking to impose the conditionally complete hypothesis  on a (not necessarily complete) lattice.</p>",
        "id": 224259251,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611787285
    },
    {
        "content": "<p>(The result at the end is just a trivial example.)</p>",
        "id": 224259370,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611787362
    },
    {
        "content": "<p>Ah I see  -- makes sense! I'm surprised there isn't a clean way of using some sort of <code>def</code> to get this instance. But I see that's exactly the subtype of bdd_cont_functions you're working with.</p>",
        "id": 224259544,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611787473
    }
]