[
    {
        "content": "<p>If I can prove a statement for all rationals, how can I deduce the same statement for all integers? Let's consider for example the statement <code>∀ m : ℤ, m = (2 * m) / 2</code>. To be clear, I want to show something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201456076,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1592616991
    },
    {
        "content": "<p>integer divison and rational division are just different functions</p>",
        "id": 201456135,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617089
    },
    {
        "content": "<p>i'm not sure how to consider this statement as being the same as a statement about rationals</p>",
        "id": 201456146,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617115
    },
    {
        "content": "<p>here's a proof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201456204,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617218
    },
    {
        "content": "<p>you're asking to not only fill in the sorry, but for the proof to be \"it's h up to some kind of coercion\"?</p>",
        "id": 201456221,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617289
    },
    {
        "content": "<p>Yes!</p>",
        "id": 201456225,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1592617298
    },
    {
        "content": "<p>It would be nice if there was a theorem saying that int.div and rat.div coincide when the denominator divides the numerator</p>",
        "id": 201456226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592617300
    },
    {
        "content": "<p>It's basically there since <code>floor</code> is defined by using <code>int.div</code>, but I don't think the exact statement is written down</p>",
        "id": 201456272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592617335
    },
    {
        "content": "<p>i think mario's theorem is enough for what aniruddh is asking</p>",
        "id": 201456276,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617340
    },
    {
        "content": "<p>This is just a toy example, but I'm really looking for a more generic mechanism to prove things about some type <code>u</code> by proving them for a bigger type <code>v</code>.</p>",
        "id": 201456283,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1592617379
    },
    {
        "content": "<p>That's what <code>cast</code> is for</p>",
        "id": 201456288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592617391
    },
    {
        "content": "<p>but you chose a bad example because <code>int.div</code> doesn't lift like other functions</p>",
        "id": 201456291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592617407
    },
    {
        "content": "<p>To make it clear what the problem is with <code>int.div</code>, consider that <code>(1 / 2 : int) = 0</code></p>",
        "id": 201456350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592617472
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_cast\">tactic#norm_cast</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_cast\">tactic#push_cast</a></p>",
        "id": 201456351,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">div_cast</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201456428,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617592
    },
    {
        "content": "<p>is this the right form for a norm_cast lemma?</p>",
        "id": 201456492,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592617739
    },
    {
        "content": "<p>Is there a <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#push_cast\">tactic#push_cast</a> ? Not found in the doc.</p>",
        "id": 201458659,
        "sender_full_name": "Utensil Song",
        "timestamp": 1592622071
    },
    {
        "content": "<p>I think there used to be a <code>push_cast</code> tactic, but <code>norm_cast</code> does everything now IIRC</p>",
        "id": 201459239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592623296
    },
    {
        "content": "<p>There is still a <code>push_cast</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.push_cast\">docs#tactic.interactive.push_cast</a></p>\n<p>The doc just got combined into the one for <code>norm_cast</code>.</p>",
        "id": 201462958,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592630421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span> if you hadn't distracted everybody by using division eg if you'd asked about multiplication then you would have got an explicit solution using <code>norm_cast</code>. The <code>norm_cast</code> framework will work when you have functions A to A and B to B which commute with the coercion; then for things in A such that you've proved an equality result for the B values using only functions for which the diagram commutes, the <code>norm_cast</code> tactic will deduce the corresponding result for the A functions. The diagram doesn't commute for division</p>",
        "id": 201469860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592644840
    },
    {
        "content": "<p>Isn't <code>zify</code> supposed to solve the problem discussed in this thread?</p>",
        "id": 201489979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592676847
    },
    {
        "content": "<p><code>zify</code> only goes between <code>nat</code> and <code>int</code>, right?</p>",
        "id": 201489989,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592676886
    },
    {
        "content": "<p>hmm I think <code>norm_cast</code> is supposed to solve this problem. Or is the point of <code>zify</code> that it can make better use of cast lemmas with conditions?</p>",
        "id": 201490009,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592676942
    },
    {
        "content": "<p>Ooh right, we need <code>qify</code> for this thread...</p>",
        "id": 201490117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592677077
    }
]