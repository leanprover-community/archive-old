[
    {
        "content": "<p>I've been working with <span class=\"user-mention\" data-user-id=\"459656\">@Hans Parshall</span> on singular value stuff, and we both haven't been able to troubleshoot the error message from the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module.finite</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">adjoint</span>\n</code></pre></div>\n<p>Which yields the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">linear_map.adjoint</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">matrix.to_lin'</span> <span class=\"n\">A</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems like the types line up, so the error message is quite confusing.<br>\nIf anyone has any insight on this error, let me know!</p>",
        "id": 268465876,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642545288
    },
    {
        "content": "<p>Maybe you need to remove the <code>inner_product_space F (n → F)</code> and/or <code>module.finite F (n → F)</code> variables?</p>",
        "id": 268466287,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642545527
    },
    {
        "content": "<p>Can you add imports? I can't get your code working.</p>",
        "id": 268466377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642545578
    },
    {
        "content": "<p>Presumably:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n</code></pre></div>",
        "id": 268466592,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642545685
    },
    {
        "content": "<p>I think this import should be sufficient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n</code></pre></div>",
        "id": 268466598,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642545686
    },
    {
        "content": "<p>Removing the variables in any combination didn't work either</p>",
        "id": 268466633,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642545708
    },
    {
        "content": "<p>Oh, you're right about the other import</p>",
        "id": 268466697,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642545727
    },
    {
        "content": "<p>A perhaps simpler example (without the matrix part):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f.adjoint</span>\n</code></pre></div>",
        "id": 268466759,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642545782
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268466800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642545809
    },
    {
        "content": "<p>Woops, edited now for that</p>",
        "id": 268466819,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642545823
    },
    {
        "content": "<p>I usually debug this sort of thing by rewriting as <code>#check @linear_map.adjoint _ _ _ _ _ _ _ _ f</code> and then I start filling in the holes.</p>",
        "id": 268467024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642545950
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.adjoint</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>-&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_7</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_8</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_9</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_10</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268467153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642546051
    },
    {
        "content": "<p>That should not fail (even without <code>_inst_9</code>), since <code>n</code> is a fintype...</p>",
        "id": 268467255,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642546114
    },
    {
        "content": "<p>Aha, I see the likely issue: adding the variable <code>[inner_product_space ℂ (m → ℂ)]</code> gives an incompatible instance with the standard vector space on <code>m → ℂ</code>.</p>",
        "id": 268467340,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642546193
    },
    {
        "content": "<p>So filling in the <code>_</code>s with instances you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">linear_map.adjoint</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">_inst_9</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.field</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_comm_group</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.normed_group</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.module</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.field</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.normed_group</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">semiring.to_module</span> <span class=\"n\">ℂ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.field</span><span class=\"o\">)))))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">ℂ</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_field</span> <span class=\"n\">ℂ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nondiscrete_normed_field.to_normed_field</span> <span class=\"n\">ℂ</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_R_or_C.to_nondiscrete_normed_field</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.is_R_or_C</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inner_product_space.to_normed_group</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">complex.is_R_or_C</span> <span class=\"n\">_inst_7</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_space.to_module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nondiscrete_normed_field.to_normed_field</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_R_or_C.to_nondiscrete_normed_field</span> <span class=\"n\">ℂ</span> <span class=\"n\">complex.is_R_or_C</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inner_product_space.to_normed_group</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">complex.is_R_or_C</span> <span class=\"n\">_inst_7</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inner_product_space.to_normed_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">complex.is_R_or_C</span> <span class=\"n\">_inst_7</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 268467508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642546288
    },
    {
        "content": "<p>this looks familiar :)</p>",
        "id": 268467558,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642546322
    },
    {
        "content": "<p>This is not a corner of the library I'm familiar with, but it looks like the solution is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a> instead of <code>n → ℂ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Works:</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.adjoint</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 268467637,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642546355
    },
    {
        "content": "<p>Ah, but <code>euclidean_space</code> isn't a <code>ℂ</code>-vector space...</p>",
        "id": 268467839,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642546482
    },
    {
        "content": "<p>Will this still work for the old problem? Since the linear map generated from the matrix is automatically of type </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span>\n</code></pre></div>",
        "id": 268468094,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642546618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/Adjoint.20of.20linear.20map/near/268467839\">said</a>:</p>\n<blockquote>\n<p>Ah, but <code>euclidean_space</code> isn't a <code>ℂ</code>-vector space...</p>\n</blockquote>\n<p>It really should be! For some weird reason it finds the module instance for an <code>is_R_or_C</code> field but not for <code>ℂ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.adjoint</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>    <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>    <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>     <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>     <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>   <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">pi_Lp</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">𝕜</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>    <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>   <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>    <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>          <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>          <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>Does anyone know what's going on?</p>",
        "id": 268477095,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1642552560
    },
    {
        "content": "<p>Still looking into this, but the type class trace looks very suspicious, and <code>local attribute [-instance] pi_Lp.normed_group</code> makes it work</p>",
        "id": 268479524,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642554505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span>, if you're dealing with the adjoints of linear maps defined by matrices, you'll probably want to know that you can get them concretely by transposing the matrix.  I had some code lying around for this which you have inspired me to clean up and PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/11551\">#11551</a></p>",
        "id": 268495176,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642571674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Oh nice! Looking at the PR, it looks like you used some trick with id to get the type to work out--what purpose is the id filling in? Does it tell Lean what type to coerce (n \\to \\C) to be?</p>",
        "id": 268612122,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1642630859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> Yes, this is because <code>euclidean_space 𝕜 n</code> is a \"type synonym\" for <code>n → 𝕜</code> so one sometimes has to engage in trickery to get Lean to recognize something of the one type as being of the other type.</p>\n<p>But it's clearly unsatisfactory (and just hasn't been a big obstacle before because not many people have done explicit calculations on <code>euclidean_space 𝕜 n</code>).  See <a href=\"https://github.com/leanprover-community/mathlib/pull/11551#discussion_r787677895\">this discussion</a>, probably to be continued on Zulip at some point, for some points of view.</p>",
        "id": 268613617,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642631704
    },
    {
        "content": "<p>(The issue is that by default <code>n → 𝕜</code> has the l-infinity norm, not the l-2 norm.)</p>",
        "id": 268613658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642631736
    },
    {
        "content": "<p>Similar issue is that while <code>matrix n n R</code> is just <code>n -&gt; n -&gt; R</code>, <code>(1 : matrix n n R)</code> is supposed to be the diagonal matrix with 1 on the diagonal, while <code>(1 : n -&gt; n -&gt; R)</code> is the constant function giving <code>1 : R</code> for all inputs <code>1 x y</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_one\">docs#matrix.has_one</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_one\">docs#pi.has_one</a>). And sometimes, the wrong <code>1</code> is inferred for matrix, somehow falling back to the <code>pi</code> one.</p>",
        "id": 268617057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642633552
    },
    {
        "content": "<p>Do you have an example of when that happens, Yakov?</p>",
        "id": 268617272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642633590
    },
    {
        "content": "<p>I've had this issue when working with explicit matrices and trying to prove something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 268617415,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642633633
    },
    {
        "content": "<p>Ah right; the problem there being that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.vec_cons\">docs#matrix.vec_cons</a> has the wrong type, just as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_lin'\">docs#matrix.to_lin'</a> has the wrong type for <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>.</p>",
        "id": 268618126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642634078
    },
    {
        "content": "<p>That's a little easier to solve though, we could just have a <code>matrix_of</code> constructor like <code>set_of</code>. The to_lin case is harder because we want to change only subterms of the type, not the head term</p>",
        "id": 268618340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642634219
    }
]