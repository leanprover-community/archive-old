[
    {
        "content": "<p>I believe I've asked this here before, but I can't find the thread. How can I do induction on <code>nat</code> (or, if possible, any type) with more than one base case. For example, below, it would be nice to be able two base cases <code>0</code> and <code>1</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">half</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">half</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- Not a problem with pattern matching</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">half_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">half</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"n\">one_pos</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"n\">two_pos</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">lt.step</span> <span class=\"o\">(</span><span class=\"n\">half_lt</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">half</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- This proof is kind of ugly.</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">one_pos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">two_pos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">ih</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">lt.step</span> <span class=\"o\">(</span><span class=\"n\">lt.base</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">succ_lt_succ</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">half</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ih</span>\n    <span class=\"bp\">...</span>         <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">lt.base</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212369793,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1601941111
    },
    {
        "content": "<p>It seems like you have a pretty good pattern there with <code>rcases</code>.  Here's a slight variation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">half</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">x.strong_induction_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">one_pos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">two_pos</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">succ_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">lt.step</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212371366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601942732
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.two_step_induction\">docs#nat.two_step_induction</a></p>",
        "id": 212629758,
        "sender_full_name": "Chris Wong",
        "timestamp": 1602111489
    }
]