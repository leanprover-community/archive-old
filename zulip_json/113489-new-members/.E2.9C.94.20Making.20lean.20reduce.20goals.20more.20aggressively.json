[
    {
        "content": "<p>Hi, I'm new-ish to Lean but not to theorem proving more generally. I'm trying to persuade lean to actually reduce this goal (just as an example, not what I'm actually doing):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"zulip\"</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>In agda this would reduce completely and be true by refl, and in Isabelle the simplifier would completely rewrite this to 1 = 1, but lean seems to get stuck. If I try to manually rewrite with list.filter I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)])</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">)]))</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Which seems also like it should just reduce away but it doesn't. What am I missing/doing wrong?</p>",
        "id": 252480543,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631114686
    },
    {
        "content": "<p>(this is lean 3, by the way)</p>",
        "id": 252481171,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631114916
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"zulip\"</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Could you provide a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 252481250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631114950
    },
    {
        "content": "<p>Is what you're observing that <code>simp</code> isn't reducing the goal?</p>",
        "id": 252481334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631114986
    },
    {
        "content": "<p>Ah, yes, that does work, but I would like simp to reduce it</p>",
        "id": 252481369,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631115000
    },
    {
        "content": "<p><code>simp</code> operates using a different mechanism -- rewrite rules in the form of <code>@[simp]</code> lemmas.  It shouldn't be too hard to add enough to make this reduce that way, though.</p>",
        "id": 252481595,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631115086
    },
    {
        "content": "<p>Actually, it seems to work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">string</span><span class=\"o\">),</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s2\">\"zulip\"</span><span class=\"o\">)])</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Maybe you don't have the right modules imported.</p>",
        "id": 252481708,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631115123
    },
    {
        "content": "<p>oh, how odd</p>",
        "id": 252481761,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631115136
    },
    {
        "content": "<p>which modules do you have imported?</p>",
        "id": 252481824,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631115162
    },
    {
        "content": "<p>I'm in a random file with these imported:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>I'm going to guess <code>import tactic</code> is enough</p>",
        "id": 252481828,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631115164
    },
    {
        "content": "<p>hm, I think I need to install some libraries, lean says it can't find those</p>",
        "id": 252481896,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631115195
    },
    {
        "content": "<p>I'm using mathlib.</p>\n<p>Here are the two mathlib modules that are needed: <code>data.list.basic</code> and <code>algebra.char_zero</code>. I reverse engineered this using <code>squeeze_simp</code> to tell me the <code>simp</code> lemmas it ended up using.</p>",
        "id": 252482132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631115296
    },
    {
        "content": "<p>right! Installing mathlib fixed it! thanks</p>",
        "id": 252486159,
        "sender_full_name": "Liam O'Connor",
        "timestamp": 1631116755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438698\">Liam O'Connor</span> has marked this topic as resolved.</p>",
        "id": 252486189,
        "sender_full_name": "Notification Bot",
        "timestamp": 1631116765
    }
]