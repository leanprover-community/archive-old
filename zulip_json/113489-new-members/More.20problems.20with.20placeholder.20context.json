[
    {
        "content": "<p>After seeing the comments on my post here yesterday, I took the advice of Reid Barton and eliminated <code>constant</code> from my file. I then experienced another problem where it was impossible to succinctly express what I want and I don't understand why  the program is unable to synthesize placeholder</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_poly</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.X</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f11</span> <span class=\"n\">f12</span> <span class=\"n\">f13</span> <span class=\"n\">f21</span> <span class=\"n\">f22</span> <span class=\"n\">f23</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"bp\">*</span> <span class=\"n\">f12</span> <span class=\"bp\">*</span> <span class=\"n\">f13</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">my_poly</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f21</span> <span class=\"bp\">*</span> <span class=\"n\">f22</span> <span class=\"bp\">*</span> <span class=\"n\">f23</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">my_poly</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_prop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"bp\">=</span> <span class=\"n\">f21</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"bp\">=</span> <span class=\"n\">f22</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"bp\">=</span> <span class=\"n\">f23</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>Here the program complains about p2. It works fine if I replace with <code>(@p1 F _ f21 f22 f23) = (@p2 F _ f11 f12 f13)</code> but this is very verbose and I don't want to have to write all this out every time p1 or p2 occurs in my longer lemmas. It seems like this is exactly the problem implicit arguments are meant to help with. I don't understand why the type checker is confused about the implicit arguments to p2. If I run <code>#check p2</code> I get </p>\n<p><code>p2 : Π {F : Type u} [_inst_1 : field F] {f21 f22 f23 : F}, polynomial F</code></p>\n<p>Which suggests to me  that it knows the arguments should be <code>F, _inst_1, f21, f22, f23</code>. So what's the problem?</p>",
        "id": 218505826,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606873083
    },
    {
        "content": "<p><code>p2</code> also has type <code>Π {A : Type u} [B : field A] {C D E : A}, polynomial A</code>.</p>",
        "id": 218506035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606873273
    },
    {
        "content": "<p>Those two types are alpha equivalent and hence syntactically equal. Lean doesn't have a clue which inputs to use.</p>",
        "id": 218506069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606873317
    },
    {
        "content": "<p><code>{}</code> means \"use the type of the things around me to figure me out\". Lean doesn't have enough information to solve the jigsaw puzzle.</p>",
        "id": 218506163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606873399
    },
    {
        "content": "<p><code>p2</code> says \"if you give me a field F and three elements, I'll produce a polynomial. Oh, you put all the inputs in <code>{}</code>s so I am expected to figure them out by looking at the types of stuff. Wait -- I don't even know the type of <code>p1</code>. I give in.\"</p>",
        "id": 218506273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606873507
    },
    {
        "content": "<p>Ok, that's a very helpful perspective, thank you. It still seems to me that, since f21 f22 f23 are the F type variables (or perhaps I should say the names of the F type variables) that are used in the definition of p2 itself, it should be possible for the program to guess that I want those same variable (names) to be the variable (names) that p2 is called with whenever it appears without explicit arguments. Is there a way to command the compiler to look to synthesize placeholders from the variables that appeared in the definition?</p>",
        "id": 218511525,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606879528
    },
    {
        "content": "<p>This is what parameter is for, for a section, as far as I understand. But you can't ensure that a name is always used in the same way. One of the replacement rules is that names are replaceable (is that beta reduction? I don't remember). What would you expect would happen if two terms were provided that have the same name?</p>",
        "id": 218511840,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606879855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  Yep, this <code>parameters</code> keyword thing is exactly what I was looking for and works perfectly - thanks for your help</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">my_poly</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.X</span>\n\n\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">f11</span> <span class=\"n\">f12</span> <span class=\"n\">f13</span> <span class=\"n\">f21</span> <span class=\"n\">f22</span> <span class=\"n\">f23</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"bp\">*</span> <span class=\"n\">f12</span> <span class=\"bp\">*</span> <span class=\"n\">f13</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">my_poly</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f21</span> <span class=\"bp\">*</span> <span class=\"n\">f22</span> <span class=\"bp\">*</span> <span class=\"n\">f23</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">my_poly</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">my_prop</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"bp\">=</span> <span class=\"n\">f21</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"bp\">=</span> <span class=\"n\">f22</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"bp\">=</span> <span class=\"n\">f23</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p1</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218525562,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1606897173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/More.20problems.20with.20placeholder.20context/near/218511840\">said</a>:</p>\n<blockquote>\n<p>This is what parameter is for, for a section, as far as I understand. But you can't ensure that a name is always used in the same way. One of the replacement rules is that names are replaceable (is that beta reduction? I don't remember). What would you expect would happen if two terms were provided that have the same name?</p>\n</blockquote>\n<p>The word you are looking for is alpha renaming</p>",
        "id": 218532205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606901305
    }
]