[
    {
        "content": "<p>Does mathlib have this lemma allowing dividing through an inequality?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lt_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_k</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I briefly looked through <code>data/nat/lemmas.lean</code> and couldn't find it</p>",
        "id": 199635729,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591198650
    },
    {
        "content": "<p><code>mul_lt_mul_left</code></p>\n<p><code>library_search</code> finds it btw</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lt_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_k</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">h_k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 199636701,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1591199114
    },
    {
        "content": "<p>ah thanks!</p>",
        "id": 199637082,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591199281
    },
    {
        "content": "<p>any hope that this one is in mathlib? library_search didn't find it</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lt_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_k</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199640611,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591200957
    },
    {
        "content": "<p>if not, would I have to work over <code>\\R</code> to prove it?</p>",
        "id": 199640671,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591200967
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lt_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_k</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>There's a proof which works over nat</p>",
        "id": 199643492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591202135
    },
    {
        "content": "<p>Is this the statement you want? if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>m</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>k</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">km + 1 &lt; kn</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">n</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mi>m</mi><mo>&lt;</mo><mi>k</mi><mi>m</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>k</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">km &lt; km + 1 &lt; kn</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">n</span></span></span></span></p>",
        "id": 199644607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591202667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  thanks!</p>",
        "id": 199645711,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591203184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I think that implies my statement</p>",
        "id": 199645722,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591203190
    },
    {
        "content": "<p>actually I'm not sure</p>",
        "id": 199645749,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591203206
    },
    {
        "content": "<p>I thought maybe you got the statement wrong, because it has a stronger hypothesis than <code>lt_mul_cancel</code> so it immediately reduces to that one.</p>",
        "id": 199645893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591203276
    },
    {
        "content": "<p>oops, I named both statements <code>lt_mul_cancel</code></p>",
        "id": 199646486,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591203585
    },
    {
        "content": "<p>but I thought they are different, since the second one relies on the fact that <code>1/k &lt; 1</code> for most naturals<code>k</code></p>",
        "id": 199646555,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591203604
    },
    {
        "content": "<p>But <code>k &gt; 1</code> isn't actually needed for the second one. So either at least one of us is confused, or the statement is the wrong one.</p>",
        "id": 199648322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591204428
    },
    {
        "content": "<p>oh yeah I see what you mean</p>",
        "id": 199696994,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591234445
    }
]