[
    {
        "content": "<p>What's the term mode way of writing the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bar</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198704693,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590443740
    },
    {
        "content": "<p>There isn't really one, other than <code>@</code></p>",
        "id": 198704739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590443768
    },
    {
        "content": "<p>Oh, there isn't some <code>letI ... in</code> construction I can do?</p>",
        "id": 198704750,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590443799
    },
    {
        "content": "<p>I was sure I'd seen one in some code somewhere</p>",
        "id": 198704759,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590443812
    },
    {
        "content": "<p>The term mode version is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"n\">bar</span>\n</code></pre></div>",
        "id": 198704845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590443961
    },
    {
        "content": "<p><code>by exactI</code> also works in some cases (if you are just picking up some instance from the context)</p>",
        "id": 198704868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444001
    },
    {
        "content": "<p>Ahh that's what I was thinking of, thanks!</p>",
        "id": 198704923,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590444030
    },
    {
        "content": "<p>Yeah in this case it's something which shouldn't be an instance but I need it in this (otherwise one-line) lemma</p>",
        "id": 198704934,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590444056
    },
    {
        "content": "<p>In that case I'm guessing that the class it is shouldn't be a class in the first place <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 198704966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590444096
    },
    {
        "content": "<p>You can also use <code>local instance</code> inside a section for the lemma, if you need it for the statement of the theorem</p>",
        "id": 198704971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/term.20mode.20haveI/near/198704966\">said</a>:</p>\n<blockquote>\n<p>In that case I'm guessing that the class it is shouldn't be a class in the first place <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">mono_is_regular</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">regular_mono</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 198705027,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590444138
    },
    {
        "content": "<p>I thought that <code>exact a $ b</code> didn't work, or is that only true within a <code>begin end</code> block?</p>",
        "id": 198705031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590444149
    },
    {
        "content": "<p>it doesn't work</p>",
        "id": 198705040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444161
    },
    {
        "content": "<p>or rather, it works and does something no one ever wants</p>",
        "id": 198705049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444174
    },
    {
        "content": "<p>So do you lose <code>$</code> functionality in your term mode suggestion above?</p>",
        "id": 198705054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590444184
    },
    {
        "content": "<p>yes</p>",
        "id": 198705057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444189
    },
    {
        "content": "<p>as I'm just discovering</p>",
        "id": 198705061,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590444197
    },
    {
        "content": "<p>rofl</p>",
        "id": 198705066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590444204
    },
    {
        "content": "<p>Is this a bug, or an issue with parsing that can't be fixed for some reason?</p>",
        "id": 198705069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590444219
    },
    {
        "content": "<p>You can still put everything in <code>bar</code> in parentheses and use <code>$</code> therein</p>",
        "id": 198705071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444224
    },
    {
        "content": "<p>Yup this is what I did ^</p>",
        "id": 198705077,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590444241
    },
    {
        "content": "<p>But was very confused until I saw these messages</p>",
        "id": 198705121,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590444250
    },
    {
        "content": "<p>The problem is that <code>$</code> is interpreted as a tactic combinator, i.e. <code>exact foo $ bar</code> becomes <code>(exact foo) bar</code></p>",
        "id": 198705144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444304
    },
    {
        "content": "<p>I've never known why this was the case. It's really annoying sometimes.</p>",
        "id": 198705146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590444306
    },
    {
        "content": "<p>which is why <code>{ }</code> fixes it</p>",
        "id": 198705162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590444354
    },
    {
        "content": "<p>which doesn't ever work because <code>exact foo</code> has type <code>tactic unit</code> so it expects <code>bar</code> to have type <code>tactic_state</code> and this is what the error message says</p>",
        "id": 198705163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444356
    },
    {
        "content": "<p>The reason for this is because <code>$</code> has an absurdly low precedence value of 1</p>",
        "id": 198705223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444420
    },
    {
        "content": "<p>So does \"interactive tactic application\" have a special precedence? After all <code>rw f x</code> works even though you might expect it not to</p>",
        "id": 198705287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590444514
    },
    {
        "content": "<p>and the standard expr parser used in tactics, <code>texpr</code>, uses a precedence value of 2. See also this doc:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- A &#39;tactic expression&#39;, which uses right-binding power 2 so that it is terminated by</span>\n<span class=\"cm\">    &#39;&lt;|&gt;&#39; (rbp 2), &#39;;&#39; (rbp 1), and &#39;,&#39; (rbp 0). It should be used for any (potentially)</span>\n<span class=\"cm\">    trailing expression parameters. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">texpr</span> <span class=\"o\">:=</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span> <span class=\"n\">tac_rbp</span>\n</code></pre></div>\n\n\n<p>The comment fails to mention that <code>$</code> is also one of the terminating tokens (rbp 1)</p>",
        "id": 198705288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444518
    },
    {
        "content": "<p>aha</p>",
        "id": 198705289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590444522
    },
    {
        "content": "<p>Soooo can we just change <code>$</code> to 3 (or maybe 2)?</p>",
        "id": 198705299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590444550
    },
    {
        "content": "<p>This will make <code>&lt;|&gt;</code> lower precedence than <code>$</code></p>",
        "id": 198705307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444580
    },
    {
        "content": "<p>which seems undesirable, although I can probably live with it</p>",
        "id": 198705356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444615
    },
    {
        "content": "<p>It seems to me that a better solution, if possible, would be to treat the <code>&lt;|&gt;</code>, <code>;</code> and <code>,</code> tokens specially inside a begin-end block, so that they aren't necessarily tied to the standard meaning of these tokens in term mode</p>",
        "id": 198705457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590444826
    },
    {
        "content": "<p>Ahh, I see... you want <code>$</code> to have lower precedence than <code>&lt;|&gt;</code> in term mode, but higher precedence in an interactive tactic?</p>",
        "id": 198705579,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590445004
    },
    {
        "content": "<p>I guess the issue is a parser ambiguity where <code>exact tac1 &lt;|&gt; tac2</code>, in a context where you are defining a tactic using tactics for some reason, could mean either <code>(exact tac1) &lt;|&gt; tac2</code>, i.e. apply <code>tac1</code> and call <code>tac2</code> if that doesn't work, or <code>exact (tac1 &lt;|&gt; tac2)</code>, i.e. solve the goal using <code>tac1 &lt;|&gt; tac2</code></p>",
        "id": 198705581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590445013
    },
    {
        "content": "<p>(<code>&lt;|&gt;</code> could also be constructing many things other than tactics.)</p>",
        "id": 198705605,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590445071
    },
    {
        "content": "<p>indeed</p>",
        "id": 198705609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590445077
    },
    {
        "content": "<p>I don't even know what <code>exact foo $ bar &lt;|&gt; baz</code> should be interpreted as</p>",
        "id": 198705651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590445097
    },
    {
        "content": "<p>Probably <code>(exact (foo $ bar)) &lt;|&gt; baz</code>, on the basis of probability</p>",
        "id": 198705674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590445163
    },
    {
        "content": "<p>&amp; backwards compatibility regarding <code>&lt;|&gt;</code></p>",
        "id": 198705683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590445184
    },
    {
        "content": "<p>Who wants to try changing core so that <code>$</code> has precedence 3 and see what breaks?</p>",
        "id": 198705774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590445292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113489-new-members/topic/term.20mode.20haveI/near/198705027\">said</a>:</p>\n<blockquote>\n<p>[mono m]</p>\n</blockquote>\n<p>Yeah, all these properties being classes makes it dreadfully tedious to prove things about them.</p>",
        "id": 198706042,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590445693
    }
]