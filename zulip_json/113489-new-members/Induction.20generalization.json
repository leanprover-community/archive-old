[
    {
        "content": "<p>Hello, I'm having troubles (again) figuring out how to generalize arguments of an induction.<br>\nThere's a lot of code needed for a mwe, but I don't think it's necessary to understand my problem, nevertheless I'm posting it at the end.</p>\n<p>I want to prove this theorem about a typing system for security:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">noninterference</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">com</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s'</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">pstate</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">lv</span><span class=\"o\">}:</span>\n  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">s'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">⟹</span> <span class=\"n\">t'</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">⊢ₛ</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">⦅&lt;=</span> <span class=\"n\">l</span><span class=\"bp\">⦆</span> <span class=\"bp\">→</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">t'</span> <span class=\"bp\">⦅&lt;=</span> <span class=\"n\">l</span><span class=\"bp\">⦆</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>When I do <code>induction' ‹(c, s) ⟹ s'›</code> the inductive hypothesis is correctly generalized over  <code>t' </code> but not over  <code>t </code>.</p>\n<p>For a mwe, plese refer to <a href=\"https://github.com/andreadlm/thesis/blob/help/src/IMP_security.lean\">https://github.com/andreadlm/thesis/blob/help/src/IMP_security.lean</a> (the theorem is at the end).</p>\n<p>Thanks in advance!</p>",
        "id": 278960364,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1649940189
    },
    {
        "content": "<p>Can you <code>revert t t'</code> before you call the induction tactic?</p>",
        "id": 278960505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649940269
    },
    {
        "content": "<p>Or use <code>induction _ generalizing t</code></p>",
        "id": 278961031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649940571
    },
    {
        "content": "<p>(note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.induction'\">docs#tactic.interactive.induction'</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction\">tactic#induction</a> are slightly different)</p>",
        "id": 278961222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649940666
    },
    {
        "content": "<p>The <code>revert t t'</code> trick seems to work, even if I don't really understand why. Thanks, I'm always surprised by the willingness of this community to help others :)</p>",
        "id": 278964296,
        "sender_full_name": "Andrea Delmastro",
        "timestamp": 1649942238
    },
    {
        "content": "<p>The <code>revert</code> trick gives you a more powerful inductive hypothesis. If you have a predicate P(s,t) depending on two inputs and you try to prove it by induction on s directly with a fixed t then your induction hypothesis will say that P(s',t) is true for s' smaller than s and your goal will be P(s,t). Here t is fixed. If you revert t first, then after applying induction your hypothesis will be \"for all t, P(s',t)\" and your goal will be \"for all t, P(s,t)\" and in particular you will now be able to use the inductive hypothesis for things other than the fixed t.</p>",
        "id": 279003891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649961134
    },
    {
        "content": "<p>Note that <code>induction ... generalizing x y</code> is shorthand for roughly <code>revert x y, induction ..., intros x y</code></p>",
        "id": 279010508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649964544
    }
]