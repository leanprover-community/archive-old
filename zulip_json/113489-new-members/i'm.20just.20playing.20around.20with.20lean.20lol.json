[
    {
        "content": "<p>What does <code>classical.choice x._proof_1 1 = classical.choice x._proof_1 2</code> mean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">classical.choice</span> <span class=\"n\">nonempty_of_inhabited</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_should_be_unprovable_right</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 243530863,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624374532
    },
    {
        "content": "<p>like the <code>_proof_1</code> thing looks really strange to me</p>",
        "id": 243531191,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624374682
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">x</span>\n<span class=\"k\">#print</span> <span class=\"n\">x._proof_1</span>\n</code></pre></div>\n<p>you can see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.choice</span> <span class=\"n\">x._proof_1</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">x._proof_1</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nonempty_of_inhabited</span>\n</code></pre></div>\n<p>Lean tends to generate many underscore functions when it creates definitions (especially for pattern matching). I'm not sure why it split off this <code>nonempty</code> instance like this.</p>",
        "id": 243532722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624375323
    },
    {
        "content": "<p>And indeed, that theorem is unprovable. What you have done is choose a \"random\" function <code>ℕ → string</code> using choice, and for such a function we know nothing about its values besides the type, so <code>x 1 : string</code> may or may not be equal to <code>x 2 : string</code></p>",
        "id": 243549817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624382570
    }
]