[
    {
        "content": "<p>Do we have the lex ordering on Pi types yet?</p>",
        "id": 169111020,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561621304
    },
    {
        "content": "<p>I vaguely recall maybe Scott did this at one point in time</p>",
        "id": 169111083,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561621338
    },
    {
        "content": "<p>Around the same time <code>Ico</code> was added</p>",
        "id": 169111090,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561621348
    },
    {
        "content": "<p>Is it in the library?</p>",
        "id": 169111386,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561621656
    },
    {
        "content": "<p>I don't think it's computable</p>",
        "id": 169111439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561621688
    },
    {
        "content": "<p>at least not with arbitrary well orders</p>",
        "id": 169111457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561621730
    },
    {
        "content": "<p>I'm interested in when the indexing type is finite.</p>",
        "id": 169111552,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561621822
    },
    {
        "content": "<p>you still need an ordering</p>",
        "id": 169111693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561621962
    },
    {
        "content": "<p>If you have a <code>list I</code> enumerating the index set, you should be able to build it out of <code>prod.lex</code> parts</p>",
        "id": 169111741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561622039
    },
    {
        "content": "<p>Yeah, so the indexing type needs to be ordered.<br>\nThis is the correct definition right? Maybe <code>r</code> should be some total order.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span>  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169111966,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561622291
    },
    {
        "content": "<p>That works</p>",
        "id": 169112633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561622965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you already have this somewhere?</p>",
        "id": 169112868,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561623185
    },
    {
        "content": "<p>No.</p>",
        "id": 169112920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561623241
    },
    {
        "content": "<p>This is actually more complicated than expected in the infinite case. The indexing type has to be well ordered to get a total order.</p>",
        "id": 169124049,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561633370
    },
    {
        "content": "<p>right</p>",
        "id": 169124740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634050
    },
    {
        "content": "<p>Of course lex order on Z -&gt; Z doesn't work</p>",
        "id": 169124767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634094
    },
    {
        "content": "<p>And it's difficult to lift a preorder.</p>",
        "id": 169124768,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634094
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 169124790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634112
    },
    {
        "content": "<p>there is a natural preorder / partial order on pi types, but it's not lex order</p>",
        "id": 169124802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634138
    },
    {
        "content": "<p>I ccouldn't think of a natural lex preorder. <code>le</code> on <code>prod</code> is this. But I can't do this on <code>pi</code> without a greatest element.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">lex_has_le</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 169124903,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634211
    },
    {
        "content": "<p>So I did this for <code>lt</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">j</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pilex</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"n\">pilex</span> <span class=\"n\">ι</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>And just defined le to be lt or equal</p>",
        "id": 169124937,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634265
    },
    {
        "content": "<p>But that's not really right for preorders.</p>",
        "id": 169124989,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634288
    },
    {
        "content": "<p>No idea if anyone wants lexicographic preorders.</p>",
        "id": 169125033,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634341
    },
    {
        "content": "<p>that sounds kind of contradictory to me TBH</p>",
        "id": 169125066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634396
    },
    {
        "content": "<p>To me the whole point of lex order is to make it total</p>",
        "id": 169125116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634407
    },
    {
        "content": "<p>If you want a preorder it's <code>\\all i, f i &lt;= g i</code></p>",
        "id": 169125132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561634427
    },
    {
        "content": "<p>That's what I thought.</p>",
        "id": 169125170,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634494
    },
    {
        "content": "<blockquote>\n<p>To me the whole point of lex order is to make it total</p>\n</blockquote>\n<p>That's why dictionaries use it.</p>",
        "id": 169125386,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561634702
    }
]