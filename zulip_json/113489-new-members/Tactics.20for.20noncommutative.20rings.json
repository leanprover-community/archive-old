[
    {
        "content": "<p>In a commutative ring, I can prove identities using the <code>ring</code> tactic:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The above identity actually holds in noncommutative rings too.  The <code>ring</code> tactic doesn't seem to be defined for such rings, but is there a way to have <code>ring</code> spit out the proof it came up with in the commutative case, so that I can re-use it in the noncommutative case?</p>",
        "id": 197487418,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589410505
    },
    {
        "content": "<p>I don't think so. The proof it comes up with might use identities that don't hold for noncommutative rings.</p>",
        "id": 197487516,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589410566
    },
    {
        "content": "<p>That's true.  But can I get a trace on what <code>ring</code> did anyway, just in case it did it the efficient way (not using the extra hypotheses)?</p>",
        "id": 197487564,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589410611
    },
    {
        "content": "<p>It won't work</p>",
        "id": 197487588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410625
    },
    {
        "content": "<p>I think if ring did supply traces it would likely be through <code>ring?</code>, e.g. <code>tidy</code> and <code>tidy?</code> do this</p>",
        "id": 197487596,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410631
    },
    {
        "content": "<p>(which it doesn't, I think)</p>",
        "id": 197487609,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410636
    },
    {
        "content": "<p>the proof <code>ring</code> comes up with is guaranteed not to work for noncommutative rings</p>",
        "id": 197487621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410644
    },
    {
        "content": "<p>because the normal form explicitly depends on typeclasses that require commutativity</p>",
        "id": 197487711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410689
    },
    {
        "content": "<p>That's unfortunate, but good to know.</p>",
        "id": 197487720,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589410694
    },
    {
        "content": "<p>You might be able to use <code>abel</code> to do the proof instead</p>",
        "id": 197487741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410710
    },
    {
        "content": "<p>Out of interest, can I get a trace anyway?</p>",
        "id": 197487754,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589410717
    },
    {
        "content": "<p>with <code>simp</code> to work on monomials</p>",
        "id": 197487760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410722
    },
    {
        "content": "<p>sure, you can <code>#print</code> any proof to see it</p>",
        "id": 197487774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410733
    },
    {
        "content": "<p>Ah, thanks, that's new to me!</p>",
        "id": 197487791,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589410744
    },
    {
        "content": "<p><code>abel</code> seems also to apply only to commutative rings?</p>",
        "id": 197487845,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589410794
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">],</span>\n<span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197487975,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410807
    },
    {
        "content": "<p>abel applies to additive groups</p>",
        "id": 197487988,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410821
    },
    {
        "content": "<p>so if the human deals with multiplication then <code>abel</code> can do the addition</p>",
        "id": 197488005,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410837
    },
    {
        "content": "<p>how do you #print the ring proof?</p>",
        "id": 197488031,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410863
    },
    {
        "content": "<p>You have to use <code>theorem T</code> instead of <code>example</code>, and then <code>#print T</code> afterward</p>",
        "id": 197488045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589410886
    },
    {
        "content": "<p>thanks!</p>",
        "id": 197488058,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410900
    },
    {
        "content": "<p>(i should have figured that out, sorry)</p>",
        "id": 197488067,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589410909
    },
    {
        "content": "<p>Indeed, a really simple poor man's <code>noncomm_ring</code> is <code>simp only [add_mul, mul_add, sub_eq_add_neg, neg_mul, mul_neg]; abel</code></p>",
        "id": 197488186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411010
    },
    {
        "content": "<p>Perhaps noncommutative rings are easier to work with. What happens if you just apply distributivity until you can't, then apply associativity until you can't, and then use something like <code>ac_refl</code>?</p>",
        "id": 197488201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589411027
    },
    {
        "content": "<p>Yeah, what Mario just said</p>",
        "id": 197488211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589411039
    },
    {
        "content": "<p><code>simp</code> will almost work to close <code>abel</code> goals, except that it isn't smart enough to get negatives next to positives</p>",
        "id": 197488264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411066
    },
    {
        "content": "<p>Here the second proof works but the first doesn't</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_mul_neg</span><span class=\"o\">],</span>\n<span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">],</span>\n<span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197488534,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411287
    },
    {
        "content": "<p>adding sub_mul and mul_sub to the simp list doesn't do it for me, I think you need to put them down in a smart order</p>",
        "id": 197488583,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411334
    },
    {
        "content": "<p>oh i think one of my simp lemmas is backward</p>",
        "id": 197488630,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411383
    },
    {
        "content": "<p>I didn't actually look up the names</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_neg_mul_symm</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_eq_neg_mul_symm</span><span class=\"o\">],</span>\n<span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197488693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411410
    },
    {
        "content": "<p>Oh <code>mul_assoc</code> should also be in the list</p>",
        "id": 197488758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589411465
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197489169,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589411739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , you could stick this in your project somewhere and modify it as needed</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">noncomm_ring</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul_eq_neg_mul_symm</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_eq_neg_mul_symm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">abel</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">b₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">-</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">-</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">noncomm_ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197489173,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589411740
    }
]