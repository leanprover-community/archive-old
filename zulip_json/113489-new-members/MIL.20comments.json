[
    {
        "content": "<p>Since <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> encouraged me to write comments about \"Mathematics in Lean\", here are some regarding Chapter 2 which I just finished (solving most of the exercises):</p>\n<p>2.2: In the example at the end if one \"feels cocky\": Normally I would prove mul_right_inv before proving mul_one. Maybe this is just me and maybe it is a good lesson for \"cocky\" people.<br>\n2.3 As a beginner in Lean I was very confused over le_trans that addition and multiplication are by default left associated while implication is right associated. I feel like, this could be pointed out at this point (it is at least stated in Chapter 3.<br>\n2.3 \"however we will use that fact that\" should be \"however we will use the fact that\", small typo I think.<br>\n2.3 In the exercise to prove 0\\le a^2, if I follow the advice and use library_search, then it replies \"failed\" for me. If I tell it that it has e^a\\le e^b, then library_search does work, but also linarith works (with the same \"amount of help\"), so I didn't quite get the sentence below the exercise.<br>\n2.4 In the example where one should prove x \\| y * (x * z) + x^2 + w^2 could one put the lemma x \\| x^2 in the code that was proved before, so that one can use that instead of duplicating this part of the goal?<br>\n2.5 Small typo: \"algebraic structures likes\" should be \"algebraic structures like\"<br>\n2.5 You write that \"It is a good exercise to prove that not every lattice is distributive by constructing one\", unfortunately, what this tutorial seems to be missing is an explanation how to set up such a structure, i.e. how does one give an example of a group, a vector space, etc. Maybe this is worth another section/chapter to explain how to define a mathematical object and how to give an instance of a mathematical object.</p>",
        "id": 203353408,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1594274880
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 203354267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594276174
    },
    {
        "content": "<p>Thanks, Julian! These are <em>extremely</em> helpful. We'll make these fixes to next version of MiL soon, and maybe come back with questions.</p>\n<p>A quick response to the last comment: indeed, we certainly intend to write a chapter on how to define and work with algebraic structures. There's a wiki here, <a href=\"https://github.com/avigad/mathematics_in_lean_source/wiki\">https://github.com/avigad/mathematics_in_lean_source/wiki</a>, but the plans keep changing.</p>",
        "id": 203375471,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594294880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span>, in my just-updated mathlib, I tried this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n    <span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n    <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">library_search</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- exact pow_two_nonneg a</span>\n    <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I get the suggestion: \"Try this: exact pow_two_nonneg a\". That is what we want. Can you confirm that it fails when you try it?</p>\n<p>In the next exercise, the idea was indeed to encourage you to use <code>library_search</code>figure out how to show <code>exp a &lt;= exp b</code>. You can then say this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">exp</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"n\">exp_le_exp</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">library_search</span>\n    <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Once again <code>library_search</code> gives you a one-liner that will finish it off, though <code>linarith</code> also works. We were trying to encourage you to play around with <code>library_search</code>, tab completion, and <code>linarith</code> -- whatever it takes to get the job done. Can you think of better wording for that?</p>",
        "id": 203450753,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594334275
    },
    {
        "content": "<p>In answer to the fifth question, yes, you could give the previous example a name like <code>dvd_square</code> or <code>dvd_pow_two</code> and then apply it. Though in this case it is probably easier to repeat the two commands.</p>",
        "id": 203451441,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1594334733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Sorry for the late reply, I thought too much about your question how to reformulate and then forgot. <br>\nTo answer your question: For the first example, I just quoted the wrong line, I wanted to refer to the exp example below, sorry ofr that. For me a wording like \"Using the same tricks, confirm that linarith instead of library_search can also finish the job.\" instead of \"Also, confirm that linarith can do it with a bit of help.\" would have been more clear, but this is maybe personal taste. It was more a question whether I had missed something.</p>",
        "id": 205209267,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1595925109
    },
    {
        "content": "<p>Some more comments, mostly typos:<br>\n3.2 Inside a existential quantifier (should be \"an\")</p>\n<p>Overall, I was slightly overwhelmed with the amount of tactics in Section 3. Compared to that, I found Section 4 much more manageable (but I also did Section 4 after the workshop, so I definitely had more experience then). </p>\n<p>4.1 and the the anonymous constructors  (one \"the\" too much)<br>\n4.1 In the first exercise when trying rintros, I also needed the brackets to have <code>rintros x (h1 | h2)</code>. This is only explained in a later paragraph.<br>\n4.1 Two prove that two sets are equal (should be \"To\")<br>\n4.1 I had some trouble in the set-theoretic identities one might enjoy proving: The direction <code>s\\cup t\\subseteq s\\t\\cup t</code> didn't work for me. At some point I tried <code>by_cases h : x\\in t</code> but it didn't let me do it. Probably I took the wrong turn.<br>\n4.1 Here is are some examples (remove \"is\")</p>\n<p>4.2 In the downloaded version in vscode of the second-to-last example of the chapter, somehow \"open_locale classical\" didn't work. I could fix it by importing tactic additionally. I didn't see the problem when doing the exercise in the web-browser. <br>\n4.2 In the last exercise I found it easier to not use h3 at all and finish the exercise after h2 with <code>apply h₁, rwa h</code></p>",
        "id": 205211734,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1595926535
    },
    {
        "content": "<p>For <code>by_cases</code> to work on arbitrary propositions, you have to have classical logic enabled (using <code>open_locale classical</code> at the top of your file, or <code>classical,</code> at the beginning of your proof)</p>",
        "id": 205215268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595929074
    },
    {
        "content": "<p>This isn't true anymore:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205216713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595929932
    },
    {
        "content": "<p>(Without the <code>import</code> it doesn't work, however...!)</p>",
        "id": 205216747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595929952
    },
    {
        "content": "<p>how does that work?</p>",
        "id": 205217137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595930235
    },
    {
        "content": "<p>I would guess it just runs <code>classical</code> if it can't find an instance of decidability for P</p>",
        "id": 205225266,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595936754
    },
    {
        "content": "<p>I also imagine that's what <code>tauto!</code> does, but I should probably do less imagining and more reading source code</p>",
        "id": 205225387,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595936838
    },
    {
        "content": "<p>Thanks again, Julian. We'll make all these corrections soon. </p>\n<p>Regarding the proof, I just confirmed that this works with a recent version of Lean mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">\\</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"err\">∪</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xnt</span><span class=\"bp\">⟩</span> <span class=\"bp\">|</span> <span class=\"n\">xt</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xs</span> <span class=\"o\">},</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xt</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">|</span> <span class=\"n\">xt</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">xt</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xt</span> <span class=\"o\">},</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">xt</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The <code>import tactic</code> is hidden in the html display (we generally eliminate the repeated boilerplate to avoid cluttering the text), but it is there when you open the snippet.</p>\n<p>I can't figure out why it works. If I hover over <code>by_cases</code>, the tactic documentation says that the proposition has to be decidable, but printing the term shows that the generated proof uses <code>classical.prop_decidable</code>. The <code>by_cases</code> tactic ultimately calls an internal function, <code>mk_instance</code>. I am guessing that that was recently changed to use classical logic if all else fails.</p>",
        "id": 205248809,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595949285
    }
]