[
    {
        "content": "<p>I previously asked a question on this and thought I got it but on second look, I still don't get it. The recursor on enumerated types makes sense because it doesn't involve recursion, it's just making sure you have a <code>C n</code> for all enumerated <code>n</code>. But for the simplest recursive example using the natural numbers I don't understand where the recursion is happening. Trying to learn lean is my first exposure to lambda calculus let alone dependent type theory so it's taking awhile for my imperative-style brain to figure this stuff out.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">nat.rec_on :</span>\n<span class=\"cm\">Π {C : nat → Sort u_1} (n : nat), C nat.zero → (Π (a : nat), C a → C (nat.succ a)) → C n</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I understand that we are recursing just over <code>n</code> and that we return <code>m</code> if <code>n = 0</code>, which is the first half of the recursor formula. The second part is a lambda function that I'm not quite understanding. <br>\nSo take <code>n = 3, m = 1</code> which is <code> n = succ succ succ zero, m = succ zero</code><br>\nif I try <code>add n m</code> I get the right answer <code>succ succ succ succ zero</code> but I want to understand exactly what's going on.</p>\n<p>So <code>add n m</code> will check if <code>n = zero</code> which it is not, so it can't just return <code>m</code> so we enter the lambda function which has two bound variables. The which are <code>(a : nat)</code> and <code>C a</code> I guess, in this we've labeled them <code>n</code> and <code>z</code>. Where are these coming from? And where is the recursion happening?</p>",
        "id": 195634601,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588111954
    },
    {
        "content": "<p>Why don't you look at an easier example, such as a one-variable example?</p>",
        "id": 195634666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112001
    },
    {
        "content": "<p>Try to define the function which sends n to 2^n using <code>nat.rec_on</code> and then evaluate it with <code>#eval</code> to see if you got it right</p>",
        "id": 195634705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112033
    },
    {
        "content": "<p>This stuff is difficult, it took me a while to get on top of it.</p>",
        "id": 195634758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112052
    },
    {
        "content": "<p><code>C a</code> is <code>nat</code></p>",
        "id": 195634791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112079
    },
    {
        "content": "<p><code>add (succ d) m</code> is by definition <code>succ (add d m)</code></p>",
        "id": 195634950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112171
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 195634958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112176
    },
    {
        "content": "<p><code>add (succ d) m</code> is by definition the value that the function <code>(λ n z, nat.succ z)</code> takes when <code>n=d</code> and <code>z=add d m</code></p>",
        "id": 195635054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112239
    },
    {
        "content": "<p>and <code>add 0 m</code> is by definition <code>m</code></p>",
        "id": 195635080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112256
    },
    {
        "content": "<p>In general if you are defining a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> by recursion on the naturals, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n+1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is allowed to depend on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> (which is called <code>z</code> in this case)</p>",
        "id": 195635248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112339
    },
    {
        "content": "<p>So in the lambda <code>(λ n z, nat.succ z)</code>  <code>n</code> corresponds to the input <code>n</code> and <code>z</code> corresponds to <code>f(n)</code> (or <code>add n m</code> in this case) ?</p>",
        "id": 195635396,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588112423
    },
    {
        "content": "<p>I will try the one-variable case haha</p>",
        "id": 195635748,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588112554
    },
    {
        "content": "<p>I remember this taking a while to click for me as well. Looking at some other sources on type theory might (or might not) help (I guess it depends on your tastes). For me, I got a lot out of the first chapter of the <a href=\"https://homotopytypetheory.org/book/\" title=\"https://homotopytypetheory.org/book/\">HoTT book</a>.</p>",
        "id": 195636104,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588112733
    },
    {
        "content": "<p>In general if you're defining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">f:\\mathbb{N}\\to X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is anything, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is the constant function sending every natural to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, and <code>nat.rec_on</code> takes three explicit inputs, first <code>n</code>, then the value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, and then the rule which given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">d</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(d)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span></span></span></span> tells you what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(d+1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> is, and then it outputs what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> is.</p>",
        "id": 195636500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588112964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">def</span> <span class=\"n\">expon2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nminus1</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">fn</span> <span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">expon2&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">expon2&#39;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The second style makes a lot more sense</p>",
        "id": 195644511,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588118606
    },
    {
        "content": "<p>they are equal to me</p>",
        "id": 195644915,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588118908
    },
    {
        "content": "<p>the self-referential aspect is obvious in the second style</p>",
        "id": 195644971,
        "sender_full_name": "Brandon Brown",
        "timestamp": 1588118990
    },
    {
        "content": "<p>treat it as tail call recursion converted to iteration if it makes you happier</p>",
        "id": 195645204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588119163
    }
]