[
    {
        "content": "<p>I have basically two weeks of exposure to Dependent Type Theory, and I think of the mathematical world in terms of sets.  I feel like I am east of Eden.   So, to build my intuition, I would like to understand how the natural numbers are defined/constructed at level appropriate for an honors undergraduate student.  Something like how Tao constructs the natural numbers using the Peano axioms in his <a href=\"https://terrytao.wordpress.com/books/analysis-i/\">undergraduate analysis book</a>. Are there any resources any where I can read such a treatment?  Is there a different structure, perhaps a group. that would be appropriate to understand first? </p>\n<p>I appreciate any ideas.   Thanks.</p>",
        "id": 295475345,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661534815
    },
    {
        "content": "<p>Lean's definition is here <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat/src\">src#nat</a></p>",
        "id": 295476445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661535134
    },
    {
        "content": "<p>it's an inductive type with two constructors: <code>zero : nat</code> and <code>succ : nat -&gt; nat</code>.</p>",
        "id": 295476506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661535156
    },
    {
        "content": "<p>the book <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> has a section on inductive types that might be helpful as well.</p>",
        "id": 295477251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1661535371
    },
    {
        "content": "<p>Yeah I was looking at that.  It mentions a paper \"Peter Dybjer. Inductive families. Formal Asp. Comput., 6(4):440–465, 1994\".  I will try to read that.  <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> also mentions that </p>\n<blockquote>\n<p>It is remarkable that it is possible to construct a substantial edifice of mathematics based on nothing more than the type universes, Pi types, and inductive types; everything else follows from those.</p>\n</blockquote>\n<p>I would be very much interested to read an accounting of that.</p>\n<p>Thank you.</p>",
        "id": 295478357,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661535701
    },
    {
        "content": "<p><a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">#nng</a> is the standard answer to this question.</p>",
        "id": 295478359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661535702
    },
    {
        "content": "<p>Thank you both, I got a copy of the Peter Dybjer paper from a list of <a href=\"https://ncatlab.org/nlab/show/inductive+family\">links</a>.   I think I have very much enough to go on.</p>",
        "id": 295480965,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661536496
    },
    {
        "content": "<p>The natural number game is what started me down this rabbit hole.  Ha.</p>",
        "id": 295487625,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661538564
    },
    {
        "content": "<p>There's also some talks Kevin's given which you may find interesting. E.g. <a href=\"https://www.youtube.com/watch?v=aIObfpWdDbo\">https://www.youtube.com/watch?v=aIObfpWdDbo</a> (don't worry it's not actually 4 hours)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"aIObfpWdDbo\" href=\"https://www.youtube.com/watch?v=aIObfpWdDbo\"><img src=\"https://uploads.zulipusercontent.net/5f6a7b3842856db3c9e12985943ad9f3333b053c/68747470733a2f2f692e7974696d672e636f6d2f76692f61494f626670576444626f2f64656661756c742e6a7067\"></a></div>",
        "id": 295489385,
        "sender_full_name": "Julian Berman",
        "timestamp": 1661539133
    },
    {
        "content": "<p>You might also find <a href=\"https://proofassistants.stackexchange.com/a/1664/122\">my answer to this stack exchange question useful</a>.  The main point is that when Lean processes inductive types like the<code>nat</code> it adds a new theorem (axiom?) to the global context called <code>rec</code> which is a super powered version of induction and recursion.  It does all the work.  Lean also automatically derives a bunch of theorems from <code>rec</code>.  And even some of the built in syntax in Lean for working with inductive structures (like match blocks)  is just syntactic sugar for  <code>rec</code>-derived functions.</p>",
        "id": 295505184,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661544977
    },
    {
        "content": "<p>This is explained in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>, but if you want a deeper dive into DTT, I recommend the first chapter of the HoTT book (<a href=\"https://homotopytypetheory.org/book/\">https://homotopytypetheory.org/book/</a>).  They have a whole section on the  natural numbers and how to derive it’s properties from <code>rec</code>.</p>",
        "id": 295505808,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661545231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519925\">@Kent Van Vels</span> when you type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n</code></pre></div>\n<p>into Lean, under the hood four new objects are created in the system. The first object is a new type called <code>nat</code>, which is introduced as an undefined constant. In other words, we can now talk about a new type called <code>nat</code>. The second and third objects are two new constructors for <code>nat</code> called <code>nat.zero</code> and <code>nat.succ</code>. This means that Lean now knows there's a term <code>nat.zero : nat</code> and a function <code>nat.succ : nat -&gt; nat</code>. The fourth thing is a function which can be interpreted as both the principle of mathematical induction and the principle of mathematical recursion. The reason you can do both things with one function is that the <code>Type</code> universe and the <code>Prop</code> universe are both universes and so you can talk about functions taking values in a random universe and this covers both cases. Once you have recursion and induction you can prove all the other obvious things like zero isn't succ of anything, that succ is injective and so on. I wrote something about induction and inductive types <a href=\"https://xenaproject.wordpress.com/2021/04/03/induction-and-inductive-types/\">here</a>, which might help (I also came to this as a mathematician with some understanding of set theory but 0 knowledge of type theory).</p>",
        "id": 295564821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661590566
    },
    {
        "content": "<p>Thank you for the links. I appreciate it.</p>",
        "id": 295612156,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661614898
    },
    {
        "content": "<p>Thank you, I think the post you linked to is very helpful.</p>",
        "id": 295661343,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1661652660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> in Lean 4 recursors (<code>rec</code>) are primitive declarations on their own, among with definitions, axioms, theorems etc</p>",
        "id": 295757812,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661721208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20are.20the.20naturals.20numbers.20defined.20in.20Dependent.20type.20theor/near/295757812\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> in Lean 4 recursors (<code>rec</code>) are primitive declarations on their own, among with definitions, axioms, theorems etc</p>\n</blockquote>\n<p>I'm a bit confused.  Are you saying some declaration keyword (like <code>rec</code> or <code>recursor</code>) is used to make declarations in Lean by users?  If so, I have no idea what the syntax is or why a user would want to use this.  Do you have documentation on this feature?  (And I assume we are talking about something separate from <a href=\"https://github.com/leanprover/theorem_proving_in_lean4/blob/master/induction_and_recursion.md#local-recursive-declarations\">local recursive declarations</a>, right?)</p>",
        "id": 295771292,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661737929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>,  or are you just talking about an internal <code>recursor</code> designation for such declarations, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 4:</span>\n<span class=\"k\">#print</span> <span class=\"n\">Nat.rec</span>\n<span class=\"n\">recursor</span> <span class=\"n\">Nat.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">Nat.zero</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>In that case is it just a rename of the Lean 3 <code>eliminator</code> designation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean 3:</span>\n<span class=\"k\">#print</span> <span class=\"n\">nat.rec</span>\n<span class=\"kn\">protected</span> <span class=\"n\">eliminator</span> <span class=\"n\">nat.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>(Not that I understand completely what the <code>eliminator</code> designation provides in Lean 3.  I guess<code>nat.rec</code> can't be a <code>definition</code>/<code>theorem</code> since there is no body/proof, and it shouldn't be an <code>axiom</code> as it shouldn't show up in the list of axioms.   So that necessitates some other designation.  Maybe <code>eliminator</code> also provides special judgmental equalities, or triggers the automatic creation of auxiliary theorems like <code>nat.rec_on</code>.  It also likely makes the bookkeeping easier, especially when checking proofs in the kernel.)</p>",
        "id": 295771332,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661738033
    },
    {
        "content": "<p>I was talking about the later, as you wrote the <code>Nat.rec</code> example</p>",
        "id": 295772885,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1661740092
    }
]