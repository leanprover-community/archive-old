[
    {
        "content": "<p><code>simp * with parity_simps</code>uses attribute <code>parity_simps</code>. Is there any list documented of such attributes such that if I want to use<code>simp with</code>, I can look for an attribute that I want to use?</p>",
        "id": 240556216,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622170304
    },
    {
        "content": "<p>they're not that commonly used, people just tend to jam many things into <code>simp</code>. i mentioned a couple more of them <a href=\"https://leanprover-community.github.io/extras/simp.html#more-advanced-features\">here</a></p>",
        "id": 240562842,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622178945
    },
    {
        "content": "<p>I think it might be something someone could get our documentation generator to collect, so I've opened an issue: <a href=\"https://github.com/leanprover-community/doc-gen/issues/133\">doc-gen#133</a></p>",
        "id": 240563636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622180002
    },
    {
        "content": "<p>What is the function of attitude <code>reducibility</code></p>",
        "id": 244230554,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624938316
    },
    {
        "content": "<p>Attributes like <code>reducible</code> are a message to the elaborator</p>",
        "id": 244240246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624950031
    },
    {
        "content": "<p>Right!  I noticed <code>reducible</code>. There is also one called <code>reducibility</code>, between which I don't fully understand the difference.</p>",
        "id": 244268985,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624968147
    },
    {
        "content": "<p>I can't find <code>reducibility</code> in mathlib. Can you give me an example of what you're talking about?</p>",
        "id": 244328568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624992420
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.decl_reducibility\">docs#tactic.decl_reducibility</a> is the underlying representation that <code>@[reducible]</code> etc use</p>",
        "id": 244328914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624992580
    },
    {
        "content": "<p>Most low-level tactics use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.transparency\">docs#tactic.transparency</a> to determine how definitions to unfold, for example in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.is_def_eq\">docs#tactic.is_def_eq</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.whnf\">docs#tactic.whnf</a>. It has two more options than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.decl_reducibility\">docs#tactic.decl_reducibility</a> (which is new to me): <code>instances</code> (this is used by type-class inference, and includes all reducible definitions and semireducible instances), and <code>none</code> (unfold nothing).</p>",
        "id": 244353922,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625004113
    },
    {
        "content": "<p>Could anyone please explain the tag <code>@[nolint unused_arguments]</code> before the definition of matices?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">def</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u'</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 250208621,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1629539376
    },
    {
        "content": "<p>Mathlib has several linters which check code added to the library doesn't contain certain mistakes or inefficiencies. One of these is the unused arguments linter, which complains when you try and a declaration with assumptions that aren't used. Most of the time this is useful but occasionally we want to have some assumptions on a definition that aren't required to make the definition itself. In this case mathlib assumes matrices are indexed by finite types even though this isnt necessary to define matrices as functions from m and n to alpha. So we ask the unused arguments linter to ignore this declaration using the nolint attribute.</p>",
        "id": 250209564,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629540681
    },
    {
        "content": "<p>That doesn't explain why this particular instance is allowed to be an exception.</p>",
        "id": 250209687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629540845
    },
    {
        "content": "<p>Maybe one can just remove the <code>[fintype]</code> arguments in the actual definition. (Certainly they'll be needed later.)</p>",
        "id": 250209731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540960
    },
    {
        "content": "<p>Ideally every <code>@[nolint]</code> would also come with a comment explaining what goes wrong without it.</p>",
        "id": 250209773,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540976
    },
    {
        "content": "<p>It's possible that in this case someone just felt the <code>[fintype]</code> arguments should be there from the beginning to \"signal intent\".</p>",
        "id": 250209777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629540997
    },
    {
        "content": "<p>(Usually that's a bad idea, however. Infinite matrices are actually a reasonable thing sometimes!)</p>",
        "id": 250209781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629541021
    },
    {
        "content": "<p>Yes I don't personally understand why the assumption is here in this case. Just explaining the general principle. If you know the reason Patrick please tell us</p>",
        "id": 250209853,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629541141
    },
    {
        "content": "<p>Many thanks for your explanations!</p>",
        "id": 250210096,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1629541497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/attributes/near/250209853\">said</a>:</p>\n<blockquote>\n<p>Yes I don't personally understand why the assumption is here in this case. Just explaining the general principle. If you know the reason Patrick please tell us</p>\n</blockquote>\n<p>seems it's just always been like that: <a href=\"https://github.com/leanprover-community/mathlib/issues/334\">#334</a>, and then no-one bothered removing the assumption</p>",
        "id": 250210196,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629541612
    },
    {
        "content": "<p>I vote for removing it</p>",
        "id": 250210700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629542399
    },
    {
        "content": "<p>Removing it would stop fintype diamonds coming up in the type itself, which is probably a good thing!</p>",
        "id": 250211112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629543042
    },
    {
        "content": "<p>I was starting on this, and <code>matrix.mul</code> is based on a finite definition. We could switch to composition, right? My brain is currently in \"adding <code>[fintype X]</code> when Lean shouts\" mode...</p>",
        "id": 250212356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629544968
    },
    {
        "content": "<p>multiplying infinite matrices is tricky</p>",
        "id": 250213471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629546764
    },
    {
        "content": "<p>so should I just leave it as is for now with fintypes sprinkled?</p>",
        "id": 250213871,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629547301
    },
    {
        "content": "<p>Yeah, that's what I would do.</p>",
        "id": 250214409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629548011
    },
    {
        "content": "<p>Someone can add a <code>matrix.sparse_mul</code> later (or some other variant).</p>",
        "id": 250214415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629548037
    },
    {
        "content": "<p>Don't you just introduce the <code>fintype</code> hypothesis at the moment you define <code>mul</code>?</p>",
        "id": 250215699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629549836
    },
    {
        "content": "<p>yes, that's what I'm doing now but I was thinking if there was some way to have infinite matrix mul</p>",
        "id": 250215863,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629550005
    },
    {
        "content": "<p>Could there be a useful version using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsum\">docs#finsum</a> of the support of the set of products of entries to be added? Then the mul of any strictly upper triangular (i.e. nilpotent) matrices would be defined</p>",
        "id": 250216278,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629550565
    },
    {
        "content": "<p>I guess that works, but changing to <code>finsum</code> will be a refactor that requires quite a bit more work than simply removing these <code>fintype</code> assumptions.</p>",
        "id": 250216620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629550966
    },
    {
        "content": "<p>If someone volunteers to do that, great!</p>",
        "id": 250216647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629551001
    },
    {
        "content": "<p>i started doing this in <a href=\"https://github.com/leanprover-community/mathlib/tree/matrix_not_fintype\">branch#matrix_not_fintype</a>; all I've done so far is busy-work (removing fintypes), but I'll start looking at some proofs soon... I think <code>minor</code> could have less fintypes</p>",
        "id": 250224230,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629561492
    },
    {
        "content": "<p>one that I'm specifically interested in is <a href=\"https://github.com/leanprover-community/mathlib/blob/51c425091e59ca108d601776db21a3ce843eacb8/src/data/matrix/basic.lean#L1066\">induction_on</a>; that definitely doesn't seem fintype dependent, but the proof currently uses a blunt fintype argument. however, I don't think I know the areas of mathlib that deal with these sorts of sums yet; can anyone take a look at that?</p>",
        "id": 250224273,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629561587
    },
    {
        "content": "<p>I don't think this is true without fintype (I'm not at lean so I could be wrong but): the proposition \"M has only finitely many nonzero entries\" is true for the standard basis and is preserved by addition but isn't true for arbitrary (infinite) matrices</p>",
        "id": 250227120,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629565265
    },
    {
        "content": "<p>ahh, that's a nice counterexample - thanks :)</p>",
        "id": 250227219,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629565407
    },
    {
        "content": "<p>In the theory of p-adic modular forms there are infinite-dimensional spaces of forms, and Hecke operators can be represented as explicit matrices over a topological ring which don't have finite support in any sense, however there is a <code>tmul</code> or whatever it's called, and we only apply it when everything is absolutely convergent so there is no issue with order of summation.</p>",
        "id": 250232314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629572856
    },
    {
        "content": "<p>If someone wants to knock up a tmul which works for the p-adic numbers then we could be proving theorems about p-adic modular forms before we've proved anything about classical modular forms, because p-adic modular forms have several combinatorial definitions</p>",
        "id": 250232481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629573018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What do you mean with <code>tmul</code>? In mathlib <code>tmul</code> is the name for elementary tensors...<br>\nDo you mean the multiplicative variant of <code>tsum</code>?</p>",
        "id": 250233107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629574021
    },
    {
        "content": "<p>Yeah I just got the name wrong, I have a bad memory and lousy internet. To compute the product of the infinite matrices you use tsum to compute the coefficients.</p>",
        "id": 250233756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629575062
    },
    {
        "content": "<p>But <code>tsum</code> already exists. So everything is there in principal, right?</p>",
        "id": 250233902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629575312
    },
    {
        "content": "<p>Right --- and then one has to prove things like mul_assoc etc</p>",
        "id": 250234557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629576256
    },
    {
        "content": "<p>There's also a theory of characteristic power series if things converge enough</p>",
        "id": 250234563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629576284
    },
    {
        "content": "<p>There's also a finite rank theory, where there is a finite support condition on columns but not rows -- then products are always well-defined</p>",
        "id": 250234643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629576369
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8810\">#8810</a></p>",
        "id": 250280424,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629647412
    },
    {
        "content": "<p>It'd be nice if it was merged soon, but honestly I had to change far less files than I thought so it's not like going to keep breaking</p>",
        "id": 250280432,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629647433
    },
    {
        "content": "<p>Most things like multiplying matrices it turns out ;b</p>",
        "id": 250280435,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629647442
    },
    {
        "content": "<p>Now compiles with no linter unused warnings :)</p>",
        "id": 250289094,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629660158
    },
    {
        "content": "<p>just wanna bump this — I feel like it's worth merging soon so people can start thinking about infinite matrix stuff</p>",
        "id": 250387979,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1629741618
    }
]