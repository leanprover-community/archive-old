[
    {
        "content": "<p>Hi,<br>\nSometimes I have trouble parsing the local context or a goal; if my goal is 5 lines for example, I can't automatically parse whether it's an equality, an iff statement, a forall statement or something else. Is there a nice way to indent this in the infoview so I can immediately see this? I know I can copy the state to a comment, and then it'll show it nice and parsable, but I'd prefer if it were possible directly in the infoview itself somehow.</p>",
        "id": 206276016,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596816498
    },
    {
        "content": "<p>Clicking on the goal will show you the head symbol.</p>",
        "id": 206276112,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596816556
    },
    {
        "content": "<p>Only if you click on the right part, right? (E.g.., on the <code>=</code>-symbol if it's an equality)</p>",
        "id": 206276560,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596816780
    },
    {
        "content": "<p>You can move your mouse over the goal until everything gets highlighted</p>",
        "id": 206276622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596816811
    },
    {
        "content": "<p>So there's no automatic indentation? Then I'll follow your approach, thanks!</p>",
        "id": 206279441,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596818136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319356\">@Pim Spelier</span>  Do you have an example of such a long goal? So everyone could have an intuitive idea about the indentation.</p>",
        "id": 206337922,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596874352
    },
    {
        "content": "<p>An example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">turing</span><span class=\"bp\">.</span><span class=\"n\">TM2</span><span class=\"bp\">.</span><span class=\"n\">cfg</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">a_1</span> <span class=\"err\">∈</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">of_option</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">init_list</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">k₀</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"bp\">_.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"bp\">.</span><span class=\"n\">to_encoding</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">a</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">turing</span><span class=\"bp\">.</span><span class=\"n\">TM2</span><span class=\"bp\">.</span><span class=\"n\">cfg</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"n\">stk</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">stk</span><span class=\"o\">})</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">a_1</span> <span class=\"err\">∈</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">halt_list</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">k₁</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"bp\">.</span><span class=\"n\">to_encoding</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>which, when \"copy state to comment\"'ed, gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">turing</span><span class=\"bp\">.</span><span class=\"n\">TM2</span><span class=\"bp\">.</span><span class=\"n\">cfg</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">),</span>\n    <span class=\"n\">a_1</span> <span class=\"err\">∈</span>\n        <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">of_option</span>\n          <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">init_list</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">k₀</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"bp\">_.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"bp\">.</span><span class=\"n\">to_encoding</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">a</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">bind</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">turing</span><span class=\"bp\">.</span><span class=\"n\">TM2</span><span class=\"bp\">.</span><span class=\"n\">cfg</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">),</span>\n                <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span><span class=\"o\">,</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">var</span><span class=\"o\">,</span> <span class=\"n\">stk</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">stk</span><span class=\"o\">})</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">↔</span>\n      <span class=\"n\">a_1</span> <span class=\"err\">∈</span> <span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">halt_list</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">k₁</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Γ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"err\">Λ</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">roption</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ea</span><span class=\"bp\">.</span><span class=\"n\">to_encoding</span><span class=\"bp\">.</span><span class=\"n\">encode</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>making it clear that it's stating that for all a, a certain iff-statement hold. With Patrick's tip, you can easily see that it's a forall statement if you start at the beginning, but to see that it's a forall a, ... ↔ ... statement, you'd need to mouse over exactly the right character.<br>\nIt's not really that big of a problem, the \"copy state to comment\"'ing does work, but I was just wondering if it's possible somehow (clearly there is code for indentation somewhere)</p>",
        "id": 206340232,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596878928
    },
    {
        "content": "<p>Take a look at the code, <code>vscode-lean</code> doesn't seem to do indentation in \"copy state to comment\", it just put <code>/- -/</code> around the text. This could be the difference between plain text mode and widget mode, which indicates this could be a widget improvement?</p>",
        "id": 206340464,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596879434
    },
    {
        "content": "<p>Can you try switching back to plain text mode? Do you see the indentation after that?</p>",
        "id": 206340466,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596879469
    },
    {
        "content": "<p>That works, thanks! Then it misses the widget benefits, but I can just switch back and forth as need be for now.</p>",
        "id": 206340568,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596879647
    },
    {
        "content": "<p>Just curious: does that mean the widget actively removes the indentation? Or does the indentation just not survive the parsing by the widget?</p>",
        "id": 206340617,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596879724
    },
    {
        "content": "<p>But the indentation in the pasted comment is also not showing that it's a <code>∀ a, ... ↔ ...</code> statement either. Maybe there could be a smart indentation using a top-down approach for widget view?</p>",
        "id": 206340621,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596879753
    },
    {
        "content": "<p>The indentation in the comment is kinda showing it's a <code>∀ a, ... ↔ ...</code> statement, but you do have to know you have to look at the end of the 6th (first to last) line to see the relation between the block starting at the second line and the last line.</p>",
        "id": 206340944,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1596880259
    },
    {
        "content": "<p>If you set_option  pp.all true and then turn widgets off you get an output which has correct indentation spacing but I've found that using the widget functionality is easier in practice</p>",
        "id": 206354942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596904873
    }
]