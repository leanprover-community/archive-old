[
    {
        "content": "<p>I'm having a couple issues solving one of tutorial exercises. Here is the whole thing, but the most relevant two lines are the two just before <code>end</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bdd_above_segment</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">continuous_at_pt</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">u</span> <span class=\"n\">hu</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">bnd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"n\">N</span> <span class=\"bp\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">clust</span> <span class=\"o\">:=</span> <span class=\"n\">bolzano_weierstrass</span> <span class=\"n\">bnd</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">clust</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">bc</span><span class=\"o\">,</span><span class=\"n\">hc</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hf</span> <span class=\"n\">c</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cluster_point</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">φ</span> <span class=\"n\">hφ</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"n\">seq_continuous_of_continuous</span> <span class=\"n\">hf</span> <span class=\"n\">hφ.right</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">unblah</span> <span class=\"o\">:</span> <span class=\"n\">tendsto_infinity</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">squeeze_infinity</span> <span class=\"n\">seq_limit_id</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:=</span> <span class=\"n\">id_le_extraction</span> <span class=\"n\">hφ.left</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ineq2</span> <span class=\"o\">:=</span> <span class=\"n\">hu.right</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ineq</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ineq2</span><span class=\"o\">,},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_seq_limit_of_tendstoinfinity</span> <span class=\"n\">unblah</span> <span class=\"n\">c</span> <span class=\"n\">blah</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Firstly, I'm getting a type mismatch at the first ∘ in the second-to-last line. I suspect it is some coercion issue, however don't understand why this is the case - u has type <code>ℕ → ℝ</code> and f has type <code>ℝ → ℝ</code>, so I don't know why, of all places, it complains there.<br>\nSecondly, if I <code>sorry</code> that last <code>have</code>, then I am getting issues because types of some objects, starting with <code>clust</code>, involve <code>(λ (N : ℕ), u N)</code> which, I thought, would be the same as just <code>u</code>. I looked at the model solution of this exercise, and it seems to be structured differently so somehow the issue doesn't arise. Can we salvage the last line of my solution?</p>",
        "id": 251431709,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630434073
    },
    {
        "content": "<p>Hey Wojtek! </p>\n<p>As you probably know by now, the naturals are not a subset of the reals in any real sense in Lean, there's a coercion. If you uncomment the <code>set_option pp.coercions false</code> line at the top of the tutorial file then you can see all the coercions indicated with arrows. In particular you can see that your goal is actually <code>↑n ≤ (f ∘ u ∘ φ) n</code> so your <code>calc</code> proof is not quite right as it stands because it proves n &lt;= something and you want to prove <code>↑n</code> &lt;= something. I don't know what they teach you in the tutorial but here's a way to finish that calculation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">assumption_mod_cast</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">ineq2</span><span class=\"o\">,},</span>\n</code></pre></div>",
        "id": 251439598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630436744
    },
    {
        "content": "<p>I really don't know why turning coercions off is done in this file, nobody uses lean this way and I just spent 10 minutes confused what was going on here as well..</p>",
        "id": 251439943,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630436871
    },
    {
        "content": "<p>When I fix this, I see that the error you get on the last line is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">not_seq_limit_of_tendstoinfinity</span> <span class=\"n\">unblah</span> <span class=\"n\">c</span> <span class=\"n\">blah</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">blah</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">seq_limit</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span> <span class=\"bp\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>so this doesn't seem to be an issue with u and (lam N, u N), this seems to be that <code>blah</code> is a proof that something is tending to <code>f c</code> but Lean is expecting a proof that it tends to <code>c</code>.  You can fix the last line by letting Lean figure out what things are tending to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">not_seq_limit_of_tendstoinfinity</span> <span class=\"n\">unblah</span> <span class=\"n\">_</span> <span class=\"n\">blah</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 251440052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630436903
    },
    {
        "content": "<blockquote>\n<p>this seems to be that blah is a proof that something is tending to f c but Lean is expecting a proof that it tends to c</p>\n</blockquote>\n<p>ah I see, that one is just my sloppiness then.</p>",
        "id": 251442265,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630437687
    },
    {
        "content": "<p>As for the first part: I don't think the tutorial discusses coercion issues or anything of that sort at all, I'm only aware of it as it is mentioned in one of the challenge problems</p>",
        "id": 251442425,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630437741
    },
    {
        "content": "<p>You should learn to read the error messages. They can be quite intimidating at first but they often tell you what is going on.</p>",
        "id": 251442438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630437749
    },
    {
        "content": "<p>Yeah I'm working on that. I saw that it was telling me the types were different, but after seeing the lambda u difference I didn't look at the c vs f c</p>",
        "id": 251442658,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630437835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312947\">Wojtek Wawrów</span> <a href=\"#narrow/stream/113489-new-members/topic/Troubles.20with.20coercion/near/251442425\">said</a>:</p>\n<blockquote>\n<p>As for the first part: I don't think the tutorial discusses coercion issues or anything of that sort at all, I'm only aware of it as it is mentioned in one of the challenge problems</p>\n</blockquote>\n<p>So the issue is that <code>calc</code> is just some big syntactic sugar for basically applying transitivity of &lt;= on some type. However Lean was failing to guess the type in your proof because your first &lt;= was between naturals :-)</p>",
        "id": 251442737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630437853
    },
    {
        "content": "<p>Okay, so playing around with what you told me, here is my understanding of what the bits and bobs do, correct me if any of these are wrong:</p>\n<ol>\n<li>Since keeping or leaving <code>set_option pp.coercions false</code> doesn't seem to change whether the proof works, I suppose it is merely \"visual\", to indicate where coercions happen.</li>\n<li>The reason I was getting a type error is not because of a type mismatch between f and u, but between the type of φ n and f(...) which I was trying to compare using ≤.</li>\n<li><code>assumption_mod_cast</code> has found the <code>n ≤ φ n</code> lemma, has automatically transformed it into <code>↑n ≤ ↑(φ n)</code>, which then allowed me to use <code>ineq2</code> to complete the proof.</li>\n</ol>",
        "id": 251446683,
        "sender_full_name": "Wojtek Wawrów",
        "timestamp": 1630439205
    },
    {
        "content": "<p>Yes <code>pp</code> stands for pretty printer, by default lean displays when it inserts coercions with a little up arrow so you know that a function is being applied there.<br>\nThat sounds right to me</p>",
        "id": 251447405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1630439469
    }
]