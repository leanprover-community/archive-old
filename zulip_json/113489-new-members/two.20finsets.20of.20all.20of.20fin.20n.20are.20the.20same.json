[
    {
        "content": "<p>I wasn't sure how to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rowindset</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list.to_finset</span> <span class=\"o\">[</span><span class=\"n\">fin.of_nat</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">fin.of_nat</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">fin.of_nat</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">fin.of_nat</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">r0</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">r3</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">r0</span> <span class=\"bp\">≠</span> <span class=\"n\">r1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r0</span> <span class=\"bp\">≠</span> <span class=\"n\">r2</span> <span class=\"bp\">∧</span> <span class=\"n\">r1</span> <span class=\"bp\">≠</span> <span class=\"n\">r2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">r0</span> <span class=\"bp\">≠</span> <span class=\"n\">r3</span> <span class=\"bp\">∧</span> <span class=\"n\">r1</span> <span class=\"bp\">≠</span> <span class=\"n\">r3</span> <span class=\"bp\">∧</span> <span class=\"n\">r2</span> <span class=\"bp\">≠</span> <span class=\"n\">r3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">rowindset</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">r3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>essentially \"four different elements of fin 4 are the same as the explicitly constructed set of the elements of fin 4\".  I'd be grateful if someone could point me to relevant lemmas and/or weirdness in my definition!</p>",
        "id": 266003648,
        "sender_full_name": "Evan Lohn",
        "timestamp": 1640354271
    },
    {
        "content": "<p>Since there are finitely many options and we can compute with <code>fin</code>, you can ask Lean to check all possibilities:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r0</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">r3</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">r0</span> <span class=\"bp\">≠</span> <span class=\"n\">r1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r0</span> <span class=\"bp\">≠</span> <span class=\"n\">r2</span> <span class=\"bp\">∧</span> <span class=\"n\">r1</span> <span class=\"bp\">≠</span> <span class=\"n\">r2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">r0</span> <span class=\"bp\">≠</span> <span class=\"n\">r3</span> <span class=\"bp\">∧</span> <span class=\"n\">r1</span> <span class=\"bp\">≠</span> <span class=\"n\">r3</span> <span class=\"bp\">∧</span> <span class=\"n\">r2</span> <span class=\"bp\">≠</span> <span class=\"n\">r3</span><span class=\"o\">),</span>\n  <span class=\"n\">rowindset</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">r3</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 266003977,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640354516
    },
    {
        "content": "<p>Of course that doesn't scale to lots of <code>fin</code>s :)</p>",
        "id": 266004072,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640354616
    },
    {
        "content": "<p>Thanks! Not sure if it's my version of Lean or mathlib that's causing this problem, but I had to use the exclam version <code>dec_trivial!</code> for some reason.</p>",
        "id": 266004173,
        "sender_full_name": "Evan Lohn",
        "timestamp": 1640354733
    },
    {
        "content": "<p>Note that Anne put all the assumptions in the goal (that is, right of the <code>:</code>)</p>",
        "id": 266004259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640354831
    },
    {
        "content": "<p><code>dec_trivial!</code> tries to do that for you.</p>",
        "id": 266004265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640354843
    },
    {
        "content": "<p>I didn't even realize that <code>dec_trivial!</code> existed <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 266004867,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640355479
    },
    {
        "content": "<p>Whenever a tactic I try doesn't work, I always append an exclamation mark and try again ;-)</p>",
        "id": 266008611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640359354
    }
]