[
    {
        "content": "<p>I'm trying to construct a function <code>f :  a → b</code> (as part of an instance of a structure) with two types a and b and non-trivially I have that for some type c defined differently in fact <code>b=c</code> (and I can prove that if needed).  </p>\n<p>How can I let lean know that in fact, what might appear to be of type <code>a → c</code> (being given by <code>λ x , y</code>, for some <code>y : c</code>) is in fact totally fine and fulfils the requirement for being of type <code>a → b</code>?</p>",
        "id": 132461786,
        "sender_full_name": "Ned Summers",
        "timestamp": 1534778142
    },
    {
        "content": "<p>One way do it is to use <code>cast</code>. It does get in the way when trying to reason about the function but it does what you said. You could do it as <code>cast (by subst c) f</code></p>",
        "id": 132461983,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534778316
    },
    {
        "content": "<p>I sometimes define local notations for this kind of cast: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">♯</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">cc</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 132462161,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534778470
    },
    {
        "content": "<p>Ah ok, thanks. I'm not familiar with using subst, how would I include a proof that b = c in this? Currently, I'm being told \"subst tactic failed, given expression is not a local constant\". Apologies, I am very much a beginning.</p>",
        "id": 132508506,
        "sender_full_name": "Ned Summers",
        "timestamp": 1534844919
    },
    {
        "content": "<p>Never mind, managed to get that sorted!</p>",
        "id": 132509682,
        "sender_full_name": "Ned Summers",
        "timestamp": 1534846913
    },
    {
        "content": "<p>I'm not sure if this is what you originally meant, Simon, but I ended up solving this with <code>λ x , cast( ... ) y</code>, using my proof in the brackets. However, if I also had properties previously expressed about y, how do I go about using these for the cast version?</p>\n<p>For example (fairly close to what I'm doing), if y were in the center of a group, is it possible to prove that for some other member x, cast _ y * x = x * cast _ y? Or do we lose this information in casting?</p>",
        "id": 132510322,
        "sender_full_name": "Ned Summers",
        "timestamp": 1534847985
    },
    {
        "content": "<p>Maybe you should take a look at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#rewriting\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#rewriting\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html#rewriting</a></p>",
        "id": 132517275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534858269
    }
]