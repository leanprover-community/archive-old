[
    {
        "content": "<p>Sorry if this has been asked before, searching Zulip for this became fruitless. <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>\n<p>Would understanding <a href=\"http://us.metamath.org/\">MetaMath</a> help in learning/understanding Lean? If so, can one point to a reference or give a brief explanation of how understanding MetaMath helps for learning Lean. Thanks.</p>",
        "id": 264835263,
        "sender_full_name": "Eric Taucher",
        "timestamp": 1639476762
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> - if anyone knows the answer, he does</p>",
        "id": 264836722,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639477605
    },
    {
        "content": "<p>I'm not an expert so my response shouldn't be taken as an authoritative answer on this subject. Metamath is a great site to learn how different mathematical objects are constructed in various foundations (ZFC, HOL, etc.) browsing metamath proofs is a great way to sate your curiosity, however you don't need to learn metamath to learn lean</p>",
        "id": 264843462,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639481446
    },
    {
        "content": "<p>but it wouldn't hurt of course</p>",
        "id": 264843510,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639481481
    },
    {
        "content": "<p>Mario is very familiar with Metamath, in fact he has contributed to a lot of Metamath proofs and constructions, so you should wait for him to reply <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 264843602,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639481529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"366057\">@Eric Taucher</span> The short answer: not really. The two systems are about as far apart as formal systems can get, but it can be helpful for learning how a minimalistic verifier can be used to still do \"real maths\". This, after all, was considered utterly infeasible in logic books as recently as the 1980s. The general concept of taking a big theorem, breaking it into tiny pieces that a computer can follow, and using lemmas to make everything scale appropriately is all applicable to any theorem prover.</p>\n<p>Lean is a much more complicated thing than metamath and it tries to solve slightly different problems. Metamath is focused on simple verification, and there are many verifiers and a few proof assistants for it, while Lean is focused on a polished proof assistant interface, and there is only one lean tool. It invests far more heavily in a tactic infrastructure, and even the formal system itself (dependent type theory) is used to do tactic like things (definitional equality testing and type checking) in the proof kernel.</p>\n<p>Basically, metamath is useful as a \"toy example\" of a theorem prover, before you try to tackle the complexity of an \"industrial strength\" theorem prover like lean. Or at least it feels that way when you put them side by side. Metamath is of course not just a toy, you can be just as mathematically ambitious in it as lean, but there has been way more time and effort put into the lean user experience, and it shows.</p>",
        "id": 264861667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639490670
    },
    {
        "content": "<p>By the way, I do a short comparison of Metamath and Lean in the <a href=\"https://github.com/digama0/mm0#introduction\">MM0 readme</a>, because in a lot of respects MM0 represents my attempt to merge the best aspects of both languages.</p>",
        "id": 264862274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639490908
    }
]