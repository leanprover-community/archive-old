[
    {
        "content": "<p>Hi, I'm having trouble trying to use my own definitions and applying them to theorems, <br>\nhow should I approach the following if I wanted to unpack my definition once lean knows there's a proof of it?</p>\n<div class=\"codehilite\"><pre><span></span>def equivalency (p q : Prop) : Prop := p → q ∧ q → p\n\ntheorem (p q : Prop) : equivalency p q → p ∧ q :=\nbegin\n  intro eq_pq,\n  -- how do I unpack my definition now?\nend\n</pre></div>\n\n\n<p>Thanks!</p>",
        "id": 189322998,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582905743
    },
    {
        "content": "<p>Try <code>unfold equivalency at *</code></p>",
        "id": 189323102,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582905817
    },
    {
        "content": "<p>Thanks, that works perfectly-  If I wanted to find out more about the unfold tactic (source code maybe?) where should I go? I've not found the tactic codes so far..</p>",
        "id": 189323408,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582905977
    },
    {
        "content": "<p>There are <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">lots of tactics</a>, and I picked up the ones which were useful for me by just asking lots of questions.</p>",
        "id": 189324062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582906410
    },
    {
        "content": "<p>That's  a neat site, thanks.</p>",
        "id": 189324241,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582906560
    },
    {
        "content": "<p>The doc page that Kevin linked to mostly discusses tactics in mathlib. The source code for those tactics can be found in the <a href=\"https://github.com/leanprover-community/mathlib/tree/master/src/tactic\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/master/src/tactic\"><code>src/tactic</code> directory of mathlib</a>. The <code>unfold</code> tactic is provided in the core library and its source code is <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/interactive.lean#L1464\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/interactive.lean#L1464\">here</a>. It relies on much of the same code as the very important <code>simp</code> tactic, which you can read more about <a href=\"https://leanprover-community.github.io/mathlib_docs/simp.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/simp.html\">here</a>.</p>",
        "id": 189324780,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582906911
    },
    {
        "content": "<p>Will have a read- and I forgot to check src! good to know it's all there. Didn't know simp was much more intricate under-the-hood, good to know</p>",
        "id": 189326937,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582908324
    },
    {
        "content": "<p>Some tactics (like <code>cases</code>/<code>rcases</code> which is probably coming next) will automatically see through definitional equalities, making <code>unfold</code> redundant once you know what the next step should be.</p>",
        "id": 189327495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582908642
    },
    {
        "content": "<p>By 'which is probably coming next' you mean some new version of Lean?</p>",
        "id": 189330508,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582910540
    },
    {
        "content": "<p>he means your next move after <code>unfold</code></p>",
        "id": 189330532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582910562
    },
    {
        "content": "<p>Isn't your theorem false by the way? p and q could both be false right?</p>",
        "id": 189330578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582910604
    },
    {
        "content": "<p>Oh got it; and yeah it's quite false, I've changed it to including that case too</p>",
        "id": 189331395,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582911128
    },
    {
        "content": "<p>it does seem like I am still in a bit of a pickle by the way- I want to use the fact that if one's not true the other must be true; (so I've tried using by_cases), yet my expression is 'not decidable'.. any thoughts?</p>\n<div class=\"codehilite\"><pre><span></span>theorem (p q: Prop) : equivalency p q → ((p ∧ q) ∨ ((¬ p) ∧ (¬ q))) :=\nbegin\n  intro eq,\n  unfold equivalency at *,\n  cases eq with pq qp,\n  --by_cases h : p ∧ q,\nend\n</pre></div>\n\n\n<p>I sort of want to just do the casework and/or use a contradiction</p>",
        "id": 189334251,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1582912886
    },
    {
        "content": "<p>Your code doesn't work at all for me. Can you post something which compiles?</p>",
        "id": 189334404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582912965
    },
    {
        "content": "<p>Oh -- does the <code>cases</code> line not work for you either?</p>",
        "id": 189334505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582913019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equivalency</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Your definition is not what you think it is.</p>",
        "id": 189334798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582913168
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equivalency</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equivalency</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">equivalency</span> <span class=\"n\">at</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">by_cases</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189334830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582913194
    },
    {
        "content": "<p>I never would have known that I have defined my equivalency poorly; I think it sort of doesn't 'say' anything; but now the by_cases tactic makes much more sense</p>",
        "id": 189609798,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583253314
    },
    {
        "content": "<p>What does this open_locale classical do? It got rid of many red underlines in my vs code</p>",
        "id": 189609851,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583253361
    },
    {
        "content": "<p>It means that you can assume that every true/false statement is either true or false. Some tactics like <code>finish</code> assume this. Some computer scientists don't like assuming this <em>shrug</em></p>",
        "id": 189610151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583253570
    },
    {
        "content": "<p>So it just tells Lean what it can assume for the time being, got it thanks</p>",
        "id": 189611021,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583254117
    },
    {
        "content": "<p>No, it switches Lean into maths mode.</p>",
        "id": 189611070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583254147
    },
    {
        "content": "<p>By maths mode you mean propositions are either true or false.. or is there something more to this?</p>",
        "id": 189611200,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583254206
    },
    {
        "content": "<p>I mean that you can assume many things such as the law of the excluded middle, decidability of all propositions etc, things which mathematicians assume all the time without ever questioning that it could be any other way, but some computer scientists don't like to assume because they might want their code to be \"constructive\", which is some technical thing we don't teach in the maths department.</p>",
        "id": 189611445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583254364
    },
    {
        "content": "<p>I quite like how it can be constructive, but for the time being I'm guessing typing  <code>open_locale classical</code> should just be a habit then for usual maths. Thanks</p>",
        "id": 189611911,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1583254662
    },
    {
        "content": "<p>In this case you need classical reasoning for <code>x</code> (<code>equivalency p p</code> is true, and then you conclude <code>p</code> or not <code>p</code>.)</p>",
        "id": 189612080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583254755
    }
]