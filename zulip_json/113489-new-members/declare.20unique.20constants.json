[
    {
        "content": "<p>Is there a way to declare unique constant terms ? My ideas:</p>\n<ol>\n<li>First do <code>constants a b c d : nat</code>, then declare an axiom  stipulating them pairwise distinct. That feels like too much work for this. </li>\n<li>Declare <code>(a b c d)</code> to be a set; so something  like <code>constant (a b c d) : set nat</code>, but that doesn't work and I can't find any syntax to make it work.</li>\n</ol>",
        "id": 309537070,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668406329
    },
    {
        "content": "<p>You may want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup\">docs#list.nodup</a> like <code>[a, b, c, d].nodup</code>.</p>",
        "id": 309537476,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668406625
    },
    {
        "content": "<p>Thanks. I did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constants</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">distincts</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">nodup</span>\n<span class=\"k\">#eval</span> <span class=\"n\">a</span><span class=\"bp\">==</span><span class=\"n\">b</span>\n</code></pre></div>\n<p>Why doesn't the last line work to verify that it worked? How can I verify it?</p>",
        "id": 309538552,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668407455
    },
    {
        "content": "<p>one way is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">list.nodup</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">distincts</span>\n</code></pre></div>",
        "id": 309539004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668407729
    },
    {
        "content": "<p>you can't evaluate <code>a = b</code> using <code>#eval</code> because <code>a</code> and <code>b</code> don't have values that are accessible to the compiler (they are \"noncomputable\")</p>",
        "id": 309539082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668407768
    },
    {
        "content": "<p>A general way to get out the individual inequalities:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.nodup</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">constants</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">distinct</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">nodup</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">list.pairwise_iff_nth_le.1</span> <span class=\"n\">distinct</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">dec_trivial</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>\n<p>(replace 0 and 1 by indices of the elements)</p>",
        "id": 309539686,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668408274
    },
    {
        "content": "<p>Maybe we should have a lemma like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.tfae.out\">docs#list.tfae.out</a> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.pairwise\">docs#list.pairwise</a></p>",
        "id": 309539998,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668408489
    },
    {
        "content": "<p>Introducing an axiom is a bad idea. You should use choice instead.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hh</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">hh</span> <span class=\"bp\">≤</span> <span class=\"n\">l.sum</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hh</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_le_cons</span><span class=\"o\">,</span> <span class=\"n\">list.sum_cons</span><span class=\"o\">],</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">tsub_zero</span><span class=\"o\">],</span>\n      <span class=\"n\">transitivity</span> <span class=\"n\">l.sum</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_self</span> <span class=\"o\">}}},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">l.nodup</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[[]],</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">l.sum.succ</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₁</span><span class=\"o\">]],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nodup_cons</span><span class=\"o\">,</span> <span class=\"n\">list.mem_iff_nth_le</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"n\">i</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ne_of_lt</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat.lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">aux</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">abcd</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">exi</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n</code></pre></div>",
        "id": 309624166,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668438512
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> . Mind explaining your method in higher-level language ?</p>",
        "id": 310089040,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668462864
    },
    {
        "content": "<p>Once I have those  four unique constants, which---possibly relevantly---aren't actually natural numbers, I want to declare an axiom stating something about all subsets of <code>{a,b,c,d}</code> with cardinality 3. Must/should I declare a <code>finset</code> for that? If so, how to do that? I gather from the docs that I need to provide a <code>multiset</code> and a proof of finiteness, but I'm unclear about the syntax for multisets and how to prove finiteness. FWIW, I'd rather not be given explicit solutions; I'd prefer hints or similar examples.</p>",
        "id": 310089763,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668463154
    },
    {
        "content": "<p>You don't want to declare an axiom, you want to assume a hypothesis. No you don't <em>have</em> to use finsets. There are four ways to do finiteness in Lean and probably all of them can be made to work. Don't make a finset from a multiset, just because that's how finsets are constructed under the hood doesn't mean that that's how you need to construct them. As for hints instead of solutions, why not instead ask for solutions to explicit easier questions? Post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> .</p>",
        "id": 310090606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668463461
    },
    {
        "content": "<p>If you're not actually asking for them to be natural numbers, it sounds to me like you might want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [fintype, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">my_type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>This gives you the 4 elements and the fact they are distinct axiomatically, but in a much more sound way than with <code>axiom</code>.</p>",
        "id": 310091638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668463876
    },
    {
        "content": "<p>You can then get the sets with cardinality 3 as <code>(finset.univ : finset my_type).powerset_len 3</code></p>",
        "id": 310092111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668464056
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.powerset_len\">docs#finset.powerset_len</a>)</p>",
        "id": 310092149,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668464072
    },
    {
        "content": "<p>From <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Using.20an.20axiom.20with.20.E2.88.83!\">this topic</a> I think <span class=\"user-mention\" data-user-id=\"245476\">@Quinn Culver</span> cares about something like four distinct points on the plane / in a space? Then maybe instead of declaring four constants you should use a <code>finset X</code> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card\">docs#finset.card</a> equal to 4, where <code>X</code> is the space; maybe the space should be a structure with <code>X</code> the type of points together with some axioms as its fields.</p>",
        "id": 310092700,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668464289
    },
    {
        "content": "<p>Let me also mention <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_eq_three\">docs#finset.card_eq_three</a></p>",
        "id": 310103846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668469152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  is right. I'm formalizing the axioms for a projective plane, the third of which says that there are four (distinct) points no three of which are colinear. Thanks for the suggestion <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I'll follow that in the future.</p>",
        "id": 310120598,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668481516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> , once I declare  a <code>finset</code> with <code>constant A : finset Point</code>, do I need to declare its cardinality separately? As an axiom? Like this:  <code>axiom A_card_is_four : finset.card A = 4</code>?</p>",
        "id": 310261572,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668536470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  I don't understand your statement  \"You don't want to declare an axiom, you want to assume a hypothesis.\" Do you still think that even though I'm trying  to formalize the projective plane axiom stating that there are four (distinct) points no three of which are colinear?</p>",
        "id": 310262433,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668536735
    },
    {
        "content": "<p>Yeah, you probably want to write theorems assuming \"P is a projective plane\"</p>",
        "id": 310263195,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1668536971
    },
    {
        "content": "<p>Wow, I just noticed that projective planes are in mathlib! <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 310263573,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668537074
    },
    {
        "content": "<p>Whatever you're formalizing, you certainly don't want to use keyword <code>axiom</code>. What you actually want is <code>structure</code>. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/configuration.projective_plane\">docs#configuration.projective_plane</a> for example.</p>",
        "id": 310264014,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668537242
    },
    {
        "content": "<p>Good to know. I'm a little confused then about when it <em>is</em> appropriate to use <code>axiom</code>.</p>",
        "id": 310264473,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668537411
    },
    {
        "content": "<p>On paper we use the word axiom a lot more flexibly than the lean keyword axiom. For example we often say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>∗</mo><mi>g</mi><mo>=</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">1 * g = g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is an axiom of a group. But <code>axioms</code> in lean are reserved mostly for things that you need to start setting up the foundations of mathematics, more like the axioms of zfc set theory that underlie all different types of mathematics. You can add new lean axioms if you want, but most users never need to and never do.</p>",
        "id": 310265038,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668537616
    },
    {
        "content": "<p>There are <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\">three built-in axioms</a> in Lean, and if you want to contribute to mathlib, I don't think you're allowed to add any axiom in your code.</p>",
        "id": 310266196,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1668538034
    },
    {
        "content": "<p>The word axiom already has a different meaning when you say \"axiom of a group\" and \"axiom of Zermelo Frankel\", this has nothing specific to formalized mathematics.</p>",
        "id": 310266395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668538093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Mind elaborating on the difference b/t \"axiom of a group\" and \"axiom of ZF\"?</p>",
        "id": 310318532,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668558211
    },
    {
        "content": "<p>The axioms of ZF are fixed before you start and never go away. The \"axioms\" of a group are just transient hypotheses.</p>",
        "id": 310378696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668594923
    },
    {
        "content": "<p>Unpopular opinion: I sometimes use <code>axiom</code> to check stuff like \"this lemma is the only thing missing to have my big theorem verified\".</p>",
        "id": 310382864,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668596331
    },
    {
        "content": "<p><code>sorry</code> is reasonably effective for that too; but yes, you can use <code>axiom</code> instead of <code>sorry</code> to precisely track which sorries you still need, since <code>sorry</code> does not give you an error like \"this lemma uses <code>foo</code>, <code>bar</code>,  <code>baz</code> which contain <code>sorry</code>\"</p>",
        "id": 310383580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668596552
    },
    {
        "content": "<p>Although I suspect there is a tactic that produces precisely that message somewhere on Zulip</p>",
        "id": 310383904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668596659
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span>        <span class=\"n\">nnyCF_of_CF_i_CF</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">nnyCF_of_CF_i_CF</span>\n</code></pre></div>\n<p>After it compiles, the output is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nnyCF_of_CF_i_CF</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">is_CF</span> <span class=\"n\">L₁</span> <span class=\"bp\">∧</span> <span class=\"n\">is_CF</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">is_CF</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">⊓</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n\n<span class=\"n\">quot.sound</span>\n<span class=\"n\">propext</span>\n<span class=\"n\">classical.choice</span>\n<span class=\"n\">CF_pumping</span>\n</code></pre></div>\n<p>This tells me that the proof of [The class of context-free languages is not closed under intersection.] is finished up to the Context-free pumping lemma. If there was an actual <code>sorry</code> anywhere in the \"call stack\", it would be listed as <code>[sorry]</code> among the axioms.</p>",
        "id": 310383927,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668596671
    },
    {
        "content": "<p>Martin, you can use <a href=\"https://github.com/leanprover-community/mathlib/pull/16911\">#16911</a>. It isn't merged yet but this is an autonomous single file that you can simply dump into your project until it is merged into mathlib.</p>",
        "id": 310404022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668604418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Might a Platonist disagree by saying both structures are on equal footing and their axioms equally fixed?</p>",
        "id": 310468346,
        "sender_full_name": "Quinn Culver",
        "timestamp": 1668622154
    },
    {
        "content": "<p>The difference is that we are working <em>in</em> ZFC</p>",
        "id": 310471302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668623189
    },
    {
        "content": "<p>The structures are most definitely not on the same footing -- things are going on on two different levels</p>",
        "id": 310471442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668623234
    },
    {
        "content": "<p>To give an example: you can make a structure that has contradictory axioms and this isn't a problem at all, you just can't make any instances of the structure. But if you add an axiom to your theory making it inconsistent (which you can do with <code>axiom</code>) then this is a huge problem because now you can prove everything.</p>",
        "id": 310472054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668623408
    }
]