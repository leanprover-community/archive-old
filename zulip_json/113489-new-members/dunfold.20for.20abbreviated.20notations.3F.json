[
    {
        "content": "<p>Consider the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">divab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">dunfold</span> <span class=\"bp\">|</span> <span class=\"n\">at</span> <span class=\"n\">divab</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The <code>dunfold</code> doesn't work, probably because | is an abbreviation. Is there a way to make this work? (hopefully without actually manually stating the definition of <code>a | b</code>)</p>",
        "id": 205035300,
        "sender_full_name": "Chris M",
        "timestamp": 1595737188
    },
    {
        "content": "<p>you probably want <code>cases divab</code></p>",
        "id": 205035349,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595737313
    },
    {
        "content": "<p>I think <code>\\mid</code> is an abbreviation for <code>has_dvd.dvd</code>, so it may be easier to <code>rw</code> or <code>unfold</code> with that</p>",
        "id": 205035396,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595737402
    },
    {
        "content": "<p>Yeah I do, but I also want to know how to see the definition of <code>a | b</code> within the tactic.</p>",
        "id": 205035401,
        "sender_full_name": "Chris M",
        "timestamp": 1595737420
    },
    {
        "content": "<p>The easiest way (in VS Code): hover over the <code>\\|</code> symbol in the statement of your example, to discover that it is <code>has_dvd.dvd</code>. Other ways: <code>#print notation \\|</code> just above or below your example, or <code>set_option pp.notation false</code> above your example, so you can see what Lean actually sees after the notation has been unravelled. <code>dunfold</code> takes a function, not notation. Finally, once you've figured out how to proceed after the unfolding:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">divab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">divac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">has_dvd</span><span class=\"bp\">.</span><span class=\"n\">dvd</span> <span class=\"n\">at</span> <span class=\"n\">divab</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- divab: ∃ (c : ℕ), b = a * c</span>\n  <span class=\"n\">cases</span> <span class=\"n\">divab</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>don't forget to delete the <code>dunfold</code>, because your code probably compiles without it.</p>",
        "id": 205042351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595752035
    }
]