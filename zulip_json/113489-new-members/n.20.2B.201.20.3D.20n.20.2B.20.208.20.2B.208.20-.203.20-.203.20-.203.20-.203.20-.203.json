[
    {
        "content": "<p>Sorry if I'm being silly, but why doesn't <code>exact</code> match these:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 257599060,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634242815
    },
    {
        "content": "<p>that is weird... <code>example {n : ℕ} : n + 8 + 8 -3-3-3-3-3 = n + 1 := rfl</code> does work. is there maybe some weird instances messing things up? what happens if you set <code>pp.all</code> to true? (<code>set_option pp.all true</code>)</p>",
        "id": 257599653,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634243062
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">P</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_sub</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_sub</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_sub</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_sub</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_sub</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"n\">n</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))))</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit0.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">)))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">int</span> <span class=\"n\">int.has_one</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I'm doing the M40001 problem sheet from 2019, if that means anything to you.</p>",
        "id": 257599992,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634243186
    },
    {
        "content": "<p>Ah, <code>rfl</code> won't work because it's in <code>ℤ</code>.</p>",
        "id": 257600102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634243231
    },
    {
        "content": "<p>It has to case on whether any on those involved numbers is negative.</p>",
        "id": 257600182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634243267
    },
    {
        "content": "<p>The tactic to use here is norm_num</p>",
        "id": 257600399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634243353
    },
    {
        "content": "<p>The problem would have been spotted sooner if the OP had provided a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> :-)</p>",
        "id": 257602985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634244346
    },
    {
        "content": "<p>Sorry, I suppose I need to get over the embarrassment of showing my work!<br>\nHere's the whole code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">question_5_1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span>\n                                  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n                                  <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">pn</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h8</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h8</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">pn</span><span class=\"o\">))))))),</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But trying <code>norm_num</code> just gives me <code>unknown identifier 'norm_num'</code> and I couldn't find it in the reference manual either..</p>",
        "id": 257605338,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634245324
    },
    {
        "content": "<p><code>import tactic.norm_num</code></p>",
        "id": 257605776,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634245530
    },
    {
        "content": "<p>It doesn't work here, though. This does:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">question_5_1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span>\n                                  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n                                  <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">pn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h8</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h8</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">pn</span><span class=\"o\">))))))),</span>\n    <span class=\"n\">convert</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257606537,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634245850
    },
    {
        "content": "<p>Hmm, that code gives me the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic.istep</span> <span class=\"mi\">151</span> <span class=\"mi\">4</span> <span class=\"mi\">151</span> <span class=\"mi\">4</span> <span class=\"mi\">229</span> <span class=\"n\">ring</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">ring</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 257607070,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634246082
    },
    {
        "content": "<p>Did you import <code>ring</code>?</p>",
        "id": 257607229,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634246150
    },
    {
        "content": "<p>Erm, no.  Why didn't it give me the unknown identifier error this time?  Is there another <code>ring</code> that gets shadowed?<br>\nAnyway, it works now.  Thank you everyone. :-)</p>",
        "id": 257607851,
        "sender_full_name": "Francis Southern",
        "timestamp": 1634246338
    },
    {
        "content": "<p>because it assumed it was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring\">docs#ring</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 257607922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634246364
    },
    {
        "content": "<p>Yeah, that's one of the cases where the error is... somewhat bemusing</p>",
        "id": 257608242,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634246487
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">question_5_1</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span>\n                                  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span>\n                                  <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">pn</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h8</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">h8</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">pn</span><span class=\"o\">))))))),</span>\n    <span class=\"n\">convert</span> <span class=\"n\">z</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">int.add_sub_assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 257616173,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634250601
    },
    {
        "content": "<p>The way to get <code>norm_num</code> to work is to get all the numeric terms together.</p>",
        "id": 257616234,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634250619
    },
    {
        "content": "<p>Hello</p>",
        "id": 257634199,
        "sender_full_name": "Miles Carmack",
        "timestamp": 1634262780
    }
]