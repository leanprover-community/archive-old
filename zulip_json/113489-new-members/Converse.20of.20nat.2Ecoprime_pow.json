[
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coprime.pow</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">coprime</span> <span class=\"n\">k</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a converse available in <code>mathlib</code>?  Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.num.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_power_N</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">num.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hac</span><span class=\"o\">:</span> <span class=\"n\">a.coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.coprime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">slim_check</span>\n</code></pre></div>",
        "id": 222352721,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610396537
    },
    {
        "content": "<p>You have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.coprime.coprime_mul_left_right\">docs#nat.coprime.coprime_mul_left_right</a></p>",
        "id": 222353244,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610396774
    },
    {
        "content": "<p>The statement as you wrote it is wrong, though. Can you see why?</p>",
        "id": 222353379,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610396832
    },
    {
        "content": "<p>Sebastien is probably referring to the maths error but there's also the issue that you probably want <code>nat.prime</code></p>",
        "id": 222354411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610397225
    },
    {
        "content": "<p>My logic is this:  I'm assuming that <code>a&gt;0</code> and <code>a</code> and <code>p^n</code> have no positive integer factors in common other than 1.  <code>p^n</code> is prime so it's only prime factor is <code>p</code>.  <code>a</code> has a factorization <code>a=q1^n1 * q2^n2 ...qm^nm</code> where none of the <code>qi = p</code>.  This means that <code>a</code> is coprime with <code>p</code> assuming that it is coprime with <code>p^n</code>.</p>\n<p>So there is something wrong with that logic, but I don't see it.   I'm not actively trying to be obtuse, I just don't see the flaw in that logic, which is what I'm trying to translate to Lean.</p>",
        "id": 222382044,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610415186
    },
    {
        "content": "<p>p^n isn't prime in general, and p might not be a prime factor of p^n.</p>",
        "id": 222382065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610415217
    },
    {
        "content": "<p>I am assuming that <code>p</code> is a prime natural number.  By the fundamental theorem of arithmetic, every positive integer has a unique prime factorization.   For me, the prime factorization of x=p^n is the list of pairs [(p,n)], and x=p^n.  To say that p is a prime factor of <code>x</code> is just to say that it is a member of that list.  I don't understand what you mean by prime factorization.  Clearly p is in the list of prime factors of x=p^n.  So I don't understand what you mean by p is not a prime factor of p^n.</p>\n<p>To give another example to describe my notion of prime factorization, if had a number y = p^3 * q ^4 * r^2, where p, q and r are prime, then the prime factorization of y would be the list [(p,3), (q,4), (r,2)].</p>\n<p>The context here is natural numbers, not some other kind of number.  In particular 2^n where n is a natural number, but I was trying to generalize a little to p^n where p is a prime natural number and n is a natural number.</p>",
        "id": 222384375,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610417565
    },
    {
        "content": "<p>As is so often the case in mathematics, your mistake is in the sentence which starts \"Clearly\".</p>",
        "id": 222384399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610417617
    },
    {
        "content": "<p>Sure, p is a factor of p^n, but not for all n...</p>",
        "id": 222386642,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1610420506
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  and <span class=\"user-mention\" data-user-id=\"255743\">@Paul van Wamelen</span>  for your kind assistance.  With your help, the following is close enough to what I was trying to prove and it checks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.num.prime</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coprime_power_N</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"n\">hac</span><span class=\"o\">:</span> <span class=\"n\">a.coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n                      <span class=\"n\">a.coprime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.lt_asymm</span> <span class=\"n\">hn</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_eq_add_one</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">pow_succ'</span> <span class=\"n\">p</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.coprime.coprime_mul_left_right</span> <span class=\"n\">hac</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222391804,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610427410
    }
]