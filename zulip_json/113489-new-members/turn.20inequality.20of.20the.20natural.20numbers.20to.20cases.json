[
    {
        "content": "<p>Another tip: don't ever use <code>&gt;</code> or <code>â‰¥</code>. All the lemmas in the library are stated for <code>&lt;</code> and <code>\\le</code>, because it would double the length of the inequality API if we also put lemmas with <code>&gt;</code> and <code>\\ge</code> in. Tools like <code>library_search</code> might miss lemmas if you're using <code>&gt;</code> instead of <code>&lt;</code> (it might be smart enough to realise but it's good practice anyway).</p>",
        "id": 308041839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667593066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476897\">Siyuan Yan</span> <a href=\"#narrow/stream/113489-new-members/topic/turn.20iinequality.20of.20the.20natural.20numbers.20to.20cases/near/308036863\">said</a>:</p>\n<blockquote>\n<p>thanks! I gotta be more familiar with the libraries</p>\n</blockquote>\n<p>The tricks here: (a) start to understand what to expect in the library and what not to expect, for example <code>2*x+4*y=2*(x+2*y)</code> is true but not a good library lemma (this should be proved with a high-powered tactic like <code>ring</code>), but if <code>x : nat</code> then <code>x &lt;= 0 -&gt; x = 0</code> and <code>x &lt; 1 -&gt; x = 0</code> would be good library lemmas because you can imagine them coming up again and again.</p>\n<p>(b) start to learn the <em>conventions</em> for naming lemmas in the library. For example all notations have names -- <code>&lt;=</code> is <code>le</code>, <code>&lt;</code> is <code>lt</code> and so on. The naming convention link on the community website gives tons of hints. The logic behind Ruben's correct guess above is: they knew that the statement <code>a &lt; 1 &lt;-&gt; a = 0</code> would be useful for you and might well be in the library, so they <em>guessed</em> what that lemma would be called based on the naming convention and they guessed correctly. We don't all carry around the names of all 100,000 lemmas in mathlib in our heads, but \"power users\" understand the naming convention well and use it to make writing code easier.</p>",
        "id": 308042514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667593335
    },
    {
        "content": "<p>that makes sense!</p>",
        "id": 308042729,
        "sender_full_name": "Siyuan Yan",
        "timestamp": 1667593416
    }
]