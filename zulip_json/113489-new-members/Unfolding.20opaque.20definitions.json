[
    {
        "content": "<p>Please tell me there's a better way than this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unfold</span> <span class=\"n\">has_lt.lt</span> <span class=\"n\">preorder.lt</span> <span class=\"n\">partial_order.lt</span> <span class=\"n\">linear_order.lt</span> <span class=\"n\">at</span> <span class=\"n\">tri</span>\n</code></pre></div>",
        "id": 278204306,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649354915
    },
    {
        "content": "<p><code>dsimp</code> fails to simplify, so does <code>norm_cast</code></p>",
        "id": 278204405,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649354966
    },
    {
        "content": "<p>You can use <code>change</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.change\">docs#tactic.interactive.change</a>)</p>",
        "id": 278204554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649355026
    },
    {
        "content": "<p>But with more context we coul probably give you a better solution.</p>",
        "id": 278204597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649355048
    },
    {
        "content": "<p>nah, <code>change</code> was basically what I wanted in this case<br>\nin general it'd be cool if I could just unfold \"everything with a field syntax\" but that might have problems in the general case</p>",
        "id": 278205588,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649355596
    },
    {
        "content": "<p><code>change</code> is brittle, it's usually nicer to have a <code>..._def</code> lemma</p>",
        "id": 278208157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649356800
    },
    {
        "content": "<p>Usually this means you should write a lemma with a proof of <code>rfl</code> to do the unfolding for you</p>",
        "id": 278212853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649358789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359992\">@Robert Maxton</span> I think <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold_proj\">tactic#unfold_proj</a> might be what you're looking for (whether or not it might be the \"right\" thing to do).</p>",
        "id": 278213647,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649359199
    },
    {
        "content": "<p>indeed it is. it's a little overenthusiastic but I can hardly complain</p>",
        "id": 278213778,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649359263
    },
    {
        "content": "<p>thanks :p</p>",
        "id": 278213781,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649359265
    },
    {
        "content": "<p>It has some configuration options (same ones as <code>dsimp</code>), so for example <code>unfold_projs at h {single_pass := tt}</code>. With this you could do <code>iterate 3 { unfold_projs at h {single_pass := tt} }</code> for instance.</p>",
        "id": 278214401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649359586
    }
]