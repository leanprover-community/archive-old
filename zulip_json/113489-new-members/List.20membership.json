[
    {
        "content": "<p>I hope this \"oh no help\" question is acceptable here... I'm coming after a long break from Agda, and was trying to do some list membership definitions, reprising this Agda:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">data</span> <span class=\"n\">_</span><span class=\"bp\">∈</span><span class=\"n\">_</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">a</span> <span class=\"n\">where</span>\n  <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n  <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>my first attempt looked like this, but I'm getting a universe error (<code>universe level of type_of(arg #2) of 'isin.z' is too big for the corresponding inductive datatype</code>), which I'm taking to mean that I'm surely doing something that I didn't mean to be doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">isin</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">isin</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">isin</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">isin</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(also, some beginner guidance as to how I could find such a definition and associated lemmas, if they exist, would be awesome)</p>",
        "id": 242205134,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623331632
    },
    {
        "content": "<p>Are you trying to define an inductive predicate?</p>",
        "id": 242205289,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331693
    },
    {
        "content": "<p>If so then the syntax is wrong.</p>",
        "id": 242205311,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331707
    },
    {
        "content": "<p>Actually I think I figured out the problem by looking more closely at the Agda definition again: I needed to specify <code>{A : Type}</code> in the Lean definition! Because it was trying to generalize <code>{A}</code> to <code>{A : Type u}</code> which wouldn't work.</p>",
        "id": 242205445,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623331767
    },
    {
        "content": "<p>Wait, I want to be sure that you are trying to define an inductive predicate, since I am Agda illiterate. Can you confirm?</p>",
        "id": 242205504,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331800
    },
    {
        "content": "<p>Yes. The top <code>data</code> definition is an Agda inductive definition</p>",
        "id": 242205588,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623331817
    },
    {
        "content": "<p>The bottom <code>inductive</code> definition is me trying to transliterate that inductive definition into Lean</p>",
        "id": 242205654,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623331837
    },
    {
        "content": "<p>This is the correct syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">is_in</span> <span class=\"o\">{</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_in</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_in</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">is_in</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is that your approach?</p>",
        "id": 242206014,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623331961
    },
    {
        "content": "<p>But honestly I wouldn't use an inductive predicate since an inductive predicate is uncomputable and a computable definition is just more natural.</p>",
        "id": 242206272,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623332049
    },
    {
        "content": "<p>Yes that seems like what I was trying to express, except that is there a reason for it to be a <code>Prop</code> instead of a <code>Type</code>?</p>",
        "id": 242206281,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623332053
    },
    {
        "content": "<p>Aren't propositions types? But because of proof irrelevance, they are in a different universe, called Prop.</p>",
        "id": 242206378,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623332092
    },
    {
        "content": "<p>Type is short for Type 0.</p>",
        "id": 242206392,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623332098
    },
    {
        "content": "<p>Hmm... I'm going to want to do induction over this definition, will <code>Prop</code> allow me to do that?</p>",
        "id": 242206664,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623332178
    },
    {
        "content": "<p>Seems like this now works as the definition I want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">is_in</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_in</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_in</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">is_in</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 242206737,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623332201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419650\">Rob Simmons</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20membership/near/242206664\">said</a>:</p>\n<blockquote>\n<p>Hmm... I'm going to want to do induction over this definition, will <code>Prop</code> allow me to do that?</p>\n</blockquote>\n<p>Then yes. Prop allows you to do that. And you have proof irrelevance too, which can be really helpful in proofs.</p>",
        "id": 242206828,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623332242
    },
    {
        "content": "<p>Also, you can specify a decision procedure for the inductive predicate. Type doesn't let you do that.</p>",
        "id": 242206872,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623332263
    },
    {
        "content": "<blockquote>\n<p>But honestly I wouldn't use an inductive predicate since an inductive predicate is uncomputable and a computable definition is just more natural.</p>\n</blockquote>\n<p>But inductive predicates are in many cases easier to reason about (and I would say even more intuitive, but that's a matter of taste)</p>",
        "id": 242206873,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623332263
    },
    {
        "content": "<p>I agree. I was just commenting on <em>that specific instance</em>.</p>",
        "id": 242207036,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623332319
    },
    {
        "content": "<blockquote>\n<p>Hmm... I'm going to want to do induction over this definition, will <code>Prop</code> allow me to do that?</p>\n</blockquote>\n<p>But if you choose to do it with <code>Prop</code> and then will want to define data, i.e. things in <code>Type</code> by induction, (or recursion, however you prefer to call it) on <code>isin</code> proofs then you won't be able to. So you should also take into consideration what you intend to do with <code>isin</code></p>",
        "id": 242207540,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623332504
    },
    {
        "content": "<p>I do not agree that an inductive predicate is uncomputable. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.decidable_mem\">docs#list.decidable_mem</a></p>",
        "id": 242215343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623335287
    },
    {
        "content": "<p>Thanks, this is helpful. Do you have any guidance as to whether I can find something similar that someone else might have already done?</p>",
        "id": 242221431,
        "sender_full_name": "Rob Simmons",
        "timestamp": 1623337432
    },
    {
        "content": "<p>Similar to what? Definitions of data structures? Or predicates on them?</p>",
        "id": 242221955,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623337619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419650\">Rob Simmons</span> <a href=\"#narrow/stream/113489-new-members/topic/List.20membership/near/242221431\">said</a>:</p>\n<blockquote>\n<p>Thanks, this is helpful. Do you have any guidance as to whether I can find something similar that someone else might have already done?</p>\n</blockquote>\n<p>If you want to learn how Lean generally works, you can clone mathlib and read the source code. Don't worry, the source code is generally very readable.</p>",
        "id": 242222070,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623337666
    },
    {
        "content": "<p>I don't have the code anymore, but I actually tried to work with a similar inductive definition but for list inclusion, and as <code>Type</code>, not <code>Prop</code> (which as a coincidence was also based on some Agda code), that would also carry the information of \"if <code>x</code> is the i-th element in the list <code>l</code> and <code>l</code> is included in <code>l2</code>, then this occurence of <code>x</code> is the j-th element of <code>l2</code>\".</p>",
        "id": 242237051,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623344036
    },
    {
        "content": "<p>But I eventually ended up dropping it, because it didn't work well with the termination checking, and I didn't want to have to deal with termination proofs all over my code.</p>",
        "id": 242237320,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623344152
    },
    {
        "content": "<p>I am actually working on a proof of exactly this at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sublist_iff_nth_eq</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">l</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l'</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">↪</span><span class=\"n\">o</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">l.nth</span> <span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"n\">l'.nth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ix</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">y</span> <span class=\"n\">H</span> <span class=\"n\">IH</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"n\">x</span> <span class=\"n\">H</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">f.trans</span> <span class=\"o\">(</span><span class=\"n\">nat.add_order_embedding</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨⟨⟨</span><span class=\"bp\">λ</span> <span class=\"n\">ix</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">ix</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ix.pred</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"o\">⟩,</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">nat.order_embedding_succ_pos</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"o\">⟩</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_succ_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">i</span><span class=\"o\">⟩,</span>\n        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hf</span> <span class=\"n\">ix</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242237681,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623344291
    },
    {
        "content": "<p>That's wonderful! It looks like the idea I ended up with after dropping the inductive definition, but yours is more advanced and much better integrated with the standard library.</p>",
        "id": 242239243,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623344958
    },
    {
        "content": "<p>What does the righthookarrow with an o to its right mean? (sorry, I'm not at my computer and I can't type unicode)</p>",
        "id": 242239536,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623345058
    },
    {
        "content": "<p>It means an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_embedding\">docs#order_embedding</a>. Basically, a function <code>f</code> with the property that if <code>x &lt;= y</code> then <code>f x &lt;= f y</code>.</p>",
        "id": 242240125,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623345290
    },
    {
        "content": "<p>And do you think I would hit any major obstacle if I were to adapt it to use subtype instead of exists? Because ideally I would need to define data based on that index</p>",
        "id": 242240753,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623345558
    },
    {
        "content": "<p>What do you mean? You mean build such a function, given the prop that sublist?</p>",
        "id": 242240928,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623345636
    },
    {
        "content": "<p>Yes</p>",
        "id": 242241060,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623345713
    },
    {
        "content": "<p>Your construction of f seems constructive at first sight</p>",
        "id": 242241525,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623345889
    },
    {
        "content": "<p>Is this more of the thing you're thinking of?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">list_embed</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>        <span class=\"n\">_</span>         <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span>         <span class=\"o\">[]</span>        <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"k\">then</span> <span class=\"n\">list_embed</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">list_embed</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">ys</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 242245268,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623347542
    },
    {
        "content": "<p>But this would mean than any list is included in the empty list, right?</p>",
        "id": 242246108,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623347948
    },
    {
        "content": "<p>This is just a mapping function. It might behave how you expect it to if you have an <code>(h : l &lt;+ l')</code> hypothesis. Haven't tried it out.</p>",
        "id": 242246184,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623347991
    },
    {
        "content": "<p>It's the mathlib style of \"define a total function, but it behave correctly only under some assumption\"</p>",
        "id": 242246269,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623348014
    },
    {
        "content": "<p>Oh, I see what you mean. I'll try it out, thank you, this was very helpful</p>",
        "id": 242246478,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623348102
    },
    {
        "content": "<p>By the way <span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> , I think <span class=\"user-mention silent\" data-user-id=\"419650\">Rob Simmons</span> is using lean 4, that snippet is valid lean 4. <span class=\"user-mention\" data-user-id=\"419650\">@Rob Simmons</span> We generally assume you are using lean 3 unless you are on the <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> or <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a> streams</p>",
        "id": 242256798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623352791
    }
]