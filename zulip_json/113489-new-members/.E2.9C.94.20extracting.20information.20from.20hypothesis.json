[
    {
        "content": "<p>If you <code>rw set.mem_set_of_eq at h1</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a>), it will become the form you expect</p>",
        "id": 255726646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633086582
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 255726746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633086617
    },
    {
        "content": "<p>Thanks! ill try writing a mwe.</p>",
        "id": 255726801,
        "sender_full_name": "Elias Fåkvam",
        "timestamp": 1633086644
    },
    {
        "content": "<p><code>dsimp at h1</code> is a more general \"remove all this noise I don't care about\" tool</p>",
        "id": 255726803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633086647
    },
    {
        "content": "<p>This is part of an exercise from \"formalizing mathematics\", I have looked at the solution in the document and appreciate that it is much neater than what I am doing, but I feel like Im learning a lot by writing my own \"bad\" proof.<br>\nAll of the imports and  variables are given in the document, so I think this might not be minimal.<br>\nI used the \"extract_goal\" tactic from <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"c1\">-- import the tactics</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span> <span class=\"c1\">-- import the sets</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span> <span class=\"c1\">-- infinite unions and intersections</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255728715,
        "sender_full_name": "Elias Fåkvam",
        "timestamp": 1633087695
    },
    {
        "content": "<p>Did you try <code>rw set.mem_set_of_eq at h1</code>?</p>",
        "id": 255729140,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1633087956
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443251\">Elias Fåkvam</span> has marked this topic as resolved.</p>",
        "id": 255729162,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633087980
    },
    {
        "content": "<p>Yes,  i tried it and it worked.</p>",
        "id": 255729183,
        "sender_full_name": "Elias Fåkvam",
        "timestamp": 1633088001
    },
    {
        "content": "<p>Also <code>change ∃ (a : X), a ∈ S ∧ (g ∘ f) a = x at h1,</code> works because the <em>definition</em> of <code>x ∈ { ... }</code> is what you want it to simplify to. Related: if you right click on <code>set.mem_set_of_eq</code> and jump to definition, you will see that the proof of <code>set.mem_set_of_eq</code> is <code>rfl</code> :-) In practice this means that you might not have to do anything at all, for example <code>rcases h1 with ⟨a, haS, rfl⟩,</code> works fine without the rewrite.</p>",
        "id": 255735617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633091510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20extracting.20information.20from.20hypothesis/near/255726803\">said</a>:</p>\n<blockquote>\n<p><code>dsimp at h1</code> is a more general \"remove all this noise I don't care about\" tool</p>\n</blockquote>\n<p>Kevin's remark applies to this too; after using dsimp to find out what your state is equivalent to, you can then use <code>change</code> to get there in one step without any lemma search.</p>",
        "id": 255735778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633091569
    }
]