[
    {
        "content": "<p>Is this example true? (and if so, how to prove it? I listed my imports, and I can't get anything useful out of library_search or suggest, even after reverting stuff)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">asymptotics</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"bp\">≥</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 195599870,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095454
    },
    {
        "content": "<p>Hah, do you need this for codewars?</p>",
        "id": 195599923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095476
    },
    {
        "content": "<p>I'm working on what might become a kata</p>",
        "id": 195600007,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095500
    },
    {
        "content": "<p>the statement is if <code>f g : \\R \\to \\R</code> big O of a polynomial then so is <code>f\\circ g</code></p>",
        "id": 195600102,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095543
    },
    {
        "content": "<p>You don't need d&gt;=1 I guess, and you can prove it by induction on d but when I was looking for some related thing recently (when doing codewars last Sat night) I couldn't find it in the library</p>",
        "id": 195600112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095548
    },
    {
        "content": "<p>I think it's pow_le_pow_of_le_left or similar</p>",
        "id": 195600152,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095568
    },
    {
        "content": "<p>that works if d: nat, but we have d:int and d&gt;=0</p>",
        "id": 195600231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095602
    },
    {
        "content": "<p>There's a trick for this isn't there, some recent tactic which magics up a nat</p>",
        "id": 195600284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095614
    },
    {
        "content": "<p><code>lift</code></p>",
        "id": 195600305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">lift</span> <span class=\"n\">d</span> <span class=\"n\">to</span> <span class=\"bp\">ℕ</span> <span class=\"kn\">using</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"n\">hx</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195600459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095692
    },
    {
        "content": "<p>I replaced d&gt;=1 by 0&lt;=d</p>",
        "id": 195600493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095710
    },
    {
        "content": "<p>I was about to post the same code<br>\n(well not literally)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"k\">begin</span>\n<span class=\"n\">lift</span> <span class=\"n\">d</span> <span class=\"n\">to</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">pow_le_pow_of_le_left</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195600570,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095729
    },
    {
        "content": "<p>I was surprised to type assumption twice, does \";\" mean something other than \"try the next thing on all goals?\"</p>",
        "id": 195600659,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095770
    },
    {
        "content": "<p><span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> does it mean \"try the next thing on all goals that are created as a result of this tactic\"?</p>",
        "id": 195600729,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095804
    },
    {
        "content": "<p>I am also surprised. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> ?</p>",
        "id": 195600737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095807
    },
    {
        "content": "<p>Right, but <code>lift d to nat</code> doesn't, for some reason, create the goal d&gt;=0.</p>",
        "id": 195600810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095837
    },
    {
        "content": "<p>I think there is something funny going on.</p>",
        "id": 195600859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095844
    },
    {
        "content": "<p>oh huh</p>",
        "id": 195600941,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588095890
    },
    {
        "content": "<p>no, a Lean restart fixed it</p>",
        "id": 195600954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588095896
    },
    {
        "content": "<p>I think it actually does and this is something where the tactic state gets confused</p>",
        "id": 195600971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095903
    },
    {
        "content": "<p>if you add <code>skip,</code> after you can see that the new goal was already created before <code>skip</code></p>",
        "id": 195601090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588095959
    },
    {
        "content": "<p>I am observing random behaviour regarding whether the goal d&gt;=0 appears immediately or a bit later. Actually I can't reproduce :-(</p>",
        "id": 195601227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588096012
    },
    {
        "content": "<p>for me it's quite consistent</p>",
        "id": 195601374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588096076
    },
    {
        "content": "<p>consistently you're getting the second goal not immediately appearing?</p>",
        "id": 195601498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588096116
    },
    {
        "content": "<p>Yes</p>",
        "id": 195601554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588096136
    },
    {
        "content": "<p>Unfortunately I don't know whether this is testable from the command line</p>",
        "id": 195601580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588096148
    },
    {
        "content": "<p>so at least I'm not the only one going mad</p>",
        "id": 195601588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588096150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I prefer the <code>using hd</code> variant because in general if I can keep to one goal I try to do so. For example if I am trying to prove <code>a&lt;c</code> and I have a hypothesis <code>h : b &lt; c</code>and want to reduce to <code>a &lt; b</code> I will typically do <code>refine lt_trans _ h</code> rather than just applying <code>lt_trans</code> and picking up the pieces later.</p>",
        "id": 195601837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588096257
    }
]