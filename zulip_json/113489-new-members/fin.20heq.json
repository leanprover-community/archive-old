[
    {
        "content": "<p>Why does this not trigger an error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I mean don't I need to give it a proof that 2 + 2 = 4 to know that <code>fin 4</code> and <code>fin 2 + 2</code> are the same type?</p>",
        "id": 244860585,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625406942
    },
    {
        "content": "<p><code>example : 2 + 2 = 4 := rfl</code> :)</p>",
        "id": 244860638,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625407001
    },
    {
        "content": "<p>Ok I probably miss something on the definition of addition... I'll have a look</p>",
        "id": 244860701,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625407114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/fin.20heq/near/244860638\">said</a>:</p>\n<blockquote>\n<p><code>example : 2 + 2 = 4 := rfl</code> :)</p>\n</blockquote>\n<p>Why is this the case? Is it true for any recursive definition?</p>",
        "id": 244860794,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625407251
    },
    {
        "content": "<p>lean knows how to evaluate recursive functions when determining that two things are \"the same by definition\", and this is the relation that determines when an element of one type also has another type</p>",
        "id": 244860877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625407354
    },
    {
        "content": "<p>They both reduce to <code>succ (succ (succ ( succ zero ) ) )</code></p>",
        "id": 244860894,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625407400
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 244860943,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625407447
    },
    {
        "content": "<p>Well the reason why I am asking this is that I am trying to explain <code>heq</code> to a person that does not know type theory. What is the simplest example you can think of two types that are equal but not definitionally equal?</p>",
        "id": 244860990,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625407548
    },
    {
        "content": "<p>But if you have variables <code>m</code> and <code>n</code>, then you'll run into issues with <code>fin (m+n)</code> vs <code>fin (n+m)</code>, for example</p>",
        "id": 244861036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625407578
    },
    {
        "content": "<p>Ok thanks that could be an example</p>",
        "id": 244861197,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1625407824
    },
    {
        "content": "<p>The easiest example would probably be to compare <code>fin m</code> and <code>fin (0 + m)</code>, with <code>m : \\nat</code> a variable.</p>",
        "id": 244861363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625408067
    },
    {
        "content": "<p>Another source of examples even with closed terms is anything using an axiom in the proof, for example <code>(true /\\ true) = true</code></p>",
        "id": 244861367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625408083
    },
    {
        "content": "<p>In fact that example is pretty interesting because the two types <em>feel</em> very different. One is a pair type and the other is a unit type (and you can throw in <code>nat -&gt; true</code> which is a function type). It seems odd that a lambda and a pair constructor are living in \"the same\" type, but math says that <code>(true /\\ true) = (nat -&gt; true)</code></p>",
        "id": 244861478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625408244
    }
]