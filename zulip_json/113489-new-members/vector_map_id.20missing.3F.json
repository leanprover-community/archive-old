[
    {
        "content": "<p>Is this missing from mathlib? I wanted to use this in one of my proofs but had to prove it by hand because <code>library_search</code> and <code>suggest</code> told me it is not already in mathlib. Is that correct? Does it need to be added in?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec_map_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector.map</span> <span class=\"n\">id</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">]},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">vl</span> <span class=\"n\">vn</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">vector.map</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214650072,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1603759274
    },
    {
        "content": "<p>I'm not seeing it either. I suspect there's a nicer proof in terms of <code>.to_list</code>.</p>",
        "id": 214653900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603763690
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector.map_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector.map</span> <span class=\"n\">id</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">vector.eq</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">list.map_id</span><span class=\"o\">,</span> <span class=\"n\">vector.to_list_map</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214654153,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603764057
    },
    {
        "content": "<p>Isn't it <code>linear_map.id</code> in <code>linear_algebra.basic</code>?</p>",
        "id": 214675885,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603790441
    },
    {
        "content": "<p>This is a computer science <code>vector</code>, i.e. a <code>list</code> with fixed length :)</p>",
        "id": 214675932,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603790471
    },
    {
        "content": "<p>This is worth a quick PR, right?</p>",
        "id": 214691748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603801475
    },
    {
        "content": "<p>Quick PRs are always worth the effort!</p>",
        "id": 214691931,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603801624
    },
    {
        "content": "<p>Presumably the proof golfs to <code>vector.eq (by simp)</code>?</p>",
        "id": 214691974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603801664
    },
    {
        "content": "<p>Almost. I think it's <code>vector.eq _ _ (by simp)</code>.</p>",
        "id": 214703407,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1603807469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> if you don't mind, can I create the PR? I have never contributed to mathlib before and I would like to learn :-)</p>",
        "id": 214704498,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1603807954
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> Can I get write access for the non-master branches of mathlib? Github username: <code>vaibhavkarve</code>. Thank you for your time!</p>",
        "id": 214709245,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1603809943
    },
    {
        "content": "<p>invitation sent</p>",
        "id": 214709908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603810159
    },
    {
        "content": "<p>I opened a PR here: <a href=\"https://github.com/leanprover-community/mathlib/pull/4799\">https://github.com/leanprover-community/mathlib/pull/4799</a></p>",
        "id": 214711110,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1603810599
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4799\">#4799</a> works too</p>",
        "id": 214711411,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603810744
    }
]