[
    {
        "content": "<p>Hi, I am Valentin and this is my first question here. I am trying to do a linear algebra exercise that almost directly follows from unpacking the definitions. However, I have some problems when I want to apply a statement that holds for <code>x∈ N</code> in a situation <code>x : ↥N</code>. Can I do that? If yes, how? I guess the answer might be very simple, but asking here would save me a lot of time and gives me the opportunity to introduce myself.<br>\nI included a not-so-minimal mwe because maybe you have other suggestions on how I can improve my writing style or in case you have a much shorter proof that I can learn from. (To my mathematical background: I am a PhD student in symplectic geometry and therefore thought I might experiment some more in lean by looking at statements about symplectic vector spaces and this is my first attempt).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_form</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_isotropic</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">B.orthogonal</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_isotropic_iff_restrict_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_isotropic</span> <span class=\"n\">B</span> <span class=\"n\">N</span> <span class=\"bp\">↔</span> <span class=\"n\">B.restrict</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_isotropic</span><span class=\"o\">,</span> <span class=\"n\">bilin_form.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">set_like.le_def</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">bilin_form.is_ortho_def.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Of course, I want to do something like <code>specialize h x</code> but then I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">h</span> <span class=\"n\">x</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">x</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B.orthogonal</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"n\">N</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"n\">B</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 277841345,
        "sender_full_name": "Valentin Bosshard",
        "timestamp": 1649146224
    },
    {
        "content": "<p>Note that <code>x.prop</code> is often better than <code>x.property</code>, as the latter uses the <code> ↑</code> that Patrick remarks is better</p>",
        "id": 277865381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649159759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372333\">Valentin Bosshard</span> has marked this topic as unresolved.</p>",
        "id": 277867176,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649160583
    },
    {
        "content": "<p>In <code>linear_algebra/bilinear_form</code> there are several lemmas that can be generalized from symmetric bilinear forms to reflexive bilinear forms (which would be nice for me because I want to say something about alternating bilinear forms). The proofs themselves do almost not need any changes. Can I request permission to push these changes? My github name is tinval.</p>",
        "id": 277867779,
        "sender_full_name": "Valentin Bosshard",
        "timestamp": 1649160882
    },
    {
        "content": "<p>Invitation sent!</p>",
        "id": 277867892,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649160955
    },
    {
        "content": "<p>Have a look at <a href=\"https://leanprover-community.github.io/contribute/index.html\">this</a> before opening your first PR</p>",
        "id": 277868033,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649161019
    },
    {
        "content": "<p>We also have a nice <a href=\"https://youtu.be/Bnc8w9lxe8A\">video</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://youtu.be/Bnc8w9lxe8A\"><img src=\"https://uploads.zulipusercontent.net/ae6a5158c3c3f73f7cadb724ecaee86e98129753/68747470733a2f2f692e7974696d672e636f6d2f76692f426e633877396c786538412f64656661756c742e6a7067\"></a></div>",
        "id": 277868158,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649161091
    },
    {
        "content": "<p>Welcome <span class=\"user-mention\" data-user-id=\"372333\">@Valentin Bosshard</span>!  Nice to see another differential geometer here.  We were discussing a few accessible targets related to symplectic geometry a few months ago, if you're interested:<br>\n<a href=\"#narrow/stream/116395-maths/topic/Symplectic.20geometry\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Symplectic.20geometry</a><br>\nBut yes, it's a long way to Fukaya categories :)</p>",
        "id": 277883796,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649167532
    }
]