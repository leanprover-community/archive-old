[
    {
        "content": "<p>I've got a <code>def convert_a_into_b (sa : struct_a M) : struct_b (option M)</code> and a <code>def convert_b_into_a (sb : struct_b M) : struct_a (units M)</code>. I want to show that these are meaningfully inverses, so I tried writing something like</p>\n<p><code>\ndef a_b_iso [a_inst : struct_a M]: convert_b_into_a (convert_a_into_b a_inst) ≃ a_inst :=\nbegin\n   sorry\nend\n</code></p>\n<p>but that doesn't compile, it says that</p>\n<p><code>\ntype mismatch at application\n  equiv (convert_a_into_b inst_a).convert_b_into_a\nterm\n  (convert_a_into_b inst_a).convert_b_into_a\nhas type\n  struct_a (option (units M)) : Type u\nbut is expected to have type\n  Sort ? : Type ?\n</code><br>\nand<br>\n<code>\ntype mismatch at application\n  ⁇ ≃ a_inst\nterm\n  a_inst\nhas type\n  struct_a M : Type u\nbut is expected to have type\n  Sort ? : Type ?\n</code></p>",
        "id": 257268457,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634071107
    },
    {
        "content": "<p>I tried following a few different examples in mathlib to see how to use <code>def</code> turning one structure into another, but, I couldn't figure it out. Help with the syntax? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 257268541,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634071144
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> &lt;-- some info about making your posts more readable if they contain code</p>",
        "id": 257269229,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634071437
    },
    {
        "content": "<p>Also, a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be helpful</p>",
        "id": 257269387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634071501
    },
    {
        "content": "<p>What do you mean by \"meaningfully inverses\" as opposed to \"inverses\"?</p>",
        "id": 257269416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634071512
    },
    {
        "content": "<p>Well, that I guess they aren't <em>literally</em> inverses because the types <code>option (units M)</code> and <code>M</code> are different. (I think?) Even though here they'll end up corresponding exactly one-to-one.</p>",
        "id": 257270310,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634071906
    },
    {
        "content": "<p><code>equiv a b</code> need <code>a</code> and <code>b</code> to be types.</p>",
        "id": 257270312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1634071907
    },
    {
        "content": "<p>I'll make an mwe later today</p>",
        "id": 257270331,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634071915
    },
    {
        "content": "<p>You probably rather want to make <code>convert_a_into_b</code> the first field of <code>M ≃ option M</code> (an equivalence is <strong>data</strong>) and massage <code>convert_b_into_a</code> <code>option M → M</code>to to make it the second field.</p>",
        "id": 257271836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634072634
    },
    {
        "content": "<p>However I doubt you actually want an equivalence because you only wanted to show that they compose to the identity one way.</p>",
        "id": 257271995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634072695
    },
    {
        "content": "<p>If that's really the case, you can't much more than \"They compose to the identity\".</p>",
        "id": 257272051,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634072724
    },
    {
        "content": "<p>Hi, I am trying to get the quickstart at <a href=\"https://leanprover.github.io/lean4/doc/quickstart.html\">https://leanprover.github.io/lean4/doc/quickstart.html</a> going.<br>\nI ran it with standard options and everything runs fine, but when I check for version lean is still at 3.xx.<br>\nIs there some action I need to take first, if I previously installed lean 3?</p>",
        "id": 257273936,
        "sender_full_name": "anton_shrdlu",
        "timestamp": 1634073602
    },
    {
        "content": "<p>I am also new to zulip, so sorry if this is the wrong place for questions like this.</p>",
        "id": 257274087,
        "sender_full_name": "anton_shrdlu",
        "timestamp": 1634073674
    },
    {
        "content": "<p>They compose to the identity both ways, actually, I was planning to show it each way separately. If there's a better notation / code / class for that I'm all ears!</p>",
        "id": 257274483,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634073872
    },
    {
        "content": "<p>notably I do not have<code>M ≃ option M</code>, that would be false, in fact the injection from M into option M isn't even natural. It's only when I go back through units (option M) that it's isomorphic.</p>\n<p>For a concrete example, <code>units</code> and <code>with_zero</code> are inverse operations when beginning with a group G or group_with_zero G0. There is an isomorphism between <code>units (with_zero G)</code> and <code>G</code>, as well as between <code>with_zero (units G0)</code> and <code>G0</code>. In that case the isomorphisms are pretty trivial since the with_zero and units instances directly inherit multiplication from the parent G or G0.</p>\n<p>In my case, the multiplication operation is <em>not</em> the same, so I was advised that instead of declaring <code>[struct_a M] option M</code> as an instance of <code>struct_b M</code>, I should <code>def</code> the mappings, which I've done in <code>convert_a_into_b</code> and vv. But now I'm not sure how to <em>use</em> those definitions.</p>\n<p>How do I write down the equivalence that I'm trying to state?</p>",
        "id": 257276016,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634074693
    },
    {
        "content": "<p>I made a MWE. It's not that small, but I think it's pretty quick to read, and it's self-contained... <a href=\"https://gist.github.com/Timeroot/65e4e8a5b7a4216251f425c0e1cd1da1\">https://gist.github.com/Timeroot/65e4e8a5b7a4216251f425c0e1cd1da1</a></p>\n<p>Help appreciated!</p>",
        "id": 257315719,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634105047
    },
    {
        "content": "<p>Like Patrick said above, equivs or mul_equivs etc are between types, not between terms. While here, you're trying to state an equivalence between structures, which are terms. I would imagine that the type of your equiv could be between option (units S) and units (option S). The term of an equiv type is a structure, comprising two functions and proofs that they are inverses of each other on both sides.</p>",
        "id": 257356207,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634128038
    },
    {
        "content": "<p>Then, if you can define that, you have a bundled function, that is, bundled directly with its inverses and with the proofs of that inverse-fact.</p>",
        "id": 257356310,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634128082
    },
    {
        "content": "<p>My types suggested above won't work btw I don't think.</p>",
        "id": 257356497,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634128172
    },
    {
        "content": "<p>Perhaps in this case it is between add_group S and add_group (units (option S))</p>",
        "id": 257356685,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634128248
    },
    {
        "content": "<p>But that's really talking about the equiv between S and units (option S)</p>",
        "id": 257356742,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634128279
    },
    {
        "content": "<p>Does just writing <code>=</code> work for your mwe?</p>",
        "id": 257357953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634128833
    },
    {
        "content": "<p><code>=</code> doesn't work, because one side has type has <code>option S</code>, and the other has type <code>add_group (units (option S))</code>.</p>",
        "id": 257387447,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634139705
    },
    {
        "content": "<p>It sounds like <code>equiv</code> / <code>mul_equiv</code> are maybe not the right relation then.</p>\n<p>I'm a bit confused because in e.g. all the ring theory stuff, it says <code>R ≃+* S</code> where <code>{R : Type*}{S : Type*}</code> with <code>[ring R] [ring S]</code>. So I guess there, <code>R</code> is the type, and <code>[ring R]</code> is stating there there is an instance of ring structure on <code>R</code> available to use? And I want to explicitly provide the ring structure to use, which is not an \"obvious\" one</p>",
        "id": 257388125,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634139947
    },
    {
        "content": "<p>Another option is to provide the ring structure (or your case, <code>add_group</code> and <code>group</code>?) through <code>instance</code> and then provide the equivalence you want as a group isomorphism (although they mix additive and multiplicative notation, so I don't know how that's supposed to work).</p>",
        "id": 257397398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634143251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  let's suppose they both used multiplicative notation -- if I put an <code>instance</code> on it, that would be something like <code>instance [group G] : group_with_zero (option G)</code> and <code>instance [group_with_zero G] : group (units G)</code>, right?</p>\n<p>Wouldn't that make things a little bit 'polluted'? Now any discussion of an option of a group is \"also\" about a group_with_zero, right?</p>",
        "id": 257405440,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634146269
    },
    {
        "content": "<p>Maybe that's okay, I don't know</p>",
        "id": 257405459,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634146274
    },
    {
        "content": "<p>I think units G is a group for any monoid G, by definition. And group_with_zero G implies monoid G.</p>",
        "id": 257406709,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634146788
    },
    {
        "content": "<p>Yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.group\">docs#units.group</a></p>",
        "id": 257406861,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634146856
    },
    {
        "content": "<p>Actually I'm afraid this will lead to typeclass loops.</p>",
        "id": 257408174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147345
    },
    {
        "content": "<p>because that's precisely the point of what you're doing: to loop.</p>",
        "id": 257408208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147361
    },
    {
        "content": "<p>Yes, but I'm trying to understand the notation. The actual goal is I would like to write some Lean to show the canonical isomorphism between squags and sloops. :) And while <code>units G</code> can directly inherit the same <code>mul</code> operation from the <code>monoid G</code>, the same is not true between squags and sloops: the isomorphism is \"fairly\" natural, but using an <code>instance</code> would mean that I now have a <code>*</code> operation that doesn't actually lift! And that would be pretty awful. Hence me trying to make an example here where I'm defining <code>units G</code> to have the opposite multiplication (<code>a*b -&gt; b*a</code>), to suggest the nontriviality of the lift.</p>",
        "id": 257408274,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634147391
    },
    {
        "content": "<p>I really don't know how to get around the fact that you're transforming <code>G</code> into <code>option G</code> into <code>units (option G)</code>.</p>",
        "id": 257408608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147520
    },
    {
        "content": "<p>Good news is I figured out how to actually get the type signature I wanted, but manually feeding all the type arguments. Unfortunately, that is so awful that it comes out to a good thirty lines of code. I've added it as a comment on the MWE: <a href=\"https://gist.github.com/Timeroot/65e4e8a5b7a4216251f425c0e1cd1da1\">https://gist.github.com/Timeroot/65e4e8a5b7a4216251f425c0e1cd1da1</a></p>\n<p>Suggestions for how to make this more legible? For instance, it would be nice if I could name <code>(@@units (option S) \n        (@@monoid_with_zero.to_monoid\n          (option S)\n          (@@group_with_zero.to_monoid_with_zero (option S) (convert_g_into_g₀_op g)\n      ) ) )</code> as one type and re-use that.</p>",
        "id": 257408666,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634147529
    },
    {
        "content": "<p>What about you define the \"obvious\" equivalences <code>G ≃ units (option G)</code> and <code>G ≃ option (units G)</code> first?</p>",
        "id": 257408853,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448405\">Alex Meiburg</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20isomorphisms/near/257408666\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, that is so awful that it comes out to a good thirty lines of code.</p>\n</blockquote>\n<p>Okay, this is what horrendous means <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 257409024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147680
    },
    {
        "content": "<p>Then you can show that your <code>convert_whatever</code>s compose into one direction of the equivalence.</p>",
        "id": 257409497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147857
    },
    {
        "content": "<p>I doubt there is anything more Lean-meaningful you can say about it because your begin and end types don't match. Else an group iso would have done the trick.</p>",
        "id": 257409724,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147923
    },
    {
        "content": "<p>Basically, your operations only add complexity, even though they are morally inverses to each other.</p>",
        "id": 257409826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634147963
    },
    {
        "content": "<p>One thing you could try, though, is to define <strong>four</strong> conversions: the two you already have + the two that you get by making the former two simplifying.</p>",
        "id": 257410124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634148039
    },
    {
        "content": "<p>I mean</p>\n<ul>\n<li><code>G → units G</code></li>\n<li><code>G → option G</code></li>\n<li><code>units G → G</code></li>\n<li><code>option G → G</code></li>\n</ul>",
        "id": 257410220,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634148081
    },
    {
        "content": "<p>Of course, for the latter two you'll have to assume that the group structure on <code>units G</code>/<code>option G</code>is somehow what you would get from the former two. Typically, you must assume <code>none = 0</code>.</p>",
        "id": 257410381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634148141
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 257410473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634148177
    },
    {
        "content": "<p>Are you aware of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_zero\">docs#with_zero</a>?</p>",
        "id": 257428950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634155547
    },
    {
        "content": "<p>Yes, I am, I was avoiding that because it just gives the definitions one more layer to unfold, and my \"minimal\" example was already bigger than I preferred</p>",
        "id": 257437423,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634158991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/notation.20for.20isomorphisms/near/257410220\">said</a>:</p>\n<blockquote>\n<p>I mean</p>\n<ul>\n<li><code>G → units G</code></li>\n<li><code>G → option G</code></li>\n<li><code>units G → G</code></li>\n<li><code>option G → G</code></li>\n</ul>\n</blockquote>\n<p>This is interesting, what would be the equivalence I actually end up proving then?</p>",
        "id": 257437633,
        "sender_full_name": "Alex Meiburg",
        "timestamp": 1634159073
    }
]