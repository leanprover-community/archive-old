[
    {
        "content": "<p>I constructing my toy version of the real numbers and I want to show that it has the least upper bound property.  Do do so, a key step is to show that every set of real numbers that is bounded is bounded by an integer.  This proof/function is (equivalent to) <code>least_of_bdd</code> that is defined in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.least_of_bdd\">docs#int.least_of_bdd</a>.  It reads </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">least_of_bdd</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hinh</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">lb</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">lb</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>That is my problem.  My question is what does the double forward slash mean and how could I have found this information without bothering the Zulip chat?  I use emacs and I am able to get the definition of functions by right-clicking, but I seemingly can't do this on notation.  </p>\n<p>Thank you.</p>",
        "id": 300400246,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663949011
    },
    {
        "content": "<p>I just found out it is a <a href=\"mailto:docs@data.subtype\">docs@data.subtype</a> notation.  Sorry for the bother.   I should just ask the <a href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\">rubber duck</a> next to my desk.</p>",
        "id": 300401835,
        "sender_full_name": "Kent Van Vels",
        "timestamp": 1663949472
    },
    {
        "content": "<p>No, that's perfectly fine to ask about <code>//</code> here. I remember it taking a while before I tracked down what it was.  This one is built into Lean itself.</p>",
        "id": 300417664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663954537
    },
    {
        "content": "<p>One trick you can do is use the <code>set_option pp.notation false</code> command, then maybe <code>#print least_of_bdd</code>.</p>",
        "id": 300417723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663954554
    },
    {
        "content": "<p>I wonder if we could have a page on the website with all the unsearchable basic notations</p>",
        "id": 300417970,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663954632
    },
    {
        "content": "<p>Another trick (which I suggest as an emacs user myself) is to pull up VS Code and use it's very handy widgets system. You can click on notations in the goal window and get more information.</p>",
        "id": 300418037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663954656
    },
    {
        "content": "<p>Here are a number of approaches, many already mentioned: <a href=\"https://proofassistants.stackexchange.com/questions/1672/in-lean-how-do-i-expand-a-definition-without-knowing-what-it-is/1673#1673\">https://proofassistants.stackexchange.com/questions/1672/in-lean-how-do-i-expand-a-definition-without-knowing-what-it-is/1673#1673</a></p>",
        "id": 300440256,
        "sender_full_name": "Jason Rute",
        "timestamp": 1663962683
    }
]