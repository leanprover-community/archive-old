[
    {
        "content": "<p>I'm not entirely sure how to even phrase this question properly, but... Let's say I have some arbitrary proposition, say<br>\n<code>a = succ b</code>, and I want to convert this into an application of a lemma, <code>(λ y, y = succ b) a</code>, so I can use it with the myriad theorems that expect terms of the form <code>f a</code>. Is there a tactic for doing this already?</p>",
        "id": 277815568,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649120537
    },
    {
        "content": "<p>(<code>generalize</code> seems close in concept but doesn't in fact do the job of making things that the unifier can recognize as of the form <code>(a -&gt; Prop) (a)</code>)</p>",
        "id": 277816023,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649121028
    },
    {
        "content": "<p>Would you mind giving a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of an example where you're wanting this? </p>\n<p>Without that, it sounds like you might want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#change\">tactic#change</a>, which should be able to handle this at the cost of having to write out a part of the expression.</p>",
        "id": 277818442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649123754
    },
    {
        "content": "<p><code>change</code> works at precisely that cost, yes, which can be particularly annoying for long expressions; I can sometimes just copy from the info view but ...</p>",
        "id": 277823080,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128813
    },
    {
        "content": "<p>also, more importantly, it prevents me from writing a custom induction tactic as reliable/general as I'd prefer</p>",
        "id": 277823089,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128832
    },
    {
        "content": "<p>specifically, I'm trying to write a \"restricted induction\" tactic that uses a specific induction axiom/set comprehension axiom</p>",
        "id": 277823107,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128860
    },
    {
        "content": "<p>my current implementation is just </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.restricted_induction</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n   <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277823112,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128873
    },
    {
        "content": "<p>(where the first two lines are currently unused)</p>",
        "id": 277823119,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128882
    },
    {
        "content": "<p>together with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">rca</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">Z</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span>\n</code></pre></div>",
        "id": 277823204,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128977
    },
    {
        "content": "<p>but the <code>apply</code> is, ah, temperamental</p>",
        "id": 277823211,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649128986
    },
    {
        "content": "<p>I end up having to give long elaboration hints to the compiler where I copy down the exact function <code>p: nat → Prop</code> I need</p>",
        "id": 277823223,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649129022
    },
    {
        "content": "<p>I'll update with a proper example/MWE when I re-encounter one, I refactored a bunch of my code while I was waiting to work around the problem ^.^;</p>",
        "id": 277823333,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649129155
    },
    {
        "content": "<p>What's \"restricted induction\"? Is it something that <code>induction v using rca</code> wouldn't let you do?</p>",
        "id": 277826583,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649133135
    },
    {
        "content": "<p>okay, here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a.le</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b.le</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">restricted_induction</span> <span class=\"n\">a</span> <span class=\"n\">rca</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a.le</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b.le</span> <span class=\"n\">a</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">Z</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">k</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a.le</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b.le</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 277826619,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649133214
    },
    {
        "content": "<p>....</p>",
        "id": 277826702,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649133322
    },
    {
        "content": "<p>hm.</p>",
        "id": 277826703,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649133325
    },
    {
        "content": "<p>It might, actually</p>",
        "id": 277826705,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649133326
    },
    {
        "content": "<p>The first time I read it I thought it wouldn't, but now I'm not sure why I thought that</p>",
        "id": 277826710,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649133336
    },
    {
        "content": "<p>hm</p>",
        "id": 277827208,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649134007
    },
    {
        "content": "<p>well, the empirical answer is \"well, it doesn't work\"</p>",
        "id": 277827210,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649134018
    },
    {
        "content": "<p><em>why</em> remains up for debate</p>",
        "id": 277827214,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649134026
    },
    {
        "content": "<p>(Fyi: this is closer to a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, though I had to make some guesses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">section</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.restricted_induction</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n   <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">goal</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.target</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">rca</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">k.succ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a.le</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b.le</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">restricted_induction</span> <span class=\"n\">a</span> <span class=\"n\">rca</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>)</p>\n<p>Sometimes <code>refine</code> is better than <code>apply</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a.le</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b.le</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">rca</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Changing the axiom a little makes <code>induction</code> work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">rca</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">a.le</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b.le</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">rca</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277827228,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649134078
    },
    {
        "content": "<p>Hmmm... I'm getting \"unknown declaration rca\"</p>",
        "id": 277827977,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649134948
    },
    {
        "content": "<p>if I replace <code>induction</code> with <code>restricted_induction</code>, then it at least recognizes <code>rca</code>, though it complains that it doesn't unify</p>",
        "id": 277827983,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649134973
    },
    {
        "content": "<p>ah,  I was missing a namespace inclusion. Okay, that works now. Thanks!</p>",
        "id": 277839574,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649145079
    }
]