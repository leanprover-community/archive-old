[
    {
        "content": "<p>I copied this from <a href=\"https://github.com/leanprover/lean/blob/master/library/init/data/nat/basic.lean#L84\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/data/nat/basic.lean#L84\">library/init/data/nat/basic.lean</a>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">not_succ_le_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n<span class=\"bp\">.</span>\n</pre></div>",
        "id": 133063613,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535639211
    },
    {
        "content": "<p>It's syntax to execute a method inside a module (the nat module). If you do </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n</pre></div>\n\n\n<p>you can access succ without the nat. prefix by opening the nat namespace. There's a section in \"Theorem Proving in Lean\" about the module/namespace keywords.</p>",
        "id": 133063790,
        "sender_full_name": "cbailey",
        "timestamp": 1535639381
    },
    {
        "content": "<p>Sorry, I meant the . on the line all by itself, which somehow suffices as a proof of this lemma.</p>",
        "id": 133063859,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535639426
    },
    {
        "content": "<p>Usually an dot at the end of something is there only to help the parser</p>",
        "id": 133063917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535639514
    },
    {
        "content": "<p>What do you mean by \"help the parser\" here? Is the dot shorthand for something?</p>",
        "id": 133064379,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535639930
    },
    {
        "content": "<p>I mean it tells the parser that something ends here.</p>",
        "id": 133064406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535639961
    },
    {
        "content": "<p>But really I don't know why there is something to end here. The statement is trivial but many other trivial things still require a proof</p>",
        "id": 133064419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535639996
    },
    {
        "content": "<p>It's being used to indicate that this is an empty pattern match. Structurally, there's no <code>n</code> for which you can have a proof of <code>succ n ≤ 0</code>.</p>",
        "id": 133064512,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535640076
    },
    {
        "content": "<p>So you're proving the lemma by induction on <code>n</code>, except there are no cases because none of them make sense.</p>",
        "id": 133064535,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535640106
    },
    {
        "content": "<p>You need the <code>.</code> so that Lean knows the proof is over and doesn't confuse the next line with a continuation of the lemma statement.</p>",
        "id": 133064601,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535640147
    },
    {
        "content": "<p>OK, that makes sense, thanks!</p>",
        "id": 133064617,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535640170
    },
    {
        "content": "<p>Oh I was way off lol. My apologies.</p>",
        "id": 133064965,
        "sender_full_name": "cbailey",
        "timestamp": 1535640597
    }
]