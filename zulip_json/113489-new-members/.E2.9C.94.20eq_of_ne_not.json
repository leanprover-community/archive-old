[
    {
        "content": "<p>Is there an easy way to prove this (preferably in one line)? I can't find simpler way than doing case split into 4 subgoals...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_of_ne_not</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">¬</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264433733,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639135821
    },
    {
        "content": "<p><code>by tauto!</code>?</p>",
        "id": 264433775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639135864
    },
    {
        "content": "<p>Tried that already. <code>done tactic failed, there are unsolved goals</code></p>",
        "id": 264433882,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639135919
    },
    {
        "content": "<p>How did you end up with equality of propositions?</p>",
        "id": 264434114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639136039
    },
    {
        "content": "<p><code>↔</code> would be more natural</p>",
        "id": 264434175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639136055
    },
    {
        "content": "<p>do we not have <code>propext_iff</code>?</p>",
        "id": 264434605,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639136343
    },
    {
        "content": "<p>anyways <code>:= propext (by tauto!)</code> works</p>",
        "id": 264434640,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639136376
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/eq_of_ne_not/near/264434114\">said</a>:</p>\n<blockquote>\n<p>How did you end up with equality of propositions?</p>\n</blockquote>\n<p>I'm proving something about infinite structures of bits. I decided to use <code>Prop</code> instead of <code>bool</code> because many of the bits depend on some other propositions.</p>\n<p>Note that this proof works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_eq_iff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↔</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iff_of_eq</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">propext</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_of_ne_not</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"bp\">¬</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_eq_iff</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But is there something builtin?</p>",
        "id": 264434645,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639136379
    },
    {
        "content": "<p>I guess tauto doesn't like <code>propext</code></p>",
        "id": 264434653,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639136383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/eq_of_ne_not/near/264434640\">said</a>:</p>\n<blockquote>\n<p>anyways <code>:= propext (by tauto!)</code> works</p>\n</blockquote>\n<p>Thanks! Also <code>by ext; tauto</code> is even shorter.</p>",
        "id": 264435342,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639136789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> has marked this topic as resolved.</p>",
        "id": 264435362,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639136806
    },
    {
        "content": "<p>Doesn't <code>simpa using h</code> work? I remember a recent PR adding lemmas for this</p>",
        "id": 264441786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639140503
    }
]