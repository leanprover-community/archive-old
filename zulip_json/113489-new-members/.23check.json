[
    {
        "content": "<p><code>#check λ (α β : Type*) (b : β) (x : α), x </code> outputs <code>λ (α : Type u_1) (β : Type u_2) (b : β) (x : α), x : Π (α : Type u_1) (β : Type u_2), β → α → α</code>. Could anyone please explain what <code>Π</code> means here?</p>",
        "id": 240151050,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1621927464
    },
    {
        "content": "<p>It's called a Pi type or dependent product type; it is synonymous with <code>\\forall</code> in lean but is conventionally used when the target type is a type instead of a prop</p>",
        "id": 240151491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621927753
    },
    {
        "content": "<p>A member of the dependent product type <code>\\Pi x : A, B x</code> is a function <code>f</code> with domain <code>A</code> such that <code>f(x) : B x</code> for all <code>x</code> in <code>A</code></p>",
        "id": 240151605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621927808
    },
    {
        "content": "<p><code>A -&gt; B</code> is a special case of <code>\\Pi x : A, B</code> when <code>B</code> doesn't depend on <code>x</code></p>",
        "id": 240151721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621927895
    },
    {
        "content": "<p>It means \"for all\". The type of  your term is \"for all alpha and beta, the maps from beta to (maps from alpha to alpha)\"</p>",
        "id": 240157289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621931672
    },
    {
        "content": "<p>lambda makes the terms, Pi makes the types.</p>",
        "id": 240157324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621931701
    }
]