[
    {
        "content": "<p>I'm trying to create a <code>mul_left_inj</code> for a new group that I'm formalising and developing. Heres basically as far as I have got:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_gyrop</span>        <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">gyrop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">has_subgyrop</span>     <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subgyrop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">has_neggyrop</span>     <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">neggyrop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">has_cogyrop</span>      <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cogyrop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">has_subcogyrop</span>      <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">subcogyrop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">has_negcogyrop</span>      <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">negcogyrop</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">⊙</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">has_gyrop</span><span class=\"bp\">.</span><span class=\"n\">gyrop</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">⊝</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">75</span> <span class=\"o\">:=</span> <span class=\"n\">has_subgyrop</span><span class=\"bp\">.</span><span class=\"n\">subgyrop</span>\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span><span class=\"err\">⊝</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"o\">:=</span> <span class=\"n\">has_neggyrop</span><span class=\"bp\">.</span><span class=\"n\">neggyrop</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">⊞</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">has_cogyrop</span><span class=\"bp\">.</span><span class=\"n\">cogyrop</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">⊟</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"o\">:=</span> <span class=\"n\">has_subcogyrop</span><span class=\"bp\">.</span><span class=\"n\">subcogyrop</span> <span class=\"c1\">-- what a long name</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span><span class=\"err\">⊟</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">85</span> <span class=\"o\">:=</span> <span class=\"n\">has_negcogyrop</span><span class=\"bp\">.</span><span class=\"n\">negcogyrop</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">?</span>\n<span class=\"cm\">A gyrogroup (G, ⊕) is gyrocommutative if its binary operation obeys the gyrocommutative law</span>\n<span class=\"cm\">(G6) a ⊕ b = gyr[a, b](b ⊕ a) for all a, b ∈ G.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">class</span> <span class=\"n\">gyrocomm_gyrogroup</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_gyrop</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">has_subgyrop</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">has_neggyrop</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- axiom 1: 0 ⊕ a = a</span>\n<span class=\"o\">(</span><span class=\"n\">zero_gyro</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"err\">⊙</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"c1\">-- axiom 2: ⊖a⊕a = 0</span>\n<span class=\"o\">(</span><span class=\"n\">gyr_add_left_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"err\">⊝</span><span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gyr</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"c1\">-- gyr a b c is gyr[a, b]c in the notation from the Wiki</span>\n<span class=\"c1\">-- axiom 3: ∀ a b c ∈ G, a + (b + c) = (a + b) + gyr a b c</span>\n<span class=\"o\">(</span><span class=\"n\">add_gyr_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊙</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⊙</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_gyr_assoc&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊙</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⊙</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"c1\">-- uniqueness</span>\n<span class=\"c1\">-- axiom 5: gyr a b = gyr (a + b) b</span>\n<span class=\"o\">(</span><span class=\"n\">gyr_loop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">gyr</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"c1\">--axiom 6: a ⊕ b = gyr[a, b](b ⊕ a) for all a, b ∈ G</span>\n<span class=\"o\">(</span><span class=\"n\">gyro_comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊙</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">gyrocomm_gyrogroup</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">gyrocomm_gyrogroup</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">gyr_a_b_zero</span> <span class=\"o\">:</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kn\">axiom</span> <span class=\"n\">gyr_distrib</span> <span class=\"o\">:</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">⊙</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"err\">⊙</span> <span class=\"n\">gyr</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">d</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">gyrocomm_gyrogroup</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gyrocomm_equal</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">⊙</span> <span class=\"n\">c</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">fabc</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">fbc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fbc</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(I think thats all is needed to get it to work. I have too many files. The full code can be found <a href=\"https://github.com/jamesa9283/gyrovectors-lean\">here</a>)</p>\n<p>Basically, my goal is at </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">gyrocomm_gyrogroup</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">fabc</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">⊙</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">⊙</span><span class=\"n\">c</span>\n<span class=\"err\">⊢</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>\n</code></pre></div>\n\n\n<p>and I want to do <code>   refine congr rfl _ at fabc</code>, but lean disagrees with me throwing many errors all saying that I have given it a wrong command. So how to I apply something like this command to <code>fabc</code>?</p>",
        "id": 206796717,
        "sender_full_name": "James Arthur",
        "timestamp": 1597311909
    },
    {
        "content": "<p>It seems you're asking for magic. Why couldn't there be some other reason that they are equal? What is the maths proof here?</p>",
        "id": 206797233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597312373
    },
    {
        "content": "<p>At first I thought those axioms were for the sake of the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but they are also in your actual project. That's a really weird thing to do; you almost certainly either want them to be <code>theorem ... := sorry</code> if they should be provable, or fields of the structure if they are not</p>",
        "id": 206811060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597323381
    }
]