[
    {
        "content": "<p>Hello! My name is Radu Zevri and I am an undergraduate student working on my 4th year project. I've started learning Lean a few weeks ago and I am struggling to understand it.  I am currently trying to prove that positive definite Hermitian matrices have positive eigenvalues, and I am stuck. Apologies if it's a silly question, but how can I multiply by v conjugate transposed at vmul? (I have <code>vmul: M.mul_vec v = e • v</code> and want to multiply by <code>vec_conj vᵀ</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pos_def_pos_eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.is_pos_def</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">M</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_pos_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">at</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ev</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">herm</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_Hermitian</span> <span class=\"n\">at</span> <span class=\"n\">herm</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep</span> <span class=\"k\">with</span> <span class=\"n\">vnz</span> <span class=\"n\">vmul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_smul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thank you very much for helping me out.  I am looking forward to hearing back from you! Please let me know if you have any suggestions.</p>",
        "id": 280221323,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650984677
    },
    {
        "content": "<p>Can you edit your post to make it a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (note: this is a clickable link)? Adding all the imports, variables etc you used will make it easier for others to answer your question.</p>",
        "id": 280221855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650984857
    },
    {
        "content": "<p>Yes, I will do so shortly. Thank you very much for your advice.</p>",
        "id": 280222098,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650984961
    },
    {
        "content": "<p>Thanks! It's much easier to answer questions if I can easily run your code locally.</p>",
        "id": 280222346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650985067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_Hermitian</span> <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pos_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):=</span> <span class=\"n\">M.is_Hermitian</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenpair</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_def_pos_eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.is_pos_def</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">M</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_pos_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">at</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ev</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">herm</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_Hermitian</span> <span class=\"n\">at</span> <span class=\"n\">herm</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep</span> <span class=\"k\">with</span> <span class=\"n\">vnz</span> <span class=\"n\">vmul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_smul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">--vmul: v M.mul_vec v = e • v</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>\n<p>I believe this should work as a mwe</p>",
        "id": 280222731,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650985193
    },
    {
        "content": "<p>I don't know my way around this part of the library but searching for \"dot product\" in the docs (because you just want to take the dot product, right?) gives me <code>matrix.dot_product</code>. I don't know whether this is the idiomatic way to take the complex conjugate of a vector, but <code>apply_fun matrix.dot_product (conj ∘ v) at vmul,</code> does what you want mathematically, although you have to <code>open_locale complex_conjugate</code> to make <code>conj</code> work.</p>",
        "id": 280224191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650985692
    },
    {
        "content": "<p>Thank you very much! I will try to work my way from here. Is it ok if I ask further questions if I get stuck?</p>",
        "id": 280224856,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650985964
    },
    {
        "content": "<p>sure -- that's exactly the point of the <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> stream. If it's about the same code you can keep asking questions in this thread. Hopefully someone will show up who actually knows this part of the library.</p>",
        "id": 280225328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650986183
    },
    {
        "content": "<p>The idiomatic spelling for the complex conjugate of a vector is <code>star v</code> I think</p>",
        "id": 280227076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650986992
    },
    {
        "content": "<p>Yes, that's right! Thank you!</p>",
        "id": 280229210,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650988031
    },
    {
        "content": "<p>Is there any code for the norm/magnitude of a vector? I've tried searching for vec norm and vec mag, but I haven't found anything yet.  If there is nothing written yet, I could start.</p>",
        "id": 280233018,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650989567
    },
    {
        "content": "<p>Yes, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm\">docs#norm</a> on <code>(pi_Lp.equiv _ 2).symm v</code> to get the L2-norm (aka magnitude) of a vector</p>",
        "id": 280233805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650989928
    },
    {
        "content": "<p>Note that if you just use <code>∥v∥</code> you'll get the largest absolute value of the coefficients, which probably isn't what you want</p>",
        "id": 280233903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650989993
    },
    {
        "content": "<p>(although until <a href=\"https://github.com/leanprover-community/mathlib/pull/13569\">#13569</a> gets merged we don't have any lemmas about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi_Lp.equiv\">docs#pi_Lp.equiv</a>)</p>",
        "id": 280234021,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650990038
    },
    {
        "content": "<p>I don't think we have  a name for <code>∥v∥⁻¹ • v</code> anywhere</p>",
        "id": 280234099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650990092
    },
    {
        "content": "<p>Apologies, but I can't make it work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.find</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.skip</span>\n<span class=\"c1\">--#find has_norm,</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_Hermitian</span> <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pos_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):=</span> <span class=\"n\">M.is_Hermitian</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenpair</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_norm</span><span class=\"o\">((</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_def_pos_eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.is_pos_def</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">M</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_pos_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">at</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ev</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">herm</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_Hermitian</span> <span class=\"n\">at</span> <span class=\"n\">herm</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep</span> <span class=\"k\">with</span> <span class=\"n\">vnz</span> <span class=\"n\">vmul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_smul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span>\n  <span class=\"c1\">--vmul: v M.mul_vec v = e • v</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>\n<p>Would it be acceptable to define the magnitude of a vector directly, and use that to reason about it?</p>",
        "id": 280236585,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650991223
    },
    {
        "content": "<p>You wrote <code>has_norm</code> where I said <code>has_norm.norm</code></p>",
        "id": 280236704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650991304
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">v</span><span class=\"bp\">∥</span>\n</code></pre></div>\n<p>should work (<code>∥x∥</code> is notation for <code>has_norm.norm x</code>)</p>",
        "id": 280236795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650991339
    },
    {
        "content": "<p>My bad, I've replaced it now.  There still seems to be something missing, and I can't figure out what that is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.find</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.skip</span>\n<span class=\"c1\">--#find has_norm,</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_Hermitian</span> <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pos_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):=</span> <span class=\"n\">M.is_Hermitian</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenpair</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">v</span><span class=\"bp\">∥</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pos_def_pos_eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.is_pos_def</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">M</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_pos_def</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">at</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ev</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">herm</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_Hermitian</span> <span class=\"n\">at</span> <span class=\"n\">herm</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep</span> <span class=\"k\">with</span> <span class=\"n\">vnz</span> <span class=\"n\">vmul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)):=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_smul</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">mul</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vmul</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span>\n  <span class=\"c1\">--vmul: v M.mul_vec v = e • v</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 280237790,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1650991804
    },
    {
        "content": "<p>Whoops, I got the <code>_ 2</code> arguments backwards</p>",
        "id": 280238493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650992112
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">pi_Lp.equiv</span> <span class=\"mi\">2</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">v</span><span class=\"bp\">∥</span>\n</code></pre></div>",
        "id": 280238502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650992116
    },
    {
        "content": "<p>Thank you, it works now!</p>",
        "id": 280274280,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651008240
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n<span class=\"c1\">--import data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.dmatrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.find</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.skip</span>\n<span class=\"c1\">--#find conj,</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite_failure</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_Hermitian</span> <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pos_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):=</span> <span class=\"n\">M.is_Hermitian</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenpair</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"c1\">--has_norm.norm((pi_Lp.equiv 2 _).symm v)</span>\n<span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"n\">vector_magnitude</span><span class=\"o\">,</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n     <span class=\"kd\">begin</span>\n       <span class=\"n\">rw</span> <span class=\"n\">complex.mul_im</span><span class=\"o\">,</span>\n       <span class=\"n\">simp</span><span class=\"o\">,</span>\n       <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n     <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">complex.mul_re</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>\n<p>I am currently trying to prove that the magnitude of a complex vector is greater than or equal to 0. I have proven that its real part is geq 0, and that its imaginary part is 0, but I am unsure how to proceed.</p>",
        "id": 280353158,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651067809
    },
    {
        "content": "<p>Note that's probably not the definition of <code>vector_magnitude</code> you want (aside from really being the squared magnitude), since it has values in C not R</p>",
        "id": 280357447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651069519
    },
    {
        "content": "<p>I would imagine <code>(dot_product (star v) v).re</code> would be a better choice</p>",
        "id": 280357502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651069551
    },
    {
        "content": "<p>(avoiding pi_Lp is fine for simplicity / pedagogy)</p>",
        "id": 280357569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651069571
    },
    {
        "content": "<p>But to answer your <code>sorry</code>, <code>rw [ge, complex.le_def]</code> makes good progress</p>",
        "id": 280357712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651069647
    },
    {
        "content": "<p>Not that mathlib has almost no lemmas about <code>≥</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/ge\">docs#ge</a>), because it expects you to use <code>≤</code> instead and flip your statements around</p>",
        "id": 280357830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651069693
    },
    {
        "content": "<p>Thank you! I've now proven that the magnitude of a vector is geq 0. (I've left it as a complex number fornow, as turning it into a real caused issues elsewhere in the code. I might be able to do something with coercions eventually). I know it's not much, but it's a start :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n<span class=\"c1\">--import data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.dmatrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.find</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.skip</span>\n<span class=\"c1\">--#find conj,</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite_failure</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_Hermitian</span> <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">ᴴ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pos_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):=</span> <span class=\"n\">M.is_Hermitian</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenpair</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"c1\">--has_norm.norm((pi_Lp.equiv 2 _).symm v)</span>\n<span class=\"o\">(</span><span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"n\">vector_magnitude</span><span class=\"o\">,</span>\n   <span class=\"n\">simp</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span>\n   <span class=\"c1\">--simp,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n     <span class=\"kd\">begin</span>\n       <span class=\"n\">rw</span> <span class=\"n\">complex.mul_im</span><span class=\"o\">,</span>\n       <span class=\"n\">simp</span><span class=\"o\">,</span>\n       <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n     <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">complex.mul_re</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge</span><span class=\"o\">,</span><span class=\"n\">complex.le_def</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 280360485,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651070891
    },
    {
        "content": "<p>Nice! Experimenting with simple-looking questions like this is a great way to learn Lean.</p>",
        "id": 280380083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651079014
    },
    {
        "content": "<p>If you're interested in what the \"black box\" <code>simp</code> tactic is doing, your can change it to <code>squeeze_simp</code> and see the lemmas it's actually applying. Sometimes you can shorten your proof this way.</p>",
        "id": 280380256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651079089
    },
    {
        "content": "<p>Thank you for this advice! I was looking for a way to get rid of some simp's, I'm sure this will help!<br>\nI've been trying to find some equivalence of the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>So that I can use it in a goal of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>So far, something that sometims works is change, but that requires me to copy the whole goal, which sometimes leads to errors.  Is there something more applicable that could be used?</p>",
        "id": 280629560,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651237623
    },
    {
        "content": "<p><code>dsimp only</code> should do it.</p>",
        "id": 280630251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651237968
    },
    {
        "content": "<p>Greetings! Is there any theorem that says I can take the real part in and out of a finset sum? I've assumed that (and the same thing for the imaginary part) to show that one can take the conjugate of a sum or the conjugate of the element of a sum ,but I'm not sure how to start here. I plan to use that result to show some equalities related to the conjugate of products of matrices and vectors. Thank you in advance!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n<span class=\"c1\">--import data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.dmatrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.find</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.skip</span>\n<span class=\"c1\">--#find conj,</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite_failure</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_re</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_im</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_conj</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sum_re</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sum_im</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.conj_im</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_neg_distrib</span><span class=\"o\">,</span> <span class=\"n\">neg_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_im</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 280645835,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651245117
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_re</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.re_lm_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_sum</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280646215,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651245273
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 280646960,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651245563
    },
    {
        "content": "<p>I feel like that should probably be added as a lemma in mathlib, although probably as <code>complex.re_sum</code> stated in reverse</p>",
        "id": 280647017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651245595
    },
    {
        "content": "<p>It came up before <a href=\"#narrow/stream/252551-graph-theory/topic/Spectrum.20of.20a.20graph/near/237243611\">in this thread</a></p>",
        "id": 280647237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651245692
    },
    {
        "content": "<p>I've finally proven a \"real\" theorem! Namely, I've proven that the eigenvalues of a Hermitian matrix are all real. The next thing on my list would be to prove that a positive definite matrix has positive eigenvalues. Thank you for helping me out, I fell like I'm starting to understand Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n<span class=\"c1\">--import data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.dmatrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.trace</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.matrix.nonsingular_inverse</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.eigenspace</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.find</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.skip</span>\n<span class=\"c1\">--#find conj,</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite_failure</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">matrix</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">matrix</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">definite</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">complex_order</span> <span class=\"n\">complex_conjugate</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">matrix_conj</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_Hermitian</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>  <span class=\"n\">matrix_conj</span> <span class=\"n\">M</span><span class=\"bp\">ᵀ</span>  <span class=\"bp\">=</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_pos_def</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">):=</span> <span class=\"n\">M.is_Hermitian</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenpair</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">vector_magnitude</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"c1\">--has_norm.norm((pi_Lp.equiv 2 _).symm v)</span>\n<span class=\"o\">(</span><span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">rw</span> <span class=\"n\">vector_magnitude</span><span class=\"o\">,</span>\n   <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span>\n   <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n     <span class=\"k\">have</span> <span class=\"n\">h_im</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"o\">:=</span>\n     <span class=\"kd\">begin</span>\n       <span class=\"n\">rw</span> <span class=\"n\">complex.mul_im</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">complex.conj_im</span><span class=\"o\">,</span>\n       <span class=\"n\">rw</span> <span class=\"n\">complex.zero_im</span><span class=\"o\">,</span>\n       <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n     <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h_re</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rwa</span> <span class=\"n\">complex.mul_re</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"n\">complex.conj_im</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">complex.zero_re</span><span class=\"o\">,</span>\n      <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge</span><span class=\"o\">,</span><span class=\"n\">complex.le_def</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ge</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector_conj_element</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_re</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">complex.re_lm_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_sum</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_im</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">complex.im_lm_coe</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">linear_map.map_sum</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_conj</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">}:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sum_re</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">sum_im</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.conj_im</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_neg_distrib</span><span class=\"o\">,</span> <span class=\"n\">neg_inj</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_im</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conj_sum</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">((</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"n\">finset.univ.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">))),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_conj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.mul_re</span><span class=\"o\">,</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span> <span class=\"n\">complex.conj_im</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.mul_im</span><span class=\"o\">,</span> <span class=\"n\">neg_add_rev</span><span class=\"o\">,</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span> <span class=\"n\">complex.conj_im</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">},</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">conj_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_conj</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec_mul_conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">vec_mul</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">matrix_conj</span> <span class=\"n\">M</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">vm</span> <span class=\"o\">:</span> <span class=\"n\">vec_mul</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">M.matrix_conj</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vec_mul</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vm</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vec_mul</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_vec_conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul_vec</span> <span class=\"o\">(</span><span class=\"n\">matrix_conj</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">mv</span> <span class=\"o\">:</span> <span class=\"n\">mul_vec</span> <span class=\"o\">(</span><span class=\"n\">matrix_conj</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)),</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_vec</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mv</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_vec</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_conj</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector_conj_conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.conj_conj</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix_conj_conj</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix_conj</span> <span class=\"o\">(</span><span class=\"n\">matrix_conj</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj_conj</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec_smul_conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_conj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">mul_conj</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_vec_trans</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_vec</span> <span class=\"n\">M</span><span class=\"bp\">ᵀ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_vec</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vec_mul</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">matrix.transpose</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec_mul_trans</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"bp\">ᵀ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">M</span><span class=\"bp\">ᵀᵀ.</span><span class=\"n\">mul_vec</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">transpose_transpose</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_vec_trans</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dot_product_mul_vec_vec_mul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">mul_vec</span> <span class=\"n\">M</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">mv</span> <span class=\"o\">:</span> <span class=\"n\">M.mul_vec</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">j</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_vec</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">vm</span> <span class=\"o\">:</span> <span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">ext</span> <span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vec_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mv</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">j</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">vec_mul</span> <span class=\"n\">v</span> <span class=\"n\">M</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">dot_product_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dot_product</span><span class=\"o\">]},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vec_mul</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vector_zero_iff_magnitude_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">v</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">prod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product</span> <span class=\"n\">at</span> <span class=\"n\">prod</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">gez</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">vector_conj</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">complex.le_def</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">complex.mul_re</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.zero_re</span><span class=\"o\">,</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span> <span class=\"n\">complex.conj_im</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n    <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">complex.mul_im</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">complex.conj_im</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">complex.conj_re</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">complex.zero_im</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">important</span> <span class=\"o\">:</span> <span class=\"n\">finset.univ.sum</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">vector_conj</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.univ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">vector_conj</span> <span class=\"n\">v</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_eq_zero_iff_of_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">gez</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ge_iff_le</span> <span class=\"n\">at</span> <span class=\"n\">gez</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gez</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">prod</span> <span class=\"n\">at</span> <span class=\"n\">important</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_univ</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">forall_true_left</span><span class=\"o\">,</span> <span class=\"n\">true_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">important</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">important</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">important</span> <span class=\"k\">with</span> <span class=\"n\">vz</span> <span class=\"n\">vcz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vz</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vector_conj</span> <span class=\"n\">at</span> <span class=\"n\">vcz</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">vcz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">vczc</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">conj</span> <span class=\"n\">vcz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">complex.conj_conj</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">vczc</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">vczc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vczc</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ez</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ez</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_dot_product</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hermitian_real_eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_Hermitian</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ev</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">M</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.im</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenvalue</span> <span class=\"n\">at</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ev</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep</span> <span class=\"k\">with</span> <span class=\"n\">nz</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_Hermitian</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">mul_0</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">mul_1</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vector_magnitude</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">dot_product_smul</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">mul_2</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dot_product_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vector_magnitude</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.mul_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset.sum_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">,</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">mul_3</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_vec</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">ᵀ.</span><span class=\"n\">matrix_conj</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dot_product_mul_vec_vec_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix_trans_conj</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec_mul_trans</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_vec_conj</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec_smul_conj</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vector_magnitude</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">smul_dot_product</span><span class=\"o\">,</span> <span class=\"n\">algebra.id.smul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_1</span> <span class=\"n\">at</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne</span> <span class=\"n\">at</span> <span class=\"n\">nz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">vector_zero_iff_magnitude_zero</span> <span class=\"n\">at</span> <span class=\"n\">nz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dot_product_comm</span> <span class=\"n\">at</span> <span class=\"n\">nz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">at</span> <span class=\"n\">nz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_eq_mul_right_iff</span> <span class=\"n\">at</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">or_false</span> <span class=\"n\">at</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">e_im</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">complex.im</span> <span class=\"n\">mul_3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.conj_im</span> <span class=\"n\">at</span> <span class=\"n\">e_im</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_neg_iff_add_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">e_im</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_self_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">e_im</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">e_im</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">definite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">matrix</span>\n</code></pre></div>",
        "id": 280746102,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651338930
    },
    {
        "content": "<p>Apologies that my message is so long, but there are a lot of lemmas that this theorem depends on, so a mrw would still be quite large</p>",
        "id": 280746154,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651338968
    },
    {
        "content": "<p>(I just created <a href=\"https://github.com/leanprover-community/mathlib/pull/13837\">#13837</a> to get rid of that <code>noncomputable</code>)</p>",
        "id": 280747789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651340901
    },
    {
        "content": "<p>You ought to be able to replace all your <code>vec_conj</code>s with <code>star</code> (and replace <code>rw star</code> with <code>rw pi.star_apply</code>); then for instance lemmas like <code>dot_prod_conj</code> are already in the library, as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.star_dot_product_star\">docs#matrix.star_dot_product_star</a></p>",
        "id": 280747999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651341177
    },
    {
        "content": "<p>Of course, it's already a great learning experience to build everything up from scratch - the next thing to learn is how to find the lemmas and definitions that already exist!</p>",
        "id": 280748074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651341277
    },
    {
        "content": "<p>Thank you for your advice! I will try to do that eventually, but right now I am trying to first prove some theorems, as I've sadly not done as much as I wish I had yet. </p>\n<p>I have a problem that might sound a bit silly. I have (complex) numbers a and b, and I have that a &gt; 0 and a * b &gt; 0. I am struggling to prove that b &gt; 0 without writing an unreasonably large amount of code, and would like to know if there is some theorem I could use. Something like this sounds like it would already be in th library, but I can't find it. Thank you very much!</p>",
        "id": 280793120,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651409809
    },
    {
        "content": "<p>Is it true? &lt; is somewhat of a strange operation on C, if I recall correctly</p>",
        "id": 280793824,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651410604
    },
    {
        "content": "<p>Yes it is, because being comparable to <code>0</code> implies being real. One way to prove it is <code>0 &lt; (a * b) * a⁻¹ = b</code>.</p>",
        "id": 280794001,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651410893
    },
    {
        "content": "<p>I believe it is. Since we have a &gt; 0, we have that a is real. Then since a*b&gt;0, b is also real. Then we have b &gt; 0. I'll try to convert them to real numbers and go from there</p>",
        "id": 280794018,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651410927
    },
    {
        "content": "<p>The way <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> showed that b is real is more elegant</p>",
        "id": 280794075,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651410981
    },
    {
        "content": "<p>I would recommend avoiding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.partial_order\">docs#complex.partial_order</a> for what you're doing, and learning how to make <code>vector_magnitude</code> real instead</p>",
        "id": 280794170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651411114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/Linear.20algebra.20problem/near/280793824\">said</a>:</p>\n<blockquote>\n<p>&lt; is somewhat of a strange operation on C, if I recall correctly</p>\n</blockquote>\n<p>The order on <code>ℂ</code> is unusual, but it is plenty behaved.</p>",
        "id": 280794179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651411131
    },
    {
        "content": "<p>That's good - I have zero intuition for it :)</p>",
        "id": 280794363,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1651411361
    },
    {
        "content": "<p>I've shown that positive definite matrices have positive eigenvalues. I will now write some related results.</p>",
        "id": 280795771,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651413449
    },
    {
        "content": "<p>Hello! I am having some trouble understanding the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/matrix/nondegenerate.html#matrix.nondegenerate\">matrix.nondegenerate</a>. The definition says <code>w ⬝ M ⬝ v ≠ 0</code>, but the code says <code>v ⬝ᵥ M.mul_vec w</code>. I was looking to use this definition to prove that e is an eigenvalue of M iff det(M-eI)=0, but I'm not sure if this form can be used. I apologise if this sounds like a silly question, but I would like some assistance, if possible. Thank you very much!</p>",
        "id": 280950156,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651535791
    },
    {
        "content": "<p>The \"definition\" in the docstring is using math notation not lean notation</p>",
        "id": 280951128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651536604
    },
    {
        "content": "<p><del>It does look like the v and w got swapped though...</del> ah, the binders are just stated confusingly</p>",
        "id": 280951182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651536682
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.nondegenerate.exists_not_ortho_of_ne_zero\">docs#matrix.nondegenerate.exists_not_ortho_of_ne_zero</a> is the statement from the docstring</p>",
        "id": 280951394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651536884
    },
    {
        "content": "<p>Apologies, but I'm not sure I understand. The math notation does not seem to correspond to the actual code, unless I'm understanding it incorrectly.</p>\n<p>I was hoping there would be a version mathing the math notation, as having the <code>M.mul_vec v</code> (where <code>v</code> is in the first forall, allowing me to pick it) would let me pick an eigenvector, and replace <code>M.mul_vec v</code> with <code>e • v</code>. Do you know if there is anything that I could do about this? Thank you for helping me.</p>",
        "id": 280953106,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651538614
    },
    {
        "content": "<p>In documentation my impression is that we allow people to make claims in docstrings such as \"P is defined to be X\" when the truth is that P is actually defined to be Y, and it's a theorem that X=Y. <span class=\"user-mention\" data-user-id=\"450995\">@Radu Zevri</span> the best way to ask questions in this forum is not to try and explain your question mathematically but to post a short <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> containing a <code>sorry</code> and ask for help filling it in. I think that you have a very precise question here so you may as well post it as a Lean \"puzzle\"; that way, somebody passing who knows the matrix part of the library can easily post exactly the proof you want.</p>",
        "id": 281007837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651582319
    },
    {
        "content": "<p>Thank you for letting me know! I've managed to work my way around this, and have managed to prove that e is an eigenvalue of M iff det(M-eI)=0. I believe this  would be an important first step in estabishing the relation between eigenvalues and the characteristic polynomial of a matrix. I have also proven some other useful properties about eigenvalues. Please have a look, and let me know what you think: <a href=\"https://github.com/oxford-1032451/4th-year-project/blob/main/mwe.lean\">https://github.com/oxford-1032451/4th-year-project/blob/main/mwe.lean</a>. Thank you!</p>",
        "id": 281018197,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651586896
    },
    {
        "content": "<p>Here's some thoughts about the first lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- two indents not 3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vector_magnitude</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">],</span> <span class=\"c1\">-- can do multiple rewrites in one line</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- don't ever use ≥, only ≤</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- we have the result already</span>\n    <span class=\"n\">rw</span> <span class=\"n\">star_ordered_ring.nonneg_iff</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Remember: if the result looks natural, it will be in the library already.</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- can do more than one intro at once</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw ← ge, -- no longer needed because we used ≤</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- now do it without the `have`:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vector_magnitude</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_nonneg</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- `apply` is a special case of `refine`</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">star_ordered_ring.nonneg_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- The rewrites are definitional (do you know about definitional equality?) so</span>\n<span class=\"c1\">-- we can skip them:</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero''</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- do the intros on this line</span>\n  <span class=\"n\">rw</span> <span class=\"n\">star_ordered_ring.nonneg_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281022977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651588767
    },
    {
        "content": "<p>What do you think about this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vector_conj_element</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281023307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651588903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Linear.20algebra.20problem/near/281022977\">said</a>:</p>\n<blockquote>\n<p>Here's some thoughts about the first lemma:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- two indents not 3</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vector_magnitude</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">],</span> <span class=\"c1\">-- can do multiple rewrites in one line</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- don't ever use ≥, only ≤</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- we have the result already</span>\n    <span class=\"n\">rw</span> <span class=\"n\">star_ordered_ring.nonneg_iff</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Remember: if the result looks natural, it will be in the library already.</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.sum_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- can do more than one intro at once</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw ← ge, -- no longer needed because we used ≤</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- now do it without the `have`:</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero'</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">vector_magnitude</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_nonneg</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- `apply` is a special case of `refine`</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">star_ordered_ring.nonneg_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- The rewrites are definitional (do you know about definitional equality?) so</span>\n<span class=\"c1\">-- we can skip them:</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">vector_magnitude_geq_zero''</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">vector_magnitude</span> <span class=\"n\">v</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.sum_nonneg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- do the intros on this line</span>\n  <span class=\"n\">rw</span> <span class=\"n\">star_ordered_ring.nonneg_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you for your input! I will use your advice in the future.</p>",
        "id": 281070502,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651608949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Linear.20algebra.20problem/near/281023307\">said</a>:</p>\n<blockquote>\n<p>What do you think about this proof?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vector_conj_element</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">vector_conj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I've removed it.</p>",
        "id": 281070711,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651609034
    },
    {
        "content": "<p>Apologies for not answering sooner, I was writing some other proof and some odd error popped up: \"result contains metavariables\". I've tried using recover and suggest to fix the issue, as I've seen you've solved similar issues by that method in the past, but that leads to other type errors which I cannot even begin to comprehend. The theorem which has this error begins at line 1532 <a href=\"https://github.com/oxford-1032451/4th-year-project/blob/main/mwe.lean\">(link)</a>. Would it be possible to receive some assistance? Thank you very much!</p>",
        "id": 281071517,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651609409
    },
    {
        "content": "<p>The problem is the tactic <code>nth_rewrite</code>  which can leave side goals as metavariables, the solution in this case is to replace it with explicit <code>rw smul_comm t a</code> type calls, which don't suffer from this bug</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">independent_eigenvectors_linear_combination_not_eigenvector</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neq</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">≠</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ep_1</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">e</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ep_2</span> <span class=\"o\">:</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">M</span> <span class=\"n\">r</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">has_eigenvector</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">•</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">•</span><span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">epeu</span> <span class=\"o\">:=</span> <span class=\"n\">ep_1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">eprv</span> <span class=\"o\">:=</span> <span class=\"n\">ep_2</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">anz</span> <span class=\"n\">bnz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne</span> <span class=\"n\">at</span> <span class=\"n\">anz</span> <span class=\"n\">bnz</span> <span class=\"n\">neq</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenvector</span> <span class=\"n\">at</span> <span class=\"n\">ev</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ev</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep</span> <span class=\"k\">with</span> <span class=\"n\">lc</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_vec_add</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_add</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_vec_smul</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">},</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">has_eigenpair</span> <span class=\"n\">at</span> <span class=\"n\">ep_1</span> <span class=\"n\">ep_2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep_1</span> <span class=\"k\">with</span> <span class=\"n\">unz</span> <span class=\"n\">mul_1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ep_2</span> <span class=\"k\">with</span> <span class=\"n\">vnz</span> <span class=\"n\">mul_2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne</span> <span class=\"n\">at</span> <span class=\"n\">unz</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_1</span><span class=\"o\">,</span><span class=\"n\">mul_2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">helper_lemma</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">sub_smul</span><span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">smul_sub</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_add_sub_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_comm</span> <span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_comm</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lin_ind</span> <span class=\"o\">:=</span> <span class=\"n\">eigenvectors_linearly_independent</span> <span class=\"n\">M</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"n\">r</span> <span class=\"n\">epeu</span> <span class=\"n\">eprv</span> <span class=\"n\">neq</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">lin_ind</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)),</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">ent</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">eeqt</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eeqt</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">bnz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">eeqt</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">neq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">helper_lemma</span><span class=\"o\">,</span><span class=\"n\">eeqt</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">vnz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">rnt</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">by_contra</span> <span class=\"n\">reqt</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">reqt</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">anz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">smul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ent</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">unz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">aemtnz</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_ne_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">ne</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">ne</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">brmtnz</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">smul_ne_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">ne</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">ne</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">lin_ind_2</span> <span class=\"o\">:=</span> <span class=\"n\">lin_ind</span> <span class=\"n\">aemtnz</span> <span class=\"n\">brmtnz</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">smul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">lin_ind_2</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne</span> <span class=\"n\">at</span> <span class=\"n\">lin_ind_2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lin_ind_2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">helper_lemma</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281074687,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651610702
    },
    {
        "content": "<p>Thank you very much! I would have never guessed that. Everything works now.</p>",
        "id": 281077110,
        "sender_full_name": "Radu Zevri",
        "timestamp": 1651611797
    },
    {
        "content": "<p>In this case I happened to know that <code>nth_rewrite</code> has this problem, but in future maybe moving the <code>recover</code> call around would help you find which tactic was causing the issue, the first place <code>recover</code> adds something would be the problem. If everything is working as intended <code>recover</code> should never be needed.</p>",
        "id": 281078119,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651612340
    }
]