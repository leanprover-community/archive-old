[
    {
        "content": "<p>I am tring to prove the first direction in the following example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.function</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">default</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">inverse_spec</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inverse</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical.some_spec</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span>  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">left_inverse</span> <span class=\"o\">(</span><span class=\"n\">inverse</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">inj_f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inverse</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I currently have the goal <code>classical.some _ = x</code>. How can I give the underscore a name/identifier or do I need to prove this direction in another way without using <code>simp</code> at all?</p>",
        "id": 241346495,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622693214
    },
    {
        "content": "<p>don't <code>simp [inverse]</code>, never unfold <code>inverse</code> and instead use <code>inverse_spec</code></p>",
        "id": 241346681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622693437
    },
    {
        "content": "<p>try <code>apply inj_f</code></p>",
        "id": 241346740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622693561
    },
    {
        "content": "<p>Thanks! I have solved it.</p>",
        "id": 241346910,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622693862
    },
    {
        "content": "<p>By the way, I am still curious about that once I have the goal <code>classical.some _ = x</code>, is it possible to give the underscore an identifier then or by modifying anything before?</p>",
        "id": 241346977,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622693955
    },
    {
        "content": "<p>The underscore is a proof, which is hidden by lean by default, you can turn on printing of these with <code>set_option pp.proofs true</code> to see what it is.</p>",
        "id": 241347177,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1622694313
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize_proofs\">tactic#generalize_proofs</a></p>",
        "id": 241357039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622705731
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Why does this definition fail?<br>\nerror: failed to synthesize type class instance</p>",
        "id": 242075203,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623249240
    },
    {
        "content": "<p><code>⊢ has_zero (fin ↑n)</code></p>",
        "id": 242075497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623249340
    },
    {
        "content": "<p>This means that the type class system cannot figure out a proof that this type has a zero</p>",
        "id": 242075609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623249365
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 242075763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623249418
    },
    {
        "content": "<p>Which is probably because I don't think <code>fin (n : ℕ+)</code> is used by mathlib anywhere</p>",
        "id": 242075809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623249434
    },
    {
        "content": "<p>We normally use <code>fin n.succ</code> instead</p>",
        "id": 242075870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623249456
    },
    {
        "content": "<p>You could add this instance manually, or if you want to keep things simple you could have <code>n : nat</code> and use n+1 everywhere</p>",
        "id": 242075876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623249458
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pnat.fin_has_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">pnat.pos</span> <span class=\"n\">n</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 242076077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623249526
    },
    {
        "content": "<p>Cool! I am trying to understand the syntax of the first line. If I get any further question, I will post here.</p>",
        "id": 242076340,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623249640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 242076439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623249687
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.suggest</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">pnat.fin_has_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">pnat.pos</span> <span class=\"n\">n</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">silly'</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">b.succ</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a.succ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b.succ</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I fix the errors in the first definition besides changing the use of N+ to N?</p>",
        "id": 242155234,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623294741
    },
    {
        "content": "<p><code>fin.elim</code></p>",
        "id": 242156914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623297153
    },
    {
        "content": "<p>You can also <code>import data.matrix.notation</code> and write <code>![]</code>, if you want something more readable :)</p>",
        "id": 242171148,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623311809
    },
    {
        "content": "<p>Any solution to the mismatch errors? <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 242177503,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1623315747
    },
    {
        "content": "<p>Sorry for missing the question! The missing ingredient is a way to write <code>1</code> as an element of <code>fin (n : pnat)</code>.</p>",
        "id": 242178251,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623316249
    },
    {
        "content": "<p>The reason <code>silly'</code> works is that Lean inserts the coercion <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a>, which maps <code>0 + 1 + 1 + ... + 1 : ℕ</code> to any type with <code>0</code>, <code>1</code> and <code>+</code>.</p>",
        "id": 242178398,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623316337
    },
    {
        "content": "<p>Something like this should make <code>silly</code> work as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pnat.fin_has_one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"n\">has_one</span>  <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">nat.succ</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n'.succ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 242178621,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623316472
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">silly''</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I fix the error here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">has_div.div</span> <span class=\"n\">j</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">j</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">fin</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 244058585,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624786279
    },
    {
        "content": "<p>Instead of <code>/</code> you might want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_prod_fin_equiv\">docs#fin_prod_fin_equiv</a></p>",
        "id": 244059304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624787513
    },
    {
        "content": "<p><code>(fin_prod_fin_equiv.symm j).fst</code> looks like what you want</p>",
        "id": 244059358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624787560
    },
    {
        "content": "<p>I don't quite understand however :( Could you show the corrected code?</p>",
        "id": 244059668,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624788180
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">silly''</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"n\">fin_prod_fin_equiv.symm</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">fin_prod_fin_equiv.symm</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244060000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624788809
    },
    {
        "content": "<p>The problem is that you can't divide a <code>fin (m * p)</code> by a <code>nat</code>: all lean knows how to do is promote the <code>fin (m * p)</code> to a <code>nat</code>, then divide that <code>nat</code> by a <code>nat</code>. But that doesn't work here, because lean wants you to provide a <code>fin m</code></p>",
        "id": 244060054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624788891
    },
    {
        "content": "<p>You can fix this with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">silly''</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">j</span> <span class=\"bp\">/</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>My observation is that rather than filling out the <code>sorry</code> by hand, you can use <code>fin_prod_fin_equiv</code> which already give you the proof</p>",
        "id": 244060125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624789074
    },
    {
        "content": "<p>A term of type <code>fin n</code> is not a natural number, it is a <em>pair</em> consisting of a natural number and a proof it's less than n. You can't divide a pair by a natural (or at least you can't until you explain to lean exactly what you mean by this).</p>",
        "id": 244063032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624793951
    },
    {
        "content": "<p><code>instance mine [ring α] : has_scalar α α := sorry</code><br>\nHow can I close the goal by using the mul as smul?</p>",
        "id": 244126736,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624876993
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">mine</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p>works for me, which means that Lean is already assuming that rings have smuls and they're (no doubt) equal to muls</p>",
        "id": 244127391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624877482
    },
    {
        "content": "<p>If the instance can already be found (in term mode by <code>infer_instance</code> and in tactic mode by <code>apply_instance</code>) then you don't need to start putting other instances in yourself (indeed, this is in general a bad idea)</p>",
        "id": 244127496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624877531
    },
    {
        "content": "<p>Right, Kevin. This has already been defined. I got an error if using<br>\n<code>instance silly [ring α] : has_scalar α α := ring.mul </code>. I am not sure how to fix it if not using <code>infer_instance</code>.</p>",
        "id": 244150924,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624889825
    },
    {
        "content": "<p>Is it possible to know what <code>infer_instance</code> is using or to find the already defined instance?<br>\nI am not sure why <code>ring.mul</code> won't work.</p>",
        "id": 244154015,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624890947
    },
    {
        "content": "<p>If you use <code>by apply_instance</code> instead, then you can add <code>by show_term{apply_instance}</code> and you should see the proof that Lean finds.</p>",
        "id": 244154787,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624891244
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_scalar\">docs#has_scalar</a> is a structure (with only one field), so you can provide <code>ring.mul</code> as that field but you have to use the right syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ring.mul</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 244159027,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1624892932
    },
    {
        "content": "<p>Right! I misread the defn for <code>has_scalar</code></p>",
        "id": 244159356,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1624893065
    },
    {
        "content": "<p>In this case it's finding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_scalar\">docs#has_mul.to_has_scalar</a></p>",
        "id": 244188805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624906032
    }
]