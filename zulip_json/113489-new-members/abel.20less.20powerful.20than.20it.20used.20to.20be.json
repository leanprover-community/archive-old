[
    {
        "content": "<p>I used (e.g. with lean 3.28.0 and mathlib commit <code>2ad4a4ce6afc3008272627320370f74cd2020c7f</code>) to be able to do things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and lean would be happy (goals accomplished). However, I recently upgraded to lean 3.31 and mathlib commit <code>52e6e4cfd8778c6d783c297b361a44e2d9ceca72</code> and now <code>abel</code> is unable to prove the goal. With exactly the same code it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span>\n<span class=\"n\">abcdef</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Is this a regression? Is there some other tactic I should be using now?</p>\n<p>Hoping that I don't have to now manually rearrange the brackets and terms as that would be rather tedious!</p>\n<p>Christopher</p>",
        "id": 247430140,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1627458051
    },
    {
        "content": "<p>Hrm, interesting. Could you try <code>simp only [two_smul]</code> before <code>abel</code>?</p>",
        "id": 247434566,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1627461538
    },
    {
        "content": "<p>This looks like a regression, perhaps its related to <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a>?<br>\nNote that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works as intended.</p>",
        "id": 247445688,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1627470675
    },
    {
        "content": "<p>Thanks, this works by rewriting <code>2•b</code> as <code>b+b</code> before invoking the <code>abel</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">two_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But what if I had an equation with <code>3•b</code> or any larger natural number co-efficient? Is there a way to convert all <code>n:ℕ</code> in an equation to <code>n:ℤ</code>?</p>",
        "id": 247474937,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1627486413
    },
    {
        "content": "<p><code>lift n to ℤ</code>?</p>",
        "id": 247477216,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627487501
    },
    {
        "content": "<p>nope, that doesn't work :(</p>",
        "id": 247477356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627487565
    },
    {
        "content": "<p>&lt;- <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gsmul_coe_nat\">docs#gsmul_coe_nat</a></p>",
        "id": 247486468,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627491765
    },
    {
        "content": "<p>How would I use <code>gsmul_coe_nat</code>? I tried:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gsmul_coe_nat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">gsmul_coe_nat</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">gsmul_coe_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But <code>abel</code> still couldn't prove the equation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span>\n<span class=\"n\">abcdef</span><span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 247489832,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1627493285
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gsmul_coe_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247489998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627493371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/abel.20less.20powerful.20than.20it.20used.20to.20be/near/247489998\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">-</span><span class=\"n\">e</span> <span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">d</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">gsmul_coe_nat</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks - that works! I still think it was better when <code>abel</code> did it for me though :)</p>",
        "id": 247490232,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1627493464
    },
    {
        "content": "<p>Did you open an issue on the mathlib github and link to this thread?</p>",
        "id": 247490300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627493499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> No - but happy to do that if this is a bug rather than new intended behaviour.</p>",
        "id": 247490591,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1627493637
    },
    {
        "content": "<p>GitHub Issue: <a href=\"https://github.com/leanprover-community/mathlib/issues/8456\">https://github.com/leanprover-community/mathlib/issues/8456</a> Thanks for your help.</p>",
        "id": 247496288,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1627496114
    },
    {
        "content": "<p>I've been doing some exploratory debugging to try to identify the source of this issue (using the mwe proposed by <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> in <a href=\"https://github.com/leanprover-community/mathlib/issues/8456\">issue 8456</a>). It seems to me that the problem occurs in the pattern match of the <code>eval</code> function in <code>abel</code> (~lines 290 and 291 in abel.lean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"n\">add_monoid.has_scalar_nat</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div>\n<p>As noted in Rob's mwe there is a confusion of <code>nat</code> and <code>int</code> types, in particular in <code>smul</code> operations on an <code>add_comm_group</code>: If the scalars are left untyped then <code>abel</code> pattern matches on the first line of code above and recognizes them as <code>nat</code>s,  rather than correctly matching on the second line above and matching as <code>int</code>s. This is despite the mwe being correctly identified as a group via the <code>context</code> structure.</p>\n<p>I <em>think</em> what might be required here is an alternative to  the <code>sub_neg_monoid.has_scalar_int</code> pattern match, but I'm not sure how best to proceed from there. I tried the very naive approach of adding <code>has_scalar_int</code> directly to <code>add_comm_group</code> and replacing code in <code>abel</code> as appropriate, but didn't get too far. </p>\n<p>I understand some of the more recent changes to <code>abel</code> were in part implemented to handle scalar multiplication similarly across both <code>nat</code> and <code>int</code> (or across groups and monoids), but I don't quite understand how wide ranging these changes might have been, nor how much dependency their might be elsewhere on typeclass instances like <code>sub_neg_monoid.has_scalar_int</code> (I'm assuming more than just <code>abel</code>). That said, does modifying the pattern match with a different typeclass instance seem like the right approach here? Or is there a better way to proceed?</p>\n<p>Also, fyi: I'm not necessarily assuming I'll get close enough here to submit a PR for a fix - I expect this might be a bigger problem than I am currently equipped to solve - but it's a helpful exercise for me to better understand metaprogramming.</p>",
        "id": 263184381,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638295496
    },
    {
        "content": "<p>At a glance I'm not 100% sure that those instance pattern matches are needed. Replacing them with <code>_</code> doesn't break any tests, nor does it fix the mwe.</p>",
        "id": 263186752,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638296584
    },
    {
        "content": "<p>Could you elaborate on why you think this might be where the issue is? I don't want to say it isn't, but it also doesn't jump out as the problem to me</p>",
        "id": 263186834,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638296629
    },
    {
        "content": "<p>Ah... interesting. I did try replacing the <code>nat</code> and <code>int</code> in the two patterns with <code>_</code>, but it did introduce other breakages. I hadn't gone so far as to replace the <code>has_scalar_*</code>in both patterns with <code>_</code>. I see what you mean tho. I've now replaced:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"n\">add_monoid.has_scalar_nat</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div>\n<p>and the result is the same.</p>",
        "id": 263189510,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638297777
    },
    {
        "content": "<p>This is a sneaky bug, in that I can't tell if it's something totally superficial or if it goes deep down to <code>abel</code>'s representation of expressions</p>",
        "id": 263191516,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638298668
    },
    {
        "content": "<p>If you could even identify what part of the changes <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> broke the tactic it'd be helpful for debugging</p>",
        "id": 263191640,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638298705
    },
    {
        "content": "<p>Interestingly, I don't think any of these patterns are needed either (at least, I've had them commented out, and haven't seen anything else break...)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">add_monoid.nsmul</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">c.is_group</span> <span class=\"k\">then</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int.of_nat</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">e₁</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span> <span class=\"n\">c.iapp</span> <span class=\"bp\">``</span><span class=\"n\">smul</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">],</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">c.iapp</span> <span class=\"bp\">``</span><span class=\"n\">unfold_smul</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.zsmul</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">guardb</span> <span class=\"n\">c.is_group</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span> <span class=\"n\">c.iapp</span> <span class=\"bp\">``</span><span class=\"n\">smul</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">],</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">c.app</span> <span class=\"bp\">``</span><span class=\"n\">unfold_zsmul</span> <span class=\"n\">c.inst</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">smulg</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div>",
        "id": 263191714,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638298740
    },
    {
        "content": "<p>The abel test suite is tiny and I'm not sure it's comprehensive</p>",
        "id": 263191832,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638298795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/abel.20less.20powerful.20than.20it.20used.20to.20be/near/263191516\">said</a>:</p>\n<blockquote>\n<p>This is a sneaky bug, in that I can't tell if it's something totally superficial or if it goes deep down to <code>abel</code>'s representation of expressions</p>\n</blockquote>\n<p>Ya, that's what I wondered, since it seemed like that match to <code>has_scalar_smul nat</code> was happening before anything else really occurred in <code>abel</code>. It almost seemed more like something to do with an internal representation...</p>",
        "id": 263192032,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638298837
    },
    {
        "content": "<p>And I'm not sure my rationale holds up now with the added <code>_</code>... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263192104,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638298865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113489-new-members/topic/abel.20less.20powerful.20than.20it.20used.20to.20be/near/263191640\">said</a>:</p>\n<blockquote>\n<p>If you could even identify what part of the changes <a href=\"https://github.com/leanprover-community/mathlib/issues/7255\">#7255</a> broke the tactic it'd be helpful for debugging</p>\n</blockquote>\n<p>Ok. Good idea. I'll take a closer look to see if I can spot the key issue.</p>",
        "id": 263192202,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638298904
    },
    {
        "content": "<p>Actually, it occurs to me that the pattern matches below are for backwards compatibility for any proofs that previously used <code>smul</code>, <code>smulg</code>, <code>nsmul</code> or <code>zsmul</code>. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"378478\">Ashley Blacquiere</span> <a href=\"#narrow/stream/113489-new-members/topic/abel.20less.20powerful.20than.20it.20used.20to.20be/near/263191714\">said</a>:</p>\n<blockquote>\n<p>Interestingly, I don't think any of these patterns are needed either (at least, I've had them commented out, and haven't seen anything else break...)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">add_monoid.nsmul</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">c.is_group</span> <span class=\"k\">then</span> <span class=\"n\">mk_app</span> <span class=\"bp\">``</span><span class=\"n\">int.of_nat</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">e₁</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span> <span class=\"n\">c.iapp</span> <span class=\"bp\">``</span><span class=\"n\">smul</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">],</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">c.iapp</span> <span class=\"bp\">``</span><span class=\"n\">unfold_smul</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">sub_neg_monoid.zsmul</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">guardb</span> <span class=\"n\">c.is_group</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">eval</span> <span class=\"bp\">$</span> <span class=\"n\">c.iapp</span> <span class=\"bp\">``</span><span class=\"n\">smul</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">],</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">c.app</span> <span class=\"bp\">``</span><span class=\"n\">unfold_zsmul</span> <span class=\"n\">c.inst</span> <span class=\"o\">[</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span>\n\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">smulg</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 263519095,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638490658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378478\">@Ashley Blacquiere</span> not backward compatibility, just plain coverage of the language. Who knows what's in the goal the user gives us; we should support anything that makes sense, otherwise people will not undersand why <code>1 * 2 = 1</code> solves fine but <code>smul 1 2 = 1</code> doesn't even though e.g. <code>rfl</code> works fine</p>",
        "id": 263530596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638500551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378478\">Ashley Blacquiere</span> <a href=\"#narrow/stream/113489-new-members/topic/abel.20less.20powerful.20than.20it.20used.20to.20be/near/263189510\">said</a>:</p>\n<blockquote>\n<p>Ah... interesting. I did try replacing the <code>nat</code> and <code>int</code> in the two patterns with <code>_</code>, but it did introduce other breakages. I hadn't gone so far as to replace the <code>has_scalar_*</code>in both patterns with <code>_</code>. I see what you mean tho. I've now replaced:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">nat</span> <span class=\"n\">_</span> <span class=\"n\">add_monoid.has_scalar_nat</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"n\">sub_neg_monoid.has_scalar_int</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div>\n<p>with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_scalar.smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">%%</span><span class=\"n\">e₁</span> <span class=\"bp\">%%</span><span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">eval_smul'</span> <span class=\"n\">c</span> <span class=\"n\">eval</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n</code></pre></div>\n<p>and the result is the same.</p>\n</blockquote>\n<p>Without the instance pattern match, the program is slightly unsound. That check is needed to ensure that we are applying the right lemma for the situation, because you can define crazy instances that do different things. Removing the check means that we will always optimistically apply the lemma and leave it to the kernel to notice if they aren't defeq, which works alright but has terrible UX when it goes wrong.</p>",
        "id": 263530874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638500821
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/10537\">#10537</a></p>",
        "id": 263532156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638502578
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10587\">#10587</a></p>",
        "id": 263536805,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638508329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I spent a lot of time trying to follow through <code>abel</code>s logic the last week or so, but based on your fix, I was pretty off-target in terms of where the core issue was... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  The high level explanation that you provided above makes sense, but the details are tricky to follow - especially that last <code>else do</code> block that you added to <code>eval_smul'</code>. I'd really appreciate reading some more detailed documentation on the issue and fix, if you have the time.</p>",
        "id": 263610960,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638552359
    },
    {
        "content": "<p>The attempted fixes, removing and rearranging branches, was never going to work because that particular combination was simply not supported - there was a missing lemma</p>",
        "id": 263611157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638552443
    },
    {
        "content": "<p><code>abel</code> uses <code>smulg</code> exclusively for groups, and <code>smul</code> exclusively for monoids, but it's not like one is a specialization of the other, and groups are monoids so it is type correct to use <code>smul</code> on groups</p>",
        "id": 263611363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638552516
    },
    {
        "content": "<p>so that means that if you have a <code>smul</code> on a group abel has no idea what to do about it because none of the lemmas apply to that situation</p>",
        "id": 263611427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638552553
    },
    {
        "content": "<p>For the fix, we want to avoid the type error that results from assuming that <code>smul</code> usage exactly matches <code>c.is_group</code>, so we make that two separate booleans. There are four combinations for those bools and two of them (<code>is_smulg = c.is_group = tt</code> and <code>is_smulg = c.is_group = ff</code>) are already handled. The combination <code>is_smulg = tt, c.is_group = ff</code> is impossible because <code>smulg</code> depends on a group parameter (not strictly true since you can have a non-instance group, but we assert it anyway), and in the <code>is_smulg = ff, c.is_group = tt</code> case (that's the <code>else do</code> block), we convert <code>smul a b</code> to <code>smulg a b</code> while descending into it to normalize the pieces. This requires casting <code>a</code> from nat to int, which uses some of <code>norm_num</code>'s machinery, copied from <code>eval_cast</code>.</p>",
        "id": 263612134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638552860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you could note this in a comment somewhere it would be great!</p>",
        "id": 263612798,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638553183
    },
    {
        "content": "<p>Thanks for that, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>!</p>",
        "id": 263614145,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1638553789
    }
]