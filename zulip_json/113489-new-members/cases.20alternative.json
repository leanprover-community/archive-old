[
    {
        "content": "<p>Hi, using <code>cases</code> on an hypothesis sometimes gives me really huge terms in the resulting hypotheses. It's happened if the hypothesis contains recursive definitions, and I fixed it in one case by marking the definition as <code>irreducible</code>.<br>\nHowever, now I get the same problem for the definition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Fin</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>as soon as I call cases on something like <code>x: Fin (n+1)</code>. In Coq, this goes through, so I guess it has something to do with definitions being compiled to recursors? Is there another way to use cases without unfolding the definition/getting this huge expression? (Marking Fin as irreducible didn't work because I want to match on it in other proofs)</p>",
        "id": 152139969,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1545168776
    },
    {
        "content": "<p>Definitions made with the equation compiler in Lean can sometimes come out quite unwieldy. Does it make any difference if you just apply the recursor directly?</p>",
        "id": 152143374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545171916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Fin&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">Fn</span><span class=\"o\">,</span> <span class=\"n\">option</span> <span class=\"n\">Fn</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 152143471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545172006
    },
    {
        "content": "<p>A definition like this one in <code>number_theory/dioph</code> is probably easier to use, and gives a similar induction principle</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">fin2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">fz</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fs</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 152143723,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1545172244
    },
    {
        "content": "<p>That helped, thanks!</p>",
        "id": 152145711,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1545174354
    }
]