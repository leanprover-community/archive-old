[
    {
        "content": "<p>I have defined the following function <code>swap</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">swap</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Because of propositions-as-types, I thought this would, at the same time, be a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>∧</mo><mi>B</mi><mspace width=\"0.277778em\"></mspace><mo>⟹</mo><mspace width=\"0.277778em\"></mspace><mi>B</mi><mo>∧</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A\\land B\\implies B\\land A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mbin\">∧</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mrel\"><span class=\"mspace thickspace\"></span><span class=\"mrel\">⟹</span></span><span class=\"mord mathit\"><span class=\"mspace thickspace\"></span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span><span class=\"mbin\">∧</span><span class=\"mord mathit\">A</span></span></span></span>.<br>\nBut apparently I can't use the function <code>swap</code> as a proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">def</span> <span class=\"n\">swap_thm</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"bp\">∧</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>So how can I make this work?<br>\nOr do I have to define proofs and functions separately, even if they are essentially the same?</p>",
        "id": 160435423,
        "sender_full_name": "Thomas Scholz",
        "timestamp": 1552256629
    },
    {
        "content": "<p>You should use <code>Sort</code> instead of <code>Type</code> if you want it to apply in both contexts. But this still won't work, because <code>prod</code> is not the same constant as <code>and</code>, although they have parallel definitions.</p>",
        "id": 160435720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552257016
    },
    {
        "content": "<p>In lean they are separate because if <code>prod</code> had the type <code>Sort u -&gt; Sort v -&gt; Sort (max u v)</code> (so that it could also work on proofs) then the generated recursor would be weaker. (Actually maybe not in this case, I'm not positive; <code>and</code> is a subsingleton eliminator which complicates things.)</p>",
        "id": 160435813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552257130
    },
    {
        "content": "<p>You can copy your definition of the swap function and get a proof of the theorem :-)</p>",
        "id": 160435898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552257272
    },
    {
        "content": "<p>Actually maybe even that won't work</p>",
        "id": 160435902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552257293
    },
    {
        "content": "<p>you would have to use the angle brackets, but then I think it would work</p>",
        "id": 160435914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552257310
    },
    {
        "content": "<p>You need \\&lt; pointy brackets</p>",
        "id": 160435917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552257316
    },
    {
        "content": "<p>The constructor for prod has a different notation</p>",
        "id": 160435935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552257354
    },
    {
        "content": "<p>However maybe pointy brackets work for the swap proof?</p>",
        "id": 160435983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552257369
    },
    {
        "content": "<p>Thank you all!</p>",
        "id": 160526222,
        "sender_full_name": "Thomas Scholz",
        "timestamp": 1552345467
    }
]