[
    {
        "content": "<p>I'm currently trying to prove a lemma about a recursively-defined function, and I have reduced the goal to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">⟨</span><span class=\"n\">_.some</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">_.some</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Both sides of these really should be equal by definition, but clearly something has gone wrong because <code>refl</code> is not working. Is there a way to make Lean display the contents of the wildcards (in some readable fashion; I tried <code>set_option pp.all</code> and it replaced them with about 100 lines of stuff so ideally I don't have to do that) so I can see what's going on?</p>\n<p>If you would like more information I can make a minimal working example as to the specifics.</p>",
        "id": 313705898,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1670083106
    },
    {
        "content": "<p>Is this Lean 3? You could see if <code>congr'</code> makes any progress.</p>",
        "id": 313707519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670083937
    },
    {
        "content": "<p>Those <code>_</code>s are proof of something, and the 100 lines of stuff is the proof that you used for them</p>",
        "id": 313708570,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670084507
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing that goals that print in a way that looks like <code>rfl</code> can be false:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- set_option pp.proofs true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">classical.some</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">classical.some</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- this is false</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313709007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670084746
    },
    {
        "content": "<p><code>set_option pp.implicit true</code> is probably helpful for your example</p>",
        "id": 313709129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670084812
    },
    {
        "content": "<p>This is Lean 3, and <code>congr'</code> is not making any progress.<br>\n<code>set_option pp.implicit true</code> displays a bit more information, but still wildcards out the most important part.<br>\nAs for proofs of this form potentially being false, I definitely can see how that may happen, although it doesn't seem like it should be the case here. I attached a minimal working example; do you have any idea why this might not be working?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.ordinal.topology</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.cofinality</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">set.is_subset_of</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.Iio</span> <span class=\"n\">κ</span>\n<span class=\"kd\">def</span> <span class=\"n\">set.is_closed</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">A.nonempty</span> <span class=\"bp\">→</span> <span class=\"n\">Sup</span> <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">Sup</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">set.is_unbounded</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">γ</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">γ</span>\n<span class=\"kd\">def</span> <span class=\"n\">set.is_club</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">S.is_subset_of</span> <span class=\"n\">κ</span> <span class=\"bp\">∧</span> <span class=\"n\">S.is_closed</span> <span class=\"n\">κ</span> <span class=\"bp\">∧</span> <span class=\"n\">S.is_unbounded</span> <span class=\"n\">κ</span>\n\n<span class=\"c1\">-- Useful intermediate sequence</span>\n<span class=\"kd\">def</span> <span class=\"n\">D_seq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">α</span>\n\n<span class=\"c1\">-- Existence lemma for unbounded sequence</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tail_D_seq_nonempty</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">hclub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">set.is_club</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">βltκ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γltκ</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">κreg</span> <span class=\"o\">:</span> <span class=\"n\">κ.cof</span> <span class=\"bp\">=</span> <span class=\"n\">κ.card</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">κunctbl</span> <span class=\"o\">:</span> <span class=\"n\">κ.card</span> <span class=\"bp\">&gt;</span> <span class=\"n\">cardinal.aleph_0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">D_seq</span> <span class=\"n\">f</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"n\">β</span> <span class=\"bp\">∧</span> <span class=\"n\">δ</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- probably not relevant; omitted for brevity</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Construct the sequence used for proof of unboundedness</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unbdd_seq</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">hclub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">set.is_club</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">βltκ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">κreg</span> <span class=\"o\">:</span> <span class=\"n\">κ.cof</span> <span class=\"bp\">=</span> <span class=\"n\">κ.card</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">κunctbl</span> <span class=\"o\">:</span> <span class=\"n\">κ.card</span> <span class=\"bp\">&gt;</span> <span class=\"n\">cardinal.aleph_0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">βltκ</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">existence</span> <span class=\"o\">:=</span> <span class=\"n\">tail_D_seq_nonempty</span> <span class=\"n\">f</span> <span class=\"n\">hclub</span> <span class=\"o\">(</span><span class=\"n\">unbdd_seq</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"o\">(</span><span class=\"n\">unbdd_seq</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"n\">κreg</span> <span class=\"n\">κunctbl</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">existence.some</span> <span class=\"o\">,</span> <span class=\"n\">existence.some_spec.right.right</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Convenience lemma to actually use the definition of the sequence</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">unbdd_seq_aux</span> <span class=\"o\">{</span><span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">hclub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"n\">set.is_club</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">κ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">βltκ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">κreg</span> <span class=\"o\">:</span> <span class=\"n\">κ.cof</span> <span class=\"bp\">=</span> <span class=\"n\">κ.card</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">κunctbl</span> <span class=\"o\">:</span> <span class=\"n\">κ.card</span> <span class=\"bp\">&gt;</span> <span class=\"n\">cardinal.aleph_0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">unbdd_seq</span> <span class=\"n\">f</span> <span class=\"n\">hclub</span> <span class=\"n\">βltκ</span> <span class=\"n\">κreg</span> <span class=\"n\">κunctbl</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"k\">let</span> <span class=\"n\">existence</span> <span class=\"o\">:=</span> <span class=\"n\">tail_D_seq_nonempty</span> <span class=\"n\">f</span> <span class=\"n\">hclub</span>\n<span class=\"o\">(</span><span class=\"n\">unbdd_seq</span> <span class=\"n\">f</span> <span class=\"n\">hclub</span> <span class=\"n\">βltκ</span> <span class=\"n\">κreg</span> <span class=\"n\">κunctbl</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span>\n<span class=\"o\">(</span><span class=\"n\">unbdd_seq</span> <span class=\"n\">f</span> <span class=\"n\">hclub</span> <span class=\"n\">βltκ</span> <span class=\"n\">κreg</span> <span class=\"n\">κunctbl</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"n\">κreg</span> <span class=\"n\">κunctbl</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">existence.some</span> <span class=\"o\">,</span> <span class=\"n\">existence.some_spec.right.right</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">unbdd_seq</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313709700,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1670085095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">unbdd_seq</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is a proof, for what it's worth.</p>",
        "id": 313710333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670085467
    },
    {
        "content": "<p><code>set_option pp.proofs true</code> is how you can get it to pretty print the proofs</p>",
        "id": 313710947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670085783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , your proof works in mwe, but bizarrely if I put it into my full project, it stops working with the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unfold</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">lift</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">equational</span> <span class=\"n\">lemmas</span> <span class=\"n\">nor</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">projection</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">κ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span>\n<span class=\"n\">hclub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_club</span> <span class=\"n\">κ</span><span class=\"o\">,</span>\n<span class=\"n\">βltκ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">κ</span><span class=\"o\">,</span>\n<span class=\"n\">κreg</span> <span class=\"o\">:</span> <span class=\"n\">κ.cof</span> <span class=\"bp\">=</span> <span class=\"n\">κ.card</span><span class=\"o\">,</span>\n<span class=\"n\">κunctbl</span> <span class=\"o\">:</span> <span class=\"n\">κ.card</span> <span class=\"bp\">&gt;</span> <span class=\"n\">cardinal.aleph_0</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"o\">⟨</span><span class=\"n\">_.some</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">⟨</span><span class=\"n\">_.some</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Any idea what might cause this? It feels like the additional information for how other things are implemented shouldn't affect things on this level, but evidently it does somehow.</p>",
        "id": 313711628,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1670086237
    },
    {
        "content": "<p>Something that's really strange is that for whatever reason you can't rewrite with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coe_mk\">docs#subtype.coe_mk</a></p>",
        "id": 313711876,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670086422
    },
    {
        "content": "<p>yeah my proof is pretty weird; it's vanishingly rare for <code>unfold_coes</code> to finish a proof. <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> note that <code>ext, dsimp</code> will remove one \\u but not the other one ?!</p>",
        "id": 313712774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670086962
    },
    {
        "content": "<p>Just found another proof that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">unbdd_seq</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313712812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670086992
    },
    {
        "content": "<p>That <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gt_iff_lt\">docs#gt_iff_lt</a> is odd -- I tried switching every <code>&gt;</code> in the MWE to <code>&lt;</code>, but then the <code>simp</code> fails. Maybe I missed something or flipped them wrong...</p>",
        "id": 313712925,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670087057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yeah, I even tried <code>refine eq.trans (subtype.coe_mk _ _) _</code>, to get rid of that <code>\\u</code>, but something about unification is getting confused here</p>",
        "id": 313713019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1670087117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> , your proof does work in my main project, so thank you so much for the help. As for all of the other weirdness going on, I have absolutely no idea.</p>",
        "id": 313714129,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1670087828
    }
]