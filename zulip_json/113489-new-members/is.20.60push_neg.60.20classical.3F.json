[
    {
        "content": "<p>Does <code>push_neg</code> tactic implicitly use the <code>classical</code> library? e.g. intuitionistically we can't prove <code>\\exists x, P x</code> from <code>neg \\forall x, \\neg P x</code>, but this is what <code>push_neg</code> seems to do, is that right?</p>",
        "id": 205048285,
        "sender_full_name": "Chris M",
        "timestamp": 1595763111
    },
    {
        "content": "<p>yes</p>",
        "id": 205048343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595763194
    },
    {
        "content": "<p>Of course it's classical! It was written for mathematics teaching.</p>",
        "id": 205049254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595764775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20.60push_neg.60.20classical.3F/near/205049254\">said</a>:</p>\n<blockquote>\n<p>Of course it's classical! It was written for mathematics teaching.</p>\n</blockquote>\n<p>Now I'm wondering, how many of mathlib's tactics come from this course ?</p>",
        "id": 205049577,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595765246
    },
    {
        "content": "<p>Not so many. I think <code>choose</code>, <code>contrapose</code>, <code>push_neg</code>, <code>apply_fun</code> and <code>rename_var</code> are the only ones.</p>",
        "id": 205050326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595766575
    },
    {
        "content": "<p><code>contrapose</code> and <code>push_neg</code> allow mathematicians to do classical logic without having to learn <code>logic.basic</code> so they are really useful in practice, and <code>choose</code> allows them to apply the axiom of choice without having to deal with <code>classical.some</code>, so we can see a theme here: they're making an interface which mathematicians are familiar with. It was surprising how many mathematicians come here asking for <code>apply_fun</code>. Of course you can do it in Lean, but mathematicians can never work out why the <code>apply</code> command doesn't do it, because that's their mental model.</p>",
        "id": 205051563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595768853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284606\">@Chris M</span> you can check yourself that the axioms are being used:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">propext</span>\n<span class=\"cm\">classical.choice</span>\n<span class=\"cm\">quot.sound</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 205051640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595768981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20.60push_neg.60.20classical.3F/near/205051563\">said</a>:</p>\n<blockquote>\n<p>It was surprising how many mathematicians come here asking for <code>apply_fun</code>. Of course you can do it in Lean, but mathematicians can never work out why the <code>apply</code> command doesn't do it, because that's their mental model.</p>\n</blockquote>\n<p>Fun fact : in the exam, Patrick forgot to import <code>apply_fun</code>,  and most people were stuck on an easy exercise about injectivity/surjectivity because they didn't know how to get <code>x = y -&gt; f x = f y</code> without using it</p>",
        "id": 205051887,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595769411
    },
    {
        "content": "<p>In my defense, everything was doable without <code>apply_fun</code> or <code>congr_whatever</code>. But one of the main difficulties of teaching using Lean is that you never know which twisted path the students will try to explore (and get stuck because you didn't explain or didn't import something needed for this twisted path).</p>",
        "id": 205052239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595769963
    },
    {
        "content": "<p>Of course <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 205052415,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595770223
    },
    {
        "content": "<p>Is there a tutorial that introduces <code>apply_fun</code>? <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">#mil</a> doesn't seem to (based on a search through it).</p>",
        "id": 205052431,
        "sender_full_name": "Chris M",
        "timestamp": 1595770268
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun\">https://leanprover-community.github.io/mathlib_docs/tactics.html#apply_fun</a></p>",
        "id": 205052645,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1595770618
    },
    {
        "content": "<p>Yes I have seen it, I was just wondering if there is a more extensive tutorial showing when people use it.</p>",
        "id": 205052669,
        "sender_full_name": "Chris M",
        "timestamp": 1595770678
    }
]