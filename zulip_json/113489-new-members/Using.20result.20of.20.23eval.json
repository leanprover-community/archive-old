[
    {
        "content": "<p>[Lean3]</p>\n<p>Hi! Is it possible to obtain the result of the evaluation and use it further? What would be the best way to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 270071720,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1643650610
    },
    {
        "content": "<p><code>def x := add 1 2</code> should work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 270071872,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643650668
    },
    {
        "content": "<p>(checking)</p>",
        "id": 270071883,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643650675
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">x</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 270072049,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643650723
    },
    {
        "content": "<p>Yes, that works. But I want to eval it in between and then use it. Maybe I did not take a great example for this. But I would like to evaluate it before the assignment to x and use the result. Although I'm not sure if  lean3 can do this.</p>",
        "id": 270072124,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1643650750
    },
    {
        "content": "<p>I was looking for something general to obtain the result of instructions like #reduce, #eval, #check.</p>",
        "id": 270072226,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1643650786
    },
    {
        "content": "<p>There isn't a packaged tactic for it but you can write one</p>",
        "id": 270072399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643650832
    },
    {
        "content": "<p>you can use <code>tactic.eval_expr</code> to evaluate the expression and then <code>reflect e</code> to turn it back into something that can be fed to <code>exact</code></p>",
        "id": 270072482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643650865
    },
    {
        "content": "<p>That does <code>#eval</code>. For <code>#reduce</code> the nearest approximation is <code>whnf e</code> on the input</p>",
        "id": 270072605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643650915
    },
    {
        "content": "<p>For <code>#check</code> there is nothing to be done, that's just <code>exact</code></p>",
        "id": 270072691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643650935
    },
    {
        "content": "<p>Right. I will look at this. Thanks a lot! I love how the community responds so fast &lt;3</p>",
        "id": 270072856,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1643650987
    },
    {
        "content": "<p>Out of curiosity, what would be the type of <code>#check add</code> (for the application you're interested)?</p>",
        "id": 270073094,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643651059
    },
    {
        "content": "<p><code>Type</code> maybe?</p>",
        "id": 270073598,
        "sender_full_name": "Kunwar Shaanjeet Singh Grover",
        "timestamp": 1643651255
    },
    {
        "content": "<p>I see. Just to make sure you're aware, you won't be able to prove results about your definitions if they use the <code>meta</code> keyword:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">my_meta_def</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_meta_def</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- invalid definition, it uses untrusted declaration 'my_meta_def'</span>\n</code></pre></div>",
        "id": 270074699,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643651645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20result.20of.20.23eval/near/270071872\">said</a>:</p>\n<blockquote>\n<p><code>def x := add 1 2</code> should work <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Wait, now I'm confused. Isn't this already evaluating <code>add 1 2</code> before assigning it to <code>x</code>? Or is Lean lazy?</p>",
        "id": 270085770,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643655590
    },
    {
        "content": "<blockquote>\n<p>Wait, now I'm confused. Isn't this already evaluating <code>add 1 2</code> before assigning it to <code>x</code>? Or is Lean lazy?</p>\n</blockquote>\n<p>Informally speaking, Lean is lazy for terms, but eager for types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"mi\">10000</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">N</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">N</span> <span class=\"bp\">*</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">y</span> <span class=\"c1\">-- deep recursion error</span>\n</code></pre></div>",
        "id": 270101953,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643661968
    },
    {
        "content": "<p>Lean's evaluation semantics are not lazy. The following (Lean 4 code) loops infinitely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- some complex function to avoid inlining</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">10</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">infiniteLoop</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- loops</span>\n</code></pre></div>\n<p>I think the same is true for Lean 3?</p>",
        "id": 270105398,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643663454
    },
    {
        "content": "<p>What I suggested is a way of \"macro-expanding\" the definition of the term, kind of like what you would get with a C++ <code>constexpr</code> function call. The evaluation semantics are the same either way, but one produces <code>def f := add 1 2</code> and the other produces <code>def f := 3</code></p>",
        "id": 270106244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643663794
    },
    {
        "content": "<p>This is usually not necessary, and Lean 4 will automatically precompute closed terms (although I think the computation still happens, once, at runtime)</p>",
        "id": 270106331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643663842
    },
    {
        "content": "<p>additionally it has the disadvantage that <code>f</code> will unfold to <code>3</code> instead of <code>add 1 2</code> which is bad if you have some property of <code>f</code> you want to prove based on the properties of <code>add</code></p>",
        "id": 270106573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643663931
    },
    {
        "content": "<p>since we've just generated a different term there isn't an equality proof <code>add 1 2 = 3</code> to use either</p>",
        "id": 270106643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643663960
    },
    {
        "content": "<p>Before this thread I thought that this code would loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">infiniteLoop</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">infiniteLoop</span> <span class=\"mi\">2</span> <span class=\"c1\">-- doesn't loop</span>\n</code></pre></div>\n<p>But it only loops if I do <code>#eval bar</code></p>",
        "id": 270107367,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643664270
    },
    {
        "content": "<p>I love to be surprised by these small discoveries :D</p>",
        "id": 270107677,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643664395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20result.20of.20.23eval/near/270107367\">said</a>:</p>\n<blockquote>\n<p>Before this thread I thought that this code would loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">infiniteLoop</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">infiniteLoop</span> <span class=\"mi\">2</span> <span class=\"c1\">-- doesn't loop</span>\n</code></pre></div>\n<p>But it only loops if I do <code>#eval bar</code></p>\n</blockquote>\n<p>OTOH, <code>#reduce bar</code> doesn't loop :-)</p>",
        "id": 270107882,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643664488
    },
    {
        "content": "<p>... which is because of Lean not even unfolding <code>infiniteLoop</code> since it's partial, I think</p>",
        "id": 270108186,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643664608
    },
    {
        "content": "<p>Makes sense! Indeed <code>infiniteLoop 2</code> is there in the output of <code>#reduce</code></p>",
        "id": 270108363,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643664700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20result.20of.20.23eval/near/270107367\">said</a>:</p>\n<blockquote>\n<p>Before this thread I thought that this code would loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">infiniteLoop</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">infiniteLoop</span> <span class=\"mi\">2</span> <span class=\"c1\">-- doesn't loop</span>\n</code></pre></div>\n<p>But it only loops if I do <code>#eval bar</code></p>\n</blockquote>\n<p>How could it loop if you don't run it?</p>",
        "id": 270108499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664747
    },
    {
        "content": "<p>Type checking a function is not the same as running it</p>",
        "id": 270108561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664776
    },
    {
        "content": "<p>in fact lean tries to do as little evaluation as it possibly can during typechecking</p>",
        "id": 270108607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664793
    },
    {
        "content": "<p>In which scenarios during type checking do you have to do evaluation?</p>",
        "id": 270108813,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643664886
    },
    {
        "content": "<p>An example where lean would be forced to run the function is if you did something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">infiniteLoop</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">infiniteLoop</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 270108824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664892
    },
    {
        "content": "<p>basically, lean has to unfold things in order to avoid a type error (here, we're using a proof of <code>a = a</code> to prove <code>a = b</code> so lean has to work out that <code>a</code> and <code>b</code> are actually the same thing)</p>",
        "id": 270108918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664940
    },
    {
        "content": "<p>Yeah I sometimes mix concepts. In Python, <code>bar = 1 + infinite_loop(2)</code> would loop forever. But <code>def</code> introduces a function instead.</p>",
        "id": 270108919,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643664940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20result.20of.20.23eval/near/270108824\">said</a>:</p>\n<blockquote>\n<p>An example where lean would be forced to run the function is if you did something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">infiniteLoop</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">infiniteLoop</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">infiniteLoop</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I thought you cant prove anything about partial functions in this way?</p>",
        "id": 270109052,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643664985
    },
    {
        "content": "<p>The equivalent of <code>bar = 1 + infinite_loop(2)</code> in lean is <code>let bar := 1 + infinite_loop 2</code>as part of an <code>#eval</code> block</p>",
        "id": 270109053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643664986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Right, I was getting to that. For <code>partial</code> functions, they look like constants so they simply fail to unfold and that <code>rfl</code> would be rejected as a type error</p>",
        "id": 270109191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665055
    },
    {
        "content": "<p>same thing if <code>infiniteLoop</code> was marked as an <code>@[irreducible] def</code> or <code>constant</code></p>",
        "id": 270109223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Semi-related; in which order does the kernel roughly reduce terms?</p>",
        "id": 270109355,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643665133
    },
    {
        "content": "<p>call by name</p>",
        "id": 270109375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665143
    },
    {
        "content": "<p>because it is repeated <code>whnf</code> to match up subterms</p>",
        "id": 270109405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665158
    },
    {
        "content": "<p>Ah, so I guess you could call that lazy then :)</p>",
        "id": 270109432,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643665169
    },
    {
        "content": "<p>yeah, it's a very different \"evaluation strategy\" than the usual</p>",
        "id": 270109548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665203
    },
    {
        "content": "<p>it's not even really evaluation, since it's actually going for unification of terms and will bail out as soon as it can</p>",
        "id": 270109607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665231
    },
    {
        "content": "<p>Here's an example to show that lean does not fully evaluate terms if it can help it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reallySlow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reallySlow</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">reallySlow</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">10</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- #eval foo -- slow</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"c1\">-- fast</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo.isSome</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fast</span>\n</code></pre></div>",
        "id": 270110116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665464
    },
    {
        "content": "<p>Funky that this even works with the <code>_</code> (before the edit) how does Lean figure out a value for the _? Does it just try the first constructor that's directly a value (i.e. not a function)?</p>",
        "id": 270110438,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643665617
    },
    {
        "content": "<p>It does unification to find the <code>_</code>. It solves it to <code>reallySlow (10^10)</code> btw, not <code>true</code></p>",
        "id": 270110571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665682
    },
    {
        "content": "<p>It does this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo</span> <span class=\"bp\">=?=</span> <span class=\"n\">some</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n<span class=\"bp\">-&gt;</span> <span class=\"n\">unfold</span> <span class=\"n\">foo</span>\n<span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">reallySlow</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"n\">some</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n<span class=\"bp\">-&gt;</span> <span class=\"n\">some</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"n\">apply</span> <span class=\"n\">congr</span>\n<span class=\"n\">reallySlow</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n<span class=\"bp\">-&gt;</span> <span class=\"n\">assign</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">reallySlow</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270110754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665769
    },
    {
        "content": "<p>By the way, I was going to write <code>#eval foo.isSome -- slow</code> in that example but the compiler is too smart and is spoiling my example</p>",
        "id": 270110894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20result.20of.20.23eval/near/270110116\">said</a>:</p>\n<blockquote>\n<p>Here's an example to show that lean does not fully evaluate terms if it can help it</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">reallySlow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">reallySlow</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">reallySlow</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">10</span><span class=\"o\">))</span>\n\n<span class=\"c1\">-- #eval foo -- slow</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo.isSome</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fast</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><code>#eval foo.isSome</code> is also fast ... Probably because of inlining or something similar?</p>",
        "id": 270110898,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643665842
    },
    {
        "content": "<p>yes</p>",
        "id": 270110915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665850
    },
    {
        "content": "<p>this works as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">isSome'</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"c1\">-- #eval isSome' foo -- slow</span>\n</code></pre></div>",
        "id": 270111002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643665891
    },
    {
        "content": "<p>Adjusting my example from earlier too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">longLoop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">longLoop</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- some complex function to avoid inlining</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">10</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">longLoop</span> <span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"bp\">^</span><span class=\"mi\">10</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 270111211,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643665985
    },
    {
        "content": "<p>Ah, I forgot about <code>noinline</code></p>",
        "id": 270111271,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1643666021
    }
]