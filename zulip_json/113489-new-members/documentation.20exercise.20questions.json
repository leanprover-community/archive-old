[
    {
        "content": "<p>Its from the induction and recursion chapter</p>",
        "id": 195188247,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735333
    },
    {
        "content": "<p>theorem simp_const_eq (v : ℕ → ℕ) :<br>\n  ∀ e : aexpr, aeval v (simp_const e) = aeval v e :=<br>\nsorry</p>",
        "id": 195188275,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735349
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">```</span>\n<span class=\"o\">[</span><span class=\"n\">code</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"o\">]</span>\n<span class=\"bp\">```</span>\n</pre></div>",
        "id": 195188372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587735378
    },
    {
        "content": "<p>Please make sure your code can be copied-and-pasted by including the relevant import and/or definitions</p>",
        "id": 195188452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587735424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simp_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>in the exercise, I am having some trouble making a recursive like proof for  (aexpr.plus e1 e2) cases</p>",
        "id": 195188479,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735444
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">aexpr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">aexpr</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"n\">def</span> <span class=\"n\">simp_const</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">*</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span>                             <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fuse</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simp_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fuse_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">fuse</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"c1\">-- END</span>\n</pre></div>",
        "id": 195188611,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735488
    },
    {
        "content": "<p>why are there so many <code>sorry</code>s in <code>aeval</code>?</p>",
        "id": 195188689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587735532
    },
    {
        "content": "<p>i am having some trouble with the <code>simp_const_eq</code></p>",
        "id": 195188690,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">aexpr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n    <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n\n<span class=\"n\">def</span> <span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">sample_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simple_const</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span> <span class=\"bp\">→</span> <span class=\"n\">aexpr</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">a₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">a₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simple_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n    <span class=\"c1\">-- | (aexpr.plus (aexpr.const n₁) (aexpr.const n₂)) := rfl</span>\n    <span class=\"c1\">-- | (aexpr.plus (aexpr.const n₁) (aexpr.var n₂)) := rfl</span>\n    <span class=\"c1\">-- | (aexpr.plus (aexpr.var n₁) (aexpr.const n₂)) := rfl</span>\n    <span class=\"c1\">-- | (aexpr.plus (aexpr.var n₁) (aexpr.var n₂)) := rfl</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">aexpr</span><span class=\"bp\">.</span><span class=\"n\">times</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 195188884,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735618
    },
    {
        "content": "<p>I hope the formatting is ok now</p>",
        "id": 195189199,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587735783
    },
    {
        "content": "<p>since <code>simple_const</code> is not recursively defined, you should be able to do it just like <code>aexpr.plus</code>: by bashing all the cases</p>",
        "id": 195189972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587736126
    },
    {
        "content": "<p>i was hoping there would be a better process</p>",
        "id": 195190099,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587736198
    },
    {
        "content": "<p>you can use tactics to help you do the case bashing</p>",
        "id": 195190221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587736255
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">simp_const_eq</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">aexpr</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">simple_const</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">aeval</span> <span class=\"n\">v</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">intro</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">e</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">e2</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 195190399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587736335
    },
    {
        "content": "<p>thanks</p>",
        "id": 195190673,
        "sender_full_name": "Sayantan Majumdar",
        "timestamp": 1587736460
    }
]