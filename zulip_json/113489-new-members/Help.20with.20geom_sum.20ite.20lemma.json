[
    {
        "content": "<p>1st sorry: <code>obtain ⟨m, rfl⟩ := h_1,</code><br>\n2nd sorry: <code>rw if_pos h_1,</code> (goals accomplished)</p>\n<p>btw, <code>import all</code> doesn't work for me and I had to squeeze it to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric.basic</span>\n</code></pre></div>",
        "id": 290158725,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658263861
    },
    {
        "content": "<p><code>import all</code> is likely to make things like <code>library_search</code> timeout because it brings in far too many lemmas</p>",
        "id": 290159986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658264468
    },
    {
        "content": "<p>On my end it just shows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">file</span> <span class=\"bp\">'</span><span class=\"n\">all'</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">lean</span> <span class=\"c1\">--path' to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n\n<span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">all</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">resolve</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">all</span>\n</code></pre></div>",
        "id": 290162721,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658265794
    },
    {
        "content": "<p><code>all.lean</code> needs to be generated first (by <code>leanproject mk-all</code>)</p>",
        "id": 290163103,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658265964
    },
    {
        "content": "<p>Thanks for the help. I used '_target/deps/mathlib/scripts/mk_all.sh' for my mk_all, which creates an 'all' which imports all of mathlib.<br>\n'leanproject mk-all' actually only imports what is in the '/src' folder of the current lean project.</p>",
        "id": 290169372,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658269666
    },
    {
        "content": "<p>One problem I've noticed with <code>mk-all</code> is that you make it and then you forget about it and then you pull new stuff and then the file breaks. I avoid it for this reason and others (e.g. it sometimes essentially disables <code>library_search</code>)</p>",
        "id": 290170202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658270164
    },
    {
        "content": "<p>How do I solve this? ring, ring_nf, squeeze_simp do nothing.<br>\n<a href=\"/user_uploads/3121/lLzQLPInaob81F5zZhyRbM2h/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/lLzQLPInaob81F5zZhyRbM2h/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/lLzQLPInaob81F5zZhyRbM2h/image.png\"></a></div>",
        "id": 290562844,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658521528
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">field_simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_div_cancel</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h.lt.ne.symm</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 290565844,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658523263
    },
    {
        "content": "<p>Almost done, but stuck on this part where the root of unity must be shown not equal to 1: <br>\n<a href=\"/user_uploads/3121/7aj1zG589PyYTjLZZzYjgZLI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/7aj1zG589PyYTjLZZzYjgZLI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/7aj1zG589PyYTjLZZzYjgZLI/image.png\"></a></div>",
        "id": 290572056,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658527208
    },
    {
        "content": "<p>first rewrite by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp_eq_one_iff\">docs#complex.exp_eq_one_iff</a></p>",
        "id": 290572576,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658527479
    },
    {
        "content": "<p>Nice.</p>",
        "id": 290572654,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658527525
    },
    {
        "content": "<p>Stuck again. I need to do something with h_1, but don't know what.<br>\n<a href=\"/user_uploads/3121/O3aMQ9RTroxLCyP_UZ63XF2c/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/O3aMQ9RTroxLCyP_UZ63XF2c/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/O3aMQ9RTroxLCyP_UZ63XF2c/image.png\"></a></div>",
        "id": 290575091,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658529360
    },
    {
        "content": "<p>The problem is at line 274.<br>\n<a href=\"/user_uploads/3121/wrTREZaBDFpY_oJV-QCb8UwU/RootOfUnityExponentialSum.lean\">RootOfUnityExponentialSum.lean</a></p>",
        "id": 290575956,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658530096
    },
    {
        "content": "<p>At line 270 you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">intro</span> <span class=\"n\">eq1</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h_1</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">complex.exp_eq_one_iff.1</span> <span class=\"n\">eq1</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">m.to_nat</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and I think you'll need to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.to_nat_of_nonneg\">docs#int.to_nat_of_nonneg</a> at some point.</p>",
        "id": 290576387,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658530504
    },
    {
        "content": "<p>Oh sorry, it's best to <code>rw ← int.coe_nat_dvd, use m,</code></p>",
        "id": 290581133,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658535238
    },
    {
        "content": "<p>And that is almost the same as 'he'. Normally, when something like 'he' is a goal, I would use the 'congr' tactic, but that doesn't work when the congruence is not in the goal?<br>\n<a href=\"/user_uploads/3121/GY1bbb0pLHWdKlOFWupOrDZ7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GY1bbb0pLHWdKlOFWupOrDZ7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GY1bbb0pLHWdKlOFWupOrDZ7/image.png\"></a></div>",
        "id": 290581417,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658535553
    },
    {
        "content": "<p>You need to cancel a factor, and you need to show the factor is nonzero, so it's not <code>congr</code>; <code>congr</code> doesn't give you the reverse direction.</p>",
        "id": 290581754,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658535920
    },
    {
        "content": "<p>you can rewrite he by some comm/assoc lemmas and apply <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero/defs.html#mul_right_cancel%E2%82%80\">https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero/defs.html#mul_right_cancel%E2%82%80</a> to it</p>",
        "id": 290581808,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658535966
    },
    {
        "content": "<p>How does one show the computer <code>2 * ↑real.pi * I ≠ 0</code>?</p>",
        "id": 290585789,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658541372
    },
    {
        "content": "<p><code>apply mul_ne_zero,</code></p>",
        "id": 290585893,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658541570
    },
    {
        "content": "<p>Doing the twice breaks the goal into <code>⊢ 2 ≠ 0</code>,<code>⊢ ↑real.pi ≠ 0</code>, <code>⊢ I ≠ 0</code>. <code>norm_num</code> gets rid of <code> 2 ≠ 0</code>, but not the other 2 inequalities.<br>\nEdit: found <code>I_ne_zero</code> and <code>real.pi_ne_zero</code>; the second needed <code>norm_cast</code>.</p>",
        "id": 290586362,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658542226
    },
    {
        "content": "<p>I've run into a new problem. I have the exact equation I need (h8), except it is the wrong type of equation; I need <code>eq ℤ</code> and have type <code>eq ℂ</code>. <a href=\"/user_uploads/3121/4sms_ziQcC05vyYadZEIPeAW/RootOfUnityExponentialSum.lean\">RootOfUnityExponentialSum.lean</a> line 294<br>\n<a href=\"/user_uploads/3121/QwGMIqgKgxeBmhLt_TL33IGz/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QwGMIqgKgxeBmhLt_TL33IGz/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QwGMIqgKgxeBmhLt_TL33IGz/image.png\"></a></div>",
        "id": 290589629,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658546367
    },
    {
        "content": "<p>Have you tried <code>exact_mod_cast h8</code>?</p>",
        "id": 290590434,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658547458
    },
    {
        "content": "<p>Thank you all for helping complete this lemma. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> It is something required to prove my next attempted lemma, <code>ruesNEqExpSum</code>. I already foresee questions about interchanging an arbitrarily sized finset sum with a <code>tsum</code> infinite sum.</p>",
        "id": 290600249,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658562614
    }
]