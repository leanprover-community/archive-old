[
    {
        "content": "<p>Hi all! I encounter this problem trying to replicate this proof in lean  (figure 1). I don't know whether to make  x y a b to be integers or natural numbers. If they are nat, usually I can stuck on some tedious calculations especially involving subtraction (I guess it's because subtraction is defined differently e.g. 0 - 1 = 0). You can also check figure 2 where I give some examples that library_search cannot solve conjectures about nat but work in int. However, if I make them int, I'll need to combine nat and int using ↑, e.g. ↑q = x^2 + y^2 instead of q = x^2 + y^2 and it takes a lot of work to convert between int and nat.</p>\n<p>Are there any suggestions? Thank you!<br>\n<a href=\"/user_uploads/3121/Y7KKApLN-z_jO9-sUd1nNgXE/oringinal-proof.PNG\">oringinal-proof.PNG</a><br>\n<a href=\"/user_uploads/3121/hKQzu_zUL05nYGS7xebBuds_/int-vs-nat.PNG\">int-vs-nat.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Y7KKApLN-z_jO9-sUd1nNgXE/oringinal-proof.PNG\" title=\"oringinal-proof.PNG\"><img src=\"/user_uploads/3121/Y7KKApLN-z_jO9-sUd1nNgXE/oringinal-proof.PNG\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hKQzu_zUL05nYGS7xebBuds_/int-vs-nat.PNG\" title=\"int-vs-nat.PNG\"><img src=\"/user_uploads/3121/hKQzu_zUL05nYGS7xebBuds_/int-vs-nat.PNG\"></a></div>",
        "id": 233180805,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1617633955
    },
    {
        "content": "<p>I would work with <code>int</code> all the time, because whilst this is a theorem about naturals there is a lot of subtraction going on.</p>",
        "id": 233180945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617634018
    },
    {
        "content": "<p>I would just use ints for everything -- then you don't even have up-arrows.</p>",
        "id": 233181103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617634099
    },
    {
        "content": "<p>As for the not working stuff -- the second example is not true (try <code>slim_check</code> and see if it finds a counterexample) and the first example could perhaps be solved by <code>omega</code>, but honestly I would avoid naturals.</p>",
        "id": 233181210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617634167
    },
    {
        "content": "<p>woah first time I see <code>slim_check</code>, that's really cool</p>",
        "id": 233183962,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1617635114
    },
    {
        "content": "<p>If you get stuck, feel free to check <a href=\"https://github.com/Ruben-VandeVelde/flt/blob/tmp/src/cox.lean\">https://github.com/Ruben-VandeVelde/flt/blob/tmp/src/cox.lean</a> for my proof</p>",
        "id": 233197430,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1617641091
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233202591,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1617643662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/int.20or.20nat/near/233181103\">said</a>:</p>\n<blockquote>\n<p>I would just use ints for everything -- then you don't even have up-arrows.</p>\n</blockquote>\n<p>I see. I will stick to int later on. Thanks!</p>",
        "id": 233202693,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1617643701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/int.20or.20nat/near/233197430\">said</a>:</p>\n<blockquote>\n<p>If you get stuck, feel free to check <a href=\"https://github.com/Ruben-VandeVelde/flt/blob/tmp/src/cox.lean\">https://github.com/Ruben-VandeVelde/flt/blob/tmp/src/cox.lean</a> for my proof</p>\n</blockquote>\n<p>Oh that's fantastic! Thank you!</p>",
        "id": 233202896,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1617643802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/int.20or.20nat/near/233181103\">said</a>:</p>\n<blockquote>\n<p>I would just use ints for everything -- then you don't even have up-arrows.</p>\n</blockquote>\n<p>By the way, there is no defintions for prime in int. To avoid nat, I've seen a lot of works importing field_theory.finite.basic to use the definition of prime. Is that the right thing to do?</p>",
        "id": 234139188,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1618225325
    },
    {
        "content": "<p>Not sure why you'd go through <code>field_theory.finite.basic</code>, though it probably works fine. Importing <code>algebra.associated</code> should be sufficient</p>",
        "id": 234140043,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618225868
    },
    {
        "content": "<p><code>ring_theory.int.basic</code> is probably also useful</p>",
        "id": 234140080,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1618225904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/113489-new-members/topic/int.20or.20nat/near/234140043\">said</a>:</p>\n<blockquote>\n<p>Not sure why you'd go through <code>field_theory.finite.basic</code>, though it probably works fine. Importing <code>algebra.associated</code> should be sufficient</p>\n</blockquote>\n<p>Yeah I also noticed that ring_theory.int.basic works as well in your proof on cox, but I get the same results unfolding prime with the three imports. Is there a preference?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.associated</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n: ℤ</span>\n<span class=\"cm\">h: n ≠ 0 ∧ ¬is_unit n ∧ ∀ (a b : ℤ), n ∣ a * b → n ∣ a ∨ n ∣ b</span>\n<span class=\"cm\">⊢ ℤ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n: ℤ</span>\n<span class=\"cm\">h: n ≠ 0 ∧ ¬is_unit n ∧ ∀ (a b : ℤ), n ∣ a * b → n ∣ a ∨ n ∣ b</span>\n<span class=\"cm\">⊢ ℤ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">prime</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n: ℤ</span>\n<span class=\"cm\">h: n ≠ 0 ∧ ¬is_unit n ∧ ∀ (a b : ℤ), n ∣ a * b → n ∣ a ∨ n ∣ b</span>\n<span class=\"cm\">⊢ ℤ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 234153606,
        "sender_full_name": "Tianchen Zhao",
        "timestamp": 1618232666
    },
    {
        "content": "<p>It's the same function you're using every time.</p>",
        "id": 234153779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618232741
    }
]