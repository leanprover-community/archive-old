[
    {
        "content": "<p>I am working through the book \"Types and programming\" and there is a theorem I can't completely prove. The following is the background information needed to prove the part where I am stuck:</p>\n<p>inductive term                    <br>\n| cond : term → term → term → term                     <br>\n| succ : term → term<br>\n| pred : term → term</p>\n<p>inductive IsNumV : term → Prop<br>\n| succ (n : term) : IsNumV (term.succ n)</p>\n<p>inductive IsValue : term → Prop <br>\n| numv {t : term} : IsNumV t → IsValue t</p>\n<p>inductive eval : term → term → Prop<br>\n| E_if (t1 t1' t2 t3 : term) : eval t1 t1' → eval (term.cond t1 t2 t3) (term.cond t1' t2 t3)<br>\n| E_succ (t1 t1' : term) : eval t1 t1' → eval (term.succ t1) (term.succ t1')<br>\n| E_pred_succ (nv1 : term) : IsNumV nv1.succ → eval (term.pred (term.succ nv1)) nv1<br>\n| E_pred (t1 t1' : term) : eval t1 t1' → eval (term.pred t1) (term.pred t1')</p>\n<p>inductive ttype<br>\n| tBool : ttype<br>\n| tNat : ttype</p>\n<p>open ttype</p>\n<p>inductive TypeChecks : term → ttype → Prop <br>\n| TCcond {t1 t2 t3 : term} {T : ttype} : <br>\n    TypeChecks t1 tBool → TypeChecks t2 T → TypeChecks t3 T → TypeChecks (term.cond t1 t2 t3) T<br>\n| TCsucc {t1 : term} :<br>\n    TypeChecks t1 tNat → TypeChecks (term.succ t1) tNat<br>\n| TCpred {t1 : term} :<br>\n    TypeChecks t1 tNat →  TypeChecks (term.pred t1) tNat</p>\n<p>I want to show the following:</p>\n<p>t  t'  : term<br>\nT : ttype<br>\nh1 : IsNumV t'.succ<br>\nh2 : TypeChecks t'.succ tNat<br>\nih : ∀ {t'_1 : term}, eval t'.succ t'_1 → TypeChecks t'_1 tNat<br>\n|-  TypeChecks t' tNat</p>\n<p>Now it seems to me that I must somehow prove that term.pred (term.succ t') = t', however I haven't been able to. If anyone has some ideas on how to prove this or the above statement, I would be more than glad to discuss your ideas.</p>",
        "id": 223187596,
        "sender_full_name": "Lia Malato",
        "timestamp": 1611032362
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 223187971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611032877
    },
    {
        "content": "<p>also <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 223188034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611032918
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">cond</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IsNumV</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsNumV</span> <span class=\"o\">(</span><span class=\"n\">term.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IsValue</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">numv</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">IsNumV</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">IsValue</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">E_if</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">term.cond</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term.cond</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">E_succ</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">term.succ</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term.succ</span> <span class=\"n\">t1'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">E_pred_succ</span> <span class=\"o\">(</span><span class=\"n\">nv1</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IsNumV</span> <span class=\"n\">nv1.succ</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">term.pred</span> <span class=\"o\">(</span><span class=\"n\">term.succ</span> <span class=\"n\">nv1</span><span class=\"o\">))</span> <span class=\"n\">nv1</span>\n<span class=\"bp\">|</span> <span class=\"n\">E_pred</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eval</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span> <span class=\"bp\">→</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">term.pred</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term.pred</span> <span class=\"n\">t1'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">tBool</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n<span class=\"bp\">|</span> <span class=\"n\">tNat</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ttype</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">TypeChecks</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">ttype</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">TCcond</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">TypeChecks</span> <span class=\"n\">t1</span> <span class=\"n\">tBool</span> <span class=\"bp\">→</span> <span class=\"n\">TypeChecks</span> <span class=\"n\">t2</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">TypeChecks</span> <span class=\"n\">t3</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">TypeChecks</span> <span class=\"o\">(</span><span class=\"n\">term.cond</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">TCsucc</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">TypeChecks</span> <span class=\"n\">t1</span> <span class=\"n\">tNat</span> <span class=\"bp\">→</span> <span class=\"n\">TypeChecks</span> <span class=\"o\">(</span><span class=\"n\">term.succ</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"n\">tNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">TCpred</span> <span class=\"o\">{</span><span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">TypeChecks</span> <span class=\"n\">t1</span> <span class=\"n\">tNat</span> <span class=\"bp\">→</span> <span class=\"n\">TypeChecks</span> <span class=\"o\">(</span><span class=\"n\">term.pred</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"n\">tNat</span>\n\n<span class=\"kd\">example</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ttype</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">IsNumV</span> <span class=\"n\">t'.succ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">TypeChecks</span> <span class=\"n\">t'.succ</span> <span class=\"n\">tNat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t'_1</span> <span class=\"o\">:</span> <span class=\"n\">term</span><span class=\"o\">},</span> <span class=\"n\">eval</span> <span class=\"n\">t'.succ</span> <span class=\"n\">t'_1</span> <span class=\"bp\">→</span> <span class=\"n\">TypeChecks</span> <span class=\"n\">t'_1</span> <span class=\"n\">tNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">TypeChecks</span> <span class=\"n\">t'</span> <span class=\"n\">tNat</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223188058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611032985
    },
    {
        "content": "<p>try <code>cases h2</code></p>",
        "id": 223188256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611033251
    },
    {
        "content": "<p>Thank you very much! I was indeed able to finish the proof. However, is there a way outside of this example, to prove pred(succ t) = t or succ(pred t)?</p>",
        "id": 223207667,
        "sender_full_name": "Lia Malato",
        "timestamp": 1611051426
    },
    {
        "content": "<p>No, this is false</p>",
        "id": 223209113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611052362
    }
]