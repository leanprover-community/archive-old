[
    {
        "content": "<p>Hiya,<br>\nI'm doing a summer project on Lean and am working on formalising the Svarc-Milnor lemma - I've finished proving the first part about \\a being generated by a specific subset S, and now I want to  state the second part of the theorem (that states \\a quasi-isometric to the metric space \\b it acts on) and am getting a weird error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">metric_svarcmilnor2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cpos</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bpos</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">quasigeodesic_space</span> <span class=\"n\">β</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">cpos</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">bpos</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">isom_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htrans</span><span class=\"o\">:</span> <span class=\"n\">translates_cover</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finitediam</span> <span class=\"o\">:</span> <span class=\"n\">metric.bounded</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n   <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_QI</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">word_metric</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">proper_action_set</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">set_closed_ball</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">metric_svarcmilnor1</span> <span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"n\">cpos</span> <span class=\"n\">bpos</span> <span class=\"n\">s</span> <span class=\"n\">htrans</span> <span class=\"n\">finitediam</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The error states:</p>\n<p>type mismatch at application<br>\n  word_metric<br>\nterm<br>\n  α<br>\nhas type<br>\n  Type u_1 : Type (u_1+1)<br>\nbut is expected to have type<br>\n  Type : Type 1</p>\n<p>I realise this might not be enough information to know what the problem is, I just figured this might be a common error. It uses my definition of the word metric on groups which takes Type* as an argument - let me know if you'd like to see it.<br>\nThanks in advance :)</p>",
        "id": 289981985,
        "sender_full_name": "Georgi Kocharyan",
        "timestamp": 1658158279
    },
    {
        "content": "<p>Hey Georgi! The problem is that your definition of <code>word_metric</code> is not <em>universe-polymorphic</em>. That is, it only applies to types in <code>Type</code> (= <code>Type 0</code>), and not all <code>Type u</code>. You can probably just replace <code>Type</code> by <code>Type*</code> and it should work.</p>",
        "id": 289982552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658158479
    },
    {
        "content": "<p>Note that <code>Type*</code> <strong>in lemma statements</strong> means \"Lean, please make it <code>Type u</code> for whatever <code>u</code> makes sense\". So if <code>word_metric</code> uses something that is already not universe-polymorphic, then Lean will think \"Oh, <code>u</code> must be <code>0</code>\" and <code>word_metric</code> won't be universe-polymorphic either.</p>",
        "id": 289982917,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658158636
    },
    {
        "content": "<p><code>Type*</code> <strong>in <code>variables</code> declarations</strong> means \"Lean, this is <code>Type u</code> for some fixed <code>u</code> I am not bothering to declare. Deal with it\".</p>",
        "id": 289983133,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658158708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/svarc-milnor/near/289982552\">said</a>:</p>\n<blockquote>\n<p>Hey Georgi! The problem is that your definition of <code>word_metric</code> is not <em>universe-polymorphic</em>. That is, it only applies to types in <code>Type</code> (= <code>Type 0</code>), and not all <code>Type u</code>. You can probably just replace <code>Type</code> by <code>Type*</code> and it should work.</p>\n</blockquote>\n<p>amazing!! I forgot to add the *, because I didn't know what it did, but now I do :) Thank you!</p>",
        "id": 289983445,
        "sender_full_name": "Georgi Kocharyan",
        "timestamp": 1658158847
    },
    {
        "content": "<p>This is great!  Is <code>quasigeodesic_space</code> in mathlib?  Is <code>isom_action</code> in mathlib...?</p>",
        "id": 290022519,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1658178196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466727\">Jim Fowler</span> <a href=\"#narrow/stream/113489-new-members/topic/svarc-milnor/near/290022519\">said</a>:</p>\n<blockquote>\n<p>This is great!  Is <code>quasigeodesic_space</code> in mathlib?  Is <code>isom_action</code> in mathlib...?</p>\n</blockquote>\n<p>No, this is all stuff I've defined. Check the repo if you want to see the definitions!<br>\n<a href=\"https://github.com/GregorSamsa42/svarc-milnor\">https://github.com/GregorSamsa42/svarc-milnor</a></p>",
        "id": 290218305,
        "sender_full_name": "Georgi Kocharyan",
        "timestamp": 1658313841
    }
]