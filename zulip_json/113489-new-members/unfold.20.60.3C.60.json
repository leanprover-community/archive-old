[
    {
        "content": "<p>I have a goal </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">FinT</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n<span class=\"n\">assum</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sumpred</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>in the context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">qimpE</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span><span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">FinT</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"bp\">∀</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">t</span><span class=\"o\">)]:</span> <span class=\"n\">nat.zero</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">sumpred</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">count</span> <span class=\"n\">T</span><span class=\"o\">))</span>  <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">assum</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n<span class=\"bp\">```</span>\n<span class=\"n\">I</span> <span class=\"n\">want</span> <span class=\"n\">to</span> <span class=\"n\">expand</span> <span class=\"n\">the</span> <span class=\"kd\">definition</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"bp\">`&lt;`</span> <span class=\"n\">inside</span> <span class=\"bp\">`</span><span class=\"n\">assum</span><span class=\"bp\">`.</span> <span class=\"bp\">`</span><span class=\"n\">dunfold</span> <span class=\"bp\">&lt;</span> <span class=\"n\">at</span> <span class=\"n\">assum</span><span class=\"bp\">`</span> <span class=\"n\">doesn't</span> <span class=\"n\">work</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"n\">presume</span> <span class=\"n\">because</span> <span class=\"bp\">`&lt;`</span> <span class=\"n\">is</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">defined</span> <span class=\"n\">term.</span> <span class=\"n\">What</span> <span class=\"n\">is</span> <span class=\"n\">the</span> <span class=\"n\">best</span> <span class=\"n\">way</span> <span class=\"n\">to</span> <span class=\"n\">go</span> <span class=\"n\">about</span> <span class=\"n\">this</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 215475772,
        "sender_full_name": "Chris M",
        "timestamp": 1604420297
    },
    {
        "content": "<p>don't unfold!</p>",
        "id": 215475927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420372
    },
    {
        "content": "<p>what's your maths proof, and does it involve unfolding <code>&lt;</code>?</p>",
        "id": 215476079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420426
    },
    {
        "content": "<p>Well, tbh, my mental definition of <code>a&lt;b</code> is <code>\\exists c, a+c=b \\and c\\neq 0</code>, so that was what I was going for. I have since found out that that is not how it's defined in lean. Under that assumption yes it did involve unfolding <code>&lt;</code>.</p>",
        "id": 215476546,
        "sender_full_name": "Chris M",
        "timestamp": 1604420647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/unfold.20.60.3C.60/near/215475927\">said</a>:</p>\n<blockquote>\n<p>don't unfold!</p>\n</blockquote>\n<p>Why do you say this?</p>",
        "id": 215476574,
        "sender_full_name": "Chris M",
        "timestamp": 1604420663
    },
    {
        "content": "<p>Because the word \"definition\" in maths is not the same as in Lean</p>",
        "id": 215476677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420716
    },
    {
        "content": "<p>\"definition\" in Lean should be better translated as \"implementation\" in maths, since there can only be one definition in Lean, but in maths one thing can have a lot of definitions</p>",
        "id": 215476743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420748
    },
    {
        "content": "<p>\"definition\" in maths would be \"definitional lemmas\" in Lean, and I can assure you that one exists for this definition you proposed</p>",
        "id": 215476854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420781
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_pos_add_of_lt\">docs#exists_pos_add_of_lt</a></p>",
        "id": 215476983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420840
    },
    {
        "content": "<p>so for example in Lean I might define <code>three</code> to be <code>3</code>, and then prove that <code>2 + 1</code> is an equivalent definition, i.e. prove a lemma saying that <code>three = 2 + 1</code></p>",
        "id": 215477146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420900
    },
    {
        "content": "<p>I will even prove that <code>three = 3</code> as a separate lemma just to discourage people from ever unfolding <code>three</code></p>",
        "id": 215477182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604420916
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/def\">docs#def</a> (this link doesn't work: how do I find all the lemmas containing <code>def</code>?)</p>",
        "id": 215477467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1604421041
    },
    {
        "content": "<p>I see. Thanks :)</p>\n<p>By the way I had trouble figuring out how to use <code>exists_pos_add_of_lt</code>. It gives me an error <code>unknown identifier 'exists_pos_add_of_lt'</code>. Clearly I should first open some namespace but I'm not sure how to figure out which one.</p>",
        "id": 215482232,
        "sender_full_name": "Chris M",
        "timestamp": 1604423090
    },
    {
        "content": "<p>I usually type <code>exists_pos_add_of_lt</code> and find the one I want in the ctrl-space dropdown</p>",
        "id": 215482587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604423246
    },
    {
        "content": "<p>I would guess it is <code>nat.exists_pos_add_of_lt</code></p>",
        "id": 215482602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604423255
    },
    {
        "content": "<p><code>#check exists_pos_add_of_lt</code> ctrl-space says it's in the root namespace (I have <code>import tactic</code> at the top of my file though)</p>",
        "id": 215491424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604427300
    }
]