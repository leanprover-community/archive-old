[
    {
        "content": "<p>Hi, all. I am using the parser to read a text file to get a list of <code>structure</code> s that I defined ( <a href=\"https://github.com/ocschwar/adventofcode/blob/master/src/aoc/day2.lean\">https://github.com/ocschwar/adventofcode/blob/master/src/aoc/day2.lean</a>) for advent of code. )</p>\n<p>Because I'm a neophyte and the parser was cut and pasted from an earlier zulip chat (thanks again!), the parsing function returns type <code>list (list instruction)</code>and I need to convert it to <code>list instruction</code> </p>\n<p>The dumb way below is failing: <br>\nThe equivalent code for a list of naturals worked fine. This is failing with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">dayinput</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">instruction</span><span class=\"o\">),</span>\n<span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">inhabited</span> <span class=\"n\">instruction</span>\n</code></pre></div>\n<p>what should I be doing to assure the type setting that the parse_file function is returning a list of inhabited lists?</p>",
        "id": 265356266,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639772895
    },
    {
        "content": "<p>The problem is that you haven't proved that the type <code>instruction</code> has any terms</p>",
        "id": 265357543,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639773642
    },
    {
        "content": "<p>You can probably do this automatically be writing <code>@[derive inhabited]</code> before the definition of your <code>instruction</code> type.</p>",
        "id": 265357592,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639773677
    },
    {
        "content": "<p>Something like this, after briefly looking at your code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">comd</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">up</span> <span class=\"o\">:</span> <span class=\"n\">comd</span>\n<span class=\"bp\">|</span> <span class=\"n\">down</span> <span class=\"o\">:</span> <span class=\"n\">comd</span>\n<span class=\"bp\">|</span> <span class=\"n\">forward</span> <span class=\"o\">:</span> <span class=\"n\">comd</span>\n\n<span class=\"kd\">@[derive inhabited]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comd</span> <span class=\"o\">:</span> <span class=\"n\">comd</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265357640,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639773718
    },
    {
        "content": "<p>(copy, paste, watch the red disappear). That worked! Thanks!</p>",
        "id": 265358011,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639773917
    },
    {
        "content": "<p>Or if you prefer to show the inhabitedness yourself to see what it actually means, it's enough to provide some term of type <code>instruction</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"c1\">-- put any term of type `instruction` instead of _</span>\n</code></pre></div>\n<p>For instance </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">instruction</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">instruction.mk</span> <span class=\"n\">comd.up</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 265358257,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639774045
    },
    {
        "content": "<p>I'll use the syntax for has_t_string</p>",
        "id": 265361460,
        "sender_full_name": "Ocschwar",
        "timestamp": 1639775711
    }
]