[
    {
        "content": "<p>In this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2x</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pxr</span> <span class=\"n\">h2x</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>at the <code>sorry</code>, my goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">r</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>In the first goal, I would like to generalize <code>hp : p ?m_1</code> to be <code> (∀ (x : α), p x) </code>.  What is the tactic-mode syntax to introduce the <code>∀</code>?</p>",
        "id": 218049007,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606439047
    },
    {
        "content": "<p>I'm not sure this makes any sense. <code>hp</code> says \"p of some explicit element of alpha is true\". I'm not sure what you mean by \"generalize\" but neither <code>hp</code> nor what you want to \"generalize\" it to imply the other.</p>",
        "id": 218049196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606439391
    },
    {
        "content": "<p>PS I'm not sure running <code>constructor</code> on an exists goal is buying you much. You still have the same problem (constructing an element of alpha and proving it satisfies p) but you now have two goals, one of which is not a prop and the other of which has a metavariable in.</p>",
        "id": 218049280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606439477
    },
    {
        "content": "<p>Is this even true though? For the reverse implication, if the type of <code>x</code> is empty then no witness can be produced for proving the exists statement.</p>",
        "id": 218050804,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1606442135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"314358\">@Donald Sebastian Leung</span> , it's an exercise in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">section 4.4</a>.  I just assumed it was true.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I have been able to use <code>constructor</code> for other exercises in this set, as a way of eliminating the quantifier in existential goals.  For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">pxr.left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pxr.right</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hpxr</span> <span class=\"o\">:=</span> <span class=\"n\">and.intro</span> <span class=\"n\">px</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hpxr</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxqx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">pxqx</span> <span class=\"k\">with</span> <span class=\"n\">px</span> <span class=\"n\">qx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">qx</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">px</span> <span class=\"n\">qx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">px</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">pxqx</span> <span class=\"o\">:=</span> <span class=\"n\">or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pxqx</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">qx</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">qx</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">pxqx</span> <span class=\"o\">:=</span> <span class=\"n\">or.intro_right</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">qx</span><span class=\"o\">,</span>\n      <span class=\"n\">constructor</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">pxqx</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218055432,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606450160
    },
    {
        "content": "<p>I think you have to use <code>variable a : α</code> as in your earlier question today.</p>",
        "id": 218055487,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606450239
    },
    {
        "content": "<p>Of the exercises in Chapter 4 that deal with quantifiers, I am down to a number of them where I have subgoals of form <code>p ?m_1</code> and <code>α</code>.  These involve less successful uses of <code>constructor</code> than the above examples.   The failure points are where you see <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"kn\">open</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">npx</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">npx</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">fx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">npx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">fx</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">npx</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxr</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2x</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pxr</span> <span class=\"n\">h2x</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">rpx</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">rpx</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218055550,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606450330
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I will try adding an evidence of nonempty set variable in scope.</p>",
        "id": 218055626,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606450506
    },
    {
        "content": "<p>The TPIL section there says:</p>\n<blockquote>\n<p>Notice that the declaration variable a : α amounts to the assumption that there is at least one element of type α. This assumption is needed in the second example, as well as in the last two.</p>\n</blockquote>",
        "id": 218055631,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606450521
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> .</p>",
        "id": 218055647,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606450559
    },
    {
        "content": "<p>I am farther along by using <code>assume</code> but stuck on the reverse implication in this proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">rpx</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">rpx</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"c1\">-- this works</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">epx</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">epx</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span> <span class=\"c1\">-- this doesn't</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The goal state before the second <code>constructor</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The second <code>constructor</code> eliminates the existential quantifier in <code>⊢ ∃ (x : α), r → p x</code> and leaves behind the <code>p ?m_1</code>.  Because the <code>p ?m_1</code> is the result of eliminating an existential, I assume that proving <code>p x</code> for any <code>x</code> should resolve it. The goal state becomes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The <code>exact px</code> results in error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>Any further hints would be greatly appreciated!</p>",
        "id": 218108922,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606494398
    },
    {
        "content": "<p>I think you have to use <code>variable a : α</code> as in your earlier question yesterday.</p>",
        "id": 218109337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606494682
    },
    {
        "content": "<p><code>by_cases r</code> I think is the missing step</p>",
        "id": 218109656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606494872
    },
    {
        "content": "<p>But you also need <code>include a</code> to make the variable available to use</p>",
        "id": 218110134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606495157
    },
    {
        "content": "<p>I'd recommend you drop this weird <code>variable a : \\a</code> stuff and use <code>[inhabited α]</code> + <code>default α</code> instead</p>",
        "id": 218110258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606495216
    },
    {
        "content": "<p>I think this is from TPIL or some equivalent book</p>",
        "id": 218110314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606495253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> the <code>variable a : α</code> is there in the quoted code above.  Also yes, this  is an exercise in TPIL.</p>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  thank you for your suggestions, I will try them.  Also, in <a href=\"#narrow/stream/113489-new-members/topic/Need.20help.20with.20exists.2Eintro\">this thread</a>, I was recommended to introduce <code>variable a : α</code> as evidence that <code>α</code> is a non-empty set. I was very firmly corrected for suggesting that there was anything confusing at all about it.</p>",
        "id": 218113524,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606497427
    },
    {
        "content": "<p>I think there is some wonkiness to <code>variable a : α</code> and how that gets included in <code>example</code> vs <code>lemma my_example</code>. I think it might have to also do with <code>include a</code>. For the examples where you really need the <code>a</code>, you could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and that would for sure be available.</p>",
        "id": 218113812,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606497625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> has hit the nail on the head - <code>lemma</code> determines it's type (which includes its arguments) from the stuff to the left of the <code>:=</code> alone, whereas <code>def</code> / <code>example</code> look at their definition to work out what they need to pull in as arguments</p>",
        "id": 218114038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606497787
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span> <span class=\"o\">:=</span> <span class=\"n\">some_value</span>  <span class=\"c1\">-- means foo (x : X) if `x` is included in either some_type or some_value</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span> <span class=\"o\">:=</span> <span class=\"n\">some_value</span>  <span class=\"c1\">-- means foo (x : X) if `x` is included in some_type, ignores some_value</span>\n</code></pre></div>",
        "id": 218114195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606497893
    },
    {
        "content": "<p>In TPiL, the need for <code>include</code> is mentioned at <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#entering-tactic-mode\">the end of Section 5.1</a> (the first section of the chapter discussing tactics), which I linked yesterday. </p>\n<p>By the way, Patrick's point yesterday was not at all to correct you for saying that \"there was anything confusing at all about it\", but instead that the very different and much more extreme \"I just don't think anybody would get it without expert assistance\" is not consistent with evidence. Sorry for harping on this, but I believe that if you bring up past conversations, it's important that they are presented accurately.</p>",
        "id": 218115666,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606498997
    },
    {
        "content": "<p>It might also be worth pointing out that some of the confusion is probably coming from the Zulip chat, since at this particular point in TPiL, the reader isn't supposed to know anything about typeclasses or <code>inhabited</code> or <code>nonempty</code>, so the setup presented in the book with the <code>variable</code> trick  is pedagogically justifiable, even though it's not how most lean users might state that the type has an element. So when people like myself yesterday  respond to Lars' question with \"just use a typeclass\", it obfuscates the goal of the using the quantifiers correctly.</p>\n<p>As opposed to this section of TPiL being particularly hard to navigate</p>",
        "id": 218117247,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606500298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20introduce.20a.20Forall.20in.20tactic.20mode/near/218114038\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> has hit the nail on the head - <code>lemma</code> determines it's type (which includes its arguments) from the stuff to the left of the <code>:=</code> alone, whereas <code>def</code> / <code>example</code> look at their definition to work out what they need to pull in as arguments</p>\n</blockquote>\n<p>Actually regardless of <code>def</code> vs <code>lemma</code> Lean will include any variable mentioned in the proof--but not inside a tactic block because those can't be run until after we know what the type is.</p>",
        "id": 218120291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606503037
    },
    {
        "content": "<p>Thank you all, I finally got it.  I think this uses the smallest number of techniques required to prove this example in tactic mode.  I'd love to see a shorter tactic mode proof using fewer kinds of tactics.  It definitely requires both the <code>variable a : α</code> and <code>include a</code> to prove this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">rpx</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">rpx</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">expx</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">expx</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">rpx</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">intro</span> <span class=\"n\">r_again</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">rpx</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hr1</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"n\">hr1</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">constructor</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">intro</span> <span class=\"n\">hr2</span><span class=\"o\">,</span>\n          <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n          <span class=\"n\">exact</span> <span class=\"n\">hr</span> <span class=\"n\">hr2</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218137111,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606521046
    },
    {
        "content": "<p>Your <code>by_cases hr1</code> and the block below it is pointless</p>",
        "id": 218139349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606524690
    },
    {
        "content": "<p>You already have a proof of r</p>",
        "id": 218139354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606524715
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h_r</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">h_r</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h_r</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- case 1 : r</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">h_r</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,},</span>\n   <span class=\"c1\">-- case 2 : not r</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218139675,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606525214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> your proof doesn't go through in the context provided by the \"try it!\" of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">section 4.4</a>.   It doesn't know <code>rintros</code> or <code>w</code> or <code>H</code>.</p>\n<p><a href=\"/user_uploads/3121/fIVmyuOXhuEMq-5MMlDFmNhX/Screenshot-from-2020-11-27-20-28-25.png\">Screenshot-from-2020-11-27-20-28-25.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fIVmyuOXhuEMq-5MMlDFmNhX/Screenshot-from-2020-11-27-20-28-25.png\" title=\"Screenshot-from-2020-11-27-20-28-25.png\"><img src=\"/user_uploads/3121/fIVmyuOXhuEMq-5MMlDFmNhX/Screenshot-from-2020-11-27-20-28-25.png\"></a></div>",
        "id": 218140778,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606527079
    },
    {
        "content": "<p>You have to add <code>import tactic</code> at the top since <code>rintros</code> is a tactic from mathlib.</p>",
        "id": 218140790,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606527112
    },
    {
        "content": "<p>Yes, sorry Lars. <code>rintros</code>  slightly simplifies regular <code>intros</code> by letting you introduce the witness and proof components of the exisential seperately, rather than having to destruct them manually once they're in the proof context (also applies to other  structures beyond existentials) .</p>",
        "id": 218141558,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606528393
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> I'm happy to learn new tactics.</p>",
        "id": 218141619,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606528516
    },
    {
        "content": "<p>Here is another where I want to introduce a <code>∀</code> in tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">constructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hxa</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">npx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">hxa</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">npx</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Just before the first <code>sorry</code>, the goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>We have </p>\n<p><code>h1 : p ?m_1</code></p>\n<p>The <code>?m_1</code> is arbitrary.  It seems like it should be possible to rewrite this to </p>\n<p><code>∀ (x : α), p x,</code></p>\n<p>Is there a tactic or rewrite rule/theorem for this?  I couldn't find a <code>forall.intro</code> in mathlib.</p>",
        "id": 218143672,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606532060
    },
    {
        "content": "<p>When you invoke <code>constructor</code>, you have a goal of the form <code>∃ (x : α), ¬p x</code>, so you're breaking it up into two goals, one for the witness and one for the predicate. You haven't told lean what witness to use, hence the metavariable <code>?m_1</code>.  </p>\n<p>In tactic mode, the more  \"canonical way\" to do this is as follows  (using the rewrite tactic <code>rw</code>, which is in chapter 5 of TPil)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">not_forall</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hxa</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">npx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:=</span> <span class=\"n\">hxa</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">npx</span> <span class=\"n\">px</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218144163,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606532708
    },
    {
        "content": "<p>But you haven't \"introduced\" a <code>forall</code> here, you've just introduced a premise containing a negated <code>forall</code>, which is equivalent to an existential, hence the rewrite.</p>",
        "id": 218144182,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606532758
    },
    {
        "content": "<p>But again, in chapter 4 of TPiL I don't think you're expected to know about tactic mode, hence the rewrite</p>",
        "id": 218144230,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606532821
    },
    {
        "content": "<p>alternatively, rather than using <code>constructor</code>, once you have a witness, you should either use <code>use</code> or, especially for an existential, <code>existsi</code>, which I think is just a more usable tactic version of <code>exists.intro</code></p>",
        "id": 218144488,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606533217
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"319223\">@Logan Murphy</span> .  I was using <code>constructor</code> because it is one of the tactics in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#more-tactics\">Chapter 5</a>  that work with quantifiers.  <code>not_forall</code> is not mentioned in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf\">TPIL</a>.   It becomes necessary at this point to start reading the <code>mathlib</code> docs.  <code>rw</code> is introduced in the Natural Number Game along with a selection of <code>rw</code>-applicable equivalences from <code>mathlib</code>.  <code>mathlib</code> is not mentioned inTPIL.</p>\n<p>I guess we kind of come up against the limits of tactic mode around quantifiers.  Trying to unpack <code>not_forall</code> leads to term-mode proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">decidable.not_forall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">not.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n <span class=\"n\">not_forall_of_exists_not</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall_of_exists_not</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not.decidable_imp_symm</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">decidable.not_imp_symm</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">decidable.not_imp_symm</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable.by_contradiction</span> <span class=\"bp\">$</span> <span class=\"n\">hb</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>It seems that I should only be using tactic mode up to a certain point and then to really use Lean I have to start thinking in term mode.</p>",
        "id": 218146891,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606537758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20introduce.20a.20Forall.20in.20tactic.20mode/near/218146891\">said</a>:</p>\n<blockquote>\n<p>It becomes necessary at this point to start reading the <code>mathlib</code> docs.</p>\n</blockquote>\n<p>why? you can prove those lemmas without mathlib!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20introduce.20a.20Forall.20in.20tactic.20mode/near/218146891\">said</a>:</p>\n<blockquote>\n<p>It seems that I should only be using tactic mode up to a certain point and then to really use Lean I have to start thinking in term mode.</p>\n</blockquote>\n<p>not necessarily, but knowing term mode is useful. mathlib typically uses that style because it's faster and shorter.</p>",
        "id": 218155349,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606553910
    },
    {
        "content": "<p>i think the left-to-right proof requires classical reasoning, btw.</p>",
        "id": 218155566,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606554257
    },
    {
        "content": "<p>Using <code>not_forall</code> is cheating, that's the lemma you're proving</p>",
        "id": 218155636,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1606554428
    },
    {
        "content": "<p>Yes, my bad, you could just do the rewrite and the start and be done</p>",
        "id": 218163366,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1606568343
    },
    {
        "content": "<p>I have two questions regarding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Q1: This doesn't need <code>open classical</code>.  Does that mean this doesn't need <code>em</code>, or that <code>em</code> comes with <code>import tactic</code>?</p>\n<p>Q2:  The type of <code>not_forall</code> is <code>not_forall {α : Sort u_1} {p : α → Prop}</code>.  It's not letting me do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span>\n</code></pre></div>\n<p>or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exact</span> <span class=\"n\">not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>or this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>What is the syntax to apply a theorem in tactic mode in this case?</p>",
        "id": 218164368,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606569961
    },
    {
        "content": "<p>Q1: <code>open</code> is just for namespacing</p>",
        "id": 218164422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606570027
    },
    {
        "content": "<p><code>open classical</code> just means instead of <code>classical.foo</code> you can write <code>foo</code></p>",
        "id": 218164481,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606570107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20introduce.20a.20Forall.20in.20tactic.20mode/near/218164368\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This one's correct. If it's not working then your setup is not as described.</p>",
        "id": 218164557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606570258
    },
    {
        "content": "<p><code>import</code> and <code>open</code> and using classical axioms are three unrelated things.<br>\n(You have to import an axiom to use it but the ones used for classical logic are automatically imported implicitly.)</p>",
        "id": 218164691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606570491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20introduce.20a.20Forall.20in.20tactic.20mode/near/218164368\">said</a>:</p>\n<blockquote>\n<p>Q1: This doesn't need <code>open classical</code>.  Does that mean this doesn't need <code>em</code>, or that <code>em</code> comes with <code>import tactic</code>?</p>\n</blockquote>\n<p>the proof of <code>not_forall</code> uses classical reasoning, specifically the statement that all propositions are decidable, which turns the statement of <code>decidable.not_forall</code> into <code>not_forall</code>. this is explained at the end of TPIL in chapter 11.<br>\nbut to prove the statement, you don't need such big guns and can also just use <code>em</code>.</p>",
        "id": 218164865,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606570867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> that was my question, does it require <code>em</code>.  If so does that mean that the theorem is not constructive?</p>",
        "id": 218164929,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606570989
    },
    {
        "content": "<p>Yeah, I believe that's right</p>",
        "id": 218164943,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1606571042
    },
    {
        "content": "<p>yup! the de morgan rules don't hold in full symmetry for constructive logic. three hold, one doesn't.</p>\n<p>the exercise also tells you that part of the exercise is to figure out which ones to prove using classical reasoning :)</p>",
        "id": 218164979,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606571071
    },
    {
        "content": "<p>You can use <code>#print axioms not_forall</code> to see that it uses <code>classical.choice</code>, which is used to prove excluded middle</p>",
        "id": 218164993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606571143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  thanks for the new command <code>#print axioms</code>.  Also, you are right, this works, I don't know why I was having trouble before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_forall</span>\n</code></pre></div>",
        "id": 218165047,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606571235
    },
    {
        "content": "<p>So I'm trying to work this out again from scratch.  I am starting here, but I have a syntax problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"n\">α</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>\n<p>It won't let me apply the <code>lemma</code> in the second <code>check</code>. It raises this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"n\">α</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬?</span><span class=\"n\">m_1</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I am trying to break down my task as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I'm stuck on the syntax.  I am modelling this after a similar use in Chapter 3, which didn't raise any errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">definition_imply</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imply_definition</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">implication</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">imply_definition</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">definition_imply</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218165293,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606571700
    },
    {
        "content": "<p>note the curly brackets</p>",
        "id": 218165354,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606571780
    },
    {
        "content": "<p>(<a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#implicit-arguments</a>)</p>",
        "id": 218165364,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606571812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I don't understand the hint.  I have curly brackets in the lemma statement.  The form of the statement is exactly like <a href=\"https://github.com/leanprover-community/mathlib/blob/801dea942a57af8d083ff60fa7a89707aec81063/src/logic/basic.lean#L710\">not_forall</a>.  However, this doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall_implies_exist_not</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>giving error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218165625,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606572270
    },
    {
        "content": "<p>I don't understand what you're expecting to achieve by moving the whole statement of the example into a lemma</p>",
        "id": 218165656,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606572353
    },
    {
        "content": "<p>since both statements are the same, it's unlikely you can prove one by doing <code>split</code> and then using the other</p>",
        "id": 218165700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606572387
    },
    {
        "content": "<p>I guess you didn't mean to write <code>↔</code> in <code>not_forall_implies_exist_not</code></p>",
        "id": 218165704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606572410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> you should learn to read the error messages. It's getting to the point where you should be able to do this. Many of your recent questions are \"why does this not work, the error says \"Lean was expecting X but you gave it Y\"\", and really this is the answer to your question.</p>",
        "id": 218165742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606572484
    },
    {
        "content": "<p>In particular for this question, the error will be on <code>exact</code>, the goal is exactly what X says, what you gave it after the <code>exact</code> is exactly what Y says, and you are asking why it doesn't work.</p>",
        "id": 218165778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606572550
    },
    {
        "content": "<p>Lean is also very sensitive to details and context--I think trying to look at what mathlib does isn't going to help you at this point.</p>",
        "id": 218166043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> because I am stuck doing it all in one place, I find it helpful to break it down into lemmas for each direction.  I know it is the same, but subproceduralizing helps me think.</p>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I fixed one thing which was I was using <code>↔</code> when I meant <code>→ </code>.  However, with this fix, it still doesn't match.  This should be fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall_implies_exist_not</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exist_not_implies_not_forall</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it is giving me this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I simplify the example further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span>         <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span>       <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>     <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>\n<p>Then the first two <code>#check</code>s work and the third does not, giving error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span>\n</code></pre></div>\n<p>I  do not understand this error message.</p>",
        "id": 218166284,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606573450
    },
    {
        "content": "<p>did you see <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>'s message above?</p>",
        "id": 218166296,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573494
    },
    {
        "content": "<p>do you know what <code>{p : α → Prop}</code> means?</p>",
        "id": 218166299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573503
    },
    {
        "content": "<p>I think it means that <code>p</code> can be inferred and that <code>p</code> has type <code>α → Prop</code>.</p>",
        "id": 218166314,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606573547
    },
    {
        "content": "<p>There are three kinds of brackets in Lean. <code>()</code> means \"the user supplies this\". <code>{}</code> means \"The user does not supply this, a system called the unification system will deal with it\". And <code>[]</code> means \"the user does not supply this, a system called the type class inference system will supply it\".</p>",
        "id": 218166322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606573556
    },
    {
        "content": "<p><del>You supplied p, but it was in <code>{}</code> brackets so the system had already supplied it.</del> (actually, Lean hadn't even got to <code>p</code> yet, as Marc points out)</p>",
        "id": 218166362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606573581
    },
    {
        "content": "<p>Changing '{}' to '()' I still get an error on the 3rd <code>#check</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span>         <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span>       <span class=\"c1\">-- works</span>\n<span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>     <span class=\"c1\">-- doesn't work</span>\n</code></pre></div>\n<p>The error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">p</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 218166383,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606573629
    },
    {
        "content": "<p>this is not actually the problem here <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , the problem is the <code>include a</code>.</p>",
        "id": 218166385,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606573632
    },
    {
        "content": "<p>OK removing the <code>include a</code> makes it work and now I am confused.</p>",
        "id": 218166437,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606573692
    },
    {
        "content": "<p>I think you should learn the really useful trick <code>#check @exist_not_implies_not_forall</code>. It tells you what all the inputs are.</p>",
        "id": 218166438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606573699
    },
    {
        "content": "<p>You can now remove/add <code>include a</code> and see how the output of that <code>#check</code> changes.</p>",
        "id": 218166446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606573727
    },
    {
        "content": "<p>and, more generally, reading Lean's output rather than thinking in binary \"works/doesn't work\"</p>",
        "id": 218166447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573733
    },
    {
        "content": "<p>The <code>#check @...</code> thing was a game-changer for me. I used to struggle with <code>#check</code>. There are some instances when it throws up a very weird error. But adding the <code>@</code> makes everything much clearer.</p>",
        "id": 218166503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606573827
    },
    {
        "content": "<p>OK without <code>include a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with <code>include a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so in that case it wants <code>a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 218166521,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606573872
    },
    {
        "content": "<p>So finally I am home</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218166587,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606573968
    },
    {
        "content": "<p>You could delete <code>variable a : α</code> too, since it's not needed for this theorem</p>",
        "id": 218166615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> by writing <code>include a</code>, you made <code>a : α</code> a parameter to <code>exist_not_implies_not_forall</code>. <br>\nto repeat some stuff from TPIL:<br>\n<code>variable (foo : bar)</code> means that all the following definitions will take (foo : bar) as argument <em>if</em> <code>foo</code> is used either in the signature of the <code>def</code> or the <em>term</em> of the <code>def</code> supplied after <code>:=</code>.<br>\nfor technical reasons, this doesn't work well if the term after <code>:=</code> is supplied in tactic mode (explained in section 5.1), so you need to tell lean explicitly to make it a parameter, using <code>include</code>.</p>",
        "id": 218166663,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606574090
    },
    {
        "content": "<p>unfortunately, in this case you did not actually want it as a parameter :)</p>",
        "id": 218166722,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606574170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20do.20I.20introduce.20a.20Forall.20in.20tactic.20mode/near/218166322\">said</a>:</p>\n<blockquote>\n<p>There are three kinds of brackets in Lean. <code>()</code> means \"the user supplies this\". <code>{}</code> means \"The user does not supply this, a system called the unification system will deal with it\". And <code>[]</code> means \"the user does not supply this, a system called the type class inference system will supply it\".</p>\n</blockquote>\n<p>There are actually five. Number four is <code>{{}}</code> aka <code>⦃⦄</code>, which means that they are not supplied by the user, and the system only inserts them if other arguments after are inserted by the user, and number five is <code>aux_decl</code> which has no user level syntax and is used to insert the fake signature of a recursive function inside its own body, as well as to compile matches and destructuring lets (you might have seen things in the context called <code>_match</code> and <code>_let_match</code> before).</p>",
        "id": 218168284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606576559
    },
    {
        "content": "<p>/me takes off pedant hat</p>",
        "id": 218168330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606576574
    },
    {
        "content": "<p>lean4 now also has the <code> </code> brackets: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L31\">https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean#L31</a></p>",
        "id": 218168403,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606576721
    },
    {
        "content": "<p>I can't figure out what this is referring to</p>",
        "id": 218168944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606577610
    },
    {
        "content": "<p><code>ε</code> and <code>α</code> are not quantified at all</p>",
        "id": 218169010,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606577723
    },
    {
        "content": "<p>Wasn't there another type of bracket like <code>(+ ... +)</code> which gives a hint to the simplifier?</p>",
        "id": 218169015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606577738
    },
    {
        "content": "<p>Ah, you are thinking of <code>(: ... :)</code> which is a hint to the e-matcher</p>",
        "id": 218169195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606578042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you show me how to use <code>let</code> and <code>match</code> inside a <code>begin end</code>?  <code>match</code> has its own <code>end</code>.  <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">Chapter 4</a> doesn't have an example of use of <code>let</code> or <code>match</code> inside a tactic-mode <code>begin end</code> proof.</p>",
        "id": 218169197,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606578050
    },
    {
        "content": "<p>There is a tactic called <code>let</code>, you can use it just like <code>have</code></p>",
        "id": 218169206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606578078
    },
    {
        "content": "<p>there is no <code>match</code> tactic, but <code>rcases</code> does most of what <code>match</code> can do</p>",
        "id": 218169207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606578094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <code>(: ... :)</code> isn't actually a binder, it surrounds a <em>subterm</em> of an expression, and I'm not sure exactly how it's encoded, probably as a macro</p>",
        "id": 218169325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606578312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> as one of my subgoals I have re-proved this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo1</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}:</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>with this tactic-mode proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo1</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}:</span> <span class=\"o\">((</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a more elegant purely tactic-mode proof which uses <code>let</code> or <code>rcases</code>?</p>",
        "id": 218170338,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606580017
    },
    {
        "content": "<p>there is no let or match in the term proof either</p>",
        "id": 218171327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606581733
    },
    {
        "content": "<p>you can replace the <code>intro assume intro</code> with just <code>intros h1 x h2</code> but if a proof is just <code>intros, exact</code> then there isn't really a point in using tactic mode</p>",
        "id": 218171347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606581798
    },
    {
        "content": "<p>I would like to dig into <code>not_forall</code> and pull out one side of it.   The definition below of <code>my_not_forall</code> is exactly like <a href=\"https://github.com/leanprover-community/mathlib/blob/801dea942a57af8d083ff60fa7a89707aec81063/src/logic/basic.lean#L710\">not_forall</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">α</span>  <span class=\"c1\">-- gives α : Sort u_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">not_forall</span>  <span class=\"c1\">-- gives not_forall : (¬∀ (x : ?M_1), ?M_2 x) ↔ ∃ (x : ?M_1), ¬?M_2 x</span>\n<span class=\"k\">#check</span> <span class=\"n\">decidable.not_forall</span>   <span class=\"c1\">-- gives decidable.not_forall : (¬∀ (x : ?M_1), ?M_2 x) ↔ ∃ (x : ?M_1), ¬?M_2 x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_not_forall</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">decidable.not_forall_not</span>\n</code></pre></div>\n<p>however I am getting error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Display</span> <span class=\"n\">GoalDisplay</span> <span class=\"n\">Messages</span>\n<span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">52</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems I am missing a <code>decidable</code> constructor which gets inferred when it is in <code>mathlib</code> but not here?  Is there a way to fix this?  I really want to get down to this part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">not.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decidable.not_forall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">not.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n <span class=\"n\">not_forall_of_exists_not</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>but it seems like I need to wrap things with <code>decidable</code> constructor at some point to get down into <code>not.decidable_imp_symm</code> and <code>nx.decidable_imp_symm </code>.</p>",
        "id": 218172458,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606583584
    },
    {
        "content": "<p>you might want to try to prove it regularly instead and wait with this until you've read chapter 11. the mathlib proof uses an attribute that makes all propositions decidable (as a result of em).<br>\ntrying to do this with typeclasses and decidability should be very confusing if you haven't read the corresponding sections.</p>",
        "id": 218172877,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606584252
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I am stuck here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with goal state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I will wait on this <code>sorry</code>  until after Chapter 11.</p>",
        "id": 218173283,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606585021
    },
    {
        "content": "<p>don't use <code>a</code>, it's a red herring</p>",
        "id": 218173441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606585296
    },
    {
        "content": "<p>You have two things in your context that imply <code>false</code>. One of them will get you more or less back to where you started, so try the other one</p>",
        "id": 218173505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606585397
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">by_contra</span> <span class=\"n\">foobar</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">foobar</span>\n</code></pre></div>\n<p>is basically doing nothing.</p>",
        "id": 218173584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606585544
    },
    {
        "content": "<p>here's another hint (not the full proof, but close):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we'd really like to use h2 now. we already have an x! how could we get ¬p x?</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 218173715,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606585776
    },
    {
        "content": "<p>I looked in TPIL again and it actually <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#the-existential-quantifier\">spells out the proof in term mode</a>, I just have to understand this and maybe term-mode-ify it for extra self-brownie-points.  This is what is done inside <code>mathlib</code>, the <code>r</code> is unified with <code>false</code>.  <strong>Note</strong>: This uses and requires the red herring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">by_cases</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">hap</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnap</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">by_contra</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnex</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n              <span class=\"k\">have</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"n\">by_contra</span>\n                  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n                      <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)⟩,</span>\n                    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnex</span> <span class=\"n\">hex</span><span class=\"o\">),</span>\n              <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnap</span> <span class=\"n\">hap</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 218174084,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606586312
    },
    {
        "content": "<p>This proof uses 10 levels of indents/abstraction to get it done.  I don't know if it can be done in fewer levels.</p>",
        "id": 218174159,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606586413
    },
    {
        "content": "<p>yeah, don't use term mode and it will solve your indent problem</p>",
        "id": 218174689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606587322
    },
    {
        "content": "<p>I can tell you that you don't need three choicy things (by_cases, by_contra, by_contra)</p>",
        "id": 218174709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606587360
    },
    {
        "content": "<p>The proof in mathlib doesn't look like this at all, it doesn't use the implies r version</p>",
        "id": 218174948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606587757
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">decidable.not_forall</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">not.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">nx</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nx.decidable_imp_symm</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n <span class=\"n\">not_forall_of_exists_not</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 218174957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606587791
    },
    {
        "content": "<p>(also, the <code>((∀ x, p x) → r) → (∃ x, p x → r)</code> proof is much trickier than what you want to prove!)</p>",
        "id": 218175144,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606588171
    },
    {
        "content": "<p>Letting the code in TPIL and NNG do most of the work, I got this proof, but the ending is weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n<span class=\"kn\">include</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)⟩,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span>  <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">aprf_to_eprf</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">by_cases</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">hap</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnap</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">by_contra</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnex</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n              <span class=\"k\">have</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"n\">by_contra</span>\n                  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n                      <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)⟩,</span>\n                    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnex</span> <span class=\"n\">hex</span><span class=\"o\">),</span>\n              <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnap</span> <span class=\"n\">hap</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">aprf_to_eprf</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">pxf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">pxf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218179643,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606595361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> can you prove it from my hint? if not, i can give you one more step :)</p>",
        "id": 218180167,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606596286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> here is my whole proof for the original exercise.  I will go back and look harder at your hint now.  Don't give me the extra step yet.  Note my  setup leads to a proof with some strange artifacts like having to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>and invoke with lots of arguments<code>exact not_forall_implies_exist_not α a r p</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n<span class=\"kn\">include</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">apxf_to_epxf</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">by_cases</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">hap</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnap</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">by_contra</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnex</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n              <span class=\"k\">have</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"n\">by_contra</span>\n                  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n                      <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)⟩,</span>\n                    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnex</span> <span class=\"n\">hex</span><span class=\"o\">),</span>\n              <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnap</span> <span class=\"n\">hap</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">iff.rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">apxf_to_epxf</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">pxf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_iff_imp_false</span> <span class=\"n\">at</span> <span class=\"n\">pxf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">pxf</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">npx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">npx</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exist_not_implies_not_forall</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218180260,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606596426
    },
    {
        "content": "<p>btw:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kn\">include</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">apxf_to_epxf</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">by_cases</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"n\">hap</span><span class=\"o\">⟩)</span>\n        <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnap</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n          <span class=\"n\">by_contra</span>\n            <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnex</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n              <span class=\"k\">have</span> <span class=\"n\">hap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"n\">by_contra</span>\n                  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n                      <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">)⟩,</span>\n                    <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnex</span> <span class=\"n\">hex</span><span class=\"o\">),</span>\n              <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hnap</span> <span class=\"n\">hap</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"n\">apxf_to_epxf</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 218180582,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606596992
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> .  What is the extra hint?  I only got this far with the first hint and I'm stuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- we'd really like to use h2 now. we already have an x! how could we get ¬p x?</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218180930,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606597578
    },
    {
        "content": "<p>one thing you need to learn for these kinds of proofs is when something you're trying to do is a bad idea. <br>\nfor instance, if you're looping it's a bad idea. or using <code>by_contra h, apply h</code>. in this case you're destroying perfectly fine context information with <code>exfalso</code>!</p>",
        "id": 218181013,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606597732
    },
    {
        "content": "<p>Actually <code>finish</code> still works after <code>exfalso</code> ;-)</p>",
        "id": 218181042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606597774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> that doesn't surprise me at all, given that you've still got h1 and h2.</p>",
        "id": 218181091,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606597804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> could you maybe do something other than <code>exfalso</code> to get <code>¬p x</code>?</p>",
        "id": 218181116,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606597862
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">negneg</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">negneg</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218182099,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1606599229
    },
    {
        "content": "<p>shorter (without the cumbersome double-negation departure that you could have also avoided had you done <code>by_cases h3 : p x</code> instead):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218182397,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606599649
    },
    {
        "content": "<p>term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">not_forall_implies_exist_not'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)))</span>\n</code></pre></div>",
        "id": 218182424,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606599690
    }
]