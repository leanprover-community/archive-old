[
    {
        "content": "<p>Hi, I'm currently working through the \"equality and calculational proofs\" section (in First-order logic in Lean) of the Logic and Proofs course, but I'm having some trouble understanding the syntax of equality proofs. In particular, I'm a little confused on the use of the rewrite command. The tutorial says that I can \"rewrite\" the goal of a particular proof (in this case, x = z) to be y = z by using the syntax \"rewrite \\&lt;- h1 : y = x\". My question is, how do you know what rules are applicable and parsable through this method? What makes the use of \\&lt;- essential here, as I can't really see how this rule is being \"applied\" in the first place - in my intuition, I would think that you would consider \"eq.subst\" or something similar to be the \"rule\" that you would need to use. Similarly for the usage of \"calc\", when it says I can write \"calc e1 = e2 : justification 1\", is \"justification 1\" literally just a justification, or should I interpret it as a type? Thanks!</p>",
        "id": 198021249,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1589862540
    },
    {
        "content": "<p>use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to quote code</p>",
        "id": 198021383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589862725
    },
    {
        "content": "<blockquote>\n<p>how do you know what rules are applicable and parsable through this method?</p>\n</blockquote>\n<p>I'm not sure I understand the question. When you use <code>rw (h1 : y = x)</code>, it will rewrite all occurrences of <code>y</code> to <code>x</code> in the goal; when you use <code>rw &lt;- (h1 : y = x)</code> it rewrites <code>x</code> to <code>y</code> instead. Since the goal is <code>x = z</code>, the first one would have no effect because there are no <code>y</code>'s in the goal, but the second will have an effect and result in the new goal <code>y = z</code></p>",
        "id": 198021472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589862883
    },
    {
        "content": "<blockquote>\n<p>Similarly for the usage of \"calc\", when it says I can write \"calc e1 = e2 : justification 1\", is \"justification 1\" literally just a justification, or should I interpret it as a type?</p>\n</blockquote>\n<p>\"justification 1\" is a term proof of <code>e1 = e2</code>, by any means you would like</p>",
        "id": 198021495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589862936
    },
    {
        "content": "<blockquote>\n<p>What makes the use of \\&lt;- essential here, as I can't really see how this rule is being \"applied\" in the first place - in my intuition, I would think that you would consider \"eq.subst\" or something similar to be the \"rule\" that you would need to use. </p>\n</blockquote>\n<p><code>rw</code> uses <code>eq.subst</code> under the hood. But its user level semantics is as I described; it replaces occurrences of the lhs of the input theorem in the goal with the rhs. In order to do that it applies the theorem <code>eq.rec_on : P a -&gt; a = b -&gt; P b</code>, and has to come up with an appropriate value for <code>P</code> such that <code>P b</code> reduces to the goal and <code>P a</code> reduces to what we want the new subgoal to be. (It also has to flip the equality when applying this theorem if you don't use <code>&lt;-</code> here.)</p>",
        "id": 198021664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863177
    },
    {
        "content": "<p>Is <code>rewrite</code> unique to equality proofs, then? It would make more sense to me if these were, in a sense, just \"hardcoded\" to behave exactly how you would intuitively believe it to. Rewriting a goal of <code>x = z</code> to <code>y = z</code> by knowing that <code>y = x</code> is very intuitively clear.</p>",
        "id": 198021818,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1589863376
    },
    {
        "content": "<p>yes, <code>rw h</code> only works if <code>h</code> is either an equality or an iff, and in the latter case it applies <code>propext</code> to turn it into an equality anyway</p>",
        "id": 198021837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863426
    },
    {
        "content": "<p>However the goal doesn't have to be an equality; the interesting case is when you have something like <code>|- foo (a + bar b) &gt; 7</code> and you <code>rw (h : b = c)</code> to get the new goal <code>|- foo (a + bar c) &gt; 7</code></p>",
        "id": 198021896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863504
    },
    {
        "content": "<p>In your example you don't really need <code>rw</code> as you could use transitivity instead of substitution</p>",
        "id": 198021975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589863591
    }
]