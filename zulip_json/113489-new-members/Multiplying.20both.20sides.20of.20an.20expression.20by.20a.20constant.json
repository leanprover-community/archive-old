[
    {
        "content": "<p><strong>MWE</strong><br>\nIs there an automated way to do stuff like this? The best I can think of is to prove 2!= 0, multiply both sides by 2, rw <code>mul_add, mul_sub, add_mul, add_sub</code> a bunch of times, then prove <code>2*(1/2) = 1</code> and apply that with some other algebra. I feel like there should be a faster way I'm missing.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><strong>More Context</strong><br>\nI'm having trouble massaging this identity to prove Binet's formula for the Fibonacci numbers. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">def</span> <span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">psi</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">psi_phi_identity</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">phi</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">psi</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">psi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">phi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">psi</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"n\">phi</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">psi</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">div_pow</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">],</span>\n<span class=\"n\">sorry</span><span class=\"o\">,},</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197721763,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589562137
    },
    {
        "content": "<p>how about:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197725095,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1589563732
    },
    {
        "content": "<p>sadly not of great generality</p>",
        "id": 197725128,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1589563750
    },
    {
        "content": "<p>Here are some thoughts on Binet's formula which might end up in <a href=\"https://leanprover-community.github.io/mathematics_in_lean/\">Mathematics in Lean</a> at some point.</p>",
        "id": 197725446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589563888
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197725460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589563898
    },
    {
        "content": "<p>hey, where is the <code>ring++</code> usage??</p>",
        "id": 197725486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589563917
    },
    {
        "content": "<p>that works too:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">e</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring_rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197725619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589563972
    },
    {
        "content": "<p>modulo the existence of the tactic</p>",
        "id": 197725658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589563987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Multiplying.20both.20sides.20of.20an.20expression.20by.20a.20constant/near/197725658\">said</a>:</p>\n<blockquote>\n<p>modulo the existence of the tactic</p>\n</blockquote>\n<p>Now you are proving like a mathematician!</p>",
        "id": 197725834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589564068
    },
    {
        "content": "<p>The tactic is left as an exercise for the reader</p>",
        "id": 197726920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564573
    },
    {
        "content": "<p>Of course Mochizuki also left a tactic as an exercise for the reader, and it's stumped Scholze.</p>",
        "id": 197728525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589565306
    },
    {
        "content": "<p>What happened to rumors of Mochizuki's work being published?</p>",
        "id": 197744502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589572165
    },
    {
        "content": "<p>Last thing I heard, it happened.</p>",
        "id": 197745053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572523
    },
    {
        "content": "<p>Peter Woit had a long discussion on his blog, and he summarised it in some 40 page pdf</p>",
        "id": 197745075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572539
    },
    {
        "content": "<p>PRIMS announced they were going to do it</p>",
        "id": 197746521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589573352
    }
]