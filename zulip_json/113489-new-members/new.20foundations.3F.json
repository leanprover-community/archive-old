[
    {
        "content": "<p>I've seen some discussions related to type theory eventually becoming the new foundations of mathematic, replacing set theory and all that. Could anyone more competent in that field actually tell me how reasonable is that assumption? Is it possible that math needs no new foundations and type theory could be used just for proof checking and automatization alone, without the need for any change of paradigme?  Thanks!</p>",
        "id": 270880228,
        "sender_full_name": "Daniel Ever",
        "timestamp": 1644139547
    },
    {
        "content": "<p>Mathematics doesn't need foundations at all -- just ask Gauss, Euler or Riemann. In fact just ask most of the people working in my department, many of whom will have no idea what the axioms of ZFC are and just use the kind of arguments which feel natural. It's not until you start asking \"weird\" questions like \"what is a function\" that you have to worry about foundations. I dispute your implicit assertion that the current foundations of mathematics are set theory. I don't think practical mathematics has foundations, 99% of people still work like Gauss</p>",
        "id": 270885487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644147558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/new.20foundations.3F/near/270885487\">said</a>:</p>\n<blockquote>\n<p>Mathematics doesn't need foundations at all -- just ask Gauss, Euler or Riemann. In fact just ask most of the people working in my department, many of whom will have no idea what the axioms of ZFC are and just use the kind of arguments which feel natural. It's not until you start asking \"weird\" questions like \"what is a function\" that you have to worry about foundations. I dispute your implicit assertion that the current foundations of mathematics are set theory. I don't think practical mathematics has foundations, 99% of people still work like Gauss</p>\n</blockquote>\n<p>If I got your idea right, it's somewhat close to Feyerabend's methodological anarchism, basically 'we use whatever produces the results', regardless of any other attached considerations?</p>",
        "id": 270886355,
        "sender_full_name": "Daniel Ever",
        "timestamp": 1644148817
    },
    {
        "content": "<p>I don't think it's quite the same thing. In math it's important to know that we <em>could</em> reduce our methods to (say) ZFC--that's how we know our theorems are correct. But once we know it's possible, we don't really care to know any more about how it's done. And choosing a different foundational system than ZFC makes no difference as long as it proves more or less the same theorems.</p>",
        "id": 270886744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644149355
    },
    {
        "content": "<p>Here is one viewpoint on how mathematicians work in practice and how that relates to a specific foundational system such as ZFC:<br>\n<a href=\"https://mathoverflow.net/questions/90820/set-theories-without-junk-theorems/90945#90945\">https://mathoverflow.net/questions/90820/set-theories-without-junk-theorems/90945#90945</a></p>",
        "id": 270886753,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644149385
    },
    {
        "content": "<p>I guess it's also important to note that a lot has changed since the time of (particularly) Euler, who really did \"use whatever produced the results\". Notably, set theory was introduced and then found to contain paradoxes if one wasn't careful to avoid them.</p>",
        "id": 270887020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644149793
    },
    {
        "content": "<p>But most mathematicians will learn early on (maybe implicitly) that there are no foundational issues in their area or that someone else has already dealt with them, and never think about foundations.</p>",
        "id": 270887466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644150508
    },
    {
        "content": "<p>Yes Reid makes the point clearly. The practicing mathematician doesn't think about foundations and argues the way they've learnt to argue from reading published and refereed books or papers. The set theorists know that it can all be translated into set theory, the type theorists know that it can all be translated into type theory. The only indication that set theory is somehow the established language is that we say \"a group is a set equipped with...\" rather than \"a group is a type equipped with...\".</p>",
        "id": 270887557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644150685
    },
    {
        "content": "<p>So, the main motivation to somewhat embrace type theory lies in the fact it allows us to do the math just as before, but now we can formalize it way better to see our gaps in knowledge, gain certainty in our proofs, use the wider scope of instruments (like library_search etc.), and generally be able to investigate every step of deduction with the clarity not easily achieved in 'usual math' which heavily relies on natural languages?</p>",
        "id": 270888193,
        "sender_full_name": "Daniel Ever",
        "timestamp": 1644151607
    },
    {
        "content": "<p>If you mean why type theory is more common for proof assistants, this is a different story, and it's mainly for practical reasons. You can have a look a <a href=\"https://mathoverflow.net/questions/376839/what-makes-dependent-type-theory-more-suitable-than-set-theory-for-proof-assista\">this</a> mathoverflow question.</p>",
        "id": 270888626,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644152171
    },
    {
        "content": "<p>Speaking for myself personally, the reason to formalize mathematics is all of those goals you listed, and the reason to do so using type theory specifically is that empirically it seems to work better (or at least not worse) than set theory. If it was way more effective to formalize math in set theory then I would use set theory instead.</p>",
        "id": 270888636,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644152205
    },
    {
        "content": "<p>But  note that you can use a proof assistant without knowing its foundations, similarly as one do mathematics without never asking \"what is a set/type?\".</p>",
        "id": 270888664,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644152262
    },
    {
        "content": "<p>also note that it's possible to swap out the \"backend\" of a proof assistant so that it's sitting on a different foundation without affecting the user experience at all. It is well known that all the major foundational systems are (in principle, approximately) equivalent, and with a translation layer you can make it so that \"you were doing set theory all along\"</p>",
        "id": 270888937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644152532
    },
    {
        "content": "<p>Reading your link now, thanks!  But using proof assistant without understanding why it works for me feels like defining some function, like determinant, by saying 'it's a black box that tells you something about linear dependence'. Guess at some point you may find yourself a person in Searl's Chinese room, typing symbols and checking the output without actually understanding what's going on.</p>",
        "id": 270888963,
        "sender_full_name": "Daniel Ever",
        "timestamp": 1644152624
    },
    {
        "content": "<p>Using a proof assistant without understanding why it works is a different matter. There are things other than foundations that come to bear when understanding how the proof assistant ticks</p>",
        "id": 270889026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644152707
    },
    {
        "content": "<p>as a user, it's probably more important to understand elaboration order than induction principles in dependent type theory to use lean</p>",
        "id": 270889049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644152762
    },
    {
        "content": "<p>Maybe a more useful analogy is that it's like writing a program in Python without knowing the details of the instruction set that the hardware actually executes.</p>",
        "id": 270889290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644153100
    },
    {
        "content": "<p>And your Python program doesn't care about the underlying instruction set architecture at all (and you could run your Python program inside an emulator for one architecture that is actually running on a different architecture, etc)</p>",
        "id": 270889340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644153136
    },
    {
        "content": "<p>but isn't really vague an unintuitive, trying to understand what certain tactics does, when it can or can't be applied?  both the descriptions of tactics as well as error messages seem to require some familiriaty with type theory at a basic level (or so the impression I got)</p>",
        "id": 270889440,
        "sender_full_name": "Daniel Ever",
        "timestamp": 1644153303
    },
    {
        "content": "<p>Lean's \"frontend\" is based on type theory and so you definitely have to understand Lean's flavor of type theory to some extent to use it effectively.</p>",
        "id": 270889647,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644153644
    },
    {
        "content": "<p>But Lean's backend/kernel could be based on ZFC and then you wouldn't also need to understand ZFC to use Lean.</p>",
        "id": 270889754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644153841
    },
    {
        "content": "<p>In fact it isn't based on ZFC, because that would be extra work and in the context of Lean there is no real need to do it.</p>",
        "id": 270889798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644153875
    },
    {
        "content": "<p>ok, that makes things easier, thanks!</p>",
        "id": 270889950,
        "sender_full_name": "Daniel Ever",
        "timestamp": 1644154102
    },
    {
        "content": "<p>My understanding is that you use a language, like Lean, to give instructions to a computer to perform some sequence of operations.  While I may have an <em>interpretation</em> of what Lean is checking, ultimately the computer converts everything to machine language.  At that level, I certainly do not know the foundations/meaning of the instructions,, but that does not prevent me from <em>thinking</em> that I know what is going on at the very abstract mathematical level.</p>\n<p>Where you draw the line between what you <em>think</em> you understand and what you <em>assume as obvious</em> is a very personal and subjective choice.</p>",
        "id": 270895652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1644161803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/new.20foundations.3F/near/270889798\">said</a>:</p>\n<blockquote>\n<p>In fact it isn't based on ZFC, because that would be extra work and in the context of Lean there is no real need to do it.</p>\n</blockquote>\n<p>This raises the question, though, of whether we'd be able to trust that the translation to ZFC preserved the meanings of our definitions and theorems. What if the elaborator is generally good at catching errors, so the translation is rarely checked, and no one notices that the kernel is basically getting statements in the <a href=\"https://web.archive.org/web/20110815201957/http://estatis.coders.fm/falso/\">Falso</a> axiomatic system for complicated enough statements? That's one reason, beyond extra work, to have the frontend and backend use similar formal systems.</p>\n<p>Granted, I've never checked what the Lean kernel sees even once!</p>",
        "id": 270901226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644168982
    },
    {
        "content": "<p>The easiest way to fix this issue is to actually look at the results (and set up the translation so that the results are lookable)</p>",
        "id": 270905364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644173978
    },
    {
        "content": "<p>you only need to verify that the axioms are good, no extra axioms have snuck in, and the statements of theorems are good. This last bit is the hardest, especially because lean has lots of fancy implicit stuff, but presumably a proof of false would stick out. Well, if you are trying to defend against Falso then looking at the axioms is enough, but the dual of that (Trutho?) would be if every statement translates to <code>True</code>, so even though the axioms are fine you aren't proving anything of interest</p>",
        "id": 270905588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644174151
    }
]