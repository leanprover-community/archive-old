[
    {
        "content": "<p>I have the following code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span><span class=\"bp\">.</span><span class=\"n\">products</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span><span class=\"bp\">.</span><span class=\"n\">pullbacks</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">large_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">Dc</span> <span class=\"o\">:</span> <span class=\"n\">large_category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">products</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pullbacks</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_pullbacks</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùíû</span> <span class=\"n\">Dc</span> <span class=\"n\">products</span> <span class=\"n\">pullbacks</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">covering</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">obj</span> <span class=\"n\">i</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fan1</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CU</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">CU</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">CU</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span><span class=\"o\">),</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">pullback</span> <span class=\"o\">(</span><span class=\"n\">CU</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CU</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">fan1</span>\n</pre></div>\n\n\n<p>The <code> #check fan1</code> gives:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">fan1</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CU</span> <span class=\"o\">:</span> <span class=\"n\">covering</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">CU</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">CU</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"err\">?</span><span class=\"n\">M_1</span>\n</pre></div>\n\n\n<p>Why does U have type ?M_1 ? Is this because C is a variable? or have I made some weird error in my definitions?</p>",
        "id": 181945134,
        "sender_full_name": "Calle S√∂nne",
        "timestamp": 1574789990
    },
    {
        "content": "<p>well supposedly it has the same type as U</p>",
        "id": 181945305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1574790068
    },
    {
        "content": "<p>which is a meta variable</p>",
        "id": 181945318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1574790076
    },
    {
        "content": "<p>Usually it's better to write, for example, <code>#check @fan1</code></p>",
        "id": 181945794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574790393
    },
    {
        "content": "<p>It's because <code>C</code> is <code>{squiggly}</code> so <code>#check</code> without the <code>@</code> won't print it.</p>",
        "id": 181946992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574791156
    }
]