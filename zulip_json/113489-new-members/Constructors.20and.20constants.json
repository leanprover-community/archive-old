[
    {
        "content": "<p>Hello! Trying to formalize labelled transition systems by building some types and structures. If I write something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"n\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">f</span>\n</code></pre></div>\n\n\n<p>Lean complains that 'baz' is noncomputable and depends on 'f'.  What is the problem? <br>\nAs a counterexample, I can write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">bar&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">baz&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">bar&#39;</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">10</span>\n</code></pre></div>\n\n\n<p>which behaves as expected. Why can Lean do this with nat's but not with constants of type foo?</p>",
        "id": 203380308,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594298618
    },
    {
        "content": "<p>I suspect <code>constant</code> doesn't mean what you think it means.</p>",
        "id": 203380991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299020
    },
    {
        "content": "<p>Using <code>constant</code> is adding a new axiom to your logical foundations.</p>",
        "id": 203381015,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299044
    },
    {
        "content": "<p>In particular, one without a computational interpretation, and hence anything using it becomes <code>noncomputable</code>.</p>",
        "id": 203381035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299061
    },
    {
        "content": "<p>Generally, I would avoid entirely using <code>constant</code> or <code>parameter</code>.</p>",
        "id": 203381050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299075
    },
    {
        "content": "<p><code>variables</code> is probably better</p>",
        "id": 203381089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594299102
    },
    {
        "content": "<p>Ah, thank you very much Scott.</p>",
        "id": 203381180,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594299130
    },
    {
        "content": "<p>I was able to get the desired behavior just using an enumerated type. <br>\nIf I can ask another question about building structures, let's say I define an LTS structure as follows.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">state</span>\n<span class=\"bp\">|</span> <span class=\"n\">s₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">s₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">s₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">s₄</span>\n<span class=\"kn\">open</span> <span class=\"n\">state</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">label</span>\n<span class=\"bp\">|</span> <span class=\"n\">l₁</span>\n<span class=\"bp\">|</span> <span class=\"n\">l₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">l₃</span>\n<span class=\"bp\">|</span> <span class=\"n\">l₄</span>\n<span class=\"kn\">open</span> <span class=\"n\">label</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">label</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"bp\">×</span> <span class=\"n\">label</span> <span class=\"bp\">×</span> <span class=\"n\">state</span><span class=\"o\">))</span>\n<span class=\"kn\">open</span> <span class=\"n\">LTS</span>\n\n<span class=\"n\">def</span> <span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>  <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">s₄</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">l₄</span><span class=\"o\">}</span> <span class=\"o\">{(</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">s₃</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">s₄</span><span class=\"o\">)}</span>\n</code></pre></div>\n\n\n<p>When I query #reduce M₁, the result is abstracted over the arguments I've provided to the mk constructor. The result is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">s₁</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">s₂</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">s₃</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">s₄</span><span class=\"o\">,</span>\n <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">label</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l₁</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l₂</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l₃</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l₄</span><span class=\"o\">,</span>\n <span class=\"err\">Δ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">×</span> <span class=\"n\">label</span> <span class=\"bp\">×</span> <span class=\"n\">state</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">s₃</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">s₄</span><span class=\"o\">)}</span>\n</code></pre></div>\n\n\n<p>when I would expect something like <br>\n{ S := { s₁, s₂, s₃, s₄ }<br>\n   A := { l₁, l₂, l₃, l₄ },<br>\n   Δ := { (s₁, l₂, s₃), (s₃, l₁, s₄) }  }</p>",
        "id": 203383670,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594300592
    },
    {
        "content": "<p><code>λ (b : state), b = s₁ ∨ b = s₂ ∨ b = s₃ ∨ b = s₄</code> is the reduced form of <code>{ s₁, s₂, s₃, s₄ }</code>, and so on.</p>",
        "id": 203383833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594300705
    },
    {
        "content": "<p>Ok great, thank you very much!</p>",
        "id": 203383895,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594300754
    },
    {
        "content": "<p>Based on what I've read, it seems like to only way to have a structure's fields refer to one another is to use inheritance. For instance, I can define the structure </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">LTS</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">label</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TransRel</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"bp\">×</span> <span class=\"n\">label</span> <span class=\"bp\">×</span> <span class=\"n\">state</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>but I want to be able to limit TransRel to those triples formed of the sets S and A.  One approach I tried was </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">label</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">LTS</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">TransRel</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but it seems I can't form Cartesian products in this way.  Is it clear at all what I could do to achieve this?</p>",
        "id": 203404602,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594310342
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">LTS</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">label</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TransRel</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>works for me (with appropriate context)</p>",
        "id": 203405519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594310714
    },
    {
        "content": "<p>though I would guess <code>(S : set state) (A : set label)</code> is likely a mistranslation of what you actually want</p>",
        "id": 203405558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594310731
    },
    {
        "content": "<p>for example, maybe you actually want</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">LTS</span>  <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TransRel</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 203406208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594311023
    },
    {
        "content": "<p>You're probably right. Thank you!</p>",
        "id": 203407358,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594311557
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 203407555,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594311658
    },
    {
        "content": "<p>The reason I wanted to define a type of state and use sets thereof was so I could do things like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>  <span class=\"n\">mk</span> <span class=\"o\">{</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">s₄</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">l₃</span><span class=\"o\">,</span> <span class=\"n\">l₄</span><span class=\"o\">}</span>\n<span class=\"o\">{(</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">s₃</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">s₄</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₄</span><span class=\"o\">,</span> <span class=\"n\">l₃</span> <span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">l₄</span><span class=\"o\">,</span> <span class=\"n\">s₅</span><span class=\"o\">)}</span>\n</code></pre></div>\n\n\n<p>is there a way to do such a thing with the presentation you offered? Sorry for the noob questions, I'm still getting used to using dependent TT this way</p>",
        "id": 203408600,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594312222
    },
    {
        "content": "<p>looks like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">M₁</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>  <span class=\"n\">mk</span> <span class=\"n\">state</span> <span class=\"n\">label</span>\n<span class=\"o\">{(</span><span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">,</span> <span class=\"n\">s₃</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₃</span><span class=\"o\">,</span> <span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">s₄</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₄</span><span class=\"o\">,</span> <span class=\"n\">l₃</span> <span class=\"o\">,</span> <span class=\"n\">s₂</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s₂</span><span class=\"o\">,</span> <span class=\"n\">l₄</span><span class=\"o\">,</span> <span class=\"n\">s₅</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 203409233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594312530
    },
    {
        "content": "<p>(I'm assuming you might want to define other <code>LTS</code>s with other state and label types.)</p>",
        "id": 203409265,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594312548
    },
    {
        "content": "<p>Definitely better. Thanks!</p>",
        "id": 203409523,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594312659
    },
    {
        "content": "<p>Ok, now I think the only other reason I'd be tempted to use sets of states and labels is so that I can use membership to inductively define executions  within an LTS, in the  (general) sense of </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">sl_pair</span> <span class=\"o\">:=</span>\n<span class=\"n\">makepair</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">label</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Given any Labelled Transition System M,</span>\n<span class=\"c1\">-- given any state s₀ ∈ M.S, (init s₀) is an execution</span>\n<span class=\"c1\">-- given any execution e which &quot;finishes&quot; at a state s,</span>\n<span class=\"c1\">--      can form an execution e&#39; by appending</span>\n<span class=\"c1\">--      state-label pair (s&#39;, l) to e such that</span>\n<span class=\"c1\">--      (s, l, s&#39;) ∈ M.TransRel</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> skeleton of inductive definition -/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">execution</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"bp\">→</span> <span class=\"n\">execution</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">sl_pair</span> <span class=\"bp\">→</span> <span class=\"n\">execution</span> <span class=\"bp\">→</span> <span class=\"n\">execution</span>\n</code></pre></div>\n\n\n<p>So I'm trying to implement the logic in the comments into this definition, and one approach I guess would be to supply membership-propositions as arguments to the constructors, if I use the set-theoretic definition of LTS. But there may very well be an approach using the simpler type-theoretic definition as well.</p>",
        "id": 203411428,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594313551
    },
    {
        "content": "<p>It looks like it will just be the same, but without any set membership involved.</p>",
        "id": 203412232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594313996
    },
    {
        "content": "<p>Ok, will play around. Thanks again!</p>",
        "id": 203412365,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1594314055
    }
]