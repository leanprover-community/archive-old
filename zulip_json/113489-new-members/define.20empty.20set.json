[
    {
        "content": "<p>I am completely new to lean.<br>\nI want to do something like this:<br>\nAxiom : exists single b, forall x x not in b.<br>\nAnd after that by some magic that I can't figure out how to do this in Lean and Coq (you can do this in mizar though)<br>\nI should be able to define a constant \"the emtpy set\" and have two theorems about it:<br>\nfirst that forall x x not in \"the empty set\" and second that forall y if forall x x not in y then y = \"the empty set\"<br>\nCan someone type what I want in Lean and copy the code here?<br>\nI just want to see how does one do it.<br>\nThe same thing goes with functions too.<br>\nFor example in maths one can prove a theorem \"forall x in \\mathbb{R}_{&gt;= 0} exists single y in R such that y^2 = x and after that you can define a function \"sqrt\" from nonnegative reals to R such that the following theorem holds \"forall x in \\mathbb{R}_{&gt;= 0} (sqrt x)^2 = x\".</p>",
        "id": 208853339,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599065057
    },
    {
        "content": "<p>Your theorem is in ZFC, which is not Lean's foundation</p>",
        "id": 208855572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599066082
    },
    {
        "content": "<p>Lean uses dependent type theory</p>",
        "id": 208855584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599066087
    },
    {
        "content": "<p>Lean (and coq) are based on type theory rather than set theory, every term has a type. So in a statement like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\forall x, ...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span> the variable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> implicitly has a type, which is \"a set that it lives in\".<br>\nThe analogue of the empty set would be the empty type, so one cannot form <code>x : EmptyType</code>.</p>\n<p>In lean you can form subsets of terms of a given type, and those can be empty, so you can make an empty subset of any type, like<br>\n<code>\\emptyset : set \\N</code><br>\nwould give you the empty subset of naturals and then you can say <code>\\forall (x : \\N), \\not x \\mem y, \\to y = \\emptyset</code>.</p>",
        "id": 208855657,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1599066114
    },
    {
        "content": "<p>As others have said, Lean is not based on set theory so the empty set example does not translate well.<br>\nFor the sqrt example, one possibility is something like this (not necessarily a good style, but hopefully illustrative).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_sqrt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">sqrt</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 208855963,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599066249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/define.20empty.20set/near/208855963\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>what do these two strings do?</p>",
        "id": 208856751,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599066636
    },
    {
        "content": "<p>Have you read <a href=\"https://leanprover.github.io/theorem_proving_in_lean\">https://leanprover.github.io/theorem_proving_in_lean</a>? Explaining how Lean handles the axiom of choice is a bit involved.</p>",
        "id": 208856963,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599066749
    },
    {
        "content": "<p>can you prove the following theorem: forall x in \\mathbb{R}_{&gt;= 0} forall y in R if y^2 = x then y = sqrt(x) (which comes also with the definition of sqrt)</p>",
        "id": 208856970,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599066753
    },
    {
        "content": "<p>That's equivalent to saying that the <code>y</code> whose existence is asserted by <code>exists_sqrt</code> is also unique</p>",
        "id": 208857064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599066803
    },
    {
        "content": "<p>i.e. it's really just a fact about the real numbers, which you had to prove independently of defining <code>sqrt</code></p>",
        "id": 208857269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599066881
    },
    {
        "content": "<p>okay<br>\ncan't you do the same style with the definition of the empty set?</p>",
        "id": 208857347,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599066928
    },
    {
        "content": "<p>There aren't any \"sets\" in the first place, in a sense that would allow a meaning for \"the empty set\"</p>",
        "id": 208857406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599066959
    },
    {
        "content": "<p>There also isn't a global membership relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span>.</p>",
        "id": 208857501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599066994
    },
    {
        "content": "<p>like lemma exists_empty_set : exists (b : set), forall (x : set), not (x in b) := sorry</p>",
        "id": 208857562,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599067026
    },
    {
        "content": "<p>what is <code>set</code></p>",
        "id": 208857579,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067035
    },
    {
        "content": "<p>can't you define a new type called set or something?</p>",
        "id": 208857590,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599067040
    },
    {
        "content": "<p>no</p>",
        "id": 208857599,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067043
    },
    {
        "content": "<p>what if you postulate that it exists</p>",
        "id": 208857649,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599067069
    },
    {
        "content": "<p>if you want to do ZFC axiomatically and model it Lean, that is possible</p>",
        "id": 208857741,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067101
    },
    {
        "content": "<p>but then why would you use Lean instead of Mizar</p>",
        "id": 208857762,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067112
    },
    {
        "content": "<p>Mizar has very little documentation on it and it takes some time to get an answer from them through e-mail. Also it has some very nasty thing where you have to prove that every type is inhabited or something like that.</p>",
        "id": 208858111,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599067269
    },
    {
        "content": "<p>Have you looked at Isabelle/ZFC?</p>",
        "id": 208858149,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067293
    },
    {
        "content": "<p>no, I haven't</p>",
        "id": 208858169,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599067302
    },
    {
        "content": "<p>I would try that before Coq / Lean, which are very definitely based on dependent type theory.</p>",
        "id": 208858377,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067383
    },
    {
        "content": "<p>or even Metamath, whew</p>",
        "id": 208858599,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1599067450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113489-new-members/topic/define.20empty.20set/near/208858149\">said</a>:</p>\n<blockquote>\n<p>Have you looked at Isabelle/ZFC?</p>\n</blockquote>\n<p>Isabelle/ZFC is the same thing as Isabelle or something different?</p>",
        "id": 208862595,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599069310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216358\">@Fames Yasd</span> Would the <code>empty</code> type be interesting to you?</p>",
        "id": 208863176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599069601
    },
    {
        "content": "<p>It's not the empty set, but for all practical purposes, I find it just as interesting... (But I'm not a set theorist, nor a logician.)</p>",
        "id": 208863309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599069631
    },
    {
        "content": "<p>Just an exercise for me, to define <code>sqrt</code> with the uniqueness:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_sqrt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">sqrt</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">exists_sqrt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unique</span>\n</code></pre></div>",
        "id": 208866959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599071321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216358\">@Fames Yasd</span>  This conversation may be pointless as long as long as you don't tell us what you actually want to do with a proof assistant. If you are interested in formalizing ZF set theory for the sake of it then you can have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/57463fa/src/set_theory/zfc.lean\">https://github.com/leanprover-community/mathlib/blob/57463fa/src/set_theory/zfc.lean</a> but you won't get much out of it if you haven't learn anything about Lean yet (see <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a> if you want to learn). But indeed you would probably be better off with a system which is more foundation agnostic such that metamath, or directly based on ZF set theory like Mizar or Isabelle/ZF (which is an exotic member of the Isabelle family, so the answer to your question \"is this the same thing as Isabelle?\" is both \"it's a subset of Isabelle\" and \"no, this isn't what people usually call Isabelle which is the main member Isabelle/HOL of the  family). If you actually want to formalize maths but only asked about defining the empty set because you thought this was a basic math question then you would take a much better start by thinking about less foundational stuff (since foundational stuff is very dependent on your foundations of course).</p>",
        "id": 208870445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599072792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I want to formalize a couple of chapters from Jech's book on set theory. That is, to introduce zfc axioms, to define basic set theoretic concepts like union/bigcap/ordered pair/cartesian products/set-theoretic functions/natural numbers/integers and prove some basic properties about them that he has in his book. But I want to do that in a style similar to a classical mathematical reasoning. One postulates initial axioms and then makes new definitions (introduces new set-theoretic functions/functional symbols/constants) via proving theorems: for example one can prove exists! x P(x) to introduce a constant 'c' such that P(c) holds and prove forall a,b exists! y P(a,b,y) to introduce a function f(a,b) such that forall a,b P(a,b,f(a,b)) holds.<br>\nI'm looking for a prover that allows for this approach and also has a tolerable learning curve.</p>",
        "id": 208978534,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599144437
    },
    {
        "content": "<p>This is not so straightforward because ZFC has axiom schemas quantifying over all formulas.<br>\nYou may be interested in the <a href=\"https://github.com/flypitch/flypitch/\">Flypitch project</a> (<a href=\"https://flypitch.github.io/assets/flypitch-cpp.pdf\">paper</a>).</p>",
        "id": 208979746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599144938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> didn't really get what's the point of that paper and how it could help with my approach.<br>\nCan't you simply write specification axiom using type Prop or something like that? I believe Lean can quantify over predicates.</p>",
        "id": 208983842,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599146496
    },
    {
        "content": "<p>It can quantify over <em>all</em> predicates, but not just the ones that are defined by formulas of ZF</p>",
        "id": 208984012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599146557
    },
    {
        "content": "<p>but if I will be doing zfc from scracth, would not all predicates be precisely the ones defined by formulas of ZF?<br>\nI want to do everything from scratch.</p>",
        "id": 208984114,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599146612
    },
    {
        "content": "<p>so, for example, you could try to start off like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">model_of_zfc</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">U</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">exists_empty</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ...</span>\n<span class=\"o\">(</span><span class=\"n\">separation</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"c1\">-- ...</span>\n</code></pre></div>",
        "id": 208984536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599146788
    },
    {
        "content": "<p>but this separation axiom is too strong--for example I think that even if you don't include choice as an axiom, it will still follow from this separation, because you can construct a choice function in Lean and then import it into your model using <code>separation</code></p>",
        "id": 208984776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599146898
    },
    {
        "content": "<p>The problem is <code>U → Prop</code> is Lean's function type, which is the wrong thing to quantify over. You want to quantify over formulas. That means you need to define what a formula is (or at least what the possible classes defined by formulas are).</p>",
        "id": 208985011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147006
    },
    {
        "content": "<p>No, I don't think I'm planning to refer to anyhing outside of this model<br>\nShould then be okay, right?</p>",
        "id": 208985113,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599147053
    },
    {
        "content": "<p>Or, you could decide you don't really care about this detail and carry on regardless, but in that case you're not technically working with the first order theory ZFC</p>",
        "id": 208985118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147055
    },
    {
        "content": "<p>Well, \"okay\" is up to you</p>",
        "id": 208985141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147063
    },
    {
        "content": "<p>Well, that model that you just wrote seems perfect for me.</p>",
        "id": 208985261,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599147112
    },
    {
        "content": "<p>I think you'll find it impossible not to refer to <em>anything</em> outside the model--at a minimum you would probably need various logical connectives from Lean to form the sort of <code>p</code> you are interested in</p>",
        "id": 208985372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599147143
    },
    {
        "content": "<p>Yeah, you are right.</p>",
        "id": 208985478,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599147192
    },
    {
        "content": "<p>How does one do proofs here? Can you show me an example of some simple proof?</p>",
        "id": 208985980,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599147383
    },
    {
        "content": "<p>if you want to quantify over formulas of ZF you might need to start defining formulas and their evaluations</p>",
        "id": 208986478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599147586
    },
    {
        "content": "<p>which is done in flypitch</p>",
        "id": 208986488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599147590
    },
    {
        "content": "<p>yeah, I got that</p>",
        "id": 208988595,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599148426
    },
    {
        "content": "<p>on a second thought, can I do ZFC using Lean's library or is it restricted in some way?</p>",
        "id": 209166473,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599291687
    },
    {
        "content": "<p>There is a model of ZFC inside Lean, under <code>set_theory/zfc.lean</code>.</p>",
        "id": 209166634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599291989
    },
    {
        "content": "<p>Reid,  why did you use \"structure\" instead of \"class\"?   (I am doing something similar for Quine's New Foundations, and I used \"class\").  It's working just fine.</p>",
        "id": 209183225,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1599319890
    },
    {
        "content": "<p>No particular reason--I tend to use structure by default and here it illustrated the issue equally well.</p>",
        "id": 209183510,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599320251
    }
]