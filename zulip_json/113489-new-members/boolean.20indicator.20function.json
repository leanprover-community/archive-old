[
    {
        "content": "<p>Really stupid question: why doesn't this work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">ℓ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n        <span class=\"o\">(</span>\n            <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"bp\">∧</span>\n            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"bp\">→</span>   <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(Something about decidability?...) Thanks!</p>",
        "id": 202099047,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1593182471
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">ℓ</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n        <span class=\"o\">(</span>\n            <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"bp\">∧</span>\n            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"bp\">→</span>   <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202099164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593182525
    },
    {
        "content": "<p>It is computable, and things are decidable, but you would have to prove this before you can get rid of the CS boilerplate</p>",
        "id": 202099200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593182552
    },
    {
        "content": "<p>Probably for Lean's actual definition of divides, this is done</p>",
        "id": 202099229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593182565
    },
    {
        "content": "<p>But this is better:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">ℓ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n        <span class=\"o\">(</span>\n            <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"bp\">∧</span>\n            <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"bp\">→</span>   <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202099322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593182609
    },
    {
        "content": "<p>if you're just doing math, you probably want a <code>Prop</code> instead of bool</p>",
        "id": 202099334,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182615
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202099342,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182617
    },
    {
        "content": "<p>Actually defining a function to bool forces Lean to try and figure out an algorithm</p>",
        "id": 202099472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593182665
    },
    {
        "content": "<p>Ok but then how do I make an indicator function?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_prime_f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 202099515,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1593182688
    },
    {
        "content": "<p>Back to <code>open_locale classical</code></p>",
        "id": 202099576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593182722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">divides</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">ℓ</span> <span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">ℓ</span>\n<span class=\"n\">def</span> <span class=\"n\">is_prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">divides</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">is_prime_f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 202099731,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182792
    },
    {
        "content": "<p>i needed to also add noncomputable theory</p>",
        "id": 202099753,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182804
    },
    {
        "content": "<p>but this is where it tops out, once you have both of these, lean shouldn't ask you about decidability or excluded-middle stuff unless you mention them</p>",
        "id": 202099797,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182833
    },
    {
        "content": "<p>(i really do recommend putting the argument to the left of the colon, it helps readability a lot</p>",
        "id": 202099869,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593182876
    },
    {
        "content": "<p>I think you could have a generalized <code>def indicator (p : Prop) [decidable p] : ℝ := if p then 1 else 0</code>. If you use <code>classical</code> this will accept any proposition.</p>",
        "id": 202100003,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593182935
    },
    {
        "content": "<p>We have talked previously about adding <code>def boole</code> with exactly this definition. But I think the <code>if</code> statement is short and clear so it hasn't happened.</p>",
        "id": 202164000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593226113
    }
]