[
    {
        "content": "<p>Hi! I am trying to experiment a bit with groups and I am a bit confused about the following,</p>\n<p>I have defined my powers as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- definition of powers</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">group_pow_nat</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">g</span>\n<span class=\"kn\">instance</span> <span class=\"n\">group_has_pow_nat</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">G</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">group_pow_nat</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">group_pow</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kn\">instance</span> <span class=\"n\">group_has_pow</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">G</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">group_pow</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Which seems to work as I want it to. So my question is how should I show the following</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pow_int_of_nat</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I thought <code>rfl</code>would work however it seems that is not the case.<br>\nThanks in advance!</p>",
        "id": 189128229,
        "sender_full_name": "Jason KY.",
        "timestamp": 1582733159
    },
    {
        "content": "<p>Btw I am using this definition as groups</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"n\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 189128369,
        "sender_full_name": "Jason KY.",
        "timestamp": 1582733224
    },
    {
        "content": "<p>You would at least need a pattern match on <code>n</code> into <code>0</code> and other because there is one in the definition of <code>group_pow</code>. But then the pattern match there is quite unnecessary, isn't it?</p>",
        "id": 189128391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582733235
    },
    {
        "content": "<p>i.e. just delete the first line of the definition of <code>group_pow</code>, and it looks okay</p>",
        "id": 189128427,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582733260
    },
    {
        "content": "<p>Wow! That worked perfectly! Thanks</p>",
        "id": 189128512,
        "sender_full_name": "Jason KY.",
        "timestamp": 1582733310
    },
    {
        "content": "<p>Hi again!<br>\nIs there an easy way of solving this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 189250927,
        "sender_full_name": "Jason KY.",
        "timestamp": 1582833661
    },
    {
        "content": "<p>Well, it's not true</p>",
        "id": 189251578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582834129
    },
    {
        "content": "<p>is it?</p>",
        "id": 189251584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1582834134
    },
    {
        "content": "<p>Wrong for n=0</p>",
        "id": 189251585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582834134
    },
    {
        "content": "<p>Oh! Right</p>",
        "id": 189251971,
        "sender_full_name": "Jason KY.",
        "timestamp": 1582834367
    },
    {
        "content": "<p>What happened to that automatic counter-example finder?</p>",
        "id": 189255210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582836504
    },
    {
        "content": "<p><a href=\"https://github.com/cipher1024/slim_check\" target=\"_blank\" title=\"https://github.com/cipher1024/slim_check\">https://github.com/cipher1024/slim_check</a> or <a href=\"https://gitlab.binets.fr/pablo.le-henaff/nunchaku-lean\" target=\"_blank\" title=\"https://gitlab.binets.fr/pablo.le-henaff/nunchaku-lean\">https://gitlab.binets.fr/pablo.le-henaff/nunchaku-lean</a> ?</p>",
        "id": 189255690,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582836789
    },
    {
        "content": "<p>But if <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> wants to PR slim_check to mathlib I'd use it. :-)</p>",
        "id": 189257485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582837838
    },
    {
        "content": "<p>It's planned. I should have time to put on mathlib in a few weeks, I can do it then</p>",
        "id": 189257668,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1582837959
    },
    {
        "content": "<p>I am trying to define normal and central subgroups for a bundled subgroup and I am wondering whats the best way of doing it.<br>\nIs it better to define it as a class or should it be a prop?</p>\n<p>This is how I've done it for now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">central_subgroup</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">center</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"n\">mygroup</span><span class=\"bp\">.</span><span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 189826548,
        "sender_full_name": "Jason KY.",
        "timestamp": 1583435991
    },
    {
        "content": "<p>If you're bundling subgroups then <code>center G</code> should have type <code>subgroup G</code> rather than <code>set G</code></p>",
        "id": 189826731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583436101
    },
    {
        "content": "<p>But I don't know whether <code>central_subgroup</code> should be a predicate <code>is_central</code> or a class or another structure</p>",
        "id": 189826807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583436133
    },
    {
        "content": "<p>Class versus not depends on whether you want to use type class inference. I wouldn't want to use it here, but tastes differ.</p>",
        "id": 189841120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445340
    },
    {
        "content": "<p>Structure versus just making a def that's a Prop doesn't make a big difference, you can think of the structure as introducing a little bit of abstraction</p>",
        "id": 189841222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445390
    },
    {
        "content": "<p>The structure is pretty much a slightly more heavyweight way to do the same thing</p>",
        "id": 189841271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445422
    },
    {
        "content": "<p>Note if you have a class/structure it will never be inferred as a Prop, so you would definitely want to add that</p>",
        "id": 189841326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445458
    },
    {
        "content": "<p>I would tend to call it <code>is_central</code></p>",
        "id": 189841343,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445476
    },
    {
        "content": "<p>Alright! I will make it a prop then, it'll be easier to work with! :)</p>",
        "id": 189841653,
        "sender_full_name": "Jason KY.",
        "timestamp": 1583445647
    },
    {
        "content": "<p>For normal subgroups there might be a specific reason to use a class, namely so that you can make the quotient a group. But another way to handle it is to bundle the subgroup + proof that it's normal and define the quotient by that.</p>",
        "id": 189842155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583445941
    }
]