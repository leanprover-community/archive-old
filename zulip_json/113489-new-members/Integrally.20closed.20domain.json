[
    {
        "content": "<p>Hello Lean community! This is my first ever post here, and I'm a lean beginner. As a toy starting out project I'm trying to add the definition of what it means for an integral domain to be integrally closed, using <code>def integral_closure</code> from integral_closure.lean. Apologies if it's already there - I'm still learning the syntax, so might have overlooked it - but I'm trying something like the following added to integral_closure.lean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n\n<p>However, the Lean goal pane complains of Type mismatch, because \"integral_closure R (localization.fraction_ring R)\" has type \"subalgebra R _\", and it's being compared to type integral_domain.</p>\n<p>What's the optimal way of resolving this? I thought of trying to get the underlying rings, and comparing those, but I wonder if there's a better way.</p>",
        "id": 198692444,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590431200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> Hi, and welcome!</p>",
        "id": 198693113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590431834
    },
    {
        "content": "<p>Mathematically, what you are doing is totally fine. (Of course!) However, in type theory, you need to strictly separated \"ambient sets\" and \"subsets of an ambient set\"</p>",
        "id": 198693222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590431902
    },
    {
        "content": "<p>This is usually very close to our mathematical intuition. But sometimes it's annoying.</p>",
        "id": 198693241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590431925
    },
    {
        "content": "<p>In your specific example, you introduce <code>R</code> by saying <code>(R)</code> in the statement, which is short for saying that <code>R</code> is a \"type\", in other words, an \"ambient set\". Roughly speaking, this means that you will never compare <code>R</code> directly to anything else.</p>",
        "id": 198693311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590431984
    },
    {
        "content": "<p>(It is totally fine to say that it is <em>isomorphic</em> to something else, but not <em>equal</em>.)</p>",
        "id": 198693370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432010
    },
    {
        "content": "<p>So, long story short, you want to say that the <code>integral_closure R (blabla)</code> is <em>equal</em> to the image of <code>R</code> inside the localisation.</p>",
        "id": 198693400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432049
    },
    {
        "content": "<p>Hi Johan, thanks for the welcome!</p>",
        "id": 198693552,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590432150
    },
    {
        "content": "<p>Oh, I didn't know that putting <code>()</code> around the R changes its meaning; i copied that from the definition of <code>is_noetherian_ring</code> in noetherian.lean:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 198693570,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590432175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198693570\">said</a>:</p>\n<blockquote>\n<p>Oh, I didn't know that putting <code>()</code> around the R changes its meaning</p>\n</blockquote>\n<p>It doesn't really... but you need an ambient set to start with</p>",
        "id": 198693604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432210
    },
    {
        "content": "<p>Hey Barinder. Did you see p3 of my <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/pdfs/formalise_UG_maths.pdf\">Birmingham talk</a>? Let that be a warning to you.</p>",
        "id": 198693621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590432222
    },
    {
        "content": "<p>And the <code>(R)</code> is really just shorthand for <code>(R : Type*)</code>.</p>",
        "id": 198693626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198693621\">said</a>:</p>\n<blockquote>\n<p>Hey Barinder. Did you see p3 of my <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/pdfs/formalise_UG_maths.pdf\">Birmingham talk</a>? Let that be a warning to you.</p>\n</blockquote>\n<p>Hi Kevin! No I didn't see that talk, I'll take a look!</p>",
        "id": 198693711,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590432298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198693621\">said</a>:</p>\n<blockquote>\n<p>Hey Barinder. Did you see p3 of my <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/pdfs/formalise_UG_maths.pdf\">Birmingham talk</a>? Let that be a warning to you.</p>\n</blockquote>\n<p>What's the warning? One might give up Zelda?</p>",
        "id": 198693727,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590432312
    },
    {
        "content": "<p>Barinder and I have talked Zelda in the past</p>",
        "id": 198693741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590432329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198693626\">said</a>:</p>\n<blockquote>\n<p>And the <code>(R)</code> is really just shorthand for <code>(R : Type*)</code>.</p>\n</blockquote>\n<p>aah yes, that makes more sense now!</p>",
        "id": 198693798,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590432366
    },
    {
        "content": "<p>Yeah, we shouldn't use those abbreviations.... but hey, sometimes people are bored, and want to get the job done quickly</p>",
        "id": 198693891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198693400\">said</a>:</p>\n<blockquote>\n<p>So, long story short, you want to say that the <code>integral_closure R (blabla)</code> is <em>equal</em> to the image of <code>R</code> inside the localisation.</p>\n</blockquote>\n<p>ok, so hopefully there is already defined somewhere a map from an integral domain into its fraction field? quickly looking through localization.lean, it looks like there is <code>coe : α → localization α S</code>, which looks promising</p>",
        "id": 198694059,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590432668
    },
    {
        "content": "<p>Note that this file was thoroughly rewritten a few days ago</p>",
        "id": 198694092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432710
    },
    {
        "content": "<p>Do you have the latest version?</p>",
        "id": 198694094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198694094\">said</a>:</p>\n<blockquote>\n<p>Do you have the latest version?</p>\n</blockquote>\n<p>oh, i'm not sure ... i created the project a few days ago, and given how quickly mathlib moves, i almost certainly don't have the latest version; but i won't be far off</p>",
        "id": 198694192,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590432815
    },
    {
        "content": "<p>You should be able to type <code>leanproject up</code> in your project</p>",
        "id": 198694203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590432834
    },
    {
        "content": "<p>Hmmz... it seems that <code>fraction_ring</code> got lost in the battle</p>",
        "id": 198694302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432915
    },
    {
        "content": "<p>There is now something called <code>fraction_map</code>, which should serve the same purpose</p>",
        "id": 198694324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432934
    },
    {
        "content": "<p>Except that it is the map, and not the \"ambient set\" of the codomain.</p>",
        "id": 198694385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590432967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198694203\">said</a>:</p>\n<blockquote>\n<p>You should be able to type <code>leanproject up</code> in your project</p>\n</blockquote>\n<p>just done, thanks! and indeed Johan, i can't find <code>fraction_ring</code> anymore</p>",
        "id": 198694426,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590433018
    },
    {
        "content": "<p>In the end, this upgrade should pay off. (It solves exactly the issue with localisations that Kevin describes on page 10 (or so) of the pdf he linked above)</p>",
        "id": 198694570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590433134
    },
    {
        "content": "<p>Namely: <code>R[1/f][1/g] ≠ R[1/fg]</code>... they are only isomorphic, not equal. Same issue that you ran into with your first post.</p>",
        "id": 198694591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590433170
    },
    {
        "content": "<p>(The <code>≠</code> is abuse of notation)</p>",
        "id": 198694619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590433199
    },
    {
        "content": "<p>oh wow, yeah i can see it's been majorly rewritten; seems a lot more functorial now</p>",
        "id": 198695100,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590433622
    },
    {
        "content": "<p>so i've now tried, in <code>integral_closure.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n\n<p>I'm sure there are problems with the syntax there; but perhaps more importantly, Lean Goal isn't finding <code>localization.fraction_map</code> or <code>localization.to_integral_domain</code>; do those labels of <code>protected</code> and <code>local attribute</code> used in <code>localization.lean</code> mean that these definitions are not to be used outside of this file?</p>",
        "id": 198696853,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590435428
    },
    {
        "content": "<p>to_integral_domain is in the fraction_map namespace</p>",
        "id": 198697140,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590435723
    },
    {
        "content": "<p>As for the syntax, the square brackets are used to declare that an argument is a typeclass, and will be inferred automatically by lean, so when you call a function which has these for arguments you don't need to supply them explicitly, so [comm_ring K] after the := won't work.</p>",
        "id": 198697221,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590435822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697221\">said</a>:</p>\n<blockquote>\n<p>As for the syntax, the square brackets are used to declare that an argument is a typeclass, and will be inferred automatically by lean, so when you call a function which has these for arguments you don't need to supply them explicitly, so [comm_ring K] after the := won't work.</p>\n</blockquote>\n<p>ok thanks, so that's just fixed by replacing <code>[comm_ring K]</code> by <code>K</code>?</p>",
        "id": 198697345,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590435932
    },
    {
        "content": "<p>You should remove it completely I think, the signature is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">fraction_map</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">],</span> <span class=\"n\">fraction_map</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">integral_domain</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>so there is only one argument you need to supply as the others are surrounded by {} or [] lean will work them out from the fraction_map A K you give it.</p>",
        "id": 198697430,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590436020
    },
    {
        "content": "<p>By \"in <code>integral_closure.lean</code>\", I hope you mean \"I made a new file which starts with the line <code>import ring_theory.integral_closure</code>\" rather than \"I am editing a library file\".</p>",
        "id": 198697434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436030
    },
    {
        "content": "<p>Also, the error messages look quite intimidating at first, but they really tell you what's going on</p>",
        "id": 198697523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697140\">said</a>:</p>\n<blockquote>\n<p>to_integral_domain is in the fraction_map namespace</p>\n</blockquote>\n<p>apologies, i'm very new to Lean and namespaces: is it the case that those definitions within the <code>namespace fraction_map</code> are not accessible to other lean files?</p>",
        "id": 198697525,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590436137
    },
    {
        "content": "<p>Definitions like <code>blah</code> in that namespace are all called <code>fraction_map.blah</code> outside it</p>",
        "id": 198697571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697571\">said</a>:</p>\n<blockquote>\n<p>Definitions like <code>blah</code> in that namespace are all called <code>fraction_map.blah</code> outside it</p>\n</blockquote>\n<p>aaaaaaaah ... yes, it finds it now! and the error message gives me the next clue, which <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  already noted: \"too many arguments\"</p>",
        "id": 198697678,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590436285
    },
    {
        "content": "<p>If you <code>open fraction_map</code> then you can go back to calling it <code>blah</code></p>",
        "id": 198697693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436311
    },
    {
        "content": "<p>What is this <code>fraction_map</code>? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Localization map from an integral domain `R` to its field of fractions. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">fraction_map</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">localization</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>Is this docstring wrong?</p>",
        "id": 198697899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436519
    },
    {
        "content": "<p>I don't understand how localisation works any more :-)</p>",
        "id": 198697939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697434\">said</a>:</p>\n<blockquote>\n<p>By \"in <code>integral_closure.lean</code>\", I hope you mean \"I made a new file which starts with the line <code>import ring_theory.integral_closure</code>\" rather than \"I am editing a library file\".</p>\n</blockquote>\n<p>i did actually start in my new file <code>src/hello_world.lean</code>, but at some point switched to directly editing the <code>_target/deps/mathlib/src/ring_theory/integral_closure.lean</code>, and trying to add the definition there somewhere. I'm guessing I should stick to my sandbox and not edit the library files?</p>\n<p>but if the goal is to contribute to mathlib, starting off with small commits, then wouldn't that ultimately be done directly to the library file, to a branch of a fork of the mathlib repo?</p>",
        "id": 198698067,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590436638
    },
    {
        "content": "<p>Yeah you should definitely edit the library files at some point. But it might not be a good idea as a beginner. For example, all those library files are compiled into olean files on your system right now, because <code>leanproject</code> downloaded compiled binaries for all of them. If you edit one, then it might need recompiling, and every file it imports might need recompiling too, and then everything will become very slow as VS Code tries to do it all on the fly. You can edit the library files but there are caveats.</p>",
        "id": 198698251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697693\">said</a>:</p>\n<blockquote>\n<p>If you <code>open fraction_map</code> then you can go back to calling it <code>blah</code></p>\n</blockquote>\n<p>oh, so that's what <code>open</code> means! does that imply that all namespace names in the library are unique?</p>",
        "id": 198698415,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590436825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697899\">said</a>:</p>\n<blockquote>\n<p>What is this <code>fraction_map</code>? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Localization map from an integral domain `R` to its field of fractions. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">fraction_map</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">localization</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>Is this docstring wrong?</p>\n</blockquote>\n<p>the doc at the top says this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">When</span> <span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">integral</span> <span class=\"n\">domain</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">define</span> <span class=\"bp\">`</span><span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"bp\">`</span> <span class=\"n\">as</span> <span class=\"n\">an</span> <span class=\"kn\">abbreviation</span> <span class=\"n\">for</span>\n<span class=\"bp\">`</span><span class=\"n\">localization</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">natural</span> <span class=\"n\">map</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">R</span><span class=\"bp\">`</span><span class=\"err\">&#39;</span><span class=\"n\">s</span> <span class=\"n\">field</span> <span class=\"n\">of</span> <span class=\"n\">fractions</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>but i haven't looked under the hood of <code>localization</code></p>",
        "id": 198698612,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590436945
    },
    {
        "content": "<p>Yeah I see, it's all been completely rewritten</p>",
        "id": 198698662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436980
    },
    {
        "content": "<p>oh hi <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> , I was just being confused by your new PR :-)</p>",
        "id": 198698685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590436999
    },
    {
        "content": "<p><code>localization</code> is not a Prop, that's as far as I've got</p>",
        "id": 198698794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590437055
    },
    {
        "content": "<p><code>localization S A</code> for <code>S</code> a submonoid of <code>R</code>, is the type of ring homs R -&gt; A which induce an isomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">R[1/S]\\to A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> I think</p>",
        "id": 198698899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590437149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198698251\">said</a>:</p>\n<blockquote>\n<p>Yeah you should definitely edit the library files at some point. But it might not be a good idea as a beginner. For example, all those library files are compiled into olean files on your system right now, because <code>leanproject</code> downloaded compiled binaries for all of them. If you edit one, then it might need recompiling, and every file it imports might need recompiling too, and then everything will become very slow as VS Code tries to do it all on the fly. You can edit the library files but there are caveats.</p>\n</blockquote>\n<p>ok, i wasn't aware of this recompiling issue; i'll continue in my own src folder for now</p>",
        "id": 198698954,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590437172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697939\">said</a>:</p>\n<blockquote>\n<p>I don't understand how localisation works any more :-)</p>\n</blockquote>\n<p>Same, this was quite confusing, maybe not the easiest project to tackle in this state of flux <span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> , I just got to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">codomain</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">codomain</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n</code></pre></div>\n\n\n<p>but honestly I have no idea if this is the right thing!</p>",
        "id": 198699230,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590437436
    },
    {
        "content": "<p>Here I take the fraction map as an argument, so this leaves the problem of constructing the fraction field to the user, I guess this is how we get around problems of isomorphic-but-not-equal constructions, by making future definitions not depend on the exact construction used, but it feels weird to state being integrally closed in this way,</p>",
        "id": 198699353,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590437588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198699230\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697939\">said</a>:</p>\n<blockquote>\n<p>I don't understand how localisation works any more :-)</p>\n</blockquote>\n<p>Same, this was quite confusing, maybe not the easiest project to tackle in this state of flux <span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> , I just got to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">codomain</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">codomain</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n</code></pre></div>\n\n\n<p>but honestly I have no idea if this is the right thing!</p>\n</blockquote>\n<p>maybe not the easiest project, but a decent one to learn by running?!?</p>",
        "id": 198699673,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590437953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198699353\">said</a>:</p>\n<blockquote>\n<p>Here I take the fraction map as an argument, so this leaves the problem of constructing the fraction field to the user, I guess this is how we get around problems of isomorphic-but-not-equal constructions, by making future definitions not depend on the exact construction used, but it feels weird to state being integrally closed in this way,</p>\n</blockquote>\n<p>yes indeed, because an \"integrally closed domain\" means \"integrally closed in fraction field\", so ideally the user shouldn't need to construct it explicitly</p>",
        "id": 198699878,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590438126
    },
    {
        "content": "<p>I haven't read this thread in depth because I've got an exam tomorrow and the next day but I can help more after that. A couple of things: </p>\n<ol>\n<li>Your life will be easier if you assume <code>K</code> is a field, not an arbitrary comm ring. I'll add to the docs explaining this.</li>\n<li><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> - I think that looks okay - does it still work if you replace <code>to_fun</code> with <code>to_map</code>? <code>to_map</code> is the  underlying ring hom and it might cause problems using the underlying function <code>to_fun</code></li>\n<li>The <code>fraction_map</code> section of the file will be added to a bit (I'll try open a PR on Wednesday); there are some useful lemmas from the old version of the file I want to 'port'.</li>\n</ol>",
        "id": 198699973,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1590438245
    },
    {
        "content": "<p>My 5c: <code>(R)</code> is a shorthand for <code>(R : guess_me)</code>, i.e. lean will try to guess the type of R based on how do you use it</p>",
        "id": 198700002,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590438296
    },
    {
        "content": "<p>E.g. with <code>(R S) (f : R -&gt; S) (x y) (h : f x = y)</code> lean will guess most types</p>",
        "id": 198700151,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590438466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> Good luck with the exams, please don't get distracted on our account!</p>",
        "id": 198700156,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590438470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198699673\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198699230\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198697939\">said</a>:</p>\n<blockquote>\n<p>I don't understand how localisation works any more :-)</p>\n</blockquote>\n<p>Same, this was quite confusing, maybe not the easiest project to tackle in this state of flux <span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> , I just got to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">codomain</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">codomain</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n</code></pre></div>\n\n\n<p>but honestly I have no idea if this is the right thing!</p>\n</blockquote>\n<p>maybe not the easiest project, but a decent one to learn by running?!?</p>\n</blockquote>\n<p>I'm not sure to be honest, I think there are probably quite a few other things that you would find mathematically relevant / interesting that don't touch on areas where mathlib isn't in such a state of transition right now. That said you've just learned some stuff about typeclasses and namespaces while running so who knows</p>",
        "id": 198700381,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590438679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> I think just the opposite of Alex! I think that this brand spanking new approach to localisations needs to be tested, and I know that Barinder knows the mathematics behind the material, and it's about time this whole Dedekind Domain / DVR / Nullstellensatz level of commutative algebra gets going again. If someone makes it their project and then just asks lots of questions, people like me will get dragged back in because talking about localisations is a lot more interesting than marking undergraduate scripts. We need to check it works. Amelia has refactored the library and now we need to see it in action.</p>",
        "id": 198700888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590439161
    },
    {
        "content": "<p>I guess I was swayed by Amelia saying she has more to add to the file yet!</p>",
        "id": 198701109,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590439362
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is integrally closed<br>\niff for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r, s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(r/s)^n + a_1 (r/s)^{n-1} + \\cdots + a_n = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r/s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span><br>\niff for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r, s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><msup><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>s</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>s</mi><mi>n</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">r^n + a_1 r^{n-1} s + \\cdots + a_n s^n = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.964108em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.814392em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∣</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">s \\mid r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>",
        "id": 198702169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590440473
    },
    {
        "content": "<p>there you go, no fraction field needed</p>",
        "id": 198702184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590440501
    },
    {
        "content": "<p>iff for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r, s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>n</mi></msup><mo>∈</mo><mo stretchy=\"false\">⟨</mo><msup><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>s</mi><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msup><mi>s</mi><mi>n</mi></msup><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">r^n \\in \\langle r^{n-1} s, \\cdots, s^n \\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.703492em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∣</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">s \\mid r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>",
        "id": 198702249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590440561
    },
    {
        "content": "<p>this is just like observing that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a valuation domain iff for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r, s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>∣</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">r \\mid s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">s</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∣</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">s \\mid r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>",
        "id": 198702284,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590440626
    },
    {
        "content": "<p>then you can show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is integrally closed iff its integral closure w.r.t. any fraction field is itself</p>",
        "id": 198702342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590440695
    },
    {
        "content": "<p>with a characterisation of \"is a fraction field\"</p>",
        "id": 198702354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590440707
    },
    {
        "content": "<p>BTW, do we have something like <code>homogenize (p : polynomial R) (n := nat_degree p) : mv_polynomial (option unit) R</code>?</p>",
        "id": 198704312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590443230
    },
    {
        "content": "<p>There's a concept of A being integrally closed in B though</p>",
        "id": 198704314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590443234
    },
    {
        "content": "<p>You (Kenny) are formalizing the absolute notion</p>",
        "id": 198704330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590443262
    },
    {
        "content": "<p>Then we can have <code>integrally_closed_in R A</code>, <code>integrally_closed R</code>, and theorem(s) linking these two notions.</p>",
        "id": 198704395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590443342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span>, going back to something you said above: you should definitely not edit mathlib by editing files in the <code>_target</code> directory. Tools like <code>leanproject</code> happily clobber this directory, and it's just asking to lose your work to edit files there. Better to clone <code>mathlib</code> directly, and work in a branch there.</p>",
        "id": 198714455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590458572
    },
    {
        "content": "<p>And PR your branch!</p>",
        "id": 198715025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590459537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198704330\">said</a>:</p>\n<blockquote>\n<p>You (Kenny) are formalizing the absolute notion</p>\n</blockquote>\n<p>But that's also what Barinder was doing</p>",
        "id": 198717479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590463625
    },
    {
        "content": "<p>And we'll want the equivalence with Kenny's props anyway. I think following Kenny's approach for the absolute version is a good idea.</p>",
        "id": 198717543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590463701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198714455\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span>, going back to something you said above: you should definitely not edit mathlib by editing files in the <code>_target</code> directory. Tools like <code>leanproject</code> happily clobber this directory, and it's just asking to lose your work to edit files there. Better to clone <code>mathlib</code> directly, and work in a branch there.</p>\n</blockquote>\n<p>ok, thanks for clarifying. I have already forked and cloned <code>mathlib</code> locally, but am currently working in a project environment to get to grips with the library and syntax.</p>",
        "id": 198769272,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590503162
    },
    {
        "content": "<p>Trying to follow Kenny's suggestion above for the relative case (i.e. A is integrally closed in B) led me to the following way to implement <code>is_integrally_closed_in</code>, not using <code>integral_closure</code>, but the lower-level <code>is_integral</code> for elements. I tried the following in my sandbox (modelled on the setup in <code>integral_closure.lean</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n\n<p>That doesn't work though:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I'm still unsure how to read these errors, but I think it's complaining that it doesn't know what <code>a ∈ R</code> means, if <code>a</code> was supposed to be of type A. So something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">is_in_base_ring</span> <span class=\"n\">a</span>\n</code></pre></div>\n\n\n<p>might work, except I don't know if there is such a method <code>is_in_base_ring</code> for elements of R-algebras?</p>",
        "id": 198769487,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590503242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> Yup, it's the same ambient set issue again (-;</p>",
        "id": 198769667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590503307
    },
    {
        "content": "<p><code>a</code> lives in <code>A</code>, and <code>R</code> is not a <em>subset</em> of <code>A</code>.</p>",
        "id": 198769688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590503321
    },
    {
        "content": "<p>So you have to apply the map to get to <code>A</code></p>",
        "id": 198769713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590503332
    },
    {
        "content": "<p>You could write something like <code>\\exists r : R, a = r</code> or alternatively <code>a \\in set.range blabla</code> like yesterday.</p>",
        "id": 198769817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590503384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> the first suggestion gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">r</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n</code></pre></div>",
        "id": 198770906,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590503821
    },
    {
        "content": "<p>Ooh, sorry... I thought that there would be an \"invisible map\" (see <a href=\"https://xenaproject.wordpress.com/2020/04/30/the-invisible-map/\">https://xenaproject.wordpress.com/2020/04/30/the-invisible-map/</a>) that would get you from <code>R</code> to <code>A</code>.<br>\nAka: <code>coe</code></p>",
        "id": 198771296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590503987
    },
    {
        "content": "<p>So, we'll have to apply the map explicitly.</p>",
        "id": 198771393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504016
    },
    {
        "content": "<p>In this case, the name of the map is <code>algebra_map A</code></p>",
        "id": 198771440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504039
    },
    {
        "content": "<p>So you can write <code>\\exists r : R, algebra_map A r = a</code>, which is pretty ugly, I agree.</p>",
        "id": 198771509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504073
    },
    {
        "content": "<p>where is the map? is it the one in <code>algebra.lean</code>?  and in general, how do i find these things for myself? right click on algebra, go to definition, and hope to find it somewhere nearby?</p>",
        "id": 198771856,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590504225
    },
    {
        "content": "<p>Yup, that's one of the most useful ways of finding things.</p>",
        "id": 198771935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504245
    },
    {
        "content": "<p>Besides that: there is quite a rigid naming convention. After playing a little bit, you'll find that you can start guessing the names of lemmas.</p>",
        "id": 198772011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504274
    },
    {
        "content": "<p>Finally, there are tactics <code>library_search</code> and <code>suggest</code>, that can help with finding things in the library.</p>",
        "id": 198772063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504295
    },
    {
        "content": "<p>aah yes, I remember <code>library_search</code> from the tutorials ... thanks!</p>",
        "id": 198772482,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590504474
    },
    {
        "content": "<p>If you have <code>φ : fraction_map R K</code>, you can use <code>localization.is_integer φ a</code> to say <code>∃ x : R, φ x = a</code>. It might be worth the effort to generalize this to any <code>algebra</code>.</p>",
        "id": 198772815,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1590504600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198771509\">said</a>:</p>\n<blockquote>\n<p>So you can write <code>\\exists r : R, algebra_map A r = a</code>, which is pretty ugly, I agree.</p>\n</blockquote>\n<p>unfortunately it's still not liking the type of <code>r</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">r</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">r</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>what is even meant by <code>Type ? : Type (?+1)</code>? sorry for the numerous questions!</p>",
        "id": 198772897,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590504619
    },
    {
        "content": "<p>The <code>?</code> is an unknown universe level.</p>",
        "id": 198773054,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504690
    },
    {
        "content": "<p>So it is saying that it was expecting another argument which should have been a type, before the <code>R</code>.</p>",
        "id": 198773112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504710
    },
    {
        "content": "<p>What is the type signature of <code>algebra_map</code>?</p>",
        "id": 198773183,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504728
    },
    {
        "content": "<p>Usually the first thing I do when I get a type mismatch error is hover my mouse of the current occurrence of the function, and see what its arguments are meant to be.</p>",
        "id": 198773270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504769
    },
    {
        "content": "<p>Huh... I thought I knew this part of the library... <span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span>  sorry for messing up</p>",
        "id": 198773288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504776
    },
    {
        "content": "<p>looks like it's <code>(R : Type u) (A : Type v) [comm_semiring R] [semiring A] [algebra R A]</code></p>",
        "id": 198773310,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590504786
    },
    {
        "content": "<p>Or type <code>#print algebra_map</code> before the current theorem.</p>",
        "id": 198773313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504787
    },
    {
        "content": "<p>Maybe it wants to see the even uglier <code>algebra_map R A r</code></p>",
        "id": 198773324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504793
    },
    {
        "content": "<p>Yup... it has <code>()</code> around both <code>R</code> and <code>A</code>, so you need to explicitly give both.</p>",
        "id": 198773361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504814
    },
    {
        "content": "<p>(Johan really wishes that Lean were better at inference, but inference and coercions to functions do not play well together.)</p>",
        "id": 198773469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504853
    },
    {
        "content": "<p>We should be able to change that to <code>{R : Type u}</code> by now... but I suggest that you don't bother with that now.</p>",
        "id": 198773507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590504871
    },
    {
        "content": "<p>Because <code>algebra_map</code> doesn't return an honest function, but instead a <code>ring_hom</code>, it (used to be?) is hard for Lean to infer the type <code>R</code>.</p>",
        "id": 198773584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590504897
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198773313\">said</a>:</p>\n<blockquote>\n<p>Or type <code>#print algebra_map</code> before the current theorem.</p>\n</blockquote>\n<p>oh wow, print statements in Lean! first i've seen that</p>",
        "id": 198773811,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590504987
    },
    {
        "content": "<p>If you try <code>#print hello_world</code> you will be disappointed</p>",
        "id": 198774283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590505173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198773361\">said</a>:</p>\n<blockquote>\n<p>Yup... it has <code>()</code> around both <code>R</code> and <code>A</code>, so you need to explicitly give both.</p>\n</blockquote>\n<p>yes! that works! is this an appropriate formal definition of \"A is integrally closed in B\", in the spirit of Kenny's suggestion above?</p>",
        "id": 198774427,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590505214
    },
    {
        "content": "<p>Well, Kenny didn't talk about the relative version right?</p>",
        "id": 198774602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590505282
    },
    {
        "content": "<p>For the relative version, your definition seems perfect.</p>",
        "id": 198774639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590505298
    },
    {
        "content": "<p>no he didn't indeed ... but wouldn't the absolute version just be the relative version, but with the ambient R-algebra set to the fraction field of R?</p>",
        "id": 198774942,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590505383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> I think that for the absolute version, it might be nice to take Kenny's version as definition (because it avoids talking about <em>the</em> fraction field, so you don't have to choose one). After that, the first lemma to prove is that Kenny's def is equivalent to <code>is_integrally_closed_in R (any_arbitrary_fraction_field R)</code>.</p>",
        "id": 198783824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590508732
    },
    {
        "content": "<p>The reason this is nice: <code>Q</code> is <em>not</em> the fraction field of <code>Z</code>. Of course it satisfies the correct universal property, so you can easily plug it into <code>any_arbitrary_fraction_field R</code>.</p>",
        "id": 198784040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590508815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198783824\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> I think that for the absolute version, it might be nice to take Kenny's version as definition (because it avoids talking about <em>the</em> fraction field, so you don't have to choose one). After that, the first lemma to prove is that Kenny's def is equivalent to <code>is_integrally_closed_in R (any_arbitrary_fraction_field R)</code>.</p>\n</blockquote>\n<p>ok, that sounds like a plan for me to get on with! <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> (though i'll probably be back before too long asking about how to tell lean about <code>any_arbitrary_fraction_field</code>)</p>",
        "id": 198789479,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590511338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> I think <code>fraction_map</code> is exactly that.</p>",
        "id": 198790169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590511674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> What do you think of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄,</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"err\">∑</span> <span class=\"n\">ij</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 198807235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590520052
    },
    {
        "content": "<p>I didn't think about this definition... I might have gotten the order wrong...</p>",
        "id": 198807383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590520099
    },
    {
        "content": "<p>Silly me. Now it should be fixed.</p>",
        "id": 198807546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590520187
    },
    {
        "content": "<p><code>finset.nat.antidiagonal n</code> is the finite set of pairs of natural numbers <code>(i,j)</code> with <code>i + j = n</code>.</p>",
        "id": 198807734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590520277
    },
    {
        "content": "<p>Don't we have a definition for this in the perfectoid project?</p>",
        "id": 198810636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590521696
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">integral_closure</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-An R-algebra A is integrally closed if every element of A that is integral over R is contained in</span>\n<span class=\"cm\">the image of the canonical map R → A. This algebra_map is required to be injective.-/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 198811435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590522050
    },
    {
        "content": "<p>This is from the perfectoid project, right?</p>",
        "id": 198811541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590522104
    },
    {
        "content": "<p>Right, it's in <code>for_mathlib</code></p>",
        "id": 198811748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590522200
    },
    {
        "content": "<p>But this is the relative case, not the absolute one. (To be clear: we want both.)</p>",
        "id": 198812229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590522430
    },
    {
        "content": "<p>You know you really should PR things to mathlib :P</p>",
        "id": 198815651,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590524052
    },
    {
        "content": "<p>Yes we know</p>",
        "id": 198815672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590524067
    },
    {
        "content": "<p>This is why we try to teach younger people to avoid our past mistakes</p>",
        "id": 198815702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590524087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> do you understand that Johan's massive removal of a bunch of stuff from core was part of a perfectoid PR? Sometimes these things take forever. When I've finished marking I am going to completely refactor normal subgroups and quotient groups again just to PR more perfectoid stuff. The task is humongous for us and we do appreciate that it needs doing but it is surprisingly difficult!</p>",
        "id": 198816990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524711
    },
    {
        "content": "<p>Haha I know I was just poking a bit of fun :)</p>",
        "id": 198817048,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590524739
    },
    {
        "content": "<p>I know :-)</p>",
        "id": 198817054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524744
    },
    {
        "content": "<p>Major design decisions have been made eg bundling ring homs since we wrote the project</p>",
        "id": 198817187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524790
    },
    {
        "content": "<p>But on the other hand I regard this now as an excuse to make mathlib better</p>",
        "id": 198817220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590524807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198807235\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> What do you think of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"err\">∑</span> <span class=\"n\">ij</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>That looks good! Much better than what I was trying, which was the last of Kenny's displayed definitions involving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>n</mi></msup><mo>∈</mo><mo stretchy=\"false\">⟨</mo><msup><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>s</mi><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msup><mi>s</mi><mi>n</mi></msup><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">r^n \\in\\langle r^{n-1}s,\\cdots,s^n\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.703492em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span>; I tried (after asking over at \"noob questions\")</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n<span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>but this failed because the <code>set.image</code> was of type <code>set (fin n) → set R</code> and I needed it to be of type <code>set R</code></p>",
        "id": 198860668,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590566517
    },
    {
        "content": "<p>Looking at the 'perfectoid project' implementation of <code>is_integrally_closed</code>, it looks like my attempt at <code>is_integrally_closed_in</code> above was missing the requirement that the algebra map is injective which gives the inclusion of rings</p>",
        "id": 198860730,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590566530
    },
    {
        "content": "<p>Yup, I also noticed the injectivity thing</p>",
        "id": 198861248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566846
    },
    {
        "content": "<p>(We're still too much used to thinking of subrings <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 198861263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566861
    },
    {
        "content": "<p>When we formalised Huber pairs, we worked with subrings for a long time, until I realised this meant that we couldn't turn <code>Z_p, Q_p</code> into a huber pair.</p>",
        "id": 198861342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566893
    },
    {
        "content": "<p>So we switched to injective ring homs</p>",
        "id": 198861370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> One big advantage of <code>finset.nat.antidiagonal</code> is that it avoids talking about subtraction of natural numbers. If you want to know why this is a good thing, write <code>#eval 2 - 3</code></p>",
        "id": 198862082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590567418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198862082\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300547\">Barinder Singh Banwait</span> One big advantage of <code>finset.nat.antidiagonal</code> is that it avoids talking about subtraction of natural numbers. If you want to know why this is a good thing, write <code>#eval 2 - 3</code></p>\n</blockquote>\n<p>aah, I see. I note that <code>#eval 1/0</code> gives the same result <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 198874020,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590575581
    },
    {
        "content": "<p>is a <code>structure</code> the same as a <code>def</code>? I was just going to write </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span>  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>which seems to compile fine, but is the <code>structure</code> syntax better?</p>",
        "id": 198874028,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590575588
    },
    {
        "content": "<p><code>structure</code> does define a new thing, like <code>def</code>, but it defines something for which the use syntax will be a bit different.</p>",
        "id": 198874165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590575695
    },
    {
        "content": "<p>you mean the <code>use</code> tactic will be written differently?</p>",
        "id": 198874369,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590575850
    },
    {
        "content": "<p>As long as the interface is there, then the only difference for users will be that there will be a slightly different syntax available for usage. For example if you defined a group to be <code>axiom1 \\and axiom2 \\and axiom3</code> and then if you had a term <code>G</code> of this type, you would forever be writing things like <code>G.2.1</code> to get to axiom 2. With a structure it's just <code>G.mul_one</code> by definition. But these things can typically be worked around. It's kind of an implementation issue I guess.</p>",
        "id": 198874371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590575852
    },
    {
        "content": "<p>I just mean the obvious statement that there are lots of ways of implementing the same mathematical idea, but different implementations will then give you different ways of accessing the information hidden inside the idea</p>",
        "id": 198874502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590575963
    },
    {
        "content": "<p>oh i see, that makes sense, so you get to name your conditions which i can see will make for way more readable code</p>",
        "id": 198874565,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590576003
    },
    {
        "content": "<p>I prefer it if some CS person does the definitions and then I just prove the theorems. But sometimes the CS people just say \"we don't know, it depends on what you want to do with it, just try anything and then change it later if it's annoying\"</p>",
        "id": 198874590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590576025
    },
    {
        "content": "<p>My advice is to ask someone like <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> just to tell you a definition and then start proving theorems with it.</p>",
        "id": 198874611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590576050
    },
    {
        "content": "<p>yep <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> has helped me out a lot,  i've now got the definitions of absolute/relative integrally-closed, am now working on lemmas proving equivalence of definitions</p>",
        "id": 198875119,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590576414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> In this case I would use the <code>structure</code> version</p>",
        "id": 198875121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590576416
    },
    {
        "content": "<p>proving lemmas is much more fun because you don't have to keep asking \"is this right?\" -- if it compiles, it's right.</p>",
        "id": 198875167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590576450
    },
    {
        "content": "<p>Looking forward to the \"fundamental theorem of absolute integrally-closedness\"</p>",
        "id": 198875181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590576459
    },
    {
        "content": "<p>Already one can ask whether the integral closure of the integral closure is the integral closure, this makes sense in a relative situation and...isn't this the sort of thing which Kenny has already essentially done?</p>",
        "id": 198875278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590576521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198875278\">said</a>:</p>\n<blockquote>\n<p>Already one can ask whether the integral closure of the integral closure is the integral closure, this makes sense in a relative situation and...isn't this the sort of thing which Kenny has already essentially done?</p>\n</blockquote>\n<p>yes i recall seeing <code>integral_closure_idem</code> in integral_closure.lean</p>",
        "id": 198875305,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590576557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is there a trick to get the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> notation above to work? In your definition above <code>∑ ij in finset.nat.antidiagonal n</code>, it's complaining about <code>unexpected token</code>, but elsewhere in the library it seems fine</p>",
        "id": 198877228,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590577988
    },
    {
        "content": "<p><code>open_locale big_operators</code></p>",
        "id": 198877262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578018
    },
    {
        "content": "<p>Somewhere near the top of your file</p>",
        "id": 198877272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590578023
    },
    {
        "content": "<p>I'm having some trouble stating that \"fundamental theorem\"; i've tried:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span>  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fundamental_theorem_integrally_closedness</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>but I get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">is_integrally_closed_in</span> <span class=\"n\">R</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span>\n</code></pre></div>\n\n\n<p>what's going on here? i thought that <code>is_integrally_closed_in</code> needs two arguments R and A, but apparently I'm wrong, is it a map from R to A that is required?</p>",
        "id": 198912610,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590594994
    },
    {
        "content": "<p>What are the imports?</p>",
        "id": 198912934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595135
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">integral_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n</code></pre></div>",
        "id": 198912998,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595169
    },
    {
        "content": "<p>Can you post fully working code? I still can't get it to compile</p>",
        "id": 198913127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595212
    },
    {
        "content": "<p>and here are the global variables and opens:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n</code></pre></div>",
        "id": 198913129,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198913127\">said</a>:</p>\n<blockquote>\n<p>Can you post fully working code? I still can't get it to compile</p>\n</blockquote>\n<p>ok one sec ...</p>",
        "id": 198913164,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595227
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">integral_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span>  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_set</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span><span class=\"n\">i</span><span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n<span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">my_set</span> <span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv_johan_absolute</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"err\">∑</span> <span class=\"n\">ij</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fundamental_theorem_integrally_closedness</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198913265,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595277
    },
    {
        "content": "<p>Thanks. If you hover over <code>is_integrally_closed_in</code> then you will see that indeed it takes one explicit argument</p>",
        "id": 198913382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595335
    },
    {
        "content": "<p>Just hover over the function where the error is</p>",
        "id": 198913478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595375
    },
    {
        "content": "<p>the explicit arguments are the one in round parentheses, right? so in this case that's just <code>(R : Type u)</code>; so it only needs one R of type <code>universes</code>?</p>",
        "id": 198913754,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595483
    },
    {
        "content": "<p>In your current set-up it is just asking for a ring R, yes</p>",
        "id": 198913844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595517
    },
    {
        "content": "<p>which of course is not a good idea, and which explains the error</p>",
        "id": 198913891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595537
    },
    {
        "content": "<p>You should think of <code>R : Type u</code> as it asking for a set, and <code>[comm_ring R]</code> as it saying \"actually, that set needs a ring structure, but I'll find it from somewhere\"</p>",
        "id": 198914013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595586
    },
    {
        "content": "<p>so the real problem is with the definition of <code>is_integrally_closed_in</code>, which ought to have input either two rings, or an algebra map from R to A?</p>",
        "id": 198914095,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595628
    },
    {
        "content": "<p>If your input is just the two rings then however will Lean guess the map between them?</p>",
        "id": 198914155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595658
    },
    {
        "content": "<p>oh, apparently <code>algebra</code> is a class so Lean <em>can</em> do this</p>",
        "id": 198914298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595711
    },
    {
        "content": "<p>So yes, it looks like the input ought to be two rings</p>",
        "id": 198914327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595732
    },
    {
        "content": "<p>and before the function is run, there had better be a variable <code>[algebra R A]</code> which will put the R-algebra structure on A into the typeclass inference system</p>",
        "id": 198914413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595774
    },
    {
        "content": "<p>This set-up is stil a bit messed up, even after the fix which I'm pushing you to notice yourself, but unfortunately I don't have time to fix it right now even though I want to support you as a new user; I have to get back to marking.</p>",
        "id": 198914684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595917
    },
    {
        "content": "<p>But before I go, does anyone know why if I hover over <code>[algebra R A] I see </code>algebra R A ring.to_semiring` ?</p>",
        "id": 198914763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590595952
    },
    {
        "content": "<p>ok thanks Kevin ... so i've tried to make the inputs to <code>is_integrally_closed_in</code> more explicit:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span>  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and then i tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fundamental_theorem_integrally_closedness</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">],</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>but that gave me error at <code>algebra</code> with semiring and comm_ring</p>",
        "id": 198914841,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590595986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198914763\">said</a>:</p>\n<blockquote>\n<p>But before I go, does anyone know why if I hover over <code>[algebra R A] I see </code>algebra R A ring.to_semiring` ?</p>\n</blockquote>\n<p>yes, my problem exactly!</p>",
        "id": 198915024,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590596053
    },
    {
        "content": "<p>This lemma is not true though, right?</p>",
        "id": 198915047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590596063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198914684\">said</a>:</p>\n<blockquote>\n<p>This set-up is stil a bit messed up, even after the fix which I'm pushing you to notice yourself, but unfortunately I don't have time to fix it right now even though I want to support you as a new user; I have to get back to marking.</p>\n</blockquote>\n<p>of course, absolutely - thanks for your help!</p>",
        "id": 198915095,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590596087
    },
    {
        "content": "<p>Because if R is integrally closed it doesn't imply that every map R -&gt; A is injective</p>",
        "id": 198915153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590596114
    },
    {
        "content": "<p>so first you might want to figure out what maths statement you're making</p>",
        "id": 198915193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590596139
    },
    {
        "content": "<p>yes indeed, now the lemma is false; that last <code>A</code> should be a fraction field of R. but the closest thing we have to that is a <code>fraction_map</code></p>",
        "id": 198916332,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590596602
    },
    {
        "content": "<p>I think the quantifiers are also not where you want them, if <code>A</code> is meant to be the fraction field.</p>",
        "id": 198917441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590597129
    },
    {
        "content": "<p>It's better to prove: for every fraction field <code>A</code>: <code>R</code> is integrally closed iff it's integrally closed in <code>A</code>.</p>",
        "id": 198917484,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590597157
    },
    {
        "content": "<p>Because now you can also conclude that if <code>R</code> is integrally closed in one fraction field, it is also in another. (And the statement is generally easier to use.)</p>",
        "id": 198917557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590597199
    },
    {
        "content": "<p>Of course there's no additional mathematical content in this version because fraction fields are all \"the same\", but if <code>A</code> can be something more general (e.g., any field that <code>R</code> maps to?) then there is.</p>",
        "id": 198917819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590597319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198917484\">said</a>:</p>\n<blockquote>\n<p>It's better to prove: for every fraction field <code>A</code>: <code>R</code> is integrally closed iff it's integrally closed in <code>A</code>.</p>\n</blockquote>\n<p>aah yes, putting the \"for every fraction field\" before the <code>:</code> makes a lot more sense, thanks Reid!</p>\n<p>So i've got a statement that now compiles:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fundamental_theorem_integrally_closedness</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]:</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>That's putting a lot of structure on R and A; does this now translate to saying: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> be an integral domain. Then, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi></mrow><annotation encoding=\"application/x-tex\">\\forall</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∀</span></span></span></span> fraction fields <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, we have : <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is integrally closed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇔</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\Leftrightarrow R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is integrally closed in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>.</p>",
        "id": 198924605,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590600450
    },
    {
        "content": "<p>Is faction_map a typeclass?</p>",
        "id": 198924705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590600489
    },
    {
        "content": "<p>ermm...<code>@[reducible] def fraction_map [comm_ring K] := localization (non_zero_divisors R) K</code> ... so i guess not?</p>",
        "id": 198924800,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590600556
    },
    {
        "content": "<p>(Then it shouldn't be in square brackets)</p>",
        "id": 198924841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590600576
    },
    {
        "content": "<p>But this is looking better -- maybe just change to round brackets?</p>",
        "id": 198924956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590600620
    },
    {
        "content": "<p>so changing it from <code>[fraction_map R A]</code> to <code>(fraction_map R A)</code> gives <code>don't know how to synthesize placeholder</code>, but changing it to <code>(H : fraction_map R A)</code> works fine, and i guess this is what I want; that A is a fraction field of R is a hypothesis, so that <code>H : </code> is necessary?</p>",
        "id": 198925268,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590600792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300547\">@Barinder Singh Banwait</span> With <code>[...]</code> you don't need to give the argument a name, with the other types of parens you (usually) do need to give the name.</p>",
        "id": 198926825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590601592
    },
    {
        "content": "<p>But I suggest you call it <code>f</code> instead of <code>H</code>, because we want to think of it as the map from <code>R</code> to its fraction field.</p>",
        "id": 198926869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590601615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198926869\">said</a>:</p>\n<blockquote>\n<p>But I suggest you call it <code>f</code> instead of <code>H</code>, because we want to think of it as the map from <code>R</code> to its fraction field.</p>\n</blockquote>\n<p>ok, will do, thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> !</p>",
        "id": 198929740,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590602907
    },
    {
        "content": "<p>Please let me know if you've got a working statement! It's high time that this lemma is proven (-;</p>",
        "id": 198930069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590603035
    },
    {
        "content": "<p>i think i've got the statement now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">integral_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span>  <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">my_set</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span><span class=\"n\">i</span><span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_integrally_closed</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span>\n<span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">my_set</span> <span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv_johan_absolute</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"err\">∑</span> <span class=\"n\">ij</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"err\">∣</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fundamental_theorem_integrally_closedness</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n  <span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">is_integrally_closed_in</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(this is just in my project for now, i know that those names aren't fit for the library!) i haven't started on the proofs yet, i was going to start that tomorrow morning</p>",
        "id": 198933981,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590604806
    },
    {
        "content": "<p>Looks good to me!</p>",
        "id": 198934290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590604947
    },
    {
        "content": "<p>i've got stuck on proving the following mathematically-obvious statement from above: Suppose we have a linear relation </p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>+</mo><mi>j</mi><mo>=</mo><mi>n</mi></mrow></munder><msub><mi>a</mi><mi>i</mi></msub><msup><mi>r</mi><mi>j</mi></msup><msup><mi>s</mi><mi>i</mi></msup><mo>=</mo><mn>0.</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{i+j=n} a_i r^j s^i = 0.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.463782em;vertical-align:-1.413777em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathdefault mtight\">n</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.413777em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8746639999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span></span></span></span></span></p>\n<p>with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_n \\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. Then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>n</mi></msup><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">r^n \\in</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.703492em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span></span></span></span> span <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><msup><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>s</mi><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msup><mi>s</mi><mi>n</mi></msup><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle r^{n-1}s, \\cdots, s^n\\rangle</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">⟩</span></span></span></span>. How does one show span membership? I saw that linear_algebra.basic has a <code>mem_span</code> lemma, which I tried in the following MWE as follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n  <span class=\"err\">∑</span> <span class=\"n\">ij</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n  <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">my_set</span> <span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s_non_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_span</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p_H</span><span class=\"o\">,</span>\n  <span class=\"err\">???</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>...but then I get stuck :(</p>",
        "id": 199119226,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590735334
    },
    {
        "content": "<p>but it's wrong</p>",
        "id": 199119756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590735775
    },
    {
        "content": "<p>n=1, 2r+s=0</p>",
        "id": 199119766,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590735786
    },
    {
        "content": "<p>(r=1, s=-2)</p>",
        "id": 199119773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590735797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/Integrally.20closed.20domain/near/198702169\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is integrally closed<br>\niff for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r, s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><msup><mo stretchy=\"false\">)</mo><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><msup><mo stretchy=\"false\">)</mo><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">(r/s)^n + a_1 (r/s)^{n-1} + \\cdots + a_n = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r/s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span><br>\niff for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo separator=\"true\">,</mo><mi>s</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r, s \\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">s \\ne 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>n</mi></msup><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><msup><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>s</mi><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msup><mi>s</mi><mi>n</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">r^n + a_1 r^{n-1} s + \\cdots + a_n s^n = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.964108em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.814392em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∣</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">s \\mid r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span></p>\n</blockquote>\n<p>you will notice in my formulation that the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">r^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></p>",
        "id": 199119844,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590735842
    },
    {
        "content": "<p>Oh yes, quite right, sorry I forgot to explicitly state in my last post that I'm taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_0 = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. My apologies. It is in the statement of the <code>lemma mwe</code> i'm trying to prove; i'll edit for clarity, Thanks Kenny</p>",
        "id": 199120044,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590736028
    },
    {
        "content": "<p>you can do some rewrites to change the goal into <code>finset.sum _ \\in span R _</code></p>",
        "id": 199120319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590736224
    },
    {
        "content": "<p>And after that, there should be a <code>submodule.sum_mem</code> lemma, hopefully.</p>",
        "id": 199121615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590737295
    },
    {
        "content": "<p>thanks, yes that all looks promising. unfortunately i'm struggling to rewrite as suggested, i'm not sure how I can \"isolate a summand\" from a sum, which is my Hypothesis <code>H</code>; so far I've got this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n  <span class=\"err\">∑</span> <span class=\"n\">ij</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">antidiagonal</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n  <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">my_set</span> <span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s_non_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">i</span><span class=\"o\">)),</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_span</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">p_H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">my_set</span> <span class=\"n\">at</span> <span class=\"n\">p_H</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199122782,
        "sender_full_name": "Barinder Singh Banwait",
        "timestamp": 1590738240
    },
    {
        "content": "<ol>\n<li>you might consider using <code>finset.range (n+1)</code> instead of antidiagonal</li>\n<li>if you insist, then there should be some <code>finset.insert_erase</code> lemma for you to rewrite with</li>\n</ol>",
        "id": 199123381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590738655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Using <code>finset.range</code> will create nat subtraction problems elsewhere.</p>",
        "id": 199125075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739870
    },
    {
        "content": "<p>So I would opt for the <code>finset.insert_erase</code> approach</p>",
        "id": 199125087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739883
    },
    {
        "content": "<p>solvable nat subtraction problems</p>",
        "id": 199125091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590739886
    },
    {
        "content": "<p>Solvable <code>finset.insert_erase</code> problem</p>",
        "id": 199125112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590739902
    }
]