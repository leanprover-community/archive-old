[
    {
        "content": "<p>Actually I just wanted to define my own <code>pred</code> which is already defined. Hence I thought I just redefine <code>nat</code> but I ran into some problems. First of all it still seems to use <code>succ</code> from the prelude <code>nat</code>. What have I done wrong? Second how do I tell it to use decimal notation for my nat? I am looking at the prelude file but now clue...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`ℕ`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</code></pre></div>",
        "id": 210760128,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600703150
    },
    {
        "content": "<p>I think <code>open nat</code> opened the global nat</p>",
        "id": 210762288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704043
    },
    {
        "content": "<p>try <code>open mynat.nat</code></p>",
        "id": 210762306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704050
    },
    {
        "content": "<p>To get numbers, you need to implement 0 and 1 and +</p>",
        "id": 210762388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704090
    },
    {
        "content": "<p>But that is only for parsing. For printing <code>succ (succ zero)</code> as <code>2</code> I think the printer support for that is hardcoded for nat</p>",
        "id": 210762580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704145
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`ℕ`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">pred</span> <span class=\"mi\">7</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</code></pre></div>\n\n\n<p>(I implemented add backwards for you <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> )</p>",
        "id": 210762876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704283
    },
    {
        "content": "<p>Wouldn't that be giving <code>bit0</code> and <code>bit1</code>lemmas?</p>",
        "id": 210762910,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600704299
    },
    {
        "content": "<p>Lean has some magic to print sequences of succs in decimal notation. I think it is a misfeature, because it makes it easy to confuse with the \"official\" bit0/bit1 representation</p>",
        "id": 210763051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704363
    },
    {
        "content": "<p>but it makes sense if you are using <code>#reduce</code> instead of <code>#eval</code> to evaluate numbers</p>",
        "id": 210763130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704384
    },
    {
        "content": "<p>If you use <code>#eval</code> to evaluate numbers, you can print the result using a <code>has_repr</code> instance:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">...</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_root_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">to_root_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"err\">∘</span> <span class=\"n\">to_root_nat</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">pred</span> <span class=\"mi\">7</span> <span class=\"c1\">-- 6</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</code></pre></div>",
        "id": 210763532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704569
    },
    {
        "content": "<p>Here I'm piggybacking on the implementation of <code>has_repr</code> for the root nat, but you can also implement it directly</p>",
        "id": 210763625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704607
    },
    {
        "content": "<p>you just have to go through the trouble of turning numbers into strings in base 10 by repeated division</p>",
        "id": 210763698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600704648
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 210763879,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600704755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/redefining.20nat/near/210762876\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`ℕ`</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">add</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">pred</span> <span class=\"mi\">7</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n</code></pre></div>\n\n\n<p>(I implemented add backwards for you <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> )</p>\n</blockquote>\n<p>Thanks a lot. However, I stick with the official lean definition of + to avoid confusion...</p>",
        "id": 210764045,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600704842
    },
    {
        "content": "<p>I'm afraid you should only be accessing nat through its API, so you can't tell what the official definition is :-)</p>",
        "id": 210766919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600706222
    },
    {
        "content": "<p>People tell me what I <em>should do</em>. I just had my 58th birthday yesterday and I was hoping that I am now old enough that people stop telling me how to behave.</p>\n<p>I already got told off for saying <em>brain damaged</em> and <em>destructive logic</em> and now I am not allowed to redefine the natural numbers???</p>",
        "id": 210768086,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600706828
    },
    {
        "content": "<p>Too bad for you... this is the internet.</p>",
        "id": 210768348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600706969
    },
    {
        "content": "<p>(Also, congrats with your birthday)</p>",
        "id": 210768360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600706977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/redefining.20nat/near/210768348\">said</a>:</p>\n<blockquote>\n<p>Too bad for you... this is the internet.</p>\n</blockquote>\n<p>I am not sure what exactly it is. My impression is it is contemporary culture. People are easily offended these days.</p>",
        "id": 210769767,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600707693
    },
    {
        "content": "<p>I thought giving people recommendations of what they should do (in a particular area) is the role of experts <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>  You don't have to follow advice if you don't want to</p>",
        "id": 210770328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600707932
    },
    {
        "content": "<p>I think people have been telling each other what to do since Adam and Eve (-;</p>",
        "id": 210770497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600707982
    },
    {
        "content": "<p>But the internet is a very convenient place to do so <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 210770527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600707998
    },
    {
        "content": "<p>Regarding redefining nat: I wouldn't even call it inadvisable, at least for teaching purposes (consider that the natural numbers game is built around the idea of redefining nat), but you have to understand that some aspects of nat are baked into lean C++ (which is why they are defined in the lean core library and not in mathlib) so you won't be able to perfectly replicate all aspects with your own definition</p>",
        "id": 210771014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600708231
    },
    {
        "content": "<p>However, the <em>kernel</em> doesn't have any special support for nat, so from a foundational point of view your own mynat will be just as good. It's just in stuff around elaboration, printing and so on where you see nat being favored over its identical twins</p>",
        "id": 210771248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600708334
    }
]