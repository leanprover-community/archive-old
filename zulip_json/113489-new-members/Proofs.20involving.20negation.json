[
    {
        "content": "<p>Hi all,<br>\nI'm going through \"Logic and Proof\" and \"Theorem Proving in Lean\" exercises and got stuck on the ones that make use of negation.<br>\nCould someone outline the line of reasoning ivolved in proving something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>?<br>\nWith conjunction, disjunction and implication I usually start with a corresponding introduction rule and the rest follows naturally, but can't wrap my head around how to apply the same strategy to negation.</p>",
        "id": 196642544,
        "sender_full_name": "Noob",
        "timestamp": 1588775443
    },
    {
        "content": "<p><code>not X</code> is just syntax sugar for <code>X -&gt; false</code> if that helps</p>",
        "id": 196642629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588775478
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hnA</span> <span class=\"n\">hnB</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hAB</span> <span class=\"k\">with</span> <span class=\"n\">hA</span> <span class=\"n\">hB</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196642803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588775543
    },
    {
        "content": "<p>If you don't mind using tactics then you can follow the tutorials project. It has several files about negation, starting with <a href=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/07_first_negations.lean\" title=\"https://github.com/leanprover-community/tutorials/blob/master/src/exercises/07_first_negations.lean\">https://github.com/leanprover-community/tutorials/blob/master/src/exercises/07_first_negations.lean</a></p>",
        "id": 196642841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588775566
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hnA</span> <span class=\"n\">hnB</span> <span class=\"n\">hAB</span><span class=\"o\">,</span> <span class=\"n\">hAB</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hnA</span> <span class=\"n\">hnB</span>\n</code></pre></div>",
        "id": 196642950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588775620
    },
    {
        "content": "<p>I'm not familiar with the cases and intro syntax yet, but I suppose it's equavalent to</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Is that correct?</p>",
        "id": 196644900,
        "sender_full_name": "Noob",
        "timestamp": 1588776431
    },
    {
        "content": "<p>I'd prefer not use tactics at this point, but do everything manually. Want to understand what is really going on.</p>",
        "id": 196645220,
        "sender_full_name": "Noob",
        "timestamp": 1588776581
    },
    {
        "content": "<p>you probably meant <code>λ hAB : A ∨ B,</code>, but other than that you're right.</p>",
        "id": 196645418,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588776668
    },
    {
        "content": "<p>Correct. So here</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>we have destructured our hypothesis such that each part can be referred to individually, we introduced a new hypothesis which is a negation of what needs to be proven.<br>\nDo we need the new hypothesis so we can arrive at a contradiction? I don't see how if so.</p>",
        "id": 196647568,
        "sender_full_name": "Noob",
        "timestamp": 1588777473
    },
    {
        "content": "<p>try eliminating <code>hAB</code> and see if you can then derive <code>false</code> in both cases of the elimination.</p>",
        "id": 196648051,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588777677
    },
    {
        "content": "<p>I wrote <code>hAB.elim</code> but this is using some cunning dot notation. You can also write <code>or.elim hAB</code></p>",
        "id": 196649196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588778048
    },
    {
        "content": "<p>Thanks for the hints, I managed to prove it like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hAB</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hA</span> <span class=\"n\">hnA</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hB</span> <span class=\"n\">hnB</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Still can't figure out why this</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hAB</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnA</span> <span class=\"n\">hA</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">hnB</span> <span class=\"n\">hB</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>doesn't work - it looks the same to me.</p>",
        "id": 196652953,
        "sender_full_name": "Noob",
        "timestamp": 1588779535
    },
    {
        "content": "<p>works for me. note that you don't actually need <code>false.elim</code> or <code>absurd</code> because you're trying to prove <code>false</code> itself.</p>",
        "id": 196654837,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588780322
    },
    {
        "content": "<p>Actually, it works for me too - VS Code got me confused.<br>\nWith your latest suggestion the proof looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnA</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnB</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n      <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hAB</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">hnA</span> <span class=\"n\">hA</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">hnB</span> <span class=\"n\">hB</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Thanks a lot for the help!</p>",
        "id": 196656356,
        "sender_full_name": "Noob",
        "timestamp": 1588780910
    },
    {
        "content": "<p>another small trick: after using <code>(λ hA, hnA hA) = hnA</code>, your proof will look pretty similar to kevin's.</p>",
        "id": 196667682,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1588785640
    },
    {
        "content": "<p>I am try to prove that 1 \\ne 0. I can apply <code>simp</code>, and lean is happy. But I wanted to do it step-by-step.<br>\nTo my knowledge, this should be an axiom (if these 1 and 0 were natural numbers, at least: but I believe that Lean has been taught that 0 : \\R is the same as 0 : N; and likewise for 1). At any rate, I have tried <br>\n<code>begin intro h,</code><br>\nand now should deduce from <code>h: 1=0</code> that <code>false</code><br>\nAnd I am stuck, both in performing the proof and in observing that if I try <code>simp</code> now, Lean is no longer happy.</p>",
        "id": 197566312,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589467944
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a> may help</p>",
        "id": 197566769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589468125
    },
    {
        "content": "<p>Seems a long read: I will try to digest the whole of it. Thanks.</p>",
        "id": 197567351,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589468336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> That blogpost is good. But here is another approach, to figure things out yourself: you turn your first <code>simp</code> into <code>squeeze_simp</code> to see what it did. Then, you get that lemma name (probably <code>nat.zero_ne_one</code>) and write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span>\n</code></pre></div>\n\n\n<p>After that, you can right-click on it, and \"Go to definition\".</p>",
        "id": 197567353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468336
    },
    {
        "content": "<p>ah! the <code>squeeze_simp</code> is the gadget I was dreaming of! tnx</p>",
        "id": 197567449,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1589468374
    },
    {
        "content": "<p>Then you can see how it's proven. And you'll find the <code>no_confusion</code> thing yourself. End result: you will ask a question here about <code>no_confusion</code> and still get pointed to the blogpost. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 197567480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> Yup, <code>squeeze_simp</code> is amazing. There is also <code>library_search</code>, <code>suggest</code>, <code>hint</code>, and <code>tidy?</code> that are useful tools.</p>",
        "id": 197568134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468615
    },
    {
        "content": "<p>We should rename <code>squeeze_simp</code> to <code>simp?</code> now that we have forked lean.</p>",
        "id": 197568249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468646
    },
    {
        "content": "<p>No, we should make <code>simp?</code> do the more useful thing</p>",
        "id": 197568300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589468661
    },
    {
        "content": "<p>Which is?</p>",
        "id": 197568325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589468670
    },
    {
        "content": "<p>described <a href=\"#narrow/stream/113488-general/topic/set_option.20trace.2Esimplify.2Erewrite.20true/near/195956496\">here</a></p>",
        "id": 197568390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589468701
    },
    {
        "content": "<p>I disagree that this is the more useful thing. I find myself using <code>squeeze_simp</code> a lot more than actually trying to understand the list of rewrites. How about <code>simp?</code> for <code>squeeze_simp</code> and <code>simp??</code> for <code>simp</code> with trace enabled?</p>",
        "id": 197582090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589474052
    },
    {
        "content": "<p>I really like the idea of a one character diff from <code>simp</code> to <code>squeeze_simp</code></p>",
        "id": 197582140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589474088
    },
    {
        "content": "<p>I would have broken my nonterminal simp habit faster if it were one character</p>",
        "id": 197582210,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589474121
    },
    {
        "content": "<p>Does ‽ count as one character?</p>",
        "id": 197585585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589475579
    },
    {
        "content": "<p>I've never used squeeze_simp</p>",
        "id": 197585601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589475585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> You do have sliced bread, do you?</p>",
        "id": 197586166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589475793
    },
    {
        "content": "<p>I guess I don't really understand what it's for</p>",
        "id": 197586819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589476026
    },
    {
        "content": "<p>aside from making proofs run faster, which I don't care terribly much about</p>",
        "id": 197586942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589476073
    },
    {
        "content": "<p>I care about making proofs faster even before I've finished writing them</p>",
        "id": 197589011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589476977
    },
    {
        "content": "<p>if I start off my proof with <code>simp *</code> then that call is going to slow down the entire interaction cycle for the rest of the proof</p>",
        "id": 197589097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477019
    },
    {
        "content": "<p>I guess I also don't really use <code>simp</code> that much, or when I do use it experimentally I want to replace it with <code>rw</code>, not <code>simp only</code></p>",
        "id": 197589107,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589477025
    },
    {
        "content": "<p>Right, I use <code>squeeze_simp</code> for that</p>",
        "id": 197589215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477063
    },
    {
        "content": "<p>To figure out what should go in the <code>rw</code></p>",
        "id": 197589231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477072
    },
    {
        "content": "<p>But then don't you still have to solve a puzzle?</p>",
        "id": 197589235,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589477074
    },
    {
        "content": "<p>While the rewrite trace would just tell you the answer?</p>",
        "id": 197589260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589477086
    },
    {
        "content": "<p>Sure, but at least I know what the pieces are</p>",
        "id": 197589265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477088
    },
    {
        "content": "<p>I often convert <code>squeeze_simp</code> calls to <code>rw</code> as well</p>",
        "id": 197589275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477091
    },
    {
        "content": "<p>I think maybe you are the one without sliced bread? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197589310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589477107
    },
    {
        "content": "<p>I still want an auto-replace, not a tactic trace</p>",
        "id": 197589352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477134
    },
    {
        "content": "<p>A <code>simp??</code> that outputs <code>Try this: rw [foo, bar, bar, ← quux, foo]</code> would be awesome.</p>",
        "id": 197589380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477148
    },
    {
        "content": "<p>but it would be nice if the order that lemmas are printed matches the rewrite order</p>",
        "id": 197589384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477151
    },
    {
        "content": "<p>I think <code>simp?</code> could print both</p>",
        "id": 197589471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477177
    },
    {
        "content": "<p>Of course <code>simp only</code> is more powerful than <code>rw</code>, so you can't always get what you want, right?</p>",
        "id": 197589477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477180
    },
    {
        "content": "<p>also <code>rw</code> has to repeat lemmas and <code>simp only</code> doesn't, and <code>simp only</code> works under binders</p>",
        "id": 197589543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477211
    },
    {
        "content": "<p>so it's not always going to work</p>",
        "id": 197589563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477219
    },
    {
        "content": "<p>but I think even the <code>simp only</code> proof fails sometimes</p>",
        "id": 197589597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589477234
    },
    {
        "content": "<p>Yup, although it got a lot less rare</p>",
        "id": 197589785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589477305
    },
    {
        "content": "<p><code>simp?</code> which offers both <code>simp only</code> and <code>rw</code> options would be lovely. What do we have to do to make it happen?</p>",
        "id": 197589963,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589477393
    },
    {
        "content": "<p>If we finish moving <code>rewrite_search</code> to mathlib, one possible mechanism for creating the <code>rw</code> suggestion would be to take the current output from <code>squeeze_simp</code> and pass that as the list of allowed lemmas to <code>rewrite_search</code>. That will automatically take care of generating the <code>rw</code> statement.</p>",
        "id": 197829629,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589689373
    }
]