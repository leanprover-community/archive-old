[
    {
        "content": "<p>In this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_inv_flip</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">anz</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">bnz</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">field_simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_inv_flip_is_inv</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">anz</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">bnz</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_inv_cancel_right</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">anz</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">bnz</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xnz</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n<span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">prod_inv_flip_is_inv</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>the <code>rw prod_inv_flip_is_inv a b</code> is failing, and I'm not understanding why.</p>",
        "id": 215162964,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1604101206
    },
    {
        "content": "<p>I tried <code>set option pp.all true</code> and got this message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_inv.inv.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_has_inv.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n             <span class=\"n\">a</span>\n             <span class=\"n\">b</span><span class=\"o\">))</span>\n       <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 215163028,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1604101291
    },
    {
        "content": "<p>That's because (despite where you put the spaces <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>) <code>x * (a*b)⁻¹*b*a</code> means <code>((x * (a*b)⁻¹)*b)*a</code>.</p>",
        "id": 215163122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604101362
    },
    {
        "content": "<p>There is actually another tactic for dealing with this exact issue: <code>assoc_rw</code></p>",
        "id": 215163147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604101405
    },
    {
        "content": "<p>thanks!<br>\n<code>assoc_rw</code> did the trick, and with <code>ring</code>  I was able to finish all goals, but I was getting failures saying \"result contains meta-variables\".  <br>\nI found in another thread the <code>recover</code> goal, and from that was able to call <code>exact</code> a couple times to clear hypotheses, but the \"For debugging only\" in the description of <code>recover</code> is making me nervous</p>",
        "id": 215164017,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1604102440
    },
    {
        "content": "<p>This is normally down to a buggy tactic. Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 215164227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604102713
    },
    {
        "content": "<p>trying to minimize now</p>",
        "id": 215164658,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1604103218
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mwe</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">abcd_is_adbc</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_inv_flip</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">anz</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">bnz</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">field_simp</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_inv_flip_is_inv</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">anz</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">bnz</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prod_inv_cancel_right</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">anz</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">bnz</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xnz</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n<span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">assoc_rw</span> <span class=\"n\">prod_inv_flip_is_inv</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">recover</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bnz</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">anz</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">mwe</span>\n</code></pre></div>",
        "id": 215164898,
        "sender_full_name": "Jake Kesinger",
        "timestamp": 1604103491
    },
    {
        "content": "<p>It seems like <code>assoc_rw</code> doesn't handle hypotheses well in a partially applied term. <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> </p>\n<p>As a workaround, <code>assoc_rw prod_inv_flip_is_inv a b _ _</code> produced 3 goals as expected.</p>",
        "id": 215172178,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604115656
    },
    {
        "content": "<p>Would you mind filing a bug with this information and tagging me?</p>",
        "id": 215172480,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604116206
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4846\">#4846</a></p>",
        "id": 215172548,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604116333
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 215172747,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1604116786
    }
]