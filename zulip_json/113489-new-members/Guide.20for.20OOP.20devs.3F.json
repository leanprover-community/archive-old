[
    {
        "content": "<p>Hi All. Any guides for non-functional developers? I'm trying to learn lean4 and having a bit of a time with it. I've mainly worked with OOP in the past. I have serval questions about making the transition to lean. I'm getting a real \"just go read the source vibe\" (e.g. <a href=\"https://leanprover.github.io/lean4/doc/list.html\">https://leanprover.github.io/lean4/doc/list.html</a> is blank) is there any docs that i'm missing?</p>",
        "id": 311918566,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669244042
    },
    {
        "content": "<p>There is a WIP programming book: <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a><br>\nThere is docs: <a href=\"https://leanprover-community.github.io/mathlib4_docs/\">https://leanprover-community.github.io/mathlib4_docs/</a><br>\nThere is TIPL4: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a></p>\n<p>And there is indeed the source code^^ And also the lean4 topic if you have further questions.</p>",
        "id": 311920075,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1669245100
    },
    {
        "content": "<p>(<a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> is a \"stream\" not a \"topic\")</p>",
        "id": 311926419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669250171
    },
    {
        "content": "<p>I've read through <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a> which was very math heavy for me. I received a MS in compsci in 2018, but I haven't done any proofs since discrete math in undergrad around 2002. </p>\n<p>I started <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a> but that feels like it expects that you already know functional programming and is teaching you the syntax of lean for the concepts you already know. Haskell is mentioned a few times in there, should I go learn that first? </p>\n<p>I really am interested in learning this language as programming language (i.e. to produce executables), I'm just having a bit of trouble getting started.</p>",
        "id": 311927717,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669251435
    },
    {
        "content": "<p>You could read Learn You a Haskell for Great Good! then do all the same exercises in Lean….</p>",
        "id": 311928481,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669252145
    },
    {
        "content": "<p>Here is a stack exchange answer I wrote which might help you a bit:  <a href=\"https://proofassistants.stackexchange.com/questions/1701/a-project-in-lean-which-involves-programming/1708#1708\">https://proofassistants.stackexchange.com/questions/1701/a-project-in-lean-which-involves-programming/1708#1708</a></p>",
        "id": 311928858,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669252534
    },
    {
        "content": "<p>Even more tenuous, but here are some notes I made on functional programming for people who only know Python, but honestly you might be better off with a more standard piece of documentation: <a href=\"https://github.com/jasonrute/functional_programing_workshop\">https://github.com/jasonrute/functional_programing_workshop</a></p>",
        "id": 311929055,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669252772
    },
    {
        "content": "<p>in general don’t be discorouaged.  Functional programming is a different way to think about code and will take a little time to learn.</p>",
        "id": 311929116,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669252812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  your <a href=\"https://github.com/jasonrute/functional_programing_workshop\">https://github.com/jasonrute/functional_programing_workshop</a> guide is actually very helpful. Thank you. Comparing it to the declarative nature of SQL helps a lot. I have a question is how would you go about translating a simple class with properties and methods into a functional language?</p>",
        "id": 311930143,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669254007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542196\">@Arien Malec</span> this one? <a href=\"http://learnyouahaskell.com/chapters\">http://learnyouahaskell.com/chapters</a></p>",
        "id": 311930184,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669254076
    },
    {
        "content": "<p>That’s the one…</p>",
        "id": 311930288,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669254197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"567806\">@James B Clifford</span> I would caution against trying to cram an object oriented approach into Lean code, but here is some advice.  Structures in Lean are the closest thing to classes in the sense of that they store fields of multiple information (and you can use the usual dot notation to access a field).  Inductive types are similar and more general, but use a more functional notation.  They are needed if you want your type to be recursive.  As for class methods, usually all you are interested in is having functions associated with a particular type.  In lean <code>z.abs</code> is the same thing as <code>Int.abs z</code>.  The idea is just that if a function is under the <code>Int</code>namespace, then you can use dot notation and the thing to the left of the dot is put in for the first argument of that type.</p>",
        "id": 311930706,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669254717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span>  kinda reminds me of the old GTK+ style of \"classes\" in ANSI C. where, for example a linked list, would declare a struct linked_list and a set of functions with declarations like linked_list_blank(struct linked_list *self, ...). but you are right, I should stop thinking in classes.</p>",
        "id": 311930987,
        "sender_full_name": "James B Clifford",
        "timestamp": 1669255038
    },
    {
        "content": "<p>Arguably OOP <a href=\"https://eev.ee/blog/2013/03/03/the-controller-pattern-is-awful-and-other-oo-heresy/\">doesn't have much to do with classes either</a>!</p>",
        "id": 311931695,
        "sender_full_name": "Julian Berman",
        "timestamp": 1669255773
    },
    {
        "content": "<p>I think that's right -- \"pragmatic\" languages built on HM type theory, like Swift, are used by \"regular old developers\" who don't read Category Theory for the Working Programmer, and mostly they model stuff with <code>struct</code>s (spelled <code>structure</code> in Lean) and <code>enum</code>s (spelled <code>inductive</code> in Lean).</p>\n<p>These days many modern \"OO\" programming languages have Hindley-Milner type systems bolted on, and heavily use functional programming around containers. And while typeclasses can do crazy impressive things, they also play the same role that Java/C# interfaces do.</p>\n<p>Where you want a bag of properties, use a <code>structure</code>; where you want to model something like a state machine or flags, use an <code>inductive</code>, where you want to model what you might have done in an abstract class or an interface, use a <code>class</code>.</p>\n<p>When you want to model OO design patterns, learn what a monoid in the category of endofunctors is...</p>",
        "id": 311936851,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669260153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"567806\">James B Clifford</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20OOP.20devs.3F/near/311927717\">said</a>:</p>\n<blockquote>\n<p>I started <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a> but that feels like it expects that you already know functional programming and is teaching you the syntax of lean for the concepts you already know. Haskell is mentioned a few times in there, should I go learn that first? </p>\n</blockquote>\n<p>I think you should rather talk with the author <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>. This book isn't meant to assume you know functional programming. Anyone saying \"you should first read Learn you a Haksell first\" should talk to David to understand why they think this.</p>",
        "id": 311952629,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669272428
    },
    {
        "content": "<p>And of course thinking in terms of \"how can I write python in Lean?\" is a very bad starting point to learn Lean, and the same is true with any pair of distinct programming languages instead of (python, Lean), although it is very tempting in the beginning.</p>",
        "id": 311952788,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669272527
    },
    {
        "content": "<p>I was recently looking at the tutorial for Isabelle (as a theorem prover) and I was shocked to see that it explicitly said you should know some functional programming first.  That really puts up a barrier to entry.  I really appreciate that TPIL and FPIL at least try to be a self contained intros with little or no background.</p>",
        "id": 312004321,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669292957
    },
    {
        "content": "<p>Also one more piece of advice that hasn’t been said is to just to pick small programming tasks and just start to code them in Lean.  (Some like Advent of Code.). This is how I learned Python.  I find having a practical, but simple task is a great way to get past the abstract barrier and figure out how to actually accomplish stuff in a particular language.</p>",
        "id": 312004961,
        "sender_full_name": "Jason Rute",
        "timestamp": 1669293180
    },
    {
        "content": "<p>Let me mention that <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> stumbled upon that message when learning Isabelle (or was it another ITP?), so he went onto learning Haskell, and proceeded to forget about Isabelle <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 312022967,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669298702
    },
    {
        "content": "<p>Agda rather than Isabelle - the first tutorial I found at the time said \"learn Haskell first\"</p>",
        "id": 312023230,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1669298765
    },
    {
        "content": "<p>It was this: <a href=\"http://learnyouanagda.liamoc.net/pages/introduction.html\">http://learnyouanagda.liamoc.net/pages/introduction.html</a></p>",
        "id": 312023349,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1669298802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20OOP.20devs.3F/near/312004321\">said</a>:</p>\n<blockquote>\n<p>I was recently looking at the tutorial for Isabelle (as a theorem prover) and I was shocked to see that it explicitly said you should know some functional programming first.  That really puts up a barrier to entry.</p>\n</blockquote>\n<p>I'm a user of Isabelle, and though I like it very much, we really struggled to get started. It seems that your are meant to subscribe to the mailing list and ask everything there. Now Paulson started a <a href=\"https://lawrencecpaulson.github.io/\">blog</a>, with <a href=\"https://lawrencecpaulson.github.io/2021/10/13/Fib-example.html\">some</a> <a href=\"https://lawrencecpaulson.github.io/2021/10/20/Fib-example-contd.html\">entries</a> that might serve as a better introduction.</p>",
        "id": 312041944,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1669304361
    },
    {
        "content": "<p>Just going through FPIL, it starts in pretty deep water in the prelude, but then goes back to basics but dives back into deeper waters from time to time, often when explaining why you might get certain errors….</p>",
        "id": 312043424,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669304868
    },
    {
        "content": "<p>&amp; of course certain basic questions (how do I read a file) have a tendency to get complicated all by themselves.</p>",
        "id": 312043649,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669304943
    },
    {
        "content": "<p>Tho FPIL does a good job of not using the “M” word.</p>",
        "id": 312044092,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669305104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20OOP.20devs.3F/near/312044092\">said</a>:</p>\n<blockquote>\n<p>Tho FPIL does a good job of not using the “M” word.</p>\n</blockquote>\n<p>Beware! The chapter on the M-word is coming out Very Soon!</p>",
        "id": 312340535,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669467722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"567806\">James B Clifford</span> <a href=\"#narrow/stream/113489-new-members/topic/Guide.20for.20OOP.20devs.3F/near/311927717\">said</a>:</p>\n<blockquote>\n<p>I started <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a> but that feels like it expects that you already know functional programming and is teaching you the syntax of lean for the concepts you already know. Haskell is mentioned a few times in there, should I go learn that first? </p>\n</blockquote>\n<p>My intention with the book is that you should not need to know any functional language to use it, and I have tried hard to ensure that each step is explained and documented in the book itself. Any references to Haskell or ML are there to give proper credit to the origins of important ideas. That said, nobody's perfect, and I'm sure there are spots in the book that take steps that are too long. It would be very useful for me to know where the book lost you so that I can make it better! I hope that you will let me know.</p>",
        "id": 312341053,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669467947
    },
    {
        "content": "<p>Just came across this &amp; it’s quite good</p>",
        "id": 312696452,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669660949
    },
    {
        "content": "<p><a href=\"https://agentultra.github.io/lean-4-hackers/\">https://agentultra.github.io/lean-4-hackers/</a></p>",
        "id": 312696457,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669660952
    },
    {
        "content": "<p><a href=\"https://vimeo.com/113588389\">https://vimeo.com/113588389</a><br>\nThis F# video was very helpful</p>",
        "id": 314162840,
        "sender_full_name": "James B Clifford",
        "timestamp": 1670295772
    },
    {
        "content": "<p>I appreciate this intro to functional programming: <a href=\"https://youtu.be/0if71HOyVjY\">https://youtu.be/0if71HOyVjY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"0if71HOyVjY\" href=\"https://youtu.be/0if71HOyVjY\"><img src=\"https://uploads.zulipusercontent.net/99305421427ee35e0aa16a04777ec6c9bb94c0e5/68747470733a2f2f692e7974696d672e636f6d2f76692f3069663731484f79566a592f64656661756c742e6a7067\"></a></div>",
        "id": 314691098,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1670510589
    },
    {
        "content": "<p>Before getting into Lean, my only previous experience was with imperative languages. ~18 years of C, C++, Java, Python and Javascript mostly. And of course I struggled a lot with Lean. In my experience, trying to mimic my previous ways of thinking about computation just slowed me down. So I just opened myself up to new mindblowing experiences, similar to the first ones I had when I was learning about programming for the first time. I was used to thinking like a turing machine and then I had to start thinking more like lambda calculus</p>",
        "id": 314873587,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1670585442
    }
]