[
    {
        "content": "<p>@waldo <span class=\"user-mention\" data-user-id=\"246489\">@Tim Hosgood</span> <span class=\"user-mention\" data-user-id=\"246635\">@Emily Riehl</span> maybe it's sensible to talk about the natural number game in a separate thread.</p>",
        "id": 179137844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117483
    },
    {
        "content": "<p>yeah sure</p>",
        "id": 179137853,
        "sender_full_name": "waldo",
        "timestamp": 1572117501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246593\">@waldo</span> did reloading the page help?</p>",
        "id": 179137856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117505
    },
    {
        "content": "<p>still getting the lean is busy</p>",
        "id": 179137860,
        "sender_full_name": "waldo",
        "timestamp": 1572117534
    },
    {
        "content": "<p>what browser are you using?</p>",
        "id": 179137861,
        "sender_full_name": "waldo",
        "timestamp": 1572117538
    },
    {
        "content": "<p>It works for me on Chrome</p>",
        "id": 179137866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117548
    },
    {
        "content": "<p>and it works for me on Firefox</p>",
        "id": 179137947,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1572117690
    },
    {
        "content": "<p>Do you see any strange messages in your browser console?</p>",
        "id": 179137948,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572117692
    },
    {
        "content": "<p>yeah, it fails to compile the wasm (web assembly)</p>",
        "id": 179137951,
        "sender_full_name": "waldo",
        "timestamp": 1572117706
    },
    {
        "content": "<p>i'm happy to see that sites actually usign web assembly</p>",
        "id": 179137954,
        "sender_full_name": "waldo",
        "timestamp": 1572117718
    },
    {
        "content": "<p>What about on Firefox? What version of Firefox are you using?</p>",
        "id": 179137992,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572117724
    },
    {
        "content": "<p>maybe I have changed some privacy settings..</p>",
        "id": 179137995,
        "sender_full_name": "waldo",
        "timestamp": 1572117726
    },
    {
        "content": "<p>latest firefox but privacy settings on (cookies mainly)</p>",
        "id": 179137996,
        "sender_full_name": "waldo",
        "timestamp": 1572117743
    },
    {
        "content": "<p>hmm, I'm also on the latest Firefox and have pretty harsh privacy settings too</p>",
        "id": 179138002,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1572117765
    },
    {
        "content": "<p>I have to go, let's speak later</p>",
        "id": 179138011,
        "sender_full_name": "waldo",
        "timestamp": 1572117822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> told me that the Lean server stuff he was doing was tested in Chrome</p>",
        "id": 179138012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117828
    },
    {
        "content": "<p>I know this probably isn't causing the problem, but I didn't realise at first that only things <em>before</em> your cursor were getting evaluated, and being halfway through a line could give funny output</p>",
        "id": 179138023,
        "sender_full_name": "Tim Hosgood",
        "timestamp": 1572117842
    },
    {
        "content": "<p>For what it's worth, I just get a blank page if I try to open the game in a \"private window\", but in a normal tab with cookies etc. allowed it works fine for me.</p>",
        "id": 179138059,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572117886
    },
    {
        "content": "<p>I think waldo's problem is that he is <em>always</em> seeing \"Lean busy\". I can easily replicate this -- if I just compile the project and then don't run an http server and open the local index.html with a browser then it just sits there saying \"Lean busy\"</p>",
        "id": 179138070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117909
    },
    {
        "content": "<p>so I suspect the javascript is not running</p>",
        "id": 179138079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117949
    },
    {
        "content": "<p>but honestly take my musings with a large pinch of salt.</p>",
        "id": 179138120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572117970
    },
    {
        "content": "<p>It's impossible to diagnose what's causing this without the console output, unfortunately. I would like to know whether it's something that should be addressed \"upstream\" in my <code>lean-web-editor</code> or <code>lean-client-js-browser</code> forks. </p>\n<p><span class=\"user-mention\" data-user-id=\"246593\">@waldo</span> when you get back, could you open your web console in Firefox and refresh the page? This is what I see:<br>\n<a href=\"/user_uploads/3121/S9M_miqGQ1hzUhSsa9y5SnHU/Screenshot-2019-10-26-15.42.22.png\" target=\"_blank\" title=\"Screenshot-2019-10-26-15.42.22.png\">Screenshot-2019-10-26-15.42.22.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/S9M_miqGQ1hzUhSsa9y5SnHU/Screenshot-2019-10-26-15.42.22.png\" target=\"_blank\" title=\"Screenshot-2019-10-26-15.42.22.png\"><img src=\"/user_uploads/3121/S9M_miqGQ1hzUhSsa9y5SnHU/Screenshot-2019-10-26-15.42.22.png\"></a></div><p>Make sure that the XHR  and Requests options are selected. You can either copy+paste the text here or upload a screenshot.</p>\n<p>Also, out of curiosity, does <a href=\"https://leanprover-community.github.io/lean-web-editor\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor\">https://leanprover-community.github.io/lean-web-editor</a> work for you? (If not, I'd be interested to see the logs for that as well.)</p>",
        "id": 179138853,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572119363
    },
    {
        "content": "<p>The github you linked indeed work,<br>\nnow when I returned I can see that it works on chrome</p>",
        "id": 179144855,
        "sender_full_name": "waldo",
        "timestamp": 1572130409
    },
    {
        "content": "<p>does the natural number game work for you on chrome?</p>",
        "id": 179144901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130447
    },
    {
        "content": "<p>you mean level 4 world 1?</p>",
        "id": 179144972,
        "sender_full_name": "waldo",
        "timestamp": 1572130572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> I just looked at Bryan's screenshot above and I am a bit confused. The files he's reporting as not being able to see -- e.g. vs/loader.js -- they are there, but <code>-rw--r--r--</code> so my guess is that he can't see them because there's no <code>+x</code>. Is this a problem with our set-up?</p>",
        "id": 179144988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> there's no issues in my screenshot. That's me refreshing when everything worked fine.</p>",
        "id": 179144995,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572130660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246593\">@waldo</span> I mean that when you came here you said you were getting \"Lean is busy\" all the time. Are you still getting that or is the game working for you now?</p>",
        "id": 179145021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130683
    },
    {
        "content": "<p>The \"source maps\" not being found is fairly normal. They're useful for debugging, but most deployed web apps don't provide them.</p>",
        "id": 179145041,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572130722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> your screenshot looks to me like it contains 404 errors but those files are present, they're just not +x.</p>",
        "id": 179145042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130723
    },
    {
        "content": "<p>the game works in chrome(after enabling cookies) :D, in edge it didn't, and in firefox it didn't load (no cookise enabled)</p>",
        "id": 179145055,
        "sender_full_name": "waldo",
        "timestamp": 1572130785
    },
    {
        "content": "<p>in edge the lean interperter was busy all the time</p>",
        "id": 179145059,
        "sender_full_name": "waldo",
        "timestamp": 1572130797
    },
    {
        "content": "<p>in chrome I think it started that way but I got home now and it seems to work so who knows</p>",
        "id": 179145114,
        "sender_full_name": "waldo",
        "timestamp": 1572130812
    },
    {
        "content": "<p>Ok, I just wanted to check it was working for you. I don't even know what a cookie is, <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> did all the web work, I just wrote the Lean code. But Bryan knows what he's talking about as well, I'm pretty sure Mohammad used Bryan's work.</p>",
        "id": 179145119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130850
    },
    {
        "content": "<p>are you a mathmetician kevin?</p>",
        "id": 179145136,
        "sender_full_name": "waldo",
        "timestamp": 1572130885
    },
    {
        "content": "<p>right.</p>",
        "id": 179145139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130891
    },
    {
        "content": "<p>or you programmed the lean interperter?</p>",
        "id": 179145142,
        "sender_full_name": "waldo",
        "timestamp": 1572130896
    },
    {
        "content": "<p>the lean JS compilation was first done by Gabriel Ebner, but I think Bryan done a lot of work since to update it for the community version</p>",
        "id": 179145191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572130965
    },
    {
        "content": "<p>I did this bit: <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game\">https://github.com/ImperialCollegeLondon/natural_number_game</a> (100% Lean code) and Mohammad did this bit: <a href=\"https://github.com/mpedramfar/Lean-game-maker\" target=\"_blank\" title=\"https://github.com/mpedramfar/Lean-game-maker\">https://github.com/mpedramfar/Lean-game-maker</a> (possibly 0% Lean code)</p>",
        "id": 179145194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572130969
    },
    {
        "content": "<p>It's truley amazing that it actually uses web assembly,<br>\nprobably zero work had to be done (because Lean is pretty minimal, same as webassembly)</p>",
        "id": 179145203,
        "sender_full_name": "waldo",
        "timestamp": 1572131006
    },
    {
        "content": "<p>The goal of the game is get students familliar with lean?</p>",
        "id": 179145206,
        "sender_full_name": "waldo",
        "timestamp": 1572131025
    },
    {
        "content": "<blockquote>\n<p>probably zero work had to be done</p>\n</blockquote>\n<p>Heh, depends on your definition of zero...</p>",
        "id": 179145208,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572131040
    },
    {
        "content": "<p>I've seen a talk latley about someone who wants to move all paper proofs to lean so they can be verified by computer automatically insteadof humans, but I found this chat throught the IMO grand challenge</p>",
        "id": 179145249,
        "sender_full_name": "waldo",
        "timestamp": 1572131064
    },
    {
        "content": "<p>what was that talk?</p>",
        "id": 179145252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572131091
    },
    {
        "content": "<blockquote>\n<p>because Lean is pretty minimal</p>\n</blockquote>\n<p>I'm curious what definition of \"minimal\" leads you to that conclusion</p>",
        "id": 179145254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131092
    },
    {
        "content": "<p>if lean already uses llvm (which it's probably is)</p>",
        "id": 179145255,
        "sender_full_name": "waldo",
        "timestamp": 1572131094
    },
    {
        "content": "<p>Lean 3 does not. Lean 4 will.</p>",
        "id": 179145262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572131103
    },
    {
        "content": "<p>but it can be compiled with clang via llvm so emscripten is doing most of the heavy lifting for the WASM build</p>",
        "id": 179145269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131124
    },
    {
        "content": "<blockquote>\n<p>The goal of the game is get students familliar with lean?</p>\n</blockquote>\n<p>Right. I want to teach young mathematicians how to use theorem provers because I am convinced that they (theorem provers) should play a bigger role in the future of mathematics.</p>",
        "id": 179145317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572131170
    },
    {
        "content": "<p>And you can blame Mario for this, because without him I would have given up a long time ago before I even learnt how to use Lean.</p>",
        "id": 179145322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572131207
    },
    {
        "content": "<p>I never used lean so I mainly guess<br>\nanyway the usage of lean is for used for computation from my understaing (and not relaying on the OS from processes, threading etc)<br>\nI agree that the future is for automatically verified theorems (and even come up with new theorems and proofs)</p>",
        "id": 179145387,
        "sender_full_name": "waldo",
        "timestamp": 1572131389
    },
    {
        "content": "<blockquote>\n<p>I agree that the future is for automatically verified theorems (and even come up with new theorems and proofs)</p>\n</blockquote>\n<p>Great, you're hired. When can you start?</p>",
        "id": 179145435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572131424
    },
    {
        "content": "<p>:D</p>",
        "id": 179145438,
        "sender_full_name": "waldo",
        "timestamp": 1572131442
    },
    {
        "content": "<p>We've done 0.001% of maths so far, so you have a lot to choose from.</p>",
        "id": 179145444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572131464
    },
    {
        "content": "<p>When mathematicians will give up on their computation power to this of course</p>",
        "id": 179145451,
        "sender_full_name": "waldo",
        "timestamp": 1572131498
    },
    {
        "content": "<p>what do you mean exactly?</p>",
        "id": 179145452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131513
    },
    {
        "content": "<p>lean isn't about \"computation\" per se</p>",
        "id": 179145493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131533
    },
    {
        "content": "<p>you can use it like a programming language, but the main thing the people around here care about is proving mathematical theorems, that may not \"have computational content\" so to speak</p>",
        "id": 179145498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131575
    },
    {
        "content": "<p>I mean that professors currently getting paid for lower computation power(their brains), rather than levering computers (and lean) to improve their productivity<br>\nI have the feeling that I exaggerate everything I say today so don't take me too seriously please</p>",
        "id": 179145504,
        "sender_full_name": "waldo",
        "timestamp": 1572131627
    },
    {
        "content": "<p>I haven't explored lean at all, care to explain what do you mean?</p>",
        "id": 179145550,
        "sender_full_name": "waldo",
        "timestamp": 1572131693
    },
    {
        "content": "<p>aha. Well that's actually a hard thing to do; currently human mathematicians far outstrip computers in effectiveness (although they aren't quite doing the same things)</p>",
        "id": 179145551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131699
    },
    {
        "content": "<p>yeah, humans are more specialized for human things that defenitly true</p>",
        "id": 179145560,
        "sender_full_name": "waldo",
        "timestamp": 1572131726
    },
    {
        "content": "<p>the IMO grand challenge in part is intended to narrow the gap</p>",
        "id": 179145562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131734
    },
    {
        "content": "<p>it's all theoretically</p>",
        "id": 179145563,
        "sender_full_name": "waldo",
        "timestamp": 1572131735
    },
    {
        "content": "<p>who is actually leading the talks here</p>",
        "id": 179145565,
        "sender_full_name": "waldo",
        "timestamp": 1572131750
    },
    {
        "content": "<p>the challenge, lean the language</p>",
        "id": 179145566,
        "sender_full_name": "waldo",
        "timestamp": 1572131759
    },
    {
        "content": "<p>lean is by microsoft researches or am I wrong?</p>",
        "id": 179145607,
        "sender_full_name": "waldo",
        "timestamp": 1572131769
    },
    {
        "content": "<p>the IMO grand challenge is lead by Leo de Moura (MSR) and Daniel Selsam (not sure, MSR?)</p>",
        "id": 179145611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131801
    },
    {
        "content": "<p>mathlib is lead by the people you will find on this chat, a hodgepodge of mathematicians and computer scientists around the world</p>",
        "id": 179145624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131838
    },
    {
        "content": "<p>mathlib is a lean lbirary for math proofs?</p>",
        "id": 179145667,
        "sender_full_name": "waldo",
        "timestamp": 1572131903
    },
    {
        "content": "<p>yes</p>",
        "id": 179145669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131913
    },
    {
        "content": "<p>it's actually a lot more than that, it's basically a \"standard library\" of sorts for lean 3</p>",
        "id": 179145675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131944
    },
    {
        "content": "<p>If I provide proofs for the entire calclus will I remmbered besides Cauchy? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 179145678,
        "sender_full_name": "waldo",
        "timestamp": 1572131947
    },
    {
        "content": "<p>go for it!</p>",
        "id": 179145679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572131953
    },
    {
        "content": "<p>Where do we stand today?</p>",
        "id": 179145680,
        "sender_full_name": "waldo",
        "timestamp": 1572131967
    },
    {
        "content": "<p>is there a roadmap?</p>",
        "id": 179145682,
        "sender_full_name": "waldo",
        "timestamp": 1572131973
    },
    {
        "content": "<p>what are the limitations of lean currently?</p>",
        "id": 179145685,
        "sender_full_name": "waldo",
        "timestamp": 1572131986
    },
    {
        "content": "<p>how is cog compared to lean?</p>",
        "id": 179145686,
        "sender_full_name": "waldo",
        "timestamp": 1572131994
    },
    {
        "content": "<p>on calculus, we have general derivatives but we haven't done real (calc 1 style) derivatives yet, or derivatives of basic functions like exp</p>",
        "id": 179145731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132017
    },
    {
        "content": "<p>what do you mean general derviatives? defeinition but iwthout proof?</p>",
        "id": 179145736,
        "sender_full_name": "waldo",
        "timestamp": 1572132049
    },
    {
        "content": "<p>mathlib has a bourbaki style approach where we start from the abstract notion and work our way to the concrete</p>",
        "id": 179145739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132058
    },
    {
        "content": "<p>which is a bit backward from the usual pedagogy</p>",
        "id": 179145746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132069
    },
    {
        "content": "<p>is it just to get things go faster?</p>",
        "id": 179145747,
        "sender_full_name": "waldo",
        "timestamp": 1572132084
    },
    {
        "content": "<p>so we can go for more hard stuff?</p>",
        "id": 179145748,
        "sender_full_name": "waldo",
        "timestamp": 1572132093
    },
    {
        "content": "<p>it is to unify developments so we don't have to redo stuff later when we care about e.g. multivariate derivative</p>",
        "id": 179145750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132110
    },
    {
        "content": "<p>I think it may be good to leave gaps, and maybe we'll be able to leverege computer to get to the result by itself</p>",
        "id": 179145795,
        "sender_full_name": "waldo",
        "timestamp": 1572132133
    },
    {
        "content": "<p>we have derivatives on normed vector spaces, producing a linear map called the derivative, but the calc 1 style derivative is a number, not a linear map</p>",
        "id": 179145803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132178
    },
    {
        "content": "<p>leveraging the computer to get the result by itself is mostly wishful thinking at this point</p>",
        "id": 179145813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132207
    },
    {
        "content": "<p>it may well happen in the near term but lean today is not going to impress you if you are hoping for that</p>",
        "id": 179145816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132235
    },
    {
        "content": "<p>that ok, I just wander if putting efforts into lean is the right thing, that why I ask for caomprsions to other languages and whether there is a roadmap</p>",
        "id": 179145856,
        "sender_full_name": "waldo",
        "timestamp": 1572132289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is a better person to ask for the roadmap</p>",
        "id": 179145866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132310
    },
    {
        "content": "<p>is this the right stream?</p>",
        "id": 179145872,
        "sender_full_name": "waldo",
        "timestamp": 1572132346
    },
    {
        "content": "<p>it's pretty decentralized, people work on the stuff that interests them</p>",
        "id": 179145873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132346
    },
    {
        "content": "<p>right stream to talk about is I mean</p>",
        "id": 179145914,
        "sender_full_name": "waldo",
        "timestamp": 1572132376
    },
    {
        "content": "<p>nvm, I'll go throught the game</p>",
        "id": 179145917,
        "sender_full_name": "waldo",
        "timestamp": 1572132396
    },
    {
        "content": "<p>The mathlib paper may be able to answer your questions about overview and comparison to other languages</p>",
        "id": 179145922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132437
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/papers/mathlib-paper.pdf\" target=\"_blank\" title=\"https://leanprover-community.github.io/papers/mathlib-paper.pdf\">https://leanprover-community.github.io/papers/mathlib-paper.pdf</a></p>",
        "id": 179145926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572132468
    },
    {
        "content": "<p>World 2 level 2, I'm still not sure how to write proper lean, but I trust lean to test my proof so even if it's not optimized and not coherent enough (for me at least as a user) I still know it works<br>\nThe solution:<br>\ninduction c with d cd,<br>\ninduction b with e be,<br>\nrw add_zero,<br>\nrw add_zero,<br>\nrw add_zero,<br>\nrw add_zero,<br>\nrefl,<br>\nrw add_succ,<br>\nrw add_zero,<br>\nrw add_zero,<br>\nrw add_succ,<br>\nrefl,<br>\nrw add_succ,<br>\nrw add_succ,<br>\nrw add_succ,<br>\nrw cd,<br>\nrefl,</p>",
        "id": 179147217,
        "sender_full_name": "waldo",
        "timestamp": 1572135275
    },
    {
        "content": "<p>You can quote Lean code if you put it between <code> ``` </code>. Even better, put <code> ```lean </code> at the top and <code> ``` </code> at the bottom. Then it looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">cd</span><span class=\"o\">,</span>\n<span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">be</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">cd</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 179147275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572135436
    },
    {
        "content": "<p>I note that you used induction hypothesis <code>cd</code> but you never use <code>be</code> in your proof.</p>",
        "id": 179147319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572135500
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> is a better person to ask for the roadmap</p>\n</blockquote>\n<p>The roadmap is that people just do what they feel like doing, but generally I encourage people to work on undergraduate maths degree level stuff which isn't already there, because it's the path of least resistance.</p>",
        "id": 179147382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572135666
    },
    {
        "content": "<p>Beginner question: does lean have something like \"pose\" in coq? Say I have a term a : A and a function f : A -&gt; B (maybe proven in a previous lemma). I'd like to give a name to a term in B to do something complicated with later and add it to my givens. In coq I'd type something like \"pose b := (f a).\" At the moment, I'm feeding very long composite terms into the exact tactic.</p>",
        "id": 179150013,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1572141264
    },
    {
        "content": "<p>I don't know Coq, but I suspect you're looking for <code>have</code>. In tactic mode, you would write <code>have b := f a,</code>.</p>",
        "id": 179150137,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572141580
    },
    {
        "content": "<p><code>let b := f a</code></p>",
        "id": 179150139,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572141586
    },
    {
        "content": "<p>Use <code>let</code> if you will need to use the definitional equality of <code>b</code> and <code>f a</code>, otherwise <code>have</code> (for example if <code>b</code> is the proof of a proposition). I'm not sure which one <code>pose</code> is.</p>",
        "id": 179150208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572141683
    },
    {
        "content": "<p><code>let</code> is the user-facing version of <code>tactic.pose</code></p>",
        "id": 179150483,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1572142256
    },
    {
        "content": "<p>Thanks. Now I'm stuck on world 3 level 11. In the first line I wrote</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">split</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>to split the iff into implications but I got a \"tactic failed\" error. What am I doing wrong?</p>",
        "id": 179295674,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1572317245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246635\">@Emily Riehl</span> the goal doesn't start with <code>iff</code> (in Polish notation, which is the internal representation in Lean)</p>",
        "id": 179295850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572317441
    },
    {
        "content": "<p>Thanks. I wasn't reading carefully enough.</p>",
        "id": 179323944,
        "sender_full_name": "Emily Riehl",
        "timestamp": 1572352345
    },
    {
        "content": "<p>Professional category theorist:\"I am stuck. No, wait -- I'm not reading carefully enough\". Me: \"I need to make this better, so people can't not read carefully enough\".</p>",
        "id": 179324086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572352474
    },
    {
        "content": "<p>I hope to return to this game over the weekend. Thanks for your feedback Emily.</p>",
        "id": 179324103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572352491
    },
    {
        "content": "<p>Note also that some error messages are being incorrectly suppressed in the version online at the minute. This is a bug which has been chased down and squashed but has not made it upstream.</p>",
        "id": 179324222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572352586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246635\">@Emily Riehl</span> Welcome on the chat <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 179341835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572363724
    },
    {
        "content": "<p>Hi. I am in the process of learning lean. After going through the first 4 sections of theorem proving with lean, I decided to play the natural number game to learn about tactics. I just finished it and I enjoyed it very much. I was stuck at some points but managed to find some explanations about some tactics in the documentation that were not explained during the process of the game.</p>",
        "id": 179352540,
        "sender_full_name": "Alain Muller",
        "timestamp": 1572369933
    },
    {
        "content": "<p>Yeah, I'm afraid v1.0 is a bit rubbish :-/</p>",
        "id": 179358144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572373058
    },
    {
        "content": "<p>but I'll get there in the end :D Given the choice between organising an open day for potential PhD students and playing with the natural number game, I know which one I would rather be doing, but unfortunately I also know which one I have to be doing :-/</p>",
        "id": 179358281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572373124
    },
    {
        "content": "<p>Alain, if you want to leave some rude comments about where you got stuck and how bad the documentation was at these points, feel free to do so at <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game\">https://github.com/ImperialCollegeLondon/natural_number_game</a></p>",
        "id": 179358366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572373188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> maybe put that link there</p>",
        "id": 179358479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572373235
    },
    {
        "content": "<p>btw you have 4 PRs now</p>",
        "id": 179358703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572373341
    },
    {
        "content": "<p>I do?</p>",
        "id": 179359402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572373686
    },
    {
        "content": "<p>Thanks for letting me know!</p>",
        "id": 179359414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572373694
    },
    {
        "content": "<p>no problem</p>",
        "id": 179359419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572373698
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> I just looked at Bryan's screenshot above and I am a bit confused. The files he's reporting as not being able to see -- e.g. vs/loader.js -- they are there, but <code>-rw--r--r--</code> so my guess is that he can't see them because there's no <code>+x</code>. Is this a problem with our set-up?</p>\n</blockquote>\n<p>There's no problem with Bryan's screenshots. As he said, the missing files are debugging tools. They're not necessary.</p>",
        "id": 179442243,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1572448490
    },
    {
        "content": "<blockquote>\n<p>the game works in chrome(after enabling cookies) :D, in edge it didn't, and in firefox it didn't load (no cookise enabled)</p>\n</blockquote>\n<p>Edge and IE are always different! I'm glad it's working now. I haven't had any problems with firefox before, if you have the screenshots of console output, I might be able to figure out what's going on.<br>\nI'm glad it's finally working! :)</p>",
        "id": 179442578,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1572448670
    },
    {
        "content": "<p>Here's another question about the game, regarding world 2, level 9; I've reached a point where I have as a hypothesis that P -&gt; Q and I want to prove R -&gt; Q. There is a previous lemma which shows that R -&gt; P, although I'm confused as to how I can express in Lean \"use the lemma to prove R -&gt; P, then R -&gt; P -&gt; Q and so R -&gt; Q\"</p>\n<p>(more particularly, for an inductive step, I have the induction hypothesis that b + a = c + a --&gt; b = c, and my goal is succ(b+a) = succ(c+a) --&gt; b = c, which I want to demonstrate by applying succ_inj to show that succ(b+a) = succ(c+a) --&gt; b+a = c+a)</p>",
        "id": 179485224,
        "sender_full_name": "Michael Barz",
        "timestamp": 1572475582
    },
    {
        "content": "<p>I am systematically removing all these worlds</p>",
        "id": 179485237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475604
    },
    {
        "content": "<p>I have spent some time trying to understand what exactly needs to be taught to a mathematician in order for them to be able to do these worlds without getting totally confused</p>",
        "id": 179485256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247360\">@Michael Barz</span> you need to know about <code>intro</code> and  <code>have</code> and <code>apply</code>.</p>",
        "id": 179485275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475675
    },
    {
        "content": "<p>Okay, thanks! I'll look into have, as it's the one I am unfamiliar with</p>",
        "id": 179485332,
        "sender_full_name": "Michael Barz",
        "timestamp": 1572475701
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/tacticindex.html#basic-tactic-list\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/tacticindex.html#basic-tactic-list\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/tacticindex.html#basic-tactic-list</a></p>",
        "id": 179485343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475716
    },
    {
        "content": "<p>I need to take the relevant tactics from there, explain them carefully, and put them into the game.</p>",
        "id": 179485368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475741
    },
    {
        "content": "<p>Until I've done that (hopefully some time tomorrow) and until Mohammad has written the python code which makes the web game from the Lean file (hopefully also not too long), I think it's best that we just stay away from functions.</p>",
        "id": 179485399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475791
    },
    {
        "content": "<p>But what you need to learn about is this stuff: <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/ch1_and_or_props/prop_exercises.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/ch1_and_or_props/prop_exercises.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/ch1_and_or_props/prop_exercises.html</a></p>",
        "id": 179485460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572475836
    },
    {
        "content": "<p>hi, I'm a noob and I'm very confused about world 2 level 10 - I get the impression that it's supposed to be three lines, but <code>rw add_comm a, rw add_comm b, exact add_left_cancel,</code> complains about \"invalid type ascription\" and I suspect a more exact match than what I have is needed, so what is my misunderstanding here?</p>",
        "id": 179487745,
        "sender_full_name": "vrs",
        "timestamp": 1572478065
    },
    {
        "content": "<p><code>add_left_cancel</code> takes <code>a</code> <code>b</code> <code>c</code> as explicit arguments. I'm not sure what the game has taught you so far, but you can either specify them explicitly or use <code>apply</code> instead of <code>exact</code></p>",
        "id": 179488010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572478272
    },
    {
        "content": "<p>ahah so what I had to do was <code>rw add_comm a, rw add_comm b, apply add_left_cancel,</code>, while going from <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/apply.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/apply.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/tactics/apply.html</a> I would've expected that apply would reduce my goal to <code>a = b</code> and not solve it outright</p>",
        "id": 179488562,
        "sender_full_name": "vrs",
        "timestamp": 1572478804
    },
    {
        "content": "<p>I see. I agree you wouldn't expect <code>apply</code> to work here based on that description.</p>",
        "id": 179488966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572479185
    },
    {
        "content": "<p>I might have broken the default explicit/implicit argument thing.</p>",
        "id": 179488981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572479219
    },
    {
        "content": "<p>You were probably expected to <code>intro</code> the hypothesis, then rewrite the hypothesis, and then <code>apply add_left_cancel</code> and finally provide the rewritten hypothesis.</p>",
        "id": 179488996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572479226
    },
    {
        "content": "<p>I'm trying to figure out what my users like best.</p>",
        "id": 179488999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572479229
    },
    {
        "content": "<p>The users are currently not expected to be able to solve those levels at all.</p>",
        "id": 179489010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572479242
    },
    {
        "content": "<p>That's why I'm removing them for a bit.</p>",
        "id": 179489027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572479260
    },
    {
        "content": "<p>sample solutions would be nice, I got most of the way on my own but occasionally I feel I did something super ugly and awkward and there has to be an elegant way</p>",
        "id": 179489390,
        "sender_full_name": "vrs",
        "timestamp": 1572479559
    },
    {
        "content": "<p>also they'd teach me about how to use certain tactics properly, in an \"oh you can do that?\" way</p>",
        "id": 179489408,
        "sender_full_name": "vrs",
        "timestamp": 1572479586
    },
    {
        "content": "<p>if you want to see solutions, asking here is an easy way to have an \"oh you can do that?\" moment</p>",
        "id": 179489469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572479644
    },
    {
        "content": "<p>If I heard correctly, the solutions are also available from the source code for the game</p>",
        "id": 179489483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572479671
    },
    {
        "content": "<p>That is true, for example you can see my solution to 2-10 here:</p>\n<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world2/level10.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world2/level10.lean\">https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world2/level10.lean</a></p>",
        "id": 179489512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572479723
    },
    {
        "content": "<p>oh that is in fact very much what my 2-9 solution looked like!</p>\n<div class=\"codehilite\"><pre><span></span>intro,\ninduction a with d hd,\n{rw ← zero_add b, rw ← zero_add c, exact a_1},\n{apply hd, rw ← eq_iff_succ_eq_succ, rw ← succ_add, rw ← succ_add, exact a_1},\n</pre></div>",
        "id": 179489599,
        "sender_full_name": "vrs",
        "timestamp": 1572479821
    },
    {
        "content": "<p>hey, the <code>mul_succ</code> axiom as it's presented at the start of world 3 looks a little off:  <code>a * succ(b) = a * b + b</code></p>",
        "id": 179591294,
        "sender_full_name": "Lynn",
        "timestamp": 1572571010
    },
    {
        "content": "<p>Wow, fortunately the one that is actually introduced behind the scenes is correct,  if you put <code>  have := mul_succ,</code> in the proof box you can see <code>this : ∀ (m n : mynat), m * succ n = m * n + m</code> is what is really added</p>",
        "id": 179591774,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1572571672
    },
    {
        "content": "<p>I see there's a github repo, so I'll make a pull request!</p>",
        "id": 179591776,
        "sender_full_name": "Lynn",
        "timestamp": 1572571681
    },
    {
        "content": "<p>ah, <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/15\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/15\">https://github.com/ImperialCollegeLondon/natural_number_game/pull/15</a> is way ahead of me.</p>",
        "id": 179591832,
        "sender_full_name": "Lynn",
        "timestamp": 1572571716
    },
    {
        "content": "<p><span aria-label=\"thought\" class=\"emoji emoji-1f4ad\" role=\"img\" title=\"thought\">:thought:</span> <code>3 * 5 = 15</code>, <code>4 * 7 = 28</code>, <code>5 * 9 = 45</code>  passed 3/3 test cases <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span></p>",
        "id": 179592011,
        "sender_full_name": "Lynn",
        "timestamp": 1572571940
    },
    {
        "content": "<p>Ha ha I need to get my act together! Thanks <span class=\"user-mention\" data-user-id=\"247532\">@Lynn</span></p>",
        "id": 179608877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572598441
    },
    {
        "content": "<p>Fixed in v1.03</p>",
        "id": 179613292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572603100
    },
    {
        "content": "<p>Most stuff in the bar on the left is generated automatically, but the axioms themselves are not in the game levels, they're else where in some behind the scenes files with the definitions, so I had to do them manually.</p>",
        "id": 179613365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572603147
    },
    {
        "content": "<p>now that I know how useful <code>apply</code> is, the first two levels of power world are oneliners</p>",
        "id": 179662331,
        "sender_full_name": "vrs",
        "timestamp": 1572640109
    },
    {
        "content": "<p><code>apply</code> is cool. I hope in some of the next levels <code>refine</code> will be unlocked. It's even better.</p>",
        "id": 179662478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572640213
    },
    {
        "content": "<p>what kind of frustrates me is that I can't <code>rw</code> at a very specific position only, I was going to throw <code>rw \\l one_mul b</code> at w3l6 (I think) but it replaced all instances of b instead of just the rightmost one</p>",
        "id": 179662667,
        "sender_full_name": "vrs",
        "timestamp": 1572640372
    },
    {
        "content": "<p>or maybe there is a way but I already forgot it again</p>",
        "id": 179662694,
        "sender_full_name": "vrs",
        "timestamp": 1572640390
    },
    {
        "content": "<p>There is a way, but it takes a bit more typing</p>",
        "id": 179662807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572640478
    },
    {
        "content": "<p>There is a so-called <code>conv</code>-mode that allows you to \"zoom in\" on the expression, before calling <code>rw</code></p>",
        "id": 179662827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572640501
    },
    {
        "content": "<p>As Johan says, <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/conv.md\">conv</a> might help.</p>",
        "id": 179662835,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572640504
    },
    {
        "content": "<p>I am stuck at world 2, level 2. <br>\nI brought Lean to the goal:</p>\n<p>case mynat.succ<br>\na b c1 : mynat,<br>\nhc1 : a + b + c1 = a + (b + c1)<br>\n⊢ succ (a + b + c1) = succ (a + (b + c1))</p>\n<p>and I expected to conclude with</p>\n<p>rw succ_inj,</p>\n<p>but I get the answer</p>\n<p>rewrite tactic failed, lemma lhs is a metavariable</p>",
        "id": 179665946,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1572642538
    },
    {
        "content": "<p>conv did help, but turned out that I would've needed mul_comm either way</p>",
        "id": 179665983,
        "sender_full_name": "vrs",
        "timestamp": 1572642573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> you are going the wrong way.</p>",
        "id": 179666009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572642597
    },
    {
        "content": "<p><code>succ_inj</code> will prove that your goal implies a hypothesis.</p>",
        "id": 179666089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572642628
    },
    {
        "content": "<p>You need to show that your hypotheses imply the goal</p>",
        "id": 179666097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572642638
    },
    {
        "content": "<p><code>succ_inj</code> is a red herring. I am consdering removing it from the game completely.</p>",
        "id": 179666126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572642673
    },
    {
        "content": "<p>Oh yes! Sorry... but I'm stuck anyway. :-)</p>",
        "id": 179666214,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1572642750
    },
    {
        "content": "<p>In fact the fact that you are even asking this question makes it clear that I should do this. I will introduce it at the place where the users know the tactics to be able to use it (e.g .<code>apply</code>). New levels to come but here's a sneak preview:</p>\n<p><a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game/function_world\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game/function_world\">https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game/function_world</a></p>",
        "id": 179666247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572642783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Aside: you can get syntax highlighting on the chat using the following mark-up</p>\n<div class=\"codehilite\"><pre><span></span>```lean\ncode goes here\n```\n</pre></div>",
        "id": 179666434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572642904
    },
    {
        "content": "<p>Well, the hint is that the result you need is mathematically trivial now, all you need to do is to sub in. You have been misled by <code>succ_inj</code>, because you are only just getting used to thinking about laying maths out formally in this way, and the set-up has led you to the incorrect conclusion that <code>succ_inj</code> needs to be used in some way. It's much easier than that.</p>",
        "id": 179666457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572642936
    },
    {
        "content": "<p>Thanks, I needed to go back to World 2 Level 2 to be reminded to use  rw on the induction hypothesis</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"n\">hc1</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>I is not clear to me what it does. <br>\nBut I can rush to level 3 !</p>",
        "id": 179666709,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1572643144
    },
    {
        "content": "<p><code>rw</code> takes an equality <code>h</code> (or an iff) and searches the goal for occurences of the left-hand-side of <code>h</code>. If it finds them, it replaces them with the right-hand-side of <code>h</code>.</p>",
        "id": 179667227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572643649
    },
    {
        "content": "<p>With <code>rw h at foo</code>, you can do the same thing at hypothesis <code>foo</code> instead of the goal</p>",
        "id": 179667247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572643676
    },
    {
        "content": "<p>I find myself not really looking at the theorems themselves anymore, just thinking in terms of rewrite rules. is this common?</p>",
        "id": 179669300,
        "sender_full_name": "vrs",
        "timestamp": 1572645620
    },
    {
        "content": "<p>Yes! some people have said to me that it's kind of amazing that you can just prove the theorems by following your nose.</p>",
        "id": 179669323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572645648
    },
    {
        "content": "<p>But I am working on a Friday night treat for you which you might find harder.</p>",
        "id": 179669333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572645662
    },
    {
        "content": "<p>also I agree that the inequalities have been very confusing in their presence in the lower worlds. together with an exfalso, they might be useful, but I didn't quite pick up how that worked from just the prover output</p>",
        "id": 179669495,
        "sender_full_name": "vrs",
        "timestamp": 1572645793
    },
    {
        "content": "<p>it's common and can be a curse as well. sometimes you stop thinking entirely and turn into a human unification algorithm - the <em>term</em>inator. <br>\noccasionally, when i get stuck and regain conciousness, i feel lost and unsure about how to continue the proof that my robo-self has started.</p>",
        "id": 179669777,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1572646076
    },
    {
        "content": "<p><code>use</code> is magic</p>",
        "id": 179678466,
        "sender_full_name": "vrs",
        "timestamp": 1572657626
    },
    {
        "content": "<p>it becomes clearer when you know that <code>rw le_def at ⊢,</code> can be elided and the same will happen (respectively, use implies rw), but still</p>",
        "id": 179678530,
        "sender_full_name": "vrs",
        "timestamp": 1572657743
    },
    {
        "content": "<p>World 3/Level 9, is this it ? <br>\nIt took me some minutes to solve it, and I had to use the rw tactic with the theorems reversed,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>This is very funny, because mul_assoc and mul_comm can be viewed as permutations, and this exercise is more or less about writing a given permutation as a word in them.</p>",
        "id": 179698489,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1572693604
    },
    {
        "content": "<p>Yes, and of course there are algorithms which will do this.</p>",
        "id": 179700459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572697735
    },
    {
        "content": "<p>4.8 is fairly easy with stuff introduced in the game:</p>\n<div class=\"codehilite\"><pre><span></span>rw one_eq_succ_zero,\nrepeat {rw pow_succ},\nrepeat {rw pow_zero},\nrw ← one_eq_succ_zero,\nrw succ_mul,\nrepeat {rw one_mul},\nrepeat {rw add_mul},\nrepeat {rw mul_add},\nsimp,\n</pre></div>",
        "id": 179703840,
        "sender_full_name": "vrs",
        "timestamp": 1572703570
    },
    {
        "content": "<p>Did you look at the spoiler on Twitter?</p>",
        "id": 179703853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703634
    },
    {
        "content": "<p>It's even easier than that :D</p>",
        "id": 179703857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703646
    },
    {
        "content": "<p>yes but ring was never introduced was it?</p>",
        "id": 179703860,
        "sender_full_name": "vrs",
        "timestamp": 1572703657
    },
    {
        "content": "<p>indeed it wasn't.</p>",
        "id": 179703864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703673
    },
    {
        "content": "<p>although there was quite a painful period last night when it was secretly being introduced into the game :D</p>",
        "id": 179703904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703693
    },
    {
        "content": "<p>in fact I spoilered myself with the github source instead of the tweet and just went \"whaat, unfair\" (not in a bad way, I mean I expect the source to be ahead of what I've learned so far)</p>",
        "id": 179703911,
        "sender_full_name": "vrs",
        "timestamp": 1572703726
    },
    {
        "content": "<p>If <code>ring</code> sees <code>a^b</code> it expects <code>a</code> to be in the ring and <code>b</code> to be one of Lean's nats.</p>",
        "id": 179703916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703732
    },
    {
        "content": "<p>Sure it's unfair. But there's a message. If you are doing something boring then you shouldn't be doing it, you should be automating it. I make people look at a \"trivial\" thing (every schoolkid knows that (a+b)^2=a^2+b^2+2ab) and then I get people to prove it in Lean, when they discover what a complete pain it is because it's obvious that it can be done but it's boring, and then they discover that actually it's easy after all.</p>",
        "id": 179703978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703821
    },
    {
        "content": "<p>so it's a real voyage of discovery: in the space of playing the game they go from \"expanding <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(a+b)^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is trivial\" [at the start] to \"a lot goes into this actually\" to \"oh no, it is trivial after all\".</p>",
        "id": 179703992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572703880
    },
    {
        "content": "<p>my experience with 4.8 was, it was a lot of writing but fairly straightforward, while stuff like add_right_cancel and add_left_cancel felt much more hard-won</p>",
        "id": 179704062,
        "sender_full_name": "vrs",
        "timestamp": 1572704018
    },
    {
        "content": "<p>my biggest a-ha moment was early in the game when I realized I could do <code>rw hd</code> and not just <code>rw stuff_in_the_left_bar</code></p>",
        "id": 179704128,
        "sender_full_name": "vrs",
        "timestamp": 1572704125
    },
    {
        "content": "<p>it may be aesthetic preference but every time I had to pull out induction it felt 'harder'</p>",
        "id": 179704185,
        "sender_full_name": "vrs",
        "timestamp": 1572704223
    },
    {
        "content": "<p>the extra addition levels were fun in a dwarf-fortress way and made me look up more advanced tactics</p>",
        "id": 179704293,
        "sender_full_name": "vrs",
        "timestamp": 1572704405
    },
    {
        "content": "<p>something that'd be neat would be zachtronics-like scoreboards displaying \"x % of players completed this in y instructions\"</p>",
        "id": 179704320,
        "sender_full_name": "vrs",
        "timestamp": 1572704513
    },
    {
        "content": "<blockquote>\n<p>World 3/Level 9, is this it ? <br>\nIt took me some minutes to solve it, and I had to use the rw tactic with the theorems reversed,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>This is very funny, because mul_assoc and mul_comm can be viewed as permutations, and this exercise is more or less about writing a given permutation as a word in them.</p>\n</blockquote>\n<p>So the simplifier asks for <code>mul_left_comm</code>, I suppose, so it can do a proof like this:</p>\n<div class=\"codehilite\"><pre><span></span>attribute [simp] mul_assoc mul_comm mul_left_comm\n\nexample (a b c d e : ℕ) : (((a*b)*c)*d)*e=(c*((b*e)*a))*d := by simp\n\nexample (a b c d e : ℕ) : (((a*b)*c)*d)*e=(c*((b*e)*a))*d := begin\n  repeat {rw mul_assoc},\n  rw mul_left_comm b,\n  rw mul_left_comm a,\n  rw mul_left_comm a,\n  rw mul_comm d,\n  rw mul_left_comm a,\nend\n</pre></div>\n\n\n<p>Here's a <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=attribute%20%5Bsimp%5D%20mul_assoc%20mul_comm%20mul_left_comm%0A%0Aexample%20%28a%20b%20c%20d%20e%20%3A%20%E2%84%95%29%20%3A%20%28%28%28a*b%29*c%29*d%29*e%3D%28c*%28%28b*e%29*a%29%29*d%20%3A%3D%20by%20simp%0A%0Aexample%20%28a%20b%20c%20d%20e%20%3A%20%E2%84%95%29%20%3A%20%28%28%28a*b%29*c%29*d%29*e%3D%28c*%28%28b*e%29*a%29%29*d%20%3A%3D%20begin%0A%20%20repeat%20%7Brw%20mul_assoc%7D%2C%0A%20%20rw%20mul_left_comm%20b%2C%0A%20%20rw%20mul_left_comm%20a%2C%0A%20%20rw%20mul_left_comm%20a%2C%0A%20%20rw%20mul_comm%20d%2C%0A%20%20rw%20mul_left_comm%20a%2C%0A%20%20--%20Actual%20Lean%20does%20the%20refl%20at%20the%20end%20automatically%0A%20%20--%20%28natural%20number%20game%20lean%20is%20a%20hack%20where%20I%20make%20the%20user%20do%20it%20themselves%29%0Aend\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/#code=attribute%20%5Bsimp%5D%20mul_assoc%20mul_comm%20mul_left_comm%0A%0Aexample%20%28a%20b%20c%20d%20e%20%3A%20%E2%84%95%29%20%3A%20%28%28%28a*b%29*c%29*d%29*e%3D%28c*%28%28b*e%29*a%29%29*d%20%3A%3D%20by%20simp%0A%0Aexample%20%28a%20b%20c%20d%20e%20%3A%20%E2%84%95%29%20%3A%20%28%28%28a*b%29*c%29*d%29*e%3D%28c*%28%28b*e%29*a%29%29*d%20%3A%3D%20begin%0A%20%20repeat%20%7Brw%20mul_assoc%7D%2C%0A%20%20rw%20mul_left_comm%20b%2C%0A%20%20rw%20mul_left_comm%20a%2C%0A%20%20rw%20mul_left_comm%20a%2C%0A%20%20rw%20mul_comm%20d%2C%0A%20%20rw%20mul_left_comm%20a%2C%0A%20%20--%20Actual%20Lean%20does%20the%20refl%20at%20the%20end%20automatically%0A%20%20--%20%28natural%20number%20game%20lean%20is%20a%20hack%20where%20I%20make%20the%20user%20do%20it%20themselves%29%0Aend\">link to the Lean Web Editor</a> if you want to examine the proof yourself.</p>",
        "id": 179704438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572704716
    },
    {
        "content": "<p>The combinatorics becomes much easier with <code>mul_comm</code> and <code>mul_left_comm</code> because after all the applications of add_assoc you can swap arbitrary adjacent pairs of elements. I guess this is turning into the proof that associativity and commutativity can indeed be used to do all the things which mathematicians assume follow from associativity and commutativity.</p>",
        "id": 179704511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572704803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span></p>",
        "id": 179704516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572704813
    },
    {
        "content": "<blockquote>\n<p>my experience with 4.8 was, it was a lot of writing but fairly straightforward, while stuff like add_right_cancel and add_left_cancel felt much more hard-won</p>\n</blockquote>\n<p>You are absolutely right. The thing is with those hard levels is that I decided that a poor explanation was worse than no explanation at all. Those lemmas like add_right_cancel, which are <em>functions</em> not <em>equalities</em>, need a completely different set of tactics which need to be introduced properly first for the user to have any chance at all. Yes, there are some far more interesting levels coming.</p>",
        "id": 179704573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572704892
    },
    {
        "content": "<blockquote>\n<p>something that'd be neat would be zachtronics-like scoreboards displaying \"x % of players completed this in y instructions\"</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> is this even feasible? Mohammad basically said very early on in the project \"OK so we can either have people log in or not, and if they log in we can keep all their game data and do all sorts of things, but it will take me X days to learn how to do it\" (for some value of X which was positive) and I said \"<a href=\"https://kasperpeulen.github.io/\" target=\"_blank\" title=\"https://kasperpeulen.github.io/\">Euclid the game</a> doesn't have logins, so let's just go for it now while I don't have teaching, and let the user have access to all the levels\".</p>",
        "id": 179704654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572705035
    },
    {
        "content": "<p>With Project Euler you can do all sorts of things with the stats, but they have a login system. Of course if there's any CS-minded person who wants to change the tooling etc then they should feel free to work with Mohammad, who is currently writing his maths Phd up (which has nothing to do with natural numbers, he does dynamical systems of some sort) and doing this on the side.</p>",
        "id": 179704715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572705154
    },
    {
        "content": "<blockquote>\n<p>the extra addition levels were fun in a dwarf-fortress way and made me look up more advanced tactics</p>\n</blockquote>\n<p>I decided that for every person like you there are 10 people giving up and I needed to do it properly.</p>",
        "id": 179704790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572705334
    },
    {
        "content": "<p>you could store the gamestate including proofs in the browser (localstorage), then you wouldn't have to store any on the server and logins would be unnecessary if you don't mind the % stats being not completely accurate, biggest downside would be you'd still have to come up with a mechanism that handles world changes in a way that keeps most of one's gamestate intact</p>",
        "id": 179705033,
        "sender_full_name": "vrs",
        "timestamp": 1572705796
    },
    {
        "content": "<p>the software engineer in me wonders whether optimizing for verification time would be worthwhile (proofs that are efficient to check make things more interactive down the road)</p>",
        "id": 179705158,
        "sender_full_name": "vrs",
        "timestamp": 1572706031
    },
    {
        "content": "<p>This is not something I can say anything about.</p>",
        "id": 179705823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572707262
    },
    {
        "content": "<p>even now verification can become very slow when abusing certain tactics too much, to the degree where the \"interactive\" in ITP vanishes.<br>\nafaik this will get better in lean 4 because lean will spend less time re-verifying things when adding stuff to a proof.</p>",
        "id": 179706294,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1572708087
    },
    {
        "content": "<p>We don't have this issue in the natural number game because we are only doing simple things. It would not surprise me if there were some cool tools to produce various incarnations of a proof term.</p>",
        "id": 179706993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572709433
    },
    {
        "content": "<p>What's the next step in learning Lean after playing the natural number game?</p>",
        "id": 179707564,
        "sender_full_name": "pyon",
        "timestamp": 1572710329
    },
    {
        "content": "<p>You could try the perfectoid space game</p>",
        "id": 179716006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572724242
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/issues/33\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/issues/33\">https://github.com/leanprover-community/lean-perfectoid-spaces/issues/33</a> I think there's 38 levels there, and when we're done the collectible is a non-empty perfectoid space, the first example of its kind in any theorem prover.</p>",
        "id": 179716083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572724333
    },
    {
        "content": "<p>Alternatively you could try the levels I just wrote this afternoon</p>",
        "id": 179716095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572724369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246661\">@pyon</span> If you are looking for things do in Lean... there is a lot of low-hanging fruit. But it would be best to share a bit of your background knowledge and interests. The perfectoid space game is a rather big leap from that nat.nr.game, I would say.</p>",
        "id": 179716320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572724708
    },
    {
        "content": "<p>Yes, this is a much more sensible reply. Are you a professor of computer science or an undergraduate mathematician? The answers are very different.</p>",
        "id": 179716337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572724768
    },
    {
        "content": "<p>If you have a computer science background then you might like <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving In Lean</a>. If you have a maths background then you might prefer dipping into <a href=\"https://leanprover.github.io/logic_and_proof/index.html\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/index.html\">Logic and Proof</a>. I learnt Lean by finding simple maths questions and trying to solve them in Lean. Here are the example sheets I set my undergraduates: <a href=\"https://github.com/ImperialCollegeLondon/M40001_lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M40001_lean\">https://github.com/ImperialCollegeLondon/M40001_lean</a> . But if all you have is the natural number game then these levels are too difficult. I'm currently trying to get a new world 5 together, I'll post a beta link when I'm done.</p>",
        "id": 179716475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572724980
    },
    {
        "content": "<p>The new world 5 will teach you how to manipulate functions in Lean using <code>intro</code>, <code>exact</code> and <code>apply</code>.</p>",
        "id": 179716491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572725013
    },
    {
        "content": "<p>There's also now <a href=\"https://lean-forward.github.io/logical-verification/2019/\" target=\"_blank\" title=\"https://lean-forward.github.io/logical-verification/2019/\">Logical Verification in Lean</a> (scroll to \"materials\") which is also CS focused. My impression is that it's a little easier than Theorem Proving in Lean, but take that opinion with a grain of salt since I knew a lot more Lean when I started reading Logical Verification than I did when I read TPiL.</p>",
        "id": 179716709,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572725338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Undergraduate mathematician. And thanks for the references!</p>",
        "id": 179716715,
        "sender_full_name": "pyon",
        "timestamp": 1572725345
    },
    {
        "content": "<p>lemme get world 5 up, hang on.</p>",
        "id": 179716785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572725463
    },
    {
        "content": "<blockquote>\n<p>World 3/Level 9, is this it ? <br>\nIt took me some minutes to solve it, and I had to use the rw tactic with the theorems reversed,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</pre></div>\n\n\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> you don't need backward rewriting. You could do <code>rw [mul_comm b (a*c), mul_assoc, mul_comm c], refl</code>.</p>",
        "id": 179720227,
        "sender_full_name": "tirima",
        "timestamp": 1572730880
    },
    {
        "content": "<p>Where can I get information about the syntax of rw ?<br>\nUp to now, I used it in the same way 1st year univ student to proof — throw in whatever looks plausible and pray for it to work.</p>",
        "id": 179720943,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1572732292
    },
    {
        "content": "<p>Does the description of the tactic in the drop-down menu on the left not help?</p>",
        "id": 179720962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572732334
    },
    {
        "content": "<p>I have just actually rewritten the description of the tactic in v1.07beta</p>",
        "id": 179721005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572732367
    },
    {
        "content": "<p>Ordinarily, putting the cursor in the name of a tactic should show the docstring in the web editor's info window (top right), but it looks like Kevin's modifications have somehow disabled them. Anyways, this is what it says for <code>rw</code>:</p>\n<blockquote>\n<p>tactic rw<br>\nAn abbreviation for <code>rewrite</code>.</p>\n</blockquote>\n<p>OK, not so helpful, but this is what it is for <code>rewrite</code>:</p>\n<blockquote>\n<p>tactic rewrite<br>\n<code>rewrite e</code> applies identity <code>e</code> as a rewrite rule to the target of the main goal. If <code>e</code> is preceded by left arrow (<code>←</code> or <code>&lt;-</code>), the rewrite is applied in the reverse direction. If <code>e</code> is a defined constant, then the equational lemmas associated with <code>e</code> are used. This provides a convenient way to unfold <code>e</code>.</p>\n<p><code>rewrite [e₁, ..., eₙ]</code> applies the given rules sequentially.</p>\n<p><code>rewrite e at l</code> rewrites <code>e</code> at location(s) <code>l</code>, where <code>l</code> is either <code>*</code> or a list of hypotheses in the local context. In the latter case, a turnstile <code>⊢</code> or <code>|-</code> can also be used, to signify the target of the goal.</p>\n</blockquote>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#rewriting\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#rewriting\">This chapter of \"Theorem Proving in Lean\"</a> is another good reference on \"core\" tactics (including <code>rw</code>).</p>",
        "id": 179721576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572733492
    },
    {
        "content": "<p>I have documented all the tactics I use in a drop down menu on the left. Are people not seeing this? How should I be making this information easy to spot?</p>",
        "id": 179722757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572735935
    },
    {
        "content": "<p>What I'm guessing is that, not all tactics is in the drop down menu at every level(although that's the purpose). Level 1 mentioned rw, but rw is not explained in the drop-down menu in the first level.</p>",
        "id": 179722904,
        "sender_full_name": "rory",
        "timestamp": 1572736258
    },
    {
        "content": "<p>I don't think <code>rw</code> is used in 1-1, only <code>refl</code>. I only see <code>rw</code> mentioned in this sentence:</p>\n<blockquote>\n<p>Now click on \"next level\" in the top right of your browser to go onto the second level of tutorial world, where we'll learn about the rw tactic.</p>\n</blockquote>",
        "id": 179722961,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572736400
    },
    {
        "content": "<p>when playing with this, wondering why 2-5 pointing me off towards one_eq_succ_zero, when there seems to be a much simpler way, is that supposed to be for the 1 + n case perhaps?</p>",
        "id": 179723955,
        "sender_full_name": "matt rice",
        "timestamp": 1572738578
    },
    {
        "content": "<p>I should think you can prove it with <code>refl</code>, but I haven't introduced the idea of definitional equality (mathematicians only have one kind of equality and don't like thinking about all these other weird kinds with formal definitions) so people have to take stuff apart because they don't know any other way.</p>",
        "id": 179724393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572739488
    },
    {
        "content": "<p>First draft of my attempt to teach intro, apply, exact now available at <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/</a> in world 5.</p>",
        "id": 179725741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572742550
    },
    {
        "content": "<p>The purists will be wincing. 9 levels of constructing data in tactic mode. I think mathematicians might like this approach better than having to come to terms with the fact that implication is a function. Next level is going to be proposition world and it will just basically be the same levels again but with type Prop, so the mathematician user learns Propositions-as-Types or whatever it's called by it slowly dawning on them that they're doing the same level twice but thinking about it in two different ways.</p>",
        "id": 179725790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572742655
    },
    {
        "content": "<p>I find term mode statements so difficult to read. I think this is much more readable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179726016,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572743122
    },
    {
        "content": "<p>That would be a great pub quiz question: \"These following standard theorem statements are constructed in tactic mode! What are their names?\"</p>",
        "id": 179760519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572810419
    },
    {
        "content": "<p>OK so I have function world (9 levels of manipulating sets and elements using intro, apply) and proposition world (9 levels of manipulating propositions and proofs using intro, apply) up at the beta link at <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game_beta/</a> if anyone is desperate for more levels.</p>",
        "id": 179760587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572810512
    },
    {
        "content": "<p>Given a goal Q and a hypothesis h : P -&gt; Q, is there some way to use h to reduce the goal to proving P?</p>",
        "id": 179774223,
        "sender_full_name": "pyon",
        "timestamp": 1572834720
    },
    {
        "content": "<p>Phrased differently, I want to know if there is a way to solve level 9 from world 5 step by step, rather than constructing a single large term.</p>",
        "id": 179774273,
        "sender_full_name": "pyon",
        "timestamp": 1572834772
    },
    {
        "content": "<p><code>apply h</code></p>",
        "id": 179774438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572835073
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 179775471,
        "sender_full_name": "pyon",
        "timestamp": 1572836925
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>something that'd be neat would be zachtronics-like scoreboards displaying \"x % of players completed this in y instructions\"</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> is this even feasible? Mohammad basically said very early on in the project \"OK so we can either have people log in or not, and if they log in we can keep all their game data and do all sorts of things, but it will take me X days to learn how to do it\" (for some value of X which was positive) and I said \"<a href=\"https://kasperpeulen.github.io/\" target=\"_blank\" title=\"https://kasperpeulen.github.io/\">Euclid the game</a> doesn't have logins, so let's just go for it now while I don't have teaching, and let the user have access to all the levels\".</p>\n</blockquote>\n<p>Right now the game is a static webpage, the browser just downloads some files and runs the game. If we want the server to collect game statistics then we need a dynamic webpage. It's not theoretically difficult but it would take me some time to learn about it. The same is true with passwords and logins. The page needs to become dynamic.</p>",
        "id": 179808897,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1572849808
    },
    {
        "content": "<blockquote>\n<p>you could store the gamestate including proofs in the browser (localstorage), then you wouldn't have to store any on the server and logins would be unnecessary if you don't mind the % stats being not completely accurate, biggest downside would be you'd still have to come up with a mechanism that handles world changes in a way that keeps most of one's gamestate intact</p>\n</blockquote>\n<p>It's possible to save the gamestate in the browser, but then it will only give you statistics about yourself which is not necessarily useful. Saving the gamestate can be useful in order to remember the progress, so that you can continue the game another day. However, this is not a  priority now since the game is constantly being updated and with any change, all the previous saved data in the browser will be lost.</p>",
        "id": 179809092,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1572850099
    },
    {
        "content": "<blockquote>\n<p>Given a goal Q and a hypothesis h : P -&gt; Q, is there some way to use h to reduce the goal to proving P?</p>\n</blockquote>\n<p>This is the point of world 5 level 4.</p>",
        "id": 179811796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572854115
    },
    {
        "content": "<p>I write all this text in the levels, and then younger viewers (like my 17 year old son) say \"there are so many _words_!\" and only read some of them. It's difficult. Younger people are more happy to watch a youtube vid. There should be a video version with no text at all and just the levels, where you watch the vid, get a \"take home message\", do the level and press on. No reading words necessary!</p>",
        "id": 179811893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572854249
    },
    {
        "content": "<blockquote>\n<p>It's possible to save the gamestate in the browser, but then it will only give you statistics about yourself which is not necessarily useful. Saving the gamestate can be useful in order to remember the progress, so that you can continue the game another day. However, this is not a  priority now since the game is constantly being updated and with any change, all the previous saved data in the browser will be lost.</p>\n</blockquote>\n<p>Is it possible to do something like <a href=\"http://incredible.pm/\" target=\"_blank\" title=\"http://incredible.pm/\">http://incredible.pm/</a>, where progress is saved but when the game is updated, we hold on to old progress?</p>",
        "id": 179823622,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1572865443
    },
    {
        "content": "<p>I solved World 3/Level 5 with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> says \"2) Did you know you can do rwa [hd, mul_add]? (I learnt that trick from Ken Lee)\". How do I use that hint?</p>",
        "id": 179898290,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1572923596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242206\">@Luis O'Shea</span> <code>rwa</code> means <code>rw</code> followed by <code>assumption</code>.</p>",
        "id": 179902158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572930129
    },
    {
        "content": "<p>That said, I don't see exactly what Kevin means with the hint</p>",
        "id": 179902251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572930300
    },
    {
        "content": "<p>I think hint (2) is supposed to be read in conjunction with hint (1).</p>",
        "id": 179907062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572938184
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">},</span>\n     <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- no refl!</span>\n</pre></div>",
        "id": 179907117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572938260
    },
    {
        "content": "<p>I have no idea why <code>repeat {rw mul_zero}</code> doesn't need a refl. This is I guess a bug in the game. I have modified some tactics to behave differently but I didn't modify <code>repeat</code>. I don't know if it tries <code>refl</code> at the end of things.</p>",
        "id": 179907834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572939134
    },
    {
        "content": "<p>In real Lean, <code>rw</code> tries to close the goal by <code>refl</code> at the end so you often don't need to write it. I decided this was confusing for the mathematician user and made them write all of them by disabling this.</p>",
        "id": 179907855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572939170
    },
    {
        "content": "<p>In my haste to solve the level I had not even noticed the missing <code>refl</code> after <code>repeat {...}</code>.</p>",
        "id": 180002846,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1573015749
    },
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s post why can I not replace <code>rwa [hd,mul_add]</code> with <code>rw [hd,mul_add],assumption</code>? In fact what assumption does <code>rwa</code> use to close the goal?</p>",
        "id": 180003239,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1573016486
    },
    {
        "content": "<p>It might have to do with the way that Kevin modified <code>rw</code> so that it doesn't automatically apply <code>refl</code> at the end. My guess is that <code>rwa</code> doesn't have that modification so it still applies the usual <code>refl</code>, which closes the goal.</p>",
        "id": 180003433,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573016795
    },
    {
        "content": "<p>Inspecting the code <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/less_leaky.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/less_leaky.lean\">here</a> supports my guess. The proofs in the natural number game use tactics from the \"<code>less_leaky.interactive</code>\" namespace instead of the usual <code>tactic.interactive</code> namespace. <code>rw</code> is defined in the <code>less_leaky.interactive</code> namespace to be <code>rw'</code> (<a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/modded.lean#L55\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/tactic/modded.lean#L55\">a modified version</a> which doesn't apply <code>refl</code> at the end) but <code>rwa</code> isn't directly defined there, so the usual <code>rwa</code> (which applies <code>refl</code>) gets copied into <code>less_leaky.interactive</code> by <code>copy_decls</code>.</p>",
        "id": 180003821,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573017581
    },
    {
        "content": "<p>What Bryan said.</p>",
        "id": 180007488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573023992
    },
    {
        "content": "<p>Hello all.<br>\nI thoroughly enjoyed the natural number game, but couldn't defeat the final boss.<br>\nIs there an answer sheet somewhere?<br>\nI couldn't get the twitter hint either, but I did have fun trying and I would recommend it as a tutorial starting point for all interested in Lean.</p>",
        "id": 180009342,
        "sender_full_name": "Miguel Raz Guzmán Macedo",
        "timestamp": 1573026639
    },
    {
        "content": "<p>The Twitter hint just shows how to solve it using automation.</p>",
        "id": 180011988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573029636
    },
    {
        "content": "<p>There's a proper proof involving a dozen or more rewrites though</p>",
        "id": 180012011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573029669
    },
    {
        "content": "<blockquote>\n<p>I write all this text in the levels, and then younger viewers (like my 17 year old son) say \"there are so many _words_!\" and only read some of them. It's difficult. Younger people are more happy to watch a youtube vid. There should be a video version with no text at all and just the levels, where you watch the vid, get a \"take home message\", do the level and press on. No reading words necessary!</p>\n</blockquote>\n<p>If the videos exist on youtube, it's probably not to hard to implement that.</p>",
        "id": 180097245,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1573094271
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It's possible to save the gamestate in the browser, but then it will only give you statistics about yourself which is not necessarily useful. Saving the gamestate can be useful in order to remember the progress, so that you can continue the game another day. However, this is not a  priority now since the game is constantly being updated and with any change, all the previous saved data in the browser will be lost.</p>\n</blockquote>\n<p>Is it possible to do something like <a href=\"http://incredible.pm/\" target=\"_blank\" title=\"http://incredible.pm/\">http://incredible.pm/</a>, where progress is saved but when the game is updated, we hold on to old progress?</p>\n</blockquote>\n<p>That's an interesting website! If the updates are done in a way that the old levels don't change, I suppose that would be possible.</p>",
        "id": 180097536,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1573094712
    },
    {
        "content": "<p>This is a fun game.</p>\n<p>On world 3 level 5, the proof is below the lean editor window. It says \"induction c with d hd, refl, repeat {rw mulsucc}, -- a * b * d + a * b = a * (b * d + b) rwa [hd, muladd], -/\".</p>\n<p>also, on world 2 level 4 I couldn't hear the boss music.</p>",
        "id": 180100193,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1573098772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> apparently there's a problem with the boss music</p>",
        "id": 180107543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573110199
    },
    {
        "content": "<p>You could play the beta version next</p>",
        "id": 180107554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573110225
    },
    {
        "content": "<p>natural_number_game_beta I think it is. Or something even more secret at natural_number_game_diags</p>",
        "id": 180107626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573110293
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It's possible to save the gamestate in the browser, but then it will only give you statistics about yourself which is not necessarily useful. Saving the gamestate can be useful in order to remember the progress, so that you can continue the game another day. However, this is not a  priority now since the game is constantly being updated and with any change, all the previous saved data in the browser will be lost.</p>\n</blockquote>\n<p>Is it possible to do something like <a href=\"http://incredible.pm/\" target=\"_blank\" title=\"http://incredible.pm/\">http://incredible.pm/</a>, where progress is saved but when the game is updated, we hold on to old progress?</p>\n</blockquote>\n<p>I introduced this game to a friend of mine who's teaching logic now. He says thanks! :D</p>",
        "id": 180157863,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1573150048
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> apparently there's a problem with the boss music</p>\n</blockquote>\n<p>We can solve that. Something like this : <a href=\"https://www.youtube.com/watch?v=-bzWSJG93P8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=-bzWSJG93P8\">https://www.youtube.com/watch?v=-bzWSJG93P8</a> ?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"-bzWSJG93P8\" href=\"https://www.youtube.com/watch?v=-bzWSJG93P8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=-bzWSJG93P8\"><img src=\"https://i.ytimg.com/vi/-bzWSJG93P8/default.jpg\"></a></div>",
        "id": 180157984,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1573150123
    },
    {
        "content": "<blockquote>\n<p>I find term mode statements so difficult to read. I think this is much more readable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n</blockquote>\n<p>I find numerals so difficult to handle. I think this is much more readable.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">x</span> <span class=\"c1\">-- 3</span>\n</pre></div>",
        "id": 180361024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573387668
    },
    {
        "content": "<p>You're just duplicating something that's already in mathlib.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>",
        "id": 180366031,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573397111
    },
    {
        "content": "<p>I get  <code>x = 1100</code> when I do that. How interesting</p>",
        "id": 180366113,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573397198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> A quiz: without checking, what's the type of <code>y</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>",
        "id": 180366163,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573397278
    },
    {
        "content": "<p>Is it <code>Π {α : Sort *}, α → α </code>?</p>",
        "id": 180366306,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573397403
    },
    {
        "content": "<p>No, nothing so reasonable.</p>",
        "id": 180366375,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573397521
    },
    {
        "content": "<p>for int you get 1, for rat it fails.</p>",
        "id": 180366451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573397612
    },
    {
        "content": "<p>Oh of course, it depends heavily on imports</p>",
        "id": 180366507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573397646
    },
    {
        "content": "<p>The extra addition and multiplication worlds (which were there in v1.0 and removed in v1.06) are back in the <a href=\"https://tinyurl.com/natgame1234\" target=\"_blank\" title=\"https://tinyurl.com/natgame1234\">current stable version</a> of the natural number game, v1.09. I'm hoping users will find these a lot easier than last time around!</p>",
        "id": 180470881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573517463
    },
    {
        "content": "<p>Level 9 of function world can be solved using <code>solve_by_elim</code>,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f3</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f7</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f8</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f9</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f10</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f11</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f12</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f13</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f14</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f15</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">{</span><span class=\"n\">max_rep</span> <span class=\"o\">:=</span> <span class=\"mi\">8</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I figured since lean is a computer game, I'd create a file called hotkeys.lean with some personalized tactics not suitable for mathlib. One of these tactics is just <code>solve_by_elim</code> with the addition that it spits out an <code>exact</code> statement just like <code>library_search</code>. Using this, the line <code>solve_by_elim {max_rep := 8}</code> can be replaced by <code>exact f15 (f11 (f9 (f8 (f5 (f2 (f1 a))))))</code>.</p>",
        "id": 180586791,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1573615175
    },
    {
        "content": "<p>Neat! There was some discussion on this example last week <a href=\"#narrow/stream/113488-general/topic/function.20with.20random.20definition/near/179716621\" title=\"#narrow/stream/113488-general/topic/function.20with.20random.20definition/near/179716621\">in this thread</a>.</p>",
        "id": 180587271,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573615683
    },
    {
        "content": "<p>Oh I see, the <code>{ max_rep := 8 }</code> part of <code>solve_by_elim</code> unfortunately is just something the user needs to know at this stage. I remember typing <code>max_reps</code> a couple of times and wondering why it wasn't working. It's explained in the doc string though.</p>",
        "id": 180587887,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1573616602
    },
    {
        "content": "<p>I certainly didn't know about the <code>max_rep</code> option (I must have missed it at the bottom of the docstring). The fact that it's set to 3 by default should probably be added to the docstring / tactics doc.</p>",
        "id": 180589492,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573618183
    },
    {
        "content": "<p>I'll update the level! Thanks. I had not understood from the original conversation that this could be done.</p>",
        "id": 180599407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573630543
    },
    {
        "content": "<p>Hi all, just wanna drop by to say thanks for making the fun game! Finished the addition and multiplication world and will try the others :)</p>",
        "id": 180731983,
        "sender_full_name": "agro1986",
        "timestamp": 1573739477
    },
    {
        "content": "<p>Btw found a small typo on Proposition World level 3: <code>exact l(j(h(P)))</code> should be small case <code>p</code>.  <br>\nIf PRs are OK, I sent one here :) <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/31\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/pull/31\">https://github.com/ImperialCollegeLondon/natural_number_game/pull/31</a></p>",
        "id": 180920019,
        "sender_full_name": "agro1986",
        "timestamp": 1573924091
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 180922465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573928119
    },
    {
        "content": "<p>I also need help for Advanced multiplication world, Level 4, mul_left_cancel. I started like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">revert</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span><span class=\"o\">(</span><span class=\"n\">refl</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">},</span>\n</pre></div>\n\n\n<p>and the goal is something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">case</span> <span class=\"n\">mynat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n<span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">a_n</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">a_ih</span> <span class=\"o\">:</span> <span class=\"n\">a_n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a_n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a_n</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">c</span>\n</pre></div>\n\n\n<p>Somehow I would need to make a distinction whether a_n is 0, 1 or something else. Some kind of proof by cases or induction starting at 1 or something similar. Or am I going into a completely wrong direction? Am I still confined to constructive argumentation?</p>\n<p>I  am really addicted to the natural number game. Keep up the good work!</p>",
        "id": 181037033,
        "sender_full_name": "yuppie",
        "timestamp": 1574098300
    },
    {
        "content": "<p>You can do <code>cases a_n with a</code> and it will split into the two cases a_n=0 and a_n=succ(a). On the other hand it might be worth thinking a bit about precisely what you want to prove by induction here.</p>",
        "id": 181041205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574101227
    },
    {
        "content": "<p>i.e. what is your maths proof?</p>",
        "id": 181041962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574101688
    },
    {
        "content": "<p>I struggled with <code>mul_left_cancel</code> for hours. I eventually cheated and looked at the answer on github. The trick is to start the proof with <code>revert b</code> or <code>revert c</code>, so that when you do <code>induction</code> and then <code>cases</code> the variable in the induction hypothesis isn't changed to <code>succ</code> something.</p>",
        "id": 181061078,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1574114340
    },
    {
        "content": "<p>I also found the use of <code>revert</code> in the proof of <code>mul_left_cancel</code> tricky (although KB added a very explicit hint to the game around v1.09b). Looking around in other examples I found various uses of <code>revert</code> which are not critical (i.e., can be easily done without <code>revert</code>). This was the first proof which truly used (IMO).</p>",
        "id": 181073079,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574125609
    },
    {
        "content": "<p>As it happens I think it's an interesting issue since I think mathematicians don't clearly distinguish between statements like \"n is natural number implies 2n is even\" and \"for all natural numbers n, 2n is even\". That makes <code>revert</code> (as used in <code>mul_left_cancel</code>) slippery, but interesting. (At least this is how I see it.)</p>",
        "id": 181073174,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574125791
    },
    {
        "content": "<p>For example in <a href=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/example_sheet_01/Sht1Q1/S0101.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/blob/master/src/example_sheet_01/Sht1Q1/S0101.lean\">M1F example sheets/S0101.lean</a> the first proof (of <code>M1F_Sheet01_Q01a_is_F</code>) uses <code>revert</code> in an inessential way: instead of <code>revert H2,norm_num</code> you can say <code>norm_num at H2,assumption</code>. However <code>revert</code> can not be eliminated from the proof of <code>mul_left_cancel</code> so easily, if at all.<br>\nAs a beginner I think it would be useful to see another simple but \"essential\" use of <code>revert</code>.</p>",
        "id": 181075142,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1574128537
    },
    {
        "content": "<p>You have to be clear what you're proving by induction. Is it ok if b is fixed like in associativity of addition (the inductive step uses the same b) or does the thing you're proving by induction need to be a claim that for all b something is true</p>",
        "id": 181087600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574147688
    },
    {
        "content": "<p>There is also <code>induction a generalizing b</code> for this pattern</p>",
        "id": 181087612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574147722
    },
    {
        "content": "<p>Ok I thought I was having trouble with lean but as Kevin pointed out I agree that I didn't have a math plan. Wait, how do you even prove b+b=c+c \\implies b=c? Is this even true...? -.-</p>",
        "id": 181146848,
        "sender_full_name": "yuppie",
        "timestamp": 1574192341
    },
    {
        "content": "<p>I'm glad to see that I'm causing some mini crises :-) Surely they taught you this proof in school? Funny how stuff gets skipped over :D</p>",
        "id": 181148720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574193664
    },
    {
        "content": "<p>Do you want a hint <span class=\"user-mention\" data-user-id=\"246966\">@yuppie</span> ?</p>",
        "id": 181148784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574193709
    },
    {
        "content": "<blockquote>\n<p>Do you want a hint <span class=\"user-mention silent\" data-user-id=\"246966\">yuppie</span> ?</p>\n</blockquote>\n<p>Thanks a lot, but not yet. I want to think about it for some while. I might come back to you in a few days when I'm desperate.</p>",
        "id": 181149831,
        "sender_full_name": "yuppie",
        "timestamp": 1574194444
    },
    {
        "content": "<p>I too struggled with <code>mul_left_cancel</code>, and eventually gave up and looked at the solution.  <br>\nIt uses the tactic <code>congr</code> which is not explained in the text (or even in the manual I was looking at ).<br>\nBut it can be replaced with <code>apply succ_eq_succ_of_eq</code>.<br>\nAnyways I agree that we should see a simpler example of the need for <code>revert</code>.</p>",
        "id": 181222190,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1574266470
    },
    {
        "content": "<p>what manual?</p>",
        "id": 181222302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574266553
    },
    {
        "content": "<p>It should be in the mathlib tactic docs</p>",
        "id": 181222357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574266570
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/tactics.html\" target=\"_blank\" title=\"https://leanprover.github.io/reference/tactics.html\">https://leanprover.github.io/reference/tactics.html</a></p>",
        "id": 181224425,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1574267882
    },
    {
        "content": "<blockquote>\n<p>I too struggled with <code>mul_left_cancel</code>, and eventually gave up and looked at the solution. </p>\n</blockquote>\n<p>I didn't know there are solutions, where can I find them?<br>\nI just finished <code>mul_left_cancel</code> and thus the whole game but I'm new to lean and would like to see other solutions as well</p>",
        "id": 181230389,
        "sender_full_name": "Elvorfirilmathredia",
        "timestamp": 1574271385
    },
    {
        "content": "<p>You can find Kevin's solutions in the natural_number_game repo <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/tree/master/src/game\">here</a>. <code>mul_left_cancel</code> in particular is <a href=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level4.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/natural_number_game/blob/master/src/game/world9/level4.lean\">here</a>.</p>",
        "id": 181233348,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574273302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> would it be possible to have the current level in the URL, so that people can link to levels? Currently it is always on the top level URL <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> . I think there are JS commands for updating the URL even in a \"single page application\" like this.</p>",
        "id": 181764734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574608709
    },
    {
        "content": "<p>The easiest way might be to store / read the level name in a \"hash parameter\" (like how the lean-web-editor puts the code in the URL behind <code>#code=</code>).</p>",
        "id": 181765003,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574609250
    },
    {
        "content": "<p>I'm just the guy who writes the levels, so I have no idea. I was talking to my education specialist post-doc Athina and she said that for teaching students about about continuous functions it would be nice to have some little graphics apps with stuff you can pull to change epsilon and delta etc and I suspect this might be pretty tough in the current set-up which made me wonder if moving to observable would be better</p>",
        "id": 181772104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574621033
    },
    {
        "content": "<p>I don't think there's any need to move things to Observable. It shouldn't be hard to embed illustrative interactive graphics that are written \"as usual\" using D3 or some other JS graphics library into the current game. If you want to have those graphics communicate with Lean code in some way then some of the code I wrote for the Lean Observable notebooks might come in handy as a reference, but you could still add such gadgets to the game without having to rewrite it in a different framework.</p>\n<p>If you have some specific graphics ideas in mind, feel free to post a description here and I or someone else might take a stab at it.</p>",
        "id": 181773135,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574622582
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <span class=\"user-mention silent\" data-user-id=\"132175\">Mohammad Pedramfar</span> would it be possible to have the current level in the URL, so that people can link to levels? Currently it is always on the top level URL <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a> . I think there are JS commands for updating the URL even in a \"single page application\" like this.</p>\n</blockquote>\n<p>That's a good idea. I'll implement it this weekend.</p>",
        "id": 181831079,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1574694728
    },
    {
        "content": "<blockquote>\n<p>The easiest way might be to store / read the level name in a \"hash parameter\" (like how the lean-web-editor puts the code in the URL behind <code>#code=</code>).</p>\n</blockquote>\n<p>Yeah, that's what I was thinking</p>",
        "id": 181831112,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1574694749
    },
    {
        "content": "<blockquote>\n<p>I don't think there's any need to move things to Observable. It shouldn't be hard to embed illustrative interactive graphics that are written \"as usual\" using D3 or some other JS graphics library into the current game. If you want to have those graphics communicate with Lean code in some way then some of the code I wrote for the Lean Observable notebooks might come in handy as a reference, but you could still add such gadgets to the game without having to rewrite it in a different framework.</p>\n<p>If you have some specific graphics ideas in mind, feel free to post a description here and I or someone else might take a stab at it.</p>\n</blockquote>\n<p>I agree. It should be easy to import independent javascript graphics into the game. I'll try to look into your Observable codes, it's probably not too difficult to import/copy the same codes that you used there as well.</p>",
        "id": 181831707,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1574695178
    },
    {
        "content": "<blockquote>\n<p>As it happens I think it's an interesting issue since I think mathematicians don't clearly distinguish between statements like \"n is natural number implies 2n is even\" and \"for all natural numbers n, 2n is even\". That makes <code>revert</code> (as used in <code>mul_left_cancel</code>) slippery, but interesting. (At least this is how I see it.)</p>\n</blockquote>\n<p>I also had fun trying to do this problem. I think it goes something like this. How do we prove ab=ac =&gt; b=c by induction? Well, let's try induction on b. Let us say we know the result for b=k and want to show it for b=k+1. More precisely, we know that ak=ac =&gt; k=c and we want to show that a(k+1) = ac =&gt; k+1 = c. But we can't possibly do that; we can expand the antecedent to get ak+a = ac, but even knowing that ak=ac =&gt; k=c doesn't get us anywhere.  The problem is that c has a fixed value.</p>\n<p>Instead, we have to prove a slightly different result, namely: \"for all c, ab=ac =&gt; b=c\". Now our induction hypothesis becomes \"for all c, ak=ac =&gt; k=c\" and we want to prove \"for all c, a(k+1)=ac =&gt; k+1=c\". We can now deal with the two possible cases for c, namely c=0 and c=m+1; the first leads to false =&gt; false (as a and k+1 are both non-zero), and the second gives a(k+1)=a(m+1) =&gt; k+1 = m+1, which can be reduced to ak=am =&gt; k+1=m+1.  Since we know ak=am =&gt; k=m from our induction hypothesis, we can then deduce k+1=m+1.</p>",
        "id": 182670053,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1575559787
    },
    {
        "content": "<p>Hmm, I'm stuck on Inequality level 16.  Here's where I've got to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lt_aux_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">succ</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hd</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">not_succ_le_self</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>At this point I have the very helpful state:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n<span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n<span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">false</span>\n</pre></div>\n\n\n<p>I really want to turn <code>hc</code> into <code>succ b ≤ b</code>, so I want to do some sort of exists introduction, essentially saying \"<code>hc</code> is my proof that <code>succ b ≤ b</code>\", but I have no idea how to do so.  (Of course, once I have this, then I just apply <code>hb</code> to it to close the goal.)</p>\n<p>Any suggestions?</p>",
        "id": 182742010,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1575624034
    },
    {
        "content": "<p>How about <code>have hc' : succ b &lt;= b,</code>?</p>",
        "id": 182746867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575627970
    },
    {
        "content": "<p>Then you can prove it using <code>hc</code></p>",
        "id": 182746897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575628005
    },
    {
        "content": "<p>Alternatively just work backwards, <code>apply hb</code> and then work on your new goal</p>",
        "id": 182746937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575628047
    },
    {
        "content": "<p>Ah, nice, thanks!  I'd completely forgotten that you could introduce new goals with <code>have</code>! I'm gradually getting the hang of this ;-)</p>",
        "id": 182747426,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1575628338
    },
    {
        "content": "<p>I think your next move should just be <code>apply hb</code>. Did you do that function level where you just do have have have and go forwards but then there's this other proof where you go apply apply apply and go backwards?</p>",
        "id": 182748523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575629148
    },
    {
        "content": "<p>Thinking backwards is important because it tells you how to start writing your function, as opposed to what to put at the end of it</p>",
        "id": 182748598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575629176
    },
    {
        "content": "<p>Apply hb then use (d+c)</p>",
        "id": 182748623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575629208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span>, another approach to proving  <code>lt_aux_two</code> is to use the transitivity of \"≤\" (<code>le_trans</code>); see <a href=\"https://gist.github.com/banbh/2ef6a84caac87fd2d5e656b1884203cc\" target=\"_blank\" title=\"https://gist.github.com/banbh/2ef6a84caac87fd2d5e656b1884203cc\">spoiler</a> for full proof.</p>",
        "id": 182907619,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1575836807
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"242660\">Julian Gilbey</span>, another approach to proving  <code>lt_aux_two</code> is to use the transitivity of \"≤\" (<code>le_trans</code>); see <a href=\"https://gist.github.com/banbh/2ef6a84caac87fd2d5e656b1884203cc\" target=\"_blank\" title=\"https://gist.github.com/banbh/2ef6a84caac87fd2d5e656b1884203cc\">spoiler</a> for full proof.</p>\n</blockquote>\n<p>Ah, that's a nice idea, thanks!  With that hint, I recreated exactly your solution myself.</p>",
        "id": 183352784,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1576238898
    }
]