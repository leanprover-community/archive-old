[
    {
        "content": "<p>I'm currently stuck on this one problem. Any help would be appreciated!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.spectrum</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">hi</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℂ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hT</span> <span class=\"o\">:</span> <span class=\"n\">T.is_symmetric</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional.finrank</span> <span class=\"n\">ℂ</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">hT.eigenvalues</span> <span class=\"n\">hn</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt</span> <span class=\"o\">(</span><span class=\"n\">hT.eigenvalues</span> <span class=\"n\">hn</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hT.eigenvector_basis</span> <span class=\"n\">hn</span> <span class=\"n\">i</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span> <span class=\"bp\">*</span> <span class=\"bp\">⟪</span><span class=\"n\">hT.eigenvector_basis</span> <span class=\"n\">hn</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⟫</span><span class=\"n\">_ℂ</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 322141625,
        "sender_full_name": "Monica Omar",
        "timestamp": 1674072172
    },
    {
        "content": "<p>Start with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_nonneg\">docs#finset.sum_nonneg</a>?</p>",
        "id": 322142261,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674072381
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">inner_conj_sym</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">complex.norm_sq_eq_conj_mul_self</span><span class=\"o\">,</span> <span class=\"n\">complex.smul_re</span><span class=\"o\">,</span>\n    <span class=\"n\">complex.of_real_re</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>makes some good progress, then it's a trivial inequality</p>",
        "id": 322143081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674072677
    }
]