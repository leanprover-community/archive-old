[
    {
        "content": "<p>Hi there! I'm learning Lean and trying to prove an example that there are no comm rings with 5 units. I've shown that the group of units is cyclic, but trying to introduce it's generator element <code>u</code>, </p>\n<ol>\n<li>Is there a way I can use this to refer to all the units as powers of <code>u</code>? where <code>1 = u^5</code></li>\n<li>How can I also use <code>u</code> for ring operation \"+\" when <code>u</code> has type <code>Rˣ</code> and not <code>R</code></li>\n</ol>\n<p>I looked at <code>subgroup.zpowers</code> in <code>group_theory.subgroup.basic</code> but can't figure out how Lean is treating these objects.<br>\nMy code is below but note I don't want spoilers for the later part of this problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.cyclic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">no_5_unit_comm_ring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h5u</span><span class=\"o\">,</span> <span class=\"c1\">-- assume we have a ring with 5 units for a contra</span>\n\n  <span class=\"c1\">-- group of units Rˣ is cyclic</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclic</span> <span class=\"n\">R</span><span class=\"bp\">ˣ</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_cyclic_of_prime_card</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">_inst_2</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">5</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h5u</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"c1\">--can view Rˣ as {1, u, u², u³, u⁴} (multiplicative group)</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">u</span><span class=\"bp\">^</span><span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"c1\">--(1 + u + u²)(u + u² + u⁴) = (u + u⁶) + (u² + u²) + (u⁴ + u⁴) + (u³ + u³) + u⁵ = 2(u + u² + u³ + u⁴) + 1</span>\n  <span class=\"c1\">--Rˣ has characteristic 2</span>\n  <span class=\"c1\">--This means (1 + u + u²) ∈ Rˣ</span>\n  <span class=\"c1\">--we know (1 + u + u²) ∉ {1, u, u²} (if it was, then the other elements would be each others negative and that is not true)</span>\n  <span class=\"c1\">--So that means (1 + u + u²) ∈ {u³, u⁴}</span>\n  <span class=\"c1\">--consider r = (1 + u + u² + u³ + u⁴), r² = 2(...) + r = r</span>\n  <span class=\"c1\">--if r is a unit, since r² = r, we must have r=1</span>\n  <span class=\"c1\">-- for the two cases of (1 + u + u²) ∈ {u³, u⁴},</span>\n  <span class=\"c1\">-- if (1 + u + u²) = u³ → 2(u³) + u⁴ → 1 = u⁴ contradiction</span>\n  <span class=\"c1\">-- same for (1 + u + u²) = u⁴</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290875264,
        "sender_full_name": "Jamie Reason",
        "timestamp": 1658832623
    },
    {
        "content": "<p><code>is_cyclic</code> is what is known as a typeclass, so I think that best would be actually to write the first <code>have</code> as <code>haveI</code>, and then obtain the element as <code>obtain ⟨u, hu⟩ := is_cyclic.exists_generator Rˣ</code> so that you can still keep around the cyclic-ness around for other useful lemmas (although it really doesn't seem many exist...)</p>",
        "id": 290876344,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658833360
    },
    {
        "content": "<p>THen you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_of_eq_card_of_forall_mem_zpowers\">docs#order_of_eq_card_of_forall_mem_zpowers</a> with your <code>hu</code> to get the order of <code>u</code></p>",
        "id": 290876356,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658833377
    },
    {
        "content": "<p>you can also write your first few lines as <code>  haveI : fact ((5 : ℕ).prime) := ⟨by norm_num⟩,\n  haveI h : is_cyclic Rˣ := is_cyclic_of_prime_card h5u</code> to avoid fiddling with everything!</p>",
        "id": 290876476,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658833468
    }
]