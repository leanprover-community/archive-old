[
    {
        "content": "<p>What's the one-line proof that I'm missing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- simp [h]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181234812,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574274330
    },
    {
        "content": "<p>I guess <code>revert h, simp</code> works...</p>",
        "id": 181234989,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574274468
    },
    {
        "content": "<p><code>cases h; refl</code></p>",
        "id": 181236579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574275687
    },
    {
        "content": "<p>Or <code>injection h</code></p>",
        "id": 181238745,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1574277188
    },
    {
        "content": "<p>Ah, <code>injection</code> is what I was looking for. I don't get what <code>cases</code> is doing in that line, and why that works</p>",
        "id": 181239342,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574277485
    },
    {
        "content": "<p>Out of interest, how would I prove this in term mode</p>",
        "id": 181239770,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574277779
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example {α β : Type} {x : α} {y z : β} (h : (x, y) = (x, z)) : y = z := (prod.mk.inj h).2\n</pre></div>\n\n\n<p><code>prod.mk.inj</code> uses <code>prod.no_confusion</code> which afaik you get for all inductive types that are not propositions</p>",
        "id": 181241385,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1574278743
    },
    {
        "content": "<p>yes, it's auto-generated afaik </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 181241521,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1574278835
    },
    {
        "content": "<p>Yeah, no_confusion is what you want when you'd like to show that a constructor is injective and/or disjoint. The sources below have some more detailed info. FWIW no_confusion is defined in terms of another definition called <code>no_confusion_type</code> which I find easier on the eyes.</p>\n<p><a href=\"https://github.com/leanprover/tutorial/blob/master/06_Inductive_Types.org\" target=\"_blank\" title=\"https://github.com/leanprover/tutorial/blob/master/06_Inductive_Types.org\">https://github.com/leanprover/tutorial/blob/master/06_Inductive_Types.org</a><br>\n<a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 181258473,
        "sender_full_name": "Chris B",
        "timestamp": 1574290289
    },
    {
        "content": "<p>Here's a proof directly from axioms:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 181259867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574291421
    },
    {
        "content": "<p>or more simply</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n</pre></div>",
        "id": 181259889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574291443
    }
]