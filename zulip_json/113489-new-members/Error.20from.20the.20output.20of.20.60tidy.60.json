[
    {
        "content": "<p>I'm working on eliminating the use of <code>finish</code> in <code>order/filter/lift</code>, specifically the use in <code>eventually_lift'_powerset_eventually</code>.  I tried commenting out <code>finish</code> and replacing it with <code>tidy</code>, which closes the goal: when the cursor is between <code>tidy</code> and the closing bracket I get <code>goals accomplished 🎉</code>.  However, now I also get an error <code>type mismatch at application ᾰ_w ᾰ</code>, attributed to the line of the statement of lemma <code>eventually_lift'_powerset_eventually</code> rather than the line where <code>tidy</code> appears.  </p>\n<p>Is <code>tidy</code> producing a faulty solution (by duplicating names)?  And if so, why is it not being blamed in the error statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">filter</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨅</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">lift'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">f.lift</span> <span class=\"o\">(</span><span class=\"bp\">𝓟</span> <span class=\"bp\">∘</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eventually_lift'_powerset'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">⦄,</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">f.lift'</span> <span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eventually_lift'_powerset_eventually</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀ᶠ</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">f.lift'</span> <span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"bp\">⊓</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n  <span class=\"n\">eventually_lift'_powerset'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">hst</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">ht.mono</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eventually_iff_exists_mem</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"bp\">⊓</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">eventually_inf</span><span class=\"o\">,</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">filter</span>\n</code></pre></div>",
        "id": 266100163,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640509610
    },
    {
        "content": "<p>Dunno about the error, but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"bp\">⊓</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">eventually_inf</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">and_imp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266100643,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640510460
    },
    {
        "content": "<p>Or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span> <span class=\"bp\">⊓</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eventually_inf</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span><span class=\"o\">,</span> <span class=\"n\">mem_inter_iff</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">and_imp</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 266100654,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1640510486
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 266101207,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1640511384
    }
]