[
    {
        "content": "<p>I'm learning non-constructive definitions from <em><a href=\"https://leanprover.github.io/introduction_to_lean/introduction_to_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/introduction_to_lean/introduction_to_lean.pdf\">An Introduction to Lean</a></em> (p. 25) and the command <code>some h</code> is used -- what does it mean?</p>",
        "id": 135790900,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539546621
    },
    {
        "content": "<p><code>h : \\alpha |- some h : option \\alpha</code></p>",
        "id": 135790908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539546661
    },
    {
        "content": "<p>It's <code>classical.some</code>. Given a proof that <code>exists x, p x</code>, classical.some will return that <code>x</code></p>",
        "id": 135790924,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539546716
    },
    {
        "content": "<p>Ignore Kenny, he's talking about <code>option.some</code> which is completely different.</p>",
        "id": 135790968,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539546740
    },
    {
        "content": "<blockquote>\n<p>It's <code>classical.some</code>. Given a proof that <code>exists x, p x</code>, classical.some will return that <code>x</code></p>\n</blockquote>\n<p>Oh nice -- so it's the eliminator for <code>exists</code>? But how is it different from <code>exists.elim</code>, or doing cases on the proof?</p>",
        "id": 135791033,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539546900
    },
    {
        "content": "<p>It's the non-broken one, yes</p>",
        "id": 135791057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539546933
    },
    {
        "content": "<p><code>exists.elim</code> actually is broken? That explains a lot of problems I've had. Is it broken for finite sets too or only where choice is needed?</p>",
        "id": 135791100,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539546980
    },
    {
        "content": "<p>Almost. If you're trying to make a proof then you don't need it, you can just use <code>cases</code> or <code>exists.elim</code>. It's only if you're trying to make data that you need it. The one difference is between this and other eliminators is that you don't have<br>\n<code>classical.some (exists.intro x h) = x</code>, since this would cause contradictions because of proof irrelevance. <code>exists.elim</code> is not actually broken, that's just something people like to say when making fun of constructive mathematics.</p>",
        "id": 135791157,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539547131
    },
    {
        "content": "<p><code>s/people/Patrick Massot/</code></p>",
        "id": 135791218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539547235
    },
    {
        "content": "<p>Count me in too. Some of us don't care about constructive maths because we've spent decades doing normal maths and we're not going to change now. Others are younger and more open to these wacky ideas.</p>",
        "id": 135791383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547517
    },
    {
        "content": "<p>Ps Abhi you should never have to ask what anything is. Copy and paste the code into a Lean session, make sure it compiles, and then just right-click on the thing that you want to know about.</p>",
        "id": 135791431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547575
    },
    {
        "content": "<blockquote>\n<p>Ps Abhi you should never have to ask what anything is. Copy and paste the code into a Lean session, make sure it compiles, and then just right-click on the thing that you want to know about.</p>\n</blockquote>\n<p>Yeah, I didn't realise it was something in the <code>classical</code> library. I thought it was something like <code>have</code>, which you can check, but won't really give anything useful.</p>",
        "id": 135791496,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539547700
    },
    {
        "content": "<p>Sometimes the definitions can be a bit mysterious to a newcomer. <code>classical.some</code> is probably one of those</p>",
        "id": 135791502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539547719
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/DmskDK_GG1JoMmyzIS7d-gMq/some.png\" target=\"_blank\" title=\"some.png\">some.png</a> the <code>some</code> you're talking about is in <code>classical.lean</code>. Admittedly its definition is complicated :-/</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DmskDK_GG1JoMmyzIS7d-gMq/some.png\" target=\"_blank\" title=\"some.png\"><img src=\"/user_uploads/3121/DmskDK_GG1JoMmyzIS7d-gMq/some.png\"></a></div>",
        "id": 135791503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547726
    },
    {
        "content": "<p>On the other hand, the last chapter of TPIL, which no doubt you have read because you've had all of about 8 days to learn about this stuff (;-) ) explains something about the <code>classical</code> stuff.</p>",
        "id": 135791520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539547793
    },
    {
        "content": "<p>it could be worse (of course you need to understand the <code>{... // ...}</code> notation</p>",
        "id": 135791521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539547793
    },
    {
        "content": "<p>Yeah, I wouldn't say that's a particularly complicated definition. The complicated one is <code>epsilon</code>, which is surprisingly rarely used but is basically the same as <code>some</code> except you don't even need to prove existence first</p>",
        "id": 135791627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539547929
    }
]