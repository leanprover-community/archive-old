[
    {
        "content": "<p>Lets say I want to prove something but I need to show <code>0 &lt; 1</code>, one way is to use the syntax <code>have h : 0 &lt; 1, by norm_num,</code> I was wondering if I can avoid introducing a name for it.</p>",
        "id": 198459596,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590163533
    },
    {
        "content": "<p>did you try <code>have : 0 &lt; 1 := by norm_num</code> or <code>show 0 &lt; 1, norm_num</code><br>\n(also : post code, post code, post code. you'll get more interesting responses, including answers to questions you didn't think to ask, if you post code)</p>",
        "id": 198459966,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590163696
    },
    {
        "content": "<p>It depends on the context but you can put <code>by norm_num</code> inline , i.e <code>rw add_lt_left (by norm_num : 0 &lt; 1)</code></p>",
        "id": 198460044,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590163741
    },
    {
        "content": "<p>or even</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198460219,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590163807
    },
    {
        "content": "<p>Well basically I am stuck here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I thought  h₃ was unweildy to \"initialize\" and was hoping to \"inline it\" but to be honest, I don't know how to proceed from here.</p>",
        "id": 198460615,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590163983
    },
    {
        "content": "<p>There's also using \"French\" quotes (though I seem to recall this name not being accurate), see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#more-on-the-proof-language\">https://leanprover.github.io/theorem_proving_in_lean/quantifiers_and_equality.html#more-on-the-proof-language</a></p>",
        "id": 198460650,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590164012
    },
    {
        "content": "<p>What are the types of <code>a</code> and <code>b</code>?</p>",
        "id": 198460671,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590164020
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 198460675,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590164024
    },
    {
        "content": "<p>Oh I don't noticed <code>variables a b : ℝ</code> , they are real.</p>",
        "id": 198460905,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590164116
    },
    {
        "content": "<p>okay, so now you know why your post doesn't work. Edit your post to make it work. Did you follow the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> link to see what we're asking for?</p>",
        "id": 198461399,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590164305
    },
    {
        "content": "<p>My question was not this. It was on </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">div_one</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_le_div_iff</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Can I not give names to h₃ h₄,  for that line to work.</p>",
        "id": 198461996,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590164553
    },
    {
        "content": "<p>Can you post fully working code that I can just cut and paste? It would make it much easier to help.</p>",
        "id": 198462321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590164658
    },
    {
        "content": "<p>Give me 5 minutes and Ill bash out the rest.</p>",
        "id": 198462439,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590164713
    },
    {
        "content": "<p>Instead of defining <code>h_3</code> can't you just replace the unique place it occurs with <code>(by norm_num)</code>? Is that the answer to your question?</p>",
        "id": 198462671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590164794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128818\">Syx Pek</span> <a href=\"#narrow/stream/113489-new-members/topic/Anonymous.20.22have.22/near/198462439\">said</a>:</p>\n<blockquote>\n<p>Give me 5 minutes and Ill bash out the rest.</p>\n</blockquote>\n<p>by fully working we just mean define all variables, not that it can't have a sorry at the end.</p>",
        "id": 198463215,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590165045
    },
    {
        "content": "<p>and all imports.</p>",
        "id": 198463268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590165072
    },
    {
        "content": "<p>Like: read the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> link that was posted several times...</p>",
        "id": 198463324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165107
    },
    {
        "content": "<p>This is what Alex and Kevin suggested. I couldn't get it to work without the type ascriptions:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- have h₃ : (0 : ℝ) &lt; 1, by norm_num,</span>\n    <span class=\"c1\">-- have h₄ : (0 : ℝ) &lt; 2, by norm_num,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">div_one</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_le_div_iff</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198463589,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590165234
    },
    {
        "content": "<p>You can also just let the rewrite spawn new goals for what it needs and then fill them later.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">div_one</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_le_div_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198463752,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590165324
    },
    {
        "content": "<p>Alright, I filled out the sorry, I apologize for the bad example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">abs_le_of_le_of_neg_le</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">div_one</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">div_le_div_iff</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">],</span>\n    <span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span>\n       <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span>                    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n    <span class=\"bp\">...≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"n\">h₁</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n    <span class=\"bp\">...=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"mi\">1</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">div_one</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"n\">div_le_div_iff</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">],</span>\n    <span class=\"k\">calc</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span>\n       <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span>                 <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_eq</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n    <span class=\"bp\">...≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n    <span class=\"bp\">...=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"mi\">1</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I am actually curious how to avoid defining <code> h₃ h₄</code> and this was adequately answered above. Thanks!</p>",
        "id": 198464746,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590165874
    },
    {
        "content": "<p>Note that the last thing you posted still doesn't qualify as a MWE because you didn't include <code>import data.real.basic</code> at the top.</p>",
        "id": 198465833,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590166374
    },
    {
        "content": "<blockquote>\n<p>In particular, you should test this by making a new Lean file, pasting your code snippet into it, and seeing if you get the expected behavior. This is exactly what people who try to help you will do!</p>\n</blockquote>",
        "id": 198465908,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590166407
    },
    {
        "content": "<p>Sorry if we seem somewhat prickly about this.</p>",
        "id": 198466055,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590166465
    },
    {
        "content": "<p>we did not ask you to fill in the sorry, we only asked you to make a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a>. When you read the content after following the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> link, did it leave you with the impression that <code>sorry</code>s are disallowed?</p>",
        "id": 198466201,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590166547
    },
    {
        "content": "<p>That page should contain the word sorry</p>",
        "id": 198466350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590166613
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> now has a sentence explaining that sorries are fine</p>",
        "id": 198466651,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590166748
    },
    {
        "content": "<p>Ah, when I read it I interpreted \"correct imports\" as _not the wrong ones\" rather than a complete list of the imports one have to make.<br>\nAlso, in my head, I've been playing around with the problem for quite a bit, and just implicitly assumed all my variables are real, so I didn't realise it was a significant part of the program.</p>",
        "id": 198466939,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590166883
    },
    {
        "content": "<p>hmm i don't know what you mean by \"not the wrong ones\" but anyway, you can always check whether your code is a MWE by pasting it into a blank file and seeing if you get what you expect</p>",
        "id": 198467202,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590167030
    },
    {
        "content": "<p>Oh, but this is the wrong page. This should now be a link to <a href=\"https://leanprover-community.github.io/mwe.html\">https://leanprover-community.github.io/mwe.html</a>, and you haven't updated the right file.</p>",
        "id": 198467301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167070
    },
    {
        "content": "<p>that way you can have the computer tell you what's important instead of trying to figure it out yourself :)</p>",
        "id": 198467302,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590167072
    },
    {
        "content": "<p>So we need to copy the wiki page to the community website and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> needs to update the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> linkifier so it points there as well.</p>",
        "id": 198467374,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590167110
    },
    {
        "content": "<p>I just did the copying (well I guess it's sitting as a PR waiting to be merged), and now <br>\n<a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-(MWE)\">https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-(MWE)</a><br>\nis blank except for a link to the real page</p>",
        "id": 198467516,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590167186
    },
    {
        "content": "<p>I don't see any PR at <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pulls\">https://github.com/leanprover-community/leanprover-community.github.io/pulls</a></p>",
        "id": 198467635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167264
    },
    {
        "content": "<p>(the first time I only made a branch and forgot to press the \"make a PR\" button)</p>",
        "id": 198467764,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590167339
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/25/files\">https://github.com/leanprover-community/leanprover-community.github.io/pull/25/files</a></p>",
        "id": 198467783,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590167349
    },
    {
        "content": "<p>merged</p>",
        "id": 198467905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128818\">@Syx Pek</span> , do you still have a question that we haven't answered?</p>",
        "id": 198468021,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590167480
    },
    {
        "content": "<p>sadly, github is experiencing errors again so the page didn't build: <a href=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a></p>",
        "id": 198468680,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590167733
    },
    {
        "content": "<p>No. Thanks for the reply! It is pretty frustrating when you want to prove stuff \"obviously true\" but it is quite enjoyable.</p>",
        "id": 198469009,
        "sender_full_name": "Syx Pek",
        "timestamp": 1590167891
    },
    {
        "content": "<p>Testing new linkifier: <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 198486025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590176466
    },
    {
        "content": "<p>yay! too bad github hasn't built the latest merge yet though</p>",
        "id": 198486078,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590176494
    },
    {
        "content": "<p>It's sad we can't deploy by hand</p>",
        "id": 198486258,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590176589
    }
]