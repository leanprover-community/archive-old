[
    {
        "content": "<p>Here is a short code sample that generates the error message in the post's title.   Why does it <br>\ngenerate this message,  and how do I get rid of it?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span>  <span class=\"n\">ExampleClass</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Rel</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p44</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ExampleClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">ExampleClass</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Rel</span>  <span class=\"n\">p44</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202376090,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593470106
    },
    {
        "content": "<p>It means Lean has no way to infer <code>M</code>.</p>",
        "id": 202376405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593470358
    },
    {
        "content": "<p>One way to fix it is to write <code>lemma test: Rel (p44 : M)</code>.</p>",
        "id": 202376494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593470412
    },
    {
        "content": "<p>Yes,  that worked,  and also, if I add p44 to the list of variables of type M  that works too.  <br>\n\"Lean has no way to infer that M is the type of p44\"  or <br>\n\"Lean has no way to infer the type of p44\"  <br>\nThere's really no other possibility in sight... but I see now what Lean needs,  thank you.</p>",
        "id": 202376749,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593470585
    },
    {
        "content": "<p>What is the meaning of \"placeholder\"  here?   Why doesn't it say \"don't know how to infer the type of a variable\" ?</p>",
        "id": 202376832,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593470646
    },
    {
        "content": "<p>It's not about Lean. That lemma that you wrote never mention <code>M</code> anywhere!</p>",
        "id": 202377203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593470934
    },
    {
        "content": "<p>And if you add <code>p44</code> to your list of variable it simply shadows what you have from <code>ExampleClass</code>.</p>",
        "id": 202377237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593470980
    },
    {
        "content": "<p>It doesn't say \"don't know how to infer the type of a variable\" because that's not the issue.</p>",
        "id": 202377350,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593471068
    },
    {
        "content": "<p>Maybe we could help you more if you could tell more about what you actually want to do. Maybe you minimized so much that it became meaningless.</p>",
        "id": 202377384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593471115
    },
    {
        "content": "<p>Rel p44 is just a Prop. It can't see M any more</p>",
        "id": 202377654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593471351
    },
    {
        "content": "<p>OK,  then,  I haven't understood what IS the issue.   I still don't know what \"placeholder means\" .  I thought that <br>\n\"open ExampleClass\"  would mean that I could mention p44  and Lean would understand it as the p44 declared in ExampleClass to be of type M.  So the lemma doesn't contain \"M\" literally but it does contain p44,  which is declared in ExampleClass to be of type M.  Something is wrong,  that is fixed by explicitly saying (p44:M) instead of just p44,  but I'm told inferring the type of a variable is not the issue.   Well,  I would like to understand exactly what is going on here....</p>",
        "id": 202381986,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593475199
    },
    {
        "content": "<p>If there is some information (a type or a term) that you don't want to provide explicitly, you can often write an \"_\" to signify that you want lean to try and work out what should go in place of \"_\" by its own. This is useful as sometimes what should go in the space is long or boring to work out, but clear from context, for example I can do this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I could have written <code>add_comm 1 2</code> but then I'd have to remember which way around the 1 and 2 should go in <code>add_comm</code>. This underscore is an explicit placeholder,   by using a placeholder instead lean can work out what should go in the underscore for this to work.</p>\n<p>Now in your example you haven't written any underscore explicitly, but there is information which is left implicit, and to lean there are terms which are left as placeholders, so lean has too try and work it out, but cannot, hence it complains that it can't fill in the blank (which is implicitly there).</p>",
        "id": 202383007,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593476022
    },
    {
        "content": "<p>You could think of it as if you wrote</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Rel</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p44</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>those types are the placeholders lean can't fill. In most situations its okay not to write explicitly the type of everything all the time, just not in this situation!</p>",
        "id": 202383213,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593476186
    },
    {
        "content": "<p>if i am understanding correctly:<br>\n<code>variables</code> are not passed to every function/lemma, only those that reference something of that name.<br>\nso in your definition of <code>test</code>, lean will look at <code>Rel</code> and <code>p44</code>, the type of which reference some type <code>M'</code>. because you're never referencing <code>M</code> anywhere in your lemma, <code>M</code> is not a parameter to <code>test</code>, and lean will not know that you want <code>M</code> for <code>M'</code>, and hence it will yield an error.</p>",
        "id": 202383240,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1593476227
    },
    {
        "content": "<p>note that even adding <code>M</code> to the parameter list will still yield an error, because lean isn't sure whether <code>M</code> is the <code>M'</code> that you want</p>",
        "id": 202383416,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1593476404
    },
    {
        "content": "<p>when adding the type annotation, you tell lean that <code>M' = M</code></p>",
        "id": 202383443,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1593476452
    },
    {
        "content": "<p>i think it says <code>placeholder</code> instead of <code>missing type</code> because <code>placeholder</code> is a more general concept that might also apply to other things like terms.</p>\n<p>patrick's comment about it not being about lean refers to the first step with <code>variables</code> i mentioned: lean can't even take a stab at figuring out that the type is <code>M</code> because <code>M</code> does not appear in the parameter list when it is not mentioned. once you explicitly add it to the parameter list, lean still complains, but this time because it doesn't just nilly-willy want to assume that <code>M' = M</code> :)</p>",
        "id": 202383940,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1593477012
    },
    {
        "content": "<p>So, the parameter M:Type that is mentioned in the class definition doesn't get passed automatically with the members of the class, in this case Rel and p44. I need to mention M in defining test. When I've successfully defined test, and I want to use it, I have to pass M as the first argument, e.g. test M. Then it's the passed M that will be used as the type of p44. That explains why you have to pass M as an argument to test. Are these statements correct?</p>",
        "id": 202383960,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1593477065
    },
    {
        "content": "<p>Well the parameter M is exactly that a parameter, it could vary if you had</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ExampleClass</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ExampleClass</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">ExampleClass</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"n\">Rel</span> <span class=\"n\">p44</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>lean can't tell if you want the <code>Rel</code> and <code>p44</code> from <code>ExampleClass M</code> or from <code>ExampleClass N</code>.</p>",
        "id": 202384498,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593477560
    },
    {
        "content": "<p>If <code>test</code> was enough to specify <code>M</code> it wouldn't be necessary to tell it: e.g. if you had</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"n\">p44</span> <span class=\"bp\">=</span><span class=\"n\">x</span><span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>it works fine as <code>x</code> is of type <code>M</code> so lean knows what <code>p44</code>'s type should be</p>",
        "id": 202384581,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593477667
    }
]