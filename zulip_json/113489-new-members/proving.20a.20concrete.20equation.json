[
    {
        "content": "<p>Could anyone give me a way to proving the following equation, which I need to establish first for a later theorem? <br>\nAs far as I know, the \"proof\" has largely to be a brute force computation. The vectors <code>a b c d</code> were also firstly found by a computer.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">circulant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">a</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">b</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">C</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">c</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">D</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">want</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">B</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">D</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">92</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">)</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247511799,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627503493
    },
    {
        "content": "<p>Perhaps split a big computation task into several small computation tasks?</p>",
        "id": 247513028,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627504166
    },
    {
        "content": "<p>You could do \"ext i j, fin_cases i; fin_cases j; simp [circulant]\". That would be the most brute force.</p>",
        "id": 247513699,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627504517
    },
    {
        "content": "<p>You would want to prove some helper lemmas that proving that a matrix equal to some numeral coerced to a matrix requires solely proving it along the diagonal and zero values along nondiagonal entries.</p>",
        "id": 247513816,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627504572
    },
    {
        "content": "<p>Why don't you instead prove that the product of circulant matrices is a circulant matrix?</p>",
        "id": 247513917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627504629
    },
    {
        "content": "<p>Then you only have to show a vector of 23 elements is <code>![1, 0, 0, ...]</code> rather than having to show equality of a matrix of 529 elements</p>",
        "id": 247514078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627504716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, any ideas for  generalizing circulant matrices away from fin using permutations?</p>",
        "id": 247514150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627504761
    },
    {
        "content": "<p>According to Wikipedia, using the matrix polynomial of the cyclic permutation matrix P</p>",
        "id": 247514490,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627504917
    },
    {
        "content": "<p>But that P is still over fin n, because of how it's sparse definition is.</p>",
        "id": 247514622,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627504973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247514078\">said</a>:</p>\n<blockquote>\n<p>Then you only have to show a vector of 23 elements is <code>![1, 0, 0, ...]</code> rather than having to show equality of a matrix of 529 elements</p>\n</blockquote>\n<p>Yeah! That's what I thought. I am trying to express A^2 and etc as a circulant v for some v first.</p>",
        "id": 247514653,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627504990
    },
    {
        "content": "<p>Alex, Wikipedia says that circulant matrices form a commutative algebra. Can you give it that instance?</p>",
        "id": 247514802,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627505047
    },
    {
        "content": "<p>Probably easier to do via the polynomial definition</p>",
        "id": 247514823,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627505060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247514823\">said</a>:</p>\n<blockquote>\n<p>Probably easier to do via the polynomial definition</p>\n</blockquote>\n<p>Not quite sure about this. I considered using this as the definition. But used the direct one enventually. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">circulant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 247514984,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627505140
    },
    {
        "content": "<p>Yakov, does using any permutation matrix that is an nth root of the identity work, rather than needing the cyclic permutation on fin n?</p>",
        "id": 247515096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627505197
    },
    {
        "content": "<p>Ah, I guess n has to match the cardinality of the index type</p>",
        "id": 247515243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627505277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247515096\">said</a>:</p>\n<blockquote>\n<p>Yakov, does using any permutation matrix that is an nth root of the identity work, rather than needing the cyclic permutation on fin n?</p>\n</blockquote>\n<p>I don't think so. For example, (1 2) ( 3 4 5) has order 6, but is not a cyclic permutation of order 6.</p>",
        "id": 247515541,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627505425
    },
    {
        "content": "<p>The polynomial definitions leads directly to the proof about the algebra. And encodes the sparsity better.</p>",
        "id": 247516020,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627505688
    },
    {
        "content": "<p>Eric, you can use fintype.card iota maybe?</p>",
        "id": 247516057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627505716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247516020\">said</a>:</p>\n<blockquote>\n<p>The polynomial definitions leads directly to the proof about the algebra. And encodes the sparsity better.</p>\n</blockquote>\n<p>Good point!</p>",
        "id": 247516139,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627505755
    },
    {
        "content": "<p>I think I am to prove those things if I have time, and then add them into mathlib.</p>",
        "id": 247516263,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627505802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>  Btw, I have already tried to run </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>to see what happens,<br>\nbut it hasn't finished yet.....</p>",
        "id": 247516417,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627505879
    },
    {
        "content": "<p>We have some stuff around matrix polynomials (because of proofs of cayley Hamilton) but not too much. I'm working on pushing some in, but have not been able to do any mathlib work due to real-life job. Just zulip.</p>",
        "id": 247516504,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627505902
    },
    {
        "content": "<p>Try to see if it works for just the first case on i first. That'll be 23 (+ 22) goals, instead of 23 squared.</p>",
        "id": 247516603,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627505949
    },
    {
        "content": "<p>I think I'm resigned to the fact that this only makes sense for fin n</p>",
        "id": 247516670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627505981
    },
    {
        "content": "<p>Any fintype that has the appropriate order</p>",
        "id": 247516756,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627506006
    },
    {
        "content": "<p>Ah, I will have a look at the matrix polynomial part implemented.</p>",
        "id": 247516919,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627506082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247516417\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span>  Btw, I have already tried to run </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>to see what happens,<br>\nbut it hasn't finished yet.....</p>\n</blockquote>\n<p>It hasn't finished... I am to kill it.</p>",
        "id": 247516993,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627506113
    },
    {
        "content": "<p>Is that part done by you? <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 247517135,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627506173
    },
    {
        "content": "<p>I don't have mathlib access to run it for a week</p>",
        "id": 247517456,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1627506352
    },
    {
        "content": "<p><code>  ext i j, fin_cases i, fin_cases j,</code> is ok</p>",
        "id": 247518058,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627506672
    },
    {
        "content": "<p>If I am facing the goal <code>(A * A + B * B + C * C + D * D) 0 0 = 92 0 0</code> or changing the <code>*</code> to <code>pow_two</code>, are there any tactics that will close such a goal in one or two steps?</p>",
        "id": 247518197,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627506746
    },
    {
        "content": "<p><code>#eval (A * A + B * B + C * C + D * D) 0 0</code> prints <code>92</code>. But I am not able to use <code>#eval</code> in the proof. Does anyone know whether there is any alternative tactic that will be helpful if the goal is <br>\n<code>example : (A * A + B * B + C * C + D * D) 0 0 = 92 := sorry</code></p>",
        "id": 247519436,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627507378
    },
    {
        "content": "<p>Can you reduce it to a statement about numbers?</p>",
        "id": 247519583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627507468
    },
    {
        "content": "<p><code>simp</code> should be able to do most of the heavy lifting here</p>",
        "id": 247519677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627507549
    },
    {
        "content": "<p>If using <code>simp</code>, I will kind of be stuck here </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">+</span> <span class=\"n\">D</span> <span class=\"bp\">*</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">92</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">circulant</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247519828,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627507667
    },
    {
        "content": "<p>Could anyone give some suggestions on proving a goal which is a direct computation that <code>#eval</code> can do? Is it possible to expand <code>finset.sum</code> as the form<code>...+...+...+...</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.gptf</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">circulant</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"mi\">1</span><span class=\"o\">]</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">a</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">b</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">C</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">c</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">D</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">circulant</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span>\n         <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n           <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span>\n         <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n           <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247560637,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627550379
    },
    {
        "content": "<p><code>simp only [dot_product, fin.sum_univ_succ],</code> expands the sum for you</p>",
        "id": 247561638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627551068
    },
    {
        "content": "<p>A way I can solve the first example without expanding the sum is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span>\n         <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n           <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span>\n         <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n           <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n  <span class=\"n\">dot_product</span>\n  <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">},</span>\n  <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec_trivial</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247561930,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627551283
    },
    {
        "content": "<p>I first use <code>#eval</code> outside the proof, and then copy the result into the proof to simplify terms.</p>",
        "id": 247562042,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627551377
    },
    {
        "content": "<p>Is it possible to add a tactic that does <code>#eval</code>? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 247562068,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627551417
    },
    {
        "content": "<p>What specifically did you eval?</p>",
        "id": 247562112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627551453
    },
    {
        "content": "<p>I did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span>\n         <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n           <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and the other.</p>",
        "id": 247562257,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627551576
    },
    {
        "content": "<p>It would certainly be helpful if there was a tactic to convert  <code>![a, b, c, d] (-i)</code> into <code>![a, d, c, b]</code></p>",
        "id": 247562633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627551900
    },
    {
        "content": "<p>You can use <code>norm_fin</code> to turn <code>-12 : fin 23</code> into <code>11</code></p>",
        "id": 247562817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552068
    },
    {
        "content": "<p>It is not hard to prove that<br>\n<code>example : ![(1 : ℚ), 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1] (-1) = 1 := rfl</code><br>\nBut I don't know how to simplify or rewrite the LHS as the RHS in a more complicated expression.<br>\nDo you have a clue?</p>",
        "id": 247562890,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627552113
    },
    {
        "content": "<p>doesn't <code>simp</code> prove that <code>![a, b, c, d] 3 = d</code>?</p>",
        "id": 247562925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552162
    },
    {
        "content": "<p>I'm aware that <code>rfl</code> does it but the goal here is for <code>simp</code> to discover the rhs on its own</p>",
        "id": 247562954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552194
    },
    {
        "content": "<p>Ah, <code>simp</code> closes that <code>example {α} (a b c d : α): ![a, b, c, d] 3 = d := by simp</code>. Perhaps I should first use <code>norm_fin</code>.</p>",
        "id": 247563049,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627552260
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n<span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">norm_fin</span><span class=\"o\">,}</span>\n</code></pre></div>\n<p><code>norm_fin</code> won't change <code>-1</code> in the goal <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 247563261,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627552435
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 247563340,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627552473
    },
    {
        "content": "<p><code>example : (-1 : fin 23) = 22 := by norm_fin</code> This also dose not work.</p>",
        "id": 247563523,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627552608
    },
    {
        "content": "<p>I don't think norm_fin knows about subtraction</p>",
        "id": 247563665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627552717
    },
    {
        "content": "<p>Hm, it seems to be a gap in <code>norm_fin</code>, probably because <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> informed me only yesterday that fin subtraction isn't broken anymore</p>",
        "id": 247563698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552731
    },
    {
        "content": "<p>that's awkward; you can use <code>change (-1 : fin 23) with 22</code> but that's kind of verbose</p>",
        "id": 247563763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552778
    },
    {
        "content": "<p>Yes, in a more involved computation. Doing all the <code>change (-1 : fin 23) with 22</code>type things manually is not practical.</p>",
        "id": 247563962,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627552896
    },
    {
        "content": "<p>well, you should have more lemmas to simplify this to something not using subtraction anyway</p>",
        "id": 247564093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552978
    },
    {
        "content": "<p>rather than just trying to power through the whole thing with <code>simp</code> et al</p>",
        "id": 247564118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627552993
    },
    {
        "content": "<p>there aren't any tactics specifically designed for matrix computations</p>",
        "id": 247564157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627553030
    },
    {
        "content": "<p>so you will have to either wait for the existing tactics to be upgraded, write them yourself, or write a lemma that says what you want</p>",
        "id": 247564253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627553083
    },
    {
        "content": "<p>since we know that <code>rfl</code> closes the goal</p>",
        "id": 247564266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627553096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247564093\">said</a>:</p>\n<blockquote>\n<p>well, you should have more lemmas to simplify this to something not using subtraction anyway</p>\n</blockquote>\n<p>That is a good suggestions. I will try to write more lemmas first.</p>",
        "id": 247564317,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627553132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247562633\">said</a>:</p>\n<blockquote>\n<p>It would certainly be helpful if there was a tactic to convert  <code>![a, b, c, d] (-i)</code> into <code>![a, d, c, b]</code></p>\n</blockquote>\n<p>Can we extend <code>norm_num</code> to do so somehow? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 248360236,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628088439
    },
    {
        "content": "<p>Usually, <code>norm_num</code> extensions deal with normalizing numerical values, which can indicate many different types (as long as there is a <code>0</code> and <code>+</code>, in fact).</p>",
        "id": 248360489,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628088530
    },
    {
        "content": "<p>And <code>norm_num</code> is helpful because it does VM calculation to help it decide what proofs to create.</p>",
        "id": 248360563,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628088561
    },
    {
        "content": "<p>Is it possible to add some lemma or extend <code>simp</code> or <code>norm_num</code> to rewrite things like<br>\n<code>(λ (j : fin 23), ![a,  b, c, d, ...] (i - j))</code>, where <code>i</code> is a given number (e.g. 0 or 1 or 4)?</p>",
        "id": 248360853,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628088679
    },
    {
        "content": "<p>In this matrix rearrangement case, there are no calculations, just rewrites. So you could write a lemma to do so.</p>",
        "id": 248360920,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628088706
    },
    {
        "content": "<p>Ah, I see, you want to do it for arbitrary vectors, and just have a rearrangement of terms. And the underlying calculation is some modular arithmetic.</p>",
        "id": 248361067,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628088759
    },
    {
        "content": "<p>Yes, otherwise I need to write 23</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">A_0_dot_a</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">23</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where <code>def a : fin 23 → ℚ :=  ![ 1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1,  1,  1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  1]</code></p>",
        "id": 248361245,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628088840
    },
    {
        "content": "<p>and actually 23 lemmas for each vector that I need.</p>",
        "id": 248361363,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628088876
    },
    {
        "content": "<p>I guess first step would be to extend <code>norm_fin</code> to deal with negatives</p>",
        "id": 248361397,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628088895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/248360236\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/247562633\">said</a>:</p>\n<blockquote>\n<p>It would certainly be helpful if there was a tactic to convert  <code>![a, b, c, d] (-i)</code> into <code>![a, d, c, b]</code></p>\n</blockquote>\n<p>Can we extend <code>norm_num</code> to do so somehow? <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>\n</blockquote>\n<p>In my opinion the way to solve this would be to have a tactic that converts <code>f</code> where <code>f : fin n → A</code> and <code>n</code> is a numeric literal into <code>![f 0, f 1, ..., f (n - 1)]</code>, at which point <code>norm_fin</code> could likely simplify <code>f 0</code> etc.</p>",
        "id": 248362020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628089163
    },
    {
        "content": "<p>There may be a way that uses <code>norm_fin</code>, but my proof does not</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">A_5_dot_a</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span><span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248362062,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628089179
    },
    {
        "content": "<p>Can you write the correct form for this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec_cons_apply_neg</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 248362316,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628089248
    },
    {
        "content": "<p>Then you won't need any tactic</p>",
        "id": 248362321,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628089253
    },
    {
        "content": "<p>Writing an <code>expand_fin f</code> tactic that does as I describe above might be a good exercise in metaprogramming</p>",
        "id": 248362401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628089287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/248362316\">said</a>:</p>\n<blockquote>\n<p>Can you write the correct form for this lemma?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec_cons_apply_neg</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't quite understand why this can be helpful. There has not to be <code>(-i)</code>, it can be <code>(5-i)</code> for example.</p>",
        "id": 248362648,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628089392
    },
    {
        "content": "<p>Yes, I understand that you have <code>(j - i)</code> in your case. If you write the correct <code>(-i)</code> lemma then you will be able to use that to show the <code>(j - i)</code> case.</p>",
        "id": 248362909,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628089498
    },
    {
        "content": "<p>I currently don't know how to write a tactic. I guess having a tactic that does <code>#eval</code> may be more helpful in general.</p>",
        "id": 248362963,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628089517
    },
    {
        "content": "<p>The tactic doing <code>#eval</code> doesn't help if it can't also provide a proof term that the evaluation is correct.</p>",
        "id": 248363047,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628089554
    },
    {
        "content": "<p><code>#eval</code> does correct evaluations, doesn't it?</p>",
        "id": 248363208,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628089618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/248362316\">said</a>:</p>\n<blockquote>\n<p>Can you write the correct form for this lemma?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec_cons_apply_neg</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I am not sure what is the correct term (in the sense that it makes the lemma helpful for the following problems) for the underscore.</p>",
        "id": 248363924,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628089964
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">acc'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">acc'</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">acc'</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">acc'.rec_on</span> <span class=\"n\">string</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"s2\">\"\"</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">cc</span><span class=\"o\">⟩</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 248363995,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628090003
    },
    {
        "content": "<p>Try that</p>",
        "id": 248364005,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628090006
    },
    {
        "content": "<p><code>#eval</code> reports error <code>vm check failed: is_external(o) (possibly due to incorrect axioms, or sorry)</code></p>",
        "id": 248364510,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628090201
    },
    {
        "content": "<p>So <code>#eval</code> doesn't always work, even if the definitions are accepted by the kernel</p>",
        "id": 248364573,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628090225
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec_cons_apply_neg_zero</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec_cons_apply_neg_one</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 248364769,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628090316
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248365319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628090550
    },
    {
        "content": "<p>I just tried to fix <code>norm_fin</code>; my conclusion is that the easiest way to do so is probably to normalize <code>fin</code> to an integer instead of to a natural</p>",
        "id": 248365434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628090613
    },
    {
        "content": "<p>Did you add something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">_root_.has_neg.neg</span> <span class=\"bp\">.</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fin.has_neg</span> <span class=\"bp\">%%</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 248365568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628090663
    },
    {
        "content": "<p>Would <code>norm_fin</code> be helpful for proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">A_5_dot_a</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span><span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>?<br>\nAs <code>j</code> is a variable, I didn't see what <code>norm_fin</code> can do for us.</p>",
        "id": 248365708,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628090721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/248364573\">said</a>:</p>\n<blockquote>\n<p>So <code>#eval</code> doesn't always work, even if the definitions are accepted by the kernel</p>\n</blockquote>\n<p>I understand that <code>#eval</code> can fail in some cases, but when it fails, I think it just means we shouldn't use it in that case.</p>",
        "id": 248366866,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628091254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, <code>normalize_fin.sub</code> is hard to express with naturals</p>",
        "id": 248366946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628091301
    },
    {
        "content": "<p>Use the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fin.neg_succ_eq</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fin.last</span> <span class=\"n\">_</span> <span class=\"bp\">-</span> <span class=\"n\">i.cast_succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_neg</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_last</span><span class=\"o\">,</span>\n             <span class=\"n\">fin.coe_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_cast_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.add_sub_assoc</span> <span class=\"o\">(</span><span class=\"n\">nat.le_succ_of_le</span> <span class=\"n\">i.is_lt.le</span><span class=\"o\">),</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">nat.add_sub_assoc</span> <span class=\"n\">i.is_lt.le</span><span class=\"o\">,</span> <span class=\"n\">nat.add_mod</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_self</span><span class=\"o\">,</span>\n      <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">nat.mod_mod</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248367235,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628091460
    },
    {
        "content": "<p>And there, you know that the subtraction nat friendly.</p>",
        "id": 248367316,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628091487
    },
    {
        "content": "<p>I don't know whether that was aimed at me or Alex. I pushed my half-baked attempt at <a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/norm_fin_sub\">branch#eric-wieser/norm_fin_sub</a>, but do not intend to continue trying</p>",
        "id": 248368785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628092197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408694\">Alex Zhang</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20a.20concrete.20equation/near/248365708\">said</a>:</p>\n<blockquote>\n<p>Would <code>norm_fin</code> be helpful for proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">A_5_dot</span> <span class=\"o\">:</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">23</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span><span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>?<br>\nAs <code>j</code> is a variable, I didn't see what <code>norm_fin</code> can do for us.</p>\n</blockquote>\n<p>Eric, would <code>norm_fin</code> be useful for lemmas like this? <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span><br>\nI currently have to write 23 lemmas for each <code>a</code>.</p>",
        "id": 248369134,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628092385
    },
    {
        "content": "<p>things like <code>#eval (cir a) a</code> take an amazingly long time.</p>",
        "id": 248369745,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1628092716
    },
    {
        "content": "<p>Using integers will cause problems with the other reductions. Instead, I was thinking of reducing <code>a - b</code> in fin to <code>a - b</code> as naturals when <code>a &gt;= b</code>, and when <code>a &lt; b</code> then just fully reduce it to <code>c := ((a - b : fin n) : nat)</code> and prove <code>a + c = b + k * n</code></p>",
        "id": 248373437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628094425
    },
    {
        "content": "<p>Will this work with <code>(-a) - (-b)</code>?</p>",
        "id": 248373610,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628094514
    },
    {
        "content": "<p>it goes one step at a time. <code>-a</code> would get reduced the same as <code>0 - a</code></p>",
        "id": 248373655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628094539
    }
]