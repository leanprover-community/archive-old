[
    {
        "content": "<p>How would you define a reduced residue class module n in lean? After defining it I also want to be able to multiply the generic elements of the residue class together (part of a proof for Euler's theorem)</p>",
        "id": 191278733,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584726882
    },
    {
        "content": "<p><code>k % n</code>?</p>",
        "id": 191279378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727159
    },
    {
        "content": "<p>Or <code>(k : zmod n)</code></p>",
        "id": 191279400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727169
    },
    {
        "content": "<p>Note that Euler's theorem was just added to mathlib this week</p>",
        "id": 191279437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727187
    },
    {
        "content": "<p>In mathlib, zmod is in the file \" data \" !</p>",
        "id": 191279556,
        "sender_full_name": "orlando",
        "timestamp": 1584727216
    },
    {
        "content": "<p>thanks! I'm just trying to prove it myself as an exercise.  <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>  can you please clarify how what you wrote gets the desired result? I want a set of numbers that are congruent to all values &lt; n that don't share a common factor with n. Thanks!</p>",
        "id": 191280337,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584727532
    },
    {
        "content": "<p>There are various ways to approach this.</p>\n<ol>\n<li><code>units (zmod n)</code></li>\n<li><code>{ k : nat | k &lt; n \\and k.coprime n }</code></li>\n<li><code>(finset.range n).filter $ assume k, k.coprime n</code></li>\n<li>...</li>\n</ol>",
        "id": 191281171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584727899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269735\">Brian Jiang</span> <a href=\"#narrow/stream/113489-new-members/topic/residue.20class/near/191280337\" title=\"#narrow/stream/113489-new-members/topic/residue.20class/near/191280337\">said</a>:</p>\n<blockquote>\n<p>I want a set of numbers that are congruent to all values &lt; n that don't share a common factor with n. Thanks!</p>\n</blockquote>\n<p>The issue is that in Lean there are multiple ways to construct such a collection, and the best way will probably depend on what you want to do with it. It's like asking the best way to write a computer program which stores a graph -- there are many ways, and the best way depends on what you want to do with the graphs you store.</p>",
        "id": 191281766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584728133
    },
    {
        "content": "<p>if I define the residue class as follows: <br>\n<code>def reduced_residue_class (n: nat):={ k : nat | k &lt; n \\and k.coprime n }</code></p>",
        "id": 191407437,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584899258
    },
    {
        "content": "<p>is there a way I can write a theorem regarding the number of elements in this set?</p>",
        "id": 191407479,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584899287
    },
    {
        "content": "<p>I would also like to take out elements from this set and multiply them together</p>",
        "id": 191407503,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584899338
    },
    {
        "content": "<p>Your definition is a slightly artificial way to think about this concept. The naturals already have a multiplication on them, and you are proposing defining another one. Mathematically a more natural way to do this would be to define your set to be the units of the ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/n\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>, and this would automatically inherit a group structure.</p>",
        "id": 191417399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584912931
    },
    {
        "content": "<p>If you want to roll your own then you will have to prove that if a and b are coprime to n then so is their product.</p>",
        "id": 191417414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584912962
    },
    {
        "content": "<p>If you want to use mathlib's pre-rolled repesentation of this type then you have access to theorems like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">units_equiv_coprime</span>\n</pre></div>",
        "id": 191417914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584913638
    },
    {
        "content": "<p>is there a way with my definition to set a variable equal to the product of all the elements in the set?</p>",
        "id": 191418065,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584913837
    },
    {
        "content": "<p>that is what I meant earlier by multiplication, not to show if the product of two elements is still inside the set; sorry if that wasn't clear</p>",
        "id": 191418079,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584913878
    },
    {
        "content": "<p>Are you going to roll your own, or are you going to use the inbuilt one?</p>",
        "id": 191418094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584913904
    },
    {
        "content": "<p>on my own, if possible</p>",
        "id": 191418137,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584913934
    },
    {
        "content": "<p>also, is there a way to get the size of a set?</p>",
        "id": 191418236,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584914139
    },
    {
        "content": "<p>also, is there a way to get the size of a set?</p>",
        "id": 191418242,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584914149
    },
    {
        "content": "<p>my current intention is to take a reduced residue class made up of (r1, r2, ...rn)</p>",
        "id": 191418629,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584914709
    },
    {
        "content": "<p>If you prove it's finite, you can have a finite cardinal: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/data/set/finite.html\">https://leanprover-community.github.io/mathlib_docs/data/set/finite.html</a></p>",
        "id": 191418636,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1584914731
    },
    {
        "content": "<p>and show that the product r1r2...rn is congruent to (ar1)(ar2)...(arn)</p>",
        "id": 191418645,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584914750
    },
    {
        "content": "<p>@Ryan Lahfa : what does the finite cardinal do?</p>",
        "id": 191418760,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1584914906
    }
]