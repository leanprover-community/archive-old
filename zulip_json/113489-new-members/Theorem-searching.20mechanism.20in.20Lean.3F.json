[
    {
        "content": "<p>In Coq, when I wish to invoke a theorem that I believe should already be in the stdlib, I can use the <code>Search</code> vernacular as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Search</span> <span class=\"o\">({?</span><span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">+</span> <span class=\"o\">{~</span> <span class=\"o\">?</span><span class=\"n\">P</span><span class=\"o\">}).</span> <span class=\"c\">(* Searches for all results of decidable propositions in the stdlib *)</span>\n</pre></div>\n\n\n<p>Is there a similar mechanism in Lean by chance?</p>",
        "id": 189007296,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582626552
    },
    {
        "content": "<p><code>by library_search</code> is probably the most reliable tool for this right now</p>",
        "id": 189008069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582627245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Theorem-searching.20mechanism.20in.20Lean.3F/near/189008069\" title=\"#narrow/stream/113489-new-members/topic/Theorem-searching.20mechanism.20in.20Lean.3F/near/189008069\">said</a>:</p>\n<blockquote>\n<p><code>by library_search</code> is probably the most reliable tool for this right now</p>\n</blockquote>\n<p>Thanks! I suppose this is just an ordinary tactic which tries to apply a lemma from the stdlib? And where can I learn more about it?</p>",
        "id": 189008123,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582627308
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#library_search</a></p>",
        "id": 189008204,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1582627344
    },
    {
        "content": "<p>There's now a fancier link to the tactics doc isn't there?</p>",
        "id": 189008259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582627406
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search</a></p>",
        "id": 189008329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582627466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Theorem-searching.20mechanism.20in.20Lean.3F/near/189008329\" title=\"#narrow/stream/113489-new-members/topic/Theorem-searching.20mechanism.20in.20Lean.3F/near/189008329\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search</a></p>\n</blockquote>\n<p>This is very useful, I did not realize there was a dedicated webpage for mathlib documentation.</p>\n<p>Bookmarked for future reference</p>",
        "id": 189008461,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582627590
    },
    {
        "content": "<p>It's quite new. Rob Lewis and others put quite a lot of effort into it. Other goodies are available <a href=\"https://leanprover-community.github.io/\" target=\"_blank\" title=\"https://leanprover-community.github.io/\">here</a>. I find that page quite useful.</p>",
        "id": 189008517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582627659
    },
    {
        "content": "<p>Can tactics ask Lean in which file (+ line number?) a certain statement is?</p>",
        "id": 189017124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582635697
    },
    {
        "content": "<p>Yes.</p>",
        "id": 189017131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582635715
    },
    {
        "content": "<p>So <code>library_search</code> could print a link to the docs in the message window?</p>",
        "id": 189017178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582635732
    },
    {
        "content": "<p>leancrawler is doing that for instance.</p>",
        "id": 189017179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582635732
    },
    {
        "content": "<p>I'm not familiar with Coq's <code>Search</code>, but it kind of looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#find\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/commands.html#find\"><code>#find</code></a>.</p>",
        "id": 189023123,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582640558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Theorem-searching.20mechanism.20in.20Lean.3F/near/189023123\" title=\"#narrow/stream/113489-new-members/topic/Theorem-searching.20mechanism.20in.20Lean.3F/near/189023123\">said</a>:</p>\n<blockquote>\n<p>I'm not familiar with Coq's <code>Search</code>, but it kind of looks like <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#find\" target=\"_blank\" title=\"https://leanprover-community.github.io/mathlib_docs/commands.html#find\"><code>#find</code></a>.</p>\n</blockquote>\n<p>Yes, that looks like what I am looking for. Thank you!</p>",
        "id": 189023166,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582640610
    },
    {
        "content": "<p>Coq's search is much better than <code>find</code>, in that it's far faster and (I think) can find declarations that are outside the current environment.</p>",
        "id": 189023216,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582640643
    },
    {
        "content": "<p>I agree with the replies above that usually <code>library_search</code> (or its parent <code>suggest</code>) are much more useful in practice.</p>",
        "id": 189023267,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582640666
    }
]