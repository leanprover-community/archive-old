[
    {
        "content": "<p>I am trying to take the product along the rows and the columns of a matrix of variables. This is what I tried, but I get a type mismatch.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- trying to work with a mxn matrix.</span>\n\n<span class=\"kd\">parameter</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">rows</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">cols</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span> <span class=\"n\">rows</span> <span class=\"bp\">×</span> <span class=\"n\">cols</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">101</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">rows</span> <span class=\"bp\">→</span> <span class=\"n\">cols</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">rows</span>\n<span class=\"k\">#check</span> <span class=\"n\">entries</span> <span class=\"n\">i</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">cols</span>\n<span class=\"k\">#check</span> <span class=\"n\">cols.prod</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">row_prod</span> <span class=\"o\">:</span> <span class=\"n\">rows</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cols.prod</span>  <span class=\"o\">(</span><span class=\"n\">entries</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   cols.prod (entries i)</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   entries i</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   ↥cols → R</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ℕ → R</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Before using <code>finset.range</code>, I tried to use <code>zmod</code> and <code>fin</code>, both of which gave other type mismatches. I don't know if <code>finset.range</code> is the correct thing to use here, but I found some discussion in the archive where it is used in the context of Witt vectors.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"c1\">-- To understand finset.sum</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">finset.sum</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"c1\">-- type mismatch at application</span>\n<span class=\"c1\">--   finset.sum (zmod 4)</span>\n<span class=\"c1\">-- term</span>\n<span class=\"c1\">--   zmod 4</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   Type : Type 1</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   finset ?m_1 : Type ?</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">q1</span> <span class=\"o\">:=</span> <span class=\"n\">finset.sum</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">p1</span>\n<span class=\"c1\">-- similar error as above.</span>\n\n<span class=\"c1\">-- finset.range</span>\n<span class=\"kd\">def</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">q2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>  <span class=\"n\">p2</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p</span>\n<span class=\"k\">#check</span> <span class=\"n\">q</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p1</span>\n<span class=\"k\">#check</span> <span class=\"n\">q1</span>\n<span class=\"k\">#check</span> <span class=\"n\">p2</span>\n<span class=\"k\">#check</span> <span class=\"n\">q2</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">q2</span>\n<span class=\"c1\">-- 6</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Thanks.</p>",
        "id": 246391421,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1626632348
    },
    {
        "content": "<p>The canonical m x n matrix type is <code>matrix (fin m) (fin n)</code>, but in principle your approach of using <code>finset.range m</code>  should work.</p>",
        "id": 246391696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626632781
    },
    {
        "content": "<p>A few comments:</p>\n<ul>\n<li>We generally recommend avoiding using parameters as they often confuse things more than they help, you might be better off just using variables.</li>\n<li>In mathlib there is already a type of matrices that is likely useful to you</li>\n<li>for rows and cols you should use the type <code>fin n</code> or <code>fin m</code> rather than finset.range which returns a list, this is then coerced into a type which adds those arrows everywhere</li>\n</ul>",
        "id": 246391699,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626632794
    },
    {
        "content": "<p>The arguments to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum\">docs#finset.sum</a> do not match what you're passing. You want <code>(finset.univ : finset (zmod 4))</code> in place of <code>zmod 4</code></p>",
        "id": 246391752,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626632894
    },
    {
        "content": "<p>Or better, use the syntax for that <code> ∑ i : zmod 4, p i</code></p>",
        "id": 246391765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626632933
    },
    {
        "content": "<p>This hopefully does what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.operations</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- trying to work with a mxn matrix.</span>\n\n<span class=\"kd\">parameter</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">parameter</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">rows</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">cols</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span> <span class=\"n\">rows</span> <span class=\"bp\">×</span> <span class=\"n\">cols</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">101</span><span class=\"o\">)</span>\n<span class=\"k\">#print</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">entries</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">rows</span> <span class=\"n\">cols</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span>  <span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">rows</span>\n<span class=\"k\">#check</span> <span class=\"n\">entries</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">cols</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">row_prod</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">rows</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">∏</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">entries</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">row_prod</span>\n\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- we can even do some \"computation\" to check everything makes sense</span>\n\n\n<span class=\"bp\">#</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">row_prod</span><span class=\"o\">,</span> <span class=\"n\">entries</span><span class=\"o\">,</span> <span class=\"n\">fin.prod_univ_succ</span><span class=\"o\">]</span> <span class=\"n\">row_prod</span> <span class=\"mi\">2</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 246391873,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1626633109
    },
    {
        "content": "<p>Thanks. This is what I am looking for. I did not  understand what the last line is; couldn't find <code>#simp</code> in <em>Mathematics in Lean</em> and <em>Theorem proving in Lean</em>. Is it to run the <code>simp</code> tactic on some goal and print the result?</p>",
        "id": 246393792,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1626635842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"345924\">@Manoj Kummini</span> I hadn't seen this before -- that's a cool command to have.  Here's the documentation: <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##simp\">https://leanprover-community.github.io/mathlib_docs/commands.html##simp</a></p>",
        "id": 246393944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636021
    },
    {
        "content": "<p>(I'd forgotten about <code>#where</code>... I was thinking recently about how nice it would be to be able to see the current namespace and variable declarations.)</p>",
        "id": 246393979,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626636118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.2Eprod/near/246393944\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"345924\">Manoj Kummini</span> I hadn't seen this before -- that's a cool command to have.  Here's the documentation: <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##simp\">https://leanprover-community.github.io/mathlib_docs/commands.html##simp</a></p>\n</blockquote>\n<p>Thank you.</p>",
        "id": 246406657,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1626654674
    }
]