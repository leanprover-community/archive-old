[
    {
        "content": "<p>I couldn't find a tactic to rewrite the current goal. I can use <code>have</code> but this seems to be a bit verbose. E.g. like in the following example<br>\n``<br>\n  def is_tt : bool → Prop <br>\n  | ff := false<br>\n  | tt := true</p>\n<p>-- BEGIN<br>\n  theorem cons : ¬ (tt = ff) :=<br>\n  begin<br>\n    assume h,<br>\n    have aux : is_tt ff,<br>\n    rewrite← h,<br>\n    constructor,<br>\n    exact aux,<br>\n  end</p>",
        "id": 210754271,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600700658
    },
    {
        "content": "<p>You need triple <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 210754358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600700694
    },
    {
        "content": "<p>Is there a tactic to rewrite the current goal? I can use <code>have</code> but this seems to be a bit verbose. E.g.</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 210754407,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600700721
    },
    {
        "content": "<p>you can edit your posts too</p>",
        "id": 210754552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600700777
    },
    {
        "content": "<p><code>rw</code> will rewrite in the current goal. Could you give an example of what you would like to write?</p>",
        "id": 210754683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600700850
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_tt</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210754788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600700883
    },
    {
        "content": "<p>by the way you can prove this theorem using simply <code>theorem cons : ¬ (tt = ff).</code></p>",
        "id": 210754816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600700890
    },
    {
        "content": "<p>which is equivalent to Kevin's proof</p>",
        "id": 210754855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600700910
    },
    {
        "content": "<p>but I can see you are going for the proof that doesn't use the builtin knowledge that cases has about injectivity of constructors</p>",
        "id": 210754933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600700949
    },
    {
        "content": "<p>Rewriting <code>h : X = Y</code> with X a variable can sometimes be done more powerfully in Lean by using <code>subst h</code> or <code>cases h</code>. If these work they might globally replace X by Y</p>",
        "id": 210755092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701014
    },
    {
        "content": "<p>I am always looking for places to do <code>cases</code> on stuff</p>",
        "id": 210755116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701027
    },
    {
        "content": "<p>I would suggest presenting your proof like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_tt</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">≠</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">is_tt</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210755136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600701039
    },
    {
        "content": "<p>you can also insert <code>change true</code> before the <code>trivial</code> to make it clearer</p>",
        "id": 210755174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600701059
    },
    {
        "content": "<p>inb4 Mario </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_tt</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 210755225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> the equation compiler can prove your theorem all by itself.</p>",
        "id": 210755249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/rewrite.20goal/near/210754816\">said</a>:</p>\n<blockquote>\n<p>by the way you can prove this theorem using simply <code>theorem cons : ¬ (tt = ff).</code></p>\n</blockquote>",
        "id": 210755281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600701109
    },
    {
        "content": "<p>dammit I haven't got my glasses on</p>",
        "id": 210755331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701123
    },
    {
        "content": "<p>I missed the full stop :-)</p>",
        "id": 210755363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701130
    },
    {
        "content": "<p>touch\\'e</p>",
        "id": 210755376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701137
    },
    {
        "content": "<p>My VS Code font is a lot bigger than my Zulip font :-)</p>",
        "id": 210755425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600701159
    },
    {
        "content": "<p>I know that I can prove it directly but I just wanted to show how to prove it from basic principles.</p>",
        "id": 210757640,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1600702042
    },
    {
        "content": "<p>Kevin should be familiar with this from his blog post <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">no confusion over no_confusion</a></p>",
        "id": 210758613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600702461
    }
]