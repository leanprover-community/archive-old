[
    {
        "content": "<p><code>set.nonempty_insert</code> and <code>set.insert_nonempty</code> have the exact same type and the exact same implementation (<code>insert_nonempty</code> uses <code>mem_insert a s</code> instead of <code>or.inl rfl</code> but <code>mem_insert a s := or.inl rfl</code>). The only difference is that <code>nonempty_insert</code> is marked with <code>@[simp]</code>. Why are there two of them?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n\n<span class=\"c1\">-- Both defined in `data.set.basic`.</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.nonempty_insert</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.insert_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 286992474,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1655859707
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty_insert\">docs#set.nonempty_insert</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.insert_nonempty\">docs#set.insert_nonempty</a></p>",
        "id": 286992626,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655859851
    },
    {
        "content": "<p>This seems like a mistake, I'm on it</p>",
        "id": 286992751,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655860009
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14884\">#14884</a></p>",
        "id": 286993036,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655860293
    }
]