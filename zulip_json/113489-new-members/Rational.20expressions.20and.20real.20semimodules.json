[
    {
        "content": "<p>Given a semimodule M over the reals, I'd like to form an expression like <code>(1/2)m+(1/2)n</code>. After a bit of puzzling, I've come up with the following approach. Is this the \"right\" way of going about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_scalar_rat</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">q</span> <span class=\"n\">m</span><span class=\"o\">,(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">m</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">r</span><span class=\"bp\">•</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"bp\">•</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>Should I be surprised that mathlib doesn't automagically know that a semimodule over ℝ is also a semimodule over  ℚ ?</p>\n<p>(For a bit more context, what I'm actually doing is trying to show</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ᵇ</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">+</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">•|</span><span class=\"n\">f</span><span class=\"bp\">-</span><span class=\"n\">g</span><span class=\"bp\">|</span>\n</code></pre></div>\n<p>)</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 223702555,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611350736
    },
    {
        "content": "<p>Is there a reason that you don't want to use <code>1/2</code> as real number?</p>",
        "id": 223703045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611350994
    },
    {
        "content": "<p>I got a bit scared when I wrote:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And got the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">classical.choice'</span>\n</code></pre></div>\n<p>But perhaps that's nothing to worry about?</p>",
        "id": 223703259,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611351094
    },
    {
        "content": "<p>Add <code>noncomputable theory</code> to the top of your file</p>",
        "id": 223703308,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  I already have that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Gives the error <code>code generation failed, VM does not have code for 'classical.choice'</code></p>",
        "id": 223703465,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611351190
    },
    {
        "content": "<p>What would you like that <code>#eval </code> to return? Real numbers are infinite cauchy sequences after all!</p>",
        "id": 223703535,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351225
    },
    {
        "content": "<p>If you want to know that type of something / check it is written correctly, you can use <code>#check</code> when you write <code>#eval</code> you are asking lean to try and apply the definition of division in the real numbers to evaluate that expression.</p>",
        "id": 223703729,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  Fair point, but shouldn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>return <code>1</code>?</p>",
        "id": 223703754,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611351311
    },
    {
        "content": "<p>mathlib's real numbers aren't computable, so there's no code Lean can <code>#eval</code>. There's an open issue about computable reals here <a href=\"https://github.com/leanprover-community/mathlib/issues/1038\">#1038</a>.</p>",
        "id": 223703943,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611351404
    },
    {
        "content": "<p>There are several different ideas of computation, lean can prove that <code>2 * (1/2) = 1</code> using tactics like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#norm_num\">tactic#norm_num</a> but when you ask it to <code>#eval</code> you are asking it to really evaluate that expression using the mathematical definition of what <code>2, *, 1, /</code> mean in the reals</p>",
        "id": 223704022,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351461
    },
    {
        "content": "<p>Okay. <code>(1/2:ℝ)•m + (1/2:ℝ)•n</code> isn't producing any error messages, so I'm happy to go with that. I was just trying to check that <code>(1/2:ℝ)</code> wasn't zero, or something unintended like that.</p>",
        "id": 223704333,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611351601
    },
    {
        "content": "<p>This definition reduces down to something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cau_seq.completion.Cauchy.has_inv\">docs#cau_seq.completion.Cauchy.has_inv</a>, which splits into cases on whether the Cauchy sequence converges to 0 or not, this is not something lean can check in finite time! So the axiom of choice is used to make this definition.</p>",
        "id": 223704656,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351743
    },
    {
        "content": "<p>Yeah it can be harder to sanity check things involving reals because of this, you can use norm_num to check some things though like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 223704844,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351838
    },
    {
        "content": "<p>Also I was thinking Lean might be able to automatically coerce a rational to a real in this context.</p>",
        "id": 223705821,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611352268
    },
    {
        "content": "<p>In a way thats what the norm_num version is doing, but you wouldn't want to define the mathemtical notion of division by saying \"x /y in the reals is := if x and y are integers then take the rational x / y otherwise do the cauchy sequence thing\", that would be a nightmare to prove properties of.<br>\n<code>#eval</code> will always try and evaluate the actual definition of things, which is not always the best way to calculate it.</p>",
        "id": 223706330,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611352525
    },
    {
        "content": "<p>I meant, I thought Lean might be able to automatically coerce a rational to a real in the context of semimodule scalar multiplication. But not to worry. thanks for your help.</p>",
        "id": 223707265,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1611352997
    },
    {
        "content": "<p>Sure there's an automatic coercion from rationals to reals, in any context where the reals are imported</p>",
        "id": 223733912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611381492
    },
    {
        "content": "<p>What is <code>→ᵇ</code> in the example above?</p>",
        "id": 223753881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611414442
    }
]