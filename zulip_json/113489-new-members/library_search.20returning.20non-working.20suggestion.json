[
    {
        "content": "<p>Is it expected that library_search sometimes returns a suggestion that only almost works? Here's an example that I ran into today:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">surprising_library_search_result</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsub</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">library_search</span> <span class=\"c1\">-- this suggests &quot;exact hsub a ha&quot;, which doesn&#39;t work, needs to be &quot;hsub ha&quot; or &quot;@hsub a ha&quot;</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201954180,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1593082362
    },
    {
        "content": "<p>That's probably a bug. There might be a library search issue on GitHub, you could add your example to that or, if there isn't, you can open a new issue. Otherwise your comment might just get lost in general Zulip noise</p>",
        "id": 201954543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593082675
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3093\">#3093</a> . I found this same issue a few days ago.</p>",
        "id": 201956271,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593084007
    },
    {
        "content": "<p>right, thank you, <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> seems you found the <em>exact</em> same example even :-)</p>",
        "id": 201956595,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1593084282
    },
    {
        "content": "<p>Your example is the exact same (modulo variable names) as mine from the GitHub error lol. </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3093#issuecomment-645238764\">https://github.com/leanprover-community/mathlib/issues/3093#issuecomment-645238764</a></p>\n<p>I think this is with how how <code>library_search</code> deals with <code>∀ ⦃a⦄</code>, but I'm not sure. I tried debugging the issue with some help from Gabriel, but to no avail (see the comment in the thread).</p>",
        "id": 201956597,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1593084291
    },
    {
        "content": "<p>right</p>",
        "id": 201956719,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1593084379
    },
    {
        "content": "<p>it wasn't a big problem to still use the result, I was just surprised</p>",
        "id": 201956730,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1593084395
    },
    {
        "content": "<p>[Sorry, wrong thread, I'm too stupid for Zulip.]</p>",
        "id": 201958538,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1593085707
    }
]