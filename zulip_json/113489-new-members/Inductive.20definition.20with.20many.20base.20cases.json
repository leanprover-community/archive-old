[
    {
        "content": "<p>Is it possible to make a inductive definition with arbitrarily many \"base cases\" ? I'm trying to define the constant recursive sequence of order <code>d : ℕ</code> with coefficients <code>c : fin d → α</code> and whose first <code>d</code> terms are given by <code>i : fin d → α</code> but I can't find how to do this since</p>",
        "id": 206810718,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597323177
    },
    {
        "content": "<p>I don't really understand the problem statement, but yes it is possible to formulate recursions like this</p>",
        "id": 206812350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597324185
    },
    {
        "content": "<p>(not at computer keyboard atm), but for a proof of that definition later, something like obtain d, hd from d, then rcases d with _|_|_|d for four base cases, then induction d for the rest</p>",
        "id": 206812926,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597324504
    },
    {
        "content": "<p>Oh sorry if that wasn't clear, let me make a more concrete example : let's say I want to define <code>superfib (d : ℕ) : ℕ → ℕ</code> such that <code>∀ i : fin d, superfib d i = i</code> and <code>∀ n,superfib d (n+d) = ∑ i in range d, superfib d (n+i)</code>. I know how to define <code>superfib 2</code> or <code>superfib 37</code> by making as much base constructors as I need and then the recursive one. But how can I define <code>superfib d</code> for any <code>d</code> since I can't write <code>d</code> constructors for every <code>d</code></p>",
        "id": 206813336,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597324743
    },
    {
        "content": "<p>I'd use the proposition that i &lt; d instead of relying on the fin to nat coercion</p>",
        "id": 206814008,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1597325146
    },
    {
        "content": "<p>that doesn't answer the question though</p>",
        "id": 206814128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597325216
    },
    {
        "content": "<p>I guess you define an auxiliary function first sending i to [superfib i, superfib (i+1), ..., superfib (i + d - 1)] by usual recursion</p>",
        "id": 206814305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597325328
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">superfib_aux</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">superfib_aux</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"err\">Σ</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">superfib_aux</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 206814640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597325506
    },
    {
        "content": "<p>I don't know how that Sigma notation works, I've never used it before -- this doesn't compile but should be fixable easily</p>",
        "id": 206814762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597325548
    },
    {
        "content": "<p>Ok so this works and looks incredibly clever, now I just need to understand what is going on <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 206816234,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597326344
    },
    {
        "content": "<p>Btw, the fix is : <code>∑ i : fin d</code> (the big sigma is <code>\\sum</code>)</p>",
        "id": 206816327,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597326380
    },
    {
        "content": "<p>You can define this by well founded recursion too</p>",
        "id": 206816476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597326466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">superfib</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span>\n  <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n      <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_lt_of_lt_sub_right</span> <span class=\"err\">$</span>\n        <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_lt_sub_left_iff</span> <span class=\"err\">$</span> <span class=\"n\">le_of_not_gt</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">superfib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">superfib_lt_d</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">superfib</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">superfib</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">superfib_sum</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">superfib</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">superfib</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">superfib</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 206817517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597326967
    },
    {
        "content": "<p>you have to supply a proof of decreasing in the middle of the definition but as you can see from the lemmas it doesn't appear there</p>",
        "id": 206817638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597327049
    },
    {
        "content": "<p>you misspelt <code>omega</code></p>",
        "id": 206817741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327097
    },
    {
        "content": "<p>Ok I think I just understood <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's approach, it seems less mysterious now : it is basically like working on the vectors of <code>d</code> consecutive terms to go back to usual recursion.</p>",
        "id": 206817903,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597327183
    },
    {
        "content": "<p>here I fixed the typo</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">superfib</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span>\n  <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"n\">superfib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206818170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597327312
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206818176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327313
    },
    {
        "content": "<p>I am annoyed that my version doesn't work for d=0 and yours does</p>",
        "id": 206818298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327362
    },
    {
        "content": "<p><code>def superfib' (d n : ℕ) (hd : d &gt; 0) := superfib'_aux d n ⟨0, hd⟩</code></p>",
        "id": 206818343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327392
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"n\">def</span> <span class=\"n\">superfib&#39;_aux</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">superfib&#39;_aux</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">superfib&#39;_aux</span> <span class=\"n\">n</span> <span class=\"n\">i</span>\n\n<span class=\"n\">def</span> <span class=\"n\">superfib&#39;</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">superfib&#39;_aux</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">superfib&#39;</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"c1\">-- 6</span>\n</code></pre></div>",
        "id": 206818412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597327427
    },
    {
        "content": "<p>You know what ? I'm dumb. I tried the exact same approach as Mario, except I didn't explicitly say <code>i : fin d</code>, so the type of <code>i</code> depended on the proof being present (<code>nat</code>) or not (<code>fin d</code>)</p>",
        "id": 206818532,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597327479
    },
    {
        "content": "<p>no that's actually a really subtle part of the definition, I'm not surprised</p>",
        "id": 206818610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597327518
    },
    {
        "content": "<p>ideally we would be able to just sum over <code>i in range d</code> like you did but my approach requires that you be able to prove that the argument is well defined when it is used, which is often inconvenient</p>",
        "id": 206818735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597327574
    },
    {
        "content": "<p>Oh yeah I posted <code>range</code> and tried <code>fin</code> later for this exact reason, but it didn't work anyway cause I'm relying too much on type inferencce</p>",
        "id": 206818858,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597327647
    },
    {
        "content": "<p>here's another way to do it using only <code>range</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">superfib</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">superfib</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 206818961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597327686
    },
    {
        "content": "<p>This works to make the definition decreasing and punts on proving that the <code>else 0</code> never happens until the equational theorem</p>",
        "id": 206819009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597327719
    },
    {
        "content": "<p>Oooooh that's clever too. Thanks to everyone !</p>",
        "id": 206819089,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1597327772
    },
    {
        "content": "<p>you misspelt 37</p>",
        "id": 206819911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597328201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Inductive.20definition.20with.20many.20base.20cases/near/206817741\">said</a>:</p>\n<blockquote>\n<p>you misspelt <code>omega</code></p>\n</blockquote>\n<p>Kevin, we have a problem with <code>omega</code>. As you know, this tactic has some bugs and the author is no longer interested in maintaining it (or documenting it). Unless he suddenly comes back to it, we know for sure that <code>omega</code> won't survive the Lean4 migration. So we don't insist too much on using it more in mathlib.</p>",
        "id": 206869002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597351544
    },
    {
        "content": "<p>I wouldn't go that far. I think we should try to rewrite <code>omega</code>, not drop it</p>",
        "id": 206873702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597353916
    },
    {
        "content": "<p>Of course rewriting it would be even better!</p>",
        "id": 206873741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597353940
    },
    {
        "content": "<p>it obviously fills an important use case</p>",
        "id": 206873757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597353951
    },
    {
        "content": "<p>But that requires a lot of time and skills than avoiding to use it.</p>",
        "id": 206873776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597353962
    },
    {
        "content": "<p>avoiding it also requires time and skills though</p>",
        "id": 206873839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597353984
    },
    {
        "content": "<p>It certainly needs a lot less skills, but it could need a lot more total time if we do it long enough.</p>",
        "id": 206874214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597354179
    }
]