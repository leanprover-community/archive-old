[
    {
        "content": "<p>Hello,  I have a question. Lean allows us to write '⟨' and '⟩' in a binder of lambda abstraction (as in uncurry1) but it will become an error as soon as I put a type annotation in the binder (as in uncurry2). It is weird since the type annotation works fine if there is no  '⟨' and '⟩' in a binder of lambda abstraction (as in uncurry3).</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n  <span class=\"n\">def</span> <span class=\"n\">uncurry1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">def</span> <span class=\"n\">uncurry2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">def</span> <span class=\"n\">uncurry3</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>Is \"not able to write a type annotation for '⟨' and '⟩'\" a bug or intended feature?</p>",
        "id": 160288501,
        "sender_full_name": "Gun Pinyo",
        "timestamp": 1552051523
    },
    {
        "content": "<p>I would say it's an absence of feature. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>?</p>",
        "id": 160289120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552052019
    },
    {
        "content": "<p>Yes. I definitely want that as well.</p>",
        "id": 160294520,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1552055806
    },
    {
        "content": "<p>the following seems to work</p>\n<div class=\"codehilite\"><pre><span></span>  def uncurry4 : α × β → γ := λ ⟨(a : α), (b : β)⟩, f a b\n</pre></div>",
        "id": 160303791,
        "sender_full_name": "matt rice",
        "timestamp": 1552062799
    },
    {
        "content": "<p>huh, this is news to me. It also works in pattern let</p>",
        "id": 160311007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552068421
    }
]