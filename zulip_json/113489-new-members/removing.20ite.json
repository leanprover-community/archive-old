[
    {
        "content": "<p>First of all, this community has been really helpful in learning lean.</p>\n<p>I have a small issue related to decidability, which I cannot get my head around.<br>\nI am including a small part of my code (and I hoped for it to be even smaller, but to no avail).</p>\n<p>In the second-to-last sorry, I cannot rewrite ite tt, and it shows a little uparrow before tt. I understand it is complaining it cannot be decidable. However, I would like just to branch on the decision. Is this not possible?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">symbol</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">symbol</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">heap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">heap</span>\n<span class=\"bp\">|</span> <span class=\"n\">happend</span> <span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">int</span> <span class=\"bp\">→</span> <span class=\"n\">heap</span> <span class=\"bp\">→</span> <span class=\"n\">heap</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">heap</span>\n\n<span class=\"n\">def</span> <span class=\"n\">same_name</span> <span class=\"o\">:</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">symbol</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">find</span> <span class=\"o\">:</span> <span class=\"n\">heap</span> <span class=\"bp\">→</span> <span class=\"n\">symbol</span> <span class=\"bp\">→</span> <span class=\"n\">int</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">happend</span> <span class=\"n\">name</span> <span class=\"n\">v</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">oname</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">same_name</span> <span class=\"n\">name</span> <span class=\"n\">oname</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">find</span> <span class=\"n\">h</span> <span class=\"n\">oname</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">lookup_is_always_ok</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">heap</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">symbol</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">),</span> <span class=\"n\">find</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"n\">find</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">by_cases</span> <span class=\"n\">same_name</span> <span class=\"n\">h_a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">rw</span> <span class=\"n\">find</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n            <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">sorry</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197696102,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1589551695
    },
    {
        "content": "<p>You can always do it anyway by starting your proof with <code>classical,</code></p>",
        "id": 197696358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589551807
    },
    {
        "content": "<p>That's unnecessary in this case though--<code>ite</code> on a coerced <code>bool</code> is really just doing cases on the <code>bool</code>.</p>",
        "id": 197696479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589551866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/removing.20ite/near/197696358\">said</a>:</p>\n<blockquote>\n<p>You can always do it anyway by starting your proof with <code>classical,</code></p>\n</blockquote>\n<p>Unfortunately it does not work in my lean installation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"n\">classical&#39;</span>\n</code></pre></div>\n\n\n<p>However, I do <code>open classical</code> in my program and the result is the same.</p>",
        "id": 197698756,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1589552759
    },
    {
        "content": "<p>I'm not sure I remember the syntax, but I think you just want something like <code>cases H : same_name h_a n</code>.</p>",
        "id": 197699866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589553149
    },
    {
        "content": "<p>It has exactly the same behaviour. If I go on by rewriting ite, I get something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span>\n    <span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hnc</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">),</span> <span class=\"n\">find</span> <span class=\"n\">h_a_2</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"n\">ff</span><span class=\"o\">),</span> <span class=\"n\">h_a_1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n</code></pre></div>\n\n\n<p>Which I am enable to get rid of, even rewriting bool.decidable_eq.</p>",
        "id": 197700289,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1589553307
    },
    {
        "content": "<p>Oh yes I see, sorry.</p>",
        "id": 197701465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589553772
    },
    {
        "content": "<p>You need a lemma next: <code>rw if_pos,</code></p>",
        "id": 197701521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589553793
    },
    {
        "content": "<p>Alternatively, if you used <code>bool.rec_on</code> instead of if-then-else (since you really have a <code>bool</code> to start with anyways), you could just reduce it.</p>",
        "id": 197701701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589553856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/removing.20ite/near/197701465\">said</a>:</p>\n<blockquote>\n<p>Oh yes I see, sorry.</p>\n</blockquote>\n<p>Using if_pos creates a second goal for <code>tt</code>, which I cannot get to.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span> <span class=\"n\">h_a</span> <span class=\"o\">:</span> <span class=\"n\">symbol</span><span class=\"o\">,</span>\n<span class=\"n\">h_a_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">h_a_2</span> <span class=\"o\">:</span> <span class=\"n\">heap</span><span class=\"o\">,</span>\n<span class=\"n\">h_ih</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">find</span> <span class=\"n\">h_a_2</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">same_name</span> <span class=\"n\">h_a</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↥</span><span class=\"n\">tt</span>\n</code></pre></div>\n\n\n<p>I am afraid I might be mixing the interpreter, with reasoning about it (bool vs Prop).</p>",
        "id": 197702482,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1589554153
    },
    {
        "content": "<p><code>↥tt</code> is <code>true</code>, and the proof of <code>true</code> is <code>trivial</code>.</p>",
        "id": 197703421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589554528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284775\">Alcides Fonseca</span> <a href=\"#narrow/stream/113489-new-members/topic/removing.20ite/near/197698756\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/removing.20ite/near/197696358\">said</a>:</p>\n<blockquote>\n<p>You can always do it anyway by starting your proof with <code>classical,</code></p>\n</blockquote>\n<p>Unfortunately it does not work in my lean installation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"n\">classical&#39;</span>\n</code></pre></div>\n\n\n<p>However, I do <code>open classical</code> in my program and the result is the same.</p>\n</blockquote>\n<p>Do you have mathlib? <code>import tactic</code> will give you the <code>classical</code> tactic</p>",
        "id": 197703587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589554590
    },
    {
        "content": "<p>Anyway, <code>simp</code> should be able to clean up this goal</p>",
        "id": 197703712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589554639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/removing.20ite/near/197703712\">said</a>:</p>\n<blockquote>\n<p>Anyway, <code>simp</code> should be able to clean up this goal</p>\n</blockquote>\n<p>simp did work! Thank you very much!</p>\n<p>I guess I didn't try it as I though the problem was more complex than it actually way!</p>",
        "id": 197704383,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1589554899
    },
    {
        "content": "<p>It is true that you are mixing Prop and bool a bit (<code>a = b</code> in the definition of <code>same_name</code> is a Prop, but it gets coerced to bool using the decidability of equality on <code>nat</code>; then in <code>if same_name ...</code> it gets coerced back into a Prop) but this is fine, and normal style if you really intend to do it.</p>",
        "id": 197705076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589555153
    }
]