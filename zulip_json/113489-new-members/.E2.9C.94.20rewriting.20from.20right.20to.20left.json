[
    {
        "content": "<p>\"if a tactic is of the form a = b\" -- this makes no sense. Tactics are things like <code>intro</code> etc. Is the answer to your question <code>rw ← h</code>?</p>",
        "id": 273486994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646054350
    },
    {
        "content": "<p>Is the answer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_one_eq_succ</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>?</p>",
        "id": 273487283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646054510
    },
    {
        "content": "<p>Yes, that's what I thought...but I can't get the syntax write in this case:</p>\n<p>intro f,<br>\nrw (←add_one_eq_succ n) at f,</p>",
        "id": 273487389,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646054563
    },
    {
        "content": "<p>Did you try what I wrote?</p>",
        "id": 273487409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646054579
    },
    {
        "content": "<p>rewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  succ ?m_1<br>\nstate:<br>\nn : mynat,<br>\nf : n = succ n<br>\n⊢ false</p>",
        "id": 273487596,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646054669
    },
    {
        "content": "<p>Robert, could you please create a new topic when you have a new question? Moving your messages around is a bit tiresome.</p>",
        "id": 273487681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646054730
    },
    {
        "content": "<p>Robert can you post exactly what you wrote to get the error (bearing in mind that what I posted works for me)</p>",
        "id": 273487808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646054807
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">add_one_eq_succ</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>also,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">add_one_eq_succ</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>also,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">add_one_eq_succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 273488376,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646055056
    },
    {
        "content": "<p>Why do you put these parentheses?</p>",
        "id": 273488450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646055088
    },
    {
        "content": "<p>@Patrick, I wasn't sure how you wanted the mwe given that I don't have a fully working version, so I mentioned it. Didn't think of it as a new topic. Sorry!</p>",
        "id": 273488589,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646055136
    },
    {
        "content": "<p>Do you mean this is the same topic as when you complained about VScode not showing an error?</p>",
        "id": 273488841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646055268
    },
    {
        "content": "<p>But surely you're not playing the natural number game in VS Code right?</p>",
        "id": 273488852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646055280
    },
    {
        "content": "<p>Your way of adding random parentheses in <code>rw</code> should certainly show a big error message anywhere.</p>",
        "id": 273488894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646055304
    },
    {
        "content": "<p>@Patrick. Yes and yes, exactly on both counts. That's all it was! I was using parentheses as without them I feel the code is harder to read or I'm not sure Lean knows exactly what is acting on what. With parentheses it is clearer exactly what order things are being done in and what applies to what, so I was using them for clarity. I didn't know you can't do that in lean! I've always used parentheses liberally before! Is it a design decision not to allow that? is there a reason for that?</p>",
        "id": 273489616,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646055659
    },
    {
        "content": "<p>@Reid...no, but I was trying to do an mwe in VSCode.</p>",
        "id": 273489788,
        "sender_full_name": "Robert Watson",
        "timestamp": 1646055742
    },
    {
        "content": "<p>There is a syntax to group things you're rewriting by. It's square parens \"rw [&lt;-my_lemma a b c] at h\"</p>",
        "id": 273489819,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646055762
    },
    {
        "content": "<p>Different tactics have different syntaxes.</p>",
        "id": 273489835,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646055776
    },
    {
        "content": "<p>Usually, tactics that can take 1 or more terms as some parameter will take them in square brackets, since square brackets are the syntax for a list. In this case, it's not exactly a term because of the &lt;- in front. But still, that's how one can group the rewrite syntax.</p>",
        "id": 273490006,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646055889
    },
    {
        "content": "<p>It is okay (but useless) to use the parentheses but then the arrow is in the wrong place. New users often seem to feel safer with this kind of parentheses for some reason.<br>\nThe tactic language is not very similar to other programming languages you may be familiar with. I would suggest not trying to rely on prior knowledge and instead copying the examples exactly as formatted.</p>",
        "id": 273490345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646055997
    },
    {
        "content": "<p>Plain parentheses are almost universally used in lean (and mathlib) as part of the syntax of manipulating order of operations. We use many different types of parentheses in different syntaxes for different purposes.</p>",
        "id": 273490420,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1646056024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410678\">Robert Watson</span> has marked this topic as resolved.</p>",
        "id": 273491196,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646056388
    }
]