[
    {
        "content": "<p>I'm sorry for being naive. If we have a theorem: forall x, y exists uniquely z such that p(x, y, z), how can we define a function base on this theorem?</p>\n<p>I guess this question has been asked many times but sorry I tried to search but got lost here. Thanks!</p>",
        "id": 262772825,
        "sender_full_name": "Cuong Tran",
        "timestamp": 1637916998
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a>, which doesn't even need uniqueness! (Although you have no idea which witness you'll get.)</p>",
        "id": 262773433,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637917365
    },
    {
        "content": "<p>For example (tested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists.some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">choose_spec</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists.some_spec</span>\n</code></pre></div>",
        "id": 262773595,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637917478
    },
    {
        "content": "<p>Although you might find it easier instead of using <code>exists_unique</code>, to define a function that returns the witness + a lemma stating this is the unique witness satisfying <code>p(x, y, z)</code>.</p>",
        "id": 262773808,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637917633
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  for your keywords. Thank to them, I found <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#choice\">this article</a> as well and now have a better insight about Lean non-computable.</p>",
        "id": 262778320,
        "sender_full_name": "Cuong Tran",
        "timestamp": 1637920698
    }
]