[
    {
        "content": "<p>Has anyone had implemented lenses in lean? Would it be helpful in mathlib, or useful to formalize here?</p>",
        "id": 178382376,
        "sender_full_name": "ohhaimark",
        "timestamp": 1571320151
    },
    {
        "content": "<p>What is a lens?</p>",
        "id": 178383111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571320637
    },
    {
        "content": "<p><a href=\"http://hackage.haskell.org/package/lens\" target=\"_blank\" title=\"http://hackage.haskell.org/package/lens\">http://hackage.haskell.org/package/lens</a></p>",
        "id": 178383279,
        "sender_full_name": "ohhaimark",
        "timestamp": 1571320733
    },
    {
        "content": "<p>I remember chatting about this at Lean Together 2019</p>",
        "id": 178383607,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1571320925
    },
    {
        "content": "<p>I had a go at implementing them but I didn't finish.</p>",
        "id": 178383728,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1571321012
    },
    {
        "content": "<p>If I remember, I basically got it working but I had many issues with getting coercions between the different classes (prism, optic, iso etc) to be painless. I'll dig it up and link to it.</p>",
        "id": 178384678,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1571321563
    },
    {
        "content": "<p>That package is really bad at telling me what a lens is. Do I need to read the code to figure it out? They only tell me how to use it. Not what it is.</p>",
        "id": 178385097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571321817
    },
    {
        "content": "<p>Yeah sorry. I'm looking for another source.</p>",
        "id": 178385127,
        "sender_full_name": "ohhaimark",
        "timestamp": 1571321844
    },
    {
        "content": "<p><a href=\"https://github.com/EdAyers/edlib/blob/master/lens.lean\" target=\"_blank\" title=\"https://github.com/EdAyers/edlib/blob/master/lens.lean\">https://github.com/EdAyers/edlib/blob/master/lens.lean</a></p>",
        "id": 178385333,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1571321997
    },
    {
        "content": "<p><a href=\"https://en.wikibooks.org/wiki/Haskell/Lenses_and_functional_references\" target=\"_blank\" title=\"https://en.wikibooks.org/wiki/Haskell/Lenses_and_functional_references\">https://en.wikibooks.org/wiki/Haskell/Lenses_and_functional_references</a> helps</p>",
        "id": 178385474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571322079
    },
    {
        "content": "<p>In short, lenses are a way to update part of a whole and are composable. For example if you have nested records, then you can have a lens for accessing each field. In c terms, it's like a functional lvalue.</p>",
        "id": 178385485,
        "sender_full_name": "ohhaimark",
        "timestamp": 1571322083
    },
    {
        "content": "<p>If you like pictures: <a href=\"http://adit.io/posts/2013-07-22-lenses-in-pictures.html\" target=\"_blank\" title=\"http://adit.io/posts/2013-07-22-lenses-in-pictures.html\">http://adit.io/posts/2013-07-22-lenses-in-pictures.html</a></p>",
        "id": 178385526,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1571322108
    },
    {
        "content": "<p>So, as a mathematician I'm supposed to find them not interesting at all. Except that they might be really handy as implementation toolkit for complex mathematical objects, and so it's good if I know what they are.</p>",
        "id": 178385629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571322153
    },
    {
        "content": "<p>I implemented like the minimum amount so that I could understand what lenses are and then I gave up, so don't expect too much!</p>",
        "id": 178385645,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1571322170
    },
    {
        "content": "<p>I've been playing with the idea of having lenses in Lean for a while. There's no approach I have found that reproduces the flexibility of the Haskell lenses. The question becomes: where is the sweet spot. I'm not sure</p>",
        "id": 178387743,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1571323392
    }
]