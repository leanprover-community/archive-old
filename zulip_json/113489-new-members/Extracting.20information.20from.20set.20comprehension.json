[
    {
        "content": "<p>I'm formalizing some proofs about labelled transition systems, so I've built some rather hairy structures to try and express them.  I hope I can get my question across with the particular proof I'm working with, even though it isn't exactly a MWE of the phenomenon.</p>\n<p>In the definition of pre_images below, I return the set of x ∈ CM.X satisfying the property indicated. In the following proof, when I assume I have  an element of the set returned by pre_images, how can I get back to the original stipulation that   x ∈ CM.X ?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">LTS_Claim</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">LTS</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sets_D</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">subs_D</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">sets_D</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Given an LTS_Claim for an LTS M, pre_images returns an indexed family of sets of</span>\n<span class=\"cm\">executions of Xs = {X₁, X₂, ... Xₙ} where  Xᵢ = {x | f(x) ∈ Dᵢ}</span>\n<span class=\"cm\">or at least, that&#39;s what I&#39;m trying to accomplish.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">preimages</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">sets_D</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n<span class=\"c1\">---------------------^^^^^^---------</span>\n<span class=\"c1\">---trying to pull out this information</span>\n\n<span class=\"c1\">---for the part of the proof indicated by ??</span>\n<span class=\"n\">def</span> <span class=\"n\">domain_decomp</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H₀</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">E</span><span class=\"err\">ᵢ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span><span class=\"o\">),</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span><span class=\"o\">,</span>\n <span class=\"k\">show</span> <span class=\"n\">valid</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n   <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"err\">??</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I hope this question makes sense, if not I can try to come up with a clearer example. Also, I'm still quite new to building arbitrary data structures and to lean in general so I assume the way I've set up my structure here is not the best way to do what I'm trying to do.</p>",
        "id": 204446945,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595264025
    },
    {
        "content": "<p><code>{x ∈ CM.X | CM.f x ∈ CM.sets_D i}</code> is this even legal syntax? I didn't know that!</p>",
        "id": 204448321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595264744
    },
    {
        "content": "<p>My guess is, if you <code>#print preimages</code> you'll get an answer to your question</p>",
        "id": 204448403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595264771
    },
    {
        "content": "<p>I guess it is, although I should check that it means what I think it means.</p>",
        "id": 204448477,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595264825
    },
    {
        "content": "<p><code>assume x ∈ Xᵢ</code>, it's probably the <code>.1</code> of this hypothesis that you are looking for</p>",
        "id": 204448605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595264887
    },
    {
        "content": "<p>Yep,  since<br>\n#reduce {x ∈ S | x ∈ T} <br>\nprints<br>\nλ (a : α), S a ∧ T a . Thanks for the tip!</p>",
        "id": 204448712,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595264980
    },
    {
        "content": "<p>Hmm, having trouble moving from </p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"kn\">variable</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span>\n <span class=\"kn\">variable</span> <span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span>\n <span class=\"kn\">variable</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span>\n <span class=\"kn\">variable</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">==&gt;</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">sets_D</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">sets_D</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>invalid type ascription, term has type<br>\n  Prop : Type<br>\nbut is expected to have type<br>\n  CM.X x ∧ CM.sets_D i (CM.f x) : Prop</p>\n<p>I think I'm confusing the proposition/type with the proof term itself</p>",
        "id": 204452146,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595266769
    },
    {
        "content": "<p>Look for something with type <code>x ∈ Xᵢ</code> in your goal state, in the original context.</p>",
        "id": 204452752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> <a href=\"#narrow/stream/113489-new-members/topic/Extracting.20information.20from.20set.20comprehension/near/204452146\">said</a>:</p>\n<blockquote>\n<p>I think I'm confusing the proposition/type with the proof term itself</p>\n</blockquote>\n<p>Yup...</p>",
        "id": 204452852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267141
    },
    {
        "content": "<p>still struggling with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"err\">ᵢ</span><span class=\"o\">,</span> <span class=\"c1\">-- gives assumption the name H</span>\n <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>invalid field notation, type is not of the form (C ...) where C is a constant<br>\n  H<br>\nhas type<br>\n  Xᵢ x</p>\n<p>Appreciate your help.</p>",
        "id": 204453590,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595267533
    },
    {
        "content": "<p><code>and.left H</code>? Does that work?</p>",
        "id": 204453660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267579
    },
    {
        "content": "<p>Alternatively, write <code>assume H : x ∈ CM.X \\and _,</code> instead of <code>assume x ∈ Xᵢ,</code></p>",
        "id": 204453789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595267647
    },
    {
        "content": "<p>term<br>\n  H<br>\nhas type<br>\n  x ∈ Xᵢ<br>\nbut is expected to have type<br>\n  x ∈ CM.X ∧ ?m_1</p>",
        "id": 204453791,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595267648
    },
    {
        "content": "<p>will try that</p>",
        "id": 204453805,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595267656
    },
    {
        "content": "<p>I was able to write this lemma, which should be good enough.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">silly</span>  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">LTS</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">CM</span> <span class=\"o\">:</span> <span class=\"n\">LTS_Claim</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">execution</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">preimages</span> <span class=\"n\">CM</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">CM</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 204454548,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595268020
    },
    {
        "content": "<p>I guess renaming x \\in preimage  _ _ to x \\in X\\_1 obfuscates the conjunction  somehow</p>",
        "id": 204454707,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1595268106
    }
]