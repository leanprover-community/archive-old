[
    {
        "content": "<p>hello, I've just finished a proof of the infinite Ramsey theorem. I would love feedback on what things I've done poorly, what things are weird, what things are redundant with mathlib, etc.  Of course I realize that folks are busy with their own projects!</p>\n<p>Would this be an appropriate thing for me create a mathlib PR for? I'm not sure if this is even a theorem that you would want in mathlib.  PRs are a nice way, though, to get feedback. I have the code in a fork on github already.</p>",
        "id": 176022301,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568824925
    },
    {
        "content": "<p>It gets taught in maths departments at UG or MSc level so it passes that test. Can you post a link?</p>",
        "id": 176022365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568824990
    },
    {
        "content": "<p><a href=\"https://github.com/JaredCorduan/mathlib/blob/infinite_ramsey/src/combinatorics/ramsey/infinite.lean\" target=\"_blank\" title=\"https://github.com/JaredCorduan/mathlib/blob/infinite_ramsey/src/combinatorics/ramsey/infinite.lean\">https://github.com/JaredCorduan/mathlib/blob/infinite_ramsey/src/combinatorics/ramsey/infinite.lean</a></p>",
        "id": 176022484,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568825083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> Nice work! A superficial glance over the code tells me that it looks pretty good.</p>",
        "id": 176023167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825622
    },
    {
        "content": "<p>I would certainly suggest that you create a PR.</p>",
        "id": 176023172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825631
    },
    {
        "content": "<p>Probably it will generate a boatload of comments, but you should know in advance that those are meant constructively.</p>",
        "id": 176023231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825659
    },
    {
        "content": "<p>I also have a maths question (I don't know much about this area): Is there a generalization to more than two colours?</p>",
        "id": 176023279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825705
    },
    {
        "content": "<p>great, thank you! I'll be grateful for any and all feedback!</p>",
        "id": 176023285,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568825709
    },
    {
        "content": "<p>line 30 I am a bit muddled -- what is S_x? Is this true if x=0?<br>\nline 98 some cut and paste error</p>\n<p>But in general -- mathlib has some style conventions which seem to demand that you are as brief as possible. People will suggest much shorter variants for proofs like lines 133 to 136 -- they wouldn't even go into tactic mode usually.</p>",
        "id": 176023290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568825714
    },
    {
        "content": "<p>Johan -- \"the same proof works\" for finitely many colours, as we mathematicians say...</p>",
        "id": 176023403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568825796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> Also, for this to be applicable, you would have to state another version of your theorem that works for arbitrary types of cardinality 2.</p>",
        "id": 176023410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825804
    },
    {
        "content": "<p>yes, the proof for coloring n-element sets with k-colors is an \"easy\" generalization. I could describe it in a couple sentences here, but I think the proof in lean would take me a bit of work. :) it's just induction on the number of colors, then induction on the size of the sets.</p>",
        "id": 176023412,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568825807
    },
    {
        "content": "<p>So, is this the base case of the induction?</p>",
        "id": 176023458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825839
    },
    {
        "content": "<p><code>def reds (f : ℕ → color) (H : set ℕ) := (λ n : ℕ, f n = red ∧ n ∈ H )</code> -- are you better off just using sets here? You could define this as an intersection of sets.</p>",
        "id": 176023465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568825844
    },
    {
        "content": "<p>Or does the general proof avoid this case?</p>",
        "id": 176023469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825846
    },
    {
        "content": "<p>yes, exactly <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> . I thought the <code>red</code> and <code>blue</code> was easy to work with, and easy to read. but maybe it's too cute.</p>",
        "id": 176023479,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568825853
    },
    {
        "content": "<p>No, that's fine for the proof.</p>",
        "id": 176023492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825862
    },
    {
        "content": "<p>But you should afterwards restate your theorem</p>",
        "id": 176023508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825871
    },
    {
        "content": "<p>With a 2-line proof where you reduce to the case of <code>colors</code></p>",
        "id": 176023580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825889
    },
    {
        "content": "<p>I can imagine that the inductive type is quite useful during the proof.</p>",
        "id": 176023595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825906
    },
    {
        "content": "<p>for things like line 102 people will encourage you to move x and y to the left of the colon -- it doesn't change the term but makes the proof shorter (you don't need the lambda). But yeah PR and you'll get a bunch of comments like this.</p>",
        "id": 176023625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568825925
    },
    {
        "content": "<p>Do you (<span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> or <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>) know of applications of this theorem?</p>",
        "id": 176023639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568825935
    },
    {
        "content": "<p>A logician taught it me, they were interested in fancier statements involving cardinals.</p>",
        "id": 176023677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1568825965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> sorry if the informal proof in the header is confusing.  S_x is one of the sets in the(S_i, x_i) sequence. and yes, that line is true for i = 0., but it should say S_{x_{i+1}}.</p>",
        "id": 176023874,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826066
    },
    {
        "content": "<p>as for applications, yea, Ramsey himself had it as a lemma in a logic paper :)</p>",
        "id": 176023915,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826089
    },
    {
        "content": "<p>and indeed you can generalize it, you can travel to large cardinal land if you want</p>",
        "id": 176023944,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826117
    },
    {
        "content": "<p>there's a finite version too, which follows by compactness. I was considering using <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> 's compactness proof to show this...</p>",
        "id": 176024035,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826157
    },
    {
        "content": "<p>the finite version probably has more applications, but I'm no expert. I think it is used in termination proofs in CS.</p>",
        "id": 176024091,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826198
    },
    {
        "content": "<p>some of the generalization/related theorems are interesting in themselves, I'd claim. Such as Hindman's theorem.</p>",
        "id": 176024200,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826266
    },
    {
        "content": "<p>Ok, cool. Then we certainly want a version that is \"applicable\" (in the sense that the user-facing version of this theorem should not mention <code>color</code>).</p>",
        "id": 176024404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568826403
    },
    {
        "content": "<blockquote>\n<p>there's a finite version too, which follows by compactness. I was considering using <span class=\"user-mention silent\" data-user-id=\"116045\">Jesse Michael Han</span> 's compactness proof to show this...</p>\n</blockquote>\n<p>congrats on finishing! while i doubt Flypitch's FOL library will be PR'd to mathlib anytime soon, it would be exciting to see a \"real-world\" application of it</p>",
        "id": 176024418,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1568826413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I like the idea of defining <code>reds</code> better, maybe using intersection. That was just the first thing I thought to use. Indeed there is a silly copy paste.  I'm more than happy to move variables to which ever side of the colon folks like! I'd love shorter proofs, I just always can't find them!</p>",
        "id": 176024421,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826415
    },
    {
        "content": "<p>also, Ramsey's theorem is # 31 on Freek's list (and it looks like it hasn't been done in Lean yet)</p>",
        "id": 176024704,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1568826609
    },
    {
        "content": "<p>the base case <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is: for size of sets: base case is n=1, ie the pigeon hole principle. for colors, base case is k=2. fix n, I'll show you the color argument - color the first two colors by a new color. now you have a (k-1) coloring. use RT. if you are in one of the old colors, great, done. otherwise now you have a two coloring.  qed. then here's the induction on n: for each natural m, you induce a (n-1) coloring  by fixing that number m. so use RT for each number. this gives a coloring of singletons, so use the PHP.</p>",
        "id": 176024788,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826681
    },
    {
        "content": "<p>I wasn't sure if # 31 was the finite or infinite version, or if it mattered :)</p>",
        "id": 176024817,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826712
    },
    {
        "content": "<p>I really just used <code>red</code> and <code>blue</code>, and similarly unordered pairs as I defined,  since I was having a lot of trouble using finite sets. but that's probably just my own ignorance.</p>",
        "id": 176024993,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568826832
    },
    {
        "content": "<p>Great, I suggest you include the <code>n</code>-colored version. It doesn't seem too hard to prove...</p>",
        "id": 176025286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568826976
    },
    {
        "content": "<p>And maybe you can also generalize <code>nat</code> to arbitrary infinite types?</p>",
        "id": 176025306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568826995
    },
    {
        "content": "<p>it's not hard, it's just work :) and it'll get me up to speed with finite sets.</p>",
        "id": 176025323,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568827010
    },
    {
        "content": "<p>I'll have to think about infinite types. there are generalizations to ordinals, where it is only sometimes true.</p>",
        "id": 176025367,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568827048
    },
    {
        "content": "<p>it's easy to bump into unsolved problems here</p>",
        "id": 176025462,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568827088
    },
    {
        "content": "<p>I think I'd like to put what I have up for a PR now, work through suggestions, and then try for the <code>RT^n_k</code>afterwards, if that's cool.</p>",
        "id": 176025572,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1568827172
    },
    {
        "content": "<p>This is reasonably sized already, so yes... PR this first</p>",
        "id": 176025807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568827319
    },
    {
        "content": "<p>please let me know if chatting here is fine, or if it would be better to use github for this kind of thing.</p>\n<p>I had a few minutes today, so I tried to address one of the review comments on my ramsey theorem PR, namely reconciling my definition of <code>infinite</code> with that in <code>data.set.fintype</code> (namely <code>fintype α → false</code>).  One direction was easy for me, but the other I'm having a bit of trouble with.</p>\n<p>I named my definition <code>infinite'</code>, which isn't a great name. maybe normally you all just use namespaces to handle such separate definitions? anyway, at ITP 2019, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> showed me some marvelous magic for pushing a negation through quantifiers, which is to use <code>simp [not_forall, not_exists]</code>. I can't get it to work in a different situation now, though, and was wondering what I am doing wrong. (I know how to manually prove the flip-flopping quantifiers, but this seems ugly...)</p>\n<div class=\"codehilite\"><pre><span></span>def infinite&#39; (H : set ℕ) := ∀ x : ℕ, ∃ y : ℕ, x &lt; y ∧ y ∈ H\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>lemma infinite_equiv (H : set ℕ) (h : ¬ infinite&#39; H) : finite H :=\nbegin\n  have hf : ∃ x, ∀ y, ¬ (x &lt; y ∧ y ∈ H),\n    simp [infinite&#39;, not_forall, not_exists] at h, -- why does Mario&#39;s magic not work here?\n    sorry,\n  simp at hf,\n  cases hf with x hx,\n  sorry,  -- is there a matlib theorem that says bounded sets of nats have fintype?\nend\n</pre></div>",
        "id": 177266152,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123200
    },
    {
        "content": "<p>There is a tactic for this BTW, which others will point out soon enough</p>",
        "id": 177266656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570123514
    },
    {
        "content": "<p>ah, thank you! I just learned about the <code>PR reviews</code> channel and I'm talking with <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> there. :)</p>",
        "id": 177266769,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123583
    },
    {
        "content": "<p>The reason the <code>simp</code> line doesn't work is because you need to use classical reasoning to make the <code>not_forall</code> lemma trigger</p>",
        "id": 177266806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570123620
    },
    {
        "content": "<p>use <code>classical,</code> at the beginning of the proof</p>",
        "id": 177266816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570123627
    },
    {
        "content": "<p>ah! thank you!</p>",
        "id": 177266859,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123666
    }
]