[
    {
        "content": "<p>In chapter 8 section 4 of TPIL the Ackermann function is defined,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">y</span>     <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">ack</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>\n</pre></div>\n\n\n<p>and it says, \"As a final example, we observe that Ackermann’s function can be defined directly, because it is justified by the well foundedness of the lexicographic order on the natural numbers.\"</p>\n<p>But when I copy and paste it into VS code I get red squiggles under <code>ack</code> telling me that it's not well founded and asking me to prove <code>x &lt; x</code>, which is false. How can I prove the well foundedness of <code>ack</code> using the lexicographic order on the natural numbers?</p>",
        "id": 190675506,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584319632
    },
    {
        "content": "<p>It works for me. What lean version are you using?</p>",
        "id": 190675725,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584320052
    },
    {
        "content": "<p>I don't know</p>",
        "id": 190676054,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584320721
    },
    {
        "content": "<p>How do I find out?</p>",
        "id": 190676064,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584320752
    },
    {
        "content": "<p><code>lean --version</code> from the command line, if you have one</p>",
        "id": 190676111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584320772
    },
    {
        "content": "<p>Actually, better is <code>#print lean.version</code></p>",
        "id": 190676127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584320816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">version</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190676138,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584320841
    },
    {
        "content": "<p>Odd, <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=--%20Live%20WebAssembly%20version%20of%20Lean%0A%23eval%20let%20v%20%3A%3D%20lean.version%20in%20let%20s%20%3A%3D%20lean.special_version_desc%20in%20string.join%0A%5B%22Lean%20%28version%20%22%2C%20v.1.repr%2C%20%22.%22%2C%20v.2.1.repr%2C%20%22.%22%2C%20v.2.2.repr%2C%20%22%2C%20%22%2C%0Aif%20s%20%E2%89%A0%20%22%22%20then%20s%20%2B%2B%20%22%2C%20%22%20else%20s%2C%20%22commit%20%22%2C%20%28lean.githash.to_list.take%2012%29.as_string%2C%20%22%29%22%5D%0A%0Adef%20ack%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20y%20%20%20%20%20%3A%3D%20y%2B1%0A%7C%20%28x%2B1%29%200%20%20%20%20%20%3A%3D%20ack%20x%201%0A%7C%20%28x%2B1%29%20%28y%2B1%29%20%3A%3D%20ack%20x%20%28ack%20%28x%2B1%29%20y%29%0A%0A%23eval%20ack%203%205\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/#code=--%20Live%20WebAssembly%20version%20of%20Lean%0A%23eval%20let%20v%20%3A%3D%20lean.version%20in%20let%20s%20%3A%3D%20lean.special_version_desc%20in%20string.join%0A%5B%22Lean%20%28version%20%22%2C%20v.1.repr%2C%20%22.%22%2C%20v.2.1.repr%2C%20%22.%22%2C%20v.2.2.repr%2C%20%22%2C%20%22%2C%0Aif%20s%20%E2%89%A0%20%22%22%20then%20s%20%2B%2B%20%22%2C%20%22%20else%20s%2C%20%22commit%20%22%2C%20%28lean.githash.to_list.take%2012%29.as_string%2C%20%22%29%22%5D%0A%0Adef%20ack%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20y%20%20%20%20%20%3A%3D%20y%2B1%0A%7C%20%28x%2B1%29%200%20%20%20%20%20%3A%3D%20ack%20x%201%0A%7C%20%28x%2B1%29%20%28y%2B1%29%20%3A%3D%20ack%20x%20%28ack%20%28x%2B1%29%20y%29%0A%0A%23eval%20ack%203%205\">it works</a> in the web editor, which is currently on 3.5.1c as well.</p>",
        "id": 190676266,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584321062
    },
    {
        "content": "<p>Here's the message:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">psigma</span><span class=\"bp\">.</span><span class=\"n\">has_well_founded</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"bp\">ℕ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"bp\">ℕ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span><span class=\"o\">))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"err\">&#39;</span><span class=\"n\">using_well_founded&#39;</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kn\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kn\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs</span><span class=\"bp\">.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"err\">&#39;</span><span class=\"n\">assumption&#39;</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"n\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"kn\">using</span> <span class=\"err\">&#39;</span><span class=\"k\">have</span><span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"n\">expressions</span><span class=\"bp\">.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 190676328,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584321155
    },
    {
        "content": "<p>I created a new file and now it works.</p>",
        "id": 190676459,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584321414
    },
    {
        "content": "<p>I originally had it in a scrap file full of lots of other stuff. Maybe I messed with some options which stuffed it or something.</p>",
        "id": 190676477,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584321466
    },
    {
        "content": "<p>The problem is with the imports...</p>",
        "id": 190676628,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584321708
    },
    {
        "content": "<p>Ok I got it down to this, which doesn't work, and gives the same error,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- import tactic.hint</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">suggest</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">y</span>     <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">ack</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>\n</pre></div>\n\n\n<p>You can swap <code>import tactic.suggest</code> with <code>import tactic.hint</code> and get the same error, but if you take either of the imports out the error goes away.</p>",
        "id": 190676891,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584322166
    },
    {
        "content": "<p>I gtg.</p>",
        "id": 190676893,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1584322179
    },
    {
        "content": "<p>I can reproduce this</p>",
        "id": 190677046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584322428
    },
    {
        "content": "<p><code>tactic.suggest</code> and <code>tactic.hint</code> are both imported by <code>import tactic</code>, so commenting or uncommenting those doesn't really do anything if <code>import tactic</code> is there.</p>\n<p>Chasing the other tactics I found that something in <code>data.nat.basic</code> can cause <code>ack</code> to break:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- comment this and it works</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">-- imports of data.nat.basic, comment or uncomment, doesn&#39;t matter</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_ring</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">order_functions</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">y</span>     <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">ack</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span>\n</pre></div>",
        "id": 190677338,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584322934
    },
    {
        "content": "<p>It's the <code>@[simp]</code> attribute on <code>nat.succ_pos'</code> that causes the failure. I'm really not sure why.</p>",
        "id": 190892232,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584469972
    },
    {
        "content": "<p>Does it work if you change <code>(x + 1)</code> etc to <code>nat.succ x</code> etc?</p>",
        "id": 190895097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584471335
    },
    {
        "content": "<p>No</p>",
        "id": 190896025,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584471761
    },
    {
        "content": "<p>This is all fixed in 3.6.1</p>",
        "id": 190899789,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584473512
    },
    {
        "content": "<p>So the solution is to upgrade your Lean</p>",
        "id": 190899920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584473559
    }
]