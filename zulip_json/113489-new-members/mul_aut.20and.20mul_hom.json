[
    {
        "content": "<p>From what I understand, in a group <code>G</code>, one has a homomorphism <code>mul_aut.conj : G  →*  mul_aut G</code>. <br>\nBut, when <code>g : G</code>,  I apparently can't use <code>mul_aut.conj g</code> as an automorphism of the group <code>G</code>,<br>\nbecause <code>mul_aut</code> does not contain the property that the morphism respects 1.<br>\nSince <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sylow\">docs#sylow</a> manages to use <code>mul_aut.conj</code>, I presumably have something wrong, but what?</p>",
        "id": 263797520,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638750083
    },
    {
        "content": "<p>It's an automorphism of a group which preserves <code>*</code> so it automatically preserves <code>1</code></p>",
        "id": 263797602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750198
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.mul_add_aut</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_aut.conj</span> <span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>I'm not entirely sure what your question is.</p>",
        "id": 263797683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750311
    },
    {
        "content": "<p>Well, the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom.map_closure</span> <span class=\"o\">(</span><span class=\"n\">mul_aut.conj</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>generates the following error, which I don't understand :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">monoid_hom.map_closure</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"n\">mul_aut.conj</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">⇑</span><span class=\"n\">mul_aut.conj</span> <span class=\"n\">g</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">mul_aut</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→*</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263798362,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638751279
    },
    {
        "content": "<p>Can you post fully working code? I don't know what to import/open</p>",
        "id": 263798549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751541
    },
    {
        "content": "<p>Maybe you just need to coerce it?</p>",
        "id": 263798631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751649
    },
    {
        "content": "<p>An automorphism is not equal to a homomorphism</p>",
        "id": 263798942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638752069
    },
    {
        "content": "<p>You can try <code>(mul_aut.conj g).to_monoid_hom</code>. The main issue though, is that <code>mul_aut.conj g</code> is an automorphism of <code>equiv.perm α</code>, so <code>monoid_hom.map_closure</code> will want a subset of <code>equiv.perm α</code>, as opposed to a subset of <code>α</code>.</p>",
        "id": 263799904,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1638753375
    },
    {
        "content": "<p>Sorry for providing a minimal non-working example… The <code>to_monoid_hom</code> did the job,<br>\nthat was that, thank you.  As a matter of fact, I couldn't find again how to do the coercion, although I had already used it once…</p>",
        "id": 263816125,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638776147
    }
]