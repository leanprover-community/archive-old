[
    {
        "content": "<p>I'm having trouble proving statements about structure equality. Here's an MWE of the type of problem I run into.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">point</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pt_add</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pt_add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pt_add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The goal contains curly brackets. I have no idea how to go about reaching this goal.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a_a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a_b</span><span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b_a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b_b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b_a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b_b</span><span class=\"o\">}</span> <span class=\"bp\">+</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a_a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a_b</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206996961,
        "sender_full_name": "Amanda Hauer",
        "timestamp": 1597452124
    },
    {
        "content": "<p>I think <code>congr</code> will help here. But I think the \"correct\" way to do this is to define and use an extensionality lemma</p>",
        "id": 206997072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597452275
    },
    {
        "content": "<p>You can put <code>@[ext]</code> on the structure to do that automatically</p>",
        "id": 206997105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597452361
    },
    {
        "content": "<p>I probably would try <code>dsimp [has_add.add, pt_add]</code> as a start.</p>",
        "id": 206997156,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597452394
    },
    {
        "content": "<p>but you also need a simp lemma for <code>add</code></p>",
        "id": 206997164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597452416
    },
    {
        "content": "<p>this proof should be <code>by ext; simp</code></p>",
        "id": 206997170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597452425
    },
    {
        "content": "<p>you can put <code>@[simps]</code> on <code>pt_add</code> <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 206997324,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597452666
    },
    {
        "content": "<p>Here's one way using only the <code>@[ext]</code> annotation:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">structure</span> <span class=\"n\">point</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pt_add</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">point</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">pt_add</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pt_add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">pt_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206997476,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597452864
    },
    {
        "content": "<p>Thank you for now!</p>",
        "id": 206997629,
        "sender_full_name": "Amanda Hauer",
        "timestamp": 1597453108
    },
    {
        "content": "<p>Do you need the first two <code>cases</code>?</p>",
        "id": 206997872,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597453442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> You're right, the vestigial cases can be removed <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 206997981,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597453625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> did you ever take a commutative algebra class at Berkeley?</p>",
        "id": 206998090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597453752
    },
    {
        "content": "<p>I've been meaning to say \"hi\" for a while.  I took 250B with you.</p>",
        "id": 206998098,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597453773
    },
    {
        "content": "<p>Ha! I knew I recognized your name!</p>",
        "id": 206998117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597453801
    },
    {
        "content": "<p>Small world</p>",
        "id": 206998184,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597453845
    },
    {
        "content": "<p>It was a good diet of category theory and homological algebra you fed us back then!</p>",
        "id": 206998288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597454031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321071\">@Amanda Hauer</span> you could look at the complex number game <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game\">https://github.com/ImperialCollegeLondon/complex-number-game</a> . A complex number is two real numbers, and assuming everything about real numbers I prove that addition commutes in the complex numbers in a hopefully comprehensive way in the first level</p>",
        "id": 207014443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597485163
    }
]