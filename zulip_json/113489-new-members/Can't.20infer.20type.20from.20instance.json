[
    {
        "content": "<p>Hello! I'm working on my project and faced with the following problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">foo.mk</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">buz</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">buz</span> <span class=\"n\">ℤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"c1\">-- error: don't know how to synthesize placeholder</span>\n</code></pre></div>\n<p>(toy example for simplicity)</p>\n<p>I want Lean to infer both <code>ℤ</code> as <code>β</code> and <code>bar</code> as an instance for <code>foo α β</code> from <code>bar</code> in the last line, but it can't. Is there any fundamental reason why this is impossible? Anyway, is it possible to work around the problem without using explicit arguments? (there are too many of them in my project)</p>",
        "id": 310567221,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1668675226
    },
    {
        "content": "<p>Yes, make β an <code>out_param (Type v)</code> on line 3</p>",
        "id": 310569010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668676056
    },
    {
        "content": "<p>Wow, it works, thank you! But it looks like magic, сan you please give a link to something where <code>out_param</code> and its usage are explained?</p>",
        "id": 310595643,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1668686595
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/out_param\">docs#out_param</a> <em>might</em> have something</p>",
        "id": 310598968,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668687933
    },
    {
        "content": "<p>Yes, but it haven't <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <br>\nI have found only <a href=\"https://leanprover.github.io/lean4/doc/typeclass.html?highlight=outParam#output-parameters\">this</a>, it's about Lean 4, but may still be useful for someone (like me)</p>",
        "id": 310625107,
        "sender_full_name": "Vasily Nesterov",
        "timestamp": 1668696910
    },
    {
        "content": "<p>I think the description there likely applies roughly to lean 3 too</p>",
        "id": 310650599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668703553
    }
]