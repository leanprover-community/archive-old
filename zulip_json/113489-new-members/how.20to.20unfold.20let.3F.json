[
    {
        "content": "<p>Sometimes, I end up needing a long term maybe as part of a <code>use</code>.  And to make things more legible, I'd introduce a term using a <code>let</code> binding. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">alsoTwo</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">alsoTwo</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"c1\">--rw alsoTwo, -- doesn&#39;t work</span>\n  <span class=\"c1\">--unfold alsoTwo, -- doesn&#39;t work</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but at this point, only <code>refl</code>/ <code>simp</code> work anymore. Any idea how I can put back the <code>let</code>-binding?</p>",
        "id": 200467979,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591818835
    },
    {
        "content": "<p>Try using <code>set</code> instead. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a></p>",
        "id": 200468076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591818859
    },
    {
        "content": "<p><code>set x := long_term with hx</code> gives you <code>hx</code> that you can explicitly rewrite with.</p>",
        "id": 200468154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591818888
    },
    {
        "content": "<p>cool, thx</p>",
        "id": 200468441,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591819010
    },
    {
        "content": "<p>Is there a reason we can't make <code>let</code> have this <code>with</code> functionality too?</p>",
        "id": 200471271,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591820463
    },
    {
        "content": "<p>IIRC <code>set</code> exists because I had the same problem as Daniel back in the days when we couldn't edit core Lean and Rob made <code>set</code> to stop me whining. Maybe you want to try editing core Bhavik? :-)</p>",
        "id": 200474702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591822312
    },
    {
        "content": "<p>I think as many quality of life improvements as possible should be made, even if it breaks a lot of stuff in the short term. This community is still small enough for this to be possible without too much of a hassle.</p>",
        "id": 200483959,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591827019
    },
    {
        "content": "<p>Deduplicating tactics where one is a straight improvement over the other would be a great start.</p>",
        "id": 200484036,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591827081
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/124\">lean#124</a> is along those lines.</p>",
        "id": 200484145,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591827132
    },
    {
        "content": "<ul>\n<li><code>set</code> and <code>let</code></li>\n<li><code>rintros</code> <code>intros</code> (I don't even think there should be a distinction between <code>intro</code> and <code>intros</code>, its just annoying tbh)</li>\n</ul>",
        "id": 200484153,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591827142
    },
    {
        "content": "<p>there is a reason I made <code>rintros</code> an alias to <code>rintro</code></p>",
        "id": 200484629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827427
    },
    {
        "content": "<p>Patrick I think also wants to kill <code>intro</code> and <code>intros</code> and just rename <code>rintro</code> to <code>intro</code></p>",
        "id": 200484680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591827460
    },
    {
        "content": "<p>Actually I think the same can be said about all the plural command keywords: <code>variables</code>, <code>axioms</code>, <code>parameters</code></p>",
        "id": 200484702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827471
    },
    {
        "content": "<p>they serve no useful parsing purpose</p>",
        "id": 200484753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827483
    },
    {
        "content": "<p>They could have made it so the plural versions don't work when there's exactly one thing following.</p>",
        "id": 200484808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591827518
    },
    {
        "content": "<p>lol</p>",
        "id": 200484823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827527
    },
    {
        "content": "<p>Lean grammar police</p>",
        "id": 200484842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591827539
    },
    {
        "content": "<p>maybe we should use <code>variable(s)</code>... except that redeclares an explicit variable <code>s</code></p>",
        "id": 200484905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827591
    },
    {
        "content": "<p>I vote for everything being singular and working as plurals to right now.</p>",
        "id": 200485278,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591827790
    },
    {
        "content": "<p>Also, kill <code>intro</code>, <code>intros</code>, and <code>rintro</code> and rename <code>rintros</code> to <code>intro</code>. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 200485346,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591827822
    },
    {
        "content": "<p>I think there are some dependency hurdles to moving <code>rcases</code> to core, but otherwise I don't think there are any blockers for this</p>",
        "id": 200485511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827899
    },
    {
        "content": "<p>oh, I had planned to extend rcases patterns with type ascriptions so that <code>obtain</code> is a generalization</p>",
        "id": 200485560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591827932
    },
    {
        "content": "<p>Technically <code>variable</code> has a \"purpose\": you don't need parentheses around the binder</p>",
        "id": 200495535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591835808
    },
    {
        "content": "<p>You don't necessarily need parenthesis around <code>variables</code> either:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">variables</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n</code></pre></div>",
        "id": 200495629,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1591835893
    },
    {
        "content": "<p>Oh interesting</p>",
        "id": 200495855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591836210
    }
]