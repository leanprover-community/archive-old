[
    {
        "content": "<p>Do we already have this (or a suitable generalisation of it) somewhere? I can't find it under the name \"infinite descent\" anywhere, but maybe it's called something else?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 264558417,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639223513
    },
    {
        "content": "<p>I don't think there is such theorem. But the proof is pretty straightforward:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"n\">using</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">h₆</span><span class=\"o\">⟩⟩⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₆</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">_</span> <span class=\"n\">h₅</span> <span class=\"n\">h₄</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264562625,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639228980
    },
    {
        "content": "<p>It seems like this would be a useful lemma to have since this proof method comes up fairly often in informal mathematics.  Is it worth PRing it?</p>",
        "id": 264567816,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1639236110
    },
    {
        "content": "<p>An even shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">not_imp_comm</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_and_not_right</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">imp.swap</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264569068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639237780
    },
    {
        "content": "<p>Which demonstrates that there are many equivalent ways that you could have stated <code>h</code> there (try putting the cursor before each comma in <code>simp_rw</code>):</p>\n<ul>\n<li><code>∀ x ∈ S, (¬ P x → ∃ y ∈ S, y &lt; x ∧ ¬ P y)</code> (yours)</li>\n<li><code>∀ x ∈ S, (∀ y ∈ S, y &lt; x → P y) → P x</code> (a variant with no <code>¬</code>s)</li>\n<li><code>∀ x, (∀ y, y &lt; x → y ∈ S → P y) → x ∈ S → P x</code> (the version with the <code>∈ S</code> moved to the end, which makes the statement just strong induction with <code>p x = (x ∈ S → P x)</code>)</li>\n</ul>",
        "id": 264569114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639237805
    },
    {
        "content": "<p>So unless there's anything particularly special about the way you have it stated, I doubt it's worth giving that version a name</p>",
        "id": 264569131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639237827
    }
]